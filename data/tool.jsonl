{"input persona": "A die-hard fan of \"Chasing Life\" who supports renewal of the show.", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Rating and Review Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the name of a TV show as input and returns the current rating, number of reviews, and the latest 5 reviews of the show.\\\",\\n\\\"function_name\\\": \\\"get_tv_show_rating_and_reviews\\\",\\n\\\"input_args\\\": \\\"show_name\\\",\\n\\\"return\\\": \\\"rating, num_reviews, reviews[:5]\\\",\\n\\\"depend\\\": \\\"requests, TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports journalist who has interviewed Michael Jordan multiple times and has insider stories about his career", "synthesized text": "\"{\\n\\\"name\\\": \\\"Michael Jordan Career Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface provides the annual statistics of Michael Jordan's career in the NBA. Given a specific year as input, it returns a detailed summary of his performance during that season.\\\",\\n\\\"function_name\\\": \\\"get_michael_jordan_statistics\\\",\\n\\\"input_args\\\": \\\"year\\\",\\n\\\"return\\\": \\\"A JSON object containing Michael Jordan's statistics for the specified year.\\\",\\n\\\"depend\\\": \\\"Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A WWII veteran who didn't finish high school.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts the text content of a given document into speech, saving the output as an audio file.\\\",\\n\\\"function_name\\\": \\\"document_to_speech\\\",\\n\\\"input_args\\\": [\\\"doc_path\\\"],\\n\\\"return\\\": \\\"audio_path\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS) Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A novelist with an interest in history and a love for dogs.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event and Dog Breed Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about a major historical event that occurred in a specific year and details about a specific dog breed.\\\",\\n\\\"function_name\\\": \\\"get_historical_event_and_dog_breed_info\\\",\\n\\\"input_args\\\": {\\n    \\\"year\\\": \\\"The year for which the user wants to find a major historical event.\\\",\\n    \\\"breed_name\\\": \\\"The breed of the dog about which the user wants information.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Historical Event\\\": \\\"Information about a major historical event in the specified year.\\\",\\n    \\\"Dog Breed Info\\\": \\\"Details about the specified dog breed.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"resources\\\": [\\n        \\\"Python requests library\\\",\\n        \\\"Wikipedia API\\\",\\n        \\\"TheDogAPI\\\"\\n    ]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A senior patent officer with years of experience in the field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patent Search Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to input a patent number and returns all the patent details.\\\",\\n\\\"function_name\\\": \\\"get_patent_details\\\",\\n\\\"input_args\\\": {\\\"patent_number\\\": \\\"An integer or string that represents the patent number.\\\"},\\n\\\"return\\\": \\\"A string that contains all the patent details including the patent title, patent number, date of filing, assignee details, abstract, and all related information.\\\",\\n\\\"depend\\\": \\\"USPTO's Patent Full-Text and Image Database (PatFT) API, Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A heavy metal musician who loves boxing.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Lyrics Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses a GPT-2 model to generate heavy metal song lyrics with a specific theme. The user provides a seed line or phrase related to boxing, and the interface generates a full set of lyrics for a song.\\\",\\n\\\"function_name\\\": \\\"generate_song_lyrics\\\",\\n\\\"input_args\\\": {\\n    \\\"seed_line\\\": \\\"a string that serves as the seed for the song lyrics. It should be related to boxing.\\\",\\n    \\\"num_lines\\\": \\\"an integer that determines how many lines the song should have. Default is 12.\\\"\\n},\\n\\\"return\\\": \\\"a string that represents the lyrics of the generated song.\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library, including the GPT2Tokenizer and GPT2LMHeadModel classes.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A teenager fascinated by the early days of the internet and eager to learn about BBS systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"BBS Post Search Interface\\\",\\n\\\"description\\\": \\\"Interface to search for posts in BBS systems using keywords.\\\",\\n\\\"function_name\\\": \\\"search_bbs_posts\\\",\\n\\\"input_args\\\": [\\\"keywords\\\"],\\n\\\"return\\\": \\\"List of relevant BBS posts.\\\",\\n\\\"depend\\\": \\\"requests library, BBS data provider API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fact-checker at Global Press Journal", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fact-Check Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to verify the facts by using Google Fact Check Tools API. The user inputs a claim and the interface returns the fact-checking results related to the claim.\\\",\\n\\\"function_name\\\": \\\"fact_check\\\",\\n\\\"input_args\\\": [\\\"claim\\\"],\\n\\\"return\\\": \\\"list of dictionaries containing fact-check results\\\",\\n\\\"depend\\\": [\\\"Google Fact Check Tools API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A college theater major revealing a natural knack for comedic timing in family gatherings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Comedy Script Generator Interface\\\",\\n\\\"description\\\": \\\"This interface takes a start of a comedy scene and generates a funny continuation. It uses a GPT-2 model trained on a diverse range of internet text, but has been fine-tuned for humor.\\\",\\n\\\"function_name\\\": \\\"generate_comedy_script\\\",\\n\\\"input_args\\\": {\\n    \\\"scene_start\\\": \\\"string - The initial part of the comedy scene\\\",\\n    \\\"num_return_sequences\\\": \\\"integer - The number of different continuations to generate (default=1)\\\",\\n    \\\"max_length\\\": \\\"integer - The maximum length of each generated script (default=250)\\\"\\n},\\n\\\"return\\\": \\\"list of strings - The generated funny continuations\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A safety officer often consulted for precautionary measures when working on high power electronics", "synthesized text": "\"{\\n\\\"name\\\": \\\"High Voltage Safety Check Interface\\\",\\n\\\"description\\\": \\\"Predicts the risk level of a job involving high voltage electronics based on details of the job such as maximum voltage, job duration, and equipment type.\\\",\\n\\\"function_name\\\": \\\"predict_risk_level\\\",\\n\\\"input_args\\\": {\\n    \\\"model_path\\\": \\\"Path to the trained model\\\",\\n    \\\"max_voltage\\\": \\\"The maximum voltage involved in the job\\\",\\n    \\\"job_duration\\\": \\\"Expected duration of the job in hours\\\",\\n    \\\"equipment_type\\\": \\\"Type of equipment used in the job\\\"\\n},\\n\\\"return\\\": \\\"Predicted risk level as 'Low', 'Medium', or 'High'\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"sklearn\\\", \\\"joblib\\\"],\\n    \\\"machine_learning_models\\\": [\\\"RandomForestClassifier\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A racing fanatic who first heard about the Race of Champions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Race Info Fetch Interface\\\",\\n\\\"description\\\": \\\"Fetches the details about a specific F1 race like race name, date, time, circuit and the winner.\\\",\\n\\\"function_name\\\": \\\"get_race_details\\\",\\n\\\"input_args\\\": {\\n    \\\"year\\\": \\\"The year when the race was conducted.\\\",\\n    \\\"round\\\": \\\"The round of the race.\\\"\\n    },\\n\\\"return\\\": \\\"A dictionary containing details about the race.\\\",\\n\\\"depend\\\": \\\"Uses the Ergast Developer API to fetch data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retired grocery store owner from Colorado who hates alcohol.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alcohol Content Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model to analyze the alcohol content in a list of beverages. The user inputs a list of beverage names, and the interface returns a list of the beverages with their respective alcohol content.\\\",\\n\\\"function_name\\\": \\\"analyze_alcohol_content\\\",\\n\\\"input_args\\\": {\\n    \\\"beverages\\\": \\\"List of beverage names as strings\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, each dictionary contains the beverage name and a boolean indicating whether the beverage contains alcohol or not.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library and a pre-trained DistilBERT model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A customer service representative familiar with the SourceTree system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Git Repository Management Interface\\\",\\n\\\"description\\\": \\\"An interface for managing Git repositories. The user inputs the path to a Git repository and a command, and the interface executes the command and returns the result.\\\",\\n\\\"function_name\\\": \\\"manage_git_repo\\\",\\n\\\"input_args\\\": [\\\"repo_path\\\", \\\"command\\\", \\\"commit_message\\\"],\\n\\\"return\\\": \\\"The result of executing the Git command.\\\",\\n\\\"depend\\\": \\\"GitPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer with expertise in DLL handling.", "synthesized text": "\"{\\n\\\"name\\\": \\\"DLL Handling Interface\\\",\\n\\\"description\\\": \\\"Load a Dynamic-Link Library (DLL) and return an object that can be used to access the functions within the DLL.\\\",\\n\\\"function_name\\\": \\\"load_dll\\\",\\n\\\"input_args\\\": {\\n    \\\"dll_path\\\": \\\"The file path to the DLL file.\\\"\\n},\\n\\\"return\\\": \\\"An object that represents the loaded DLL. Functions within the DLL can be accessed as attributes of this object.\\\",\\n\\\"depend\\\": \\\"Python's ctypes library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A novelist who crafts characters based on the interesting faces seen on public transit", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Features Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to extract complex and high dimensional features from face images. The model used in this interface is a pre-trained MobileNetV2 model from TensorFlow Hub, which was trained on a large number of images and can extract a rich set of features.\\\",\\n\\\"function_name\\\": \\\"extract_face_features\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A numpy array of face features\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, MobileNetV2 Feature Vector\\\"\\n}\"", "description": "tool development"}
{"input persona": "a language teacher frustrated with automated translation errors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Checker and Corrector Interface\\\",\\n\\\"description\\\": \\\"This interface uses the language_tool_python library to check and correct text inputs for grammar, style, and spelling errors.\\\",\\n\\\"function_name\\\": \\\"correct_text\\\",\\n\\\"input_args\\\": \\\"text_to_correct - the text to be corrected, language - the language of the input text (default is 'en-US')\\\",\\n\\\"return\\\": \\\"Corrected text string\\\",\\n\\\"depend\\\": \\\"language_tool_python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A large-scale farmer who shares their knowledge and resources to help navigate the changing tariffs", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tariff Change Alert Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Trade Tariff Service API to monitor the changes in tariffs for a given list of commodities. The user inputs a list of commodity codes, and the interface returns a dictionary with the commodity code as the key and the latest tariff as the value.\\\",\\n  \\\"function_name\\\": \\\"get_latest_tariffs\\\",\\n  \\\"input_args\\\": [\\\"commodity_codes\\\"],\\n  \\\"return\\\": \\\"dictionary with commodity code as key and latest tariff as value\\\",\\n  \\\"depend\\\": \\\"Trade Tariff Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local tour guide who knows the ins and outs of the Australian football scene and can recommend the best stadiums and matches to attend", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stadium and Match Recommendation Interface\\\",\\n\\\"description\\\": \\\"Return the best matches to attend and the stadiums where they will be held, given a date range and a preferred team, leveraging the Sportradar API.\\\",\\n\\\"function_name\\\": \\\"get_best_matches\\\",\\n\\\"input_args\\\": {\\n    \\\"team\\\": \\\"ID of the preferred team\\\",\\n    \\\"start_date\\\": \\\"Start date of the date range in the format 'YYYY-MM-DD'\\\",\\n    \\\"end_date\\\": \\\"End date of the date range in the format 'YYYY-MM-DD'\\\"\\n},\\n\\\"return\\\": \\\"List of dictionaries, each containing a 'match' and 'stadium' key\\\",\\n\\\"depend\\\": \\\"Sportradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local community leader in the 140th district of the Texas House of Representatives, who has been advocating for equal representation and social justice for decades.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legislative Bill Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches and summarizes bill details from the Texas House of Representatives using the ProPublica Congress API.\\\",\\n\\\"function_name\\\": \\\"fetch_bill_details\\\",\\n\\\"input_args\\\": {\\\"bill_id\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"Bill Title\\\": \\\"string\\\", \\\"Bill Summary\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"], \\\"Web APIs\\\": [\\\"ProPublica Congress API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A person from Kodad constituency who always votes against TRS in assembly elections", "synthesized text": "\"{\\n\\\"name\\\": \\\"Electoral Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the outcome of the next election based on the user's constituency and political preference.\\\",\\n\\\"function_name\\\": \\\"predict_election\\\",\\n\\\"input_args\\\": {\\n    \\\"constituency\\\": \\\"The constituency of the user (e.g., 'Kodad')\\\",\\n    \\\"preference\\\": \\\"The political preference of the user (e.g., 'Against TRS')\\\"\\n},\\n\\\"return\\\": \\\"A string that represents the predicted outcome of the next election.\\\",\\n\\\"depend\\\": \\\"Pandas, Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dermatologist who appreciates the natural ingredients and recommends the handmade soap to patients", "synthesized text": "\"{\\n\\\"name\\\": \\\"Natural Ingredient Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get the ingredients of a product by inputting the barcode. It uses the OpenFoodFacts API.\\\",\\n\\\"function_name\\\": \\\"get_soap_ingredients\\\",\\n\\\"input_args\\\": \\\"barcode - the barcode of the product\\\",\\n\\\"return\\\": \\\"A string of the ingredients in the product, or 'Product not found' if the barcode is not found in the database.\\\",\\n\\\"depend\\\": \\\"requests library, OpenFoodFacts API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A group of school children who are invited to engage with the interactive installations and explore math in a creative way", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface takes a mathematical function as input and returns a 3D visualization of the function using PyVista. It is intended for educational purposes, specifically for helping students visualize mathematical concepts in 3D.\\\",\\n\\\"function_name\\\": \\\"plot_math_function\\\",\\n\\\"input_args\\\": {\\n    \\\"function\\\": \\\"A mathematical function that takes two input variables and returns a scalar. Must be a valid Python function.\\\"\\n},\\n\\\"return\\\": \\\"A 3D visualization of the input function. This is displayed in the notebook and is not a return value in the traditional sense.\\\",\\n\\\"depend\\\": \\\"This function depends on the numpy and PyVista Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A resilient agricultural worker who has overcome obstacles and adapted to various work environments", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Crop Disease Detection Interface\\\",\\n  \\\"description\\\": \\\"Detects the disease from a crop leaf image using a TensorFlow model.\\\",\\n  \\\"function_name\\\": \\\"detect_crop_disease\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to the image file of the crop leaf.\\\"\\n  },\\n  \\\"return\\\": \\\"The class ID of the detected disease, which can be matched to the actual disease using the TensorFlow Hub model documentation.\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"],\\n    \\\"machine_learning_model\\\": \\\"TensorFlow Hub AIY Vision Classifier (Plants V1)\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An Afghan Hound breeder who seeks advice on genetic health testing and coat care", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Dog Breed Genetic Health and Coat Care Advice Interface\\\",\\n    \\\"description\\\": \\\"This interface provides advice on genetic health testing and coat care for a specified dog breed. The advice is generated by the OpenAI GPT-3 model based on the breed's characteristics obtained from the Dog API.\\\",\\n    \\\"function_name\\\": \\\"get_genetic_health_and_coat_care_advice\\\",\\n    \\\"input_args\\\": {\\n        \\\"breed\\\": \\\"The name of the dog breed\\\"\\n    },\\n    \\\"return\\\": \\\"Advice on genetic health testing and coat care for the breed.\\\",\\n    \\\"depend\\\": \\\"This function depends on the Dog API for breed information and the OpenAI GPT-3 model for advice generation.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A front desk staff member at various hotels who assists the traveling salesman in finding accommodation near Jon Pardi's tour locations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hotel Search Interface\\\",\\n\\\"description\\\": \\\"This interface utilizes APIs such as Google Places to search for hotels near Jon Pardi's tour locations. It takes the tour location as input and returns a list of nearby hotels.\\\",\\n\\\"function_name\\\": \\\"get_nearby_hotels\\\",\\n\\\"input_args\\\": \\\"tour_location\\\",\\n\\\"return\\\": \\\"A list of nearby hotels.\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An emergency management director who seeks the aerospace engineer's expertise in developing response plans for potential comet impacts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Comet Impact Probability Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the probability of a given comet impacting Earth based on its current trajectory and other factors.\\\",\\n\\\"function_name\\\": \\\"calculate_impact_probability\\\",\\n\\\"input_args\\\": \\\"comet_id - The name or ID of the comet.\\\",\\n\\\"return\\\": \\\"The probability of the comet impacting Earth.\\\",\\n\\\"depend\\\": \\\"JPL Small-Body Database API, Python requests library, Python scipy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A caring and responsible older brother who shares his experiences of adopting a pet and offers advice on pet care", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Adoption Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the RescueGroups API to return a list of adoptable pets based on user's preferences.\\\",\\n\\\"function_name\\\": \\\"get_pet_adoption_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"animal_type\\\": \\\"The type of animal user wants to adopt (e.g., Dog, Cat).\\\",\\n    \\\"breed\\\": \\\"The breed of the animal user prefers (e.g., Labrador Retriever, Persian).\\\",\\n    \\\"age\\\": \\\"The age of the animal user prefers (e.g., Young, Adult).\\\",\\n    \\\"size\\\": \\\"The size of the animal user prefers (e.g., Small, Medium, Large).\\\",\\n    \\\"location\\\": \\\"The location of the user (e.g., 90210, Seattle WA).\\\"\\n},\\n\\\"return\\\": \\\"A list of adoptable pets that match user's preferences. Each pet includes its ID, name, breed, description, sex, and thumbnail URL.\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\"],\\n    \\\"Web_APIs\\\": [\\\"RescueGroups API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A politician who believes that animal welfare laws place unnecessary burdens on pet store owners", "synthesized text": "\"{\\n\\\"name\\\": \\\"Animal Welfare Legislation Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenAI's GPT-3 model to analyze the impact of animal welfare legislation on pet store owners. The user provides the text of the legislation, and the interface returns an analysis of the potential burdens and benefits.\\\",\\n\\\"function_name\\\": \\\"analyze_legislation_impact\\\",\\n\\\"input_args\\\": {\\n    \\\"legislation_text\\\": \\\"The text of the legislation related to animal welfare\\\"\\n},\\n\\\"return\\\": \\\"A string of text analyzing the potential burdens and benefits of the legislation on pet store owners.\\\",\\n\\\"depend\\\": \\\"OpenAI API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A space engineer working on designing spacecraft capable of exploring black holes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Black Hole Trajectory Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simulates the trajectory of a spacecraft around a black hole using the Python library poliastro. Users input the initial position and velocity of the spacecraft, and the mass and position of the black hole, and the interface returns a plot of the spacecraft's trajectory.\\\",\\n\\\"function_name\\\": \\\"simulate_trajectory\\\",\\n\\\"input_args\\\": [\\\"spacecraft_position\\\", \\\"spacecraft_velocity\\\", \\\"blackhole_mass\\\", \\\"blackhole_position\\\"],\\n\\\"return\\\": \\\"A plot of the spacecraft's trajectory around the black hole.\\\",\\n\\\"depend\\\": [\\\"poliastro\\\", \\\"astropy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A physicist researching nuclear physics and its applications in energy production", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nuclear Decay Simulator\\\",\\n\\\"description\\\": \\\"Simulates a nuclear decay process given the initial number of atoms, decay constant, and time duration.\\\",\\n\\\"function_name\\\": \\\"simulate_nuclear_decay\\\",\\n\\\"input_args\\\": {\\n\\\"N0\\\": \\\"Initial number of atoms\\\",\\n\\\"k\\\": \\\"Decay constant\\\",\\n\\\"t\\\": \\\"Time duration\\\"\\n},\\n\\\"return\\\": \\\"Number of atoms remaining after the decay process\\\",\\n\\\"depend\\\": \\\"SciPy, NumPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned bullfighter who constantly challenges them for the title of the best in the arena", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bullfighting Score Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the score of a bullfight based on the bullfighter's name, the bull's breed, and the location of the fight\\\",\\n\\\"function_name\\\": \\\"predict_bullfighting_score\\\",\\n\\\"input_args\\\": [\\\"bullfighter_name\\\", \\\"bull_breed\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"Predicted score (integer)\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A potential patient who's been struggling with depression and considering seeking professional help for a while", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mental Health Professional Finder Interface\\\", \\n\\\"description\\\": \\\"This interface uses the U.S. Department of Health & Human Services' API to find mental health professionals in a specific area. The user inputs their location and the interface returns a list of professionals, their specialties, and contact information.\\\", \\n\\\"function_name\\\": \\\"find_mental_health_professionals\\\", \\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"}, \\n\\\"return\\\": {\\\"name\\\": \\\"string\\\", \\\"specialty\\\": \\\"string\\\", \\\"contact\\\": \\\"string\\\"}, \\n\\\"depend\\\": [\\\"requests\\\", \\\"U.S. Department of Health & Human Services' API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a vintage store owner in Erlanger who's lived all their life in the town.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Vintage Item Price Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the price of a vintage item based on its attributes like category, condition, brand, and size using a pre-trained model from huggingface.\\\",\\n  \\\"function_name\\\": \\\"predict_vintage_item_price\\\",\\n  \\\"input_args\\\": {\\n    \\\"category\\\": \\\"The category of the vintage item (e.g., 'clothing', 'furniture', 'toys').\\\",\\n    \\\"condition\\\": \\\"The condition of the vintage item (e.g., 'excellent', 'good', 'fair').\\\",\\n    \\\"brand\\\": \\\"The brand of the vintage item, if applicable.\\\",\\n    \\\"size\\\": \\\"The size of the vintage item, if applicable.\\\"\\n  },\\n  \\\"return\\\": \\\"The predicted price of the vintage item (in dollars).\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"torch\\\", \\\"transformers\\\"],\\n    \\\"pre-trained model\\\": [\\\"distilbert-base-uncased-finetuned-sst-2-english from huggingface\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An eco-conscious packaging company that provides the coffee roaster with sustainable and biodegradable coffee bags", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Calculator Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the carbon footprint of a coffee bag. The user needs to provide the material used, the weight of the material, and the production process.\\\",\\n\\\"function_name\\\": \\\"calculate_carbon_footprint\\\",\\n\\\"input_args\\\": {\\n    \\\"material\\\": \\\"The material used to produce the coffee bag, e.g., 'bioplastic', 'paper', 'cotton'\\\",\\n    \\\"weight\\\": \\\"The weight of the material used to produce the coffee bag, in grams\\\",\\n    \\\"production_process\\\": \\\"The production process used, e.g., 'standard', 'green'\\\"\\n},\\n\\\"return\\\": \\\"The total carbon footprint of the coffee bag, in grams of CO2 equivalent (gCO2e)\\\",\\n\\\"depend\\\": \\\"This function depends on a database or API that provides accurate emission factors for different materials and processes. In this example, we use a simple dictionary for demonstration purposes.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an elderly bookkeeper who has dedicated his life to meticulous manual record-keeping and has recently been introduced to time-tracking software.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Time Log Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a CSV file path as input and returns a summary of the time spent on different tasks, which is represented as a dictionary where the keys are the tasks and the values are the total time spent on each task in hours.\\\",\\n\\\"function_name\\\": \\\"analyze_time_log\\\",\\n\\\"input_args\\\": \\\"csv_file_path\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are the tasks and the values are the total time spent on each task in hours.\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ignorant individual who has no knowledge about Blumkin", "synthesized text": "\"{\\n\\\"name\\\": \\\"Knowledge Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input a topic and returns a summary of that topic using the Wikipedia API.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_summary\\\",\\n\\\"input_args\\\": {\\\"topic\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (summary of the topic)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Wikipedia API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A history buff who shares fascinating stories about the origins of different writing systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Writing Systems Origin Information Interface\\\",\\n\\\"description\\\": \\\"Fetches information about the origin and historical background of a given writing system from Wikipedia.\\\",\\n\\\"function_name\\\": \\\"get_writing_system_origin_info\\\",\\n\\\"input_args\\\": {\\\"writing_system\\\": \\\"Name of the writing system as a string\\\"},\\n\\\"return\\\": \\\"A string containing the origin and historical information about the writing system. Returns 'No information available' if no data is found.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An honor roll high school student who aspires to be a software engineer and always helps around the house", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chores Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface for setting up reminders for daily chores. It takes a chore and a time, and gives a reminder when the time comes.\\\",\\n\\\"function_name\\\": \\\"chores_reminder\\\",\\n\\\"input_args\\\": {\\n  \\\"chore\\\": \\\"The chore that needs to be done, as a string.\\\",\\n  \\\"time_to_do\\\": \\\"The time when the chore needs to be done, as a string in 24-hour format ('HH:MM').\\\"\\n},\\n\\\"return\\\": \\\"Prints a reminder when the time to do the chore comes. Runs indefinitely until manually interrupted.\\\",\\n\\\"depend\\\": \\\"Python's datetime and schedule libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An immunologist who specializes in studying the body's immune response to different pathogens", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pathogen Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analysing the genetic sequence of a pathogen, returning its length, GC content, and a frequency distribution of all codons.\\\",\\n\\\"function_name\\\": \\\"analyse_pathogen_sequence\\\",\\n\\\"input_args\\\": [\\\"fasta_file\\\"],\\n\\\"return\\\": {\\\"sequence_length\\\": \\\"int\\\", \\\"gc_content\\\": \\\"float\\\", \\\"codon_usage\\\": \\\"dict\\\"},\\n\\\"depend\\\": [\\\"BioPython\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A resident of the city of Burton who works as an accountant but doesn't pay much attention to local government affairs.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Government Affairs News Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches the latest local government affairs news for a specified city.\\\",\\n\\\"function_name\\\": \\\"get_local_government_news\\\",\\n\\\"input_args\\\": \\\"city - Name of the city\\\",\\n\\\"return\\\": \\\"A list of titles of the latest local government affairs news articles for the specified city\\\",\\n\\\"depend\\\": \\\"NewsAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project coordinator working on similar projects, offering tips and tricks for effective project execution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Management Interface\\\",\\n\\\"description\\\": \\\"Generates a project plan with timelines, cost estimates, and risk factors. Returns a project object that contains all the task details and displays a Gantt chart visualization.\\\",\\n\\\"function_name\\\": \\\"generate_project_plan\\\",\\n\\\"input_args\\\": \\\"project_details\\\",\\n\\\"return\\\": \\\"Project object and Gantt chart visualization\\\",\\n\\\"depend\\\": \\\"python-gantt, matplotlib, datetime\\\"\\n}\"", "description": "tool development"}
{"input persona": "A veteran basketball coach from the Summit League, who has seen his fair share of victories and losses, enjoys following the season closely, and likes to compare the pre-season polls and predictions against the actual outcomes.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"NCAA Basketball Prediction Comparison Interface\\\",\\n  \\\"description\\\": \\\"Compares the pre-season predictions against the actual outcomes for NCAA basketball. User inputs a year and the interface returns a comparison between the pre-season predictions and the actual outcomes.\\\",\\n  \\\"function_name\\\": \\\"compare_preseason_postseason\\\",\\n  \\\"input_args\\\": \\\"year\\\",\\n  \\\"return\\\": \\\"DataFrame of schools with their pre-season and post-season ranks\\\",\\n  \\\"depend\\\": \\\"collegefootballdata API, pandas, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "a physical therapist who has treated many patients with Achilles tendon rupture.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Achilles Tendon Recovery Progress Interface\\\",\\n  \\\"description\\\": \\\"Predict the recovery progress of a patient with Achilles tendon rupture based on their age, gender, and how many weeks since the injury.\\\",\\n  \\\"function_name\\\": \\\"predict_recovery_progress\\\",\\n  \\\"input_args\\\": [\\\"age\\\", \\\"gender\\\", \\\"weeks_since_injury\\\"],\\n  \\\"return\\\": \\\"JSON object containing the input data and the predicted recovery progress\\\",\\n  \\\"depend\\\": [\\\"sklearn.ensemble.RandomForestRegressor\\\", \\\"pandas\\\", \\\"trained model on past patient data\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a proud alumnus of Chandpur Government College, a seasoned educator, and a mentor to young minds embarking on their higher education path.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n  \\\"description\\\": \\\"Detects plagiarism in text submitted by students by comparing it to the original text. The higher the similarity score, the more likely the text is plagiarized.\\\",\\n  \\\"function_name\\\": \\\"detect_plagiarism\\\",\\n  \\\"input_args\\\": [\\\"original_text\\\", \\\"suspected_text\\\"],\\n  \\\"return\\\": \\\"A similarity score between the original and suspected plagiarized text. The higher the score, the more likely the text is plagiarized.\\\",\\n  \\\"depend\\\": [\\\"requests library\\\", \\\"DeepAI Text Similarity API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An artist who finds inspiration in the engineer's ability to stay composed under pressure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stress Level Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model from TensorFlow Hub to analyze the stress level from a voice recording.\\\",\\n\\\"function_name\\\": \\\"analyze_stress_level\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"The estimated stress level from the voice recording.\\\",\\n\\\"depend\\\": [\\\"TensorFlow\\\", \\\"TensorFlow Hub\\\", \\\"SciPy\\\", \\\"YAMNet (a pre-trained model from TensorFlow Hub)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A university research administrator offering advice to faculty members on nomination processes for prestigious awards.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nomination Process Guidance Interface\\\",\\n\\\"description\\\": \\\"An interface that provides guidance on the nomination process for prestigious awards. It uses a BERT model for Question Answering to extract relevant information from the award nomination process documents.\\\",\\n\\\"function_name\\\": \\\"provide_guidance\\\",\\n\\\"input_args\\\": [\\\"question\\\", \\\"file_path\\\"],\\n\\\"return\\\": \\\"A string that answers the user's question about the nomination process.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library (BERT for Question Answering)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a traveller looking for unconventional and chill places to visit", "synthesized text": "\"{\\n\\\"name\\\": \\\"Travel Destination Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends lesser-known and relaxing travel destinations within a specified distance from the user's current location.\\\",\\n\\\"function_name\\\": \\\"get_chill_travel_destinations\\\",\\n\\\"input_args\\\": {\\n    \\\"current_location\\\": \\\"The user's current location.\\\",\\n    \\\"max_distance\\\": \\\"The maximum distance the user is willing to travel (in kilometers).\\\"\\n},\\n\\\"return\\\": \\\"A list of suggested travel destinations that are less popular and thus likely to be more relaxing.\\\",\\n\\\"depend\\\": \\\"TripAdvisor API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A group of roommates who are dealing with conflicts over sharing responsibilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Responsibility Allocation Interface\\\",\\n\\\"description\\\": \\\"This interface helps to fairly distribute responsibilities among roommates. The user inputs the tasks and the names of the roommates, and the interface will return a schedule assigning tasks to each roommate evenly.\\\",\\n\\\"function_name\\\": \\\"assign_responsibilities\\\",\\n\\\"input_args\\\": [\\\"roommates - a list of roommate names\\\", \\\"tasks - a list of tasks to be done\\\"],\\n\\\"return\\\": \\\"A dictionary where the keys are the names of the roommates and the values are lists of tasks for each roommate.\\\",\\n\\\"depend\\\": \\\"Python's built-in library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Alexa skill developer who has been experienced in Alexa App-to-App feature", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alexa Skill Invocation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a deep link URL for a specific Alexa skill and command.\\\",\\n\\\"function_name\\\": \\\"generate_alexa_deep_link\\\",\\n\\\"input_args\\\": {\\n    \\\"skill_id\\\": \\\"The ID of the Alexa skill.\\\",\\n    \\\"command\\\": \\\"The specific command to be invoked.\\\"\\n},\\n\\\"return\\\": \\\"A deep link URL for the specified Alexa skill and command.\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A JavaScript developer new to Tizen's TAU library", "synthesized text": "\"{\\n  \\\"name\\\": \\\"TAU Widget Creation\\\",\\n  \\\"description\\\": \\\"Generate the JavaScript code for creating a widget using Tizen's TAU library. The user only needs to provide the type of widget and the target element id.\\\",\\n  \\\"function_name\\\": \\\"generate_widget_code\\\",\\n  \\\"input_args\\\": {\\n    \\\"widget_type\\\": \\\"The type of the TAU widget to create (e.g., 'Slider', 'Button').\\\",\\n    \\\"element_id\\\": \\\"The id of the target element in the HTML file where the widget should be created.\\\"\\n  },\\n  \\\"return\\\": \\\"The JavaScript code for creating the widget.\\\",\\n  \\\"depend\\\": \\\"Jinja2\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young child who becomes captivated by the immersive sound design in animated films", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Effect Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates sound effects based on the description provided by the user.\\\",\\n\\\"function_name\\\": \\\"text_to_sound\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"An AudioSegment instance representing the generated sound effect.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\", \\\"pydub\\\"], \\\"machine learning models\\\": [\\\"facebook/wav2vec2-large-960h\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A parent blogger who shares resources and tips for supporting children's math learning at home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Math Problem Solver Interface\\\",\\n\\\"description\\\": \\\"This interface takes a mathematical problem as a string and returns the solution.\\\",\\n\\\"function_name\\\": \\\"math_problem_solver\\\",\\n\\\"input_args\\\": \\\"problem_string\\\",\\n\\\"return\\\": \\\"solution\\\",\\n\\\"depend\\\": \\\"Sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Friday the 13th super fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Rating and Review Interface\\\",\\n\\\"description\\\": \\\"Fetch ratings, reviews, and other details about a movie.\\\",\\n\\\"function_name\\\": \\\"get_movie_details\\\",\\n\\\"input_args\\\": \\\"movie_title\\\",\\n\\\"return\\\": \\\"Dictionary with movie's title, release date, average vote rating, and overview.\\\",\\n\\\"depend\\\": \\\"The Movie Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An underpaid teacher in the UK", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automatic Quiz Generator\\\",\\n\\\"description\\\": \\\"This interface utilizes the Wikipedia API to extract information on a given topic and the GPT-3 model from OpenAI to generate multiple-choice questions based on the extracted information.\\\",\\n\\\"function_name\\\": \\\"generate_quiz\\\",\\n\\\"input_args\\\": [\\n    {\\\"name\\\": \\\"topic\\\", \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The topic on which to generate the quiz.\\\"},\\n    {\\\"name\\\": \\\"num_questions\\\", \\\"type\\\": \\\"int\\\", \\\"description\\\": \\\"The number of quiz questions to generate.\\\"}\\n  ],\\n\\\"return\\\": \\\"A list of multiple-choice questions in string format.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"openai\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An Indian film enthusiast and reporter who has a great memory for award ceremonies.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Awards Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about the awards won and nominations for a specific movie.\\\",\\n\\\"function_name\\\": \\\"get_movie_awards\\\",\\n\\\"input_args\\\": \\\"title\\\",\\n\\\"return\\\": \\\"A string that describes the awards won and nominations for the movie.\\\",\\n\\\"depend\\\": \\\"OMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local cycling enthusiast from Almería", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Elevation Profile Interface\\\",\\n\\\"description\\\": \\\"Provides the elevation profile of a given cycling route using Google's Elevation API.\\\",\\n\\\"function_name\\\": \\\"get_route_elevation\\\",\\n\\\"input_args\\\": {\\n    \\\"start_point\\\": \\\"The starting point of the route.\\\",\\n    \\\"end_point\\\": \\\"The ending point of the route.\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples, where each tuple contains the latitude, longitude, and elevation (in meters) of a certain point along the route.\\\",\\n\\\"depend\\\": [\\\"Google's Elevation API\\\", \\\"Requests library\\\", \\\"Polyline library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A historian focusing on Iraq's political history during the 20th century.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Historical Event Extraction Interface\\\",\\n    \\\"description\\\": \\\"Extracts historical events from a given text focused on Iraq's political history during the 20th century using a Named Entity Recognition model.\\\",\\n    \\\"function_name\\\": \\\"extract_historical_events\\\",\\n    \\\"input_args\\\": {\\\"text\\\": \\\"string\\\"},\\n    \\\"return\\\": {\\\"events\\\": \\\"list of strings\\\"},\\n    \\\"depend\\\": \\\"Hugging Face Transformers library, Named Entity Recognition model ('dbmdz/bert-large-cased-finetuned-conll03-english')\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a local business owner who is deeply invested in community development and political affairs in Shoalhaven, New South Wales.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Government Meeting Minutes Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search keywords in the minutes from local council meetings on the Shoalhaven City Council website.\\\",\\n\\\"function_name\\\": \\\"search_meeting_minutes\\\",\\n\\\"input_args\\\": \\\"keyword\\\",\\n\\\"return\\\": \\\"A list of tuples, each containing a meeting date and a link to the meeting minutes where the keyword was mentioned.\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced epidemiologist sharing firsthand knowledge of disease prevention strategies", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Virus Spread Simulation Interface\\\",\\n  \\\"description\\\": \\\"An interface to simulate the spread of a virus in a network using the EpiModel library in R. The user inputs the basic reproduction number (R0), the recovery rate, and the network size, and the interface returns a simulation of the disease spread.\\\",\\n  \\\"function_name\\\": \\\"simulate_virus_spread\\\",\\n  \\\"input_args\\\": {\\n    \\\"R0\\\": \\\"The basic reproduction number of the virus\\\",\\n    \\\"recovery_rate\\\": \\\"The recovery rate of the virus\\\",\\n    \\\"network_size\\\": \\\"The size of the network to simulate the spread in\\\"\\n  },\\n  \\\"return\\\": \\\"A simulation of the disease spread in the network.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"rpy2.robjects\\\"],\\n    \\\"R libraries\\\": [\\\"EpiModel\\\"],\\n    \\\"Web APIs\\\": [],\\n    \\\"Machine Learning Models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A frustrated former AT&T customer who had difficulty with MicroCell deactivation", "synthesized text": "\"{\\n    \\\"name\\\": \\\"MicroCell Deactivation Interface\\\",\\n    \\\"description\\\": \\\"An interface for deactivating a MicroCell using AT&T's web API. The user only needs to provide their account credentials and the MicroCell's serial number.\\\",\\n    \\\"function_name\\\": \\\"deactivate_microcell\\\",\\n    \\\"input_args\\\": {\\n        \\\"account_username\\\": \\\"The user's AT&T account username\\\",\\n        \\\"account_password\\\": \\\"The user's AT&T account password\\\",\\n        \\\"microcell_serial\\\": \\\"The serial number of the MicroCell to be deactivated\\\"\\n    },\\n    \\\"return\\\": \\\"A message confirming the MicroCell has been deactivated\\\",\\n    \\\"depend\\\": \\\"requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chemist with a background in developing e-liquid flavors and nicotine alternatives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flavor Compound Analysis Interface\\\",\\n\\\"description\\\": \\\"Predicts the flavor profile of a chemical compound given its molecular structure in SMILES format\\\",\\n\\\"function_name\\\": \\\"predict_flavor\\\",\\n\\\"input_args\\\": {\\n    \\\"smiles\\\": \\\"String - Molecular structure of the compound in SMILES format\\\"\\n},\\n\\\"return\\\": \\\"List - Predicted flavor profile of the compound\\\",\\n\\\"depend\\\": \\\"rdkit, pytorch, pre-trained flavor prediction model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A startup founder seeking guidance on structuring their build process using MSBuild", "synthesized text": "\"{\\n\\\"name\\\": \\\"MSBuild Project Dependency Graph Interface\\\",\\n\\\"description\\\": \\\"An interface to extract a dependency graph from an MSBuild project file (.csproj or .vbproj). This can help users understand the structure of their build process.\\\",\\n\\\"function_name\\\": \\\"create_dependency_graph\\\",\\n\\\"input_args\\\": [\\\"project_file\\\"],\\n\\\"return\\\": \\\"A dependency graph dictionary where keys are project file names and values are lists of dependent project file names.\\\",\\n\\\"depend\\\": [\\\"Python's xml library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A professional Node.js programmer working on geospatial applications", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Geospatial Data Processing Interface\\\",\\n  \\\"description\\\": \\\"An interface to simplify geospatial data from a shapefile or GeoJSON file using the Douglas-Peucker algorithm. Higher tolerance values will result in more simplified shapes.\\\",\\n  \\\"function_name\\\": \\\"simplify_geospatial_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the shapefile or GeoJSON file.\\\",\\n    \\\"tolerance\\\": \\\"The tolerance parameter for the Douglas-Peucker algorithm. Higher values will result in more simplified shapes.\\\"\\n  },\\n  \\\"return\\\": \\\"A GeoDataFrame with simplified geometric objects.\\\",\\n  \\\"depend\\\": \\\"This function leverages the Geopandas Python library and the Shapely library for geometric operations.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who frequently shops at COSTCO and always mistakenly searches \"Cosco\".", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Store Name Correction Interface\\\",\\n  \\\"description\\\": \\\"Corrects common misspellings of the word 'COSTCO'. Currently only corrects 'Cosco' to 'COSTCO', but can be expanded to other misspellings.\\\",\\n  \\\"function_name\\\": \\\"correct_store_name\\\",\\n  \\\"input_args\\\": {\\n    \\\"name\\\": \\\"the store name the user is looking for\\\"\\n  },\\n  \\\"return\\\": \\\"the corrected store name\\\",\\n  \\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "a prospective student looking to study Publishing at George Washington University", "synthesized text": "\"{\\n\\\"name\\\": \\\"University Course Information Interface\\\",\\n\\\"description\\\": \\\"An interface to gather information about a specific course from a university's website. The user provides the name of the university and the course, and receives a description of the course, its requirements, and the faculty members teaching it.\\\",\\n\\\"function_name\\\": \\\"get_course_info\\\",\\n\\\"input_args\\\": [\\\"university_name\\\", \\\"course_name\\\"],\\n\\\"return\\\": {\\\"description\\\": \\\"string\\\", \\\"requirements\\\": \\\"list of strings\\\", \\\"faculty\\\": \\\"list of strings\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Excitable '80s music enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"Spotify Playlist Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a Spotify playlist of '80s music based on the user's favorite '80s artist. The playlist includes songs from the specified artist and similar ones.\\\",\\n\\\"function_name\\\": \\\"generate_80s_playlist\\\",\\n\\\"input_args\\\": {\\\"favorite_artist\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"URL of the generated Spotify playlist (string)\\\",\\n\\\"depend\\\": {\\\"Web APIs\\\": [\\\"Spotify Web API\\\"], \\\"Python libraries\\\": [\\\"spotipy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Annoyed and Worried Parent", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Online Activity Monitor\\\",\\n\\\"description\\\": \\\"This interface monitors a child's online activity and alerts the parent if any inappropriate content is detected.\\\",\\n\\\"function_name\\\": \\\"monitor_child_activity\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"An alert message if inappropriate content is detected or a message indicating no inappropriate content was found.\\\",\\n\\\"depend\\\": [\\\"Python's request library\\\", \\\"BeautifulSoup for web scraping\\\", \\\"Perspective API for content moderation\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A financial institution representative who is interested in implementing the secure payment system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure Payment Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Stripe API to process secure payments. It takes the amount, currency, and customer's card details as input and returns the status of the payment.\\\",\\n\\\"function_name\\\": \\\"process_payment\\\",\\n\\\"input_args\\\": [\\\"amount\\\", \\\"currency\\\", \\\"card_number\\\", \\\"exp_month\\\", \\\"exp_year\\\", \\\"cvc\\\"],\\n\\\"return\\\": \\\"The status of the payment (e.g., 'succeeded')\\\",\\n\\\"depend\\\": \\\"Stripe API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Finnish airline pilot with 15 years of experience flying commercial planes.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Flight Weather Information Interface\\\",\\n  \\\"description\\\": \\\"Fetches and returns the current weather information for a specified city. Useful for pilots to check weather conditions.\\\",\\n  \\\"function_name\\\": \\\"get_weather_info\\\",\\n  \\\"input_args\\\": \\\"city_name\\\",\\n  \\\"return\\\": \\\"Dictionary with weather information or error message.\\\",\\n  \\\"depend\\\": \\\"Python requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A counter-terrorism expert who regularly contributes to think tank discussions on South Asian security issues", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Terrorist Activity Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the Global Terrorism Database API to fetch and summarize information about terrorist activities in a given country.\\\",\\n  \\\"function_name\\\": \\\"get_terrorist_activities\\\",\\n  \\\"input_args\\\": \\\"country - a string that represents the name of the country\\\",\\n  \\\"return\\\": \\\"A dictionary with a summary of terrorist activities in the country. The dictionary includes total number of incidents, number of major attacks, and a count of incidents by the terrorist group.\\\",\\n  \\\"depend\\\": \\\"Python libraries: requests, pandas; Web APIs: Global Terrorism Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A legal expert who ensures that OVS implementation aligns with telecommunications regulations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Telecommunications Regulation Compliance Interface\\\",\\n\\\"description\\\": \\\"This interface checks whether the current OVS implementation is compliant with a specific telecommunications regulation.\\\",\\n\\\"function_name\\\": \\\"check_compliance_with_regulation\\\",\\n\\\"input_args\\\": \\\"regulation_id - the ID of the regulation to check for compliance with\\\",\\n\\\"return\\\": \\\"boolean value - True if the OVS implementation is compliant with the regulation, False otherwise.\\\",\\n\\\"depend\\\": \\\"Legal database API, Internal system API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced XAML developer who shares tips and tricks to optimize code and improve performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"XAML Code Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface optimizes a XAML code file by removing unnecessary attributes, improving performance and code readability.\\\",\\n\\\"function_name\\\": \\\"optimize_xaml\\\",\\n\\\"input_args\\\": \\\"path_to_xaml\\\",\\n\\\"return\\\": \\\"This function doesn't return a value. The input XAML file is modified in-place.\\\",\\n\\\"depend\\\": \\\"python's xml.etree.ElementTree module\\\"\\n}\"", "description": "tool development"}
{"input persona": "A CEO of a large electronics manufacturing company resistant to implementing sustainable practices due to cost factors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Calculation Interface\\\",\\n\\\"description\\\": \\\"Estimates the carbon footprint of a company based on its operations and manufacturing processes.\\\",\\n\\\"function_name\\\": \\\"calculate_carbon_footprint\\\",\\n\\\"input_args\\\": {\\n    \\\"energy_usage\\\": \\\"Annual energy usage of the company in kilowatt-hours (kWh)\\\",\\n    \\\"waste_produced\\\": \\\"Annual waste produced by the company in tonnes\\\",\\n    \\\"transportation_distance\\\": \\\"Annual distance covered by the company's transportation in kilometres\\\",\\n    \\\"num_employees\\\": \\\"Number of employees in the company\\\"\\n},\\n\\\"return\\\": \\\"Estimated annual carbon footprint of the company in tonnes of CO2 equivalent.\\\",\\n\\\"depend\\\": [\\\"sklearn.externals.joblib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A competitor who focuses on creating extravagant, modern casinos with flashy attractions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Casino Design Inspiration Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest design trends and inspirations from Pinterest based on the input design type. It uses web scraping to fetch the relevant Pinterest pins.\\\",\\n\\\"function_name\\\": \\\"get_design_inspiration\\\",\\n\\\"input_args\\\": \\\"design_type - A string indicating the type of design inspiration user is looking for.\\\",\\n\\\"return\\\": \\\"A list of URLs of Pinterest pins related to the input design type.\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "as an emerging artist who have worked in multiple art galleries, looking for opportunities in bigger platforms.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Art Exhibition Opportunity Finder\\\",\\n\\\"description\\\": \\\"This interface provides users with a list of art exhibition opportunities that match their art style.\\\",\\n\\\"function_name\\\": \\\"get_art_exhibition_opportunities\\\",\\n\\\"input_args\\\": [\\\"style\\\"],\\n\\\"return\\\": \\\"A list of art exhibition opportunities that match the given style.\\\",\\n\\\"depend\\\": [\\\"Art Institute of Chicago API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A webmaster who is always conscious about user security and web standards compliance.", "synthesized text": "\"{\\n\\\"Issued To\\\": {\\n    \\\"C\\\": \\\"US\\\",\\n    \\\"ST\\\": \\\"California\\\",\\n    \\\"L\\\": \\\"Mountain View\\\",\\n    \\\"O\\\": \\\"Google LLC\\\",\\n    \\\"CN\\\": \\\"*.google.com\\\"\\n},\\n\\\"Issued By\\\": {\\n    \\\"C\\\": \\\"US\\\",\\n    \\\"O\\\": \\\"Google Trust Services\\\",\\n    \\\"CN\\\": \\\"GTS CA 1O1\\\"\\n},\\n\\\"Validity Start\\\": \\\"20210803083636Z\\\",\\n\\\"Validity End\\\": \\\"20211026183635Z\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional athlete who credits the optometrist's treatment for improving their performance on the field", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Visual Acuity Test Interface\\\",\\n  \\\"description\\\": \\\"An interface for a visual acuity test. The user inputs the path to a video file where they are identifying objects from a distance, and the interface returns a score based on how accurately and quickly they identified the objects.\\\",\\n  \\\"function_name\\\": \\\"object_detection\\\",\\n  \\\"input_args\\\": \\\"path_to_video\\\",\\n  \\\"return\\\": \\\"score\\\",\\n  \\\"depend\\\": \\\"OpenCV, TensorFlow Hub, TensorFlow, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A busy working professional who relies on the kitchen automation system to simplify meal preparation", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Recipe Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Spoonacular Food API to recommend recipes based on the ingredients provided by the user. It returns a recipe that includes the title, ingredients, and cooking instructions.\\\",\\n  \\\"function_name\\\": \\\"get_recipe_from_ingredients\\\",\\n  \\\"input_args\\\": [\\\"ingredients\\\"],\\n  \\\"return\\\": {\\n    \\\"title\\\": \\\"Recipe Title\\\",\\n    \\\"ingredients\\\": \\\"List of Ingredients\\\",\\n    \\\"instructions\\\": \\\"Cooking Instructions\\\"\\n  },\\n  \\\"depend\\\": \\\"Spoonacular Food API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an existing investor in Outdoor Voices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Investor Information Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a company name as input and returns a list of investors in that company.\\\",\\n\\\"function_name\\\": \\\"get_investors\\\",\\n\\\"input_args\\\": \\\"company_name\\\",\\n\\\"return\\\": \\\"List of investors in the company\\\",\\n\\\"depend\\\": \\\"Python's requests and Beautiful Soup libraries for web scraping\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports physiologist who collaborates on research projects and provides expertise on the physiological aspects of running", "synthesized text": "\"{\\n\\\"name\\\": \\\"Running Performance Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model trained on physiological metrics to predict running performance, such as the time to complete a marathon.\\\",\\n\\\"function_name\\\": \\\"predict_marathon_time\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"weight\\\", \\\"height\\\", \\\"resting_hr\\\", \\\"max_hr\\\"],\\n\\\"return\\\": \\\"Predicted marathon completion time in minutes\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Ali, a 22-year-old university student studying Software Engineering with a keen interest in new and emerging technologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI News Article Summarization Interface\\\",\\n\\\"description\\\": \\\"An interface that accepts the URL of an article and returns a short summary of the article.\\\",\\n\\\"function_name\\\": \\\"summarize_article\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"Summary of the article as a string\\\",\\n\\\"depend\\\": [\\\"gensim\\\", \\\"requests\\\", \\\"bs4\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Ruby developer who actively participates in online forums and can provide advice and resources specific to Ruby and Azure API", "synthesized text": "\"{\\n\\\"name\\\": \\\"Azure Resource Management Interface\\\",\\n\\\"description\\\": \\\"Interface to interact with Azure Resource Manager for managing resources in Azure\\\",\\n\\\"function_name\\\": \\\"get_azure_resource_management_client\\\",\\n\\\"input_args\\\": {\\\"subscription_id\\\": \\\"string\\\", \\\"client_id\\\": \\\"string\\\", \\\"client_secret\\\": \\\"string\\\", \\\"tenant_id\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"ResourceManagementClient object\\\",\\n\\\"depend\\\": \\\"Azure SDK for Python\\\"\\n}\"", "description": "tool development"}
{"input persona": "a big fan of Frank Sinatra", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Spotify's Web API to recommend similar artists based on a given artist's name.\\\",\\n\\\"function_name\\\": \\\"get_similar_artists\\\",\\n\\\"input_args\\\": [\\n    {\\n        \\\"name\\\": \\\"artist_name\\\",\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"description\\\": \\\"Name of the artist\\\"\\n    }\\n],\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"list of strings\\\",\\n    \\\"description\\\": \\\"List of names of similar artists\\\"\\n},\\n\\\"depend\\\": [\\\"spotipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "As an alumnus of Boston College and a former college athlete with a deep passion for collegiate sports and its positive impact on students and institutions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"NCAA Sports Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a wealth of statistical data about a specified NCAA football team's performance in the current season using the collegefootballdata.com API.\\\",\\n\\\"function_name\\\": \\\"get_ncaa_team_stats\\\",\\n\\\"input_args\\\": {\\n    \\\"team\\\": \\\"string\\\"\\n    },\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"json\\\",\\n    \\\"description\\\": \\\"A json object containing a wealth of statistical data about the team's performance in the current season\\\"\\n    },\\n\\\"depend\\\": {\\n    \\\"python library\\\": [\\\"requests\\\"],\\n    \\\"web API\\\": [\\\"https://api.collegefootballdata.com\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A proponent of simplified global communication who advocates for a single universal language", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation Interface\\\", \\n\\\"description\\\": \\\"This interface takes a piece of text and a target language as input, and returns the text translated into the target language. It uses the Google Translate API for translation.\\\", \\n\\\"function_name\\\": \\\"translate_text\\\", \\n\\\"input_args\\\": {\\\"input_text\\\": \\\"string\\\", \\\"target_language\\\": \\\"string\\\"}, \\n\\\"return\\\": \\\"string\\\", \\n\\\"depend\\\": \\\"Google Translate API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cybersecurity analyst who helps identify potential security risks and vulnerabilities in jailbroken devices", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Jailbroken Device Risk Assessment Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the VirusTotal API to generate a threat analysis report for a given file or URL. This report can help identify potential security risks and vulnerabilities in jailbroken devices.\\\",\\n  \\\"function_name\\\": \\\"get_threat_report\\\",\\n  \\\"input_args\\\": {\\n    \\\"resource\\\": \\\"The file or URL to be analysed for potential security risks.\\\"\\n  },\\n  \\\"return\\\": \\\"A threat analysis report, returned as a JSON object, detailing the potential risks and vulnerabilities associated with the input file or URL.\\\",\\n  \\\"depend\\\": \\\"VirusTotal API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer science major fascinated by the potential applications of bioinformatics in cybersecurity", "synthesized text": "\"{\\n  \\\"name\\\": \\\"DNA Sequence Alignment Interface\\\",\\n  \\\"description\\\": \\\"An interface to align two DNA, RNA, or protein sequences using the Biopython library. This function will return the optimal alignment between the two sequences.\\\",\\n  \\\"function_name\\\": \\\"align_sequences\\\",\\n  \\\"input_args\\\": [\\\"seq1\\\", \\\"seq2\\\"],\\n  \\\"return\\\": \\\"A string representing the optimal alignment between the two sequences\\\",\\n  \\\"depend\\\": [\\\"Biopython\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A first-time parent looking for effective strategies to manage twins' sleep schedules", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baby Sleep Schedule Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to suggest an optimized sleep schedule for managing twins based on current sleep patterns, feeding times, and other relevant factors.\\\",\\n\\\"function_name\\\": \\\"optimize_sleep_schedule\\\",\\n\\\"input_args\\\": \\\"input_data - A dictionary containing details about the twins' current sleep patterns, feeding times, and any other relevant factors\\\",\\n\\\"return\\\": \\\"A list containing the suggested optimized sleep schedule for managing the twins\\\",\\n\\\"depend\\\": \\\"sklearn, pandas, joblib\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Montana local who believes in the importance of science and public health regulations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"COVID-19 Data Retrieval\\\",\\n  \\\"description\\\": \\\"Fetches the latest COVID-19 data for the user's specified location\\\",\\n  \\\"function_name\\\": \\\"get_covid19_data\\\",\\n  \\\"input_args\\\": {\\\"location\\\": \\\"string\\\"},\\n  \\\"return\\\": {\\\"Confirmed Cases\\\": \\\"int\\\", \\\"Deaths\\\": \\\"int\\\", \\\"Recovered\\\": \\\"int\\\", \\\"Active Cases\\\": \\\"int\\\", \\\"Last Updated\\\": \\\"datetime\\\"},\\n  \\\"depend\\\": {\\\"requests\\\": \\\"Python library\\\", \\\"COVID-19 Data API\\\": \\\"Web API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A playwright who draws inspiration from the iconic films and screenplays of old Hollywood", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Script Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to analyze film scripts, extracting key elements such as character names, locations, and actions.\\\",\\n\\\"function_name\\\": \\\"analyze_script\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_script\\\": \\\"The path to the script file to be analyzed.\\\"\\n},\\n\\\"return\\\": \\\"A structured analysis of the script, including character names, locations, and actions.\\\",\\n\\\"depend\\\": \\\"Python libraries: transformers, torch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chemical engineer who applies principles of molecular interactions to design and optimize chemical processes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Molecular Interactions Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts properties of a molecule crucial for drug design, based on its SMILES notation. Properties include molecular weight, number of hydrogen bond donors and acceptors, and logP value.\\\",\\n  \\\"function_name\\\": \\\"predict_molecular_interactions\\\",\\n  \\\"input_args\\\": {\\n    \\\"smiles\\\": \\\"string representation of a molecule (SMILES notation)\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"molecular_weight\\\": \\\"Predicted molecular weight\\\",\\n    \\\"num_h_donors\\\": \\\"Predicted number of hydrogen bond donors\\\",\\n    \\\"num_h_acceptors\\\": \\\"Predicted number of hydrogen bond acceptors\\\",\\n    \\\"logp\\\": \\\"Predicted logP value\\\"\\n  },\\n  \\\"depend\\\": \\\"RDKit Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a graduate chemistry student who admires Emily Carter and David MacMillan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Molecule Structure Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the 3D structure of a molecule based on its SMILES representation using the AlphaFold2 model.\\\",\\n\\\"function_name\\\": \\\"smiles_to_3d_structure\\\",\\n\\\"input_args\\\": {\\\"smiles\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"3D coordinates of the atoms in the molecule (numpy array)\\\",\\n\\\"depend\\\": \\\"rdkit, alphafold2_pytorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Greek scientist who has worked at FORTH for several years", "synthesized text": "\"{\\n\\\"name\\\": \\\"Protein Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a protein sequence and returns a detailed analysis about the composition and properties of the protein.\\\",\\n\\\"function_name\\\": \\\"protein_analysis\\\",\\n\\\"input_args\\\": {\\n    \\\"protein_sequence\\\": \\\"A string of amino acids representing a protein sequence.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Molecular Weight\\\": \\\"The molecular weight of the protein.\\\",\\n    \\\"Aromaticity\\\": \\\"The proportion of aromatic amino acids (Phe+Trp+Tyr).\\\",\\n    \\\"Instability Index\\\": \\\"This index provides a measure of the stability of the protein in a test tube.\\\",\\n    \\\"Secondary Structure Fraction\\\": \\\"A tuple with information about the fraction of amino acids which tend to be in helix, turn or sheet.\\\",\\n    \\\"Amino Acid Percent\\\": \\\"A dictionary of the percent occurrence for each amino acid in the protein.\\\"\\n},\\n\\\"depend\\\": \\\"Biopython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from the Ministry of Education, advocating for the incorporation of VR technology in the national curriculum", "synthesized text": "\"{\\n\\\"name\\\": \\\"VR Educational Content Interface\\\",\\n\\\"description\\\": \\\"This interface provides access to a large collection of 3D assets and VR scenes that can be used for educational purposes. Users input a search term related to the content they are looking for, and the interface returns a list of related VR content available.\\\",\\n\\\"function_name\\\": \\\"get_vr_educational_content\\\",\\n\\\"input_args\\\": {\\n    \\\"search_term\\\": \\\"A string representing the educational content the user is looking for (e.g., 'biology', 'history', 'mathematics')\\\"\\n},\\n\\\"return\\\": \\\"A list of strings representing the names of the related VR content available.\\\",\\n\\\"depend\\\": \\\"This function leverages the Google Poly API\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a community manager of an online quilting forum", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Text to Speech Interface\\\",\\n  \\\"description\\\": \\\"Converts a given text into speech and saves it as an MP3 file.\\\",\\n  \\\"function_name\\\": \\\"text_to_speech\\\",\\n  \\\"input_args\\\": {\\\"text\\\": \\\"string\\\", \\\"language\\\": \\\"string (optional)\\\", \\\"slow\\\": \\\"bool (optional)\\\"},\\n  \\\"return\\\": \\\"string (path to the generated MP3 file)\\\",\\n  \\\"depend\\\": \\\"gtts library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular gaming content creator who showcases the modder's voice packs in their videos", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voice Change Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to a source audio file and a target audio file, and returns an audio file where the source voice is modified to sound like the target voice.\\\",\\n\\\"function_name\\\": \\\"change_voice\\\",\\n\\\"input_args\\\": [\\\"source_voice_path\\\", \\\"target_voice_path\\\"],\\n\\\"return\\\": \\\"Path to the converted audio file\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\", \\\"soundfile\\\", \\\"librosa\\\"], \\\"Machine Learning Models\\\": [\\\"Voice conversion model from TensorFlow Hub\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A journalist interested in understanding the limitations and controversies of IQ testing", "synthesized text": "\"{\\n\\\"name\\\": \\\"IQ Test Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a provided text and returns the major limitations, controversies and criticisms associated with IQ testing mentioned in the text.\\\",\\n\\\"function_name\\\": \\\"analyze_iq_controversies\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"A text string about IQ test.\\\"},\\n\\\"return\\\": {\\\"Controversies\\\": \\\"A Counter object with controversy-related words and their frequencies.\\\", \\\"Limitations\\\": \\\"A Counter object with limitation-related words and their frequencies.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"NLTK\\\"], \\\"web APIs\\\": [\\\"WordNet\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am a diplomat with extensive experience in international relations, particularly in matters concerning sovereignty, territorial integrity, and international law.", "synthesized text": "\"{\\n\\\"name\\\": \\\"UN Resolutions Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for United Nations resolutions based on a specific topic. The user inputs a topic and gets back the titles and document symbols of related UN resolutions.\\\",\\n\\\"function_name\\\": \\\"search_un_resolutions\\\",\\n\\\"input_args\\\": {\\\"topic\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"list of dicts: [{'title': 'string', 'symbol': 'string'}, ...]\\\",\\n\\\"depend\\\": \\\"requests library, UN documentation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional muralist who believes in seeking permissions and following the rules set by local authorities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Muralist Legal Permit Interface\\\",\\n\\\"description\\\": \\\"An interface for muralists to get information about the necessary legal permits in their city. The interface will return the contact information of the local authorities responsible for granting such permits.\\\",\\n\\\"function_name\\\": \\\"get_muralist_permit_info\\\",\\n\\\"input_args\\\": \\\"city - The city where the muralist plans to paint a mural.\\\",\\n\\\"return\\\": \\\"Returns a list of dictionaries. Each dictionary contains the name, office, phone numbers, and email addresses (if available) of a local authority responsible for granting muralist permits.\\\",\\n\\\"depend\\\": \\\"Python requests library, Google Civic Information API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly woman suffering from hypertension in rural China.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Blood Pressure Prediction Interface\\\",\\n  \\\"description\\\": \\\"This interface predicts a user's blood pressure based on their lifestyle factors such as diet, exercise, smoking, alcohol consumption, sleep, and stress. The user inputs their lifestyle factors and the interface returns a blood pressure prediction.\\\",\\n  \\\"function_name\\\": \\\"predict_blood_pressure\\\",\\n  \\\"input_args\\\": [\\\"diet\\\", \\\"exercise\\\", \\\"smoking\\\", \\\"alcohol\\\", \\\"sleep\\\", \\\"stress\\\"],\\n  \\\"return\\\": \\\"A prediction of the user's blood pressure.\\\",\\n  \\\"depend\\\": \\\"scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a stage play enthusiast living in Danville, California.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Theater Show Finder\\\",\\n\\\"description\\\": \\\"Finds upcoming theater shows in a specified location and date range using the Ticketmaster API.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_shows\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"List of dictionaries, each representing a theater show with its name, date, and venue.\\\",\\n\\\"depend\\\": \\\"requests library, Ticketmaster API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cloud architect specializing in designing and implementing distributed database systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Health Check Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check the health status of their PostgreSQL database by connecting to the database using the provided connection details. If the connection is successful, the database is considered healthy.\\\",\\n\\\"function_name\\\": \\\"check_database_health\\\",\\n\\\"input_args\\\": [\\\"database_name\\\", \\\"user\\\", \\\"password\\\", \\\"host\\\", \\\"port\\\"],\\n\\\"return\\\": \\\"Returns 'Healthy' if the database connection is successful, 'Unhealthy' otherwise.\\\",\\n\\\"depend\\\": \\\"psycopg2 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young aspiring female tennis player and Constance Luard's fan.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tennis Match Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that uses sports data APIs to fetch the latest match statistics of a specified professional tennis player.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": \\\"player_name - The name of the professional tennis player whose statistics are to be fetched.\\\",\\n\\\"return\\\": \\\"A JSON object containing the player's latest match statistics such as aces, double faults, first serve percentage, etc.\\\",\\n\\\"depend\\\": \\\"Uses the SportsData.io Tennis API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a happy and satisfied patient of Dr. Shishir Agarwal", "synthesized text": "\"{\\n\\\"name\\\": \\\"Doctor Rating Interface\\\",\\n\\\"description\\\": \\\"This interface provides the average rating and total number of reviews for a specified doctor using the Healthgrades API.\\\",\\n\\\"function_name\\\": \\\"get_doctor_rating\\\",\\n\\\"input_args\\\": {\\\"doctor_name\\\": \\\"String representing the doctor's name\\\"},\\n\\\"return\\\": {\\\"average_rating\\\": \\\"Float representing the average rating\\\", \\\"total_reviews\\\": \\\"Integer representing the total number of reviews\\\"},\\n\\\"depend\\\": \\\"Web API: Healthgrades API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A drunken Alehouse Bard who sees the humor in everything.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Joke Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a joke related to the given topic by leveraging the GPT-2 model from Huggingface.\\\",\\n\\\"function_name\\\": \\\"generate_joke\\\",\\n\\\"input_args\\\": {\\n    \\\"topic\\\": \\\"A string representing the topic for the joke.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"joke\\\": \\\"A string representing the generated joke.\\\"\\n},\\n\\\"depend\\\": \\\"Huggingface's transformers library (GPT2LMHeadModel and GPT2Tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A topiary enthusiast from a different country, sharing techniques and inspiration through online forums", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Plant Image Classification Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface that uses a pre-trained model from TensorFlow Hub to classify plant species based on images. The user inputs the path to an image file and the interface returns the identified plant species.\\\",\\n  \\\"function_name\\\": \\\"classify_plant\\\",\\n  \\\"input_args\\\": \\\"path_to_img\\\",\\n  \\\"return\\\": \\\"class_id\\\",\\n  \\\"depend\\\": \\\"tensorflow, tensorflow_hub, google/aiy/vision/classifier/plants_V1/1\\\"\\n}\"", "description": "tool development"}
{"input persona": "a travel blogger who specializes in remote paradise islands and had to cancel the planned trip to the Cook Islands due to the pandemic", "synthesized text": "\"{\\n\\\"name\\\": \\\"Virtual Travel Guide Interface\\\",\\n\\\"description\\\": \\\"This interface returns a summary of a location from its Wikipedia page, allowing users to virtually explore places they cannot visit.\\\",\\n\\\"function_name\\\": \\\"get_location_info\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"A string containing a summary of the location.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A distillery owner looking to collaborate on creating limited-edition whiskey releases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Whiskey Flavor Profile Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface compares the flavor profiles of two whiskeys based on reviews and tasting notes, returning a similarity score.\\\",\\n\\\"function_name\\\": \\\"compare_whiskeys\\\",\\n\\\"input_args\\\": [\\\"whiskey1\\\", \\\"whiskey2\\\"],\\n\\\"return\\\": \\\"A dictionary containing the flavor profiles of the two whiskeys and a similarity score\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow executive who has found balance through implementing strict boundaries between work and personal life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Work-Life Balance Reminder Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that allows users to set strict time boundaries for work and personal life. Sends a reminder when it's time to switch from work to personal life or vice versa.\\\",\\n\\\"function_name\\\": \\\"work_life_balance_reminder\\\",\\n\\\"input_args\\\": \\n    {\\n        \\\"work_start_time\\\": \\\"The time when the work day starts, in 24-hour format (e.g., '09:00')\\\",\\n        \\\"work_end_time\\\": \\\"The time when the work day ends, in 24-hour format (e.g., '17:00')\\\",\\n        \\\"reminder\\\": \\\"A function that takes a string message as input and sends a reminder to the user\\\"\\n    },\\n\\\"return\\\": \\\"This function does not return a value. It runs indefinitely, sending reminders at the specified times.\\\",\\n\\\"depend\\\": \\\"Python's built-in datetime module and third-party library schedule\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a local Hong Konger and urban explorer who is passionate about modern architecture and sustainable urban design. I keep an eye on new developments reshaping the cityscape and I'm particularly interested in the transformation of Kowloon East.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Construction Status Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Buildings Department of Hong Kong's API to return the current status of a building's construction.\\\",\\n\\\"function_name\\\": \\\"get_building_status\\\",\\n\\\"input_args\\\": \\\"application_number\\\",\\n\\\"return\\\": \\\"The current status of the building's construction.\\\",\\n\\\"depend\\\": \\\"requests library, Buildings Department of Hong Kong API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A TV producer responsible for broadcasting and staging major baseball matches", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Baseball Pitch Type Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the type of pitch a pitcher is going to throw next based on available game data.\\\",\\n  \\\"function_name\\\": \\\"predict_pitch_type\\\",\\n  \\\"input_args\\\": [\\\"pitcher_id\\\", \\\"arm_angle\\\", \\\"release_speed\\\", \\\"spin_rate\\\", \\\"release_pos_x\\\", \\\"release_pos_z\\\"],\\n  \\\"return\\\": \\\"Pitch type (one of 'Fastball', 'Curveball', 'Slider', 'Changeup', 'Sinker', 'Cutter', 'Splitter')\\\",\\n  \\\"depend\\\": \\\"Uses a pre-trained model from PyTorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A vocational guidance counselor specialized in helping workers transition to emerging industries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Skill Gap Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the skill gap between two industries using the ONET Web Services API. It returns a list of new skills needed to transition to the target industry and a list of skills that can be transferred from the current industry.\\\",\\n\\\"function_name\\\": \\\"analyze_skill_gap\\\",\\n\\\"input_args\\\": {\\n    \\\"current_industry\\\": \\\"The industry in which the user is currently working. This should be a string that corresponds to an industry recognized by the ONET Web Services API.\\\",\\n    \\\"target_industry\\\": \\\"The industry to which the user wants to transition. This should be a string that corresponds to an industry recognized by the ONET Web Services API.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"new_skills_needed\\\": \\\"A list of skills that the user needs to acquire in order to transition to the target industry.\\\",\\n    \\\"transferable_skills\\\": \\\"A list of skills that the user can leverage when transitioning to the target industry.\\\"\\n},\\n\\\"depend\\\": \\\"Python's requests library, ONET Web Services API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A firefighter working in a metropolitan city, dealing with the unique challenges of night shifts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Night Shift Sleep Cycle Adjustment Interface\\\",\\n\\\"description\\\": \\\"An interface to help firefighters adjust their sleep cycle for night shifts. The user inputs the start and end times of their night shift, and the interface returns a recommended sleep schedule.\\\",\\n\\\"function_name\\\": \\\"adjust_to_night_shift\\\",\\n\\\"input_args\\\": [\\\"start_time\\\", \\\"end_time\\\"],\\n\\\"return\\\": \\\"Dictionary with 'Sleep Start Time' and 'Sleep End Time'\\\",\\n\\\"depend\\\": \\\"Python's datetime library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An 80-year-old architect retired in Perth after a long career in Australia and Europe.", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Viewer Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to view 3D models of architectural designs.\\\",\\n\\\"function_name\\\": \\\"view_3d_model\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The file path of the 3D model to be viewed\\\"},\\n\\\"return\\\": \\\"Renders and displays the 3D model in a new window\\\",\\n\\\"depend\\\": \\\"Python library: PyVista\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school agriculture teacher looking for resources to teach students about soil fertility", "synthesized text": "\"{\\n\\\"name\\\": \\\"Soil Fertility Data Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch soil fertility-related data using the SoilGrids API. It provides information about organic carbon, pH level, sand, silt and clay fractions, bulk density, cation-exchange capacity, depth to bedrock, etc. for a given location.\\\",\\n\\\"function_name\\\": \\\"get_soil_fertility_data\\\",\\n\\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\"],\\n\\\"return\\\": \\\"A dictionary containing soil fertility-related data for the given location\\\",\\n\\\"depend\\\": \\\"ISRIC \\u2014 World Soil Information's SoilGrids API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The founder of the Hope Family Village community, who advocates for single parents and organizes resources", "synthesized text": "\"{\\n\\\"name\\\": \\\"Resource Availability Checker Interface\\\",\\n\\\"description\\\": \\\"This interface checks the availability of specific resources like child care, financial aid, etc. in zip codes within a certain distance from a given zip code.\\\",\\n\\\"function_name\\\": \\\"check_resource_availability\\\",\\n\\\"input_args\\\": [\\\"zip_code\\\", \\\"resource\\\"],\\n\\\"return\\\": \\\"A list of nearby zip codes where the specified resource is available.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"ZipCodeAPI\\\", \\\"US Department of Health & Human Services API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An astrophysicist who always gives scientifically accurate insights and plot twists", "synthesized text": "\"{\\n\\\"name\\\": \\\"Star Position Interface\\\", \\n\\\"description\\\": \\\"This interface returns the RA (Right Ascension) and Dec (Declination) coordinates of a given star using the Astropy Python library.\\\", \\n\\\"function_name\\\": \\\"get_star_coordinates\\\", \\n\\\"input_args\\\": {\\\"star_name\\\": \\\"Name of the star\\\"}, \\n\\\"return\\\": {\\\"RA (Right Ascension)\\\": \\\"Tuple of hours, minutes, seconds\\\", \\\"Dec (Declination)\\\": \\\"Tuple of degrees, arcminutes, arcseconds\\\"}, \\n\\\"depend\\\": \\\"Astropy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An expert in peacebuilding and conflict transformation presenting their latest research at international conferences", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conference Speech Summarizer Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face Transformers to produce a concise summary of a long speech. This can be useful for presenters who need to provide a brief overview of their presentation for conference attendees or for social media sharing.\\\",\\n\\\"function_name\\\": \\\"summarize_speech\\\",\\n\\\"input_args\\\": \\\"speech_text - A string of the text of the speaker's presentation\\\",\\n\\\"return\\\": \\\"A string of the summarized text of the speaker's presentation\\\",\\n\\\"depend\\\": \\\"The function depends on the Hugging Face Transformers library, specifically the 'facebook/bart-large-cnn' model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A painter who incorporates Gord Downie's music into their artistic expression", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Mood Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spotify Web API to analyze the mood of a song using audio features such as danceability, energy, and valence. It then uses the matplotlib library to create a color map of the song's mood.\\\",\\n\\\"function_name\\\": \\\"visualize_song_mood\\\",\\n\\\"input_args\\\": [\\\"song_name\\\", \\\"artist\\\", \\\"client_id\\\", \\\"client_secret\\\"],\\n\\\"return\\\": \\\"A bar chart representing the mood of the song.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\", \\\"json\\\", \\\"matplotlib.pyplot\\\"], \\\"Web APIs\\\": [\\\"Spotify Web API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a Muslim Indian who has completed the Haj pilgrimage twice.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Qibla Direction Finder Interface\\\",\\n\\\"description\\\": \\\"An interface to find the Qibla direction from any geographical location. It uses the Aladhan API to get the Qibla direction in degrees from true North.\\\",\\n\\\"function_name\\\": \\\"get_qibla_direction\\\",\\n\\\"input_args\\\": \\\"latitude, longitude\\\",\\n\\\"return\\\": \\\"Direction of Qibla in degrees from true North.\\\",\\n\\\"depend\\\": \\\"Aladhan API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A recent transplant who fell in love with the destination and decided to make it their permanent home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenWeatherMap API to fetch current weather and forecast based on the city name input by the user.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\n    \\\"city_name\\\": \\\"Name of the city to get the weather forecast.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Temperature\\\": \\\"Current temperature in the city in Kelvin.\\\",\\n    \\\"Atmospheric pressure\\\": \\\"Current atmospheric pressure in the city in hPa.\\\",\\n    \\\"Humidity\\\": \\\"Current humidity in the city in percentage.\\\",\\n    \\\"Description\\\": \\\"Brief description of the current weather.\\\"\\n},\\n\\\"depend\\\": \\\"This function leverages the OpenWeatherMap API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An African-American woman who is the owner of a Crossfit Affiliate gym", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Workout Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a recommender system to suggest workouts based on the user's personal information and workout history.\\\",\\n  \\\"function_name\\\": \\\"recommend_workout\\\",\\n  \\\"input_args\\\": {\\n    \\\"user_info\\\": \\\"A 1D array representing the user's preferences and abilities (age, gender, fitness level, preferred intensity, etc.)\\\"\\n  },\\n  \\\"return\\\": \\\"A series representing the recommended workout.\\\",\\n  \\\"depend\\\": \\\"Sklearn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A developer pushing for urban renewal projects that may involve demolishing historically significant structures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Demolition Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"An interface for assessing the risk associated with the demolition of a building. This can be used to preserve historically and architecturally significant structures.\\\",\\n\\\"function_name\\\": \\\"predict_demolition_risk\\\",\\n\\\"input_args\\\": {\\\"building_id\\\": \\\"Identifying information for the building to assess\\\"},\\n\\\"return\\\": {\\\"building_id\\\": \\\"Identifying information for the building assessed\\\", \\\"risk_level\\\": \\\"The risk level associated with the demolition of the building\\\"},\\n\\\"depend\\\": \\\"External building and architectural databases, Machine Learning model (Random Forest Classifier)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced .NET developer working on optimizing SSL connections.", "synthesized text": "\"{\\n\\\"name\\\": \\\"SSL Certificate Expiry Check Interface\\\",\\n\\\"description\\\": \\\"An interface to get the SSL certificate's expiry date of a domain.\\\",\\n\\\"function_name\\\": \\\"get_ssl_expiry_date\\\",\\n\\\"input_args\\\": \\\"domain_name\\\",\\n\\\"return\\\": \\\"SSL certificate's expiry date\\\",\\n\\\"depend\\\": \\\"Python OpenSSL library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional cricket player seeking the perfect bat for their playing style", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Cricket Bat Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to predict the best cricket bat for a player based on their playing style, batting position, and strength. The user inputs these parameters, and the interface returns the recommended bat.\\\",\\n  \\\"function_name\\\": \\\"recommend_cricket_bat\\\",\\n  \\\"input_args\\\": {\\n    \\\"playing_style\\\": \\\"The playing style of the cricketer. Possible values could be 'aggressive', 'defensive', etc.\\\",\\n    \\\"batting_position\\\": \\\"The position in the batting order where the player usually plays. This is an integer value.\\\",\\n    \\\"strength\\\": \\\"The strength of the player. This could be a measure of the player's physical strength or their skill level.\\\"\\n  },\\n  \\\"return\\\": \\\"The recommended cricket bat for the player, represented as a string.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas\\\", \\\"sklearn\\\"],\\n    \\\"machine learning models\\\": [\\\"RandomForestClassifier\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A bartender who believes that the revenue from the gambling industry helps the local economy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gambling Industry Revenue Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves and analyzes the revenue from the gambling industry in a specific region. It also compares this revenue with the total revenue generated by all industries in the same region.\\\",\\n\\\"function_name\\\": [\\\"get_gambling_revenue\\\", \\\"compare_industries\\\"],\\n\\\"input_args\\\": {\\\"get_gambling_revenue\\\": [\\\"region\\\"], \\\"compare_industries\\\": [\\\"region\\\"]},\\n\\\"return\\\": {\\\"get_gambling_revenue\\\": \\\"gambling_revenue\\\", \\\"compare_industries\\\": {\\\"gambling_revenue\\\": \\\"gambling_revenue\\\", \\\"total_revenue\\\": \\\"total_revenue\\\", \\\"percentage\\\": \\\"percentage\\\"}},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\"], \\\"web_apis\\\": [\\\"economicdata.com\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A bookworm from another country who shares recommendations for translated versions of classic novels", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translation Availability Checker Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Books API to check if the translated version of a book is available in a specific language.\\\",\\n\\\"function_name\\\": \\\"check_translation_availability\\\",\\n\\\"input_args\\\": [\\\"book_title\\\", \\\"language\\\"],\\n\\\"return\\\": \\\"True if the translated version is available, False if not.\\\",\\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skeptic housewife considering hiring an interior designer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Room Style Transfer Interface\\\",\\n\\\"description\\\": \\\"This interface transfers the style of one image to another. It is useful for interior design purposes, allowing users to preview how their room might look with a different style.\\\",\\n\\\"function_name\\\": \\\"style_transfer\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_room_img\\\": \\\"The path to the image of user's room\\\",\\n    \\\"path_to_style_img\\\": \\\"The path to the image of the style the user wants to apply\\\"\\n},\\n\\\"return\\\": \\\"An image with the style of the second image applied to the first\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a mother from Turkey who named her daughter Zümra", "synthesized text": "\"{\\n\\\"name\\\": \\\"Turkish Name Meaning and Origin Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Nationalize.io API to return the meaning and origin of a given name. It simplifies the process of understanding the cultural and historical significance of names.\\\",\\n\\\"function_name\\\": \\\"get_name_meaning_and_origin\\\",\\n\\\"input_args\\\": {\\\"name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"name\\\": \\\"string\\\", \\\"origin\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"requests library and Nationalize.io API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A meticulous car tuner who fine-tunes the drifting champion's vehicle for optimal performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car Performance Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the performance of a car based on its specifications. The user just needs to input the car specifications and the interface will return the estimated performance metrics.\\\",\\n\\\"function_name\\\": \\\"predict_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"car_specs\\\": {\\n        \\\"type\\\": \\\"dict\\\",\\n        \\\"description\\\": \\\"A dictionary containing the car specifications, such as weight, engine power, tire grip etc.\\\"\\n    }\\n},\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"dict\\\", \\n    \\\"description\\\": \\\"A dictionary containing the estimated performance metrics, such as acceleration, top speed, and drift ability.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"resources\\\": [\\n        \\\"Python library: sklearn\\\",\\n        \\\"Machine learning model: RandomForestRegressor\\\"\\n    ]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A Bed Bath & Beyond loyal customer who is both sad and hopeful about the changes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Semantics3 API to compare the prices of a specific product across different online stores.\\\",\\n\\\"function_name\\\": \\\"get_price_comparison\\\",\\n\\\"input_args\\\": \\\"product_name\\\",\\n\\\"return\\\": \\\"A dictionary with each key being a product name and each value being another dictionary that shows the price of this product in different sites.\\\",\\n\\\"depend\\\": \\\"Python 'requests' library, Semantics3 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A plant chemist with extensive experience in industrial production lines, especially those involving calcium compounds", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Compound Prediction Interface\\\",\\n\\\"description\\\": \\\"Given a chemical reaction, predicts the resultant chemical compound.\\\",\\n\\\"function_name\\\": \\\"get_compound\\\",\\n\\\"input_args\\\": [\\\"reactants\\\"],\\n\\\"return\\\": \\\"InChI Keys of the resultant compounds in the reactions\\\",\\n\\\"depend\\\": \\\"ChEMBL web resource client\\\"\\n}\"", "description": "tool development"}
{"input persona": "The major of a small town in regional Australia facing population decline", "synthesized text": "\"{\\n\\\"name\\\": \\\"Population Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface forecasts the population trend in a region based on historical data using Facebook's Prophet forecasting model.\\\",\\n\\\"function_name\\\": \\\"forecast_population\\\",\\n\\\"input_args\\\": {\\n    \\\"data_path\\\": \\\"The path to the CSV file with historical population data.\\\",\\n    \\\"period\\\": \\\"The number of years to forecast (default is 5).\\\"\\n},\\n\\\"return\\\": \\\"A CSV file named 'forecast.csv' with the forecasted population data.\\\",\\n\\\"depend\\\": \\\"This function depends on the pandas and fbprophet Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A habitant of Vittone, a town in Italy.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Earthquake Information Interface\\\",\\n\\\"description\\\": \\\"Use the U.S. Geological Survey's Earthquake Data API to get information about recent earthquakes near a specific location. The location is specified by latitude and longitude. The function returns a list of earthquakes, each represented by a dictionary containing the earthquake's magnitude, place, and time.\\\",\\n\\\"function_name\\\": \\\"get_recent_earthquakes\\\",\\n\\\"input_args\\\": {\\\"latitude\\\": \\\"float\\\", \\\"longitude\\\": \\\"float\\\", \\\"radius_km\\\": \\\"int (optional)\\\"},\\n\\\"return\\\": \\\"list of dictionaries, each representing an earthquake event\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"USGS Earthquake Data API\\\"], \\\"machine learning models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged woman with chronic pain seeking a second opinion on her existing medical imaging results", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Image Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to analyze medical imaging for a second opinion. It returns a detailed report of potential abnormalities or diseases that may have been missed in the initial diagnosis.\\\",\\n\\\"function_name\\\": \\\"analyze_medical_image\\\",\\n\\\"input_args\\\": \\\"path_to_image - the path to the medical image file\\\",\\n\\\"return\\\": \\\"A dictionary containing the probabilities of abnormal and normal findings in the image\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Google AIY Vision Classifier\\\"\\n}\"", "description": "tool development"}
{"input persona": "An art historian who questions the monetary valuation of sports artifacts over historical pieces", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Artifact Valuation Interface\\\",\\n\\\"description\\\": \\\"This interface uses eBay's API to get the most recent sold listings for a specified sports artifact and return the average selling price.\\\",\\n\\\"function_name\\\": \\\"get_average_price\\\",\\n\\\"input_args\\\": \\\"sports_artifact\\\",\\n\\\"return\\\": \\\"The average selling price of the most recent listings for the specified sports artifact.\\\",\\n\\\"depend\\\": \\\"eBay's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an experienced Linux kernel developer with expertise in writing device drivers and managing memory for DMA operations.", "synthesized text": "\"{\\n\\\"name\\\": \\\"File System Usage Interface\\\",\\n\\\"description\\\": \\\"An interface to get file system usage (total, used, free space in bytes) of a given path.\\\",\\n\\\"function_name\\\": \\\"get_file_system_usage\\\",\\n\\\"input_args\\\": \\\"path - the path to the file system you want to monitor\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'total', 'used', 'free' representing the total, used, and free space in bytes respectively.\\\",\\n\\\"depend\\\": \\\"Python os and shutil libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Japanese hotelier whose hotel was affected by the disaster", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disaster Impact Report Interface\\\",\\n\\\"description\\\": \\\"This interface uses NASA's Disasters Mapping Portal API and a Huggingface transformer model to generate a comprehensive report about a disaster's impact on a specified location and date.\\\",\\n\\\"function_name\\\": \\\"generate_disaster_report\\\",\\n\\\"input_args\\\": {\\n  \\\"location\\\": \\\"A tuple of latitude and longitude representing the location of the hotel.\\\",\\n  \\\"date\\\": \\\"The date of the disaster in the format 'YYYY-MM-DD'.\\\"\\n},\\n\\\"return\\\": \\\"A summary report detailing the disaster's impact on the specified location and date.\\\",\\n\\\"depend\\\": {\\n  \\\"python_libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n  \\\"web_apis\\\": [\\\"NASA's Disasters Mapping Portal API\\\"],\\n  \\\"machine_learning_models\\\": [\\\"Huggingface's transformer model for text summarization\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A young farmer from another state who seeks advice on implementing rotational grazing techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pasture Rotation Calendar Interface\\\",\\n\\\"description\\\": \\\"This interface creates a schedule for rotating livestock between pastures. It takes as input the number of pastures, the number of days each pasture should be grazed, and the starting date. It returns a schedule that specifies which pasture should be grazed on each date, or if it should be a rest day.\\\",\\n\\\"function_name\\\": \\\"create_rotation_schedule\\\",\\n\\\"input_args\\\": [\\\"num_pastures\\\", \\\"grazing_days\\\", \\\"start_date\\\"],\\n\\\"return\\\": \\\"A dictionary indexed by dates. For each date, it specifies which pasture should be grazed or if it should be a rest day.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"datetime\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a casual fan of baseball who has limited knowledge about the MLB organizational structure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Team Information Retrieval Interface\\\", \\n\\\"description\\\": \\\"This interface retrieves detailed information about a Major League Baseball team using the MLB's StatsAPI. The user needs to input the team name, and the interface will return details such as the team's full name, abbreviation, venue name, city, league, and division.\\\", \\n\\\"function_name\\\": \\\"get_team_info\\\", \\n\\\"input_args\\\": \\\"team_name\\\", \\n\\\"return\\\": \\\"A dictionary with team details or a string 'Team not found' if the team is not in the MLB database.\\\", \\n\\\"depend\\\": \\\"requests library, MLB StatsAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A deaf actress who embodies the power of representation and inclusion on stage", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Real-Time Speech to Text Translation Interface\\\",\\n  \\\"description\\\": \\\"This interface transcribes speech from audio files into text in real-time. It allows deaf individuals to understand spoken language by reading the transcription.\\\",\\n  \\\"function_name\\\": \\\"transcribe_audio\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_audio_file\\\": \\\"The path to the audio file to transcribe.\\\"\\n  },\\n  \\\"return\\\": \\\"Returns a list of transcriptions, with each item in the list being a transcription of a segment of speech in the audio file.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"google-cloud-speech\\\"],\\n    \\\"Web APIs\\\": [],\\n    \\\"machine learning models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An experienced organic farmer sharing tips and advice on sustainable cotton farming", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crop Disease Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to classify crop diseases. The user only needs to input the path to an image file of the cotton plant, and the interface will return the predicted disease affecting the cotton crop.\\\",\\n\\\"function_name\\\": \\\"detect_crop_disease\\\",\\n\\\"input_args\\\": \\\"path_to_img - A string representing the path to the image file.\\\",\\n\\\"return\\\": \\\"predicted_disease - An integer representing the predicted disease affecting the cotton crop.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "An expectant mother who isn't sold on the idea of using a baby sling.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Baby Sling Safety Information Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Python 'requests' library to scrape information about baby sling safety from reliable parenting and health websites\\\",\\n  \\\"function_name\\\": \\\"get_sling_safety_info\\\",\\n  \\\"input_args\\\": [],\\n  \\\"return\\\": \\\"A string containing a summary of the most important safety points from several sources.\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"re (Python standard library for regex)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A politics-crazed Russian who loves cranking out election analyses.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Election Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface loads and processes election data, and produces statistical analyses and visualizations.\\\",\\n\\\"function_name\\\": \\\"analyze_election_data\\\",\\n\\\"input_args\\\": {\\n\\\"path_to_csv\\\": \\\"The path to a .csv file with the election data.\\\"\\n},\\n\\\"return\\\": {\\n\\\"stats\\\": \\\"A DataFrame with basic statistical analyses (like average, median, mode, etc.) of the election data.\\\",\\n\\\"vote_distribution_image_path\\\": \\\"The path to a saved pie chart showing the percentage of votes each candidate received.\\\"\\n},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"matplotlib\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A schoolmate of Dulin, O’Connor, and Ockenden who is a big fan of basketball", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Player Stats Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed stats for a specified basketball player. It uses the Sports Open Data API to fetch the information.\\\",\\n\\\"function_name\\\": \\\"get_basketball_player_stats\\\",\\n\\\"input_args\\\": \\\"player_name\\\",\\n\\\"return\\\": \\\"A dictionary that includes the player's name, team, position, points per game, rebounds per game, and assists per game.\\\",\\n\\\"depend\\\": \\\"requests library, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired veterinary nurse who offers pet-sitting services and helps manage the Husky's needs", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Husky Health Status Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model to analyze the text description about the Husky's behavior and symptoms provided by the pet owner, and returns a health status and possible needed actions.\\\",\\n  \\\"function_name\\\": \\\"analyze_husky_health_status\\\",\\n  \\\"input_args\\\": \\\"description - a text description about the Husky's behavior and symptoms\\\",\\n  \\\"return\\\": \\\"Health status ('normal' or 'abnormal') and action needed ('No special action needed.' or 'Please consult a vet.')\\\",\\n  \\\"depend\\\": \\\"huggingface transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A scholar of Islamic theology and philosophy, specializing in the Maturidi school of thought.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quran Verse Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves a specific verse from the Quran based on the input Surah and verse number. The output includes the Arabic text of the verse and its English translation.\\\",\\n\\\"function_name\\\": \\\"get_quran_verse\\\",\\n\\\"input_args\\\": [\\\"surah_number\\\", \\\"verse_number\\\"],\\n\\\"return\\\": \\\"A dictionary with Arabic text of the verse and its English translation.\\\",\\n\\\"depend\\\": \\\"Al-Quran Cloud API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business owner in need of data replication solutions to ensure business continuity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Replication Interface\\\",\\n\\\"description\\\": \\\"This interface helps to replicate data from one AWS S3 bucket to another for backup and disaster recovery purposes.\\\",\\n\\\"function_name\\\": \\\"aws_s3_data_replication\\\",\\n\\\"input_args\\\": {\\n    \\\"aws_access_key_id\\\": \\\"Your AWS access key ID\\\",\\n    \\\"aws_secret_access_key\\\": \\\"Your AWS secret access key\\\",\\n    \\\"source_bucket\\\": \\\"The name of the source S3 bucket\\\",\\n    \\\"destination_bucket\\\": \\\"The name of the destination S3 bucket\\\"\\n},\\n\\\"return\\\": \\\"A message indicating the completion of data replication.\\\",\\n\\\"depend\\\": \\\"boto3 library (AWS SDK for Python)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A speech therapist who provides guidance on feeding techniques for children with swallowing difficulties", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Texture Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to classify the texture of food from images, which can be used by a speech therapist to provide guidance on feeding techniques for children with swallowing difficulties.\\\",\\n\\\"function_name\\\": \\\"classify_food_texture\\\",\\n\\\"input_args\\\": \\\"path_to_img - A string that represents the path to the image file of the food.\\\",\\n\\\"return\\\": \\\"A string representing the predicted texture of the food.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, a pre-trained model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fan of John Travolta and action films", "synthesized text": "\"{\\n\\\"name\\\": \\\"Action Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Movie Database (TMDB) API to recommend action movies based on the user's favorite actor and preferred genre.\\\",\\n\\\"function_name\\\": \\\"recommend_action_movies\\\",\\n\\\"input_args\\\": [\\\"favorite_actor\\\", \\\"genre\\\"],\\n\\\"return\\\": \\\"A list of recommended action movies\\\",\\n\\\"depend\\\": \\\"TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A student considering joining the IE Business School", "synthesized text": "\"{\\n\\\"name\\\": \\\"University Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed information about universities, including global ranking, subject-specific rankings, tuition fees, number of students, faculty members, and more.\\\",\\n\\\"function_name\\\": \\\"get_university_info\\\",\\n\\\"input_args\\\": \\\"university_name\\\",\\n\\\"return\\\": \\\"A dictionary containing information about the specified university.\\\",\\n\\\"depend\\\": \\\"QS World University Rankings API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business major actively working on starting a mobile application that connects patients with physiotherapists", "synthesized text": "\"{\\n\\\"name\\\": \\\"Appointment Scheduling Interface\\\",\\n\\\"description\\\": \\\"An interface to schedule appointments with physiotherapists using Google Calendar API.\\\",\\n\\\"function_name\\\": \\\"schedule_appointment\\\",\\n\\\"input_args\\\": [\\\"physiotherapist_email\\\", \\\"desired_date\\\", \\\"desired_time\\\", \\\"duration_minutes\\\"],\\n\\\"return\\\": \\\"URL to the created appointment event on the physiotherapist's Google Calendar.\\\",\\n\\\"depend\\\": [\\\"Python Libraries (googleapiclient, google_auth_oauthlib, datetime, pytz)\\\", \\\"Google Calendar API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An importer of handmade textiles and furniture from various countries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface is designed to convert an amount from one currency to another. It uses the Open Exchange Rates API to get up-to-date currency exchange rates.\\\",\\n\\\"function_name\\\": \\\"convert_currency\\\",\\n\\\"input_args\\\": \\n  {\\n    \\\"amount\\\": \\\"The amount of money that you want to convert. It should be a number.\\\",\\n    \\\"from_currency\\\": \\\"The original currency. It should be a string representing the ISO 4217 currency code, such as 'USD' for United States Dollars, 'EUR' for Euro, etc.\\\",\\n    \\\"to_currency\\\": \\\"The currency you want to convert to. It should be a string representing the ISO 4217 currency code, such as 'USD' for United States Dollars, 'EUR' for Euro, etc.\\\"\\n  },\\n\\\"return\\\": \\\"The converted amount in the target currency. It will be a number.\\\",\\n\\\"depend\\\": \\\"This function depends on the 'requests' Python library and the Open Exchange Rates API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An OCR software engineer seeking input and suggestions for improving their algorithm", "synthesized text": "\"{\\n\\\"name\\\": \\\"OCR Improvement Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input a suggestion text for improving an OCR algorithm, and classifies the suggestion into categories. This helps OCR software engineers to easily categorize and prioritize the improvements to be made.\\\",\\n\\\"function_name\\\": \\\"classify_suggestion\\\",\\n\\\"input_args\\\": \\\"suggestion\\\",\\n\\\"return\\\": \\\"A category string from the following: Improve Text Recognition, Improve Layout Analysis, Improve Noise Reduction, Improve Handwriting Recognition, Other.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library (BertForSequenceClassification, BertTokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A devoted \"Brooklyn Nine-Nine\" superfan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brooklyn Nine-Nine Episode Guide Interface\\\",\\n\\\"description\\\": \\\"This interface fetches detailed information about a specific episode from a specific season of the TV show 'Brooklyn Nine-Nine'.\\\",\\n\\\"function_name\\\": \\\"get_episode_info\\\",\\n\\\"input_args\\\": {\\n    \\\"season\\\": \\\"The season number of the episode.\\\",\\n    \\\"episode\\\": \\\"The episode number.\\\"\\n    },\\n\\\"return\\\": {\\n    \\\"episode_name\\\": \\\"The name of the episode.\\\",\\n    \\\"airdate\\\": \\\"The airdate of the episode.\\\",\\n    \\\"summary\\\": \\\"A summary of the episode.\\\"\\n    },\\n\\\"depend\\\": \\\"TVmaze API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former gymnastics coach who has followed Wills' career.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Athlete Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to analyze the performance of gymnasts using pose estimation. Users provide the path to a video file, and the interface returns a set of key points representing the pose for each frame in the video.\\\",\\n\\\"function_name\\\": \\\"analyze_performance\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"pose_estimations\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, cv2, TensorFlow Hub Model: 'https://tfhub.dev/google/movenet/singlepose/lightning/1'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school science buff using astronomical calculations for a science fair project", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar System Planetary Position Interface\\\",\\n\\\"description\\\": \\\"This interface calculates and returns the position of a planet in the solar system at a given date and time.\\\",\\n\\\"function_name\\\": \\\"get_planet_position\\\",\\n\\\"input_args\\\": [\\\"planet_name\\\", \\\"datetime\\\"],\\n\\\"return\\\": \\\"A dictionary including right ascension (RA), declination (DEC), and distance from earth to the planet in kilometers.\\\",\\n\\\"depend\\\": \\\"Skyfield API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former professional Ukrainian football player who knows Kostyantyn Vivcharenko personally.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Player Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface helps to fetch a football player's statistics such as total goals, assists, appearances, etc. using the 'football-data' API.\\\",\\n\\\"function_name\\\": \\\"get_football_player_statistics\\\",\\n\\\"input_args\\\": \\\"player_name\\\",\\n\\\"return\\\": \\\"A dictionary containing player's statistics such as total goals, assists, appearances, etc.\\\",\\n\\\"depend\\\": \\\"requests, football-data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow junior software engineer also struggling with Typescript, forming a study group to collaborate and share knowledge", "synthesized text": "\"{\\n\\\"name\\\": \\\"Typescript Code Validator Interface\\\",\\n\\\"description\\\": \\\"A function to validate Typescript code using the Typescript compiler. It returns a list of errors found in the code, if any.\\\",\\n\\\"function_name\\\": \\\"validate_typescript_code\\\",\\n\\\"input_args\\\": [\\\"code\\\"],\\n\\\"return\\\": [\\\"List of strings representing errors in the code\\\"],\\n\\\"depend\\\": [\\\"Typescript Compiler\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An Italian filmmaker who lives in Trieste and whose last two films were co-productions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Budget Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface to estimate the budget for a film based on the director, location, co-production, and previous films' budgets.\\\",\\n\\\"function_name\\\": \\\"estimate_film_budget\\\",\\n\\\"input_args\\\": [\\\"director\\\", \\\"location\\\", \\\"co_production\\\", \\\"previous_film_budgets\\\"],\\n\\\"return\\\": \\\"Estimated budget for the film.\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers library, bert-base-cased-finetuned-mrpc model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A private investigator who respects her resilience but worries about her safety", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geo-Location Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to track the geolocation of an IP address using the 'ip-api' web service.\\\",\\n\\\"function_name\\\": \\\"get_geolocation\\\",\\n\\\"input_args\\\": {\\\"ip_address\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"lat\\\": \\\"float\\\", \\\"lon\\\": \\\"float\\\", \\\"city\\\": \\\"string\\\", \\\"region\\\": \\\"string\\\", \\\"country\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"web APIs\\\": [\\\"ip-api\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A software tester responsible for ensuring the quality and reliability of Python code and iPython notebook outputs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Code Quality Check Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze Python code and highlight potential issues in a standardized report format. The interface accepts Python code as a string or a file path and returns a quality report.\\\",\\n\\\"function_name\\\": \\\"check_python_code_quality\\\",\\n\\\"input_args\\\": [\\\"code_or_file_path\\\"],\\n\\\"return\\\": \\\"A report containing potential issues in the code. If no issues are found, the function returns 'No issues found'.\\\",\\n\\\"depend\\\": \\\"Python library: pylint\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an elderly librarian with a passion for onomatology (the study of the history and origin of names) and an affinity for asteroids and astrology.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Asteroid Information Interface\\\",\\n\\\"description\\\": \\\"An interface to get detailed information about a specific asteroid, including its size, velocity, and close approach data. The information is retrieved from NASA's NeoWs API.\\\",\\n\\\"function_name\\\": \\\"get_asteroid_info\\\",\\n\\\"input_args\\\": \\\"asteroid_name\\\",\\n\\\"return\\\": \\\"{Size (in meters), Velocity (in km/s), Close Approach Data}\\\",\\n\\\"depend\\\": \\\"requests, NASA's NeoWs API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturing consultant who advises on product development and customization", "synthesized text": "\"{\\n  \\\"name\\\": \\\"3D Model Customization Interface\\\",\\n  \\\"description\\\": \\\"An interface to customize 3D models using OpenSCAD.\\\",\\n  \\\"function_name\\\": \\\"create_custom_model\\\",\\n  \\\"input_args\\\": [\\\"parameters\\\", \\\"base_model_path\\\", \\\"output_model_path\\\"],\\n  \\\"return\\\": \\\"Path to the customized 3D model\\\",\\n  \\\"depend\\\": [\\\"OpenSCAD\\\", \\\"subprocess\\\", \\\"os\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A sculptor who creates intricate sculptures inspired by the flavors and aromas of wine and food", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food and Wine Pairing Interface\\\",\\n\\\"description\\\": \\\"An interface that provides food and wine pairing suggestions. Users only need to input a type of food or wine, and the interface will return a detailed description of the flavors and aromas of that item, as well as suggestions for other foods or wines that pair well with it.\\\",\\n\\\"function_name\\\": \\\"get_food_wine_pairing\\\",\\n\\\"input_args\\\": [\\\"food_or_wine\\\"],\\n\\\"return\\\": \\\"A string containing detailed descriptions of the flavors and aromas of the input food or wine, as well as suggestions for other foods or wines that pair well with it.\\\",\\n\\\"depend\\\": [\\\"Spoonacular API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A graduate student who is conducting research on the use of colors in advertising", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze and visualize the dominant colors in an image using OpenCV and matplotlib. The user needs to provide the path to the image file and optionally the number of dominant colors to consider. The function will return a pie chart showing the distribution of the dominant colors in the image.\\\",\\n\\\"function_name\\\": \\\"analyze_image_colors\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"number_of_colors\\\"],\\n\\\"return\\\": \\\"A pie chart showing the color distribution\\\",\\n\\\"depend\\\": [\\\"cv2\\\", \\\"sklearn.cluster.KMeans\\\", \\\"matplotlib.pyplot\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A successful NFT collector and investor who provides guidance on marketing and pricing strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"NFT Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface fetches historical sales data of an NFT (Non-Fungible Token) from OpenSea and uses a regression model to predict the future price.\\\",\\n\\\"function_name\\\": \\\"predict_nft_price\\\",\\n\\\"input_args\\\": [\\\"nft_id\\\"],\\n\\\"return\\\": \\\"Predicted future price of the input NFT.\\\",\\n\\\"depend\\\": [\\\"OpenSea API\\\", \\\"scikit-learn\\\", \\\"requests\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A charismatic and ambitious junior officer known for their networking skills and ability to outperform others in promotions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"LinkedIn Profile Scraper Interface\\\",\\n  \\\"description\\\": \\\"Fetches the user's LinkedIn profile information including name, headline, company, school, and location using LinkedIn's API.\\\",\\n  \\\"function_name\\\": \\\"get_linkedin_profile_info\\\",\\n  \\\"input_args\\\": \\\"profile_url\\\",\\n  \\\"return\\\": \\\"A dictionary with the keys 'name', 'headline', 'company', 'school', and 'location'.\\\",\\n  \\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a sports journalist with a career-long bias against Princeton University", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Score Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the game score between two teams based on their past games. It fetches the past games data of the two teams from a sports data API, applies a linear regression model to predict the score.\\\",\\n\\\"function_name\\\": \\\"predict_game_score\\\",\\n\\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\"],\\n\\\"return\\\": \\\"The predicted game score between the two teams.\\\",\\n\\\"depend\\\": \\\"requests, pandas, sklearn.linear_model, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A clinical psychologist specializing in the connection between mental health and gut health", "synthesized text": "\"{\\n\\\"name\\\": \\\"Microbiome Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the microbiome data from a FASTA file. It returns the top 5 most abundant species in the microbiome.\\\",\\n\\\"function_name\\\": \\\"analyze_microbiome\\\",\\n\\\"input_args\\\": \\\"path_to_fasta\\\",\\n\\\"return\\\": \\\"A list of tuples. Each tuple contains a species and its corresponding count.\\\",\\n\\\"depend\\\": \\\"Biopython library, Scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An environmentally-conscious supporter of local produce who likes strawberries.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Produce Finder\\\",\\n\\\"description\\\": \\\"An interface to find local markets that sell strawberries using the USDA National Farmers Market Directory API.\\\",\\n\\\"function_name\\\": \\\"get_local_markets\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"state\\\"],\\n\\\"return\\\": \\\"A list of local markets that sell strawberries.\\\",\\n\\\"depend\\\": \\\"requests library, USDA National Farmers Market Directory API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow graphic designer who has already found the perfect chair and can provide recommendations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Furniture Recommendation Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface to get recommendations for similar furniture based on an item the user likes using Amazon Product Advertising API.\\\",\\n  \\\"function_name\\\": \\\"get_similar_furniture\\\",\\n  \\\"input_args\\\": \\\"ASIN - Amazon Standard Identification Number of the product\\\",\\n  \\\"return\\\": \\\"A list of similar product names\\\",\\n  \\\"depend\\\": \\\"bottlenose Python library, Amazon Product Advertising API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young and playful manufacturing engineer obsessed with superlatives.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Properties Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches material properties from MatWeb API and compares them, returning the material with superior properties.\\\",\\n\\\"function_name\\\": \\\"compare_material_properties\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"material1\\\": \\\"Name of the first material\\\",\\n    \\\"material2\\\": \\\"Name of the second material\\\"\\n    },\\n\\\"return\\\": \\\"A dictionary where keys are property names and values are the material with superior property.\\\",\\n\\\"depend\\\": \\\"MatWeb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an employee at Nigerian Postal Service (NIPOST)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Postal Code Lookup Interface\\\",\\n\\\"description\\\": \\\"This interface returns the city and state of a given Nigerian postal code. The user only needs to input the postal code.\\\",\\n\\\"function_name\\\": \\\"get_postal_code_info\\\",\\n\\\"input_args\\\": \\\"postal_code: A string representing the postal code.\\\",\\n\\\"return\\\": \\\"A tuple (city, state) where both are strings representing the city and state of the postal code. Returns (None, None) if no information is found.\\\",\\n\\\"depend\\\": \\\"Python requests library, Zippopotam.us API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Nevada businessman who values education but is strict with budget management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tuition Fee Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the future tuition fees based on the historical data for a given university.\\\",\\n\\\"function_name\\\": \\\"predict_tuition\\\",\\n\\\"input_args\\\": {\\n    \\\"university_name\\\": \\\"The name of the university for which to predict tuition fees.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary mapping from year to predicted tuition fee for that year.\\\",\\n\\\"depend\\\": \\\"pandas, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film historian who focuses on the technical aspects and evolution of filmmaking", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Frame Extraction Interface\\\",\\n\\\"description\\\": \\\"Extract frames from a video file at a specified rate\\\",\\n\\\"function_name\\\": \\\"extract_frames\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"Path to the video file\\\",\\n    \\\"frame_rate\\\": \\\"Number of frames to extract per second\\\"\\n},\\n\\\"return\\\": \\\"List of paths to the extracted frame images\\\",\\n\\\"depend\\\": \\\"OpenCV library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rational engineer who loves to debunk myths and legends with scientific principles", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Scientific Fact Checking Interface\\\",\\n    \\\"description\\\": \\\"A Python interface for fact-checking scientific statements using the Google Fact Check Tools API.\\\",\\n    \\\"function_name\\\": \\\"fact_check_statement\\\",\\n    \\\"input_args\\\": {\\\"statement\\\": \\\"string\\\"},\\n    \\\"return\\\": \\\"list of dictionaries containing fact-checking results\\\",\\n    \\\"depend\\\": \\\"Google Fact Check Tools API\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a passionate local sports journalist in Chester, I've been closely following Chester City F.C. for years, capturing their ups and downs through my articles.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Fixture Information Interface\\\",\\n\\\"description\\\": \\\"This interface uses the football-data.org API to fetch the latest fixture and result for a specific football team.\\\",\\n\\\"function_name\\\": \\\"get_team_fixtures\\\",\\n\\\"input_args\\\": {\\\"team_id\\\": \\\"A unique identifier for each team in the API\\\"},\\n\\\"return\\\": {\\\"upcoming_fixtures\\\": \\\"A list of upcoming matches, each represented as a dictionary containing information about the match\\\", \\n            \\\"past_results\\\": \\\"A list of past match results, each represented as a dictionary containing the match information and score\\\"},\\n\\\"depend\\\": {\\\"python_libraries\\\": [\\\"requests\\\"], \\\"web_APIs\\\": [\\\"football-data.org API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Un giovane avventuroso che sogna di fare il giro dell'Italia in bicicletta e scoprire nuovi luoghi nascosti", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Planner Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Maps API to provide an optimized bike path between two locations.\\\",\\n\\\"function_name\\\": \\\"get_bike_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"List of detailed instructions for each step of the route.\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Zagoric-born young adult now living in a bustling city", "synthesized text": "\"{\\n\\\"name\\\": \\\"Noise Level Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface that estimates the noise level from a given sound file.\\\",\\n\\\"function_name\\\": \\\"estimate_noise_level\\\",\\n\\\"input_args\\\": \\\"sound_file\\\",\\n\\\"return\\\": \\\"Estimated average power (noise level) in decibels.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow I/O\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mobile app startup founder looking to implement reliable push notification functionality", "synthesized text": "\"{\\n\\\"name\\\": \\\"Push Notification Interface\\\",\\n\\\"description\\\": \\\"An interface to send push notifications using Firebase Cloud Messaging. The user provides a message, title, and the target device token, and the interface sends the notification.\\\",\\n\\\"function_name\\\": \\\"send_push_notification\\\",\\n\\\"input_args\\\": [\\\"message\\\", \\\"title\\\", \\\"target_token\\\"],\\n\\\"return\\\": \\\"Response from the FCM server\\\",\\n\\\"depend\\\": \\\"requests library, Firebase Cloud Messaging API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another tech entrepreneur who has been working on a similar job portal and now views the South Asian entrepreneur as a threat to their business", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Posting Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches job postings data from Glassdoor for a given job title and location and provides analysis on the most common skills required, average salary, and common benefits provided for that job.\\\",\\n\\\"function_name\\\": \\\"get_job_posting_info\\\",\\n\\\"input_args\\\": [\\\"job_title\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A dictionary with 'common_skills', 'average_salary', and 'common_benefits' as keys.\\\",\\n\\\"depend\\\": [\\\"Glassdoor API\\\", \\\"Hugging Face transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Разработчик веб-сайтов, посвящавший себя решению проблем с mod_rewrite и пониманию .htaccess.", "synthesized text": "\"{\\n\\\"name\\\": \\\"URL Rewrite Tester Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to test and debug their URL rewrite rules used in .htaccess for Apache mod_rewrite. Users simply input their rewrite rule and a URL to test, and our interface returns the result of the URL rewrite.\\\",\\n\\\"function_name\\\": \\\"test_url_rewrite\\\",\\n\\\"input_args\\\": {\\n    \\\"rule\\\": \\\"The rewrite rule split into two strings by a space where the first string is the regex pattern and the second string is the replacement string.\\\",\\n    \\\"test_url\\\": \\\"The URL to be tested.\\\"\\n},\\n\\\"return\\\": \\\"The result of the URL rewrite.\\\",\\n\\\"depend\\\": \\\"Python re library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Italian design student studying in Milan", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Viewer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to load a 3D model from a file and visualize it in a window. They can rotate, zoom in, and zoom out to inspect the model from different perspectives.\\\",\\n\\\"function_name\\\": \\\"view_3d_model\\\",\\n\\\"input_args\\\": [\\\"model_path\\\"],\\n\\\"return\\\": \\\"A window displaying the 3D model will be opened allowing users to interact with it.\\\",\\n\\\"depend\\\": [\\\"pyglet\\\", \\\"PyWavefront\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A highly skilled criminal defense lawyer known for her expertise in drug-related cases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Case Law Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses an API from a legal research platform, such as the Westlaw or LexisNexis, to return the case details or related case laws based on the inputted keywords or case name.\\\",\\n\\\"function_name\\\": \\\"search_case_law\\\",\\n\\\"input_args\\\": \\\"case_name_or_keywords - The case name or relevant keywords to search for.\\\",\\n\\\"return\\\": \\\"A json response containing the relevant case laws or case details.\\\",\\n\\\"depend\\\": \\\"Uses the web API from a legal research platform\\\"\\n}\"", "description": "tool development"}
{"input persona": "an experienced software developer who specializes in open-source electronics design automation suites like KiCAD.", "synthesized text": "\"{\\n\\\"name\\\": \\\"PCB Design File Validation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to validate their PCB design files. It uses KiCad's pcbnew Python scripting interface to perform design rule checks and returns a list of errors if any.\\\",\\n\\\"function_name\\\": \\\"validate_pcb_design\\\",\\n\\\"input_args\\\": \\\"design_file_path\\\",\\n\\\"return\\\": \\\"List of DRC errors or a success message\\\",\\n\\\"depend\\\": \\\"KiCad's pcbnew Python scripting interface\\\"\\n}\"", "description": "tool development"}
{"input persona": "香港电影忠实粉丝", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u7535\\u5f71\\u63a8\\u8350\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u6839\\u636e\\u7528\\u6237\\u559c\\u6b22\\u7684\\u7535\\u5f71\\u7c7b\\u578b\\u3001\\u5bfc\\u6f14\\u6216\\u6f14\\u5458\\u63a8\\u8350\\u7535\\u5f71\\\",\\n\\\"function_name\\\": \\\"recommend_movies\\\",\\n\\\"input_args\\\": [\\\"favorite_genre\\\", \\\"favorite_director\\\", \\\"favorite_actor\\\"],\\n\\\"return\\\": \\\"\\u63a8\\u8350\\u7684\\u7535\\u5f71\\u5217\\u8868\\\",\\n\\\"depend\\\": \\\"The Movie Database (TMDb) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A novice Forex trader seeking guidance on trading exotic currency pairs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Pair Correlation Interface\\\",\\n\\\"description\\\": \\\"This interface returns the correlation coefficient between two currency pairs. The correlation coefficient ranges from -1 to 1. A correlation of 1 means the two currency pairs will move in the same direction 100% of the time. A correlation of -1 means the two pairs will move in the opposite direction 100% of the time.\\\",\\n\\\"function_name\\\": \\\"get_currency_pair_correlation\\\",\\n\\\"input_args\\\": [\\\"pair1\\\", \\\"pair2\\\"],\\n\\\"return\\\": \\\"Correlation coefficient between the two currency pairs\\\",\\n\\\"depend\\\": \\\"yfinance, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "An insurance defense lawyer representing an employer disputing a workers' compensation claim", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained BERT model to compute the cosine similarity between two documents. It can be used to compare a workers' compensation claim with prior similar cases or company guidelines.\\\",\\n\\\"function_name\\\": \\\"document_similarity\\\",\\n\\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n\\\"return\\\": \\\"A similarity score between 0 (completely dissimilar) and 1 (identical).\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library, PyTorch, and scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired German volleyball player who won the first Super Cup.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wikipedia Information Fetcher\\\",\\n\\\"description\\\": \\\"This function fetches data from a specific person's Wikipedia page using the Wikipedia API.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_page_data\\\",\\n\\\"input_args\\\": \\\"person_name - The name of the person whose data we want to fetch\\\",\\n\\\"return\\\": \\\"A string that contains all the text data from the person's Wikipedia page or a message stating that no data was found\\\",\\n\\\"depend\\\": \\\"requests library, Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A frequent business traveler seeking advice on how to overcome jet lag and stay comfortable during flights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Comfort and Jet Lag Advice Interface\\\",\\n\\\"description\\\": \\\"This interface provides personalized advice on combating jet lag and staying comfortable during flights, based on the user's flight details and profile.\\\",\\n\\\"function_name\\\": \\\"get_comfort_and_jet_lag_advice\\\",\\n\\\"input_args\\\": [\\\"flight_number\\\", \\\"date\\\", \\\"user_profile\\\"],\\n\\\"return\\\": \\\"Personalized advice text.\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"requests\\\", \\\"datetime\\\", \\\"pytz\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\"], \\\"Web APIs\\\": [\\\"FlightStats API\\\"], \\\"machine learning models\\\": [\\\"Universal Sentence Encoder from TensorFlow Hub\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A psychologist who applies EMDR (Eye Movement Desensitization and Reprocessing) technique to treat PTSD", "synthesized text": "\"{\\n\\\"name\\\": \\\"EMDR Session Assistant Interface\\\",\\n\\\"description\\\": \\\"This interface uses Speech-to-Text and Text Analysis APIs to transcribe and analyze the patient's speech during EMDR sessions. It can help psychologists to track the patient's progress over time.\\\",\\n\\\"function_name\\\": \\\"emdr_assistant\\\",\\n\\\"input_args\\\": \\\"audio_file_path\\\",\\n\\\"return\\\": \\\"A list of categories and their relevance in the patient's speech.\\\",\\n\\\"depend\\\": \\\"Google's Speech-to-Text API, MeaningCloud's Text Classification API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional kabaddi player from India", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fitness Level Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the fitness level of a person based on their physical attributes using a deep learning model.\\\",\\n\\\"function_name\\\": \\\"predict_fitness_level\\\",\\n\\\"input_args\\\": [\\\"height\\\", \\\"weight\\\", \\\"age\\\", \\\"gender\\\"],\\n\\\"return\\\": \\\"Predicted fitness level as a string\\\",\\n\\\"depend\\\": [\\\"PyTorch library\\\", \\\"Pretrained Fitness model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A meteorologist who always compares the intensity of storms to Tampa Bay's games on television", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weather Forecast to Game Intensity Comparison Interface\\\",\\n  \\\"description\\\": \\\"An interface that compares the intensity of the weather with the intensity of the game, based on predefined rules of intensity. The weather intensity is calculated using the OpenWeatherMap API and the game intensity is calculated using the SportsRadar API.\\\",\\n  \\\"function_name\\\": \\\"compare_intensity\\\",\\n  \\\"input_args\\\": {\\n    \\\"city\\\": \\\"The city where the weather intensity is to be checked.\\\",\\n    \\\"team\\\": \\\"The team whose game intensity is to be checked.\\\"\\n  },\\n  \\\"return\\\": \\\"A string describing the comparison of weather and game intensity.\\\",\\n  \\\"depend\\\": [\\\"OpenWeatherMap API\\\", \\\"SportsRadar API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A new resident in Sendai City, Miyagi Prefecture who frequently sends goods back to her family in the USA.", "synthesized text": "\"{\\n\\\"name\\\": \\\"International Shipping Cost Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the estimated cost of shipping a package internationally. It uses APIs from major shipping carriers.\\\",\\n\\\"function_name\\\": \\\"calculate_international_shipping_cost\\\",\\n\\\"input_args\\\": [\\\"weight\\\", \\\"origin\\\", \\\"destination\\\"],\\n\\\"return\\\": \\\"Estimated shipping cost or error message\\\",\\n\\\"depend\\\": \\\"requests library, Shipping carrier's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chief technical officer with expertise in wind and solar energy resources", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Solar and Wind Energy Forecast Interface\\\",\\n  \\\"description\\\": \\\"An interface for forecasting the potential solar and wind energy that could be harvested at a specific location. It fetches the current solar radiation and wind speed data from OpenWeatherMap.\\\",\\n  \\\"function_name\\\": \\\"get_solar_wind_forecast\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"A tuple of latitude and longitude representing the location\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary with the current values of solar radiation (in W/m\\u00b2) and wind speed (in meter/sec)\\\",\\n  \\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An expert in programming languages and software development seeking advice on formal language theory", "synthesized text": "\"{\\n\\\"name\\\": \\\"Regular Expression Tester Interface\\\",\\n\\\"description\\\": \\\"An interface to test a regular expression against a string using Python's built-in 're' library.\\\",\\n\\\"function_name\\\": \\\"test_regex\\\",\\n\\\"input_args\\\": {\\n    \\\"regex\\\": \\\"The regular expression to test.\\\",\\n    \\\"string\\\": \\\"The string to test the regular expression against.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"matches\\\": \\\"A boolean indicating whether the regular expression matches the string.\\\",\\n    \\\"groups\\\": \\\"A list of any matched groups.\\\"\\n},\\n\\\"depend\\\": \\\"Python re Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A homeless individual with a passion for writing, seeking guidance in finding stable housing and pursuing a career in journalism", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job and Housing Assistance\\\",\\n\\\"description\\\": \\\"This interface provides functionalities to search for job opportunities and affordable housing options.\\\",\\n\\\"function_name\\\": [\\\"search_job\\\", \\\"get_affordable_housing\\\"],\\n\\\"input_args\\\": {\\n    \\\"search_job\\\": [\\\"job_title\\\", \\\"location\\\"],\\n    \\\"get_affordable_housing\\\": [\\\"location\\\"]\\n},\\n\\\"return\\\": {\\n    \\\"search_job\\\": \\\"List of job opportunities\\\",\\n    \\\"get_affordable_housing\\\": \\\"List of affordable housing options\\\"\\n},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Indeed API\\\", \\\"Housing Urban Development API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A globetrotting couple who have been to the Greek Islands multiple times and can provide insider tips and recommendations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Travel Recommendations Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Yelp API to get information about top-rated places of a certain type (restaurants, hotels, etc.) in a specific destination. It requires the Yelp API key to function.\\\",\\n\\\"function_name\\\": \\\"get_top_rated_places\\\",\\n\\\"input_args\\\": [\\\"destination\\\", \\\"type_of_place\\\"],\\n\\\"return\\\": \\\"A list of top 10 places of the specified type in the destination, sorted by rating, each represented as a tuple (name, rating).\\\",\\n\\\"depend\\\": \\\"Yelp API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young entrepreneur creating a clothing line inspired by classic Hollywood styles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fashion Trend Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts future fashion trends based on a given classic Hollywood style or era.\\\",\\n\\\"function_name\\\": \\\"predict_fashion_trend\\\",\\n\\\"input_args\\\": [\\\"style_input\\\"],\\n\\\"return\\\": \\\"A list of top 10 predicted fashion trends.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"pandas\\\", \\\"numpy\\\"], \\\"machine learning models\\\": [\\\"Universal Sentence Encoder from TensorFlow Hub\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A dedicated master's degree candidate specializing in propulsion systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rocket Propulsion Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simulates rocket propulsion and returns the specific impulse of the rocket's propulsion system. The specific impulse is a measure of how effectively a rocket uses propellant.\\\",\\n\\\"function_name\\\": \\\"rocket_propulsion_simulation\\\",\\n\\\"input_args\\\": [\\\"propellant_1\\\", \\\"propellant_2\\\"],\\n\\\"return\\\": \\\"Specific impulse of the rocket propulsion system\\\",\\n\\\"depend\\\": [\\\"PyPROPEP library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A literature enthusiast who recommends a wide range of authors and helps with research on Robert E. Howard's works", "synthesized text": "\"{\\n\\\"name\\\": \\\"Author Work Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch an author's works from Google Books API including the titles and publication dates.\\\",\\n\\\"function_name\\\": \\\"search_author_works\\\",\\n\\\"input_args\\\": \\\"author_name\\\",\\n\\\"return\\\": \\\"List of dictionaries containing 'title' and 'published_date' of each book by the author.\\\",\\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a first-time individual exhibitor from a small European publishing firm which has recently entered the American literature market.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates a book from one language to another using a pre-trained machine translation model from HuggingFace.\\\",\\n\\\"function_name\\\": \\\"translate_book\\\",\\n\\\"input_args\\\": {\\\"path_to_book\\\": \\\"Path to the text file (the book)\\\", \\\"from_lang\\\": \\\"ISO code of the source language\\\", \\\"to_lang\\\": \\\"ISO code of the target language\\\"},\\n\\\"return\\\": \\\"Translated version of the book as a string.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A spiritual inspirational speaker who encourages each individual's unique journey towards understanding the universe.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Astrology Chart Generator Interface\\\",\\n\\\"description\\\": \\\"An interface using the astro-charts library to generate a person's astrology birth chart based on their birth details (date, time, and place).\\\",\\n\\\"function_name\\\": \\\"birth_chart_generator\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"time\\\", \\\"place\\\"],\\n\\\"return\\\": \\\"Astrology birth chart\\\",\\n\\\"depend\\\": [\\\"astrocharts library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a migratory worker in China, with limited access to internet or technology, but loves to listen to stories about celebrities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Celebrity News Reader\\\",\\n\\\"description\\\": \\\"Fetches the latest news about a given celebrity and converts it into an audio file for offline listening.\\\",\\n\\\"function_name\\\": \\\"convert_news_to_audio\\\",\\n\\\"input_args\\\": \\\"celebrity - The name of the celebrity.\\\",\\n\\\"return\\\": \\\"Path to the audio file containing the news.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, gTTS. Web APIs: NewsAPI.org\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young history enthusiast eager to learn about their family's roots in Laois county", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancestry Data Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to retrieve the historical records of their family from Laois county by inputting their family surname.\\\",\\n\\\"function_name\\\": \\\"get_ancestry_data\\\",\\n\\\"input_args\\\": \\\"surname\\\",\\n\\\"return\\\": \\\"A JSON response containing the family's historical records.\\\",\\n\\\"depend\\\": \\\"requests library, Ancestry.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A career counselor focusing on personality-based career recommendations, believing in 'do what you love'", "synthesized text": "\"{\\n    \\\"ENTJ\\\": [\\\"Lawyer\\\", \\\"Judge\\\", \\\"Business Manager\\\"],\\n    \\\"INTP\\\": [\\\"Software Developer\\\", \\\"Data Scientist\\\", \\\"Research Scientist\\\"],\\n    \\\"ESFP\\\": [\\\"Sales Manager\\\", \\\"Event Coordinator\\\", \\\"Public Relations Specialist\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow team member who believes in lucky charms and rituals for success", "synthesized text": "\"{\\n\\\"name\\\": \\\"Luck Number Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts a 'lucky' number for the day within a given range.\\\",\\n\\\"function_name\\\": \\\"predict_lucky_number\\\",\\n\\\"input_args\\\": [\\\"range_start\\\", \\\"range_end\\\"],\\n\\\"return\\\": \\\"An integer within the range [range_start, range_end] which is considered as the 'lucky' number for the day.\\\",\\n\\\"depend\\\": [\\\"Python Standard Library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who uses the alias \"Harold Reynolds\" online", "synthesized text": "\"{\\n  \\\"name\\\": \\\"User Activity Tracker Interface\\\",\\n  \\\"description\\\": \\\"An interface that tracks and logs all user activity on a Flask web application. It stores the IP, endpoint, user agent, and timestamp of each request in an SQLite database.\\\",\\n  \\\"function_name\\\": \\\"log_request\\\",\\n  \\\"input_args\\\": {\\n    \\\"app\\\": \\\"A Flask instance of a web application.\\\"\\n  },\\n  \\\"return\\\": \\\"The same Flask instance, modified to log all incoming requests.\\\",\\n  \\\"depend\\\": {\\n    \\\"Python libraries\\\": [\\\"flask\\\", \\\"sqlite3\\\", \\\"datetime\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A supervisor committed to implementing policies and practices that prioritize the well-being of shift workers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Shift Schedule Optimizer Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the number of workers, the number of shifts, a list of preferred shifts for each worker, and the required number of workers per shift, and returns an optimal shift schedule that tries to assign everyone their preferred shifts while meeting the requirements.\\\",\\n\\\"function_name\\\": \\\"optimize_shift_schedule\\\",\\n\\\"input_args\\\": [\\\"num_workers\\\", \\\"num_shifts\\\", \\\"preferences\\\", \\\"required_workers\\\"],\\n\\\"return\\\": \\\"An optimal shift schedule as a 2D list where the row represents a worker and each column represents a shift. A value of 1 means the worker is assigned to that shift, and 0 means they are not. None is returned if no solution is found.\\\",\\n\\\"depend\\\": \\\"Python library: pulp\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mischievous parrot who loves to imitate the playful banter between the cat and the golden retriever", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parrot Speech Synthesis Interface\\\",\\n\\\"description\\\": \\\"This interface converts text, specifically dialogues between a cat and a golden retriever, into an audio file imitating a parrot's voice using Google's Text-to-Speech API.\\\",\\n\\\"function_name\\\": \\\"imitate_parrot\\\",\\n\\\"input_args\\\": \\\"text - a string representing the dialogue to be converted to speech.\\\",\\n\\\"return\\\": \\\"A string representing the path to the saved audio file.\\\",\\n\\\"depend\\\": \\\"Google Cloud Text-to-Speech API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conventional marketing manager who trusts in traditional marketing approaches and intuition for strategic decisions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Marketing Campaign Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch and analyze the performance of marketing campaigns from Google Analytics. It requires the Google Analytics View ID and the start and end dates for the period to be analyzed, as well as the location of the key file for authentication with Google Analytics API.\\\",\\n  \\\"function_name\\\": \\\"analyze_campaign_performance\\\",\\n  \\\"input_args\\\": {\\n    \\\"view_id\\\": \\\"The Google Analytics View ID for the website to be analyzed\\\",\\n    \\\"start_date\\\": \\\"The start date for the period to be analyzed (format: yyyy-mm-dd)\\\",\\n    \\\"end_date\\\": \\\"The end date for the period to be analyzed (format: yyyy-mm-dd)\\\",\\n    \\\"key_file_location\\\": \\\"The location of the key file for authentication with Google Analytics API\\\"\\n  },\\n  \\\"return\\\": \\\"A JSON string that represents a list of records, each of which contains the name of a marketing campaign and its performance metrics (number of sessions, number of pageviews, and session duration).\\\",\\n  \\\"depend\\\": {\\n    \\\"googleapiclient\\\": \\\"Used to interact with Google Analytics API\\\",\\n    \\\"pandas\\\": \\\"Used to process and analyze the fetched data\\\",\\n    \\\"google-auth\\\": \\\"Used for authentication with Google Analytics API\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An aspiring young field hockey player from Australia who idolizes Tim Brand", "synthesized text": "\"{\\n\\\"name\\\": \\\"Field Hockey Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze a field hockey player's performance from a video.\\\",\\n\\\"function_name\\\": \\\"get_performance_metrics\\\",\\n\\\"input_args\\\": \\\"video_path\\\",\\n\\\"return\\\": \\\"A dictionary containing average speed, number of goals, and pass accuracy.\\\",\\n\\\"depend\\\": \\\"cv2, numpy, tensorflow.keras\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young professional who recently moved to the Downers Grove community and is looking to get involved in local charitable initiatives", "synthesized text": "\"{\\n \\\"name\\\": \\\"Charity Search Interface\\\",\\n \\\"description\\\": \\\"This interface provides users with the top-rated local charities based on their location. The data is sourced from the Charity Navigator API.\\\",\\n \\\"function_name\\\": \\\"get_top_charities\\\",\\n \\\"input_args\\\": {\\\"city\\\": \\\"string\\\", \\\"state\\\": \\\"string\\\"},\\n \\\"return\\\": {\\\"top_charities\\\": \\\"list of strings\\\"},\\n \\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Charity Navigator API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A graduate student studying rhetoric and communication who shares valuable articles and research papers related to Kenneth Burke", "synthesized text": "\"{\\n\\\"name\\\": \\\"Article Summarization Interface\\\", \\n\\\"description\\\": \\\"This interface takes in the URL of an article or research paper as input and returns a summary of it. It uses a pre-trained model from Hugging Face to summarize the article.\\\", \\n\\\"function_name\\\": \\\"summarize_article\\\", \\n\\\"input_args\\\": [\\\"url\\\"], \\n\\\"return\\\": \\\"Summary of the article or research paper.\\\", \\n\\\"depend\\\": [\\\"Hugging Face Transformers\\\", \\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A vocalist known for her soulful voice and interest in cross-genre music projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voice Pitch Correction Interface\\\",\\n\\\"description\\\": \\\"This interface adjusts the pitch of an audio file by a specified tuning factor. Positive tuning factor values increase the pitch, while negative values decrease it.\\\",\\n\\\"function_name\\\": \\\"correct_pitch\\\",\\n\\\"input_args\\\": {\\n    \\\"audio_file_path\\\": \\\"Path to the audio file to be pitch-corrected\\\",\\n    \\\"tuning_factor\\\": \\\"Amount by which to adjust the pitch of the audio. Positive values increase the pitch, negative values decrease it.\\\"\\n},\\n\\\"return\\\": \\\"Path to the pitch-corrected audio file\\\",\\n\\\"depend\\\": \\\"Python's Librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A German TV show enthusiast who loves to correct misinformation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Subtitle Translation and Correction Interface\\\",\\n\\\"description\\\": \\\"This interface translates German subtitles into English and corrects any potential errors in the translation.\\\",\\n\\\"function_name\\\": \\\"translate_and_correct_subtitles\\\",\\n\\\"input_args\\\": \\\"subtitle_file - The path to the subtitle file (.srt)\\\",\\n\\\"return\\\": \\\"A list of translated and corrected English subtitles.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pysrt; Web APIs: Google Translation API, Spellcheck API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Danish tourist planning to visit Australia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface returns the current exchange rate between the user's home currency and the destination country's currency.\\\",\\n\\\"function_name\\\": \\\"get_exchange_rate\\\",\\n\\\"input_args\\\": [\\\"home_currency\\\", \\\"destination_currency\\\"],\\n\\\"return\\\": \\\"Exchange rate from home currency to destination currency\\\",\\n\\\"depend\\\": \\\"requests library, Open Exchange Rates API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a newbie Ubuntu user who's facing WiFi problems as well", "synthesized text": "\"{\\n\\\"name\\\": \\\"WiFi Troubleshooter Interface\\\",\\n\\\"description\\\": \\\"An interface that automates common troubleshooting steps for WiFi connectivity issues on Ubuntu systems.\\\",\\n\\\"function_name\\\": \\\"troubleshoot_wifi\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"Prints status messages during troubleshooting. If issues persist after running the function, user is advised to check the available WiFi networks and connect manually.\\\",\\n\\\"depend\\\": \\\"Python's built-in 'os' and 'subprocess' libraries are used to execute system-level commands.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physician providing tangible examples of patient needs and treatments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Treatment Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input a description of symptoms and generates potential medical treatment options.\\\",\\n\\\"function_name\\\": \\\"get_medical_treatments\\\",\\n\\\"input_args\\\": \\\"symptoms - a text description of the patient's symptoms\\\",\\n\\\"return\\\": \\\"A text string containing potential treatment options for the described symptoms\\\",\\n\\\"depend\\\": \\\"HuggingFace transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservative politician who believes that consumer protection laws hinder economic growth and competitiveness", "synthesized text": "\"{\\n\\\"name\\\": \\\"Consumer Complaint Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes consumer complaint data from the Consumer Financial Protection Bureau (CFPB) for a specific product or sector. It returns a summary of the number and nature of complaints.\\\",\\n\\\"function_name\\\": \\\"get_complaints_by_product\\\",\\n\\\"input_args\\\": \\\"product - The product or sector to analyze.\\\",\\n\\\"return\\\": \\\"A dictionary with the total number of complaints ('count') and a breakdown of complaint issues ('issues').\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas. Web APIs: Consumer Complaint Database API from the Consumer Financial Protection Bureau.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner managing a family-owned resort in The Bahamas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"Provides a 5-day weather forecast for a given geographical location\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\\"lat\\\": \\\"Latitude of the location\\\", \\\"lon\\\": \\\"Longitude of the location\\\"},\\n\\\"return\\\": \\\"5-day weather forecast, with each day's forecast including the time and weather description\\\",\\n\\\"depend\\\": {\\\"Python library\\\": [\\\"requests\\\", \\\"json\\\"], \\\"Web API\\\": [\\\"OpenWeatherMap\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A former Vermont varsity hockey player who still keeps a close eye on old team's performances.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Scores Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface that retrieves the latest game results for a specified team from a sports news website.\\\",\\n\\\"function_name\\\": \\\"get_latest_game_results\\\",\\n\\\"input_args\\\": \\\"team_name - The name of the team for which to retrieve the latest results.\\\",\\n\\\"return\\\": \\\"A string containing the latest game results for the specified team.\\\",\\n\\\"depend\\\": \\\"python libraries - requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property developer looking to create a striking and low-maintenance outdoor space for a new housing project", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant Species Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the climate type, soil type, and desired maintenance level for an outdoor space and returns a list of recommended plant species suitable for the space.\\\",\\n\\\"function_name\\\": \\\"recommend_plants\\\",\\n\\\"input_args\\\": [\\\"climate\\\", \\\"soil\\\", \\\"maintenance\\\"],\\n\\\"return\\\": \\\"List of recommended plant species names\\\",\\n\\\"depend\\\": \\\"sklearn, pandas, plant_dataset.csv (a custom dataset of plant species and their characteristics)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a nostalgic video-gamer who experienced the original Metal Gear Solid Snake Eater game.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game OST Downloader Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get download links for the OSTs of a given game.\\\",\\n\\\"function_name\\\": \\\"get_game_ost_links\\\",\\n\\\"input_args\\\": {\\n    \\\"game_title\\\": \\\"The title of the game\\\"\\n},\\n\\\"return\\\": \\\"A list of download links for the game's OSTs\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries, Khinsider API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A healthcare professional knowledgeable about the effects and potential risks of using Kratom as a substitute for opioids", "synthesized text": "\"{\\n\\\"name\\\": \\\"Kratom Effects and Risks Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface fetches compound information of a drug from the PubChem API and uses a pre-trained model to analyze the potential risks. The user only needs to input the name of the drug, and the interface returns a detailed analysis of the effects and potential risks.\\\", \\n\\\"function_name\\\": \\\"analyze_risks\\\",\\n\\\"input_args\\\": \\\"drug_name - string representing the name of the drug\\\",\\n\\\"return\\\": \\\"A dictionary with 'risk_level' and 'drug_info' keys, representing the risk level and detailed information of the drug, respectively\\\",\\n\\\"depend\\\": \\\"Python's requests library for API requests, TensorFlow and HuggingFace's transformers for risk analysis\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young picky eater who learns to appreciate nutritious food through creative recipes and fun activities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Recommendations Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of preferred ingredients and a maximum calorie amount as input, and returns a list of creative and fun recipes that meet the user's criteria.\\\",\\n\\\"function_name\\\": \\\"get_creative_recipes\\\",\\n\\\"input_args\\\": {\\\"preferred_ingredients\\\": \\\"list of strings\\\", \\\"max_calories\\\": \\\"integer\\\"},\\n\\\"return\\\": \\\"list of dictionaries\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"requests\\\"], \\\"web_APIs\\\": [\\\"Spoonacular's complex recipe search API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A high-ranking military officer interested in implementing blockchain for secure communication and information sharing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Transaction Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to add a secure, signed transaction to a simple blockchain, ensuring the integrity of the chain before the transaction is added. The sender, recipient, message, and sender's private key are inputs to the function.\\\",\\n\\\"function_name\\\": \\\"add_transaction_to_blockchain\\\",\\n\\\"input_args\\\": [\\\"sender\\\", \\\"recipient\\\", \\\"message\\\", \\\"sender_private_key\\\"],\\n\\\"return\\\": \\\"The updated blockchain, which is a list of blocks. Each block is a dictionary containing the index of the block and the transactions it contains.\\\",\\n\\\"depend\\\": [\\\"pycryptodome\\\", \\\"hashlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Mexican LED lighting enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"LED Color Temperature Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts the color temperature between Kelvin and Mired.\\\",\\n\\\"function_name\\\": \\\"convert_color_temperature\\\",\\n\\\"input_args\\\": {\\n  \\\"input_value\\\": \\\"the color temperature value\\\",\\n  \\\"input_unit\\\": \\\"the unit of the input value, either 'Kelvin' or 'Mired'\\\"\\n},\\n\\\"return\\\": \\\"the color temperature value in the other unit or an error message\\\",\\n\\\"depend\\\": \\\"Python standard library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A loyal client who appreciates the prompt and reliable service provided by the technician", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Technician Schedule Interface\\\",\\n  \\\"description\\\": \\\"An interface to schedule a technician's service visit using a service provider or CRM API.\\\",\\n  \\\"function_name\\\": \\\"schedule_technician_visit\\\",\\n  \\\"input_args\\\": [\\\"client_id\\\", \\\"preferred_date\\\"],\\n  \\\"return\\\": \\\"Appointment details as a dictionary\\\",\\n  \\\"depend\\\": \\\"requests library, Service provider or CRM API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced animator who worked on several blockbuster animated movies and now teaches animation techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Animation Frame Interpolation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a TensorFlow model to interpolate frames in a video, creating smooth transitions and slow-motion effects.\\\",\\n\\\"function_name\\\": \\\"interpolate_frames\\\",\\n\\\"input_args\\\": [\\\"path_to_video\\\", \\\"desired_fps\\\"],\\n\\\"return\\\": \\\"A video clip with interpolated frames.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, moviepy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Red Cross volunteer in Florida", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hurricane Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the APIs from the National Oceanic and Atmospheric Administration (NOAA) to predict the likelihood of hurricanes in a specific region. Users only need to input the name of the region, and the interface will return the probability of a hurricane occurring in that region.\\\",\\n\\\"function_name\\\": \\\"get_hurricane_probability\\\",\\n\\\"input_args\\\": [\\\"region\\\"],\\n\\\"return\\\": \\\"probability\\\",\\n\\\"depend\\\": \\\"NOAA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An environmental activist who is highly concerned about the impact of power lines on public health.", "synthesized text": "\"{\\n\\\"name\\\": \\\"EMF Measurement Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to interpret electromagnetic field (EMF) data. The user inputs the EMF data file path, and the interface returns the average, peak and standard deviation of EMF values as well as classifies them as safe or unsafe based on WHO guidelines.\\\",\\n\\\"function_name\\\": \\\"analyze_emf\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_data\\\": \\\"string\\\"\\n},\\n\\\"return\\\": {\\n    \\\"average\\\": \\\"float\\\",\\n    \\\"peak\\\": \\\"float\\\",\\n    \\\"standard_deviation\\\": \\\"float\\\",\\n    \\\"classification\\\": \\\"string\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"tensorflow_hub\\\": \\\"https://tfhub.dev/google/universal-sentence-encoder/4\\\",\\n    \\\"pandas\\\": \\\"1.1.5\\\",\\n    \\\"numpy\\\": \\\"1.19.5\\\",\\n    \\\"tensorflow\\\": \\\"2.4.0\\\"\\n}\\n}\"", "description": "tool development"}
{"input persona": "a SUSE Linux administrator who is experienced in troubleshooting dependency issues and can help find a solution.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Package Dependency Checker\\\",\\n\\\"description\\\": \\\"Check the dependencies of a specified package in a SUSE Linux system.\\\",\\n\\\"function_name\\\": \\\"get_package_dependencies\\\",\\n\\\"input_args\\\": {\\\"package_name\\\": \\\"name of the package\\\"},\\n\\\"return\\\": \\\"a list of dependencies or an error message if the package is not installed\\\",\\n\\\"depend\\\": \\\"Python's subprocess module, rpm command in Linux\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Java programming student who just started learning about Java date-time API", "synthesized text": "\"{\\n\\\"name\\\": \\\"Java Date-Time Interface\\\",\\n\\\"description\\\": \\\"This interface performs various date-time operations using Java's built-in date-time API. It includes getting the current date/time, adding or subtracting days from a date, and converting between time zones.\\\",\\n\\\"function_name\\\": [\\\"get_current_date_time\\\", \\\"add_days_to_date\\\", \\\"subtract_days_from_date\\\", \\\"convert_time_zone\\\"],\\n\\\"input_args\\\": [\\\"None\\\", \\\"date_str, days\\\", \\\"date_str, days\\\", \\\"time_str, from_tz, to_tz\\\"],\\n\\\"return\\\": [\\\"Current date and time as string\\\", \\\"New date as string after adding specified days\\\", \\\"New date as string after subtracting specified days\\\", \\\"Converted time as string in the target time zone\\\"],\\n\\\"depend\\\": [\\\"Java date-time API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A materials engineer developing new materials to construct space vehicles that are resistant to orbital debris impacts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Properties Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes a chemical formula as input and predicts the properties of the material using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"get_material_properties\\\",\\n\\\"input_args\\\": [\\\"chemical_formula\\\"],\\n\\\"return\\\": \\\"An array of predicted properties of the material in the chemical formula.\\\",\\n\\\"depend\\\": \\\"Python libraries: torch, pymatgen, matminer; Machine learning model: a pre-trained model (e.g., pretrained_model.pth)\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a seasoned motion designer with over a decade of experience in the industry, and I've always dreamed of winning this prestigious award one day.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Frame Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts frames from a video at a specified frame rate using the OpenCV library in Python.\\\",\\n\\\"function_name\\\": \\\"extract_frames\\\",\\n\\\"input_args\\\": [\\\"video_path\\\", \\\"frame_rate\\\"],\\n\\\"return\\\": \\\"A list of image files representing the extracted frames.\\\",\\n\\\"depend\\\": [\\\"OpenCV library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A representative from the local Small Business Administration office who assists in navigating the grant and loan application process", "synthesized text": "\"{\\n\\\"name\\\": \\\"SBA Loan Eligibility Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks an applicant's eligibility for different loan programs provided by the Small Business Administration (SBA). It uses the SBA's API to return the eligible loan programs based on the provided business information.\\\",\\n\\\"function_name\\\": \\\"check_loan_eligibility\\\",\\n\\\"input_args\\\": {\\n    \\\"business_info\\\": \\\"A dictionary with keys corresponding to the required information for checking loan eligibility.\\\"\\n},\\n\\\"return\\\": \\\"A list of loan programs that the business is eligible for based on the provided information, or an error message if unable to check loan eligibility.\\\",\\n\\\"depend\\\": \\\"requests library, SBA's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired police officer advocating for stronger punishments for animal cruelty", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Animal Cruelty Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that fetches detailed statistics about animal cruelty cases in a specific region from a web API. It can be used to advocate for stronger punishments for animal cruelty.\\\",\\n  \\\"function_name\\\": \\\"get_animal_cruelty_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"region\\\": \\\"The city/state/country for which to fetch animal cruelty data.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"total_cases\\\": \\\"The total number of animal cruelty cases in the specified region.\\\",\\n    \\\"conviction_rate\\\": \\\"The conviction rate for animal cruelty cases in the specified region.\\\",\\n    \\\"most_common_animal_victim\\\": \\\"The animal most commonly victimized in the specified region.\\\",\\n    \\\"most_common_type_of_abuse\\\": \\\"The most common type of abuse inflicted on animals in the specified region.\\\",\\n    \\\"average_jail_time\\\": \\\"The average jail time served for animal cruelty in the specified region.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"Pet-Abuse.com API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A novice reader trying to convey a succinct summary of the book review", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Summarization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained T5 model from Hugging Face Transformers library to summarize book reviews. Users input the text of a book review, and the interface returns a concise summary.\\\",\\n\\\"function_name\\\": \\\"summarize_book_review\\\",\\n\\\"input_args\\\": \\\"review_text\\\",\\n\\\"return\\\": \\\"summary_text\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers (T5 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An astronaut recently returned from the International Space Station, sharing their experiences of space travel", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stargazing Guide\\\",\\n\\\"description\\\": \\\"This interface uses NASA's API to fetch data about visible constellations or celestial events from a specific location on a specific date.\\\",\\n\\\"function_name\\\": \\\"stargazing_guide\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"List of visible constellations or celestial events\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"NASA API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an old fan of the Sanremo Tennis Challenger", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Match History Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to fetch a tennis player's match history.\\\",\\n\\\"function_name\\\": \\\"get_player_match_history\\\",\\n\\\"input_args\\\": \\\"player_name - string representing the name of the player\\\",\\n\\\"return\\\": \\\"match history of the player as a text\\\",\\n\\\"depend\\\": \\\"requests library, Tennis Abstract API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A regulatory board member responsible for overseeing the establishment and operation of casinos, providing information and guidance on legal requirements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Casino Regulatory Compliance Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks whether a casino is compliant with the current regulations and laws.\\\",\\n\\\"function_name\\\": \\\"check_casino_compliance\\\",\\n\\\"input_args\\\": \\\"casino_name\\\",\\n\\\"return\\\": \\\"Compliance status of the casino (string)\\\",\\n\\\"depend\\\": \\\"Web API of a regulatory database\\\"\\n}\"", "description": "tool development"}
{"input persona": "A creative event planner specializing in pop-up cinemas in unconventional locations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface provides weather forecast for a given location and date. It is particularly useful for event planners to check weather conditions.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"Weather forecast for the given location and date.\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A clueless young adult who has just started her first job and has no experience in filing taxes, let alone understand the implications of alimony.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tax Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface utilizing Policy Simulation Library's Tax-Calculator to calculate the user's tax based on gross income, number of children, and alimony paid. The interface helps users to understand their tax obligations without requiring detailed knowledge of tax rules.\\\",\\n\\\"function_name\\\": \\\"calculate_tax\\\",\\n\\\"input_args\\\": {\\\"gross_income\\\": \\\"The user's gross income\\\", \\\"num_children\\\": \\\"The number of children the user has\\\", \\\"alimony_paid\\\": \\\"The amount of alimony the user has paid\\\"},\\n\\\"return\\\": \\\"The calculated tax for the user\\\",\\n\\\"depend\\\": \\\"Policy Simulation Library's Tax-Calculator Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Full-Time JavaScript developer but new to RxJS.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Observable Stream Interface\\\",\\n\\\"description\\\": \\\"A high-level interface for creating and using Observables in RxJS\\\",\\n\\\"function_name\\\": [\\\"create_observable\\\", \\\"subscribe\\\"],\\n\\\"input_args\\\": {\\n\\\"create_observable\\\": [\\\"data\\\"],\\n\\\"subscribe\\\": [\\\"callback\\\"]\\n},\\n\\\"return\\\": {\\n\\\"create_observable\\\": \\\"Observable\\\",\\n\\\"subscribe\\\": \\\"None\\\"\\n},\\n\\\"depend\\\": [\\\"RxJS library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A novice coder trying to learn about Audio Devices in Linux through the ALSA Library", "synthesized text": "\"{\\n\\\"name\\\": \\\"List Audio Devices Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the ALSA library to list all audio devices available in the system.\\\",\\n\\\"function_name\\\": \\\"list_audio_devices\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A list of names of all available audio devices.\\\",\\n\\\"depend\\\": \\\"Python library: alsaaudio\\\"\\n}\"", "description": "tool development"}
{"input persona": "A speech therapist working in a clinic who wants to enhance their knowledge of pronunciation techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pronunciation Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the pronunciation of spoken words by comparing them to the correct pronunciation\\\",\\n\\\"function_name\\\": \\\"analyze_pronunciation\\\",\\n\\\"input_args\\\": [\\\"speech_file\\\", \\\"correct_word\\\"],\\n\\\"return\\\": \\\"Similarity ratio between the correct word and the transcribed word\\\",\\n\\\"depend\\\": [\\\"Google Speech-to-Text API\\\", \\\"Python NLTK library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Casual Pythonista and an advocate of computational efficiency.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parallel Computation Interface\\\", \\n\\\"description\\\": \\\"This interface applies a given function in parallel over a list of inputs, leveraging multiple cores for computational efficiency.\\\", \\n\\\"function_name\\\": \\\"apply_parallel_computation\\\", \\n\\\"input_args\\\": \\n    {\\n    \\\"function\\\": \\\"A function to be applied to each element in the input list\\\", \\n    \\\"input_list\\\": \\\"A list of inputs to which the function will be applied\\\", \\n    \\\"n_cores\\\": \\\"The number of cores to use for parallel computation\\\"\\n    }, \\n\\\"return\\\": \\\"A list of results from applying the function to each element in the input list.\\\", \\n\\\"depend\\\": \\\"joblib library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a softball player and a fan of Stephanie VanBrakle Prothro.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pitch Speed Conversion Interface\\\",\\n\\\"description\\\": \\\"Converts the speed of a softball pitch to the equivalent baseball pitch speed.\\\",\\n\\\"function_name\\\": \\\"convert_softball_speed_to_baseball\\\",\\n\\\"input_args\\\": {\\n    \\\"speed_in_mph\\\": \\\"Speed of the softball pitch in miles per hour.\\\"\\n},\\n\\\"return\\\": \\\"Equivalent baseball pitch speed in miles per hour.\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A reviewer for an academic journal in the field of computer science", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Check Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a piece of text and checks it for plagiarism against existing online documents. It returns a report indicating if there are any excessively similar pieces of text found online.\\\",\\n\\\"function_name\\\": \\\"check_plagiarism\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"report\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"sentence_transformers\\\", \\\"sklearn.metrics.pairwise\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A criminologist and a critics of the aggressive \"tough on crime\" policies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crime Rate Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the crime rate for a specific location given the socio-economic conditions. It uses a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_crime_rate\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"socio_econ_conditions\\\"],\\n\\\"return\\\": {\\\"type\\\": \\\"float\\\", \\\"description\\\": \\\"predicted crime rate\\\"},\\n\\\"depend\\\": {\\\"resources\\\": [\\\"Machine Learning Model\\\", \\\"Scikit-learn\\\", \\\"Pandas\\\", \\\"Pickle\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a long-time friend and business school classmate of Priyank Shah", "synthesized text": "\"{\\n\\\"name\\\": \\\"People Connection Interface\\\",\\n\\\"description\\\": \\\"This interface uses LinkedIn's API to determine whether two people are connected and the nature of the connection. It is useful for non-technical users who want to investigate connections between individuals.\\\",\\n\\\"function_name\\\": \\\"get_connection_between_people\\\",\\n\\\"input_args\\\": [\\\"name1 - the name of the first person\\\", \\\"name2 - the name of the second person\\\"],\\n\\\"return\\\": \\\"A string stating whether the two people are connected and the nature of the connection if one exists.\\\",\\n\\\"depend\\\": \\\"Python's requests library, LinkedIn's People Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated fan of Pop Evil who works as a music critic in Cleveland, Ohio", "synthesized text": "\"{\\n\\\"name\\\": \\\"Upcoming Concert Finder Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Songkick API to find upcoming concerts by a specified artist in a specified location.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_concerts\\\",\\n\\\"input_args\\\": [\\\"artist\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary represents an upcoming concert with the venue name, city, and date.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Songkick API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A person who dislikes walls, partitions, and barriers of any kind.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Open Space Finder Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenStreetMap API to help users find large, open spaces in their vicinity, such as parks, fields, and squares. Users only need to input their current location, and the interface will return a list of nearby open, unobstructed spaces.\\\",\\n\\\"function_name\\\": \\\"get_open_spaces\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"List of nearby open spaces\\\",\\n\\\"depend\\\": \\\"OpenStreetMap API, requests, geopy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A statistics major who is conducting research on the correlation between risk factors and decision-making", "synthesized text": "\"{\\n\\\"name\\\": \\\"Correlation Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in two lists (risk factors and decision-making scores) and returns the correlation coefficient and p-value, helping to understand the relationship and the significance level of the correlation.\\\",\\n\\\"function_name\\\": \\\"calculate_correlation\\\",\\n\\\"input_args\\\": [\\\"risk_factors\\\", \\\"decision_making\\\"],\\n\\\"return\\\": [\\\"correlation\\\", \\\"p_value\\\"],\\n\\\"depend\\\": [\\\"pandas\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A bestselling author who provides guidance on storytelling techniques and the publishing industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Title Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface generates book title suggestions based on a brief description of the book. The user can specify the number of suggestions they want.\\\",\\n\\\"function_name\\\": \\\"generate_book_title\\\",\\n\\\"input_args\\\": [\\\"book_description\\\", \\\"num_suggestions\\\"],\\n\\\"return\\\": \\\"List of suggested book titles\\\",\\n\\\"depend\\\": \\\"huggingface transformers, GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young musician who was just learning to play the guitar in 2009 and was hugely influenced by emo bands:", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Emotion Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a song's Spotify ID as input and returns the predominant emotion of the song by analyzing its audio features.\\\",\\n\\\"function_name\\\": \\\"predict_emotion\\\",\\n\\\"input_args\\\": \\\"song_id\\\",\\n\\\"return\\\": \\\"emotion\\\",\\n\\\"depend\\\": \\\"Spotify's Web API, TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "Web developer with hands-on experience on integrating Google Maps with MySQL database.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Map Marker Interface\\\",\\n\\\"description\\\": \\\"This interface provides the capability to store latitude and longitude coordinates into a MySQL database and retrieve them. These coordinates can be used to place markers on Google Maps.\\\",\\n\\\"function_name\\\": {\\\"save_location\\\": \\\"save_location(lat, lng)\\\", \\\"get_all_locations\\\": \\\"get_all_locations()\\\"},\\n\\\"input_args\\\": {\\\"save_location\\\": [\\\"lat\\\", \\\"lng\\\"], \\\"get_all_locations\\\": []},\\n\\\"return\\\": {\\\"save_location\\\": \\\"None, saves location coordinates to a MySQL database\\\", \\\"get_all_locations\\\": \\\"A list of tuples containing latitude and longitude coordinates from the MySQL database\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"mysql.connector\\\"], \\\"web APIs\\\": [\\\"Google Maps API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Another girl who shares a passion for doll collecting and enjoys organizing doll tea parties with the girl", "synthesized text": "\"{\\n\\\"name\\\": \\\"Doll Collection Organizer Interface\\\",\\n\\\"description\\\": \\\"An interface for managing a doll collection, allowing to add, remove, or view dolls in the collection.\\\",\\n\\\"function_name\\\": [\\\"add_doll\\\", \\\"remove_doll\\\", \\\"view_collection\\\"],\\n\\\"input_args\\\": [\\\"name\\\", \\\"doll_type\\\", \\\"date\\\"],\\n\\\"return\\\": [\\\"None\\\", \\\"None\\\", \\\"DataFrame\\\"],\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A ceramic artist creating handmade dishware that's used in eco-conscious restaurants", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ceramic Color Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the color of a ceramic piece given the firing temperature and glaze composition.\\\",\\n\\\"function_name\\\": \\\"predict_ceramic_color\\\",\\n\\\"input_args\\\": [\\\"firing_temp\\\", \\\"glaze_composition\\\"],\\n\\\"return\\\": \\\"RGB color code\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"keras\\\", \\\"sklearn\\\", \\\"pandas\\\", \\\"pickle\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a choirmaster at a German Catholic church", "synthesized text": "\"{\\n\\\"name\\\": \\\"Choir Practice Schedule Interface\\\",\\n\\\"description\\\": \\\"An interface for a choirmaster to manage choir practice schedules using Google Calendar API.\\\",\\n\\\"function_name\\\": \\\"create_event\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"start_time\\\", \\\"duration\\\", \\\"description\\\"],\\n\\\"return\\\": \\\"Confirmation message with a link to the event on Google Calendar\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A database administrator responsible for optimizing database performance in .NET applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Performance Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface that optimizes the performance of a PostgreSQL database by analyzing the execution plan of an SQL query. The interface uses the psycopg2 library to interact with the database.\\\",\\n\\\"function_name\\\": \\\"optimize_database_performance\\\",\\n\\\"input_args\\\": [\\\"dbname\\\", \\\"user\\\", \\\"password\\\", \\\"host\\\", \\\"port\\\", \\\"query\\\"],\\n\\\"return\\\": \\\"Query execution plan as a list of tuples or error message as a string\\\",\\n\\\"depend\\\": \\\"psycopg2 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ardent fan of Jerry Lee Lewis, rock 'n' roll music, and Coen Brothers' movies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music and Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a favorite music artist and a favorite movie director as input and returns lists of recommended music tracks and movies respectively.\\\",\\n\\\"function_name\\\": \\\"get_music_and_movie_recommendations\\\",\\n\\\"input_args\\\": {\\\"favorite_music_artist\\\": \\\"A string representing the favorite music artist.\\\", \\\"favorite_movie_director\\\": \\\"A string representing the favorite movie director.\\\"},\\n\\\"return\\\": {\\\"recommended_music\\\": \\\"A list of strings representing recommended music tracks.\\\", \\\"recommended_movies\\\": \\\"A list of strings representing recommended movies.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"spotipy\\\"], \\\"Web APIs\\\": [\\\"Spotify Web API\\\", \\\"The Movie Database (TMDb) API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A senior android developer with a specialty in using AutoValue.", "synthesized text": "\"{\\n\\\"name\\\": \\\"API Call History Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Android Debug Bridge (adb) to log API calls made by an application. The user inputs the package name of the application, and the interface returns a list of API calls made by the application.\\\",\\n\\\"function_name\\\": \\\"get_api_calls\\\",\\n\\\"input_args\\\": \\\"package_name\\\",\\n\\\"return\\\": \\\"List of API calls made by the application\\\",\\n\\\"depend\\\": \\\"Python library: subprocess, Tool: Android Debug Bridge (adb)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow musician who prefers the warmth and resonance of wooden casings for their instruments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Acoustic Property Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the acoustic properties of different types of wood based on their physical characteristics. The user provides the type of wood and the interface returns the predicted acoustic properties.\\\",\\n\\\"function_name\\\": \\\"predict_acoustic_properties\\\",\\n\\\"input_args\\\": \\\"wood_type\\\",\\n\\\"return\\\": \\\"predicted_properties\\\",\\n\\\"depend\\\": \\\"Python Libraries: pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate young researcher fascinated by the potential impact of decentralization on local governance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Transaction Interface\\\",\\n\\\"description\\\": \\\"An interface to send Ether from one Ethereum address to another. Returns the transaction hash.\\\",\\n\\\"function_name\\\": \\\"send_ethereum_transaction\\\",\\n\\\"input_args\\\": {\\n    \\\"sender_address\\\": \\\"The Ethereum address of the sender\\\",\\n    \\\"sender_private_key\\\": \\\"The private key of the sender's Ethereum address\\\",\\n    \\\"recipient_address\\\": \\\"The Ethereum address of the recipient\\\",\\n    \\\"amount\\\": \\\"The amount of Ether to be sent\\\"\\n},\\n\\\"return\\\": \\\"The transaction hash of the performed transaction\\\",\\n\\\"depend\\\": \\\"python's web3 library and Infura API for Ethereum blockchain interaction\\\"\\n}\"", "description": "tool development"}
{"input persona": "A frustrated policyholder advocating for fair compensation for damages caused by a natural disaster", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Damage Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface uses pre-trained machine learning models to estimate the cost of property damage based on images provided by the user. It can be used by policyholders to assess the damage to their property after a natural disaster.\\\",\\n\\\"function_name\\\": \\\"estimate_damage_cost\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to an image file of the damaged property. The image should clearly show the damage.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"damage_type\\\": \\\"The type of damage identified by the model, represented as an integer.\\\",\\n    \\\"estimated_cost\\\": \\\"The estimated cost to repair the damage, in dollars.\\\"\\n},\\n\\\"depend\\\": \\\"This function depends on the TensorFlow Hub and numpy libraries, as well as a pre-trained image recognition model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hotel owner in Tabriz, Iran, who relies on international tourists and is worried about the economic impact of US sanctions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Exchange Rate Interface\\\",\\n\\\"description\\\": \\\"This interface converts a given amount in Iranian Rials to US dollars using the current exchange rate.\\\",\\n\\\"function_name\\\": \\\"convert_rial_to_usd\\\",\\n\\\"input_args\\\": {\\\"amount_in_rial\\\": \\\"integer\\\"},\\n\\\"return\\\": \\\"float\\\",\\n\\\"depend\\\": \\\"ExchangeRate-API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An artist who incorporates tea leaves and tea stains into their paintings, creating unique works of art", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tea Stain Analysis Interface\\\",\\n\\\"description\\\": \\\"Predicts the color of tea stains based on the type of tea and brewing time\\\",\\n\\\"function_name\\\": \\\"predict_tea_stain_color\\\",\\n\\\"input_args\\\": [\\\"tea_type\\\", \\\"brewing_time\\\"],\\n\\\"return\\\": \\\"Predicted tea stain color in RGB format\\\",\\n\\\"depend\\\": \\\"sklearn, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A healthcare company looking to implement machine learning technology in their operations and seeks the junior developer's expertise", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Risk Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the risk of a patient having a particular disease based on their medical history, age, gender, etc.\\\",\\n\\\"function_name\\\": \\\"predict_patient_risk\\\",\\n\\\"input_args\\\": {\\\"patient_data\\\": \\\"dictionary\\\"},\\n\\\"return\\\": \\\"float (risk score)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"sklearn\\\"], \\\"machine learning models\\\": [\\\"pre-trained model from TensorFlow or Huggingface\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a Python programmer with a slight preference for using geographic libraries that abstract away the complexity in order to build geographic features.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geographic Distance Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface takes two locations as input and returns the geographic distance between them.\\\",\\n\\\"function_name\\\": \\\"get_distance\\\",\\n\\\"input_args\\\": {\\n    \\\"location1\\\": \\\"string representing the first location, can be an address, city or country\\\",\\n    \\\"location2\\\": \\\"string representing the second location, can be an address, city or country\\\"\\n},\\n\\\"return\\\": \\\"float representing the geographic distance between the two locations in kilometers\\\",\\n\\\"depend\\\": \\\"geopy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Professor David Hulme, Executive Director of GDI at The University of Manchester", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface compares the similarity between two documents by encoding them into high-dimensional vectors using a BERT model, and then computing the cosine similarity between these vectors. It is useful for understanding the overlap between different research papers, articles, or reports.\\\",\\n\\\"function_name\\\": \\\"compare_documents\\\",\\n\\\"input_args\\\": [\\\"path_to_doc1\\\", \\\"path_to_doc2\\\"],\\n\\\"return\\\": \\\"A similarity score between 0 and 1, with 1 being completely identical and 0 being completely dissimilar.\\\",\\n\\\"depend\\\": [\\\"Hugging Face Transformers library, sklearn, torch\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a person who recently had Lap Band surgery", "synthesized text": "\"{\\n\\\"name\\\": \\\"Calorie Counting Interface\\\",\\n\\\"description\\\": \\\"This interface leverages the Edamam API to provide a simple method of obtaining the calorie count of a specific food or meal. It is designed for users who need to monitor their calorie intake, such as someone who recently had Lap Band surgery.\\\",\\n\\\"function_name\\\": \\\"get_calories\\\",\\n\\\"input_args\\\": {\\n    \\\"food\\\": \\\"the name of the food or meal the user consumed\\\"\\n    },\\n\\\"return\\\": \\\"the estimated calorie count of the food or meal\\\",\\n\\\"depend\\\": \\\"Edamam Food Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a resident of Örnsköldsvik Municipality who is active in local politics", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Swedish Parliament Members Information\\\",\\n  \\\"description\\\": \\\"This interface uses the Open Data API provided by the Swedish Parliament (Riksdagen) to get information about the current members of the Swedish Parliament from a specific party.\\\",\\n  \\\"function_name\\\": \\\"get_swedish_parliament_members_by_party\\\",\\n  \\\"input_args\\\": {\\\"party\\\": \\\"String\\\"},\\n  \\\"return\\\": \\\"List of Dictionaries\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Riksdagen Open Data API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A patient and understanding university staff member tasked with assisting students in financing their education", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Loan Repayment Plan Estimator Interface\\\",\\n\\\"description\\\": \\\"This interface estimates student loan repayment amounts under each federal student loan repayment plan, based on the loan amount, interest rate, and income.\\\",\\n\\\"function_name\\\": \\\"estimate_student_loan_repayment\\\",\\n\\\"input_args\\\": {\\n    \\\"loan_amount\\\": \\\"The amount of the student loan in dollars.\\\",\\n    \\\"interest_rate\\\": \\\"The interest rate of the student loan as a decimal (e.g., 0.05 for 5%).\\\",\\n    \\\"income\\\": \\\"The annual income of the student in dollars.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"dictionary\\\",\\n    \\\"description\\\": \\\"A dictionary containing details about each federal student loan repayment plan, including the estimated monthly payment and total repayment amount.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\"],\\n    \\\"web_APIs\\\": [\\\"Federal Student Aid\\u2019s AidData API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A fisherman who has noticed changes in fish populations and is interested in understanding the scientific reasons behind these shifts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sea Temperature Data Interface\\\",\\n\\\"description\\\": \\\"This interface fetches sea surface temperature data for a specified location from NOAA's National Centers for Environmental Information. It helps to understand the impact of sea temperature changes on fish populations.\\\",\\n\\\"function_name\\\": \\\"get_sea_temperature\\\",\\n\\\"input_args\\\": {\\n  \\\"location\\\": \\\"A tuple of latitude and longitude of the location\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries each containing the date and sea surface temperature at the specified location\\\",\\n\\\"depend\\\": \\\"requests library, NOAA's National Centers for Environmental Information API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned soundproofing expert sharing his techniques on home DIY forums", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Frequency Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the frequency components of a sound. The user inputs the path to an audio file and the function returns a frequency spectrum of the audio.\\\",\\n\\\"function_name\\\": \\\"analyze_sound_frequency\\\",\\n\\\"input_args\\\": {\\\"audio_file_path\\\": \\\"Path to the audio file to be analyzed.\\\"},\\n\\\"return\\\": \\\"A 2D numpy array where each row corresponds to a frequency bin and each column corresponds to a time frame. The value in each cell represents the decibel level for that frequency at that time.\\\",\\n\\\"depend\\\": \\\"Python's Librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research-driven expert in thermodynamics with significant contributions to the field of energy conversion and storage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Thermodynamic Property Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to calculate the specific heat at constant pressure (Cp) for a given substance at a specified temperature.\\\",\\n\\\"function_name\\\": \\\"calculate_specific_heat\\\",\\n\\\"input_args\\\": {\\n    \\\"substance\\\": \\\"Name of the substance\\\",\\n    \\\"temperature\\\": \\\"Temperature at which the Cp is needed (Kelvin)\\\"\\n},\\n\\\"return\\\": \\\"Specific heat at constant pressure (Cp) for the given substance at the specified temperature.\\\",\\n\\\"depend\\\": \\\"Python library: CoolProp\\\"\\n}\"", "description": "tool development"}
{"input persona": "A grandchild of an Emory alumnus who enjoys listening to the retiree's stories and feels a strong connection to the university", "synthesized text": "\"{\\n\\\"name\\\": \\\"University History Quiz Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about a university from Wikipedia and generates a quiz based on the information. It is intended to help individuals learn about a university in an interactive and engaging way.\\\",\\n\\\"function_name\\\": \\\"create_quiz\\\",\\n\\\"input_args\\\": \\\"university_name: Name of the university, num_questions: Number of questions to generate\\\",\\n\\\"return\\\": \\\"A list of question-answer pairs about the university\\\",\\n\\\"depend\\\": \\\"Python's requests library for fetching information from Wikipedia, Huggingface's transformers library for question generation\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a patient with rheumatoid arthritis who has been actively involved in various therapy programs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Predictive Pain Level Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the pain level of rheumatoid arthritis patients based on their medical history, medication, and physical activities.\\\",\\n\\\"function_name\\\": \\\"predict_pain_level\\\",\\n\\\"input_args\\\": [\\\"medical_history_file\\\", \\\"medication_file\\\", \\\"activity_file\\\"],\\n\\\"return\\\": \\\"Predicted pain level (integer)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"torch\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"huggingface/your_model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A bioinformatics specialist who is passionate about using genomics in game development to create more realistic and immersive experiences", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genome Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a path to a FASTA file as input and returns some basic statistics about the genome sequence, such as its length, GC content, and nucleotide distribution.\\\",\\n\\\"function_name\\\": \\\"analyze_genome_sequence\\\",\\n\\\"input_args\\\": {\\\"fasta_file_path\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"length\\\": \\\"integer\\\", \\\"gc_content\\\": \\\"float\\\", \\\"nucleotide_distribution\\\": \\\"dictionary\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"Bio from Biopython\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A history professor teaching a course on Alberta's political history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Political Party Classification Interface\\\",\\n\\\"description\\\": \\\"This interface takes a political speech or document text as input and returns the likely political party affiliation of the speaker or author.\\\",\\n\\\"function_name\\\": \\\"classify_political_party\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"String indicating the likely political party ('Conservative Party', 'New Democratic Party', 'Liberal Party')\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library and the RoBERTa model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A publisher interested in innovative and unique board game designs, offering opportunities for collaboration and publication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Board Game Idea Generator Interface\\\",\\n\\\"description\\\": \\\"Interface to generate innovative and unique board game ideas based on a specific theme or concept. Powered by a large language model.\\\",\\n\\\"function_name\\\": \\\"generate_board_game_idea\\\",\\n\\\"input_args\\\": [\\\"theme\\\"],\\n\\\"return\\\": \\\"A brief description of a board game idea centered around the input theme.\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A synthetic dye manufacturer trying to convince artisans to switch to their bold, longer-lasting colors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Comparison Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that uses a pre-trained TensorFlow model to compare the color intensity and longevity of two images.\\\",\\n\\\"function_name\\\": \\\"compare_colors\\\",\\n\\\"input_args\\\": [\\\"img_path_1\\\", \\\"img_path_2\\\"],\\n\\\"return\\\": \\\"A numpy array representing the comparison of color intensity and longevity of the two images.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\", \\\"https://tfhub.dev/google/compare_color/1\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An insurance sales agent who relies on visually striking advertisements to attract customers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Color Enhancement Interface\\\",\\n\\\"description\\\": \\\"This interface enhances the color and contrast of an image to make it more visually appealing. It takes the path to an image file as input and returns a color enhanced version of the image.\\\",\\n\\\"function_name\\\": \\\"enhance_image_color\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A color enhanced version of the input image\\\",\\n\\\"depend\\\": \\\"This function depends on the OpenCV library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer specialized in Python and familiar with abstract syntax tree (AST) transformation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Code Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analyzing and modifying Python code using abstract syntax tree (AST) transformation. It can replace all instances of a variable name with a new name in a given Python code.\\\",\\n\\\"function_name\\\": \\\"rename_variable_in_code\\\",\\n\\\"input_args\\\": {\\n    \\\"code\\\": \\\"Python code as a string\\\",\\n    \\\"old_name\\\": \\\"Old variable name as a string\\\",\\n    \\\"new_name\\\": \\\"New variable name as a string\\\"\\n},\\n\\\"return\\\": \\\"Modified Python code as a string\\\",\\n\\\"depend\\\": \\\"Python's built-in `ast` and `codegen` libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow renewable energy enthusiast who shares information and resources about Li-ion batteries", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Battery Life Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the remaining lifespan of a Li-ion battery based on its current charge, discharge, and temperature.\\\",\\n  \\\"function_name\\\": \\\"predict_battery_life\\\",\\n  \\\"input_args\\\": {\\n    \\\"charge\\\": \\\"Current charge of the battery\\\",\\n    \\\"discharge\\\": \\\"Current discharge of the battery\\\",\\n    \\\"temperature\\\": \\\"Current temperature of the battery\\\"\\n  },\\n  \\\"return\\\": \\\"Estimated remaining life of the battery in cycles\\\",\\n  \\\"depend\\\": \\\"Pre-trained machine learning model (e.g., a regression model), pandas, sklearn.externals.joblib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow student who is also interested in learning knitting and wants to start a knitting club at school", "synthesized text": "\"{\\n\\\"name\\\": \\\"Knitting Pattern Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a knitting pattern based on the type of item and desired difficulty level.\\\",\\n\\\"function_name\\\": \\\"generate_knitting_pattern\\\",\\n\\\"input_args\\\": [\\\"item_type\\\", \\\"difficulty_level\\\"],\\n\\\"return\\\": \\\"A custom knitting pattern.\\\",\\n\\\"depend\\\": [\\\"Web APIs\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A powerful sports agent known for his unethical practices and resistance to accountability", "synthesized text": "\"{\\n\\\"name\\\": \\\"Suspicious Activity Detection Interface\\\",\\n\\\"description\\\": \\\"An interface for detecting suspicious activities based on a user's historical transaction data. It inputs a CSV file and outputs any suspicious activities.\\\",\\n\\\"function_name\\\": \\\"detect_suspicious_activities\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"string representing the path to the CSV file\\\"},\\n\\\"return\\\": \\\"DataFrame containing the suspicious activities\\\",\\n\\\"depend\\\": \\\"Python's pandas and Scikit-learn libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic fan of Rajneesh Karnatak, who idolizes him for his achievements in the banking sector of India", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the trend of a stock based on a synthetic news headline for the stock symbol. The prediction 'Bullish' implies that the stock price might go up, 'Bearish' implies that the stock price might go down, and 'Neutral' implies no significant change in the stock price.\\\",\\n\\\"function_name\\\": \\\"predict_stock_trend\\\",\\n\\\"input_args\\\": {\\n    \\\"stock_symbol\\\": \\\"The symbol of the stock to predict the trend for. E.g., 'AAPL' for Apple Inc.\\\"\\n},\\n\\\"return\\\": \\\"The predicted trend of the stock - 'Bullish', 'Bearish', or 'Neutral'.\\\",\\n\\\"depend\\\": \\\"Uses huggingface transformers (AutoTokenizer, AutoModelForSequenceClassification), torch, and a large language model (LLM)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An older brother who served in the military and offers practical advice for preparation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physical Fitness Training Interface\\\",\\n\\\"description\\\": \\\"This interface generates a fitness training regimen based on the user's age and gender, referring to the official U.S. Army Physical Fitness Training Standards.\\\",\\n\\\"function_name\\\": \\\"get_fitness_regimen\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"gender\\\"],\\n\\\"return\\\": \\\"A dictionary with the number of push-ups, sit-ups, and the time for a 2-mile run the user should aim for.\\\",\\n\\\"depend\\\": \\\"U.S. Army Physical Fitness Training Standards\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior lecturer in Development Studies who is critical of inequity and interested in technology's role in addressing global challenges.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Global Development Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the World Bank API to fetch relevant data about global development indicators.\\\",\\n\\\"function_name\\\": \\\"get_development_data\\\",\\n\\\"input_args\\\": {\\n    \\\"country\\\": \\\"ISO2 country code (e.g., 'US' for United States)\\\",\\n    \\\"indicator\\\": \\\"Indicator ID according to the World Bank's database (e.g., 'SP.POP.TOTL' for total population)\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing the year and the corresponding value of the indicator for each available year.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas; Web APIs: World Bank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a single mother of three, always on a budget, and looking for affordable beauty products that can deliver great results.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Affordable Beauty Product Finder Interface\\\",\\n\\\"description\\\": \\\"An interface to find affordable beauty products within a certain price range using the Amazon Product Advertising API.\\\",\\n\\\"function_name\\\": \\\"get_affordable_beauty_products\\\",\\n\\\"input_args\\\": {\\n    \\\"max_price\\\": \\\"The maximum price (in cents) you are willing to pay for a beauty product.\\\"\\n},\\n\\\"return\\\": \\\"A list of beauty products within the given price range, each represented as a dictionary with keys for title, price, image, and detail_page_url.\\\",\\n\\\"depend\\\": \\\"Python library: bottlenose, xml.etree.ElementTree; Web API: Amazon Product Advertising API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Hindu family that appreciates the efforts of the Muslim individual in fostering harmony and unity", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interfaith Harmony Message Generator Interface\\\",\\n  \\\"description\\\": \\\"This interface generates a heartwarming message dedicated to a Muslim individual from a Hindu family, appreciating their efforts in fostering harmony and unity.\\\",\\n  \\\"function_name\\\": \\\"generate_interfaith_harmony_message\\\",\\n  \\\"input_args\\\": [\\\"muslim_individual_name\\\"],\\n  \\\"return\\\": \\\"A personalized message expressing appreciation.\\\",\\n  \\\"depend\\\": \\\"large language model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A stay-home mom turned family caregiver for my elderly and disabled father.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Schedule Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to set up a reminder for administering medication. The user needs to input the medication name and the time of day to administer the medication, and the system will print a reminder message at the specified time each day.\\\",\\n\\\"function_name\\\": \\\"set_medication_reminder\\\",\\n\\\"input_args\\\": {\\n    \\\"medication_name\\\": \\\"Name of the medication\\\",\\n    \\\"reminder_time\\\": \\\"Time to administer the medication in 24-hour format (example: '13:00' for 1 PM)\\\"\\n},\\n\\\"return\\\": \\\"This function does not return anything. It keeps running and prints a reminder message at the specified time daily.\\\",\\n\\\"depend\\\": \\\"Python schedule library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A legendary flamenco guitarist who has inspired generations of musicians with their virtuosity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chord Progression Generator Interface\\\",\\n\\\"description\\\": \\\"This interface takes the key of a song, the mode (major or minor), and the number of chords desired, and generates a chord progression.\\\",\\n\\\"function_name\\\": \\\"generate_chord_progression\\\",\\n\\\"input_args\\\": {\\\"key\\\": \\\"string\\\", \\\"mode\\\": \\\"string\\\", \\\"num_chords\\\": \\\"int\\\"},\\n\\\"return\\\": \\\"list of string\\\",\\n\\\"depend\\\": \\\"music21 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a public safety officer for the Moldova Border Police", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Face Recognition Interface\\\",\\n\\\"description\\\": \\\"This high-level interface takes an image file and a database of known faces as inputs, then returns the names of recognized people in the image file using face recognition technology. It is useful for public safety officers to identify people at points of interest like border crossings.\\\",\\n\\\"function_name\\\": \\\"identify_faces_in_image\\\",\\n\\\"input_args\\\": [\\\"image_file\\\", \\\"known_faces_dir\\\"],\\n\\\"return\\\": \\\"names_of_people_in_image\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"face_recognition\\\", \\\"cv2\\\", \\\"numpy\\\", \\\"os\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A brewery owner seeking guidance to reduce water waste and promote sustainable business practices", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Water Usage Reduction Interface\\\",\\n  \\\"description\\\": \\\"Uses the US EPA's WaterSense Water Budget Tool API to calculate the amount of water needed based on location and area of the brewery. Provides recommendations to reduce water usage.\\\",\\n  \\\"function_name\\\": \\\"reduce_water_usage\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"The location of the brewery\\\",\\n    \\\"area\\\": \\\"The area of the brewery in square meters\\\"\\n  },\\n  \\\"return\\\": \\\"A list of conservation tips to reduce water usage.\\\",\\n  \\\"depend\\\": \\\"US EPA's WaterSense Water Budget Tool API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A statistician analyzing data on income distribution and inequality in various African countries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Income Inequality Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches the income distribution data for a specified African country from the World Bank API, plots the income share held by the lowest 20% over the years, and displays the plot.\\\",\\n\\\"function_name\\\": \\\"plot_income_distribution\\\",\\n\\\"input_args\\\": \\\"country_code - The ISO 3-letter code of the country.\\\",\\n\\\"return\\\": \\\"A plot showing the income share held by the lowest 20% over the years in the specified country.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas, matplotlib; Web APIs: World Bank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a pirate captain who has a sentimental soft spot for giving children educational opportunities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Educational Quiz Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a quiz with a specified number of questions for children, leveraging the Open Trivia Database API.\\\",\\n\\\"function_name\\\": \\\"generate_educational_quiz\\\",\\n\\\"input_args\\\": {\\n\\\"number_of_questions\\\": \\\"The number of questions to be included in the quiz. Must be an integer.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains a trivia question, the correct answer, and a list of incorrect answers.\\\",\\n\\\"depend\\\": \\\"Open Trivia Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A ruthless and power-hungry alien warlord, constantly sabotaging diplomatic efforts and seeking domination over other civilizations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Planet Classification Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to input the name or ID of an exoplanet and returns the classification of the planet, its radius, mass, and distance from its star.\\\",\\n\\\"function_name\\\": \\\"get_planet_classification\\\",\\n\\\"input_args\\\": \\\"planet_id\\\",\\n\\\"return\\\": \\\"Dictionary with keys 'classification', 'radius', 'mass', 'distance_from_star'\\\",\\n\\\"depend\\\": \\\"NASA API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A newly enrolled Master's student in the School of Pharmacy at Newcastle University", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Drug Interaction Checker Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the RxNorm API to check for interactions between two drugs. It takes as input the names of two drugs and returns information about any known interactions between them.\\\",\\n  \\\"function_name\\\": \\\"check_drug_interaction\\\",\\n  \\\"input_args\\\": {\\n    \\\"drug1\\\": \\\"Name of the first drug\\\",\\n    \\\"drug2\\\": \\\"Name of the second drug\\\"\\n  },\\n  \\\"return\\\": \\\"Information about any known interactions between the two drugs\\\",\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"RxNorm API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A renowned perfumer known for creating unique and captivating scents that evoke specific emotions and memories", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scent Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends a perfume based on the user's preferred scent notes and the emotion they want to evoke. It uses a K-nearest neighbors model trained on a dataset of perfumes and their associated notes and emotions.\\\",\\n\\\"function_name\\\": \\\"recommend_scent\\\",\\n\\\"input_args\\\": [\\\"notes\\\", \\\"desired_emotion\\\"],\\n\\\"return\\\": \\\"A recommended perfume's name\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"sklearn\\\", \\\"pandas\\\"], \\\"machine learning models\\\": [\\\"K-nearest neighbors model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A hotel owner who has been having trouble managing bookings manually.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Booking Management Interface\\\",\\n\\\"description\\\": \\\"An interface to manage hotel bookings. It allows the hotel owner to add, view, and delete bookings from a SQLite database.\\\",\\n\\\"function_name\\\": [\\\"initialize_db\\\", \\\"add_booking\\\", \\\"view_bookings\\\", \\\"delete_booking\\\"],\\n\\\"input_args\\\": [\\\"guest_name\\\", \\\"room_number\\\", \\\"check_in_date\\\", \\\"check_out_date\\\", \\\"id\\\"],\\n\\\"return\\\": \\\"For add_booking and delete_booking, there is no return. For view_bookings, it returns a list of tuples, each containing the details of a booking (id, guest_name, room_number, check_in_date, check_out_date).\\\",\\n\\\"depend\\\": \\\"sqlite3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Vietnamese local government official concerned with urban development", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Building Permit Application Status Interface\\\",\\n  \\\"description\\\": \\\"An interface to check the status of a building permit application using the local government's public APIs. The user inputs their building permit application number, and the interface returns the status of their application.\\\",\\n  \\\"function_name\\\": \\\"get_building_permit_status\\\",\\n  \\\"input_args\\\": {\\n    \\\"application_number\\\": \\\"The building permit application number.\\\"\\n  },\\n  \\\"return\\\": \\\"The status of the building permit application, or an 'Application not found.' message if the specified application number does not exist.\\\",\\n  \\\"depend\\\": \\\"requests library, local government's public APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Ruby developer who not very familiar with Vkontakte (VK) API.", "synthesized text": "\"{\\n\\\"name\\\": \\\"VK Post Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of creating a post on a user's VK wall. Users only need to provide their access token, the message to be posted, and (optionally) any attachments.\\\",\\n\\\"function_name\\\": \\\"post_to_vk_wall\\\",\\n\\\"input_args\\\": [\\\"access_token\\\", \\\"message\\\", \\\"attachments\\\"],\\n\\\"return\\\": \\\"A message indicating whether the post was created successfully or not.\\\",\\n\\\"depend\\\": \\\"VK API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate fan of Scott Cooley who has been following his music since the 90s and owns all his albums.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Music Lyrics Search Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to search the lyrics of a song by providing the artist and song title. It leverages the Genius API to fetch the lyrics.\\\",\\n  \\\"function_name\\\": \\\"get_song_lyrics\\\",\\n  \\\"input_args\\\": {\\n    \\\"artist\\\": \\\"Name of the artist\\\",\\n    \\\"song_title\\\": \\\"Title of the song\\\"\\n  },\\n  \\\"return\\\": \\\"Lyrics of the song or 'Song not found' if the song does not exist in the Genius database.\\\",\\n  \\\"depend\\\": \\\"Python's requests library for HTTP requests, Genius API for fetching song lyrics.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school student who has experienced both the positive and negative effects of academic competition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Academic Word Frequency Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the NLTK library in Python to assess the frequency of academic words in a student's essay.\\\",\\n\\\"function_name\\\": \\\"academic_word_frequency\\\",\\n\\\"input_args\\\": {\\\"essay_text\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"word\\\": \\\"frequency\\\"},\\n\\\"depend\\\": \\\"Natural Language Toolkit (NLTK)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A ground operations manager ensuring smooth coordination between aircraft and support vehicles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aircraft and Vehicle Coordination Interface\\\",\\n\\\"description\\\": \\\"This interface provides the real-time distance between an aircraft and a ground support vehicle to ensure their smooth coordination.\\\",\\n\\\"function_name\\\": \\\"get_distance\\\",\\n\\\"input_args\\\": {\\n\\\"aircraft_id\\\": \\\"The ID of the aircraft\\\",\\n\\\"vehicle_id\\\": \\\"The ID of the ground support vehicle\\\"\\n},\\n\\\"return\\\": \\\"The real-time distance in kilometers between the aircraft and the vehicle.\\\",\\n\\\"depend\\\": \\\"Google Maps API, geopy python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old friend and university classmate of Däulet Muqaev", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates a document from one language to another using Google's Cloud Translation API.\\\",\\n\\\"function_name\\\": \\\"translate_document\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_file\\\": \\\"The path to the text file to be translated.\\\",\\n    \\\"target_language\\\": \\\"The target language to translate the document into.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"original_text\\\": \\\"The original text from the file.\\\",\\n    \\\"translated_text\\\": \\\"The translated text in the target language.\\\"\\n},\\n\\\"depend\\\": \\\"Google's Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned novelist known for their command of the English language and rich storytelling", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Text Complexity Rating Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Python library textstat to calculate the complexity and readability of a given text. It returns a dictionary with the Flesch Reading Ease, SMOG Index, Flesch-Kincaid Grade, and Coleman-Liau Index scores.\\\",\\n  \\\"function_name\\\": \\\"assess_text_complexity\\\",\\n  \\\"input_args\\\": \\\"input_text\\\",\\n  \\\"return\\\": \\\"Dictionary with Flesch Reading Ease, SMOG Index, Flesch-Kincaid Grade, and Coleman-Liau Index scores\\\",\\n  \\\"depend\\\": \\\"Python library: textstat\\\"\\n}\"", "description": "tool development"}
{"input persona": "a rural development scholar who is curious about various development schemes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Development Scheme Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about a development scheme when queried with the scheme's name. It is aimed at scholars and researchers who wish to study various development schemes.\\\",\\n\\\"function_name\\\": \\\"get_scheme_details\\\",\\n\\\"input_args\\\": \\\"scheme_name - The name of the development scheme.\\\",\\n\\\"return\\\": \\\"A dictionary containing information about the development scheme.\\\",\\n\\\"depend\\\": \\\"requests library, Government Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A digital artist who creates custom wallpapers and themes for Android devices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Theme Color Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface for extracting the dominant colors from an image. Useful for digital artists creating wallpapers and themes.\\\",\\n\\\"function_name\\\": \\\"get_dominant_colors\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"num_colors\\\"],\\n\\\"return\\\": \\\"List of RGB values of the dominant colors in the image.\\\",\\n\\\"depend\\\": \\\"Python's sklearn library for KMeans clustering algorithm, numpy for array manipulation, PIL (Python Imaging Library) for image processing\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner in Grand Forks, North Dakota, specializing in supplying construction materials.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Price Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that compares prices of construction materials from different suppliers. User only needs to input the type of material, and the interface will return the prices from different suppliers.\\\",\\n\\\"function_name\\\": \\\"get_material_prices\\\",\\n\\\"input_args\\\": \\\"material_type - the type of construction material (e.g., 'concrete', 'wood')\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are the supplier names and the values are the prices of the material from each supplier.\\\",\\n\\\"depend\\\": \\\"Uses the APIs of different construction material suppliers.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A donkey-loving farm owner in a rural area", "synthesized text": "\"{\\n\\\"name\\\": \\\"Donkey Sound Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to differentiate between the sounds made by a donkey (like braying) and other farm sounds.\\\",\\n\\\"function_name\\\": \\\"analyse_donkey_sound\\\",\\n\\\"input_args\\\": \\\"path_to_wav - The path to the .wav file to be analyzed.\\\",\\n\\\"return\\\": \\\"A string indicating whether the sound is made by a donkey or not.\\\",\\n\\\"depend\\\": \\\"Python's TensorFlow, TensorFlow Hub, NumPy, and SciPy libraries, as well as a pre-trained sound classification model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another property developer with a similar reputation for innovative design and market competitiveness", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real Estate Market Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get property details and estimate market value using Zillow's API. Users input an address or location coordinates and get back details such as estimated property value, property size, number of bedrooms and bathrooms, etc.\\\",\\n\\\"function_name\\\": \\\"get_property_details\\\",\\n\\\"input_args\\\": \\\"address\\\",\\n\\\"return\\\": \\\"A dictionary with property details\\\",\\n\\\"depend\\\": \\\"Zillow's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An astrophysicist who worked on satellite design.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Orbit Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the next pass of a satellite over a specific location.\\\",\\n\\\"function_name\\\": \\\"next_satellite_pass\\\",\\n\\\"input_args\\\": [\\\"tle1\\\", \\\"tle2\\\", \\\"latitude\\\", \\\"longitude\\\", \\\"elevation\\\"],\\n\\\"return\\\": \\\"Prints the rise, culmination, and set times of the satellite.\\\",\\n\\\"depend\\\": [\\\"skyfield API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A player on the Boston Bruins who appreciates the unique and creative designs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hockey Jersey Design Interface\\\",\\n\\\"description\\\": \\\"Generates unique and creative designs for hockey jerseys using a pre-trained Generative Adversarial Network (GAN) from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"generate_jersey_design\\\",\\n\\\"input_args\\\": [\\\"colors\\\"],\\n\\\"return\\\": \\\"A unique design for a hockey jersey as a numpy array\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A park ranger familiar with the Morrison Trail", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trail Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed information about hiking trails, including length, elevation, difficulty, and location. Users need to input the name of the trail, and the interface will return the detailed information of the trail.\\\",\\n\\\"function_name\\\": \\\"get_trail_info\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"trail_name\\\": \\\"Type: str. The name of the hiking trail.\\\"\\n    },\\n\\\"return\\\": \\n    {\\n    \\\"Trail Information\\\": \\\"Type: dict. A dictionary containing the name, length, elevation, difficulty, and location of the trail.\\\"\\n    },\\n\\\"depend\\\": \\\"This function depends on the Hiking Project API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Mageto 2 developer who is skilled in debugging", "synthesized text": "\"{\\n\\\"name\\\": \\\"Magento 2 Log Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for Magento 2 developers to quickly analyze their log files for errors and warnings.\\\",\\n\\\"function_name\\\": \\\"analyze_magento_log\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the log file to be analyzed.\\\"},\\n\\\"return\\\": {\\\"CRITICAL\\\": \\\"The count of critical errors in the log file.\\\", \\\"ERROR\\\": \\\"The count of errors in the log file.\\\", \\\"WARNING\\\": \\\"The count of warnings in the log file.\\\"},\\n\\\"depend\\\": {\\\"Python\\\": [\\\"logging\\\", \\\"re\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An herbalist sharing knowledge and experiences about using mushrooms in holistic medicine", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mushroom Species Information Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a mushroom species as input and returns information such as scientific name, common names, habitats, and medicinal uses.\\\",\\n\\\"function_name\\\": \\\"get_mushroom_info\\\",\\n\\\"input_args\\\": {\\n    \\\"name\\\": \\\"The name of the mushroom species\\\"\\n},\\n\\\"return\\\": {\\n    \\\"scientific_name\\\": \\\"The scientific name of the mushroom\\\",\\n    \\\"common_names\\\": \\\"The common names of the mushroom\\\",\\n    \\\"habitats\\\": \\\"The typical habitats of the mushroom\\\",\\n    \\\"medicinal_uses\\\": \\\"The medicinal uses of the mushroom (if available)\\\"\\n},\\n\\\"depend\\\": \\\"Python Requests library, Trefle API or similar plant database\\\"\\n}\"", "description": "tool development"}
{"input persona": "German national, heavily invested in Deutsche Post stocks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the future closing price of Deutsche Post stocks for a given number of days using a machine learning model.\\\",\\n\\\"function_name\\\": \\\"stock_price_prediction\\\",\\n\\\"input_args\\\": \\\"days_into_future\\\",\\n\\\"return\\\": \\\"Predicted closing price for Deutsche Post stocks for the given number of days.\\\",\\n\\\"depend\\\": {\\\"Python libraries\\\": [\\\"pandas_datareader\\\", \\\"numpy\\\", \\\"tensorflow\\\", \\\"sklearn.preprocessing\\\"], \\\"Web APIs\\\": [\\\"Yahoo Finance API\\\"], \\\"Machine learning models\\\": [\\\"TensorFlow Sequential Model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "an old friend and former teammate of Vaishnavi from the Government Sports Academy in Pune", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Stats Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Sportradar API to fetch the statistics of a specified player.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": \\\"player_name: The name of the player whose stats are to be fetched.\\\",\\n\\\"return\\\": \\\"A dictionary containing the statistics of the specified player.\\\",\\n\\\"depend\\\": \\\"requests library, Sportradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer familiar with TypeScript and Azure Resource Management (ARM) templates", "synthesized text": "\"{\\n\\\"name\\\": \\\"ARM Template Validator\\\",\\n\\\"description\\\": \\\"This interface validates Azure Resource Management (ARM) templates using the Azure SDK for Python. It checks if the templates are correctly structured and all resources are defined properly.\\\",\\n\\\"function_name\\\": \\\"validate_arm_template\\\",\\n\\\"input_args\\\": [\\\"template_file_path\\\"],\\n\\\"return\\\": \\\"A boolean value indicating whether the ARM template is valid or not.\\\",\\n\\\"depend\\\": [\\\"Azure SDK for Python\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an engineer who works in a power generation plant", "synthesized text": "\"{\\n\\\"name\\\": \\\"Energy Consumption Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the energy consumption of a power generation plant based on environmental features\\\",\\n\\\"function_name\\\": \\\"predict_energy_consumption\\\",\\n\\\"input_args\\\": [\\\"model\\\", \\\"temperature\\\", \\\"humidity\\\", \\\"pressure\\\"],\\n\\\"return\\\": \\\"Predicted energy consumption (float)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"numpy\\\", \\\"tensorflow\\\", \\\"keras\\\"], \\\"machine learning model\\\": \\\"energy_consumption_model.h5\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A Bolivian teenager who has been inspired by Brisa De Angulo's journey", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sexual Violence Support Interface\\\",\\n\\\"description\\\": \\\"An interface to provide immediate assistance and resources for sexual violence victims. It uses APIs from various help and support organizations.\\\",\\n\\\"function_name\\\": \\\"get_support_services\\\",\\n\\\"input_args\\\": \\\"location - The current location or country of the user.\\\",\\n\\\"return\\\": \\\"A list of nearby support services and organizations dedicated to helping sexual violence victims, including their names and contact details.\\\",\\n\\\"depend\\\": \\\"Web API: Global Resources API\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个不太了解轻小说文化，但对日本社会现象有所好奇的社会学研究者。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u8f7b\\u5c0f\\u8bf4\\u98ce\\u683c\\u5173\\u952e\\u8bcd\\u63d0\\u53d6\\\",\\n\\\"description\\\": \\\"\\u4ece\\u65e5\\u672c\\u8f7b\\u5c0f\\u8bf4\\u6587\\u672c\\u4e2d\\u63d0\\u53d6\\u5173\\u952e\\u8bcd\\uff0c\\u5e2e\\u52a9\\u7528\\u6237\\u4e86\\u89e3\\u8f7b\\u5c0f\\u8bf4\\u7684\\u4e3b\\u9898\\u8d8b\\u52bf\\u548c\\u98ce\\u683c\\\",\\n\\\"function_name\\\": \\\"get_light_novel_keywords\\\",\\n\\\"input_args\\\": \\\"\\u65e0\\\",\\n\\\"return\\\": \\\"\\u8fd4\\u56de\\u4e00\\u4e2a\\u5173\\u952e\\u8bcd\\u5217\\u8868\\uff0c\\u5217\\u8868\\u4e2d\\u7684\\u6bcf\\u4e00\\u4e2a\\u5143\\u7d20\\u662f\\u4e00\\u4e2a\\u5143\\u7ec4\\uff0c\\u7b2c\\u4e00\\u4e2a\\u5143\\u7d20\\u662f\\u5173\\u952e\\u8bcd\\uff0c\\u7b2c\\u4e8c\\u4e2a\\u5143\\u7d20\\u662f\\u8be5\\u5173\\u952e\\u8bcd\\u7684\\u5f97\\u5206\\\",\\n\\\"depend\\\": \\\"Python\\u5e93: requests, sklearn, jieba; Web API: \\u65e5\\u672c\\u8f7b\\u5c0f\\u8bf4\\u6570\\u636e\\u5e93API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old schoolmate who followed, but did not have much contact with, Rougier-Lagane", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitter Public Posts Collection Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches the 200 most recent public posts from a specific Twitter account. Please note that this function will not work if the account is private or does not exist.\\\",\\n\\\"function_name\\\": \\\"get_public_tweets\\\",\\n\\\"input_args\\\": \\\"username - The username of the Twitter account\\\",\\n\\\"return\\\": \\\"A list of the 200 most recent public posts from the specified Twitter account\\\",\\n\\\"depend\\\": \\\"Python library - tweepy\\\"\\n}\"", "description": "tool development"}
{"input persona": "an energetic ghost tour operator in Ireland", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Ghost Sightings Database Interface\\\",\\n  \\\"description\\\": \\\"An interface to query a database of ghost sightings based on location or type of ghost. Data includes date, location, type of ghost, and description of the sighting.\\\",\\n  \\\"function_name\\\": \\\"get_ghost_sightings\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"String (optional)\\\",\\n    \\\"type_of_ghost\\\": \\\"String (optional)\\\"\\n  },\\n  \\\"return\\\": \\\"List of dictionaries with each dictionary representing a ghost sighting\\\",\\n  \\\"depend\\\": \\\"Web API (Ghosts and Haunts API)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A photographer who needs a secure cloud storage solution to store and share high-resolution images", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure Cloud Storage Interface\\\",\\n\\\"description\\\": \\\"An interface for the Google Cloud Storage API that allows users to upload, download, and share images by providing the path to their image file.\\\",\\n\\\"function_name\\\": [\\\"initialize_storage\\\", \\\"upload_image\\\", \\\"download_image\\\"],\\n\\\"input_args\\\": {\\\"initialize_storage\\\": [\\\"bucket_name\\\"], \\\"upload_image\\\": [\\\"bucket_name\\\", \\\"source_file_name\\\", \\\"destination_blob_name\\\"], \\\"download_image\\\": [\\\"bucket_name\\\", \\\"source_blob_name\\\", \\\"destination_file_name\\\"]},\\n\\\"return\\\": {\\\"initialize_storage\\\": \\\"bucket\\\", \\\"upload_image\\\": \\\"public_url\\\", \\\"download_image\\\": \\\"destination_file_name\\\"},\\n\\\"depend\\\": [\\\"google-cloud-storage\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A huge fan of Colin Farrell from his hometown Dublin, Ireland.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Celebrity Facts Interface\\\",\\n  \\\"description\\\": \\\"An interface that pulls information about a specific actor from IMDb. Returns a dictionary of information about the actor.\\\",\\n  \\\"function_name\\\": \\\"get_actor_info\\\",\\n  \\\"input_args\\\": [\\\"actor_name\\\"],\\n  \\\"return\\\": \\\"Dictionary of actor's information\\\",\\n  \\\"depend\\\": \\\"IMDbPy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A healthcare organization seeking to implement fair and unbiased algorithms for patient care", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Healthcare Fairness Check Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the Aequitas Bias toolkit to assess the fairness and bias of healthcare algorithms across different demographic groups.\\\",\\n  \\\"function_name\\\": \\\"generate_fairness_report\\\",\\n  \\\"input_args\\\": {\\n    \\\"df\\\": \\\"A pandas DataFrame containing actual and predicted values, along with protected attributes such as race, gender, and age.\\\"\\n  },\\n  \\\"return\\\": \\\"A fairness report in the form of a pandas DataFrame, with metrics for each attribute and demographic group.\\\",\\n  \\\"depend\\\": \\\"Python library: Aequitas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A reporter intrigued by the unique bookstore events, wanting to write an article about the owner's puzzle-solving competitions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bookstore Event Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Books API and Scikit-learn's machine learning models to analyze patterns in bookstore events. The input is a list of ISBNs for the books used in the events, and the output is an analysis of the genres and authors that are most prevalent.\\\",\\n\\\"function_name\\\": \\\"analyze_bookstore_events\\\",\\n\\\"input_args\\\": [\\\"isbn_list\\\"],\\n\\\"return\\\": \\\"Dictionary containing 'Top Authors' and 'Top Genres'\\\",\\n\\\"depend\\\": \\\"Google Books API, requests, pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A health and safety manager responsible for implementing protocols to prevent chemical-related illnesses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Hazard Identification Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to retrieve hazard information for a chemical compound by inputting the compound's name.\\\",\\n\\\"function_name\\\": \\\"get_chemical_hazard_info\\\",\\n\\\"input_args\\\": {\\\"chemical_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"hazard_information\\\": \\\"string\\\"},\\n\\\"depend\\\": [\\\"ChemSpiPy library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A former military medic who encourages determination and discipline in their child's studies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Homework Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to track their child's homework and study progress by inputting the due date, subject, task, time spent, and whether the task is complete or not.\\\",\\n\\\"function_name\\\": [\\\"init_homework_tracker\\\", \\\"update_homework_tracker\\\"],\\n\\\"input_args\\\": [\\\"due_date\\\", \\\"subject\\\", \\\"task\\\", \\\"time_spent\\\", \\\"completed\\\"],\\n\\\"return\\\": \\\"Pandas DataFrame that shows the updated homework and study log.\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An automotive reporter seeking clear, timely, and accurate information about new models and company announcements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car News Aggregation Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches the latest news for a specified car company from multiple trusted car news websites.\\\",\\n\\\"function_name\\\": \\\"get_latest_car_news\\\",\\n\\\"input_args\\\": \\\"car_company - a string representing the name of the car company\\\",\\n\\\"return\\\": \\\"A list of links to the latest news articles about the specified car company\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A pregnant woman seeking guidance on maintaining a plant-based diet during pregnancy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant-Based Diet Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Spoonacular API to return healthy, plant-based recipe recommendations suitable for pregnancy, based on the user's input of their current cravings or desired ingredients.\\\",\\n\\\"function_name\\\": \\\"get_plant_based_recipes\\\",\\n\\\"input_args\\\": \\\"ingredient - a string representing the user's current craving or desired ingredient\\\",\\n\\\"return\\\": \\\"A list of titles of healthy, plant-based recipe recommendations that are suitable for pregnancy.\\\",\\n\\\"depend\\\": \\\"Python requests library, Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cosmetic surgeon who specializes in skin rejuvenation procedures to reverse sun damage", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Skin Health Checker Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained model from TensorFlow Hub to analyze an image of skin and return a heatmap highlighting possible areas of concern. Originally trained for skin cancer detection, this interface can be used to assess overall skin health and possible sun damage.\\\",\\n  \\\"function_name\\\": \\\"analyze_skin\\\",\\n  \\\"input_args\\\": \\\"path_to_img - a string representing the file path to an image of the skin area to be analyzed\\\",\\n  \\\"return\\\": \\\"a numpy array representing a heatmap of the analyzed skin image, with possible areas of concern highlighted\\\",\\n  \\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a loyal fan of the Indiana University Hoosiers basketball team", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Game Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface returns the upcoming game schedules for a given basketball team.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_games\\\",\\n\\\"input_args\\\": [\\\"team_name\\\"],\\n\\\"return\\\": \\\"List of dictionaries representing upcoming games. Each dictionary includes 'opponent', 'date', and 'location'.\\\",\\n\\\"depend\\\": \\\"requests, datetime, SportsOpenData API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research institute director who values the professionalism and precision of reports created using LaTeX", "synthesized text": "\"{\\n\\\"name\\\": \\\"LaTeX Document Compilation Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a path to a LaTeX document as input and outputs the compiled PDF document.\\\",\\n\\\"function_name\\\": \\\"compile_latex_document\\\",\\n\\\"input_args\\\": \\\"latex_document_path - A string representing the path to the LaTeX document\\\",\\n\\\"return\\\": \\\"The console output of the `pdflatex` command or raises a `subprocess.CalledProcessError` if there are any errors during the compilation.\\\",\\n\\\"depend\\\": \\\"Python's built-in `subprocess` and `os` modules. A LaTeX distribution like TeX Live or MiKTeX must be installed.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher studying historical ciphers and their impact on communication throughout history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cipher Decoding Interface\\\",\\n\\\"description\\\": \\\"This interface decodes messages that have been encoded with a Caesar cipher. Users need only to input the encoded message and the shift value used in the cipher, and the interface will return the decoded message.\\\",\\n\\\"function_name\\\": \\\"caesar_cipher_decoding\\\",\\n\\\"input_args\\\": [\\\"encoded_message\\\", \\\"shift\\\"],\\n\\\"return\\\": \\\"Decoded message as a string\\\",\\n\\\"depend\\\": \\\"Python's sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An app developer who develops educational tools for complex medical topics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Topic Summary Interface\\\",\\n\\\"description\\\": \\\"This interface takes a medical topic as input and returns a summary of the most recent and relevant articles on that topic using the NCBI Entrez Programming Utilities (E-utilities) API.\\\",\\n\\\"function_name\\\": \\\"get_medical_topic_summary\\\",\\n\\\"input_args\\\": [\\\"topic\\\", \\\"email\\\", \\\"num_results\\\"],\\n\\\"return\\\": \\\"A string containing the summaries of the most relevant articles on the input topic from the PubMed database.\\\",\\n\\\"depend\\\": \\\"BioPython Library, NCBI Entrez Programming Utilities (E-utilities) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local matchmaker who utilizes the mixer events for setting up potential couples", "synthesized text": "\"{\\n\\\"name\\\": \\\"Partner Matching Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the compatibility score of two individuals based on their profiles. The users input two profiles, and the interface returns a compatibility score.\\\",\\n\\\"function_name\\\": \\\"predict_compatibility\\\",\\n\\\"input_args\\\": [\\\"profile1\\\", \\\"profile2\\\", \\\"model\\\"],\\n\\\"return\\\": \\\"compatibility_score\\\",\\n\\\"depend\\\": [\\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A conservative politician in Denmark who greatly admires Aksel Møller", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Generator Interface\\\",\\n\\\"description\\\": \\\"This function generates a speech on a given topic using a pre-trained language model from Hugging Face's transformer library.\\\",\\n\\\"function_name\\\": \\\"generate_speech\\\",\\n\\\"input_args\\\": {\\\"topic\\\": \\\"The topic of the speech to be generated.\\\", \\\"length\\\": \\\"The desired length of the generated speech.\\\"},\\n\\\"return\\\": \\\"A string representing the generated speech.\\\",\\n\\\"depend\\\": \\\"Hugging Face's GPT2 model and tokenizer\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a lifelong, dedicated supporter of RC Strasbourg.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Live Football Match Score Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the api-football API to get the live score of the ongoing match of a specified team.\\\",\\n\\\"function_name\\\": \\\"get_live_match_score\\\",\\n\\\"input_args\\\": \\\"team\\\",\\n\\\"return\\\": \\\"A dictionary with team names and their respective scores if there is an ongoing match, else a message saying no ongoing match found.\\\",\\n\\\"depend\\\": \\\"RapidAPI's api-football\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nursing student preparing for pediatric nursing exams", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pediatric Drug Dosage Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the drug dosage for pediatric nursing based on the child's weight, the standard dosage, and the frequency.\\\",\\n\\\"function_name\\\": \\\"calculate_pediatric_dosage\\\",\\n\\\"input_args\\\": [\\\"std_dosage_mg_per_kg\\\", \\\"weight_kg\\\", \\\"frequency_per_day\\\"],\\n\\\"return\\\": \\\"The calculated dosage for the child.\\\",\\n\\\"depend\\\": \\\"No dependencies\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am Kiista P. Isaksen, a novelist with a deeply reflective personality, often finding symbolic meaning in names and titles.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Name Symbolism Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a name as input and returns the symbolic meaning of the name by finding words that are meaningful similar to the name.\\\",\\n\\\"function_name\\\": \\\"get_symbolic_meaning\\\",\\n\\\"input_args\\\": [\\\"name\\\"],\\n\\\"return\\\": \\\"A dictionary where the keys are words that are meaningful similar to the name and the values are the scores indicating the degree of similarity.\\\",\\n\\\"depend\\\": \\\"Datamuse API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Mexican mother living in Tijuana trying to find a safer place for her family", "synthesized text": "\"{\\n\\\"name\\\": \\\"Safe City Finder Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a list of cities sorted by safety in the desired countries. The safety is determined by the Numbeo Crime Index.\\\",\\n\\\"function_name\\\": \\\"get_safest_cities\\\",\\n\\\"input_args\\\": \\\"A list of countries\\\",\\n\\\"return\\\": \\\"A list of tuples, each containing a city name and its safety index, sorted in descending order of safety index\\\",\\n\\\"depend\\\": \\\"Numbeo Crime Index API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A very big fan of Anne McClain and has been following her journey since she joined NASA.", "synthesized text": "\"{\\n\\\"name\\\": \\\"International Space Station (ISS) Current Location Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the current location of the International Space Station (ISS). No inputs are required from the user. The function returns the latitude and longitude of the ISS.\\\",\\n\\\"function_name\\\": \\\"get_iss_current_location\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"The current location of the ISS in the format 'The ISS is currently at latitude [latitude] and longitude [longitude]'.\\\",\\n\\\"depend\\\": \\\"requests library, Open Notify's ISS Current Location API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another supply chain expert who works for a different company but shares insights and best practices with the supply chain expert", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Demand Forecasting Interface\\\",\\n\\\"description\\\": \\\"Predicts product demand using historical sales data\\\",\\n\\\"function_name\\\": \\\"predict_sales\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"DataFrame with the predicted sales for the next 30 days\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired lawyer who has always dreamed of singing on stage and finally decided to pursue it later in life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vocal Range Detection Interface\\\",\\n\\\"description\\\": \\\"This interface determines the vocal range of a user from an audio file of them singing.\\\",\\n\\\"function_name\\\": \\\"get_vocal_range\\\",\\n\\\"input_args\\\": \\\"audio_file - path to the audio file\\\",\\n\\\"return\\\": \\\"A tuple (min_pitch, max_pitch) in Hz representing the user's vocal range\\\",\\n\\\"depend\\\": \\\"Python's librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casino manager who enjoys discussing the allure and mechanics behind casino games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Card Probability Calculation Interface\\\",\\n\\\"description\\\": \\\"Calculates the probability of getting a certain poker hand\\\",\\n\\\"function_name\\\": \\\"card_probability\\\",\\n\\\"input_args\\\": {\\\"hand_type\\\": \\\"The type of poker hand to calculate the probability for\\\"},\\n\\\"return\\\": \\\"The probability of getting the specified poker hand\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"itertools\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A working-class British man who has always aspired, but never had the means, to travel and stand atop a mountain peak.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mountain Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface provides a detailed weather forecast for a specific mountain peak. The user just needs to input the latitude and longitude of the mountain.\\\",\\n\\\"function_name\\\": \\\"get_mountain_weather\\\",\\n\\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\"],\\n\\\"return\\\": \\\"Weather description string\\\",\\n\\\"depend\\\": [\\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A product manager relying on the backend engineer to deliver an efficient and reliable system", "synthesized text": "\"{\\n\\\"name\\\": \\\"System Health Check Interface\\\",\\n\\\"description\\\": \\\"An interface to monitor the system's health, including CPU usage, memory usage, disk usage, and network status. No input is required from the user.\\\",\\n\\\"function_name\\\": \\\"get_system_health\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"Dictionary\\\",\\n    \\\"description\\\": \\\"A dictionary containing information about system health, including CPU usage, memory usage, disk usage, bytes sent, and bytes received.\\\",\\n    \\\"example\\\": {\\n        \\\"CPU Usage (%)\\\": 12.9,\\n        \\\"Memory Usage (%)\\\": 78.1,\\n        \\\"Disk Usage (%)\\\": 55.7,\\n        \\\"Bytes Sent\\\": 2345678,\\n        \\\"Bytes Received\\\": 1234567\\n    }\\n},\\n\\\"depend\\\": \\\"Python library: psutil\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful entrepreneur who dropped out of high school but later achieved great success", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Entrepreneur Document Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses Natural Language Processing (NLP) machine learning models from Hugging Face to extract important entities, topics and summaries from documents.\\\",\\n  \\\"function_name\\\": \\\"analyze_document\\\",\\n  \\\"input_args\\\": \\\"path_to_doc\\\",\\n  \\\"return\\\": \\\"A dictionary with 'summary' and 'entities' keys\\\",\\n  \\\"depend\\\": \\\"Hugging Face NLP models\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who loves tranquility and has no interest in trains or any noisy means of transportation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quiet Place Finder\\\",\\n\\\"description\\\": \\\"Finds parks and libraries, which are typically quiet places, near a given location.\\\",\\n\\\"function_name\\\": \\\"find_quiet_places\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"A dictionary with two keys: 'Parks' and 'Libraries'. The values for these keys are lists of the names of parks and libraries, respectively, near the given location.\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data scientist analyzing the effectiveness of international institutions in promoting fair trade", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trade Agreement Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyze the impact of an international institution on the trade balance between two countries.\\\",\\n\\\"function_name\\\": \\\"analyze_trade_agreement\\\",\\n\\\"input_args\\\": [\\\"country1\\\", \\\"country2\\\", \\\"institution\\\"],\\n\\\"return\\\": \\\"A dictionary with the average trade balance between the two countries before and after joining the institution.\\\",\\n\\\"depend\\\": [\\\"World Bank API\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A forum moderator providing support and answering questions related to CRM and email marketing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Email Send Verification Interface\\\",\\n\\\"description\\\": \\\"An interface to send verification emails. Users only need to input the recipient's email address and the content of the email, our interface will handle the sending process and return the status of the email - whether it has been successfully sent or not.\\\",\\n\\\"function_name\\\": \\\"send_verification_email\\\",\\n\\\"input_args\\\": {\\n    \\\"api_key\\\": \\\"Your SendGrid API key\\\",\\n    \\\"from_email\\\": \\\"Email address from which the email will be sent\\\",\\n    \\\"to_email\\\": \\\"Recipient's email address\\\",\\n    \\\"subject\\\": \\\"Subject of the email\\\",\\n    \\\"content\\\": \\\"Content of the email\\\"\\n},\\n\\\"return\\\": \\\"The status of the email - whether it has been successfully sent or not.\\\",\\n\\\"depend\\\": \\\"SendGrid API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physical therapist specializing in pelvic floor exercises for OAB patients", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pelvic Floor Exercise Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the effectiveness of different pelvic floor exercises for Overactive Bladder (OAB) patients based on their age, gender, and severity of OAB symptoms, and recommends a set of exercises.\\\",\\n\\\"function_name\\\": \\\"recommend_exercises\\\",\\n\\\"input_args\\\": \\n  {\\n    \\\"age\\\": \\\"Age of the patient\\\",\\n    \\\"gender\\\": \\\"Gender of the patient\\\",\\n    \\\"severity\\\": \\\"Severity of OAB symptoms\\\"\\n  },\\n\\\"return\\\": \\\"A list of recommended pelvic floor exercises\\\",\\n\\\"depend\\\": \\\"Python's sklearn library. A hypothetical dataset of pelvic floor exercises effectiveness and a hypothetical trained RandomForestRegressor model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A no-nonsense nurse who appreciates the receptionist's efficiency in managing patient flow", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Appointment Management Interface\\\",\\n\\\"description\\\": \\\"This interface provides functionalities to manage a patient's appointments. It can add a new appointment, delete an existing appointment, or retrieve all appointments for a specific patient.\\\",\\n\\\"function_name\\\": [\\\"add_appointment\\\", \\\"delete_appointment\\\", \\\"get_patient_appointments\\\"],\\n\\\"input_args\\\": [\\\"path_to_csv\\\", \\\"patient_id\\\", \\\"appointment_date\\\", \\\"appointment_time\\\", \\\"doctor_id\\\"],\\n\\\"return\\\": [\\\"None for add_appointment and delete_appointment, DataFrame of patient appointments for get_patient_appointments\\\"],\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A sympathetic and courageous civilian who actively supports the rebel leader's cause, providing shelter and resources", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Secure Message Encryption Interface\\\",\\n  \\\"description\\\": \\\"An interface to encrypt and decrypt messages for secure communication. It uses Fernet symmetric encryption provided by the Cryptography library. The key used for encryption and decryption can be generated using the generate_key function. The encrypt_message function takes a plain text message and a key to return an encrypted message. The decrypt_message function takes an encrypted message and a key to return the decrypted plain text message.\\\",\\n  \\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_message\\\", \\\"decrypt_message\\\"],\\n  \\\"input_args\\\": {\\n    \\\"generate_key\\\": [],\\n    \\\"encrypt_message\\\": [\\\"message\\\", \\\"key\\\"],\\n    \\\"decrypt_message\\\": [\\\"cipher_text\\\", \\\"key\\\"]\\n  },\\n  \\\"return\\\": {\\n    \\\"generate_key\\\": \\\"A bytes object representing the key.\\\",\\n    \\\"encrypt_message\\\": \\\"A string representing the encrypted message.\\\",\\n    \\\"decrypt_message\\\": \\\"A string representing the decrypted message.\\\"\\n  },\\n  \\\"depend\\\": [\\\"Python Cryptography library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A data scientist who values detailed logging for comprehensive analysis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Logging Interface\\\",\\n\\\"description\\\": \\\"An interface that allows the user to log messages with different severity levels\\\",\\n\\\"function_name\\\": [\\\"initialize_logger\\\", \\\"log_message\\\"],\\n\\\"input_args\\\": {\\\"initialize_logger\\\": [\\\"output_dir\\\"], \\\"log_message\\\": [\\\"severity\\\", \\\"message\\\"]},\\n\\\"return\\\": \\\"No return value, messages are logged in a file and console\\\",\\n\\\"depend\\\": [\\\"Python's built-in logging library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A first-time parent interested in understanding how language development impacts their child's cognitive abilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the readability and complexity of a text using various indices.\\\",\\n\\\"function_name\\\": \\\"analyze_text_complexity\\\",\\n\\\"input_args\\\": \\\"a string of text\\\",\\n\\\"return\\\": \\\"a dictionary with the calculated scores for various readability indices\\\",\\n\\\"depend\\\": \\\"Textstat library\\\"\\n}\"", "description": "tool development"}
{"input persona": "日本同性恋群体的倡导者，同时是BL漫画的狂热粉丝。", "synthesized text": "\"{\\n\\\"name\\\": \\\"BL Manga Recommendation Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that takes a BL manga name as input and returns a list of related manga recommendations.\\\",\\n\\\"function_name\\\": \\\"get_related_manga\\\",\\n\\\"input_args\\\": \\\"manga_name\\\",\\n\\\"return\\\": \\\"A list of related manga names\\\",\\n\\\"depend\\\": \\\"Jikan API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner whose company was used as a launching pad for one of the hacker's attacks", "synthesized text": "\"{\\n    \\\"name\\\": \\\"IP Address Location Finder Interface\\\",\\n    \\\"description\\\": \\\"An interface to identify the geographical location of an IP address. It helps users trace the origin of any network attacks.\\\",\\n    \\\"function_name\\\": \\\"get_ip_location\\\",\\n    \\\"input_args\\\": {\\n        \\\"ip_address\\\": \\\"A string representing the IP address to be traced\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"location_info\\\": \\\"An object containing the geographical details of the IP address, which includes city, region, country, and postal code.\\\"\\n    },\\n    \\\"depend\\\": {\\n        \\\"python_libraries\\\": [\\\"geoip2\\\"],\\n        \\\"web_APIs\\\": [],\\n        \\\"pretrained_model\\\": []\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A wealthy patron who commissions the painter to create album covers for their favorite musicians", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Album Cover Art Generation Interface\\\",\\n  \\\"description\\\": \\\"Generates a unique and creative album cover art image file based on the user's input musician's name and theme description. The theme description is used to generate an image using a GAN model, and the musician's name is added to the generated image.\\\",\\n  \\\"function_name\\\": \\\"generate_album_cover_art\\\",\\n  \\\"input_args\\\": [\\\"musician_name\\\", \\\"theme_description\\\"],\\n  \\\"return\\\": \\\"An image file named '{musician_name}_album_cover.png'\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"PIL\\\", \\\"requests\\\"], \\\"machine learning models\\\": [\\\"Runway ML 'biggan-512'\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A tennis blogger who shares insights, statistics, and updates about Ashleigh Barty's matches", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Match Statistics Interface\\\",\\n  \\\"description\\\": \\\"Retrieves match statistics of Ashleigh Barty's tennis matches from the Tennis Data API.\\\",\\n  \\\"function_name\\\": \\\"get_match_statistics\\\",\\n  \\\"input_args\\\": {\\n    \\\"match_date\\\": \\\"The date of the match in YYYY-MM-DD format.\\\",\\n    \\\"opponent\\\": \\\"The name of Ashleigh Barty's opponent in the match.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"description\\\": \\\"A JSON object containing detailed match statistics such as number of aces, double faults, first serve percentage, break points won, etc.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Library\\\": \\\"requests\\\",\\n    \\\"Web API\\\": \\\"Tennis Data API\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A mathematician who provides insights into the theoretical aspects of electromagnetic radiation shielding", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Electromagnetic Radiation Shielding Efficacy Simulation Interface\\\",\\n  \\\"description\\\": \\\"This interface simulates the shielding efficacy of a material against electromagnetic radiation of a certain frequency and thickness of the material. The permittivity and permeability are given relative to vacuum (they are unitless). The frequency is given in Hertz (Hz), and the thickness in meters (m).\\\",\\n  \\\"function_name\\\": \\\"simulate_shielding_efficacy\\\",\\n  \\\"input_args\\\": {\\n    \\\"frequency\\\": \\\"The frequency of the electromagnetic radiation in Hertz (Hz).\\\",\\n    \\\"thickness\\\": \\\"The thickness of the material in meters (m).\\\",\\n    \\\"permittivity\\\": \\\"The permittivity of the material relative to vacuum.\\\",\\n    \\\"permeability\\\": \\\"The permeability of the material relative to vacuum.\\\"\\n  },\\n  \\\"return\\\": \\\"The absolute value of the transmission coefficient, which gives the proportion of the incident power that is transmitted through the material. A value close to 1 indicates good shielding efficacy, while a value close to 0 indicates poor shielding efficacy.\\\",\\n  \\\"depend\\\": \\\"Python libraries: numpy, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "Massimiliano Bartoli, a chef and restauranteur", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Recipe Ingredient Substitution Interface\\\",\\n  \\\"description\\\": \\\"This interface takes an ingredient and returns a list of potential substitutes using a pre-trained language model.\\\",\\n  \\\"function_name\\\": \\\"get_ingredient_substitution\\\",\\n  \\\"input_args\\\": {\\\"ingredient\\\": \\\"string\\\"},\\n  \\\"return\\\": \\\"string\\\",\\n  \\\"depend\\\": {\\\"huggingface\\\": \\\"transformers\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A high school basketball coach, who grew up admiring Linda Page's career.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate Player Efficiency Rating (PER), a measure of a player's per-minute productivity. The coach only needs to input the number of points, assists, rebounds, steals, and blocks their player made in a game.\\\",\\n\\\"function_name\\\": \\\"calculate_player_efficiency_rating\\\",\\n\\\"input_args\\\": {\\n    \\\"points\\\": \\\"Number of points scored by the player\\\",\\n    \\\"assists\\\": \\\"Number of assists made by the player\\\",\\n    \\\"rebounds\\\": \\\"Number of rebounds made by the player\\\",\\n    \\\"steals\\\": \\\"Number of steals made by the player\\\",\\n    \\\"blocks\\\": \\\"Number of blocks made by the player\\\",\\n    \\\"turnovers\\\": \\\"Number of turnovers by the player\\\",\\n    \\\"field_goal_attempts\\\": \\\"Number of field goal attempts by the player\\\",\\n    \\\"field_goals\\\": \\\"Number of successful field goals by the player\\\",\\n    \\\"free_throw_attempts\\\": \\\"Number of free throw attempts by the player\\\",\\n    \\\"free_throws\\\": \\\"Number of successful free throws by the player\\\",\\n    \\\"minutes_played\\\": \\\"Number of minutes the player played\\\",\\n    \\\"team_total_points\\\": \\\"Total points scored by the team\\\",\\n    \\\"opponent_total_points\\\": \\\"Total points scored by the opponent\\\"\\n},\\n\\\"return\\\": \\\"Player Efficiency Rating (PER) for the given player\\\",\\n\\\"depend\\\": \\\"No dependencies\\\"\\n}\"", "description": "tool development"}
{"input persona": "A meticulous archivist responsible for maintaining the orchestra's extensive sheet music collection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sheet Music Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses Optical Music Recognition (OMR) API to automatically classify the sheet music based on the information extracted from the sheet music image. Users only need to input the path to a sheet music image file, and the interface will return the classified information of this sheet music.\\\",\\n\\\"function_name\\\": \\\"classify_sheet_music\\\",\\n\\\"input_args\\\": \\\"sheet_music_image_path\\\",\\n\\\"return\\\": \\\"classified information of the sheet music\\\",\\n\\\"depend\\\": \\\"Audiveris API, cv2, requests, json\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aerospace company that requires precision components for their aircrafts", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface loads a 3D model and calculates the volume and surface area of the model. It is useful for aerospace companies that require precise calculations for their 3D models.\\\",\\n\\\"function_name\\\": \\\"analyze_3d_model\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A dictionary with the volume and surface area of the 3D model.\\\",\\n\\\"depend\\\": \\\"trimesh library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Soy un desarrollador de software con años de experiencia utilizando Vagrant para proporcionar entornos de desarrollo uniformes.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Vagrant Environment Setup Interface\\\",\\n  \\\"description\\\": \\\"An interface to setup and destroy Vagrant environments. Users can easily manage Vagrant environments by providing the location of the Vagrantfile.\\\",\\n  \\\"function_name\\\": [\\\"setup_vagrant_environment\\\", \\\"destroy_vagrant_environment\\\"],\\n  \\\"input_args\\\": [\\\"vagrantfile_path\\\"],\\n  \\\"return\\\": \\\"Boolean indicating whether the operation was successful or not\\\",\\n  \\\"depend\\\": [\\\"Python's subprocess module\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A data analyst using statistical methods to compare recidivism rates in various criminal justice systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recidivism Rate Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that uses statistical methods to compare recidivism rates in different criminal justice systems. The input should be CSV files containing recidivism data for different justice systems, and the interface will return a statistical comparison of the recidivism rates.\\\",\\n\\\"function_name\\\": \\\"compare_recidivism_rates\\\",\\n\\\"input_args\\\": [\\\"file_path1\\\", \\\"file_path2\\\"],\\n\\\"return\\\": \\\"A string indicating whether the difference in recidivism rates is statistically significant or not, along with the p-value.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a sniper expert in the navy seals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Distance Measurement Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the distance between two points on the earth's surface given their longitudes and latitudes. The user only needs to input the coordinates of two places, and our interface will return the distance between them in kilometers.\\\",\\n\\\"function_name\\\": \\\"calculate_distance\\\",\\n\\\"input_args\\\": [\\\"coord1\\\", \\\"coord2\\\"],\\n\\\"return\\\": \\\"The distance (in kilometers) between the two input coordinates.\\\",\\n\\\"depend\\\": \\\"Python's built-in math library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A land surveyor responsible for assessing property boundaries and topography", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Boundary and Topography Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a GeoTIFF file path and returns the boundary coordinates of the property and statistical analysis of the topography, such as minimum, maximum, mean, and standard deviation of the elevation points.\\\",\\n\\\"function_name\\\": \\\"get_boundary_and_topography\\\",\\n\\\"input_args\\\": \\\"geotiff_path\\\",\\n\\\"return\\\": \\\"A dictionary containing property boundary and topographical statistics\\\",\\n\\\"depend\\\": \\\"GDAL (Geospatial Data Abstraction Library)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A newly relocated insurance adjuster looking for a family-friendly neighborhood", "synthesized text": "\"{\\n\\\"name\\\": \\\"Family-friendly Neighborhood Finder\\\",\\n\\\"description\\\": \\\"This interface fetches and analyzes data related to crime rates, school ratings, etc. to find family-friendly neighborhoods for a given city and state.\\\",\\n\\\"function_name\\\": \\\"get_family_friendly_neighborhood\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"state\\\"],\\n\\\"return\\\": \\\"List of family-friendly neighborhoods\\\",\\n\\\"depend\\\": \\\"AreaVibes API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A land use planner responsible for implementing and enforcing land management policies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Land Use Policy Compliance Checker Interface\\\",\\n\\\"description\\\": \\\"This interface allows the land use planner to input the proposed land use policy and a list of geographic coordinates. It returns whether the proposed land use at each location complies with the policy or not.\\\",\\n\\\"function_name\\\": \\\"check_land_use_compliance\\\",\\n\\\"input_args\\\": {\\n    \\\"policy\\\": \\\"The proposed land use policy.\\\",\\n    \\\"locations\\\": \\\"A list of geographic coordinates.\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples with each location and a boolean indicating compliance.\\\",\\n\\\"depend\\\": \\\"Geographic Information System (GIS) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A marketing specialist who plans and manages live tournaments for the fan club", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tournament Scheduling Interface\\\",\\n  \\\"description\\\": \\\"An interface to generate a round-robin tournament schedule given a list of teams. Each team will play every other team once.\\\",\\n  \\\"function_name\\\": \\\"create_tournament_schedule\\\",\\n  \\\"input_args\\\": [\\\"teams\\\"],\\n  \\\"return\\\": \\\"A list of rounds, where each round is a list of matches, and each match is a tuple of two teams.\\\",\\n  \\\"depend\\\": [\\\"Python Library: round_robin_tournament\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A obstetrician specializing in multiple pregnancies who can monitor the health of both the mother and the babies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fetal Health Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the health of the fetus based on various health parameters of the mother. It uses a pre-trained machine learning model for the prediction.\\\",\\n\\\"function_name\\\": \\\"predict_fetal_health\\\",\\n\\\"input_args\\\": [\\\"mother_age\\\", \\\"systolic_bp\\\", \\\"diastolic_bp\\\", \\\"glucose\\\", \\\"skin_thickness\\\", \\\"insulin\\\", \\\"bmi\\\"],\\n\\\"return\\\": \\\"A predictive score indicating the health of the fetus.\\\",\\n\\\"depend\\\": \\\"Python's joblib and pandas libraries, and a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data scientist from a research organization looking to leverage Sagemaker for data analysis and model building", "synthesized text": "\"{\\n\\\"name\\\": \\\"Amazon Sagemaker Deployment Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of deploying a machine learning model on Amazon Sagemaker. It manages the creation and deployment of the model, allowing the user to focus on the data analysis and model building aspects of their project.\\\",\\n\\\"function_name\\\": \\\"deploy_model_on_sagemaker\\\",\\n\\\"input_args\\\": [\\\"model_name\\\", \\\"execution_role\\\", \\\"model_data_path\\\"],\\n\\\"return\\\": \\\"endpoint_name\\\",\\n\\\"depend\\\": [\\\"boto3\\\", \\\"sagemaker\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A self-taught programmer who has successfully developed their own operating system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Execution Time Measurement Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to measure the execution time of their Python code. Users need to input their Python code as a string, and the interface will return the execution time of the code in seconds.\\\",\\n\\\"function_name\\\": \\\"measure_execution_time\\\",\\n\\\"input_args\\\": \\\"code - A string containing the Python code to be executed.\\\",\\n\\\"return\\\": \\\"The execution time of the input Python code in seconds.\\\",\\n\\\"depend\\\": \\\"Python's built-in 'time' library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dog owner who has successfully trained their own reactive dog to be calm during grooming sessions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dog Behavior Training Interface\\\",\\n\\\"description\\\": \\\"This interface classifies a dog's behavior during grooming sessions based on an image.\\\",\\n\\\"function_name\\\": \\\"classify_dog_behavior\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A numeric code representing the predicted category of the dog's behavior.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Image Classification Model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gynecologist with years of experience in handling complicated childbirth cases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pregnancy Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to assess the risk of complications during childbirth based on certain health indicators of the pregnant woman. It returns a risk score and the category of risk (low, medium, high).\\\",\\n\\\"function_name\\\": \\\"pregnancy_risk_assessment\\\",\\n\\\"input_args\\\": [\\\"path_to_model\\\", \\\"age\\\", \\\"bmi\\\", \\\"blood_pressure\\\", \\\"gestational_diabetes_history\\\"],\\n\\\"return\\\": [\\\"risk_score\\\", \\\"risk_category\\\"],\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Black father who has seen too much police violence in his community.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Police Activity Reporting Interface\\\",\\n\\\"description\\\": \\\"An interface for reporting police activity in a given area. The user inputs the type of police activity, location, and date/time, and the interface returns a confirmation that the report has been filed.\\\",\\n\\\"function_name\\\": \\\"report_police_activity\\\",\\n\\\"input_args\\\": [\\\"activity_type\\\", \\\"location\\\", \\\"date_time\\\"],\\n\\\"return\\\": \\\"Confirmation message\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Open Police Data API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Un economista che studia l'impatto delle nuove tecnologie sul mercato finanziario", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"Provides a prediction on stock price movement based on the latest news about the stock.\\\",\\n\\\"function_name\\\": \\\"predict_stock_movement\\\",\\n\\\"input_args\\\": \\\"stock_symbol\\\",\\n\\\"return\\\": \\\"A prediction on the stock price movement (either 'negative', 'neutral', or 'positive').\\\",\\n\\\"depend\\\": \\\"Hugging Face's FinBERT model, a large language model to fetch the latest news about the stock.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A receptionist at a mid-range hotel.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hotel Booking Availability Interface\\\",\\n\\\"description\\\": \\\"This interface checks for room availability in a hotel. Users need to input the type of room and the date range, and the interface will return the availability of the room for those dates.\\\",\\n\\\"function_name\\\": \\\"check_room_availability\\\",\\n\\\"input_args\\\": [\\\"conn\\\", \\\"room_type\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"Number of available rooms of the specified type for the given date range\\\",\\n\\\"depend\\\": [\\\"SQLite\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a junior IT support engineer not entirely familiar with IIS setups", "synthesized text": "\"{\\n\\\"name\\\": \\\"IIS Log Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze IIS logs. It returns the most visited pages and the number of visitors in graphical form.\\\",\\n\\\"function_name\\\": \\\"analyze_iis_log\\\",\\n\\\"input_args\\\": \\\"file_path: The path to the IIS log file.\\\",\\n\\\"return\\\": \\\"Two bar plots showing the most visited pages and the number of visitors.\\\",\\n\\\"depend\\\": \\\"Python's built-in libraries: pandas, matplotlib, re\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired European police officer who advocates for crowd safety and has studied the history of major sporting disasters.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crowd Density Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the crowd density in a given scene by using a pre-trained crowd counting model from TensorFlow Hub. The user only needs to input the path to an image file of the scene, and our interface will return the estimated number of people present in the scene.\\\",\\n\\\"function_name\\\": \\\"estimate_crowd_density\\\",\\n\\\"input_args\\\": {\\\"path_to_img\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"estimated_count\\\": \\\"integer\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"numpy\\\"], \\\"machine learning models\\\": [\\\"CSRNet from TensorFlow Hub\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am a mobile app developer frustrated with the limitations and quirks of integrated development environments and logging mechanisms.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Bug Reporting Interface\\\",\\n\\\"description\\\": \\\"An interface that logs the execution of a function, recording any errors or exceptions that occur during its execution. This aids in debugging and understanding the behavior of the function.\\\",\\n\\\"function_name\\\": \\\"log_function_execution\\\",\\n\\\"input_args\\\": {\\n    \\\"func\\\": \\\"The function that needs to be executed and logged\\\",\\n    \\\"args\\\": \\\"The positional arguments for the function\\\",\\n    \\\"kwargs\\\": \\\"The keyword arguments for the function\\\"\\n},\\n\\\"return\\\": \\\"A string indicating whether the function executed successfully or an exception occurred, along with a log file 'app.log' that records the details.\\\",\\n\\\"depend\\\": \\\"Python's built-in logging library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A theme park owner looking to create a jaw-dropping attraction that will leave visitors in awe", "synthesized text": "\"{\\n\\\"name\\\": \\\"Attraction Popularity Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the popularity of a potential theme park attraction based on its type, thrill level, and age appropriateness.\\\",\\n\\\"function_name\\\": \\\"predict_attraction_popularity\\\",\\n\\\"input_args\\\": [\\\"attraction_type\\\", \\\"thrill_level\\\", \\\"age_appropriate\\\"],\\n\\\"return\\\": \\\"A predicted popularity score for the prospective attraction.\\\",\\n\\\"depend\\\": \\\"Scikit-learn library, a pre-trained Machine Learning model (RandomForestRegressor)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A resident of Jacksonville, Florida, who studied at Florida State University and knew the pastor of the Ortega United Methodist Church", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenWeatherMap API to provide current weather details for a specified city. Optional country code can be provided for cities outside of the USA or for cities with common names.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": [\\\"city_name\\\", \\\"country_code\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'Weather Description', 'Temperature', 'Humidity', 'Wind Speed' and corresponding values indicating the current weather of the specified city.\\\",\\n\\\"depend\\\": \\\"Python library: requests, Web API: OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single parent who admires Kendra's work and seeks advice on navigating the child welfare system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Welfare Advice Interface\\\",\\n\\\"description\\\": \\\"An interface that enables users to access advice or resources related to child welfare from the Child Welfare Information Gateway's API. Users input a specific topic and receive a list of relevant advice or resources.\\\",\\n\\\"function_name\\\": \\\"get_child_welfare_advice\\\",\\n\\\"input_args\\\": \\\"topic - A specific concern or question related to child welfare.\\\",\\n\\\"return\\\": \\\"A list of advice or resources. Each item in the list is a dictionary containing the title of the advice/resource and its corresponding URL.\\\",\\n\\\"depend\\\": \\\"Web API from Child Welfare Information Gateway\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single parent in Holly Hill, South Carolina, who has just been served divorce papers and is feeling overwhelmed and anxious.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Simplification Interface\\\",\\n\\\"description\\\": \\\"This interface extracts text from a PDF legal document and simplifies the legal jargon into more understandable language using a text generation model.\\\",\\n\\\"function_name\\\": \\\"simplify_legal_document\\\",\\n\\\"input_args\\\": \\\"path_to_file - A string that represents the path to a PDF file that contains a legal document.\\\",\\n\\\"return\\\": \\\"A string that represents the simplified version of the legal document.\\\",\\n\\\"depend\\\": \\\"Python PyPDF2 library for PDF processing, Hugging Face's transformer library for text simplification with the 'mrm8488/t5-base-finetune-squadv2' model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional equestrian trainer known for her exceptional skills in dressage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horse Pose Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to perform pose estimation on horses given an image.\\\",\\n\\\"function_name\\\": \\\"estimate_horse_pose\\\",\\n\\\"input_args\\\": \\\"path_to_img: str\\\",\\n\\\"return\\\": \\\"A 3D numpy array containing the coordinates of the keypoints estimated by the model. Each keypoint is represented by a 3D vector [y, x, visibility], where y and x are the normalized coordinates of the keypoint and visibility is the confidence score of the keypoint detection.\\\",\\n\\\"depend\\\": \\\"Python Libraries: TensorFlow, TensorFlow Hub, cv2, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious and academically-driven student who formed a close bond with the Italian exchange student", "synthesized text": "\"{\\n\\\"name\\\": \\\"Italian to English Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates Italian text to English using Google Cloud Translation API. It simplifies the communication with Italian speaking individuals.\\\",\\n\\\"function_name\\\": \\\"translate_italian_to_english\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"The input Italian text and its English translation\\\",\\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An amateur electronic musician creating their own synth-driven tracks at home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Synthesizer Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to generate and play a sinusoidal sound wave by specifying the frequency, duration and amplitude of the sound.\\\",\\n\\\"function_name\\\": \\\"sound_synthesizer\\\",\\n\\\"input_args\\\": {\\n    \\\"frequency\\\": \\\"The frequency of the tone in Hz (type: float or int)\\\",\\n    \\\"duration\\\": \\\"The duration of the sound in seconds (type: float or int)\\\",\\n    \\\"amplitude\\\": \\\"The amplitude of the sound wave (type: float or int)\\\"\\n},\\n\\\"return\\\": \\\"No return value. The function plays the generated sound wave.\\\",\\n\\\"depend\\\": \\\"This function uses the Sounddevice and Numpy libraries in Python.\\\"\\n}\"", "description": "tool development"}
{"input persona": "影评人，专注于社会历史及电影艺术融合的作品，对于历史事实的准确性有苛刻标准", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Fact Checker\\\",\\n\\\"description\\\": \\\"This interface checks the accuracy of historical events depicted in movies by comparing them with the corresponding Wikipedia entries.\\\",\\n\\\"function_name\\\": \\\"get_movie_fact_check\\\",\\n\\\"input_args\\\": \\\"movie_name\\\",\\n\\\"return\\\": \\\"A dictionary mapping historical events in the movie to a comparison between the movie's representation and the historical fact from Wikipedia.\\\",\\n\\\"depend\\\": \\\"Wikipedia API, IMDb API, Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young novice wrestling with maintaining the rigorous regimen of the monastic life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meditation Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface for setting daily reminders for meditation. User specifies the times they wish to be reminded, and the program prints a reminder at those times.\\\",\\n\\\"function_name\\\": \\\"set_meditation_reminders\\\",\\n\\\"input_args\\\": \\\"times - a list of strings representing the times (in 24-hour format) the user wishes to be reminded\\\",\\n\\\"return\\\": \\\"No return value; function runs indefinitely until program is stopped, printing a reminder at the specified times each day\\\",\\n\\\"depend\\\": [\\\"Python's schedule library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a retired military officer and an ardent supporter of the Army Black Knights.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Team Game Score Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the game scores for the Army Black Knights based on the opposing team's name\\\",\\n\\\"function_name\\\": \\\"predict_game_score\\\",\\n\\\"input_args\\\": [\\\"opposing_team\\\"],\\n\\\"return\\\": {\\\"Army Black Knights\\\": \\\"predicted_score\\\", \\\"opposing_team\\\": \\\"opposing_team\\\"},\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"past_games.csv\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An active participant of the South Dakota community without a deep understanding of technical issues related to public utilities, mostly attending community events about public utilities to stay informed and updated on the issues that could potentially affect his daily life and well-being of his neighborhood.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Public Utility Outage Alert Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch any ongoing or scheduled utility outages in a particular zip code area. The information includes type of utility (electricity, water, gas), expected resolution time, and the number of affected households.\\\",\\n  \\\"function_name\\\": \\\"get_utility_outages\\\",\\n  \\\"input_args\\\": {\\n    \\\"zip_code\\\": \\\"A string representing the zip code of the area to fetch the outage information for.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"outages\\\": \\\"A list of dictionaries, each containing information about a particular outage.\\\"\\n  },\\n  \\\"depend\\\": \\\"Python's requests library, Public utilities provider's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software sales representative pitching a comprehensive data protection solution", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Data Protection Health Check Interface\\\",\\n    \\\"description\\\": \\\"This interface checks the integrity of the files in a directory by calculating their hash values.\\\",\\n    \\\"function_name\\\": \\\"data_protection_health_check\\\",\\n    \\\"input_args\\\": [\\\"directory_path\\\"],\\n    \\\"return\\\": \\\"A dictionary with filenames as keys and their corresponding hash values as values.\\\",\\n    \\\"depend\\\": [\\\"Python's os library\\\", \\\"Python's hashlib library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A creative director who oversees multiple graphic design projects and ensures the team's work aligns with the company's brand", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Brand Alignment Check Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to analyze an image and return the predicted category. This can help a creative director check if a design aligns with the brand's image.\\\",\\n  \\\"function_name\\\": \\\"check_brand_alignment\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to the image file that you want to check.\\\"\\n  },\\n  \\\"return\\\": \\\"The predicted category of the image. This can be used to check if a design aligns with the brand's image.\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"], \\\"machine learning models\\\": [\\\"https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A fellow government employee who respects your determination to uphold integrity in the workplace", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface computes the similarity between two text documents using cosine similarity.\\\",\\n\\\"function_name\\\": \\\"document_similarity\\\",\\n\\\"input_args\\\": [\\\"doc1\\\", \\\"doc2\\\"],\\n\\\"return\\\": \\\"similarity_score\\\",\\n\\\"depend\\\": [\\\"sklearn.feature_extraction.text.TfidfVectorizer\\\", \\\"sklearn.metrics.pairwise.cosine_similarity\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mischievous twin who constantly challenges their pranks and tries to outdo them", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prank Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face's transformers library to classify the severity of pranks based on a description.\\\",\\n\\\"function_name\\\": \\\"prank_severity_analysis\\\",\\n\\\"input_args\\\": \\\"prank_description - A string that describes the prank\\\",\\n\\\"return\\\": \\\"A tuple with two elements. The first element is a string that represents the severity rating ('POSITIVE' or 'NEGATIVE'). The second element is a float that represents the confidence score of the prediction.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fan of the Virginia Tech Hokies women's soccer team who likes to speculate on the team's performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Performance Prediction Interface\\\",\\n\\\"description\\\": \\\"Predict the performance of the Virginia Tech Hokies women's soccer team based on past performance data.\\\",\\n\\\"function_name\\\": \\\"train_and_predict\\\",\\n\\\"input_args\\\": \\\"file_path, target_column\\\",\\n\\\"return\\\": \\\"Predictions for the next match, Mean absolute error between the predictions and the actual results\\\",\\n\\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A protective parent who is skeptical about the government’s response to the COVID-19 pandemic in Ontario.", "synthesized text": "\"{\\n\\\"name\\\": \\\"COVID-19 Data Visualization Interface\\\",\\n\\\"description\\\": \\\"An interface to visualize the trend of COVID-19 in a specific province using data from the COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University.\\\",\\n\\\"function_name\\\": \\\"plot_covid_trend\\\",\\n\\\"input_args\\\": \\\"province\\\",\\n\\\"return\\\": \\\"A plot showing the COVID-19 trend in the specified province.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\", \\\"COVID-19 Data Repository by CSSE at Johns Hopkins University\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A rebellious younger sister who experiments with avant-garde culinary techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Substitution Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a large language model (LLM) to suggest possible ingredient substitutions in a recipe. The user inputs the name of a recipe or list of ingredients, and the interface returns a list of alternative ingredients that could be used to experiment with the recipe.\\\",\\n\\\"function_name\\\": \\\"suggest_substitutions\\\",\\n\\\"input_args\\\": \\\"recipe - a string containing the name of a recipe or list of ingredients\\\",\\n\\\"return\\\": \\\"A string of alternative ingredients that could be used to experiment with the recipe.\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who has never played video games.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Game Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the IGDB (Internet Game Database) API to recommend games based on user preferences such as category, platform, and age rating.\\\",\\n  \\\"function_name\\\": \\\"get_game_recommendations\\\",\\n  \\\"input_args\\\": [\\\"category\\\", \\\"platform\\\", \\\"age_rating\\\"],\\n  \\\"return\\\": \\\"A list of game names based on the input preferences.\\\",\\n  \\\"depend\\\": \\\"IGDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An administrator who is supportive but cautious of the professor's teaching approach", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Turnitin API to detect plagiarism in a document. The user inputs the file path of a document, and the interface returns a plagiarism score indicating the percentage of the document that matches other sources.\\\",\\n\\\"function_name\\\": \\\"plagiarism_detection\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"path to the document file\\\"},\\n\\\"return\\\": {\\\"plagiarism_score\\\": \\\"percentage of the document that matches other sources\\\"},\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python library\\\", \\\"Turnitin API\\\": \\\"Web API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A rival business owner in the same industry, who also deals with tariffs and customs regulations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Trade Tariff Lookup Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to input a product's Harmonized System (HS) code and the target country, then our interface will return the corresponding tariff and regulation information.\\\",\\n  \\\"function_name\\\": \\\"get_tariff_and_regulation\\\",\\n  \\\"input_args\\\": {\\n    \\\"hs_code\\\": \\\"A string that represents the Harmonized System code of the product\\\",\\n    \\\"country\\\": \\\"A string that represents the target country\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"tariff\\\": \\\"A string that represents the tariff rate\\\",\\n    \\\"regulation\\\": \\\"A string that represents the regulation\\\",\\n    \\\"error\\\": \\\"A string that indicates no data found for input HS code and country\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Library\\\": [\\\"requests\\\"],\\n    \\\"Web API\\\": [\\\"Trade Tariff Lookup API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A skeptic of natural treatments for any illness, including diabetes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Diabetes Risk Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the risk of diabetes based on certain parameters like age, BMI, blood pressure, glucose level.\\\",\\n\\\"function_name\\\": \\\"predict_diabetes_risk\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"Age of the person\\\",\\n    \\\"bmi\\\": \\\"Body Mass Index of the person\\\",\\n    \\\"blood_pressure\\\": \\\"Blood pressure level of the person\\\",\\n    \\\"glucose_level\\\": \\\"Glucose level of the person\\\"\\n},\\n\\\"return\\\": \\\"Risk of having diabetes\\\",\\n\\\"depend\\\": \\\"Machine Learning Model (diabetes_predictor_model.pkl), Python Libraries (pickle, numpy)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate cinephile and film history enthusiast who is particularly fond of Spike Lee's work.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface fetches detailed information about a movie from the Open Movie Database (OMDB). It uses the OMDB API to retrieve information such as director, actors, plot, IMDB rating, etc.\\\",\\n\\\"function_name\\\": \\\"get_movie_info\\\",\\n\\\"input_args\\\": \\\"title: A string that represents the title of the movie\\\",\\n\\\"return\\\": \\\"A dictionary that contains detailed information about the movie\\\",\\n\\\"depend\\\": \\\"requests library, OMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A currently-active women's basketball player on the Hamilton Honey Badgers team who played under coach Vallée.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch and analyze the performance statistics of a player. The user only needs to input the player's name, and the interface will return the player's performance statistics.\\\",\\n\\\"function_name\\\": \\\"get_player_performance_stats\\\",\\n\\\"input_args\\\": \\\"player_name -> A string representing the name of the player\\\",\\n\\\"return\\\": \\\"A dictionary containing the player's performance statistics including games played, points per game, rebounds per game, and assists per game\\\",\\n\\\"depend\\\": \\\"A web API from a basketball statistics provider\\\"\\n}\"", "description": "tool development"}
{"input persona": "An editor responsible for reviewing and publishing research articles in the field of plant physiology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n\\\"description\\\": \\\"This interface helps detect possible plagiarism in research articles by comparing texts and returning a similarity score. A high score indicates potential plagiarism.\\\",\\n\\\"function_name\\\": \\\"calculate_text_similarity\\\",\\n\\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n\\\"return\\\": \\\"A float number between 0 and 1 representing the similarity between the input texts. Closer to 1 indicates higher similarity.\\\",\\n\\\"depend\\\": \\\"Python library: textdistance\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a fan of sports but unfamiliar with lawn bowling in particular", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lawn Bowling Score Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface accepts the number of rounds played and the points scored in each round as inputs and calculates the total lawn bowling score.\\\",\\n\\\"function_name\\\": \\\"calculate_lawn_bowling_score\\\",\\n\\\"input_args\\\": [\\\"rounds\\\", \\\"points\\\"],\\n\\\"return\\\": \\\"total_score\\\",\\n\\\"depend\\\": [\\\"Python built-in functions\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An admirer of successful individuals climbing career ladders", "synthesized text": "\"{\\n\\\"name\\\": \\\"LinkedIn Job Posting Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetch and analyze job postings from LinkedIn for a specific role in a specified location, summarizing the common requirements such as skills, qualifications, and experiences.\\\",\\n\\\"function_name\\\": \\\"analyze_linkedin_job_postings\\\",\\n\\\"input_args\\\": [\\\"access_token\\\", \\\"role\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A dictionary with the keys 'top_skills', 'top_qualifications', 'top_experiences', each containing a list of the 10 most common corresponding items found in the analyzed job postings.\\\",\\n\\\"depend\\\": [\\\"python libraries: requests, json, collections.Counter\\\", \\\"Web APIs: LinkedIn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hardware engineer working in a nuclear power plant in the Czech Republic.", "synthesized text": "\"{\\n    \\\"sensor_id\\\": \\\"123\\\",\\n    \\\"radiation_level\\\": \\\"3.4\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Chicago Council on Global Affairs employee and proud Chicago resident.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Chicago Crime Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"Analyze crime data in Chicago within a given date range. The result includes the number of crimes, the most common type of crime, and the district with the most crimes.\\\",\\n  \\\"function_name\\\": \\\"analyze_chicago_crime_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"start_date\\\": \\\"The start date of the date range in YYYY-MM-DD format.\\\",\\n    \\\"end_date\\\": \\\"The end date of the date range in YYYY-MM-DD format.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"crime_count\\\": \\\"The total number of crimes within the date range.\\\",\\n    \\\"most_common_crime\\\": \\\"The most common type of crime within the date range.\\\",\\n    \\\"most_crime_district\\\": \\\"The district with the most crimes within the date range.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"collections.Counter\\\"],\\n    \\\"web APIs\\\": [\\\"Chicago Crime Data API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A recently retired professor of Organic Chemistry who had the opportunity to meet Edward E. Arnett during a conference in the late 1980s.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Reaction Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a SMILES string of a molecule and returns a prediction of the molecule's most likely reactions using the RDKit library.\\\",\\n\\\"function_name\\\": \\\"predict_reactions\\\",\\n\\\"input_args\\\": [\\\"smiles_string\\\"],\\n\\\"return\\\": \\\"List of SMILES strings of possible products.\\\",\\n\\\"depend\\\": [\\\"rdkit\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A firefighter who conducts joint drills and simulations with the emergency dispatcher to improve response coordination", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Emergency Situation Simulation Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to simulate an emergency situation by specifying the parameters of the simulation such as the number of emergencies, their types, and the time they occur. The simulation results, which include the response times and success rates for different types of emergencies, are returned.\\\",\\n  \\\"function_name\\\": \\\"run_emergency_simulation\\\",\\n  \\\"input_args\\\": \\\"file_path - The path to the simulation configuration file.\\\",\\n  \\\"return\\\": \\\"A dictionary containing the simulation state after running, which includes the response times and success rates for different types of emergencies.\\\",\\n  \\\"depend\\\": \\\"SimPy - a Python simulation library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An avid fan of Richard Marx who loves to sing along to his songs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lyrics Fetching Interface\\\",\\n\\\"description\\\": \\\"Fetches the lyrics of a specified song using the Genius API.\\\",\\n\\\"function_name\\\": \\\"get_song_lyrics\\\",\\n\\\"input_args\\\": [\\\"song_title\\\"],\\n\\\"return\\\": \\\"string (song lyrics)\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\", \\\"Genius API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local farmer who wants to convert their farming equipment to run on biodiesel", "synthesized text": "\"{\\n\\\"name\\\": \\\"Biodiesel Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from various fuel price data providers to provide the price per gallon of the specified biodiesel type from different providers at a given location.\\\",\\n\\\"function_name\\\": \\\"get_biodiesel_prices\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"The current location of the user.\\\",\\n    \\\"biodiesel_type\\\": \\\"The type of biodiesel the user is interested in (e.g., B20, B100).\\\"\\n},\\n\\\"return\\\": \\\"A dictionary where the keys are the names of the biodiesel providers and the values are the corresponding price per gallon of the specified biodiesel type.\\\",\\n\\\"depend\\\": \\\"requests library, Fuel Price APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A taxi driver who engages in lively debates about football with their passengers, including the dedicated Jets fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Football-API to fetch latest football match or team statistics. Ideal for football fans who want to stay updated with their favorite team's performance.\\\",\\n\\\"function_name\\\": [\\\"get_football_team_stats\\\", \\\"get_football_match_stats\\\"],\\n\\\"input_args\\\": {\\\"get_football_team_stats\\\": [\\\"team_name\\\"], \\\"get_football_match_stats\\\": [\\\"match_id\\\"]},\\n\\\"return\\\": {\\\"get_football_team_stats\\\": \\\"team statistics\\\", \\\"get_football_match_stats\\\": \\\"match statistics\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"RapidAPI's Football-API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A regular customer who always orders the same coffee and pastry combination", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coffee and Pastry Order Interface\\\",\\n\\\"description\\\": \\\"This interface stores and retrieves a customer's favorite coffee and pastry order in a coffee shop. \\\",\\n\\\"function_name\\\": [\\\"store_order\\\", \\\"get_favorite_order\\\"],\\n\\\"input_args\\\": [[\\\"name\\\", \\\"order\\\"], [\\\"name\\\"]],\\n\\\"return\\\": [\\\"None (stores the order)\\\", \\\"Customer's favorite order or error message if the customer is not found\\\"],\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired opera singer who also suffers from tinnitus and shares coping strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Frequency Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes an audio file as input and returns the dominant frequency components in the audio. This can be used to analyze the frequency of tinnitus sounds in different environments.\\\",\\n\\\"function_name\\\": \\\"analyze_frequency\\\",\\n\\\"input_args\\\": [\\\"audio_file_path\\\"],\\n\\\"return\\\": \\\"A numpy array of dominant frequencies in the audio file.\\\",\\n\\\"depend\\\": \\\"librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious entrepreneur from a neighboring country who aims to surpass Sweden's tech achievements", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Company Information Extraction Interface\\\",\\n  \\\"description\\\": \\\"Extracts and returns information about top tech companies in Sweden. The information includes the company's name, a brief description, and its website link.\\\",\\n  \\\"function_name\\\": \\\"get_sweden_tech_companies_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"num_companies\\\": \\\"The number of top tech companies in Sweden that the user wants to know about.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the name, brief description, and website link of a top tech company in Sweden.\\\",\\n  \\\"depend\\\": \\\"Python libraries: requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "Dorte, an independent Danish historian and language enthusiast specializing in onomastics, the study of the history and origin of proper names.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Name Origin and Meaning Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Behind The Name API to provide information about the history and meaning of first names. Users input a name, and the interface returns the origin and meaning of the name.\\\",\\n\\\"function_name\\\": \\\"get_name_origin_and_meaning\\\",\\n\\\"input_args\\\": {\\\"name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"name\\\": \\\"string\\\", \\\"gender\\\": \\\"string\\\", \\\"usage\\\": \\\"string\\\", \\\"origin\\\": \\\"string\\\", \\\"meaning\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"Behind The Name API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fresh graduate nurse from Luna, Apayao who is seeking employment opportunities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Search Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of available job openings based on user input job title and location by leveraging Indeed.com's job search API.\\\",\\n\\\"function_name\\\": \\\"get_job_openings\\\",\\n\\\"input_args\\\": [\\\"job_title\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains information about a job opening: job title, company, city, state, country, date of posting, job description snippet, and URL of the full job posting.\\\",\\n\\\"depend\\\": \\\"requests library, xml.etree.ElementTree library, Indeed.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a candidate preparing for the upcoming Consolidated Election", "synthesized text": "\"{\\n\\\"name\\\": \\\"Candidate Election Research Interface\\\",\\n\\\"description\\\": \\\"This interface uses the ProPublica Congress API to provide users with information about their current representative and their recent legislative activities.\\\",\\n\\\"function_name\\\": [\\\"get_current_representative\\\", \\\"get_recent_legislative_activities\\\"],\\n\\\"input_args\\\": [[\\\"state\\\", \\\"district\\\"], [\\\"member_id\\\"]],\\n\\\"return\\\": [\\\"Current representative information\\\", \\\"Recent legislative activities\\\"],\\n\\\"depend\\\": [\\\"ProPublica Congress API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired IRS agent who volunteers to help fellow retirees with tax-related questions", "synthesized text": "\"{\\n\\\"name\\\": \\\"IRS Tax Calculator Interface\\\", \\n\\\"description\\\": \\\"An interface to calculate tax liability using the IRS Tax Calculator API. The user needs to input their gross income, filing status, and number of dependents, and the interface will return their estimated tax liability.\\\", \\n\\\"function_name\\\": \\\"calculate_tax_liability\\\", \\n\\\"input_args\\\": [\\\"gross_income\\\", \\\"filing_status\\\", \\\"dependents\\\"],\\n\\\"return\\\": \\\"Estimated tax liability or an error message.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"IRS Tax Calculator API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A data scientist who shares interesting mathematical puzzles and challenges on social media", "synthesized text": "\"{\\n\\\"name\\\": \\\"Problem Solving Interface\\\",\\n\\\"description\\\": \\\"This interface uses the sympy library to solve a wide variety of mathematical problems. The user only needs to input the problem as text and our interface will return the solution.\\\",\\n\\\"function_name\\\": \\\"solve_equation\\\",\\n\\\"input_args\\\": \\\"equation_str\\\",\\n\\\"return\\\": \\\"solution\\\",\\n\\\"depend\\\": \\\"sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud mom of two young children who are fascinated by the world of technology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Kid-Friendly Code Compiler Interface\\\",\\n\\\"description\\\": \\\"An interface that accepts a string of Python code, validates it to ensure it's safe and kid-friendly, and executes it.\\\",\\n\\\"function_name\\\": \\\"kid_friendly_code_compiler\\\",\\n\\\"input_args\\\": \\\"code - a string containing the Python code to be executed\\\",\\n\\\"return\\\": \\\"If the code is valid and successfully executed, it returns a success message. If the code is not valid or there's an error in execution, it returns an error message.\\\",\\n\\\"depend\\\": \\\"Built-in Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local supplier who provides the franchise owner with high-quality ingredients and materials for their products", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inventory Management Interface\\\",\\n\\\"description\\\": \\\"An interface that allows a user to manage their inventory by updating the quantity of items based on sales data.\\\",\\n\\\"function_name\\\": \\\"update_inventory\\\",\\n\\\"input_args\\\": {\\\"path_to_csv\\\": \\\"string, path to the inventory CSV file\\\", \\\"sales_data\\\": \\\"dictionary, where key is the item name and value is the quantity sold\\\"},\\n\\\"return\\\": \\\"pandas dataframe, updated inventory after sales\\\",\\n\\\"depend\\\": \\\"Pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an avid movie enthusiast who has seen “Free State of Jones” and feels that the movie deserves a deeper appreciation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"Recommends movies that are similar in genre to a given movie.\\\",\\n\\\"function_name\\\": \\\"recommend_movies\\\",\\n\\\"input_args\\\": [\\\"title\\\", \\\"top_n\\\"],\\n\\\"return\\\": \\\"List of similar movies\\\",\\n\\\"depend\\\": \\\"pandas, numpy, sklearn, transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Australian mom who loves cooking-shows and—judging by the uncountable hours she has spent in front of her TV—considers herself an expert.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Difficulty Estimation Interface\\\",\\n\\\"description\\\": \\\"Estimates the difficulty level of a recipe based on the complexity of the language used, the number of steps, and the quantity of ingredients.\\\",\\n\\\"function_name\\\": \\\"recipe_difficulty_estimation\\\",\\n\\\"input_args\\\": \\\"recipe - A text string containing the recipe steps and ingredients\\\",\\n\\\"return\\\": \\\"A string value representing the difficulty level: 'Easy', 'Medium', or 'Hard'\\\",\\n\\\"depend\\\": \\\"Natural Language Processing (NLP) library NLTK\\\"\\n}\"", "description": "tool development"}
{"input persona": "A founder of a large outdoor sports festival that attracts thousands of participants", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weather Forecast Interface\\\",\\n  \\\"description\\\": \\\"Provides the weather forecast for a given location and date by leveraging the OpenWeatherMap API.\\\",\\n  \\\"function_name\\\": \\\"get_weather_forecast\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"The location for which to get the weather forecast. Must be a string.\\\",\\n    \\\"date\\\": \\\"The date for which to get the weather forecast. Must be a string in 'YYYY-MM-DD' format.\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary containing the temperature, weather description, and wind speed for the given date and location.\\\",\\n  \\\"depend\\\": \\\"Python's requests and datetime libraries, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow army officer from their early days who also has a passion for singing and joins the choir to reconnect with their friend", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Lyrics Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates song lyrics based on a provided prompt using a pre-trained language model.\\\",\\n\\\"function_name\\\": \\\"generate_song_lyrics\\\",\\n\\\"input_args\\\": [\\\"prompt\\\"],\\n\\\"return\\\": \\\"Prints three versions of the generated song lyrics\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "台灣環保人士", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Index Interface\\\",\\n\\\"description\\\": \\\"An interface that retrieves real-time air quality index and pollutant levels data from the Environmental Protection Administration of Taiwan. Users only need to enter their location to get the air quality information.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"SiteName\\\": \\\"string\\\", \\\"AQI\\\": \\\"string\\\", \\\"Pollutant\\\": \\\"string\\\", \\\"Status\\\": \\\"string\\\", \\\"PM2.5\\\": \\\"string\\\", \\\"PM10\\\": \\\"string\\\", \\\"CO\\\": \\\"string\\\", \\\"NO2\\\": \\\"string\\\", \\\"SO2\\\": \\\"string\\\", \\\"O3\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Environmental Protection Administration of Taiwan API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A young Italian woman who just started her career as a rally racing driver.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lap Time Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the lap time for a rally race based on track conditions, car specifications, and driver details\\\",\\n\\\"function_name\\\": \\\"predict_lap_time\\\",\\n\\\"input_args\\\": [\\\"track_condition\\\", \\\"car_specs\\\", \\\"driver_details\\\"],\\n\\\"return\\\": \\\"Predicted lap time\\\",\\n\\\"depend\\\": [\\\"python libraries: pandas, sklearn, pickle\\\", \\\"Machine learning model: lap_time_predictor_model.pkl, lap_time_predictor_scaler.pkl\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A school principal who organizes annual Christmas charity events and encourages students to volunteer during the holiday season", "synthesized text": "\"{\\n\\\"name\\\": \\\"Volunteer Event Organizer Interface\\\",\\n\\\"description\\\": \\\"An interface for organizing volunteer sign-ups for school events. Allows the principal to create tasks and students to sign up for these tasks.\\\",\\n\\\"function_name\\\": [\\\"create_task\\\", \\\"sign_up_for_task\\\"],\\n\\\"input_args\\\": [\\\"task_name, task_description\\\", \\\"task_id, student_name\\\"],\\n\\\"return\\\": [\\\"task_id\\\", \\\"sign_up_status\\\"],\\n\\\"depend\\\": \\\"Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Thai citizen who greatly admired Rewat Sirinukul", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translate English Text to Thai Language\\\",\\n\\\"description\\\": \\\"This function takes English text as input and translates it into Thai using the translate Python library.\\\",\\n\\\"function_name\\\": \\\"translate_to_thai\\\",\\n\\\"input_args\\\": [\\\"input_text\\\"],\\n\\\"return\\\": \\\"Translated Thai text\\\",\\n\\\"depend\\\": \\\"translate Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a professor of Mechanical Engineering who was Gregory S. Chirikjian's graduate student", "synthesized text": "\"{\\n\\\"name\\\": \\\"Robot Motion Planning Interface\\\",\\n\\\"description\\\": \\\"An interface for robot motion planning. The user inputs the initial and goal states, the robot's model, and the obstacles in the environment. The function returns a feasible path that the robot can take to reach the goal state from the initial state.\\\",\\n\\\"function_name\\\": \\\"plan_motion\\\",\\n\\\"input_args\\\": {\\n    \\\"initial_state\\\": \\\"The initial state of the robot. A list of three elements, representing the x, y, and z coordinates.\\\",\\n    \\\"goal_state\\\": \\\"The goal state of the robot. A list of three elements, representing the x, y, and z coordinates.\\\",\\n    \\\"robot_model\\\": \\\"The robot's model. An object representing the robot, including its size and movement capabilities.\\\",\\n    \\\"obstacles\\\": \\\"The obstacles in the environment. A list of objects representing the obstacles.\\\"\\n},\\n\\\"return\\\": \\\"A feasible path that the robot can take to reach the goal state from the initial state. If no solution is found, the function returns 'No solution found'.\\\",\\n\\\"depend\\\": \\\"The OMPL (Open Motion Planning Library) is used in this function.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Um engenheiro de software brasileiro que é especialista em desenvolvimento de extensões para navegador.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interface para An\\u00e1lise de Performance de Extens\\u00f5es de Navegador\\\",\\n  \\\"description\\\": \\\"Esta interface permite aos usu\\u00e1rios analisar o desempenho de uma extens\\u00e3o de navegador, incluindo tempo de carregamento, consumo de mem\\u00f3ria e CPU.\\\",\\n  \\\"function_name\\\": \\\"analyze_extension_performance\\\",\\n  \\\"input_args\\\": [\\\"extension_id\\\"],\\n  \\\"return\\\": {\\n    \\\"type\\\": \\\"dict\\\",\\n    \\\"description\\\": \\\"Retorna um dicion\\u00e1rio contendo informa\\u00e7\\u00f5es sobre o tempo de carregamento, o uso de mem\\u00f3ria e o uso de CPU da extens\\u00e3o.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"selenium\\\", \\\"webdriver_manager\\\"],\\n    \\\"web_apis\\\": [],\\n    \\\"ml_models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A warehouse worker who is exhausted from the harsh conditions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Pallet Arrangement Interface\\\",\\n\\\"description\\\": \\\"An interface that provides the sequence of moves needed to rearrange pallets in a warehouse with minimal effort.\\\",\\n\\\"function_name\\\": \\\"get_pallet_moves\\\",\\n\\\"input_args\\\": {\\n    \\\"warehouse_layout\\\": \\\"A 2D list representing the warehouse layout, where 'W' represents a wall\\\",\\n    \\\"start_positions\\\": \\\"A list of tuples representing the current positions of the pallets\\\",\\n    \\\"end_positions\\\": \\\"A list of tuples representing the desired positions of the pallets\\\"\\n},\\n\\\"return\\\": \\\"A list of paths, where each path is a list of tuples representing the moves for a single pallet\\\",\\n\\\"depend\\\": \\\"NetworkX Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A promoter who puts together underground parties and raves, featuring cutting-edge drum & bass artists", "synthesized text": "\"{\\n\\\"name\\\": \\\"Spotify Playlist Generation Interface\\\",\\n\\\"description\\\": \\\"Generates a Spotify playlist featuring a user's favorite drum & bass artist and similar artists.\\\",\\n\\\"function_name\\\": \\\"generate_dnb_playlist\\\",\\n\\\"input_args\\\": {\\\"favorite_artist\\\": \\\"A string representing the user's favorite drum & bass artist.\\\"},\\n\\\"return\\\": \\\"A string representing the URL to the generated Spotify playlist.\\\",\\n\\\"depend\\\": \\\"Spotipy (Python library), Spotify API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A spokesperson for a rideshare company, providing insights on the impact of transportation policies on their operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Transport Policy Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes the impact of a transportation policy on the operations of a rideshare company, including estimated changes in fare revenue, ride times, and demand for rides.\\\",\\n\\\"function_name\\\": \\\"analyze_policy_impact\\\",\\n\\\"input_args\\\": [\\\"path_to_csv\\\", \\\"policy_description\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'fare_impact', 'time_impact', and 'demand_impact', each corresponding to the estimated impact of the policy on fare revenue, ride times, and demand for rides, respectively.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, numpy, scikit-learn, Tensorflow, tensorflow.keras; Machine learning models: fare_model.h5, time_model.h5, demand_model.h5 (these models are placeholders and should be replaced with real models trained on relevant data)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rollup.js tutorial writer who is familiar with bundling JavaScript libraries.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"JavaScript Library Bundling Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses Rollup.js to bundle JavaScript files into a single file.\\\",\\n  \\\"function_name\\\": \\\"bundle_javascript\\\",\\n  \\\"input_args\\\": [\\\"input_file_path\\\", \\\"output_file_path\\\"],\\n  \\\"return\\\": \\\"Boolean (True if the bundled file was created successfully, False otherwise)\\\",\\n  \\\"depend\\\": [\\\"rollup.js\\\", \\\"subprocess\\\", \\\"os\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An elderly woman who practiced traditional embroidery and knitting throughout her life and is eager to pass on her skills to the next generation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pattern Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface to convert embroidery or knitting patterns into digital format.\\\",\\n\\\"function_name\\\": \\\"recognize_pattern\\\",\\n\\\"input_args\\\": {\\\"image_path\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"pattern\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"torch\\\", \\\"torchvision\\\", \\\"PIL\\\"], \\\"machine learning models\\\": [\\\"ResNet-50\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A reverse engineer who relies on LIEF to analyze and understand executable files", "synthesized text": "\"{\\n\\\"name\\\": \\\"Executable File Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the LIEF library to parse and manipulate executable files, providing detailed information about the binary.\\\",\\n\\\"function_name\\\": \\\"parse_executable_file\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"An object containing information about the binary in the executable file.\\\",\\n\\\"depend\\\": [\\\"LIEF library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a mother and primary school teacher from a small town in Ireland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI Tutor for Primary School Mathematics\\\",\\n\\\"description\\\": \\\"This interface takes a math problem as input and returns the solution step by step using the Sympy library for symbolic mathematics.\\\",\\n\\\"function_name\\\": \\\"solve_math_problem\\\",\\n\\\"input_args\\\": [\\n    {\\n        \\\"name\\\": \\\"problem\\\",\\n        \\\"description\\\": \\\"A string representation of a math problem in Python syntax\\\",\\n        \\\"type\\\": \\\"str\\\"\\n    }\\n],\\n\\\"return\\\": {\\n    \\\"description\\\": \\\"A list of strings representing each step of the solution to the problem\\\",\\n    \\\"type\\\": \\\"list of str\\\"\\n},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"sympy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A mischievous teenage boy who loves cookies and often tries to sneak an extra batch from the kind elderly lady", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cookie Stock Alert Interface\\\", \\n\\\"description\\\": \\\"This interface monitors a cookie jar by analyzing a video file for any changes in the jar's content, and returns an alert if a change is detected.\\\", \\n\\\"function_name\\\": \\\"cookie_stock_alert\\\", \\n\\\"input_args\\\": [\\\"video_path\\\"], \\n\\\"return\\\": \\\"A string indicating whether a change in the cookie jar's content has been detected.\\\", \\n\\\"depend\\\": [\\\"opencv\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一个德国体育迷，特别喜欢跳水", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Diving Score Calculation Interface\\\",\\n  \\\"description\\\": \\\"Calculate the final score of a dive based on the scores from each judge, the degree of difficulty, and the type of dive.\\\",\\n  \\\"function_name\\\": \\\"calculate_diving_score\\\",\\n  \\\"input_args\\\": {\\n    \\\"judge_scores\\\": \\\"A list of scores from each judge.\\\",\\n    \\\"difficulty\\\": \\\"The degree of difficulty of the dive.\\\",\\n    \\\"dive_type\\\": \\\"The type of dive, either 'synchronized' or 'individual'.\\\"\\n  },\\n  \\\"return\\\": \\\"The final score of the dive, rounded to 2 decimal places.\\\",\\n  \\\"depend\\\": [\\\"Python built-in functions\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a beginner diver undergoing training", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dive Log Interface\\\",\\n\\\"description\\\": \\\"An interface for beginner divers to log their diving data and visualize their progress over time.\\\",\\n\\\"function_name\\\": [\\\"DiveLog.__init__\\\", \\\"DiveLog.add_dive\\\", \\\"DiveLog.plot_depth_trend\\\"],\\n\\\"input_args\\\": [\\\"self\\\", \\\"date\\\", \\\"location\\\", \\\"max_depth\\\", \\\"duration\\\", \\\"water_temp\\\"],\\n\\\"return\\\": \\\"A dataframe storing the dive log and a plot showing the diving depth trend over time.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A homeowner who regularly witnesses the sanitation worker's dedication and cleanliness on their street", "synthesized text": "\"{\\n\\\"name\\\": \\\"Street Cleaning Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface returns the street cleaning schedule for a given street name. It simplifies the process of finding out when street cleaning will occur, allowing homeowners to plan accordingly.\\\",\\n\\\"function_name\\\": \\\"get_street_cleaning_schedule\\\",\\n\\\"input_args\\\": \\\"street_name\\\",\\n\\\"return\\\": \\\"Street cleaning schedule\\\",\\n\\\"depend\\\": \\\"requests library, City or Municipality API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional software engineer who is experienced in working with IBM Watson Tone Analyzer API.", "synthesized text": "\"{\\n\\\"name\\\": \\\"IBM Watson Tone Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface to the IBM Watson Tone Analyzer API, which analyzes the tone of a given text.\\\",\\n\\\"function_name\\\": \\\"analyze_tone\\\",\\n\\\"input_args\\\": [\\\"api_key\\\", \\\"url\\\", \\\"text\\\"],\\n\\\"return\\\": \\\"JSON response from the IBM Watson Tone Analyzer API, including the tones detected in the text.\\\",\\n\\\"depend\\\": [\\\"IBM Watson Tone Analyzer API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young vlogger seeking advice on how to monetize their content without compromising their creativity", "synthesized text": "\"{\\n  \\\"name\\\": \\\"YouTube Video Statistics Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches and returns statistics for a given YouTube video, including views, likes, dislikes, and comments. This can help vloggers understand their audience's preferences and tailor their content accordingly for better monetization.\\\",\\n  \\\"function_name\\\": \\\"get_youtube_video_statistics\\\",\\n  \\\"input_args\\\": \\\"video_url\\\",\\n  \\\"return\\\": \\\"Dictionary with video statistics (views, likes, dislikes, comments)\\\",\\n  \\\"depend\\\": \\\"YouTube Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An entrepreneur who successfully transitioned their business online and can provide guidance on choosing the right web hosting solution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Web Hosting Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends the best web hosting options based on user's requirements using web scraping and machine learning.\\\",\\n\\\"function_name\\\": \\\"predict_best_hosting\\\",\\n\\\"input_args\\\": {\\n    \\\"storage\\\": \\\"The required storage space in GB.\\\",\\n    \\\"bandwidth\\\": \\\"The required bandwidth in GB.\\\",\\n    \\\"budget\\\": \\\"The user's budget in USD.\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended web hosting options sorted by their suitability.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries for web scraping and sklearn for machine learning.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An MU soccer coach who always supports the players unconditionally", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface will load player's performance data from a CSV file, perform a comprehensive analysis, and visualize the performance over time.\\\",\\n\\\"function_name\\\": \\\"analyze_player_performance\\\",\\n\\\"input_args\\\": \\\"csv_path - path to the CSV file which contains player's performance data\\\",\\n\\\"return\\\": \\\"A statistical summary of the player's performance and a performance chart\\\",\\n\\\"depend\\\": \\\"pandas, matplotlib, seaborn\\\"\\n}\"", "description": "tool development"}
{"input persona": "An amateur boxer training for their first local bout, emphasizing discipline and respect in the sport", "synthesized text": "\"{\\n\\\"name\\\": \\\"Boxing Training Plan Interface\\\",\\n\\\"description\\\": \\\"This interface takes user's age, weight, height, preferred boxing style and time until their bout and returns a personalized boxing training plan.\\\",\\n\\\"function_name\\\": \\\"get_boxing_training_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"User's age\\\",\\n    \\\"weight\\\": \\\"User's weight\\\",\\n    \\\"height\\\": \\\"User's height\\\",\\n    \\\"boxing_style\\\": \\\"User's preferred boxing style\\\",\\n    \\\"time_until_bout\\\": \\\"Time until the user's bout\\\"\\n},\\n\\\"return\\\": \\\"A personalized boxing training plan\\\",\\n\\\"depend\\\": \\\"Python's tensorflow and pandas libraries, and a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a public health advocate and social activist, deeply concerned with how systemic issues within healthcare influence patient care and societal well-being. I see the socio-political environment as integral to the health of individuals and communities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health Disparity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Social Vulnerability Index (SVI) dataset from the CDC and Python libraries to analyze health disparities within a specific county and state. It can also correlate this data with a health outcome of interest.\\\",\\n\\\"function_name\\\": [\\\"get_svi_data\\\", \\\"correlate_with_health_outcome\\\"],\\n\\\"input_args\\\": [\\\"state\\\", \\\"county\\\", \\\"health_outcome_data\\\"],\\n\\\"return\\\": \\\"For the 'get_svi_data' function, it returns a DataFrame with the SVI data for the specified county and state. The 'correlate_with_health_outcome' function returns a dictionary with the correlation coefficient and p_value from a Pearson correlation between the SVI data and the health outcome data.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"geopandas\\\", \\\"scipy.stats\\\", \\\"CDC SVI Dataset\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an inhabitant of Casel, Germany.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the current weather forecast for a given city using the OpenWeatherMap API. Users only need to input their city name, and the interface will return the temperature, pressure, humidity, and a brief description of the weather.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"city\\\": \\\"string\\\", \\\"temperature\\\": \\\"float\\\", \\\"pressure\\\": \\\"float\\\", \\\"humidity\\\": \\\"float\\\", \\\"weather_description\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"], \\\"web APIs\\\": [\\\"OpenWeatherMap API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A representative from a local employee association offering expertise on best practices in establishing policies and procedures", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Policy Suggestion Interface\\\",\\n  \\\"description\\\": \\\"Provides suggestions on best practices for establishing policies and procedures.\\\",\\n  \\\"function_name\\\": \\\"suggest_policy_improvements\\\",\\n  \\\"input_args\\\": [\\\"policy_draft\\\"],\\n  \\\"return\\\": \\\"String of suggested improvements or best practices to consider.\\\",\\n  \\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior biologist who has conducted extensive research on alpine plant biodiversity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Species Distribution Modelling Interface\\\",\\n\\\"description\\\": \\\"Uses the Bioclim method from BioPython to generate potential distribution maps for a list of species given their observation coordinates.\\\",\\n\\\"function_name\\\": \\\"get_species_distribution\\\",\\n\\\"input_args\\\": {\\n    \\\"species_list\\\": \\\"A list of species names.\\\",\\n    \\\"coordinates\\\": \\\"A list of coordinates where the species were observed. Each coordinate should correspond to the species in the same position in the 'species_list' argument.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary where each key is a species name and each value is a potential distribution map for that species.\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a radio enthusiast from Grand Portage, Minnesota.", "synthesized text": "\"{\\n\\\"name\\\": \\\"FM Radio Station Search Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to find FM radio stations in their area by simply inputting their country. The returned information includes a list of available FM radio stations.\\\",\\n\\\"function_name\\\": \\\"get_fm_radio_stations\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"A list of available FM radio stations\\\",\\n\\\"depend\\\": \\\"Radio Browser API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned BTCC rivalfan who is skeptical about Dan Kirby's debut.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Race Statistics Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch and display a summary of a race driver's career statistics. User inputs the name of the driver, and the interface returns a summary of the driver's career statistics.\\\",\\n  \\\"function_name\\\": \\\"get_driver_statistics\\\",\\n  \\\"input_args\\\": \\\"driver_name\\\",\\n  \\\"return\\\": \\\"A dictionary containing the driver's full name, nationality, birth date, career start year, teams he has raced for, number of race entries, race starts, wins, podiums, pole positions, fastest laps, and championships.\\\",\\n  \\\"depend\\\": \\\"Ergast Developer API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst who relies on the software engineer's VBA solutions to automate data processing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Excel File Processing Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to automate their data processing tasks in Excel files by inputting the path to an Excel file and a function to process the data. The processed data will be written back to the same file.\\\",\\n\\\"function_name\\\": \\\"process_excel_file\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the Excel file.\\\",\\n    \\\"process_func\\\": \\\"A function that takes a pandas DataFrame as input and returns a processed DataFrame.\\\"\\n},\\n\\\"return\\\": \\\"A string indicating that processing is complete.\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am an ageing Italian artist who specializes in the traditional craft of mask-making, and I knew Pierangelo Summa personally.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Style Transfer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to transform the style of their artwork according to the style of another artwork. The user provides paths to two images: their artwork (content) and the artwork whose style they want to mimic (style). The interface then returns their artwork rendered in the other artist's style.\\\",\\n\\\"function_name\\\": \\\"style_transfer\\\",\\n\\\"input_args\\\": [\\\"content_path\\\", \\\"style_path\\\"],\\n\\\"return\\\": \\\"A numpy array representing the stylized image.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a vengeful descendant of King Mahipativarman who is also a history enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancient Script Translation\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to translate ancient scripts to modern English.\\\",\\n\\\"function_name\\\": \\\"translate_ancient_script\\\",\\n\\\"input_args\\\": {\\\"ancient_script\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"translated_text\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"Helsinki-NLP/opus-mt-sanskrit-en\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A hardcore Enid Blyton fan who hates modern twists on old classics.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Similarity Search Interface\\\",\\n\\\"description\\\": \\\"This interface takes the title of a classic book as input and returns a list of books that have a similar writing style or theme, excluding modern reinterpretations.\\\",\\n\\\"function_name\\\": \\\"get_similar_books\\\",\\n\\\"input_args\\\": [\\\"book_title\\\", \\\"num_books\\\"],\\n\\\"return\\\": \\\"A list of similar book titles.\\\",\\n\\\"depend\\\": [\\\"Hugging Face's sentence-transformers library\\\", \\\"pandas\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hypertrophic cardiomyopathy (HCM) patient", "synthesized text": "\"{\\n\\\"name\\\": \\\"Heart Rate Variability Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyzes Heart Rate Variability (HRV) from ECG data. Returns Time and Frequency domain features of HRV.\\\",\\n\\\"function_name\\\": \\\"analyze_hrv\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"Tuple of two dictionaries. The first dictionary contains Time domain features of HRV, and the second dictionary contains Frequency domain features of HRV.\\\",\\n\\\"depend\\\": [\\\"biosppy library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A neuroscientist investigating the application of Bayesian statistics in brain imaging research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bayesian Statistics in Brain Imaging Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the application of Bayesian statistics in brain imaging research. The user inputs the path to their brain image dataset, and the interface returns a Bayesian model fitted to the data.\\\",\\n\\\"function_name\\\": \\\"create_bayesian_model\\\",\\n\\\"input_args\\\": \\\"path_to_dataset\\\",\\n\\\"return\\\": \\\"A Bayesian model (PyMC3 trace object) fitted to the input brain image dataset.\\\",\\n\\\"depend\\\": \\\"Python libraries: PyMC3 for Bayesian statistical modeling, nibabel for loading brain imaging data, numpy for data manipulation\\\"\\n}\"", "description": "tool development"}
{"input persona": "A flurry-hearted social activist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Petition Signature Count Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the current count of signatures for an online petition. The user only needs to input the URL of the petition, and our interface will return the current count of signatures.\\\",\\n\\\"function_name\\\": \\\"get_signature_count\\\",\\n\\\"input_args\\\": \\\"petition_url\\\",\\n\\\"return\\\": \\\"int\\\",\\n\\\"depend\\\": \\\"BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young historian researching the political history of the Republic of Bashkortostan, who generally has neutral feelings toward individual politicians but finds them inherently intriguing.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wikipedia Summary Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and returns the summary of a given topic from Wikipedia. Designed for users who need quick and reliable information about various topics.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_summary\\\",\\n\\\"input_args\\\": \\\"topic - a string that represents the subject of the search on Wikipedia\\\",\\n\\\"return\\\": \\\"A string that contains the summary of the given topic from Wikipedia\\\",\\n\\\"depend\\\": \\\"Python library: wikipedia-api\\\"\\n}\"", "description": "tool development"}
{"input persona": "An up-and-coming actor who emphasizes raw talent and authenticity over image", "synthesized text": "\"{\\n\\\"name\\\": \\\"Script Line Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a character's situation and emotional state, and suggests a line of dialogue for the character. Useful for actors improvising lines or creating dialogue.\\\",\\n\\\"function_name\\\": \\\"generate_script_line\\\",\\n\\\"input_args\\\": {\\n    \\\"situation\\\": \\\"The current situation in which the character is. (e.g., heated argument)\\\",\\n    \\\"emotion\\\": \\\"The current emotional state of the character. (e.g., angry)\\\"\\n},\\n\\\"return\\\": \\\"A suggested line of dialogue for the character.\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library (GPT-2)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturer specializing in producing premium playing cards used in high-stakes games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Playing Card Quality Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained image classification model to evaluate the quality of printed playing cards.\\\",\\n\\\"function_name\\\": \\\"card_quality_analysis\\\",\\n\\\"input_args\\\": \\\"path_to_img - A string representing the path to the image file of the playing card.\\\",\\n\\\"return\\\": \\\"A string indicating the quality of the playing card ('High Quality', 'Medium Quality', 'Low Quality').\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Pre-trained Inception v3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an experienced software engineer, focusing on concurrency issues in embedded systems. I approach problems methodically and value diving deep to understand root causes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Concurrency Issue Detection Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a Python function and its arguments, then runs the function with multiple threads to simulate concurrency. It returns any exceptions that occur, helping to detect potential concurrency issues.\\\",\\n\\\"function_name\\\": \\\"concurrency_issue_detector\\\",\\n\\\"input_args\\\": [\\\"function\\\", \\\"*args\\\"],\\n\\\"return\\\": \\\"List of exceptions if any occur during the concurrent execution of the function\\\",\\n\\\"depend\\\": [\\\"concurrent.futures Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一位50岁的历史学教授，对科幻和时空穿越小说深感兴趣，但对年轻时代流行的网络剧不太了解。", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Recommendation Interface\\\",\\n\\\"description\\\": \\\"\\u63a8\\u8350\\u7535\\u89c6\\u5267\\u7684\\u63a5\\u53e3\\u3002\\u8f93\\u5165\\u7528\\u6237\\u7684\\u5e74\\u9f84\\u3001\\u804c\\u4e1a\\u548c\\u5174\\u8da3\\uff0c\\u8fd4\\u56de\\u63a8\\u8350\\u7684\\u7535\\u89c6\\u5267\\u5217\\u8868\\u3002\\\",\\n\\\"function_name\\\": \\\"recommend_tv_shows\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"occupation\\\", \\\"interests\\\"],\\n\\\"return\\\": \\\"\\u7535\\u89c6\\u5267\\u5217\\u8868\\\",\\n\\\"depend\\\": [\\\"requests\\u5e93\\\", \\\"MovieLens\\u63a8\\u8350API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A stockbroker who provides investment advice on real estate investment trusts (REITs)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real Estate Investment Trusts (REITs) Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from HuggingFace to predict the future price of a given REIT based on its ticker symbol.\\\",\\n\\\"function_name\\\": \\\"predict_reit_price\\\",\\n\\\"input_args\\\": \\\"reit_ticker\\\",\\n\\\"return\\\": \\\"Predicted future price of the input REIT.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library (AutoTokenizer, AutoModelForSequenceClassification)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A freelance writer who is considering moving to Switzerland", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cost of Living Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Numbeo's Cost of Living API to compare the cost of living between two cities.\\\",\\n\\\"function_name\\\": \\\"get_cost_of_living_comparison\\\",\\n\\\"input_args\\\": [\\\"current_city\\\", \\\"target_city\\\"],\\n\\\"return\\\": \\\"A comparison of the cost of living between the two cities.\\\",\\n\\\"depend\\\": \\\"Numbeo's Cost of Living API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical professional who provides expert testimony in personal injury cases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Record Summary Interface\\\",\\n\\\"description\\\": \\\"This interface uses Natural Language Processing and Machine Learning to summarize medical records. The user inputs a text file containing a medical record, and the interface returns a summarized version.\\\",\\n\\\"function_name\\\": \\\"summarize_medical_record\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A string of sentences that summarize the medical record.\\\",\\n\\\"depend\\\": [\\\"Python's Spacy and Scikit-learn libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A 30-year-old freelance film critic who's extremely fond of unity in diversity.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Foreign Film Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes user's preferred language and genre, and recommends a foreign film using a machine learning model. The model is trained on a movie dataset considering various genres, languages, and cultures.\\\",\\n\\\"function_name\\\": \\\"recommend_foreign_film\\\",\\n\\\"input_args\\\": [\\\"preferred_language\\\", \\\"preferred_genre\\\"],\\n\\\"return\\\": \\\"Recommended foreign film\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a MIS student taking a government class.", "synthesized text": "\"{\\n \\\"name\\\": \\\"Government Document Search Interface\\\",\\n \\\"description\\\": \\\"Search for a specific type of government document (like a bill, resolution, or law) by keyword. The interface will then return a list of relevant documents, using the official U.S. government's Congressional Data API.\\\",\\n \\\"function_name\\\": \\\"search_gov_documents\\\",\\n \\\"input_args\\\": {\\n    \\\"doc_type\\\": \\\"Type of the document. For example, 'bill', 'resolution', or 'law'.\\\",\\n    \\\"keyword\\\": \\\"Keyword to search in the documents.\\\"\\n },\\n \\\"return\\\": \\\"This function returns a list of dictionaries. Each dictionary contains the 'title', 'summary', and 'date' of a document.\\\",\\n \\\"depend\\\": \\\"Official U.S. government's Congressional Data API, Python's requests library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young writer who has been overlooked by traditional publishing houses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Publishing Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the book content and some related information as input, and returns a printable PDF of the book.\\\",\\n\\\"function_name\\\": \\\"publish_book\\\",\\n\\\"input_args\\\": [\\\"title\\\", \\\"author\\\", \\\"chapters\\\"],\\n\\\"return\\\": \\\"PDF file\\\",\\n\\\"depend\\\": [\\\"Python's FPDF library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A tactical strategist specialized in coordinating team movements during airsoft battles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Optimal Route Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the shortest path between two points on a given 2D grid (representing a battlefield) using the A* pathfinding algorithm. The grid is a matrix of 1s and 0s, where 1 represents an obstacle and 0 represents free space. The user inputs the grid and the start and end positions, and the interface returns the optimal path.\\\",\\n\\\"function_name\\\": \\\"calculate_optimal_route\\\",\\n\\\"input_args\\\": {\\n  \\\"battlefield\\\": \\\"A 2D list of integers representing the battlefield. 1s represent obstacles, and 0s represent free space.\\\",\\n  \\\"start_position\\\": \\\"A tuple of two integers representing the starting position on the grid.\\\",\\n  \\\"end_position\\\": \\\"A tuple of two integers representing the target position on the grid.\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples representing the optimal path from the start position to the end position, avoiding obstacles.\\\",\\n\\\"depend\\\": \\\"Python's pathfinding library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former member of the Hatfield College Boat Club (HCBC), graduated 5 years ago.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Rowing Workout Generator Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Concept2 Logbook API to generate personalized rowing workouts based on the user's age and fitness level.\\\",\\n  \\\"function_name\\\": \\\"generate_rowing_workout\\\",\\n  \\\"input_args\\\": [\\\"age\\\", \\\"fitness_level\\\"],\\n  \\\"return\\\": \\\"A string that describes the personalized workout.\\\",\\n  \\\"depend\\\": \\\"Concept2 Logbook API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an avid road-trip enthusiast, always looking for the next great drive across the United States. I have a particular fondness for historic routes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historic Route Finder Interface\\\",\\n\\\"description\\\": \\\"This interface provides a detailed, scenic route between two locations. It uses the Open Route Service API to get route details, avoiding tollways and prioritizing scenic routes.\\\",\\n\\\"function_name\\\": \\\"get_scenic_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"A GeoJSON object containing the route details that can be visualized on a map.\\\",\\n\\\"depend\\\": \\\"Open Route Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hopeful single parent undergoing IVF that maintains a wellness blog detailing their journey", "synthesized text": "\"{\\n  \\\"name\\\": \\\"IVF Success Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the success rate of an IVF treatment based on user's age, BMI, number of previous attempts, and other factors.\\\",\\n  \\\"function_name\\\": \\\"predict_ivf_success\\\",\\n  \\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the patient.\\\",\\n    \\\"bmi\\\": \\\"The body mass index of the patient.\\\",\\n    \\\"previous_attempts\\\": \\\"The number of previous IVF attempts by the patient.\\\",\\n    \\\"other_factors\\\": \\\"A dictionary of other factors that might affect the success of IVF.\\\"\\n  },\\n  \\\"return\\\": \\\"A floating point number representing the predicted success rate.\\\",\\n  \\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "An investment banker who follows Margaret Mittelheuser's investment strategies and successes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the future price of a stock based on its symbol using a deep learning model pretrained on financial news articles.\\\",\\n\\\"function_name\\\": \\\"predict_stock_price\\\",\\n\\\"input_args\\\": \\\"stock_symbol\\\",\\n\\\"return\\\": \\\"A probability between 0 (price decrease) and 1 (price increase).\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers, Torch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A marine policy advisor seeking their expertise in developing conservation strategies for marine mammal populations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Marine Mammal Population Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface is designed to predict the population of a specific marine mammal species based on a variety of factors such as water temperature, fishing activity, pollution levels, etc.\\\",\\n\\\"function_name\\\": \\\"predict_marine_mammal_population\\\",\\n\\\"input_args\\\": {\\n    \\\"species\\\": \\\"The species of marine mammal\\\",\\n    \\\"water_temp\\\": \\\"The average water temperature in the habitat\\\",\\n    \\\"fishing_activity\\\": \\\"The level of fishing activity in the habitat\\\",\\n    \\\"pollution\\\": \\\"The level of pollution in the habitat\\\"\\n},\\n\\\"return\\\": \\\"An estimate of the marine mammal population\\\",\\n\\\"depend\\\": \\\"A pre-trained machine learning model (Random Forest Regressor) saved as a .joblib file, pandas, sklearn.ensemble, joblib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rival distributor of high-end bike frames known for their exclusive partnerships with top bike manufacturers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitor Product Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes a competitor's website and returns details about their products.\\\",\\n\\\"function_name\\\": \\\"get_product_details\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"List of dictionaries containing product details (name, price, and description).\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A petroleum engineer with years of experience in reservoir modeling and production optimization", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Petroleum Reservoir Simulation Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to input the path to a CSV file containing well log data (e.g., porosity, permeability, etc.) and return a 2D reservoir simulation model.\\\",\\n  \\\"function_name\\\": \\\"reservoir_simulation\\\",\\n  \\\"input_args\\\": \\\"path_to_csv\\\",\\n  \\\"return\\\": \\\"2D grid of the interpolated variable.\\\",\\n  \\\"depend\\\": \\\"Python libraries: pandas, numpy, pykrige\\\"\\n}\"", "description": "tool development"}
{"input persona": "a participant of Ruta Quetzal BBVA 2009", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Planner\\\",\\n\\\"description\\\": \\\"This interface provides users with the optimal route between two locations, including the estimated travel time and distance. The underlying technology is the Google Maps Directions API.\\\",\\n\\\"function_name\\\": \\\"get_optimal_route\\\",\\n\\\"input_args\\\": [\\\"start_point\\\", \\\"end_point\\\"],\\n\\\"return\\\": \\\"A dictionary containing 'distance', 'duration', and 'steps' keys. 'distance' and 'duration' are strings representing the total distance and duration of the trip, and 'steps' is a list of strings, each representing a step in the route.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Google Maps Directions API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A psychologist who studies the relationship between introversion and creativity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Personality Trait Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyzes a text and returns scores representing the detected levels of introversion and creativity\\\",\\n\\\"function_name\\\": \\\"analyze_personality_traits\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"Dictionary with introversion and creativity scores\\\",\\n\\\"depend\\\": \\\"transformers library (huggingface), OpenAI's GPT-3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "Compulsive set designer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Color Palette Visualization\\\",\\n\\\"description\\\": \\\"An interface that visualizes a color palette based on the most common colors in a given image. Useful for set designers to create a set with a specific mood or theme.\\\",\\n\\\"function_name\\\": \\\"visualize_color_palette\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"num_colors\\\"],\\n\\\"return\\\": \\\"A color palette visualization\\\",\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"PIL\\\", \\\"numpy\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Finnish children's book author who admires Kirsti Tiina Nopola", "synthesized text": "\"{\\n\\\"name\\\": \\\"Story Character Name Generation Interface\\\",\\n\\\"description\\\": \\\"Generate new and unique names for story characters based on a seed name.\\\",\\n\\\"function_name\\\": \\\"generate_character_names\\\",\\n\\\"input_args\\\": {\\\"seed_name\\\": \\\"string\\\", \\\"num_names\\\": \\\"int (optional, default=5)\\\"},\\n\\\"return\\\": \\\"list of strings (new character names)\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers (GPT2LMHeadModel, GPT2Tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Kathmandu local who never voted for Santosh Chalise", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voter Verification Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check voting history using the citizenship number. It uses the (hypothetical) election commission API to verify if a person has voted in a particular election.\\\",\\n\\\"function_name\\\": \\\"has_voted\\\",\\n\\\"input_args\\\": \\\"citizenship_number - The citizenship number of the person\\\",\\n\\\"return\\\": \\\"A list of elections the person has voted in\\\",\\n\\\"depend\\\": \\\"requests library, Election Commission's public API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former candidate for Kyrgyzstan's presidency who is passionate about human rights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Human Rights News Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface uses the News API to fetch the latest news articles based on a user-input key phrase, primarily designed for monitoring human rights news.\\\",\\n\\\"function_name\\\": \\\"get_human_rights_news\\\",\\n\\\"input_args\\\": \\\"key_phrase\\\",\\n\\\"return\\\": \\\"List of dictionaries, each containing the 'title' and 'url' of a news article\\\",\\n\\\"depend\\\": \\\"News API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sister who is an international aid worker, appreciating the potential impact of AI technology in crisis response and disaster management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Earthquake Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses Machine Learning to detect earthquakes from seismic data. Users input the seismic data file, and the interface returns whether an earthquake event has occurred or not.\\\",\\n\\\"function_name\\\": \\\"detect_earthquake\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"earthquake_detected\\\",\\n\\\"depend\\\": \\\"tensorflow\\\"\\n}\"", "description": "tool development"}
{"input persona": "An expectant mother currently contemplating baby names and is partial to names of religious origin.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baby Name Origin Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Agify.io API to determine the most likely origin of a given baby name.\\\",\\n\\\"function_name\\\": \\\"get_name_origin\\\",\\n\\\"input_args\\\": \\\"name\\\",\\n\\\"return\\\": \\\"The most likely origin of the name.\\\",\\n\\\"depend\\\": \\\"Agify.io API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A PhD candidate who is mentored by the bioinformatics scientist and conducts research on identifying biomarkers for cancer through genomic analysis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genomic Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to identify biomarkers in genomic data. It searches for a specified sequence pattern in a genomic data file (FASTA format) and returns a list of sequence identifiers that contain the pattern.\\\",\\n\\\"function_name\\\": \\\"identify_biomarkers\\\",\\n\\\"input_args\\\": {\\n  \\\"genomic_data_path\\\": \\\"Path to the genomic data file\\\",\\n  \\\"pattern\\\": \\\"Sequence pattern to search for\\\"\\n},\\n\\\"return\\\": \\\"A list of sequence identifiers that contain the specified sequence pattern\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young grandchild who is just beginning to learn how to read and write", "synthesized text": "\"{\\n\\\"name\\\": \\\"Handwriting Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface takes an image of handwriting as input and returns the recognized text.\\\",\\n\\\"function_name\\\": \\\"handwriting_recognition\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"Recognized text from the handwriting image\\\",\\n\\\"depend\\\": \\\"Python's PIL and pytesseract libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young man from Manchester, who is terrible at directions and depends on GPS navigation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Easy Direction Navigation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Direction API to provide easy directions between two locations. The user simply inputs their current location and the desired destination, and the interface will return step-by-step driving directions.\\\",\\n\\\"function_name\\\": \\\"get_driving_directions\\\",\\n\\\"input_args\\\": [\\\"start_loc\\\", \\\"end_loc\\\"],\\n\\\"return\\\": \\\"Prints out turn-by-turn driving directions from starting location to ending location\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Google Direction API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an A.I. researcher with a hobby of diamond collection", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Diamond Price Prediction Interface\\\",\\n  \\\"description\\\": \\\"An interface using a pre-trained model from HuggingFace to predict the price of a diamond based on its carat, cut, color, and clarity.\\\",\\n  \\\"function_name\\\": \\\"predict_diamond_price\\\",\\n  \\\"input_args\\\": {\\n    \\\"carat\\\": \\\"The weight of the diamond. A positive real number.\\\",\\n    \\\"cut\\\": \\\"The quality of the diamond's cut. A string, e.g., 'Ideal', 'Premium', 'Good', 'Fair', or 'Poor'.\\\",\\n    \\\"color\\\": \\\"The color of the diamond. A string, e.g., 'D' (best) to 'J' (worst).\\\",\\n    \\\"clarity\\\": \\\"The clarity of the diamond. A string, e.g., 'IF' (Internally Flawless), 'VVS1' (Very, Very Slightly Included 1), 'VVS2', 'VS1', 'VS2', 'SI1' (Slightly Included 1), 'SI2', or 'I1' (Included 1).\\\"\\n  },\\n  \\\"return\\\": \\\"The predicted price range of the diamond. An integer that represents a specific price range.\\\",\\n  \\\"depend\\\": \\\"HuggingFace transformers library, PyTorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young father, newly diagnosed with cancer, trying to maintain a sense of normalcy for his children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cancer Diagnosis Explanation Interface\\\",\\n\\\"description\\\": \\\"An interface that simplifies complex medical jargon into child-friendly language.\\\",\\n\\\"function_name\\\": \\\"simplify_medical_text\\\",\\n\\\"input_args\\\": {\\n    \\\"medical_text\\\": \\\"A string containing complex medical jargon\\\"\\n},\\n\\\"return\\\": \\\"A simplified version of the input text\\\",\\n\\\"depend\\\": \\\"HuggingFace Transformers Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical company specializing in the development of innovative drugs and seeking patent advice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patent Search Interface\\\",\\n\\\"description\\\": \\\"Uses APIs from the European Patent Office to fetch patent information. Useful for companies in the pharmaceutical industry that need to do patent research when developing new drugs.\\\",\\n\\\"function_name\\\": \\\"fetch_patent_info\\\",\\n\\\"input_args\\\": {\\n    \\\"keyword\\\": \\\"A keyword or patent number to search for.\\\"\\n},\\n\\\"return\\\": \\\"Returns a JSON object containing relevant patent information.\\\",\\n\\\"depend\\\": \\\"requests library, European Patent Office API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An expert in ancient Roman history drafting their first comprehensive account of Julius Caesar's rule", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates Latin text to English, which can be useful for historians studying ancient Roman documents.\\\",\\n\\\"function_name\\\": \\\"translate_latin_to_english\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"string\\\"\\n},\\n\\\"return\\\": \\\"string (translated text in English)\\\",\\n\\\"depend\\\": \\\"googletrans Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer science major struggling with understanding algorithm complexity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Big O Notation Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the Big O notation of a given function. It simplifies the process of understanding algorithm complexity for computer science students.\\\",\\n\\\"function_name\\\": \\\"calculate_big_o\\\",\\n\\\"input_args\\\": {\\\"function_str\\\": \\\"String representation of the function to calculate Big O notation for. The variable should be 'n'.\\\"},\\n\\\"return\\\": \\\"String representation of the Big O notation of the given function.\\\",\\n\\\"depend\\\": \\\"Sympy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a philosophy professor at Salem College", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n\\\"description\\\": \\\"This interface compares two text files and returns a similarity score based on the Jaccard similarity index. A high score may indicate potential plagiarism.\\\",\\n\\\"function_name\\\": \\\"detect_plagiarism\\\",\\n\\\"input_args\\\": [\\\"file1\\\", \\\"file2\\\"],\\n\\\"return\\\": \\\"A floating point number indicating the similarity score between the two input documents, with 1.0 indicating identical texts and 0 indicating no overlap.\\\",\\n\\\"depend\\\": [\\\"textdistance Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A representative from an international organization seeking guidance on the treatment of prisoners of war", "synthesized text": "\"{\\n\\\"name\\\": \\\"International Law Reference Interface\\\",\\n\\\"description\\\": \\\"Fetches relevant international laws and regulations based on the input keyword. Returns a list of laws, treaties, and regulations with their respective links for further reading.\\\",\\n\\\"function_name\\\": \\\"get_international_law_references\\\",\\n\\\"input_args\\\": \\\"keyword: A keyword or a phrase related to a specific law or regulation.\\\",\\n\\\"return\\\": \\\"List of tuples. Each tuple contains a title of the law or regulation and a url link to the full text.\\\",\\n\\\"depend\\\": \\\"Python requests library, Legal Information Institute's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer programmer developing simulation models to help the astrochemist predict chemical reactions in alien atmospheres", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Reaction Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the products of a chemical reaction given the reactants. The reactants and products are represented in SMILES format.\\\",\\n\\\"function_name\\\": \\\"predict_reaction_product\\\",\\n\\\"input_args\\\": [\\\"reactant_smiles\\\"],\\n\\\"return\\\": \\\"The SMILES representation of the predicted products.\\\",\\n\\\"depend\\\": \\\"RDKit\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diligent estate liquidator specializing in house clearings after family losses", "synthesized text": "\"{\\n\\\"name\\\": \\\"House Clearing Price Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface to estimate the cost of a house clearing based on parameters like house size, amount of stuff, and location.\\\",\\n\\\"function_name\\\": \\\"estimate_house_clearing_cost\\\",\\n\\\"input_args\\\": {\\\"size\\\": \\\"total square footage of the house\\\", \\\"stuff_amount\\\": \\\"amount of stuff to be removed on a scale of 1-10\\\", \\\"location\\\": \\\"numeric location ID\\\"},\\n\\\"return\\\": \\\"Estimated cost of house clearing\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"sklearn\\\", \\\"pandas\\\"], \\\"machine learning models\\\": [\\\"RandomForestRegressor\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A filmmaker creating a documentary on the history of labor unions and their significance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Timeline Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Wikipedia API to extract a timeline of significant historical events related to a specific topic.\\\",\\n\\\"function_name\\\": \\\"get_labor_union_history\\\",\\n\\\"input_args\\\": \\\"None\\\",\\n\\\"return\\\": \\\"A string containing the Wikipedia page content of 'History of trade unions in the United States', which can be further processed to extract a timeline of significant events.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retro music enthusiast who's skeptical of the value of modern digital audio players in the era of smartphones", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Quality Comparison Interface\\\", \\n\\\"description\\\": \\\"This interface compares the audio quality of two audio files in terms of bitrate and presents the results in a bar chart.\\\", \\n\\\"function_name\\\": \\\"compare_audio_quality\\\", \\n\\\"input_args\\\": [\\\"file1\\\", \\\"file2\\\"], \\n\\\"return\\\": {\\\"file1_bitrate\\\": \\\"bitrate of the first file in bps\\\", \\\"file2_bitrate\\\": \\\"bitrate of the second file in bps\\\"}, \\n\\\"depend\\\": [\\\"pydub\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired architecture professor who taught alongside Middleton at Columbia University", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model to Blueprint Interface\\\",\\n\\\"description\\\": \\\"This interface converts 3D model to its 2D blueprint by applying edge detection technique\\\",\\n\\\"function_name\\\": \\\"get_blueprint_from_3d_model\\\",\\n\\\"input_args\\\": \\\"model_path - The path of the 3D model file\\\",\\n\\\"return\\\": \\\"blueprint - The 2D blueprint of the model\\\",\\n\\\"depend\\\": \\\"python libraries - OpenCV, Numpy, Matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "An online friend of Chérubin Okende Senga who lives in United States.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface takes an amount and two currencies as input and returns the amount converted from the first currency to the second currency.\\\",\\n\\\"function_name\\\": \\\"convert_currency\\\",\\n\\\"input_args\\\": [\\\"amount\\\", \\\"from_currency\\\", \\\"to_currency\\\"],\\n\\\"return\\\": \\\"converted_amount\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Open Exchange Rates API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A traditionalist cookbook author who believes in authentic recipes and cooking methods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Substitution Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Spoonacular API to provide ingredient substitution suggestions. Input an ingredient and get a list of possible alternatives.\\\",\\n\\\"function_name\\\": \\\"get_ingredient_substitutes\\\",\\n\\\"input_args\\\": \\\"ingredient - a string representing the ingredient you need to substitute\\\",\\n\\\"return\\\": \\\"A list of strings. Each string is an alternative to the input ingredient.\\\",\\n\\\"depend\\\": \\\"Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a rock mechanics researcher with particular interest in computational modeling of geomaterials", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rock Mechanics Simulation Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the stress and strain experienced by a rock under a certain force.\\\",\\n\\\"function_name\\\": \\\"calculate_stress_strain\\\",\\n\\\"input_args\\\": [\\\"modulus\\\", \\\"poisson_ratio\\\", \\\"force\\\", \\\"area\\\"],\\n\\\"return\\\": [\\\"stress\\\", \\\"strain\\\"],\\n\\\"depend\\\": [\\\"pyrocko library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "High school student thinking of pursuing front-end development as a career", "synthesized text": "\"{\\n\\\"name\\\": \\\"HTML Validator Interface\\\",\\n\\\"description\\\": \\\"This interface validates HTML code by using the W3C validator API. It inputs a string of HTML code and returns a JSON object containing information about errors and warnings in the code.\\\",\\n\\\"function_name\\\": \\\"validate_html\\\",\\n\\\"input_args\\\": \\\"html_code\\\",\\n\\\"return\\\": \\\"JSON object\\\",\\n\\\"depend\\\": \\\"W3C validator API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An electrical engineer who designs and builds custom gaming PCs", "synthesized text": "\"{\\n\\\"name\\\": \\\"PC Component Compatibility Checker Interface\\\",\\n\\\"description\\\": \\\"Checks the compatibility of two PC components by web scraping popular PC building websites.\\\",\\n\\\"function_name\\\": \\\"check_component_compatibility\\\",\\n\\\"input_args\\\": [\\\"component1\\\", \\\"component2\\\"],\\n\\\"return\\\": \\\"String indicating if there are any compatibility issues between the two components.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "นักออกแบบภาษาไอคอนที่พัฒนากราฟิกและแสดงผลให้กับส่วนต่างๆของอินเทอร์เฟซ", "synthesized text": "\"{\\n\\\"name\\\": \\\"Icon Color Adjust Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to change the color of an icon by providing the icon file path and the desired new color.\\\",\\n\\\"function_name\\\": \\\"adjust_icon_color\\\",\\n\\\"input_args\\\": {\\\"icon_path\\\": \\\"Path to the icon file\\\", \\\"new_color\\\": \\\"The desired new color as an RGB tuple\\\"},\\n\\\"return\\\": \\\"The icon file with the new color.\\\",\\n\\\"depend\\\": {\\\"Python libraries\\\": [\\\"PIL\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A busy Sedona local who loves live music, but has a hard time fitting events into his tight schedule.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Bandsintown API to track live music events for the user's favorite artists. The user simply inputs the artist's name, and the function will return a list of upcoming events for that artist.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_events\\\",\\n\\\"input_args\\\": \\\"artist_name\\\",\\n\\\"return\\\": \\\"List of dictionaries where each dictionary represents an event. Each dictionary contains the venue, city, and date of the event.\\\",\\n\\\"depend\\\": \\\"Bandsintown API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a current member of the Woman's Christian Temperance Union in Australia.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alcohol Consumption Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get alcohol consumption per capita for a specific year in a specific country.\\\",\\n\\\"function_name\\\": \\\"get_alcohol_consumption_per_capita\\\",\\n\\\"input_args\\\": [\\\"country\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"Alcohol consumption per capita (liters of pure alcohol, projected estimates, 15+ years of age)\\\",\\n\\\"depend\\\": \\\"Global Burden of Disease (GBD) Compare Data Visualization web API from the Institute for Health Metrics and Evaluation (IHME)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A science fiction writer who is working on a novel about a future human civilization living on Pluto.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pluto Weather Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts weather conditions on Pluto based on the input date using a pre-trained model.\\\",\\n\\\"function_name\\\": \\\"predict_pluto_weather\\\",\\n\\\"input_args\\\": \\\"date - A datetime.date object representing the date for which we want to predict the weather.\\\",\\n\\\"return\\\": \\\"A numpy array containing the prediction. The contents of this array will depend on how your model is trained.\\\",\\n\\\"depend\\\": \\\"Python libraries: tensorflow, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "an ardent fan of Sreelekha Mitra's acting career", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that provides movie recommendations for a given actor. It uses the TMDB API to get a list of movies that the actor starred in.\\\",\\n  \\\"function_name\\\": \\\"get_movies_by_actor_name\\\",\\n  \\\"input_args\\\": \\\"actor_name\\\",\\n  \\\"return\\\": \\\"List of movies that the actor starred in\\\",\\n  \\\"depend\\\": \\\"TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young Muslim woman who recently moved to the Netherlands and appreciates the retiree's kindness and acceptance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prayer Time Fetching Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the prayer times for a given city in the Netherlands for the entire month using the Aladhan API.\\\",\\n\\\"function_name\\\": \\\"get_prayer_times\\\",\\n\\\"input_args\\\": \\\"city - Name of the city in the Netherlands\\\",\\n\\\"return\\\": \\\"A json data structure containing the prayer times such as Fajr, Dhuhr, Asr, Maghrib, Isha for each day of the current month.\\\",\\n\\\"depend\\\": \\\"requests library, Aladhan API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional practitioner dismissing the importance of early diagnosis in developmental disorders", "synthesized text": "\"{\\n\\\"name\\\": \\\"Early Diagnosis of Developmental Disorders Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model to predict the likelihood of a developmental disorder based on a child's age, gender, and answers to specific questions.\\\",\\n\\\"function_name\\\": \\\"diagnose_developmental_disorder\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"gender\\\", \\\"answers\\\"],\\n\\\"return\\\": \\\"A probability score indicating the likelihood of a developmental disorder.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers, TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Google Ads certified expert who actively contributes to PHP developer forums and groups", "synthesized text": "\"{\\n\\\"name\\\": \\\"Google Ads Performance Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface fetches performance data for ad campaigns using the Google Ads API.\\\",\\n\\\"function_name\\\": \\\"fetch_campaign_performance_report\\\",\\n\\\"input_args\\\": [\\\"client\\\", \\\"customer_id\\\"],\\n\\\"return\\\": \\\"A list of dictionaries containing performance data for each ad campaign.\\\",\\n\\\"depend\\\": \\\"Google Ads API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a new engineer in the same team with Andrew D. Bowen", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses Yahoo Finance's API or Alpha Vantage's API to fetch historical stock price data, and then uses a pre-trained machine learning model from huggingface, such as GPT-3, to predict future stock prices.\\\",\\n\\\"function_name\\\": \\\"predict_stock_price\\\",\\n\\\"input_args\\\": [\\\"ticker\\\"],\\n\\\"return\\\": \\\"Predicted stock price\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"huggingface(transformers)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A computer scientist specializing in machine learning algorithms for haptic feedback systems", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Haptic Feedback Tuning\\\",\\n  \\\"description\\\": \\\"This interface allows users to train a machine learning model for haptic feedback systems. The user only needs to provide a path to a csv file containing the training data. The interface will return a trained RandomForestRegressor model.\\\",\\n  \\\"function_name\\\": \\\"tune_haptic_feedback\\\",\\n  \\\"input_args\\\": [\\n    \\\"path_to_csv\\\"\\n  ],\\n  \\\"return\\\": \\\"Trained RandomForestRegressor model\\\",\\n  \\\"depend\\\": [\\\"pandas\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a family man who lives in Clementi West", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Air Quality Index Interface\\\",\\n  \\\"description\\\": \\\"Provides the current Air Quality Index and health recommendations for a given location using the Breezometer API.\\\",\\n  \\\"function_name\\\": \\\"get_air_quality\\\",\\n  \\\"input_args\\\": [\\n    {\\n      \\\"location\\\": \\\"A list of two elements representing latitude and longitude respectively.\\\"\\n    }\\n  ],\\n  \\\"return\\\": [\\n    {\\n      \\\"air_quality_index\\\": \\\"The current Air Quality Index for the given location.\\\",\\n      \\\"health_recommendations\\\": \\\"Health recommendations based on the current air quality.\\\"\\n    }\\n  ],\\n  \\\"depend\\\": \\\"Breezometer API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single parent who also brings their children to the community garden, forming a support system with the stay-at-home parent", "synthesized text": "\"{\\n\\\"name\\\": \\\"Healthy Recipe Suggestion Interface\\\",\\n\\\"description\\\": \\\"An interface to suggest healthy recipes based on user-provided ingredients. It uses the Edamam's Recipe Search API to find recipes.\\\",\\n\\\"function_name\\\": \\\"get_healthy_recipe\\\",\\n\\\"input_args\\\": \\\"ingredients - A string of ingredients separated by commas.\\\",\\n\\\"return\\\": \\\"A dictionary containing the name, ingredients, calories, image url and recipe url of the suggested recipe.\\\",\\n\\\"depend\\\": \\\"Python's requests and json libraries, Edamam's Recipe Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research assistant studying the applications of data mining in text analysis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Clustering Interface\\\",\\n\\\"description\\\": \\\"An interface that clusters a list of texts into a specified number of groups using KMeans clustering and TF-IDF Vectorizer. It returns the cluster each text belongs to and the top 10 keywords for each cluster.\\\",\\n\\\"function_name\\\": \\\"text_clustering\\\", \\n\\\"input_args\\\": [\\\"input_texts: list of texts to be clustered\\\", \\\"n_clusters: number of clusters to form\\\"], \\n\\\"return\\\": \\\"A tuple of two lists. The first list contains the cluster number each text belongs to, and the second list contains the top 10 keywords for each cluster.\\\",\\n\\\"depend\\\": [\\\"Scikit-learn's KMeans clustering algorithm\\\", \\\"Scikit-learn's TF-IDF Vectorizer\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A graduate student conducting research on the impact of framing and anchoring biases on risk perception", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Survey Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface helps users analyze survey data related to framing and anchoring biases and their impact on risk perception. It reads in the csv file, calculates the mean risk perception for both biases, and creates a boxplot to visualize the data.\\\",\\n  \\\"function_name\\\": [\\\"read_data\\\", \\\"analyze_data\\\", \\\"visualize_data\\\"],\\n  \\\"input_args\\\": \\\"file_path\\\",\\n  \\\"return\\\": [\\\"framing_bias_mean, anchoring_bias_mean\\\", \\\"Boxplot visual\\\"],\\n  \\\"depend\\\": [\\\"pandas\\\", \\\"seaborn\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A student pilot from United States", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Weather Report Interface\\\",\\n\\\"description\\\": \\\"This interface gets METAR weather reports for a specific airport using the Aviation Weather Center's API. The user inputs the ICAO code of the airport and receives the METAR report.\\\",\\n\\\"function_name\\\": \\\"get_metar_report\\\",\\n\\\"input_args\\\": [\\\"icao_code\\\"],\\n\\\"return\\\": \\\"METAR report as a string\\\",\\n\\\"depend\\\": \\\"requests library, Aviation Weather Center API, and a large language model to process the XML data\\\"\\n}\"", "description": "tool development"}
{"input persona": "a descendant of enslaved Africans forced to work on sugar plantations in the Danish West Indies", "synthesized text": "\"{\\n    \\\"ancestry\\\": {\\n        \\\"African\\\": {\\n            \\\"West_African\\\": \\\"50%\\\",\\n            \\\"Central_African\\\": \\\"25%\\\",\\n            \\\"North_African\\\": \\\"10%\\\",\\n            \\\"East_African\\\": \\\"5%\\\",\\n            \\\"South_African\\\": \\\"5%\\\",\\n            \\\"Other_African\\\": \\\"5%\\\"\\n        },\\n        \\\"European\\\": {\\n            \\\"Scandinavian\\\": \\\"40%\\\",\\n            \\\"Iberian\\\": \\\"15%\\\",\\n            \\\"British\\\": \\\"20%\\\",\\n            \\\"Irish\\\": \\\"15%\\\",\\n            \\\"Eastern_European\\\": \\\"5%\\\",\\n            \\\"Italian\\\": \\\"5%\\\"\\n        },\\n        \\\"Other\\\": \\\"10%\\\"\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A small-town mayor, benefiting from the visual aids for their local awareness drives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Visualization Interface\\\", \\n\\\"description\\\": \\\"This interface creates a plot based on the data in a csv file. The user needs to specify the csv file path and the column names for the x-axis and y-axis.\\\", \\n\\\"function_name\\\": \\\"create_plot\\\", \\n\\\"input_args\\\": [\\\"csv_file_path\\\", \\\"x_axis\\\", \\\"y_axis\\\"], \\n\\\"return\\\": \\\"A plot is displayed based on the input data.\\\", \\n\\\"depend\\\": \\\"Python's pandas and matplotlib libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservative rugby coach who emphasizes defensive strategies and structured gameplay", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Rugby Strategy Analyzer Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the Ball Tracking and Identification System (BTIS) model to analyze the strategies used in a rugby match. The user inputs the path to a video file of the match, and the interface returns a report detailing the offensive and defensive strategies used in the match.\\\",\\n  \\\"function_name\\\": \\\"analyze_strategies\\\",\\n  \\\"input_args\\\": \\\"path_to_video\\\",\\n  \\\"return\\\": \\\"strategies_report\\\",\\n  \\\"depend\\\": \\\"cv2, BTIS\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a very curious high school student living in El Paso, Texas, who dreams of becoming an engineer.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physics Equation Solver Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to solve physics equations. Users input their equation as a string, and the interface returns the solution of the equation.\\\",\\n\\\"function_name\\\": \\\"solve_physics_equation\\\",\\n\\\"input_args\\\": {\\n    \\\"equation\\\": \\\"A string representing the physics equation. The equation should be written in Python syntax, with the sympy.Eq function used to represent equality. For example, 'Eq(m * a, F)' represents the equation F = ma.\\\",\\n    \\\"variable_to_solve\\\": \\\"A string representing the variable to solve for in the equation. For example, 'a' to solve for acceleration in the equation F = ma.\\\"\\n},\\n\\\"return\\\": \\\"The solution of the equation, represented as a list. If there are multiple solutions, all will be included in the list.\\\",\\n\\\"depend\\\": \\\"Python Sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A full-time homemaker always concerned about their children's growth and mental well-being", "synthesized text": "\"{\\n\\\"name\\\": \\\"Children Mood Detection Interface\\\",\\n\\\"description\\\": \\\"This interface takes a string of text as input and returns the mood detected in the text. It can be useful for parents to understand their children's mood through their diary entries or social media posts.\\\",\\n\\\"function_name\\\": \\\"detect_child_mood\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"Mood (String: 'POSITIVE' or 'NEGATIVE')\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A healthcare regulator responsible for ensuring the safety and efficacy of pain medications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Interaction Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks for any known interactions between two given drugs. It leverages the DrugBank API to retrieve this information.\\\",\\n\\\"function_name\\\": \\\"check_drug_interaction\\\",\\n\\\"input_args\\\": {\\n    \\\"drug1\\\": \\\"The DrugBank ID of the first drug\\\",\\n    \\\"drug2\\\": \\\"The DrugBank ID of the second drug\\\"\\n},\\n\\\"return\\\": \\\"A description of the known interaction between the two drugs, or a message stating that there are no known interactions if none are found.\\\",\\n\\\"depend\\\": \\\"This function depends on the requests Python library and the DrugBank API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A music store owner with in-depth knowledge about the latest recording devices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get music recommendations based on a seed (an artist, genre, or track). It uses the Spotify Web API to fetch the recommendations.\\\",\\n\\\"function_name\\\": \\\"get_music_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"seed\\\": \\\"A string representing the seed (artist, genre, or track) for the recommendations.\\\",\\n    \\\"seed_type\\\": \\\"A string indicating the type of the seed ('artist', 'genre', 'track').\\\",\\n    \\\"client_id\\\": \\\"A string representing the client ID for the Spotify API.\\\",\\n    \\\"client_secret\\\": \\\"A string representing the client secret for the Spotify API.\\\"\\n},\\n\\\"return\\\": \\\"A list of strings, where each string is the name of a recommended track.\\\",\\n\\\"depend\\\": \\\"Python's requests library, Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A programming tutor explaining game development to beginners", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Assets Preparation Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of preparing game assets by resizing and saving images in the desired format.\\\",\\n\\\"function_name\\\": \\\"prepare_game_asset\\\",\\n\\\"input_args\\\": {\\n    \\\"input_path\\\": \\\"path to the input image file\\\",\\n    \\\"output_path\\\": \\\"path to the output image file\\\",\\n    \\\"size\\\": \\\"desired dimensions of the output image\\\",\\n    \\\"format\\\": \\\"desired format of the output image (default is 'PNG')\\\"\\n},\\n\\\"return\\\": \\\"Path to the modified image file\\\",\\n\\\"depend\\\": \\\"Pillow library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A University of Wisconsin System administrator who deals with human resources and faculty affairs.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Faculty Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and returns the information of a faculty member when provided with the faculty ID.\\\",\\n\\\"function_name\\\": \\\"get_faculty_info\\\",\\n\\\"input_args\\\": \\\"faculty_id\\\",\\n\\\"return\\\": \\\"A dictionary containing the faculty member's details such as name, department, position, etc. If no data is found for the provided ID, it returns a string stating 'No data found for the provided ID'.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, requests. Web APIs: University's faculty information API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An anonymous whistleblower working within a major polluting corporation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Anonymization Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a path to a text file and returns an anonymized version of the document, which is saved to a new file.\\\",\\n\\\"function_name\\\": \\\"anonymize_document\\\",\\n\\\"input_args\\\": \\\"file_path - The path to the text file that needs to be anonymized.\\\",\\n\\\"return\\\": \\\"Path to the anonymized document.\\\",\\n\\\"depend\\\": \\\"Leverages the 'spaCy' Python library for named entity recognition to identify and replace all personal information in a text document.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a rabbi who appreciates accuracy and thoroughness in religious matters", "synthesized text": "\"{\\n  \\\"name\\\":\\\"Hebrew Text Analyzer Interface\\\",\\n  \\\"description\\\":\\\"An interface that utilizes the Sefaria API to extract a specific Hebrew text and applies BERT model from HuggingFace to analyze the text and extract key components.\\\",\\n  \\\"function_name\\\":\\\"analyze_text\\\",\\n  \\\"input_args\\\": {\\n    \\\"title\\\": \\\"The title of a Jewish text\\\"\\n  },\\n  \\\"return\\\": \\\"A tensor containing the last hidden states from the BERT model which represents the deep understanding of the Hebrew text.\\\",\\n  \\\"depend\\\": {\\n    \\\"Web APIs\\\": [\\\"Sefaria API\\\"],\\n    \\\"Python libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n    \\\"Machine Learning Models\\\": [\\\"BERT model from HuggingFace\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a British social housing tenant who has been repeatedly asking her landlord to fix the dampness issue at her flat.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Housing Complaint Form Generator Interface\\\",\\n\\\"description\\\": \\\"An interface to automatically generate a formal complaint form for housing issues. Users input their name, address, landlord's name, and the specific issue they're facing, and the interface returns a PDF file of the complaint form.\\\",\\n\\\"function_name\\\": \\\"create_complaint_form\\\",\\n\\\"input_args\\\": [\\\"tenant_name\\\", \\\"tenant_address\\\", \\\"landlord_name\\\", \\\"issue\\\"],\\n\\\"return\\\": \\\"Path to the generated complaint form PDF file.\\\",\\n\\\"depend\\\": \\\"Python library: FPDF\\\"\\n}\"", "description": "tool development"}
{"input persona": "a devoted fan of chess and Renata Turauskienė", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chess Game Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the python-chess library to analyze a chess game given a PGN file. It returns the game details including the headers, moves, and the final game result.\\\",\\n\\\"function_name\\\": \\\"analyze_chess_game\\\",\\n\\\"input_args\\\": [\\\"path_to_pgn\\\"],\\n\\\"return\\\": \\\"A dictionary containing the game headers, moves, and the final result.\\\",\\n\\\"depend\\\": \\\"python-chess library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservative radio show host who staunchly defends their creationist beliefs against scientific evidence", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Fact Checking Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Search API, Wikipedia API, and a pre-trained BERT model from Hugging Face to perform real-time fact checking. It takes as input a claim and returns a fact check feedback along with the sources used for verification.\\\",\\n\\\"function_name\\\": \\\"fact_check\\\",\\n\\\"input_args\\\": \\\"claim - A string representing the statement or claim to fact check.\\\",\\n\\\"return\\\": \\\"A tuple. The first element is a string ('True' or 'False') representing the fact check result. The second and third elements are the sources used for verification from Google Search and Wikipedia, respectively.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, torch, transformers. Web APIs: Google Search API, Wikipedia API. Machine Learning models: BertForSequenceClassification from Hugging Face.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a polar bear living in the melting Arctic, deeply affected by climate change.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ice Melting Prediction Interface\\\",\\n\\\"description\\\": \\\"Predict the ice surface area for the next month based on the current date.\\\",\\n\\\"function_name\\\": \\\"predict_ice_melt\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_model\\\": \\\"Path to the trained PyTorch model.\\\",\\n    \\\"current_date\\\": \\\"Current date in 'YYYY-MM-DD' format.\\\"\\n},\\n\\\"return\\\": \\\"Predicted ice surface area for the next month.\\\",\\n\\\"depend\\\": \\\"PyTorch, pandas, datetime\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bullet journal enthusiast who shares tips and tricks for staying organized", "synthesized text": "\"{\\n\\\"name\\\": \\\"Task Management Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to manage their tasks directly from the application. Users only need to input the task details, and our interface will add the task to their Todoist task list.\\\",\\n\\\"function_name\\\": \\\"add_task_to_todoist\\\",\\n\\\"input_args\\\": {\\n    \\\"task\\\": \\\"string representing the task to be added\\\",\\n    \\\"due_date\\\": \\\"string representing the due date of the task\\\",\\n    \\\"priority\\\": \\\"integer representing the priority of the task\\\"\\n},\\n\\\"return\\\": \\\"string indicating if the task was added successfully or not\\\",\\n\\\"depend\\\": \\\"Todoist API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high-profile politician seeking guidance on improving personal security measures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Recognition Interface\\\",\\n\\\"description\\\": \\\"Identify whether the input image contains the user's face by comparing it with a database of known images\\\",\\n\\\"function_name\\\": \\\"is_face_in_images\\\",\\n\\\"input_args\\\": [\\\"images_directory\\\", \\\"img_to_identify\\\"],\\n\\\"return\\\": \\\"Boolean indicating whether the face is recognized\\\",\\n\\\"depend\\\": [\\\"dlib\\\", \\\"skimage\\\", \\\"os\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a geneticist who idolized Bruce Cattanach", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a DNA sequence and returns its complement, reverse complement, transcription, and translation.\\\",\\n\\\"function_name\\\": \\\"analyze_dna_sequence\\\",\\n\\\"input_args\\\": {\\n    \\\"dna_sequence\\\": \\\"A string that represents a DNA sequence\\\"\\n},\\n\\\"return\\\": {\\n    \\\"complement\\\": \\\"The complement of the DNA sequence\\\",\\n    \\\"reverse_complement\\\": \\\"The reverse complement of the DNA sequence\\\",\\n    \\\"rna\\\": \\\"The transcription of the DNA sequence to RNA\\\",\\n    \\\"protein\\\": \\\"The translation of the RNA to a protein sequence\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"Bio.Seq\\\", \\\"Bio.Alphabet.IUPAC\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "a former student of Pells CE Primary School", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Classmate Finder Interface\\\",\\n  \\\"description\\\": \\\"Interface to find classmates from Pells CE Primary School using LinkedIn's API.\\\",\\n  \\\"function_name\\\": \\\"get_classmates_from_linkedin\\\",\\n  \\\"input_args\\\": \\\"year_graduated\\\",\\n  \\\"return\\\": \\\"A list of classmates' names.\\\",\\n  \\\"depend\\\": \\\"LinkedIn's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data engineering professional who seeks advice on optimizing Hadoop clusters", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hadoop Cluster Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Huggingface to predict the optimum configuration for a Hadoop cluster based on current configuration.\\\",\\n\\\"function_name\\\": \\\"predict_optimum_configuration\\\",\\n\\\"input_args\\\": {\\\"cluster_configuration_dict\\\": \\\"A dictionary containing the current Hadoop cluster configuration details.\\\"},\\n\\\"return\\\": \\\"The optimized configuration for the Hadoop cluster.\\\",\\n\\\"depend\\\": \\\"Huggingface transformers, PyTorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local hockey fan from Tampa Bay whose life revolves around watching the Lightning play", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hockey Game Update Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get the most recent game's results and statistics of their favorite hockey team by simply inputting the team name.\\\",\\n\\\"function_name\\\": \\\"get_hockey_game_update\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'opposing_team', 'date', 'result', 'statistics' representing the opposing team's name, date of the game, result of the game, and statistics of the game, respectively.\\\",\\n\\\"depend\\\": \\\"Python's requests library and TheSportsDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tech entrepreneur in the process of developing a new electronic device that requires custom device drivers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Device Driver Code Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates template code for a Linux USB device driver based on user-provided device specifications.\\\",\\n\\\"function_name\\\": \\\"generate_driver_code\\\",\\n\\\"input_args\\\": {\\n    \\\"device_specs\\\": \\\"A dictionary containing device specifications such as number of ports, data rate, vendor id, product id, etc. For example: {'device_name': 'my_device', 'num_ports': 4, 'vendor_id': 'abcd', 'product_id': 'efgh'}\\\"\\n},\\n\\\"return\\\": \\\"A string containing the generated device driver code.\\\",\\n\\\"depend\\\": \\\"Python Cog library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of a sports science association who regularly attends the professor's lectures and workshops", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Performance Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the type of sport, the athlete's information, and the corresponding historical data, and returns the predicted performance of the athlete.\\\",\\n\\\"function_name\\\": \\\"predict_sports_performance\\\",\\n\\\"input_args\\\": [\\\"sport_type\\\", \\\"athlete_info\\\", \\\"historical_data\\\"],\\n\\\"return\\\": \\\"A list of probabilities representing the predicted performance of the athlete.\\\",\\n\\\"depend\\\": [\\\"huggingface: distilbert-base-uncased-finetuned-sst-2-english\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Motivated Athlete Training for the Bocce Islamic Solidarity Games", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bocce Ball Score Prediction Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a machine learning model to predict the possible score of a Bocce Ball game based on various game parameters.\\\",\\n  \\\"function_name\\\": \\\"predict_bocce_score\\\",\\n  \\\"input_args\\\": \\\"game_parameters - a string representing the current state of the game, including factors such as the current score, the positions of the balls, the player's physical state, etc.\\\",\\n  \\\"return\\\": \\\"predicted_score - the predicted score of the Bocce Ball game.\\\",\\n  \\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A student studying Petroleum Engineering", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rock Porosity Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates the porosity of rock samples using the bulk and grain volume measurements\\\",\\n\\\"function_name\\\": \\\"calculate_porosity\\\",\\n\\\"input_args\\\": {\\n\\\"bulk_volume\\\": \\\"The total volume of the rock sample, including the pores and grains\\\",\\n\\\"grain_volume\\\": \\\"The volume of the rock grains, excluding the pores\\\"\\n},\\n\\\"return\\\": \\\"The porosity of the rock sample, represented as a decimal between 0 and 1\\\",\\n\\\"depend\\\": \\\"numpy, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A coordinator of community fitness events, such as marathons and group workouts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenWeatherMap API to provide weather forecasts for outdoor events. The user only needs to provide the location and date of the event, and the interface will return the weather forecast for that day.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\n    \\\"event_location\\\": \\\"The location of the event. This can be a city name, a city name and country code (e.g. 'London, UK'), or a specific address.\\\",\\n    \\\"event_date\\\": \\\"The date of the event, in the format 'YYYY-MM-DD'.\\\"\\n},\\n\\\"return\\\": \\\"A string describing the weather forecast for the provided location and date.\\\",\\n\\\"depend\\\": \\\"requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An operations manager at a manufacturing company looking to streamline user access control", "synthesized text": "\"{\\n\\\"name\\\": \\\"User Access Control Interface\\\",\\n\\\"description\\\": \\\"An interface to manage user access to various company systems using Google Admin SDK Directory API.\\\",\\n\\\"function_name\\\": \\\"manage_user_access\\\",\\n\\\"input_args\\\": [\\\"user_email\\\", \\\"system_name\\\", \\\"grant_access\\\"],\\n\\\"return\\\": \\\"None. The function performs an action and does not return any value.\\\",\\n\\\"depend\\\": [\\\"Google Admin SDK Directory API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a health IT (Information Technology) consultant who is optimistic about the future of EHR (Electronic Health Record) systems.", "synthesized text": "\"{\\n\\\"name\\\": \\\"EHR Data Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to fetch EHR data from an EHR system. Input the patient ID and type of medical record, and get the requested data.\\\",\\n\\\"function_name\\\": \\\"get_ehr_data\\\",\\n\\\"input_args\\\": [\\\"patient_id\\\", \\\"record_type\\\"],\\n\\\"return\\\": \\\"Requested EHR data in JSON format\\\",\\n\\\"depend\\\": [\\\"requests library, EHR System API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a software engineer who has some experience with Python and NumPy, but hasn't used numba before.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Numba Accelerated Function Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a Python function and returns a Numba accelerated version of that function. This can potentially speed up the execution of the function.\\\",\\n\\\"function_name\\\": \\\"numba_accelerate\\\",\\n\\\"input_args\\\": \\\"func - A Python function\\\",\\n\\\"return\\\": \\\"A Numba accelerated version of the input function\\\",\\n\\\"depend\\\": \\\"Numba library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A close friend of Herbert 'Herb' Soukup", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sentence Similarity Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from HuggingFace to calculate the similarity between two sentences. It helps in identifying if two pieces of text convey the same meaning. The user inputs two sentences and the interface returns a similarity score between 0 and 1.\\\",\\n\\\"function_name\\\": \\\"calculate_similarity\\\",\\n\\\"input_args\\\": [\\\"sentence1\\\", \\\"sentence2\\\"],\\n\\\"return\\\": \\\"A similarity score between 0 and 1\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers Library, PyTorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A junior AI researcher inspired by Barbara Hayes-Roth's work.", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI Model Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies AI model evaluation. It takes ground-truth labels and model predictions as input, and returns key evaluation metrics like accuracy, precision, recall, and F1-score.\\\",\\n\\\"function_name\\\": \\\"evaluate_ai_model\\\",\\n\\\"input_args\\\": {\\n    \\\"y_true\\\": \\\"Ground truth (correct) target values\\\",\\n    \\\"y_pred\\\": \\\"Estimated targets as returned by a classifier\\\"\\n},\\n\\\"return\\\": {\\n    \\\"accuracy\\\": \\\"Accuracy of the model\\\",\\n    \\\"precision\\\": \\\"Weighted precision of the model\\\",\\n    \\\"recall\\\": \\\"Weighted recall of the model\\\",\\n    \\\"f1_score\\\": \\\"Weighted F1 score of the model\\\"\\n},\\n\\\"depend\\\": \\\"scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another young artist who collaborates with the young artist on various projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Color Palette Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the dominant colors from an artwork image file using OpenCV and k-means clustering. The user inputs the path to an image file and the number of colors to extract, and the interface returns a list of the dominant colors in RGB format.\\\",\\n\\\"function_name\\\": \\\"extract_color_palette\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"num_colors\\\"],\\n\\\"return\\\": \\\"List of dominant colors in RGB format\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\", \\\"sklearn.cluster.KMeans\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A programmer responsible for developing tools and features to enhance the moderation process", "synthesized text": "\"{\\n\\\"name\\\": \\\"Content Moderation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Perspective API to determine the toxicity score of a text. The higher the score, the more toxic the text is considered.\\\",\\n\\\"function_name\\\": \\\"get_toxicity_score\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"A toxicity score between 0 and 1. The higher the score, the more toxic the text is.\\\",\\n\\\"depend\\\": \\\"Perspective API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A baby boomer who grew up during the cold war in the United States.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Nuclear Test Timeline Interface\\\",\\n  \\\"description\\\": \\\"This interface provides a timeline of nuclear tests conducted by the United States within a specified period.\\\",\\n  \\\"function_name\\\": \\\"get_nuclear_tests_timeline\\\",\\n  \\\"input_args\\\": [\\\"start_year\\\", \\\"end_year\\\"],\\n  \\\"return\\\": \\\"A dictionary where the keys are years and the values are lists of nuclear tests conducted in those years.\\\",\\n  \\\"depend\\\": \\\"CTBTO Preparatory Commission API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software developer specializing in Discord bot development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Discord Bot Command Interface\\\",\\n\\\"description\\\": \\\"An interface to add new commands to a Discord bot. User inputs a bot token, a command name, and a command response. The function handles the addition of the new command to the bot.\\\",\\n\\\"function_name\\\": \\\"add_bot_command\\\",\\n\\\"input_args\\\": [\\\"bot_token\\\", \\\"command_name\\\", \\\"command_response\\\"],\\n\\\"return\\\": \\\"None, the function modifies the behavior of the Discord bot by adding a new command to it.\\\",\\n\\\"depend\\\": \\\"Discord API, discord Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A behavioral analyst in the cybercrime unit who observes patterns and helps to form suspect profiles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cybercrime Suspect Profile Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts a likely suspect profile based on the given patterns of cybercrime behavior. The model used is trained on a dataset of cybercriminal behaviors.\\\",\\n\\\"function_name\\\": \\\"predict_suspect_profile\\\",\\n\\\"input_args\\\": \\\"patterns - A string describing the observed patterns of behavior\\\",\\n\\\"return\\\": \\\"A list of possible suspect profiles based on the observed behavior patterns\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformer library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an artistic quilter from rural Vermont who is inclined to natural themes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pattern Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained VGG16 model to find similar patterns in a large collection of quilting images.\\\",\\n\\\"function_name\\\": \\\"find_similar_images\\\",\\n\\\"input_args\\\": {\\\"input_img_path\\\": \\\"The path to the input image file\\\", \\\"img_dir\\\": \\\"The directory where other images are stored\\\"},\\n\\\"return\\\": \\\"A list of paths to similar images\\\",\\n\\\"depend\\\": \\\"Keras, numpy, sklearn, os\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concerned Brazilian citizen deeply affected by the loss of life due to irresponsible behaviors and corruption", "synthesized text": "\"{\\n\\\"name\\\": \\\"Corruption Related News Identification Interface\\\",\\n\\\"description\\\": \\\"Identifies if the input news article is related to corruption or not using a pre-trained BERT model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"is_corruption_related_news\\\",\\n\\\"input_args\\\": \\\"news_article - String containing the news article\\\",\\n\\\"return\\\": \\\"String - 'corruption' if the news article is related to corruption, 'not corruption' otherwise\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a non-political freshman student at the University of Buenos Aires", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google's translation API to translate a given text into a specified language.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"text\\\": \\\"The text you want to translate.\\\",\\n    \\\"dest_language\\\": \\\"The language code you want to translate the text into. For example, 'es' for Spanish, 'en' for English, and so on.\\\"\\n    },\\n\\\"return\\\": \\\"The translated text.\\\",\\n\\\"depend\\\": \\\"Google's translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A political reporter who investigates the consequences of nationalized healthcare on different countries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Healthcare Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches health and population data from the World Bank API for a list of countries, visualizes the data using Matplotlib, and allows users to easily compare the healthcare systems of different countries.\\\",\\n\\\"function_name\\\": \\\"analyze_healthcare\\\",\\n\\\"input_args\\\": [\\\"countries - a list of country names\\\"],\\n\\\"return\\\": \\\"Line plots for each health and population indicator over time for each country.\\\",\\n\\\"depend\\\": \\\"This function relies on the 'requests', 'pandas', and 'matplotlib' Python libraries, and the World Bank API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager with extensive experience in coordinating interstate software development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Progress Tracking Interface\\\",\\n\\\"description\\\": \\\"This interface is used to track the progress of a software project. It returns the total number of tasks, the number of completed tasks, and the percentage of completion.\\\",\\n\\\"function_name\\\": \\\"get_project_progress\\\",\\n\\\"input_args\\\": {\\n  \\\"project_id\\\": \\\"The ID of the project to track progress.\\\"\\n},\\n\\\"return\\\": {\\n  \\\"total_tasks\\\": \\\"The total number of tasks in the project.\\\",\\n  \\\"completed_tasks\\\": \\\"The number of tasks that have been completed.\\\",\\n  \\\"completion_percentage\\\": \\\"The percentage of the project that has been completed.\\\"\\n},\\n\\\"depend\\\": \\\"Web API: Trello API\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a public health professional who focuses on health policy, this piece deeply piqued my curiosity. As an advocate for policies that promote and protect public health, I see both the successes and challenges experienced in different countries regarding tobacco and alcohol control. It is clear that public health policies significantly vary around the globe, influenced by diverse geopolitical, social, and economic factors.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alcohol and Tobacco Policy Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the World Health Organization's APIs to analyse the effects of various policies on alcohol and tobacco consumption in different countries.\\\",\\n\\\"function_name\\\": \\\"get_who_data\\\",\\n\\\"input_args\\\": [\\\"country_code\\\", \\\"policy_name\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"DataFrame containing the country, year, policy, and value of the policy for the given inputs.\\\",\\n\\\"depend\\\": \\\"requests, pandas, WHO API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A touring musician always interested in what attracts and retains their fan base", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fanbase Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches data about a musician's top tracks on Spotify, their popularity, and the regions where they are most listened to. This gives the musician an understanding of which of their songs are most popular and where their fanbase is located.\\\",\\n\\\"function_name\\\": \\\"fanbase_analysis\\\",\\n\\\"input_args\\\": [\\\"spotify_user_id\\\", \\\"client_id\\\", \\\"client_secret\\\"],\\n\\\"return\\\": \\\"A dictionary where each key is the name of a top track. The value for each key is another dictionary with two keys: 'popularity', which has an integer value representing the track's popularity; and 'regions', which has a list value containing the regions where the track is available.\\\",\\n\\\"depend\\\": \\\"Python's requests library for making HTTP requests, Python's base64 library for encoding the client_id and client_secret, and the Spotify Web API for fetching data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A customer service representative for the Google Cloud Build GitHub app", "synthesized text": "\"{\\n  \\\"name\\\": \\\"GitHub Repository Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the GitHub's API to retrieve information about a repository's activity, such as the number of commits, the number of contributors, and the number of branches.\\\",\\n  \\\"function_name\\\": \\\"get_repo_info\\\",\\n  \\\"input_args\\\": [\\\"user\\\", \\\"repo\\\"],\\n  \\\"return\\\": {\\\"commits\\\": \\\"number of commits\\\", \\\"contributors\\\": \\\"number of contributors\\\", \\\"branches\\\": \\\"number of branches\\\"},\\n  \\\"depend\\\": [\\\"requests\\\", \\\"GitHub API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An educational administrator who recognizes the teacher's contributions in instilling discipline and responsibility through proper instrument care", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Instrument Maintenance Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface allows to track the maintenance history of each musical instrument in a school. It can store and retrieve the maintenance history of an instrument.\\\",\\n\\\"function_name\\\": [\\\"add_maintenance_record\\\", \\\"get_maintenance_history\\\"],\\n\\\"input_args\\\": [[\\\"id\\\", \\\"instrument_id\\\", \\\"maintenance_action\\\", \\\"date\\\"], [\\\"instrument_id\\\"]],\\n\\\"return\\\": [[\\\"Record creation status\\\"], [\\\"Maintenance history records\\\"]],\\n\\\"depend\\\": [\\\"sqlite3\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired school librarian who knows little about traffic laws and has never had a driving violation.", "synthesized text": "\"{\\n\\\"name\\\" : \\\"Traffic Violation Laws Search Interface\\\",\\n\\\"description\\\" : \\\"An interface for fetching information about specific traffic laws in a certain location. The user inputs their location and the specific traffic law they are interested in, and the interface returns a brief description of the relevant laws in their area.\\\",\\n\\\"function_name\\\" : \\\"get_traffic_laws\\\",\\n\\\"input_args\\\" : \\\"location, law\\\",\\n\\\"return\\\" : \\\"A string that is a brief description of the relevant traffic laws in the user's area.\\\",\\n\\\"depend\\\" : \\\"Web API from legal-database.com\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Australian firefighter who has been battling the ongoing fires for several months.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wildfire Risk Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts the risk of a wildfire occurring based on environmental conditions.\\\",\\n\\\"function_name\\\": \\\"predict_risk\\\",\\n\\\"input_args\\\": {\\n    \\\"temp\\\": \\\"The current temperature in degrees Celsius.\\\",\\n    \\\"humidity\\\": \\\"The current humidity level in percentage.\\\",\\n    \\\"wind_speed\\\": \\\"The current wind speed in km/h.\\\"\\n},\\n\\\"return\\\": \\\"A risk score predicting the likelihood of a wildfire occurrence.\\\",\\n\\\"depend\\\": \\\"A pre-trained RandomForestRegressor model from the Scikit-learn library, Numpy, and Pandas.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Charlie is a young aspiring writer with a vivid imagination and a natural gift for storytelling. They look up to the published author as a mentor and seek their guidance in honing their craft and navigating the publishing industry.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a piece of text as input and returns the Flesch Reading Ease score, the Gunning Fog Index, and the number of difficult words in the text. These metrics can help a writer understand the complexity of their writing and adjust it accordingly to their target audience.\\\",\\n\\\"function_name\\\": \\\"analyze_text_complexity\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"A dictionary with the total number of words, number of difficult words, Flesch Reading Ease score, and Gunning Fog Index.\\\",\\n\\\"depend\\\": \\\"nltk, textstat\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young aspiring scientist who is eager to combine their love for physics and botany in their research", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Plant Growth Simulation Interface\\\",\\n  \\\"description\\\": \\\"This interface simulates the growth of a plant in a given physical environment. It uses a physics engine to simulate the environment and a machine learning model to predict plant growth.\\\",\\n  \\\"function_name\\\": \\\"simulate_plant_growth\\\",\\n  \\\"input_args\\\": {\\n    \\\"plant_type\\\": \\\"The type of the plant to grow. This should be a string that corresponds to a type recognized by the machine learning model.\\\",\\n    \\\"sunlight\\\": \\\"The intensity of the sunlight in the environment. This should be a float.\\\",\\n    \\\"wind\\\": \\\"The speed of the wind in the environment. This should be a float.\\\",\\n    \\\"temperature\\\": \\\"The temperature of the environment. This should be a float.\\\"\\n  },\\n  \\\"return\\\": \\\"A string indicating that the simulation has completed. The actual plant growth can be observed in the PyBullet viewer.\\\",\\n  \\\"depend\\\": \\\"This function leverages the PyBullet physics engine and a hypothetical TensorFlow Hub model for plant growth prediction.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history professor who shares fascinating facts about Mayan civilization on social media", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Caption Generator Interface\\\",\\n\\\"description\\\": \\\"Generates informative captions for images related to the Mayan civilization.\\\",\\n\\\"function_name\\\": \\\"get_image_description\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"caption\\\",\\n\\\"depend\\\": \\\"Hugging Face's 'facebook/bart-large-cnn' model, Python's PIL and requests libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional athlete training for the Olympic Games, with no time for music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Running Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes the distance and time of a user's recent run to recommend a Spotify playlist with songs that match the user's running pace.\\\",\\n\\\"function_name\\\": \\\"recommend_running_music\\\",\\n\\\"input_args\\\": {\\n    \\\"distance_km\\\": \\\"The distance of the run in kilometers.\\\",\\n    \\\"time_min\\\": \\\"The time of the run in minutes.\\\"\\n},\\n\\\"return\\\": \\\"A URL to a Spotify playlist that matches the user's running pace, or a message indicating that no suitable tracks were found.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"spotipy\\\", \\\"Spotify Web API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A military strategy expert hosting a popular podcast that delves into the intricacies of famous battles and campaigns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Battle Info Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Wikipedia API to extract information about famous battles and campaigns.\\\",\\n\\\"function_name\\\": \\\"get_battle_info\\\",\\n\\\"input_args\\\": \\\"battle_name - The name of the battle to extract information about.\\\",\\n\\\"return\\\": \\\"A string containing a summary of the battle from Wikipedia, or a message saying no information was found if the battle does not exist on Wikipedia.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An architect consulted for designing the exhibition spaces and ensuring optimal lighting and display conditions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Optimal Lighting Design Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates the optimal lighting for a given space. The user inputs the dimensions of the space, the total wattage of the light sources, and the desired lux level for the space. The interface returns the best distribution of lights in the space.\\\",\\n\\\"function_name\\\": \\\"calculate_optimal_lighting\\\",\\n\\\"input_args\\\": [\\\"length\\\", \\\"width\\\", \\\"height\\\", \\\"total_wattage\\\", \\\"desired_lux\\\"],\\n\\\"return\\\": \\\"A distribution of light that ensures optimal lighting conditions for the exhibition space.\\\",\\n\\\"depend\\\": \\\"Luxpy Python Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Um coordenador de curso de Tecnologia da Informação que organiza workshops e parcerias com empresas de tecnologia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface de Busca de Empresas de Tecnologia\\\",\\n\\\"description\\\": \\\"Esta interface retorna uma lista de empresas de tecnologia em uma localiza\\u00e7\\u00e3o espec\\u00edfica usando a API do LinkedIn.\\\",\\n\\\"function_name\\\": \\\"get_tech_companies\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"List of nearby technology companies\\\",\\n\\\"depend\\\": \\\"requests library, LinkedIn API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rising star in the political sphere who aspires to make a positive impact on the economy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Indicator Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches the latest data for a given economic indicator (like GDP, unemployment rate, or inflation rate) and provides a simple analysis of the trend.\\\",\\n\\\"function_name\\\": \\\"get_economic_indicator_trend\\\",\\n\\\"input_args\\\": \\\"indicator_name\\\",\\n\\\"return\\\": \\\"A string that describes the trend of the given economic indicator.\\\",\\n\\\"depend\\\": \\\"requests, pandas, sklearn.linear_model.LinearRegression, Federal Reserve Bank of St. Louis's FRED API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A clarinet player with ophidiophobia (fear of snakes)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Snake Identification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a TensorFlow Hub model to identify if an image contains a snake and what type of snake it is. This is useful for users with ophidiophobia who might encounter snake images.\\\",\\n\\\"function_name\\\": \\\"identify_snake\\\",\\n\\\"input_args\\\": \\\"path_to_img - Path to the image file\\\",\\n\\\"return\\\": \\\"A tuple where the first element is a boolean indicating if a snake is present in the image and the second element is the type of snake if a snake is present. Returns (False, None) if no snake is detected.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and a pre-trained model for snake identification from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cynical London taxi driver who resents additional regulations and expenses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fuel Consumption Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface helps to track and analyze the fuel consumption and associated cost based on the input of odometer reading, fuel filled, and cost per unit of fuel.\\\",\\n\\\"function_name\\\": [\\\"update_data\\\", \\\"get_stats\\\"],\\n\\\"input_args\\\": [\\\"self\\\", \\\"odometer_reading\\\", \\\"fuel_filled\\\", \\\"cost_per_unit\\\"],\\n\\\"return\\\": [\\\"DataFrame with updated data\\\", \\\"Tuple with total distance, total fuel, average fuel consumption, total cost\\\"],\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Yemeni mother with a son in the Houthi militia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Terrorist Organization Member Verification Interface\\\",\\n\\\"description\\\": \\\"This interface checks if a person is a known or suspected member of a terrorist organization by leveraging an API from government or international organization databases.\\\",\\n\\\"function_name\\\": \\\"is_person_a_terrorist\\\",\\n\\\"input_args\\\": \\\"name\\\",\\n\\\"return\\\": \\\"Boolean value indicating if the person is a known or suspected member of a terrorist organization.\\\",\\n\\\"depend\\\": \\\"requests library, Terrorist Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A neighboring prince who successfully implemented modernization in his own kingdom and offers guidance and support", "synthesized text": "\"{\\n\\\"name\\\": \\\"Modernization Indicator Interface\\\",\\n\\\"description\\\": \\\"This interface fetches data from World Bank API based on user input for country and modernization indicator. It simplifies the process of accessing and gathering data on various indicators of modernization such as GDP, literacy rate, healthcare access, etc.\\\",\\n\\\"function_name\\\": \\\"get_modernization_indicator\\\",\\n\\\"input_args\\\": {\\n    \\\"country\\\": \\\"The specific country code as per World Bank API\\\",\\n    \\\"indicator\\\": \\\"The specific indicator code as per World Bank API\\\"\\n},\\n\\\"return\\\": \\\"Returns the value of the requested indicator for the given country. If unable to fetch the data, returns an error message.\\\",\\n\\\"depend\\\": \\\"Python requests library, World Bank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a grandniece of William Elwood Murray", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Family Tree Builder Interface\\\",\\n  \\\"description\\\": \\\"An interface to the FamilySearch API that allows users to input a person's name and returns a family tree structure of their ancestors.\\\",\\n  \\\"function_name\\\": \\\"get_ancestor_tree\\\",\\n  \\\"input_args\\\": [\\\"person_name\\\"],\\n  \\\"return\\\": \\\"A JSON structure that represents the person's family tree, including each ancestor's name, gender, lifespan, and other details.\\\",\\n  \\\"depend\\\": \\\"requests (Python Library), FamilySearch API (Web API)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An event planner hosting a symposium on the history and causes of mass migrations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Schedule Generation Interface\\\",\\n\\\"description\\\": \\\"An interface to add new events to Google Calendar. It takes event details like title, start and end time, and description, and creates the event in the user's Google Calendar.\\\",\\n\\\"function_name\\\": \\\"create_event\\\",\\n\\\"input_args\\\": {\\n    \\\"title\\\": \\\"Title of the event\\\",\\n    \\\"start_time\\\": \\\"Start time of the event in ISO format\\\",\\n    \\\"end_time\\\": \\\"End time of the event in ISO format\\\",\\n    \\\"description\\\": \\\"Description of the event\\\"\\n},\\n\\\"return\\\": \\\"A link to the newly created event in the user's Google Calendar\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A livestock nutritionist who collaborates with the animal healthcare professional to optimize the cows' diet for optimal milk production", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Cow Milk Production Optimization Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a machine learning model to predict and optimize a cow's diet for maximum milk production based on the cow's data (age, breed, diet, health status) and environmental factors.\\\",\\n  \\\"function_name\\\": [\\\"train_model\\\", \\\"optimize_diet\\\"],\\n  \\\"input_args\\\": {\\n    \\\"train_model\\\": [\\\"data_path (string: path to csv file containing cow data and milk production)\\\"],\\n    \\\"optimize_diet\\\": [\\\"cow_data (list: age, breed, diet, health status)\\\", \\\"env_data (list: environmental factors)\\\"]\\n  },\\n  \\\"return\\\": {\\n    \\\"train_model\\\": \\\"None\\\",\\n    \\\"optimize_diet\\\": \\\"optimized_diet (float: predicted milk production with optimized diet)\\\"\\n  },\\n  \\\"depend\\\": \\\"Pandas, Numpy, Scikit-learn RandomForestRegressor\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical office manager responsible for ensuring the security and accuracy of patient records", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Records Encryption Interface\\\",\\n\\\"description\\\": \\\"An interface that provides methods to encrypt and decrypt patient records to ensure their security and accuracy.\\\",\\n\\\"function_name\\\": [\\\"encrypt_patient_record\\\", \\\"decrypt_patient_record\\\"],\\n\\\"input_args\\\": [\\\"record\\\", \\\"cipher_text\\\"],\\n\\\"return\\\": \\\"Encrypted or decrypted version of the patient record.\\\",\\n\\\"depend\\\": \\\"cryptography library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retired electrical engineer with decades of experiences in handling stepping motor", "synthesized text": "\"{\\n\\\"name\\\": \\\"Motor Speed Control Interface\\\",\\n\\\"description\\\": \\\"An interface for controlling the speed of a stepping motor. The user provides the port of the motor controller, the baudrate for communication, and the desired speed, and the interface sends the appropriate commands to the controller.\\\",\\n\\\"function_name\\\": \\\"set_motor_speed\\\",\\n\\\"input_args\\\": {\\n    \\\"port\\\": \\\"The port where the motor controller is connected. This is typically a string like 'COM3' or '/dev/ttyUSB0'.\\\",\\n    \\\"baudrate\\\": \\\"The baudrate for the serial connection. This is typically a number like 9600 or 115200.\\\",\\n    \\\"speed\\\": \\\"The desired speed for the motor. This should be a number.\\\"\\n},\\n\\\"return\\\": \\\"The response from the motor controller after sending the speed command, or an error message if there was a problem.\\\",\\n\\\"depend\\\": \\\"This function uses the PySerial library in Python to establish a serial connection and communicate with the motor controller.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior executive who values the operations manager's ability to implement the internal audit manager's recommendations effectively", "synthesized text": "\"{\\n\\\"name\\\": \\\"Operational Audit Recommendations Implementation Interface\\\",\\n\\\"description\\\": \\\"An interface that creates a new task in Jira with the given issue key and recommendation details.\\\",\\n\\\"function_name\\\": \\\"create_audit_task\\\",\\n\\\"input_args\\\": {\\n    \\\"issue_key\\\": \\\"The key of the issue in Jira where the task is to be created.\\\",\\n    \\\"summary\\\": \\\"A brief overview of the recommendation.\\\",\\n    \\\"description\\\": \\\"The detailed description of the recommendation.\\\"\\n},\\n\\\"return\\\": \\\"A JSON object containing the details of the created task.\\\",\\n\\\"depend\\\": \\\"Jira API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An evolutionary biologist fascinated by the intersection of immune function and nervous system evolution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gene Expression Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Bioconductor packages in R to analyze gene expression data. The user inputs a CSV file with their gene expression data, and the interface returns a list of differentially expressed genes between the different conditions in the experiment.\\\",\\n\\\"function_name\\\": \\\"analyze_gene_expression\\\",\\n\\\"input_args\\\": \\\"path_to_csv\\\",\\n\\\"return\\\": \\\"A list of differentially expressed genes\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, rpy2; R packages: limma, stats, base\\\"\\n}\"", "description": "tool development"}
{"input persona": "David S. Blum's proud son, a civil engineer.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Building Design Load Calculation Interface\\\",\\n  \\\"description\\\": \\\"This interface enables civil engineers to easily calculate the design loads for buildings. It uses a pre-trained machine learning model to predict the design loads based on the type of the building, floor area, number of storeys, and geographical location.\\\",\\n  \\\"function_name\\\": \\\"calculate_building_design_loads\\\",\\n  \\\"input_args\\\": {\\n    \\\"building_type\\\": \\\"String representing the type of the building (residential, commercial, industrial, etc.)\\\",\\n    \\\"floor_area\\\": \\\"Float representing the floor area of the building in square feet\\\",\\n    \\\"num_storeys\\\": \\\"Integer representing the number of storeys in the building\\\",\\n    \\\"location\\\": \\\"String representing the geographical location of the building\\\"\\n  },\\n  \\\"return\\\": \\\"Float representing the estimated design loads for the building in kN\\\",\\n  \\\"depend\\\": \\\"Python libraries (pandas, numpy, scikit-learn), pre-trained machine learning model (building_loads_model.pkl)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An expert guitar restorer offering expensive, vintage and rare string instruments", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Guitar Price Estimation Interface\\\",\\n  \\\"description\\\": \\\"Estimate the price of a guitar based on its characteristics (age, brand, model, condition, and unique features) using a pre-trained machine learning model.\\\",\\n  \\\"function_name\\\": \\\"estimate_guitar_price\\\",\\n  \\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the guitar (in years).\\\",\\n    \\\"brand\\\": \\\"The brand of the guitar.\\\",\\n    \\\"model\\\": \\\"The specific model of the guitar.\\\",\\n    \\\"condition\\\": \\\"The condition of the guitar (e.g., 'mint', 'excellent', 'good', 'fair', 'poor').\\\",\\n    \\\"unique_features\\\": \\\"Any unique features of the guitar (e.g., 'signed by artist', 'limited edition').\\\"\\n  },\\n  \\\"return\\\": \\\"An estimated price for the guitar.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"joblib\\\"],\\n    \\\"machine learning model\\\": [\\\"guitar_price_model.joblib\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A die-hard Itzy fan from South Korea, who respects Japanese culture and appreciates Japanese versions of K-pop songs.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translate Song Lyrics Interface\\\",\\n\\\"description\\\": \\\"An interface to translate song lyrics from Japanese to Korean. Useful for K-pop fans who want to understand the Japanese versions of their favorite songs.\\\",\\n\\\"function_name\\\": \\\"translate_lyrics\\\",\\n\\\"input_args\\\": \\\"song_name\\\",\\n\\\"return\\\": \\\"Korean translation of the song lyrics\\\",\\n\\\"depend\\\": \\\"Lyrics Translate API, Google Translate API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history teacher raised in Compiègne", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Search Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google Custom Search to find top 5 historical events related to the given keyword in the given period.\\\",\\n\\\"function_name\\\": \\\"get_historical_events\\\",\\n\\\"input_args\\\": {\\n    \\\"keyword\\\": \\\"A keyword to search historical events\\\",\\n    \\\"start_year\\\": \\\"Start year of the time period\\\",\\n    \\\"end_year\\\": \\\"End year of the time period\\\"\\n},\\n\\\"return\\\": \\\"A list of top 5 historical events with their titles and snippets.\\\",\\n\\\"depend\\\": \\\"Python requests library, Google Custom Search JSON API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sixteen-year-old devoted fan of Noah Cyrus from Helsinki, Finland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Spotify's Web API to recommend songs based on the user's favorite artist.\\\",\\n\\\"function_name\\\": \\\"get_recommendations\\\",\\n\\\"input_args\\\": \\\"favorite_artist\\\",\\n\\\"return\\\": \\\"A list of song names recommended based on the favorite artist\\\",\\n\\\"depend\\\": \\\"Spotify's Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who specializes in Facebook Open Graph", "synthesized text": "\"{\\n\\\"name\\\": \\\"Facebook Open Graph Debugger Interface\\\",\\n\\\"description\\\": \\\"Debug Open Graph properties of a webpage by providing its URL. Returns a JSON object containing all Open Graph metadata for the URL.\\\",\\n\\\"function_name\\\": \\\"debug_open_graph\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"Open Graph properties in a dictionary format\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Facebook Open Graph API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A blogger and podcaster who creates content on Roman history, providing valuable insights and resources", "synthesized text": "\"{\\n\\\"name\\\": \\\"Podcast Transcription Interface\\\",\\n\\\"description\\\": \\\"Transcribes audio content into written text using Google's Speech-to-Text API.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": [\\\"audio_file\\\"],\\n\\\"return\\\": \\\"transcript\\\",\\n\\\"depend\\\": [\\\"Google Speech-to-Text API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An experienced Rotary club member who recognizes the individual's potential for leadership and encourages them to step out of their comfort zone", "synthesized text": "\"{\\n\\\"name\\\": \\\"Leadership Potential Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained text classification model to analyze an individual's leadership potential based on their self-description.\\\",\\n\\\"function_name\\\": \\\"analyze_leadership_potential\\\",\\n\\\"input_args\\\": \\\"self_description - a string that describes the individual\\\",\\n\\\"return\\\": \\\"A string value indicating the potential for leadership - 'Low', 'Medium', or 'High'\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traumatologist who treats the persona's injuries from risky jumps", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fracture Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained deep learning model to detect fractures from X-ray images. Users input the path to an X-ray image, and the interface returns a prediction of whether a fracture is present or not.\\\",\\n\\\"function_name\\\": \\\"detect_fracture\\\",\\n\\\"input_args\\\": {\\\"path_to_img\\\": \\\"Path to the X-ray image\\\"},\\n\\\"return\\\": \\\"A string indicating whether a fracture is detected or not\\\",\\n\\\"depend\\\": {\\\"tensorflow\\\": \\\"2.6.0\\\", \\\"tensorflow.keras.models\\\": \\\"load_model\\\", \\\"trained model\\\": \\\"path_to_pretrained_model\\\"}\\n}\"", "description": "tool development"}
{"input persona": "a web developer who has also been trying to figure out to adjust the site expiry date in the new DotNetNuke 9 management panel", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Website Expiry Date Adjustment Interface\\\",\\n  \\\"description\\\": \\\"An interface to adjust the expiry date of a website in the DotNetNuke (DNN) management panel. Users should input the new expiry date, and the interface will update the expiry date in the DNN management panel.\\\",\\n  \\\"function_name\\\": \\\"adjust_site_expiry_date\\\",\\n  \\\"input_args\\\": {\\n    \\\"new_expiry_date\\\": \\\"The new expiry date for the website.\\\"\\n  },\\n  \\\"return\\\": \\\"A string message indicating whether the site expiry date was updated successfully or not.\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\"],\\n    \\\"web_apis\\\": [\\\"DotNetNuke (DNN) API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a high school football coach in North Carolina who is proud of the state's HBCUs", "synthesized text": "\"{\\n\\\"name\\\": \\\"HBCU Football Statistic Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface that uses APIs from a sports statistics provider to retrieve key metrics for a given HBCU football team.\\\",\\n\\\"function_name\\\": \\\"get_hbcu_football_stats\\\",\\n\\\"input_args\\\": [\\\"team_name\\\"],\\n\\\"return\\\": \\\"DataFrame with columns for average points per game, total yards, and defensive stats.\\\",\\n\\\"depend\\\": \\\"requests, pandas, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A busy emergency room doctor who struggles to find time to eat nutritious meals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutrition Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spoonacular API to generate a meal plan based on the user's dietary preferences, calorie intake goals, and number of meals per day.\\\",\\n\\\"function_name\\\": \\\"get_meal_plan\\\",\\n\\\"input_args\\\": [\\\"diet\\\", \\\"targetCalories\\\", \\\"numMeals\\\"],\\n\\\"return\\\": \\\"A meal plan that includes breakfast, lunch, dinner, and snacks that align with the user's dietary preferences and calorie goals.\\\",\\n\\\"depend\\\": \\\"Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an administrator who works for the International Skating Union (ISU)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Figure Skating Score Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the final score for a figure skater's program based on a .csv file of judges' scores for each element.\\\",\\n\\\"function_name\\\": \\\"calculate_figure_skating_score\\\",\\n\\\"input_args\\\": \\\"score_file (a .csv file containing judges' scores for each element of the program)\\\",\\n\\\"return\\\": \\\"total_score (the final score for the figure skater's program)\\\",\\n\\\"depend\\\": \\\"pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A journalist who is interested in writing a feature article about the unique relationship between underwater volcanic activity and marine life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Underwater Volcano Activity Data Interface\\\",\\n\\\"description\\\": \\\"This interface provides the most recent underwater volcanic activities and the marine life in the given ocean area. The data is collected from the Global Volcanism Program (GVP) API from the Smithsonian Institution and the Oceanographic Data Center API (ODC).\\\",\\n\\\"function_name\\\": \\\"get_volcano_marine_life_data\\\",\\n\\\"input_args\\\": \\\"ocean_name\\\",\\n\\\"return\\\": \\\"A tuple containing two lists: the first list includes recent underwater volcanic activities, and the second one includes the marine life in the area.\\\",\\n\\\"depend\\\": \\\"requests library, GVP API, ODC API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional surfboard shaper who favors classic designs and sees the innovative approach as a threat to tradition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Surfboard Volume Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the volume of a surfboard given its length, width, and thickness. It allows users to easily compare different surfboard dimensions and their resulting volumes.\\\",\\n\\\"function_name\\\": \\\"calculate_surfboard_volume\\\",\\n\\\"input_args\\\": {\\n    \\\"length\\\": \\\"The length of the surfboard in inches\\\",\\n    \\\"width\\\": \\\"The width of the surfboard in inches\\\",\\n    \\\"thickness\\\": \\\"The thickness of the surfboard in inches\\\"\\n},\\n\\\"return\\\": \\\"The volume of the surfboard in liters\\\",\\n\\\"depend\\\": \\\"NumPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a junior high school teacher who is a huge fan of Will Wood.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Track Feature Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spotify Web API to retrieve audio features for a specific track. The user needs to provide the Spotify ID of the track, and the interface returns a dictionary with the track's features, such as danceability, energy, loudness, speechiness, acousticness, instrumentalness, liveness, valence, and tempo.\\\",\\n\\\"function_name\\\": \\\"get_track_features\\\",\\n\\\"input_args\\\": \\\"spotify_track_id\\\",\\n\\\"return\\\": \\\"dictionary with track's features\\\",\\n\\\"depend\\\": \\\"Spotify Web API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single mother who is unable to afford bail and is separated from her children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Free Legal Advice Interface\\\",\\n\\\"description\\\": \\\"This interface provides free legal advice to users. You only need to provide a brief description of your legal issue, and the interface will return a list of advice tailored to your situation.\\\",\\n\\\"function_name\\\": \\\"get_legal_advice\\\",\\n\\\"input_args\\\": \\\"issue_description\\\",\\n\\\"return\\\": \\\"List of advice\\\",\\n\\\"depend\\\": \\\"Legal Advice API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A peer who has developed effective strategies for organizing and citing sources", "synthesized text": "\"{\\n\\\"name\\\": \\\"Reference Management Interface\\\",\\n\\\"description\\\": \\\"This interface uses PyCite to generate citations in various formats from raw reference data.\\\",\\n\\\"function_name\\\": \\\"generate_citation\\\",\\n\\\"input_args\\\": {\\n    \\\"reference_data\\\": \\\"A dictionary with keys corresponding to the properties of the reference (like 'authors', 'title', 'year', 'journal', etc.).\\\",\\n    \\\"citation_format\\\": \\\"A string indicating the desired citation format ('APA', 'MLA', etc.). Defaults to 'APA'.\\\"\\n},\\n\\\"return\\\": \\\"A string representing the citation formatted according to the specified citation format.\\\",\\n\\\"depend\\\": \\\"PyCite Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Panamanian athlete who is part of the national track and field team", "synthesized text": "\"{\\n\\\"name\\\": \\\"Running Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to predict the running performance of an athlete based on previous running times and other factors like temperature, altitude, etc.\\\",\\n\\\"function_name\\\": \\\"predict_performance\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A dictionary with the Root Mean Square Error (RMSE) and Mean Absolute Error (MAE) of the model's predictions.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"scikit-learn\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a road trip enthusiast and explorer in South Korea", "synthesized text": "\"{\\n\\\"name\\\": \\\"Road Trip Planner Interface\\\",\\n\\\"description\\\": \\\"This interface helps users plan their road trips by providing the optimal route including several stopovers along the way. It uses Google Directions API to calculate the route and randomly selects places for stopovers.\\\",\\n\\\"function_name\\\": \\\"get_directions_with_stopovers\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\", \\\"num_stopovers\\\"],\\n\\\"return\\\": \\\"A URL to a Google Directions query that includes the start location, end location, and waypoints for the stopovers.\\\",\\n\\\"depend\\\": [\\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a nanny who takes care of children in Hong Kong and likes to take them to public pools.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Public Pool Availability Interface\\\",\\n\\\"description\\\": \\\"An interface to get the availability of public swimming pools in a specified district in Hong Kong.\\\",\\n\\\"function_name\\\": \\\"get_public_pool_availability\\\",\\n\\\"input_args\\\": {\\n    \\\"district\\\": \\\"string - The name of the district where the user is located.\\\"\\n},\\n\\\"return\\\": \\\"List of dictionaries - Each dictionary contains the name of a public swimming pool and its current availability status.\\\",\\n\\\"depend\\\": \\\"Hong Kong Leisure and Cultural Services Department's Public Swimming Pools API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a loyal Lawrence University alumna and former member of the women's basketball team.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Game Analysis Interface\\\",\\n\\\"description\\\": \\\"Interface to predict the winner of a basketball game between two specified teams using Sports Open Data API to fetch game data and a machine learning model to make the prediction.\\\",\\n\\\"function_name\\\": \\\"predict_winner\\\",\\n\\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\"],\\n\\\"return\\\": \\\"Predicted winner of the game.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\"],\\n           \\\"Web APIs\\\": [\\\"Sports Open Data API\\\"],\\n           \\\"Machine Learning Models\\\": [\\\"Custom trained tensorflow model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a database developer with extensive experience in SQL Server Integration Services (SSIS)", "synthesized text": "\"{\\n\\\"name\\\": \\\"SQL Query Execution Interface\\\",\\n\\\"description\\\": \\\"This interface executes an SQL query using the connection details provided by the user and returns the result.\\\",\\n\\\"function_name\\\": \\\"execute_sql_query\\\",\\n\\\"input_args\\\": [\\\"server\\\", \\\"database\\\", \\\"user\\\", \\\"password\\\", \\\"query\\\"],\\n\\\"return\\\": \\\"List of dictionaries where each dictionary represents a row, and keys are the column names.\\\",\\n\\\"depend\\\": \\\"Python 'pyodbc' library\\\"\\n}\"", "description": "tool development"}
{"input persona": "香港的小企业主，关心政府财政政策对企业的影响", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u653f\\u7b56\\u5f71\\u54cd\\u5206\\u6790\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u4f7f\\u7528\\u65b0\\u95fbAPI\\u548cNLP\\u5e93\\uff0c\\u6839\\u636e\\u7528\\u6237\\u63d0\\u4f9b\\u7684\\u653f\\u7b56\\u540d\\u79f0\\u6216\\u5173\\u952e\\u8bcd\\uff0c\\u8fd4\\u56de\\u4e0e\\u8be5\\u653f\\u7b56\\u76f8\\u5173\\u7684\\u6700\\u65b0\\u65b0\\u95fb\\u53ca\\u5176\\u53ef\\u80fd\\u7684\\u5f71\\u54cd\\u3002\\\",\\n\\\"function_name\\\": \\\"analyze_policy_effect\\\",\\n\\\"input_args\\\": \\\"\\u653f\\u7b56\\u540d\\u79f0\\u6216\\u5173\\u952e\\u8bcd\\\",\\n\\\"return\\\": \\\"\\u4e0e\\u653f\\u7b56\\u76f8\\u5173\\u7684\\u65b0\\u95fb\\u6458\\u8981\\u5217\\u8868\\\",\\n\\\"depend\\\": \\\"EventRegistry API, transformers pipeline for summarization\\\"\\n}\"", "description": "tool development"}
{"input persona": "a person who is considering becoming a full-time caregiver", "synthesized text": "\"{\\n\\\"name\\\": \\\"Caregiver Support Interface\\\",\\n\\\"description\\\": \\\"This interface provides a list of eldercare services in a given location to assist individuals considering becoming full-time caregivers.\\\",\\n\\\"function_name\\\": \\\"get_eldercare_services\\\",\\n\\\"input_args\\\": \\\"location (City and State or ZIP code)\\\",\\n\\\"return\\\": \\\"A list of nearby eldercare services.\\\",\\n\\\"depend\\\": \\\"Eldercare Locator API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skeptical rancher who has recently experienced a flash drought on their property", "synthesized text": "\"{\\n\\\"name\\\": \\\"Soil Moisture Level Interface\\\",\\n\\\"description\\\": \\\"This interface uses NASA's Soil Moisture Active Passive (SMAP) API to return the soil moisture level for a given location.\\\",\\n\\\"function_name\\\": \\\"get_soil_moisture_level\\\",\\n\\\"input_args\\\": {\\n    \\\"latitude\\\": \\\"Latitude of the location\\\",\\n    \\\"longitude\\\": \\\"Longitude of the location\\\"\\n    },\\n\\\"return\\\": \\\"Soil moisture level at the given location or a message stating no data available for the given location\\\",\\n\\\"depend\\\": \\\"requests library, NASA's SMAP API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young aspiring writer seeking advice on proper book storage and handling techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Storage and Handling Advice Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes the Library of Congress's website to provide advice on proper book storage and handling techniques based on the type of book specified by the user.\\\",\\n\\\"function_name\\\": \\\"get_book_storage_advice\\\",\\n\\\"input_args\\\": \\\"book_type - A string representing the type of book (e.g., 'paperback', 'hardcover', 'antique').\\\",\\n\\\"return\\\": \\\"A string containing the advice on proper book storage and handling techniques for the specified book type.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries for web scraping.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager seeking expert advice on optimizing user experience with Telerik UI controls", "synthesized text": "\"{\\n\\\"name\\\": \\\"Telerik UI Control Optimizer Interface\\\",\\n\\\"description\\\": \\\"This interface performs a series of automated tests on a webpage to determine if the Telerik UI controls are optimized for user experience.\\\",\\n\\\"function_name\\\": \\\"optimize_telerik_ui_controls\\\",\\n\\\"input_args\\\": \\\"url - The URL of the webpage to be tested.\\\",\\n\\\"return\\\": \\\"A dictionary where keys are the IDs of the Telerik UI controls and values are Booleans representing whether the control is accessible (True if it is, False if it's not).\\\",\\n\\\"depend\\\": \\\"Python's Beautiful Soup and Selenium libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A junior mining engineer from Ghana who aspires to start his own mining company.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mineral Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the presence of minerals in a given location. Users just need to input the latitude and longitude of the location, and the interface will return the likelihood of finding specific minerals in that location.\\\",\\n\\\"function_name\\\": \\\"predict_minerals\\\",\\n\\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\"],\\n\\\"return\\\": \\\"Predicted minerals\\\",\\n\\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a deeply spiritual individual who finds solace and wisdom in the teachings of various faith leaders, and I have an abiding respect for individuals who strive for peace and understanding in the midst of violence and chaos.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inspirational Quotes Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface uses the ZenQuotes API to fetch a quote related to a specified category. If no category is specified, it defaults to 'spirituality'.\\\",\\n\\\"function_name\\\": \\\"get_inspirational_quote\\\",\\n\\\"input_args\\\": [\\\"category\\\"],\\n\\\"return\\\": \\\"A string containing a quote and its author's name.\\\",\\n\\\"depend\\\": \\\"ZenQuotes API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Tongan youngster who loves social media trends", "synthesized text": "\"{\\n\\\"name\\\": \\\"TikTok Trending Video Download Interface\\\",\\n\\\"description\\\": \\\"This interface finds and downloads a specified number of trending TikTok videos.\\\",\\n\\\"function_name\\\": \\\"download_trending_videos\\\",\\n\\\"input_args\\\": [\\\"num_videos\\\", \\\"download_folder\\\"],\\n\\\"return\\\": \\\"Downloads the specified number of trending TikTok videos into the specified folder.\\\",\\n\\\"depend\\\": [\\\"TikTokApi\\\", \\\"pytube\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a die-hard fan of Deportivo Lara football club", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch the detailed statistics of a football match for a specific team and date. The data is fetched from a sports data provider's API.\\\",\\n  \\\"function_name\\\": \\\"get_football_match_statistics\\\",\\n  \\\"input_args\\\": {\\n    \\\"team_name\\\": \\\"Name of the football team\\\",\\n    \\\"match_date\\\": \\\"Date of the match\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"type\\\": \\\"dict\\\",\\n    \\\"description\\\": \\\"Detailed statistics of the match including goals, shots, passes, fouls, etc. If no match is found for the given team and date, a message is returned.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"SportMonks Soccer API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A history major conducting research on the transition from card catalogs to online databases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical News Article Search Interface\\\", \\n\\\"description\\\": \\\"This interface scrapes online news articles based on a given topic and date range.\\\", \\n\\\"function_name\\\": \\\"get_news_articles\\\", \\n\\\"input_args\\\": [\\\"topic\\\", \\\"start_date\\\", \\\"end_date\\\"], \\n\\\"return\\\": \\\"A list of URLs for news articles related to the specified topic and within the specified date range.\\\", \\n\\\"depend\\\": [\\\"newspaper\\\", \\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Russian physicist who values the collaborative nature of scientific research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Article Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface uses the SentenceTransformer model from the Hugging Face library to find similar scientific articles based on the content of a given article. It returns a list of similar articles from a pre-defined dataset.\\\",\\n\\\"function_name\\\": \\\"get_similar_articles\\\",\\n\\\"input_args\\\": \\\"title_abstract - A string that combines the title and abstract of the user's article.\\\",\\n\\\"return\\\": \\\"A list of similar articles from the pre-defined dataset.\\\",\\n\\\"depend\\\": \\\"Hugging Face's sentence-transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An amateur rowing enthusiast from Uttar Pradesh", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rowing Performance Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches a user's rowing activities from Strava and returns the performance data including the distance rowed, time taken, and calories burned.\\\",\\n\\\"function_name\\\": \\\"get_rowing_activities\\\",\\n\\\"input_args\\\": {\\\"strava_user_id\\\": \\\"The user's Strava ID.\\\"},\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary represents a rowing activity and includes the name of the activity, distance rowed, time taken, and calories burned.\\\",\\n\\\"depend\\\": \\\"Strava API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior employee who has achieved a balance between profitability and ethical decision-making and guides the junior employee on their journey", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ethical Decision Making Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to rate the ethicality of a decision based on its description. The input is a string describing the decision, and the output is a score from 0 (unethical) to 1 (ethical).\\\",\\n\\\"function_name\\\": \\\"ethical_decision_score\\\",\\n\\\"input_args\\\": \\\"decision_description\\\",\\n\\\"return\\\": \\\"ethical_score\\\",\\n\\\"depend\\\": \\\"Hugging Face transformer library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A government official responsible for zoning and development who can provide information on available commercial spaces and regulations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Commercial Space Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and combines information about available commercial properties and zoning regulations based on the user's area of interest.\\\",\\n\\\"function_name\\\": \\\"get_commercial_space_info\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"The area or postcode the user is interested in.\\\"\\n    },\\n\\\"return\\\": \\\"A dictionary containing two keys: 'properties', which holds the available commercial properties, and 'regulations', which holds the zoning regulations for the area.\\\",\\n\\\"depend\\\": \\\"This function utilizes APIs from a property database provider and a government information provider.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A timid rabbit who seeks safety in numbers and often encounters the nocturnal rodent during nighttime", "synthesized text": "\"{\\n\\\"name\\\": \\\"Animal Activity Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the activity of a certain animal species at a given time based on a pre-trained deep learning model.\\\",\\n\\\"function_name\\\": \\\"predict_animal_activity\\\",\\n\\\"input_args\\\": {\\\"species\\\": \\\"string\\\", \\\"current_time\\\": \\\"string in 24-hour format\\\"},\\n\\\"return\\\": \\\"string ('active' if the animal is predicted to be active, 'inactive' otherwise)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"sklearn.preprocessing\\\", \\\"tensorflow.keras\\\"], \\\"machine learning model\\\": \\\"animal_activity_prediction_model.h5\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A dad who loves DIY projects but always ends up with a mess", "synthesized text": "\"{\\n\\\"name\\\": \\\"DIY Project Cleanup Guide\\\",\\n\\\"description\\\": \\\"This interface takes an image of a DIY project mess and returns a list of possible items in the image, helping users to organize and clean up.\\\",\\n\\\"function_name\\\": \\\"classify_items_in_image\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"A string indicating the most likely object in the image.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bartender who always has a cold beer waiting for the police officer after work", "synthesized text": "\"{\\n\\\"name\\\": \\\"Beer Temperature Interface\\\", \\n\\\"description\\\": \\\"This interface uses a Raspberry Pi and a DS18B20 temperature sensor to monitor the temperature of a beer and notify the bartender when it's at the perfect drinking temperature.\\\", \\n\\\"function_name\\\": \\\"check_beer_temperature\\\", \\n\\\"input_args\\\": \\\"None\\\", \\n\\\"return\\\": \\\"A string indicating whether the beer is too cold, too warm, or at the perfect drinking temperature.\\\", \\n\\\"depend\\\": \\\"Python standard library, DS18B20 temperature sensor, Raspberry Pi\\\"\\n}\"", "description": "tool development"}
{"input persona": "A quarterback known for their accuracy and ability to make quick decisions under pressure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time NFL Game Statistics Interface\\\",\\n\\\"description\\\": \\\"Provides real-time statistics for a specific NFL player\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": [\\\"player_name\\\"],\\n\\\"return\\\": \\\"Dictionary of player's statistics\\\",\\n\\\"depend\\\": \\\"requests library, NFL.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "University athletic director committed to elevating the football program's national ranking", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Football Team Performance Analysis Interface\\\",\\n  \\\"description\\\": \\\"Predicts the outcome of future football games based on historical data and current team statistics. Returns predicted win-loss records and potential national rankings.\\\",\\n  \\\"function_name\\\": \\\"get_football_team_performance\\\",\\n  \\\"input_args\\\": \\\"team_name\\\",\\n  \\\"return\\\": \\\"Predicted win-loss records and potential national rankings\\\",\\n  \\\"depend\\\": \\\"Hugging Face, pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A librarian who just moved to Ocean County, NJ", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Goodreads API to recommend books based on user's preference of genre, author, or title.\\\",\\n\\\"function_name\\\": \\\"get_book_recommendations\\\",\\n\\\"input_args\\\": [\\\"genre\\\", \\\"author\\\", \\\"title\\\"],\\n\\\"return\\\": \\\"A list of recommended book titles.\\\",\\n\\\"depend\\\": \\\"Goodreads API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An excited first-time user of the Mercury Network, particularly eager to explore the RealView Bridge tool.", "synthesized text": "\"{\\n\\\"name\\\": \\\"RealView Bridge Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to create an order in the RealView Bridge tool of Mercury Network by simply inputting the order details.\\\",\\n\\\"function_name\\\": \\\"create_order\\\",\\n\\\"input_args\\\": \\\"order_details\\\",\\n\\\"return\\\": \\\"Dictionary that represents the JSON response from the API.\\\",\\n\\\"depend\\\": \\\"requests library, Mercury Network API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a science fiction fan who was very young during the original run of \"Star Trek: Deep Space Nine\" and therefore did not get to experience it properly", "synthesized text": "\"{\\n\\\"name\\\": \\\"Star Trek Episode Synopsis Interface\\\",\\n\\\"description\\\": \\\"This interface returns a synopsis for a specified episode of 'Star Trek: Deep Space Nine'.\\\",\\n\\\"function_name\\\": \\\"get_episode_synopsis\\\",\\n\\\"input_args\\\": \\\"episode_title\\\",\\n\\\"return\\\": \\\"A synopsis of the specified Star Trek episode.\\\",\\n\\\"depend\\\": \\\"Star Trek API (stapi.co)\\\"\\n}\"", "description": "tool development"}
{"input persona": "an experienced software developer familiar with the structure and functionality of classes in object-oriented programming (OOP).", "synthesized text": "\"{\\n\\\"name\\\": \\\"Class Structure Visualization Interface\\\",\\n\\\"description\\\": \\\"An interface to generate a graph diagram visualizing the structure of a Python class. The diagram includes the input class, its base classes, and subclasses, with arrows indicating the direction of inheritance.\\\",\\n\\\"function_name\\\": \\\"visualize_class_structure\\\",\\n\\\"input_args\\\": \\\"cls: The class object to visualize\\\",\\n\\\"return\\\": \\\"A PNG image file ('class_structure.png') showing the class structure.\\\",\\n\\\"depend\\\": \\\"Python introspection, pygraphviz library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former mobster turned whistleblower, exposing the inner workings of organized crime in Chicago", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hidden Text Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to decode and extract hidden text from an image file using steganography techniques.\\\",\\n\\\"function_name\\\": \\\"extract_hidden_text\\\",\\n\\\"input_args\\\": [\\\"image_path\\\"],\\n\\\"return\\\": \\\"Extracted hidden text from the image or None if there's no hidden text.\\\",\\n\\\"depend\\\": [\\\"Python's steganography libraries (stegano)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a vinyl record collector with a particular interest in exclusive releases and a soft spot for electronic music.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Record Release Notifier Interface\\\",\\n\\\"description\\\": \\\"This interface takes an artist's name and a genre as input, and returns a list of the artist's exclusive releases in the specified genre using the Discogs API.\\\",\\n\\\"function_name\\\": \\\"get_exclusive_releases\\\",\\n\\\"input_args\\\": [\\\"artist\\\", \\\"genre\\\"],\\n\\\"return\\\": \\\"List of exclusive releases by the artist in the specified genre, each represented as a dictionary with title and year of release.\\\",\\n\\\"depend\\\": \\\"Discogs API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A community outreach coordinator for a neighborhood located within one of London's Boroughs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Event Finder Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Eventbrite API to find local events happening within a 10 mile radius of a given location. The location should be input as a string.\\\",\\n\\\"function_name\\\": \\\"get_local_events\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"A list of local events' names\\\",\\n\\\"depend\\\": \\\"Eventbrite API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservative Christian activist from Texas who supports the pro-life movement and attaches paramount importance to family values.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verse Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a topic related to Christian values and generates a relevant Bible verse using a pre-trained language model.\\\",\\n\\\"function_name\\\": \\\"generate_bible_verse\\\",\\n\\\"input_args\\\": {\\\"topic\\\": \\\"A string that represents a topic or question related to Christian values.\\\"},\\n\\\"return\\\": \\\"A string that represents a generated Bible verse.\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"gpt2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A chic fashion designer thriving in an urban setting, often debating the merits of city life with their rural cousin", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fashion Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from Hugging Face to analyze the text of fashion-related articles, social media posts, blog posts, etc., to identify current fashion trends.\\\",\\n\\\"function_name\\\": \\\"identify_fashion_trends\\\",\\n\\\"input_args\\\": \\\"A list of text about fashion\\\",\\n\\\"return\\\": \\\"A list of current fashion trends identified from the input text\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library and a pre-trained text classification model 'distilbert-base-uncased-finetuned-sst-2-english'\\\"\\n}\"", "description": "tool development"}
{"input persona": "an adult British male who was a big fan of football and Merlin's sticker collections in the '90s.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Sticker Collection Search Interface\\\",\\n\\\"description\\\": \\\"Interface to search for football stickers from a specific year and team.\\\",\\n\\\"function_name\\\": \\\"search_football_stickers\\\",\\n\\\"input_args\\\": [\\\"year\\\", \\\"team\\\"],\\n\\\"return\\\": \\\"List of sticker names\\\",\\n\\\"depend\\\": \\\"requests library, Football Sticker Collection Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A product developer who collaborates with the graphic designer to bring Doraemon-themed products to market", "synthesized text": "\"{\\n\\\"name\\\": \\\"Doraemon Color Palette Analysis\\\",\\n\\\"description\\\": \\\"This interface analyzes the color palette used in a Doraemon image using OpenCV and KMeans. It takes an image file path and an optional color count as input, and returns the hex codes of the dominant colors.\\\",\\n\\\"function_name\\\": \\\"get_dominant_colors\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"color_count\\\"],\\n\\\"return\\\": \\\"A list of hex color codes\\\",\\n\\\"depend\\\": \\\"Python's OpenCV and sklearn.cluster.KMeans\\\"\\n}\"", "description": "tool development"}
{"input persona": "a comic book artist who is not particularly interested in mathematics or physics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physics Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface provides a high-level access to simulate physics interactions for objects in 3D space. Particularly, it simulates the trajectory of a projectile given the mass of the object, initial speed and launch angle. The simulation runs for a given amount of seconds and returns the positions of the object at each step of the simulation.\\\",\\n\\\"function_name\\\": \\\"simulate_projectile\\\",\\n\\\"input_args\\\": {\\n    \\\"mass\\\": \\\"The mass of the object in kilograms\\\",\\n    \\\"speed\\\": \\\"The initial speed of the object in m/s\\\",\\n    \\\"angle\\\": \\\"The launch angle of the object in radians\\\",\\n    \\\"simulation_time\\\": \\\"The duration of the simulation in seconds\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples representing the positions of the object at each step of the simulation\\\",\\n\\\"depend\\\": \\\"PyBullet Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An architect working on designing smart buildings that incorporate AI visual recognition systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI Visual Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface uses TensorFlow's Object Detection API to detect objects in an image.\\\",\\n\\\"function_name\\\": \\\"detect_objects_in_image\\\",\\n\\\"input_args\\\": \\\"path_to_image\\\",\\n\\\"return\\\": \\\"An image with detected objects highlighted and labeled\\\",\\n\\\"depend\\\": \\\"TensorFlow, Object Detection API, and pre-trained model ssd_mobilenet_v1_coco_2017_11_17\\\"\\n}\"", "description": "tool development"}
{"input persona": "A statistician meticulously analyzing the data from various paranormal research studies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Paranormal Event Probability Interface\\\",\\n\\\"description\\\": \\\"Predicts the probability of a paranormal event based on prior and new data using Bayesian statistics.\\\",\\n\\\"function_name\\\": \\\"paranormal_event_probability\\\",\\n\\\"input_args\\\": {\\n    \\\"prior_data\\\": \\\"A list of two integers representing the alpha and beta parameters of the prior Beta distribution.\\\",\\n    \\\"new_data\\\": \\\"A list of two integers representing the number of trials and the number of successes in the new data.\\\"\\n},\\n\\\"return\\\": \\\"A plot of the posterior probability distribution for the likelihood of a paranormal event.\\\",\\n\\\"depend\\\": \\\"PyMC3 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an economist living in Milton Keynes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Currency Exchange Rate Interface\\\",\\n  \\\"description\\\": \\\"An interface to get the exchange rate between two specified currencies. The base currency and the target currency need to be input by the user, and the function will return the current exchange rate.\\\",\\n  \\\"function_name\\\": \\\"get_exchange_rate\\\",\\n  \\\"input_args\\\": {\\n    \\\"base_currency\\\": \\\"The base currency that the user wants to convert from.\\\",\\n    \\\"target_currency\\\": \\\"The target currency that the user wants to convert to.\\\"\\n  },\\n  \\\"return\\\": \\\"The current exchange rate from the base currency to the target currency.\\\",\\n  \\\"depend\\\": \\\"The function leverages the ExchangeRate-API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history teacher incorporating lessons on past pandemics to complement the science curriculum", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pandemic Historical Data Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Pandemic API to provide historical data on different pandemics. It receives the name of a pandemic as an input and returns a summary of the pandemic.\\\",\\n\\\"function_name\\\": \\\"get_pandemic_info\\\",\\n\\\"input_args\\\": \\\"pandemic_name\\\",\\n\\\"return\\\": \\\"Dictionary containing the name of the pandemic, the period during which it occurred, the number of people affected, and the regions it impacted.\\\",\\n\\\"depend\\\": \\\"Pandemic API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The head of the journalism club, competing for the limited resources of the school's broadcasting equipment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Processing Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to trim video files to a specified duration. The input is a path to the video file and the desired start and end times in seconds. The output is a path to the trimmed video file.\\\",\\n\\\"function_name\\\": \\\"trim_video\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"Path to the video file\\\",\\n    \\\"start_time\\\": \\\"Start time in seconds\\\",\\n    \\\"end_time\\\": \\\"End time in seconds\\\"\\n},\\n\\\"return\\\": \\\"Path to the trimmed video file\\\",\\n\\\"depend\\\": \\\"moviepy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local resident in Lee-on-Solent, Hampshire, England, who is a tennis enthusiast and historian.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historical Tennis Match Data Retrieval Interface\\\",\\n  \\\"description\\\": \\\"An interface to retrieve the details of a historical tennis match given the names of the two players and the year of the match. The details include the match's date, location, and score.\\\",\\n  \\\"function_name\\\": \\\"get_tennis_match_details\\\",\\n  \\\"input_args\\\": [\\\"player1\\\", \\\"player2\\\", \\\"year\\\"],\\n  \\\"return\\\": \\\"A dictionary with the match's date, location, and score, or a message stating that the match details were not found.\\\",\\n  \\\"depend\\\": \\\"Python requests library, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old parishioner from the Roman Catholic Diocese of Lins", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verse Lookup Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to lookup text of specific bible verses by specifying the book, chapter, and verse.\\\",\\n\\\"function_name\\\": \\\"get_bible_verse\\\",\\n\\\"input_args\\\": {\\n    \\\"book\\\": \\\"Name of the Book in the Bible\\\",\\n    \\\"chapter\\\": \\\"Chapter number\\\",\\n    \\\"verse\\\": \\\"Verse number\\\"\\n},\\n\\\"return\\\": \\\"The text of the specified Bible verse.\\\",\\n\\\"depend\\\": \\\"BibleGateway API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an annoyed customer who bought Samsung Galaxy S5 on its release at the top price", "synthesized text": "\"{\\n\\\"name\\\": \\\"Price Drop Alert Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from online shopping platforms to track the price of a specific product. It requires the product name and the time frame as input, and returns the price drop of the product in that time frame.\\\",\\n\\\"function_name\\\": \\\"track_price_drop\\\",\\n\\\"input_args\\\": [\\\"product_name\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"price_drop\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"bs4\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A grandchild who has taken an alternative path as a cybersecurity expert, offering a contrasting perspective on law and order", "synthesized text": "\"{\\n\\\"name\\\": \\\"IP Address Geolocation Interface\\\",\\n\\\"description\\\": \\\"This interface provides the approximate geolocation of an IP address, including the city, region, country, and ISP.\\\",\\n\\\"function_name\\\": \\\"get_ip_geolocation\\\",\\n\\\"input_args\\\": \\\"ip_address\\\",\\n\\\"return\\\": \\\"A dictionary containing the city, region, country, and ISP of the IP address.\\\",\\n\\\"depend\\\": \\\"requests, ip-api.com\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst who holds regular coding hackathons with her friends", "synthesized text": "\"{\\n\\\"name\\\": \\\"GitHub Repository Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a GitHub repository URL as input and returns various statistics about the repository, such as the number of stars, forks, open issues, and contributors.\\\",\\n\\\"function_name\\\": \\\"get_repo_stats\\\",\\n\\\"input_args\\\": [\\\"repo_url\\\"],\\n\\\"return\\\": {\\\"Stars\\\": \\\"Number of stars\\\", \\\"Forks\\\": \\\"Number of forks\\\", \\\"Open Issues\\\": \\\"Number of open issues\\\", \\\"Contributors\\\": \\\"Number of contributors\\\"},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"GitHub API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A skilled mercenary who views the retired operative as a formidable opponent", "synthesized text": "\"{\\n\\\"name\\\": \\\"Facial Recognition Interface\\\", \\n\\\"description\\\": \\\"An interface that uses OpenCV's machine learning models to recognize and identify individuals from a given image. Users input the path to an image file and the interface returns the names of the identified individuals.\\\", \\n\\\"function_name\\\": \\\"recognize_faces\\\", \\n\\\"input_args\\\": \\\"path_to_image\\\", \\n\\\"return\\\": \\\"List of identified individuals\\\", \\n\\\"depend\\\": \\\"OpenCV library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A law firm partner seeking a secure and user-friendly document management solution for their firm", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure Document Management Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to add, delete, rename, and move files and folders; merge and split PDFs; and encrypt and decrypt PDFs with passwords.\\\",\\n\\\"function_name\\\": [\\\"create_folder\\\", \\\"delete_folder\\\", \\\"rename_folder\\\", \\\"move_folder\\\", \\\"merge_pdfs\\\", \\\"split_pdf\\\", \\\"encrypt_pdf\\\", \\\"decrypt_pdf\\\"],\\n\\\"input_args\\\": [\\\"path\\\", \\\"old_path\\\", \\\"new_path\\\", \\\"source_path\\\", \\\"destination_path\\\", \\\"pdf_paths\\\", \\\"output_path\\\", \\\"pdf_path\\\", \\\"output_folder\\\", \\\"password\\\"],\\n\\\"return\\\": \\\"No return value. Operations are performed on the file system.\\\",\\n\\\"depend\\\": \\\"Python's os and shutil libraries for file handling, PyPDF2 library for manipulating PDFs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A startup founder seeking guidance on optimizing their ElasticSearch implementation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Optimize Elasticsearch Index Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to update the settings of a specified Elasticsearch index to optimize its performance. The user needs to provide the Elasticsearch host, port, index name, and the settings they want to update.\\\",\\n\\\"function_name\\\": \\\"optimize_elasticsearch_index\\\",\\n\\\"input_args\\\": {\\n    \\\"host\\\": \\\"The Elasticsearch host IP or URL.\\\",\\n    \\\"port\\\": \\\"The Elasticsearch host port.\\\",\\n    \\\"index_name\\\": \\\"The name of the Elasticsearch index to be updated.\\\",\\n    \\\"settings\\\": \\\"The settings to be updated on the specified index.\\\"\\n  },\\n\\\"return\\\": \\\"A string message indicating whether the settings were successfully updated for the specified index.\\\",\\n\\\"depend\\\": \\\"Elasticsearch Python client library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Cambodian student aspiring to become a constitutional lawyer, inspired by Heng Vong Bunchhat", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Legal Case Analyzer Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained GPT-3 model to extract key information from a legal case document. The user inputs the path to the legal case document, and the interface returns a summary of the case, including the parties involved, the key issues, the ruling, and the rationale for the decision.\\\",\\n  \\\"function_name\\\": \\\"analyze_legal_case\\\",\\n  \\\"input_args\\\": \\\"file_path\\\",\\n  \\\"return\\\": \\\"summaries\\\",\\n  \\\"depend\\\": \\\"Hugging Face's GPT-3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A subject matter expert who frequently contributes their own insights and expertise to the blog", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blog Post Topic Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model from Hugging Face to generate a list of potential blog post topics based on the user's area of expertise.\\\",\\n\\\"function_name\\\": \\\"generate_blog_topics\\\",\\n\\\"input_args\\\": {\\n    \\\"area_of_expertise\\\": \\\"A string representing the user's area of expertise.\\\",\\n    \\\"num_topics\\\": \\\"An optional integer representing the number of topics to generate. Defaults to 5.\\\"\\n    },\\n\\\"return\\\": \\\"A list of strings, each string being a suggested blog post topic.\\\",\\n\\\"depend\\\": \\\"This function uses the transformers library from Hugging Face, specifically the GPT2LMHeadModel and GPT2Tokenizer.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An advocate for public safety and women's right to jog safely", "synthesized text": "\"{\\n\\\"name\\\": \\\"Safe Jogging Route Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Strava API to recommend safe jogging routes based on the user's current location. The routes recommended are popular and frequently used by other runners, increasing the safety of the route.\\\",\\n\\\"function_name\\\": \\\"get_safe_jogging_routes\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"The user's current location in the format 'latitude,longitude'\\\"},\\n\\\"return\\\": \\\"A list of recommended jogging routes\\\",\\n\\\"depend\\\": \\\"Strava API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nonchalant cashier who's worked in the fast-food industry for years without much ambition for upward mobility", "synthesized text": "\"{\\n\\\"name\\\": \\\"Order Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyze a CSV file of fast food orders and return the most sold item and the total revenue.\\\",\\n\\\"function_name\\\": \\\"analyze_fast_food_orders\\\",\\n\\\"input_args\\\": [\\\"csv_file_path\\\"],\\n\\\"return\\\": [\\\"most_sold_item\\\", \\\"total_revenue\\\"],\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Puerto Rican Literature professor who specializes in name origins and modifications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Name Origin Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface uses the BehindTheName API to return the origin and history of a name, as well as its variants or modifications.\\\", \\n\\\"function_name\\\": [\\\"get_name_origin\\\", \\\"get_name_modifications\\\"], \\n\\\"input_args\\\": [\\\"name\\\"], \\n\\\"return\\\": [\\\"A dictionary containing the origin and history of the name (get_name_origin), A list of variants or modifications of the name (get_name_modifications)\\\"], \\n\\\"depend\\\": [\\\"requests library\\\", \\\"BehindTheName API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An excited potential yacht buyer who is seriously considering getting the Beneteau 50 as his first yacht", "synthesized text": "\"{\\n\\\"name\\\": \\\"Yacht Price Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that uses web scraping to extract price information from yacht selling websites. Users only need to input the model of the yacht, and it will return the average price of the same model on the market.\\\",\\n\\\"function_name\\\": \\\"get_yacht_price\\\",\\n\\\"input_args\\\": \\\"yacht_model\\\",\\n\\\"return\\\": \\\"average_price\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "a PhD in Exercise Physiology and a former competitive bodybuilder", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Muscle Building Plan Interface\\\",\\n  \\\"description\\\": \\\"This interface predicts a tailored muscle-building plan based on a person's physical attributes, workout routine, and diet, using a pre-trained machine learning model.\\\",\\n  \\\"function_name\\\": \\\"predict_muscle_building_plan\\\",\\n  \\\"input_args\\\": [\\\"height\\\", \\\"weight\\\", \\\"age\\\", \\\"gender\\\", \\\"workout_routine\\\", \\\"diet\\\"],\\n  \\\"return\\\": \\\"A structured muscle-building plan including recommended exercises, sets, reps, and diet.\\\",\\n  \\\"depend\\\": [\\\"tensorflow\\\", \\\"numpy\\\", \\\"pandas\\\", \\\"sklearn.preprocessing\\\", \\\"muscle_building_model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a passionate local who went to North Mercer School", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Rating Interface\\\",\\n\\\"description\\\": \\\"This interface uses the GreatSchools API to fetch the rating of a particular school.\\\",\\n\\\"function_name\\\": \\\"get_school_rating\\\",\\n\\\"input_args\\\": \\\"school_name: A string representing the name of the school.\\\",\\n\\\"return\\\": \\\"A string representing the rating of the school.\\\",\\n\\\"depend\\\": \\\"Uses the GreatSchools API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A product manager responsible for integrating the cloud infrastructure into a data analytics platform", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cloud Storage Interface\\\",\\n\\\"description\\\": \\\"An interface to upload a file to Google Cloud Storage.\\\",\\n\\\"function_name\\\": \\\"upload_blob\\\",\\n\\\"input_args\\\": [\\\"bucket_name\\\", \\\"source_file_name\\\", \\\"destination_blob_name\\\"],\\n\\\"return\\\": \\\"None\\\",\\n\\\"depend\\\": [\\\"Google Cloud Storage Python Client Library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Former teammate and good friend of Predrag Papaz, who also used to be a professional defender in football", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Player Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input a football player's name, and it will return the player's career statistics.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": {\\\"player_name\\\": \\\"a string representing the football player's name\\\"},\\n\\\"return\\\": \\\"a dictionary with the player's career statistics or a message indicating no data found\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"BeautifulSoup\\\", \\\"requests\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A budget-conscious traveler who appreciates the agency's attention to detail and value-for-money packages", "synthesized text": "\"{\\n\\\"name\\\": \\\"Travel Package Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Skyscanner API for flight information and Booking.com API for hotel information to recommend the best value for money travel packages within a given budget.\\\",\\n\\\"function_name\\\": \\\"recommend_travel_package\\\",\\n\\\"input_args\\\": [\\\"origin\\\", \\\"destination\\\", \\\"departure_date\\\", \\\"return_date\\\", \\\"budget\\\"],\\n\\\"return\\\": \\\"A dictionary containing information about the recommended flight and hotel, or a string stating no package is within budget.\\\",\\n\\\"depend\\\": [\\\"requests Python library\\\", \\\"Skyscanner API\\\", \\\"Booking.com API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A native of Biloberizka who loves his hometown, and often shares the stories of his village with friends who visit from the city.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coordinates to Address Lookup Interface\\\",\\n\\\"description\\\": \\\"An interface to convert geographic coordinates to the corresponding address using Google Geocoding API.\\\",\\n\\\"function_name\\\": \\\"get_address_from_coordinates\\\",\\n\\\"input_args\\\": {\\n    \\\"lat\\\": \\\"Latitude of the location\\\",\\n    \\\"long\\\": \\\"Longitude of the location\\\"\\n},\\n\\\"return\\\": \\\"The corresponding address of the provided geographic coordinates. Returns 'No address found for the provided coordinates.' if no address could be found.\\\",\\n\\\"depend\\\": \\\"Google Geocoding API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local small business owner in Nikolski", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"Provides a 5-day weather forecast for the specified city using the OpenWeatherMap API.\\\",\\n\\\"function_name\\\": \\\"get_five_day_forecast\\\",\\n\\\"input_args\\\": \\\"city - The name of the city for which to get the weather forecast.\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are dates and the values are lists of weather data for different times of each date. Each piece of weather data includes the time, weather description, and temperature.\\\",\\n\\\"depend\\\": \\\"requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nostalgic video game collector and music enthusiast from the United States with a soft spot for Pokémon.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Game Music Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the music from video game ROMs and converts them into playable audio files.\\\",\\n\\\"function_name\\\": \\\"extract_and_convert_music_from_rom\\\",\\n\\\"input_args\\\": [\\\"path_to_rom\\\", \\\"output_path\\\"],\\n\\\"return\\\": \\\"Path to the output audio file\\\",\\n\\\"depend\\\": [\\\"music21\\\", \\\"mido\\\", \\\"pydub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Um desenvolvedor web habilidoso que pode criar um novo site com a nova identidade visual da empresa", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to convert colors between different formats (e.g., from hexadecimal to RGB).\\\",\\n\\\"function_name\\\": \\\"convert_color_hex_to_rgb\\\",\\n\\\"input_args\\\": [\\\"hex_color\\\"],\\n\\\"return\\\": \\\"RGB color\\\",\\n\\\"depend\\\": \\\"No dependencies\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of a grassroots organization that organizes art festivals and events, providing a platform for graffiti artists to display their talent", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the location and date of an event and returns the forecasted weather conditions. This can help in planning and organizing outdoor events.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"Weather condition forecast for the event date\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from a neighboring country working together on regional security initiatives", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Threat Level Prediction Interface\\\",\\n    \\\"description\\\": \\\"Predicts potential threat levels based on factors such as recent political events, economic stability, and social unrest.\\\",\\n    \\\"function_name\\\": \\\"predict_threat_level\\\",\\n    \\\"input_args\\\": {\\n        \\\"political_events\\\": \\\"Number of recent political events (last 30 days)\\\",\\n        \\\"economic_stability\\\": \\\"Economic stability index (0-100)\\\",\\n        \\\"social_unrest\\\": \\\"Number of social unrest events (last 30 days)\\\"\\n    },\\n    \\\"return\\\": \\\"Predicted threat level\\\",\\n    \\\"depend\\\": {\\n        \\\"Python Libraries\\\": [\\\"sklearn\\\", \\\"pandas\\\"],\\n        \\\"Machine Learning Model\\\": [\\\"Random Forest Classifier\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A geneticist specializing in hormone receptors and signaling pathways", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gene Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to input a gene sequence and the type of analysis they want to perform. It leverages BioPython's functionalities to perform these analyses.\\\",\\n\\\"function_name\\\": \\\"analyze_gene_sequence\\\",\\n\\\"input_args\\\": {\\n    \\\"gene_sequence\\\": \\\"string representing the gene sequence\\\",\\n    \\\"analysis_type\\\": \\\"string specifying the type of analysis ('transcription', 'translation', 'gc_content')\\\"\\n},\\n\\\"return\\\": \\\"String or float representing the result of the specified analysis\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious teen seeking guidance for a project on coral reefs and their importance in the marine ecosystem", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coral Bleaching Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained TensorFlow model to classify whether a given coral image is healthy or bleached.\\\",\\n\\\"function_name\\\": \\\"analyze_coral_health\\\",\\n\\\"input_args\\\": \\\"path_to_img - A string which is the path to an image file of a coral\\\",\\n\\\"return\\\": \\\"A string - 'Healthy' if the coral in the image is healthy or 'Bleached' if the coral in the image is bleached\\\",\\n\\\"depend\\\": \\\"Python library: TensorFlow, TensorFlow Hub; Machine Learning Model: A hypothetical TensorFlow model for coral health classification\\\"\\n}\"", "description": "tool development"}
{"input persona": "An activist who works tirelessly to improve living conditions and advocate for the rights of residents in Reservoir Hill", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tenant Rights Information Interface\\\",\\n\\\"description\\\": \\\"This interface gathers tenant rights information from different government and legal websites. Users only need to input their state, and the interface will return a summary of tenant rights for that specific state.\\\",\\n\\\"function_name\\\": \\\"get_tenant_rights\\\",\\n\\\"input_args\\\": {\\n    \\\"state\\\": \\\"The state where the tenant resides. Input should be in lower case and use hyphens instead of spaces. For example, new-york for New York.\\\"\\n},\\n\\\"return\\\": \\\"A string containing a summary of tenant rights for the input state.\\\",\\n\\\"depend\\\": \\\"This function depends on the Python library BeautifulSoup for web scraping and on the website 'nolo.com' for tenant rights information.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A civil servant responsible for maintaining the balance between religious freedom and political stability", "synthesized text": "\"{\\n\\\"name\\\": \\\"Religious Hate Speech Detection Interface\\\",\\n\\\"description\\\": \\\"This interface detects hate speech or harmful content in religious discussions. It uses a pre-trained model from the Hugging Face library that has been trained to detect offensive content in text.\\\",\\n\\\"function_name\\\": \\\"detect_hate_speech\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"Dictionary containing the probabilities of the text being offensive and not offensive\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fisheries association president working to promote the economic growth and stability of fishing communities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fish Market Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses historical fish market price data to forecast future prices using a time series forecasting model. It helps fishery association presidents and other stakeholders make informed decisions regarding the economic growth and stability of their fishing communities.\\\",\\n\\\"function_name\\\": \\\"predict_fish_market_prices\\\",\\n\\\"input_args\\\": \\\"A CSV file path containing historical fish market price data with 'date' and 'price' columns.\\\",\\n\\\"return\\\": \\\"A DataFrame with future dates ('ds'), predicted fish market price ('yhat'), and the lower and upper bounds of the prediction ('yhat_lower', 'yhat_upper').\\\",\\n\\\"depend\\\": \\\"Python's pandas library for data manipulation, and Facebook's Prophet library for time series forecasting.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a long-time UNAM fan who is particular about historical facts", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historical Soccer Match Results Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch historical soccer match results for a specific team from a given range of years.\\\",\\n  \\\"function_name\\\": \\\"get_historical_match_results\\\",\\n  \\\"input_args\\\": {\\n    \\\"team_name\\\": \\\"The name of the team\\\",\\n    \\\"start_year\\\": \\\"The start year of the range\\\",\\n    \\\"end_year\\\": \\\"The end year of the range\\\"\\n  },\\n  \\\"return\\\": \\\"A list of match results, each result includes the date of the match, the opponent team, goals scored by the user's team, and goals scored by the opponent team.\\\",\\n  \\\"depend\\\": {\\n    \\\"Web APIs\\\": [\\n      \\\"Football-Data.org API\\\"\\n    ],\\n    \\\"Python Libraries\\\": [\\n      \\\"requests\\\",\\n      \\\"datetime\\\"\\n    ]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A spokesperson for the Mars exploration mission, responsible for disseminating information and answering media inquiries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mars Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the weather data on Mars for a given sol (Martian day) using the NASA Mars Weather API. It returns the average temperature, wind speed, and atmospheric pressure for that day.\\\",\\n\\\"function_name\\\": \\\"get_mars_weather\\\",\\n\\\"input_args\\\": [\\\"sol\\\"],\\n\\\"return\\\": {\\\"sol\\\": \\\"integer\\\", \\\"temperature\\\": \\\"float\\\", \\\"wind_speed\\\": \\\"float\\\", \\\"pressure\\\": \\\"float\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"NASA Mars Weather API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software developer interested in exploring the capabilities of 3D TV technology", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Viewer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to view 3D models by providing the path to a 3D model file. The interface will render and display the 3D model.\\\",\\n\\\"function_name\\\": \\\"render_3D_model\\\",\\n\\\"input_args\\\": {\\\"path_to_model\\\": \\\"Path to the 3D model file\\\"},\\n\\\"return\\\": \\\"Displays the rendered 3D model\\\",\\n\\\"depend\\\": \\\"Pygame, OpenGL libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged Chernobyl tour guide", "synthesized text": "\"{\\n\\\"name\\\": \\\"Radiation Level Check Interface\\\",\\n\\\"description\\\": \\\"This interface uses an API from a radiation monitoring service provider to retrieve the current radiation level in the specified location.\\\",\\n\\\"function_name\\\": \\\"get_current_radiation_level\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"The current radiation level in the specified location.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Radiation Monitoring Service Provider API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young aspiring marksman eager to learn the art of precision shooting", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Ballistic Trajectory Calculation Interface\\\",\\n  \\\"description\\\": \\\"Calculates the ideal trajectory for a bullet to hit a target at a specific location. Returns the time it takes for the bullet to reach the target and the maximum height the bullet will reach during its trajectory.\\\",\\n  \\\"function_name\\\": \\\"calculate_trajectory\\\",\\n  \\\"input_args\\\": {\\n    \\\"initial_velocity\\\": \\\"Initial velocity of the bullet (m/s)\\\",\\n    \\\"angle\\\": \\\"Angle of the gun from the horizontal plane (degrees)\\\",\\n    \\\"distance_to_target\\\": \\\"Horizontal distance to the target (m)\\\",\\n    \\\"target_height\\\": \\\"Vertical height of the target from the ground (m)\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"time_to_target\\\": \\\"Time it takes for the bullet to reach the target (s)\\\",\\n    \\\"max_height\\\": \\\"Maximum height the bullet will reach during its trajectory (m)\\\"\\n  },\\n  \\\"depend\\\": \\\"Python's sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An expatriate working in a tech company, who is currently living in Antigua and Barbuda", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface provides the current exchange rate between the base and target currencies using an exchange rate API.\\\",\\n\\\"function_name\\\": \\\"get_exchange_rate\\\",\\n\\\"input_args\\\": {\\n\\\"base_currency\\\": \\\"The currency from which the conversion starts (e.g., 'USD').\\\",\\n\\\"target_currency\\\": \\\"The currency to which the conversion is made (e.g., 'XCD').\\\"\\n},\\n\\\"return\\\": \\\"The current exchange rate between the base and target currencies.\\\",\\n\\\"depend\\\": \\\"Uses the ExchangeRate-API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gaming journalist who writes nostalgic reviews of remastered retro games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Retro Game Details Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts detailed information about a specified retro game using the RAWG Video Games Database API.\\\",\\n\\\"function_name\\\": \\\"get_game_details\\\",\\n\\\"input_args\\\": [\\\"game_name\\\"],\\n\\\"return\\\": \\\"A dictionary containing detailed information about the game, including name, release date, developers, publishers, and genres.\\\",\\n\\\"depend\\\": \\\"This function depends on the 'requests' Python library and the RAWG Video Games Database API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Uma estudante universitária que adora fazer compras online e está sempre em busca das melhores ofertas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface de Compara\\u00e7\\u00e3o de Pre\\u00e7os\\\",\\n\\\"description\\\": \\\"Esta interface permite que os usu\\u00e1rios pesquisem o pre\\u00e7o de um produto em diferentes lojas online. Basta inserir o nome do produto desejado.\\\",\\n\\\"function_name\\\": \\\"get_product_prices\\\",\\n\\\"input_args\\\": \\\"product_name\\\",\\n\\\"return\\\": \\\"List of tuples, where each tuple contains the name of the online store and the price of the product\\\",\\n\\\"depend\\\": \\\"requests library, PriceAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired teacher, known for her charitable efforts, providing language lessons to newly settled migrants", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation and Pronunciation Interface\\\",\\n\\\"description\\\": \\\"This interface translates text from one language to another and provides an audio pronunciation guide.\\\",\\n\\\"function_name\\\": \\\"translate_text_and_get_pronunciation\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"source_language\\\", \\\"target_language\\\"],\\n\\\"return\\\": [\\\"translated_text\\\", \\\"audio_file\\\"],\\n\\\"depend\\\": [\\\"Google Cloud Translation API\\\", \\\"Google Text-to-Speech API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Dhaka resident constantly bothered by mosquitoes and deeply concerned about recent dengue outbreaks.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mosquito Activity Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the mosquito activity level for the next 7 days based on the weather forecast.\\\",\\n\\\"function_name\\\": \\\"predict_mosquito_activity\\\",\\n\\\"input_args\\\": \\\"city_name\\\",\\n\\\"return\\\": \\\"A list of predicted mosquito activity levels for the next 7 days.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, tensorflow. Web APIs: OpenWeatherMap.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful businessperson who graduated from Lakeland University and is now a leader in their field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Company Email Address Verification Interface\\\",\\n\\\"description\\\": \\\"This interface verifies the validity of an email address.\\\",\\n\\\"function_name\\\": \\\"is_valid_email\\\",\\n\\\"input_args\\\": \\\"email\\\",\\n\\\"return\\\": \\\"Boolean indicating if the email is valid.\\\",\\n\\\"depend\\\": \\\"Python's validate-email-address library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired homeowner willing to share their experiences and advice on maintaining a property", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Maintenance Advice Interface\\\",\\n\\\"description\\\": \\\"This interface takes a text file containing property maintenance advice as input, and returns a summarized version of the advice and its associated topics.\\\",\\n\\\"function_name\\\": \\\"summarize_and_extract_topics\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'summary' and 'topics'. 'summary' is a string that is a summarized version of the original advice, and 'topics' is a list of strings each representing a topic identified in the advice.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A solo ager who is fiercely independent and values their privacy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface takes wearable device data and generates a health status report containing key indicators such as heart rate, sleep quality, and step count.\\\",\\n\\\"function_name\\\": \\\"generate_health_report\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A dictionary containing the user's average heart rate, sleep hours, and step count.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A person who has contracted COVID-19 and is recovering at home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Symptom Tracking Interface\\\",\\n\\\"description\\\": \\\"An interface for COVID-19 patients to daily log their symptoms and track their progress.\\\",\\n\\\"function_name\\\": [\\\"log_symptoms\\\", \\\"get_symptom_summary\\\"],\\n\\\"input_args\\\": [\\\"symptoms\\\"],\\n\\\"return\\\": \\\"A summary of the symptom changes over time.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"datetime\\\", \\\"Health Monitoring API\\\", \\\"LLM\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Ukrainian language enthusiast who loves the name 'Vira'", "synthesized text": "\"{\\n\\\"name\\\": \\\"Name Meaning Interface\\\",\\n\\\"description\\\": \\\"An interface to get the meaning and origin of a name using the Behind The Name API.\\\",\\n\\\"function_name\\\": \\\"get_name_meaning\\\",\\n\\\"input_args\\\": {\\n    \\\"name\\\": \\\"Name of the person.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"name\\\": \\\"The name queried.\\\",\\n    \\\"gender\\\": \\\"Gender usually associated with the name.\\\",\\n    \\\"usage\\\": \\\"Language/Culture where the name is commonly used.\\\",\\n    \\\"origin\\\": \\\"Origin of the name with a short description.\\\",\\n    \\\"meaning\\\": \\\"Meaning of the name.\\\"\\n},\\n\\\"depend\\\": [\\\"requests\\\", \\\"Behind The Name API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A precise, requesting, and non-native English-speaking Czech blogger who is passionate about spiders", "synthesized text": "\"{\\n\\\"name\\\": \\\"Spider Species Identification Interface\\\", \\n\\\"description\\\": \\\"This interface uses a TensorFlow Hub model to classify the species of a spider from an image.\\\", \\n\\\"function_name\\\": \\\"identify_spider_species\\\", \\n\\\"input_args\\\": \\n    {\\n    \\\"path_to_img\\\": \\\"The path to the image file of the spider.\\\"\\n    }, \\n\\\"return\\\": \\\"The most likely species of the spider in the image.\\\", \\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and a pre-trained spider classification model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "alumni of the University of North Dakota who majored in marketing", "synthesized text": "\"{\\n\\\"name\\\": \\\"LinkedIn Profile Scrapper Interface\\\",\\n\\\"description\\\": \\\"This interface uses LinkedIn's public API or other web scrapping libraries to fetch information about alumni of a specific university and their respective majors.\\\",\\n\\\"function_name\\\": \\\"get_alumni_from_university_major\\\",\\n\\\"input_args\\\": {\\n    \\\"university\\\": \\\"The name of the university\\\",\\n    \\\"major\\\": \\\"The major to search for\\\"\\n},\\n\\\"return\\\": \\\"A list of LinkedIn profiles of alumni who studied the specified major at the specified university.\\\",\\n\\\"depend\\\": \\\"linkedin_scraper, selenium\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent seeking justice for their child who was killed in the conflict", "synthesized text": "\"{\\n\\\"name\\\": \\\"Human Rights Violation Reporting Interface\\\",\\n\\\"description\\\": \\\"An interface to report human rights violations to human rights organizations like Human Rights Watch or Amnesty International. The user inputs the necessary details about the incident, and the interface formats and sends the report to the relevant organization.\\\",\\n\\\"function_name\\\": \\\"report_human_rights_violation\\\",\\n\\\"input_args\\\": {\\n    \\\"details\\\": \\\"A dictionary containing the details about the human rights violation.\\\"\\n},\\n\\\"return\\\": \\\"A string indicating whether the report was submitted successfully or there was an error.\\\",\\n\\\"depend\\\": \\\"requests library, Human Rights Watch or Amnesty International API (hypothetical)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A master calligrapher who introduces the bookbinder to the art of ornate book embellishments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ornate Letter Drawing Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to apply artistic styles to their text. The user provides the text they want to stylize, a style image, and a font file. The output is a stylized version of the text in the form of a numpy array.\\\",\\n\\\"function_name\\\": \\\"stylize_text\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"style_path\\\", \\\"font_path\\\"],\\n\\\"return\\\": \\\"A numpy array representing the stylized text.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, PIL, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "An astronomy professor father who inspired the love for the cosmos right from the child's bedtime stories", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Star Information Interface\\\",\\n  \\\"description\\\": \\\"This interface provides detailed information about a star and its planetary system. This includes the star's right ascension, declination, host name, spectral type, and the names of its planets.\\\",\\n  \\\"function_name\\\": \\\"get_star_info\\\",\\n  \\\"input_args\\\": [\\\"star_name\\\"],\\n  \\\"return\\\": \\\"Dictionary with keys: 'Star Name', 'Right Ascension', 'Declination', 'Host Name', 'Spectral Type', 'Planets'. If a star with the given name is not found, it returns 'Star not found'.\\\",\\n  \\\"depend\\\": \\\"Open Exoplanet Catalogue API\\\"\\n}\"", "description": "tool development"}
{"input persona": "狂热的 K-Pop 爱好者，热爱Weki Meki，特别是成员磪有情", "synthesized text": "\"{\\n\\\"name\\\": \\\"K-Pop Lyrics Generation Interface\\\",\\n\\\"description\\\": \\\"An interface to generate lyrics for a given K-Pop artist using GPT-2 model.\\\",\\n\\\"function_name\\\": \\\"generate_kpop_lyrics\\\",\\n\\\"input_args\\\": {\\n    \\\"artist_name\\\": \\\"The name of the K-Pop artist for whom you want to generate lyrics.\\\"\\n},\\n\\\"return\\\": \\\"A string with the generated lyrics.\\\",\\n\\\"depend\\\": {\\n    \\\"python library\\\": [\\\"transformers\\\"],\\n    \\\"machine learning model\\\": [\\\"GPT-2 from Hugging Face\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "Current student (senior year) at the Syracuse University College of Professional Studies, studying Healthcare Administration in the Bachelor of Professional Studies (BPS) program.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Medical Terminology Explainer Interface\\\",\\n  \\\"description\\\": \\\"An interface that takes a medical term as input and returns an easy-to-understand explanation of the term. It uses the UMLS API to fetch the explanation.\\\",\\n  \\\"function_name\\\": \\\"get_medical_term_explanation\\\",\\n  \\\"input_args\\\": {\\\"medical_term\\\": \\\"string\\\"},\\n  \\\"return\\\": {\\\"explanation\\\": \\\"string\\\"},\\n  \\\"depend\\\": {\\\"Web_API\\\": \\\"UMLS API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "a major fan of city-building video games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Planner Interface\\\",\\n\\\"description\\\": \\\"Generate a 2D grid representing a city layout using procedural generation algorithms.\\\",\\n\\\"function_name\\\": \\\"generate_city_layout\\\",\\n\\\"input_args\\\": [\\\"width\\\", \\\"height\\\", \\\"scale\\\"],\\n\\\"return\\\": \\\"2D numpy array representing the city layout.\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"noise\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a senior citizen that has never paid any taxes as he lives off of social security and state welfare.", "synthesized text": "\"{\\n\\\"name\\\": \\\"IRS Tax Filing Eligibility Check Interface\\\",\\n\\\"description\\\": \\\"An interface that checks whether a user needs to file a tax return based on their age, filing status, and income. It uses the IRS's hypothetical Interactive Tax Assistant (ITA) API to evaluate tax filing eligibility.\\\",\\n\\\"function_name\\\": \\\"check_tax_filing_eligibility\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the person in years\\\",\\n    \\\"filing_status\\\": \\\"The person's tax filing status, such as 'single' or 'married filing jointly'\\\",\\n    \\\"income\\\": \\\"The person's total income for the year in dollars\\\"\\n},\\n\\\"return\\\": \\\"A boolean value indicating whether the person needs to file a tax return\\\",\\n\\\"depend\\\": \\\"requests library, hypothetical IRS ITA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An astrophysicist providing scientific guidance on the requirements needed for interplanetary missions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interplanetary Mission Requirement Interface\\\",\\n\\\"description\\\": \\\"Calculates important astronomical and physical parameters for planning interplanetary missions. These parameters include distance and gravitational force between two celestial bodies.\\\",\\n\\\"function_name\\\": \\\"get_interplanetary_parameters\\\",\\n\\\"input_args\\\": [\\\"origin\\\", \\\"destination\\\"],\\n\\\"return\\\": \\\"A dictionary with the distance (in astronomical units) and gravitational force (in Newtons) between the origin and destination celestial bodies.\\\",\\n\\\"depend\\\": \\\"Astropy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graduate student researching the impact of technology on ancient warfare for their thesis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Battle Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses DBpedia SPARQL endpoint to get structured information about a specific historical battle.\\\",\\n\\\"function_name\\\": \\\"get_battle_details\\\",\\n\\\"input_args\\\": [\\\"battle_name\\\"],\\n\\\"return\\\": \\\"A dictionary with key details of the battle such as the combatants, the location, the date, and the result.\\\",\\n\\\"depend\\\": [\\\"DBpedia SPARQL endpoint\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a job aspirant in the field of insurtech startups", "synthesized text": "\"{\\n\\\"name\\\": \\\"Resume Keyword Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface for comparing keywords in a job description and a user's resume\\\",\\n\\\"function_name\\\": \\\"analyze_resume_keywords\\\",\\n\\\"input_args\\\": [\\\"job_desc_file_path\\\", \\\"resume_file_path\\\"],\\n\\\"return\\\": \\\"A Counter object with common keywords and their counts\\\",\\n\\\"depend\\\": \\\"Python libraries: NLTK\\\"\\n}\"", "description": "tool development"}
{"input persona": "An organization responsible for establishing and enforcing industry standards for sports equipment safety", "synthesized text": "\"{\\n\\\"name\\\": \\\"Safety Standards Compliance Checker Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained BERT model to determine whether a given sports equipment description complies with a predefined safety standards.\\\",\\n\\\"function_name\\\": \\\"check_safety_compliance\\\",\\n\\\"input_args\\\": \\\"equipment_description - A string that describes the sports equipment.\\\",\\n\\\"return\\\": \\\"compliance_score - A float between 0 and 1, where 1 means fully compliant.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library (BERT model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young child who frequently dines at Denny's with their parents and looks up to the waitress as a role model", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutrition Facts Interface\\\",\\n\\\"description\\\": \\\"An interface to get nutrition facts for a food item using the USDA's FoodData Central API. The user inputs the name of the food, and the function returns the nutrition facts for that food.\\\",\\n\\\"function_name\\\": \\\"get_nutrition_facts\\\",\\n\\\"input_args\\\": [\\\"food_name\\\"],\\n\\\"return\\\": \\\"A dictionary containing nutrition facts (nutrient names as keys and amounts as values) for the input food item.\\\",\\n\\\"depend\\\": \\\"requests library, USDA's FoodData Central API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research assistant seeking advice on designing and analyzing experiments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Experimental Design and Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the statsmodels library in Python to design and analyze experiments. Users input their dataset and the factors they want to consider, and the interface returns the results of the experiment design and analysis.\\\",\\n\\\"function_name\\\": \\\"design_and_analyze_experiment\\\",\\n\\\"input_args\\\": [\\\"data_path\\\", \\\"dependent_variable\\\", \\\"independent_variables\\\"],\\n\\\"return\\\": \\\"DataFrame with results of the ANOVA\\\",\\n\\\"depend\\\": \\\"pandas, statsmodels\\\"\\n}\"", "description": "tool development"}
{"input persona": "A city planner responsible for evaluating building proposals and ensuring compliance with local regulations, including seismic safety measures.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Safety Evaluation Interface\\\",\\n\\\"description\\\": \\\"Predicts the seismic safety of a proposed building structure\\\",\\n\\\"function_name\\\": \\\"evaluate_seismic_safety\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": [\\\"List of 'Pass' or 'Fail'\\\"],\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hungry orca whale that has expanded its hunting grounds due to the melting ice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Salmon Migration Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface connects to marine biology data APIs to predict salmon migration patterns based on location and month. It can help the user, an orca whale in this scenario, find its primary food source in new hunting grounds.\\\",\\n\\\"function_name\\\": \\\"get_salmon_migration_patterns\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"The current location of the orca whale, should be in latitude and longitude\\\",\\n    \\\"month\\\": \\\"The current month of the year, should be a string\\\"\\n},\\n\\\"return\\\": \\\"A list of salmon migration patterns including species, density and direction of movement\\\",\\n\\\"depend\\\": \\\"This function uses the 'requests' Python library to access marine biology data APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casual watcher of anime unfamiliar with the Arknights series.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Anime Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses an API that accesses a machine learning model to analyze the user's favorite anime and recommend the Arknights series if it matches their preference.\\\",\\n\\\"function_name\\\": \\\"recommend_anime\\\",\\n\\\"input_args\\\": \\\"favorite_anime\\\",\\n\\\"return\\\": \\\"Recommendation message based on user's favorite anime\\\",\\n\\\"depend\\\": \\\"Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A presidential candidate who needs compelling speeches to connect with voters", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a compelling speech based on a given topic and target audience using the GPT-3 model from OpenAI.\\\",\\n\\\"function_name\\\": \\\"generate_speech\\\",\\n\\\"input_args\\\": {\\n    \\\"topic\\\": \\\"The main subject of the speech.\\\",\\n    \\\"audience\\\": \\\"The target audience of the speech.\\\"\\n},\\n\\\"return\\\": \\\"A generated speech as a string.\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3 Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local police officer who seeks the car dealership owner's advice on patrol vehicle safety", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Safety Rating Interface\\\",\\n\\\"description\\\": \\\"Fetches the safety rating of a given vehicle from the National Highway Traffic Safety Administration's API\\\",\\n\\\"function_name\\\": \\\"get_vehicle_safety_rating\\\",\\n\\\"input_args\\\": [\\\"make\\\", \\\"model\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"Overall safety rating of the vehicle\\\",\\n\\\"depend\\\": [\\\"NHTSA Vehicle API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A 65-year-old former tennis player who used to compete against Patricia Harrison in her prime.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tennis Match Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface to obtain the head-to-head statistics of two tennis players. The statistics include the number of matches played, won, and lost.\\\",\\n\\\"function_name\\\": \\\"get_head_to_head_stats\\\",\\n\\\"input_args\\\": [\\\"player1\\\", \\\"player2\\\"],\\n\\\"return\\\": \\\"A dictionary containing the head-to-head statistics of the two players.\\\",\\n\\\"depend\\\": \\\"OpenLigaDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A car manufacturer seeking to implement secure firmware in their vehicle fleet", "synthesized text": "\"{\\n\\\"name\\\": \\\"Firmware Signature Verification Interface\\\",\\n\\\"description\\\": \\\"An interface to verify the signature of a firmware file using the manufacturer's public key. Returns true if the signature is valid, false otherwise.\\\",\\n\\\"function_name\\\": \\\"validate_firmware_signature\\\",\\n\\\"input_args\\\": [\\\"firmware_path\\\", \\\"signature_path\\\", \\\"public_key_path\\\"],\\n\\\"return\\\": \\\"boolean\\\",\\n\\\"depend\\\": [\\\"Python's cryptography library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A business analyst who depends on the software architect to ensure that the proposed system design aligns with the project requirements and goals", "synthesized text": "\"{\\n\\\"name\\\": \\\"System Design Validation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from Huggingface to compare a system design document with a project requirements document to identify potential misalignments.\\\",\\n\\\"function_name\\\": \\\"document_comparison\\\",\\n\\\"input_args\\\": [\\\"system_design_path\\\", \\\"project_requirements_path\\\"],\\n\\\"return\\\": \\\"A report highlighting potential conflicts or misalignments, if any.\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A minimalist who prefers digital entertainment and regularly debates with the toy collector about materialism", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Digital Minimalism Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the Goodreads API to recommend books based on the user's preferences and tracks the number of books read to promote digital entertainment over physical possessions.\\\",\\n  \\\"function_name\\\": [\\\"get_book_recommendations\\\", \\\"track_read_books\\\"],\\n  \\\"input_args\\\": [[\\\"genre\\\", \\\"reading_frequency\\\"], [\\\"num_books\\\"]],\\n  \\\"return\\\": [[\\\"A list of book recommendations\\\"], [\\\"The total number of books read\\\"]],\\n  \\\"depend\\\": [\\\"Goodreads API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A poet who writes heartfelt verses and shares them with their reader sibling", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts the input text into speech in the form of an audio file.\\\",\\n\\\"function_name\\\": \\\"convert_text_to_speech\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"The text to be converted into speech.\\\",\\n    \\\"filename\\\": \\\"The desired filename for the output audio file (default is 'output.mp3').\\\",\\n    \\\"lang\\\": \\\"The language in which to speak the text (default is English 'en').\\\"\\n},\\n\\\"return\\\": \\\"The function does not return a value, but it saves an audio file and prints a confirmation message.\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS) Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graduate student in statistics who avidly follows the SAS expert's blog for guidance and inspiration", "synthesized text": "\"{\\n  \\\"name\\\": \\\"SAS Code Execution Interface\\\",\\n  \\\"description\\\": \\\"This interface allows you to execute SAS code and return the result. It utilizes the SASPy library to interface with SAS, which allows python to execute SAS code.\\\",\\n  \\\"function_name\\\": \\\"execute_sas_code\\\",\\n  \\\"input_args\\\": \\\"sas_code - A string containing the SAS code to be executed\\\",\\n  \\\"return\\\": \\\"A string containing the log of the executed SAS code, including any output or error messages\\\",\\n  \\\"depend\\\": \\\"SASPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud parent whose child has been accepted to Zhejiang University International Business School", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a home currency and the name of the target currency, and returns the current conversion rate between the two.\\\",\\n\\\"function_name\\\": \\\"get_currency_conversion_rate\\\",\\n\\\"input_args\\\": [\\\"from_currency\\\", \\\"to_currency\\\"],\\n\\\"return\\\": \\\"A floating point number representing the current conversion rate from the home currency to the target currency.\\\",\\n\\\"depend\\\": \\\"ExchangeRate-API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A game developer seeking advice on integrating VR technology into their multiplayer online game", "synthesized text": "\"{\\n\\\"name\\\": \\\"VR Integration Interface\\\",\\n\\\"description\\\": \\\"This interface enables developers to easily integrate VR functionalities into their online multiplayer games using the OpenVR API.\\\",\\n\\\"function_name\\\": \\\"integrate_vr_to_game\\\",\\n\\\"input_args\\\": \\\"game_source_code_directory - The path to the directory of the game's source code.\\\",\\n\\\"return\\\": \\\"The path to the modified game source code directory with integrated VR scripts.\\\",\\n\\\"depend\\\": \\\"Python's os and shutil libraries, and OpenVR API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A field officer who identifies needy households and channels resources toward them", "synthesized text": "\"{\\n\\\"name\\\": \\\"Needy Household Identification Interface\\\",\\n\\\"description\\\": \\\"This interface identifies households that are potentially in need based on their income. It uses the U.S. Census Bureau's API to access demographic data and identifies households that fall below a certain income threshold.\\\",\\n\\\"function_name\\\": \\\"identify_needy_households\\\",\\n\\\"input_args\\\": [\\\"state\\\", \\\"county\\\"],\\n\\\"return\\\": \\\"List of households with their incomes\\\",\\n\\\"depend\\\": \\\"Requests library, Pandas library, U.S. Census Bureau API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Saudi student studying logistics and supply chain management in the United States.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Google Maps Directions API and the OR-Tools library to find the optimal route for delivering goods from a warehouse to various destinations.\\\",\\n\\\"function_name\\\": \\\"find_optimal_route\\\",\\n\\\"input_args\\\": {\\n    \\\"api_key\\\": \\\"The API key for accessing the Google Maps Directions API\\\",\\n    \\\"warehouse_location\\\": \\\"The location of the warehouse, in a format that can be understood by the Google Maps API\\\",\\n    \\\"destination_locations\\\": \\\"A list of locations to which goods need to be delivered, in a format that can be understood by the Google Maps API\\\"\\n},\\n\\\"return\\\": \\\"A string describing the optimal route for delivering goods from the warehouse to the destinations, in the order in which they should be visited.\\\",\\n\\\"depend\\\": [\\\"googlemaps\\\", \\\"ortools\\\", \\\"Google Maps Directions API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a South African sports columnist who admired Mandy Adamson", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cricket Score Interface\\\",\\n\\\"description\\\": \\\"This interface fetches live cricket scores for a given team. It uses the CricAPI to fetch the scores.\\\",\\n\\\"function_name\\\": \\\"fetch_live_cricket_scores\\\",\\n\\\"input_args\\\": {\\\"team_name\\\": \\\"Name of the cricket team\\\"},\\n\\\"return\\\": \\\"Live cricket score of the given team or a message indicating no live matches found.\\\",\\n\\\"depend\\\": \\\"Python's requests library and CricAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular children's TV show host who invites the nutritionist to share tips on promoting healthy sleep habits", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sleep Duration Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the optimal duration of sleep based on age and daily physical activity using machine learning model from scikit-learn.\\\",\\n\\\"function_name\\\": \\\"predict_sleep_duration\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"Age of the individual\\\",\\n    \\\"steps\\\": \\\"The number of steps the individual takes in a day\\\"\\n},\\n\\\"return\\\": \\\"Recommended sleep duration (in hours)\\\",\\n\\\"depend\\\": \\\"scikit-learn, pandas, joblib and a pre-trained model file sleep_duration_model.pkl\\\"\\n}\"", "description": "tool development"}
{"input persona": "A patient who received the wrong diagnosis and suffered medical complications as a result", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Diagnosis Correctness Verification Interface\\\",\\n\\\"description\\\": \\\"This interface verifies the correctness of a given medical diagnosis based on the patient's symptoms. It uses a pre-trained medical diagnosis model and UMLS to convert the symptoms and diagnosis into medical codes.\\\",\\n\\\"function_name\\\": \\\"verify_diagnosis\\\",\\n\\\"input_args\\\": [\\\"symptoms\\\", \\\"diagnosis\\\"],\\n\\\"return\\\": \\\"A string indicating whether the diagnosis is correct or not. If it's not, the predicted diagnosis will be returned.\\\",\\n\\\"depend\\\": \\\"TensorFlow Hub (Pre-trained medical diagnosis model from Google), PyMedTermino (UMLS)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a mechanical engineer who has worked with Linda Schmidt", "synthesized text": "\"{\\n\\\"name\\\": \\\"Design Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface allows you to input the parameters of a design problem including the objective function and the constraints, and return the optimal design parameters that maximize or minimize the objective function.\\\",\\n\\\"function_name\\\": \\\"design_optimization\\\",\\n\\\"input_args\\\": {\\n\\\"objective_function\\\": \\\"A string representing the objective function to be minimized or maximized, where 'x' and 'y' represent the design parameters.\\\",\\n\\\"constraint\\\": \\\"A string representing the constraint that the design parameters must satisfy.\\\"\\n},\\n\\\"return\\\": \\\"The optimal values of the design parameters 'x' and 'y' that minimize or maximize the objective function while satisfying the constraint.\\\",\\n\\\"depend\\\": {\\\"python library\\\": [\\\"pyomo\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a novice app developer who is struggling with image resolution across different devices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Resize Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to resize an image to desired dimensions. The user provides the path to the image and the desired size (width, height), and the interface will return a resized version of the image.\\\",\\n\\\"function_name\\\": \\\"resize_image\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\", \\\"size\\\"],\\n\\\"return\\\": \\\"String - path to the resized image\\\",\\n\\\"depend\\\": {\\\"python library\\\": \\\"Pillow\\\"}\\n}\"", "description": "tool development"}
{"input persona": "I am an aspiring author who is passionate about LGBT literature and has submitted a work for consideration in the previous year's Lambda Literary Awards.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Book Award Eligibility Checker Interface\\\",\\n  \\\"description\\\": \\\"Checks the eligibility of a book for the Lambda Literary Awards.\\\",\\n  \\\"function_name\\\": \\\"check_award_eligibility\\\",\\n  \\\"input_args\\\": \\\"book_title - The title of the book to check for eligibility.\\\",\\n  \\\"return\\\": \\\"A string stating whether or not the book is eligible for the Lambda Literary Awards.\\\",\\n  \\\"depend\\\": \\\"Python's requests library for making HTTP requests and BeautifulSoup for web scraping.\\\"\\n}\"", "description": "tool development"}
{"input persona": "an enthusiastic local baker from Baker County, Oregon", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bread Recipe Generation Interface\\\",\\n  \\\"description\\\": \\\"This interface generates detailed bread recipes based on user inputs. It leverages the capabilities of a large language model (GPT-3) to create recipes for a variety of bread types.\\\",\\n  \\\"function_name\\\": \\\"get_bread_recipe\\\",\\n  \\\"input_args\\\": \\\"bread_type - a string that specifies the type of bread for which the user wants a recipe\\\",\\n  \\\"return\\\": \\\"A string that contains a detailed recipe for the specified type of bread\\\",\\n  \\\"depend\\\": \\\"OpenAI's GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local business owner in Nevada who doesn't follow football", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Summarizer Interface\\\",\\n\\\"description\\\": \\\"This interface provides a summary of a football match using the match id. It gives the teams, score, date, and venue.\\\",\\n\\\"function_name\\\": \\\"summarize_football_match\\\",\\n\\\"input_args\\\": {\\\"match_id\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": \\\"Python requests library, TheSportsDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A social worker who recognizes the value of art therapy and often refers clients to the curator's exhibitions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a dictionary of client preferences for various art pieces and returns a list of recommended artworks or exhibitions. It uses a Keras recommendation system model trained on past exhibition data.\\\",\\n\\\"function_name\\\": \\\"recommend_artworks\\\",\\n\\\"input_args\\\": {\\\"client_preferences\\\": \\\"A dictionary where keys are item IDs and values are ratings\\\", \\\"model\\\": \\\"A trained Keras model\\\", \\\"n_recommendations\\\": \\\"The number of recommendations to return\\\"},\\n\\\"return\\\": \\\"A list of recommended item IDs\\\",\\n\\\"depend\\\": \\\"Keras library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Российский айтишник, который заботится о безопасности серверов.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface \\u0434\\u043b\\u044f \\u0441\\u043a\\u0430\\u043d\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f \\u043f\\u043e\\u0440\\u0442\\u043e\\u0432\\\",\\n\\\"description\\\": \\\"\\u042d\\u0442\\u043e\\u0442 \\u0438\\u043d\\u0442\\u0435\\u0440\\u0444\\u0435\\u0439\\u0441 \\u0438\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0435\\u0442 \\u0431\\u0438\\u0431\\u043b\\u0438\\u043e\\u0442\\u0435\\u043a\\u0443 socket \\u0432 Python \\u0434\\u043b\\u044f \\u0441\\u043a\\u0430\\u043d\\u0438\\u0440\\u043e\\u0432\\u0430\\u043d\\u0438\\u044f \\u0432\\u0441\\u0435\\u0445 \\u043e\\u0442\\u043a\\u0440\\u044b\\u0442\\u044b\\u0445 \\u043f\\u043e\\u0440\\u0442\\u043e\\u0432 \\u043d\\u0430 \\u0443\\u043a\\u0430\\u0437\\u0430\\u043d\\u043d\\u043e\\u043c \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0435.\\\",\\n\\\"function_name\\\": \\\"scan_open_ports\\\",\\n\\\"input_args\\\": \\\"server_ip\\\",\\n\\\"return\\\": \\\"\\u0421\\u043f\\u0438\\u0441\\u043e\\u043a \\u0432\\u0441\\u0435\\u0445 \\u043e\\u0442\\u043a\\u0440\\u044b\\u0442\\u044b\\u0445 \\u043f\\u043e\\u0440\\u0442\\u043e\\u0432 \\u043d\\u0430 \\u0441\\u0435\\u0440\\u0432\\u0435\\u0440\\u0435.\\\",\\n\\\"depend\\\": \\\"Python socket library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person dodging from the problems related to using the command line.", "synthesized text": "\"{\\n\\\"name\\\": \\\"File Transfer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to easily copy or move files/directories from one location to another without using the command line.\\\",\\n\\\"function_name\\\": \\\"file_transfer\\\",\\n\\\"input_args\\\": {\\n    \\\"source_path\\\": \\\"The path to the file/directory that needs to be moved or copied.\\\",\\n    \\\"destination_path\\\": \\\"The path where the file/directory should be moved or copied to.\\\",\\n    \\\"move\\\": \\\"Boolean value indicating whether the file/directory should be moved (True) or copied (False). Default is False.\\\"\\n},\\n\\\"return\\\": \\\"No return value. The file/directory is moved or copied to the specified location.\\\",\\n\\\"depend\\\": \\\"Python's built-in shutil and os libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gifted undergraduate pursuing dual degrees in computer science and mathematics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mathematical Function Plotting Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to plot a mathematical function over a specified range. The user inputs the function as a string and the range over which to plot the function. The interface then returns a plot of the function.\\\",\\n\\\"function_name\\\": \\\"plot_math_function\\\",\\n\\\"input_args\\\": [\\\"function\\\", \\\"range_start\\\", \\\"range_end\\\"],\\n\\\"return\\\": \\\"A plot of the specified mathematical function over the specified range.\\\",\\n\\\"depend\\\": [\\\"matplotlib\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A crime fiction author who believes that commercial success is an indication of literary merit", "synthesized text": "\"{\\n\\\"name\\\": \\\"Best Seller Book Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the top 5 best-selling books of a given genre, their authors, and their sales figures from the New York Times Best Seller List.\\\",\\n\\\"function_name\\\": \\\"get_best_selling_books\\\",\\n\\\"input_args\\\": \\\"genre\\\",\\n\\\"return\\\": \\\"List of dictionaries each containing details about one of the top 5 best-selling books in the given genre.\\\",\\n\\\"depend\\\": \\\"New York Times Best Seller List API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retiree who regularly donates toys and clothing to the orphanage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Donation Classification Interface\\\",\\n\\\"description\\\": \\\"Classifies the type of items (e.g., toys, clothing, books, etc.) based on the description provided by the user\\\",\\n\\\"function_name\\\": \\\"classify_donation_item\\\",\\n\\\"input_args\\\": {\\\"description\\\": \\\"text\\\"},\\n\\\"return\\\": \\\"category of the item\\\",\\n\\\"depend\\\": [\\\"huggingface: distilbert-base-uncased-finetuned-sst-2-english\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A high school science student who uses their grandparent's model trains to visualize physics problems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physics Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simulates the physics of a model train system. It takes in parameters such as the mass of the train, the coefficient of friction between the train and track, and the applied force, and simulates and visualizes the movement of the train.\\\",\\n\\\"function_name\\\": \\\"simulate_train_physics\\\",\\n\\\"input_args\\\": [\\\"mass\\\", \\\"friction\\\", \\\"force\\\", \\\"time\\\"],\\n\\\"return\\\": \\\"This function does not return a value, but visualizes the train's movement in a new window.\\\",\\n\\\"depend\\\": [\\\"Pygame\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A tech support agent who assists the analyst in identifying and tracking IP addresses associated with suspicious activities", "synthesized text": "\"{\\n\\\"name\\\": \\\"IP Address Information Interface\\\",\\n\\\"description\\\": \\\"This interface takes an IP address as input and returns the geolocation, ISP, and other relevant information about the IP address using the 'ip-api' service.\\\",\\n\\\"function_name\\\": \\\"get_ip_info\\\",\\n\\\"input_args\\\": {\\n    \\\"ip_address\\\": \\\"The IP address to track. e.g., '208.80.152.201'\\\"\\n  },\\n\\\"return\\\": {\\n    \\\"city\\\": \\\"The city where the IP is located. e.g., 'San Francisco'\\\",\\n    \\\"region\\\": \\\"The region where the IP is located. e.g., 'California'\\\",\\n    \\\"country\\\": \\\"The country where the IP is located. e.g., 'United States'\\\",\\n    \\\"zip\\\": \\\"The ZIP code where the IP is located. e.g., '94105'\\\",\\n    \\\"lat\\\": \\\"The latitude of the location. e.g., '37.7898'\\\",\\n    \\\"lon\\\": \\\"The longitude of the location. e.g., '-122.3942'\\\",\\n    \\\"timezone\\\": \\\"The timezone of the location. e.g., 'America/Los_Angeles'\\\",\\n    \\\"isp\\\": \\\"The Internet Service Provider. e.g., 'Wikimedia Foundation'\\\",\\n    \\\"org\\\": \\\"The organization that owns the IP address. e.g., 'Wikimedia Foundation'\\\",\\n    \\\"as\\\": \\\"The Autonomous System number and name. e.g., 'AS14907 Wikimedia US West'\\\",\\n    \\\"query\\\": \\\"The IP address queried. e.g., '208.80.152.201'\\\"\\n  },\\n\\\"depend\\\": \\\"requests, ip-api\\\"\\n}\"", "description": "tool development"}
{"input persona": "Conspiracy theorist and political commentary vlogger", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Fake News Detector Interface\\\",\\n    \\\"description\\\": \\\"An interface to classify news articles or headlines as either real or fake using a pre-trained model from Hugging Face.\\\",\\n    \\\"function_name\\\": \\\"detect_fake_news\\\",\\n    \\\"input_args\\\": \\\"news_text\\\",\\n    \\\"return\\\": \\\"A string, either 'fake' or 'real', indicating whether the news is predicted to be fake or real, respectively.\\\",\\n    \\\"depend\\\": \\\"Hugging Face's transformers library and Roberta model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A horticulture expert specializing in edible flowers and their culinary uses", "synthesized text": "\"{\\n \\\"name\\\": \\\"Edible Flower Information Interface\\\",\\n \\\"description\\\": \\\"A high-level interface that fetches detailed information about edible flowers from the Trefle API. The user inputs a flower name and the interface returns whether the flower is edible, its culinary uses, nutritional benefits, and possible recipes if available.\\\",\\n \\\"function_name\\\": \\\"get_edible_flower_info\\\",\\n \\\"input_args\\\": \\\"flower_name - a string representing the name of the flower\\\",\\n \\\"return\\\": \\\"A dictionary containing information about the flower's edibility, culinary uses, nutritional content, and recipes, or a string message if the flower is not edible or not found in the database.\\\",\\n \\\"depend\\\": \\\"Trefle API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Omosso resident, Catholic, has two children attending public school.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Homework Assistance Interface\\\",\\n\\\"description\\\": \\\"This interface uses Wolfram Alpha API to solve math problems inputted as a text string.\\\",\\n\\\"function_name\\\": \\\"solve_math_problem\\\",\\n\\\"input_args\\\": [\\\"question\\\"],\\n\\\"return\\\": \\\"The solution to the math problem.\\\",\\n\\\"depend\\\": [\\\"WolframAlpha API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A loyal PlayStation fanboy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to find the cheapest price for a specific game across different platforms.\\\", \\n\\\"function_name\\\": \\\"get_cheapest_price_for_game\\\", \\n\\\"input_args\\\": {\\\"game_name\\\": \\\"name of the game\\\", \\\"client_id\\\": \\\"Twitch developer client id\\\", \\\"client_secret\\\": \\\"Twitch developer client secret\\\"}, \\n\\\"return\\\": {\\\"cheapest_price\\\": \\\"cheapest price for the game\\\", \\\"cheapest_platform\\\": \\\"platform where the game is cheapest\\\"},\\n\\\"depend\\\": {\\\"Web APIs\\\": [\\\"IGDB API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A retired teacher with a passion for painting who seeks guidance on preserving their vision", "synthesized text": "\"{\\n\\\"name\\\": \\\"Eye Health Check Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface to remind users to take regular breaks and do eye exercises to help preserve their vision. The reminder runs indefinitely and triggers every defined interval in minutes.\\\",\\n\\\"function_name\\\": \\\"eye_health_reminder\\\",\\n\\\"input_args\\\": \\\"interval_in_minutes: The time interval in minutes at which the user wants to be reminded.\\\",\\n\\\"return\\\": \\\"This function runs indefinitely and does not return a value. It prints a message and opens a webpage with eye exercises.\\\",\\n\\\"depend\\\": \\\"Python's built-in libraries: time, webbrowser\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project sponsor who understands the importance of investing in testing resources to ensure a successful product launch", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Unit Test Generation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a function as input and generates a series of unit tests to ensure the function behaves as expected under various conditions.\\\",\\n\\\"function_name\\\": \\\"generate_unit_tests\\\",\\n\\\"input_args\\\": [\\\"func\\\"],\\n\\\"return\\\": \\\"No explicit return, but will raise exceptions if any of the generated tests fail.\\\",\\n\\\"depend\\\": \\\"Python libraries: PyTest, Hypothesis\\\"\\n}\"", "description": "tool development"}
{"input persona": "Belgium's Chief Public Health Officer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Virus Spread Prediction Interface\\\", \\n\\\"description\\\": \\\"This interface takes as input the current number of infected people, the number of recovered people, and the vaccination rate, and returns a prediction of the future spread of a virus.\\\", \\n\\\"function_name\\\": \\\"predict_virus_spread\\\", \\n\\\"input_args\\\": [\\\"current_infected\\\", \\\"current_recovered\\\", \\\"vaccination_rate\\\"], \\n\\\"return\\\": \\\"A prediction of the future spread of the virus.\\\", \\n\\\"depend\\\": \\\"tensorflow, pre-trained ML model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical aid agency that provides immediate medical assistance during disasters", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Emergency Medical Aid Interface\\\",\\n  \\\"description\\\": \\\"An interface to quickly analyze incoming emergency messages during a disaster, to extract location and medical needs.\\\",\\n  \\\"function_name\\\": \\\"extract_location_medical_needs\\\",\\n  \\\"input_args\\\": \\\"emergency_message\\\",\\n  \\\"return\\\": \\\"location, medical_needs\\\",\\n  \\\"depend\\\": \\\"IBM Watson's Natural Language Processing API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A petroleum chemist convinced traditional materials are more efficient", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Efficiency Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to compare the efficiency of a given material to traditional materials.\\\",\\n\\\"function_name\\\": \\\"compare_material_efficiency\\\",\\n\\\"input_args\\\": \\\"material_name - the name of the material to compare\\\",\\n\\\"return\\\": \\\"A string that tells whether the given material is more or less efficient than traditional materials.\\\",\\n\\\"depend\\\": \\\"A pre-trained machine learning model for material efficiency comparison.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A practicing Kabbalist.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gematria Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a Hebrew word as input and returns the Gematria (numerical value) of the word.\\\",\\n\\\"function_name\\\": \\\"get_gematria_value\\\",\\n\\\"input_args\\\": \\\"hebrew_word - A string representing a Hebrew word.\\\",\\n\\\"return\\\": \\\"An integer representing the Gematria value of the Hebrew word.\\\",\\n\\\"depend\\\": \\\"Python's built-in functions and dictionary data type.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical doctor who provides real-life cases and ethical dilemmas for discussion in class", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health Condition Diagnosis Interface\\\",\\n\\\"description\\\": \\\"This interface predicts possible health conditions based on the symptoms given in the text.\\\",\\n\\\"function_name\\\": \\\"predict_health_conditions\\\",\\n\\\"input_args\\\": {\\\"symptoms_text\\\": \\\"str\\\"},\\n\\\"return\\\": \\\"List of possible health conditions\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library and a text-classification model trained for predicting health conditions.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Cape Town mechanic who deals with German cars", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Diagnostics Interface\\\",\\n\\\"description\\\": \\\"An interface to get vehicle diagnostics report based on OBD-II trouble code\\\",\\n\\\"function_name\\\": \\\"get_vehicle_diagnostics\\\",\\n\\\"input_args\\\": {\\n    \\\"obd_code\\\": \\\"The specific OBD-II trouble code\\\"\\n},\\n\\\"return\\\": {\\n    \\\"code\\\": \\\"The input OBD-II code\\\",\\n    \\\"description\\\": \\\"Description of the issue corresponding to the code\\\",\\n    \\\"possible_causes\\\": \\\"Possible reasons causing the issue\\\",\\n    \\\"possible_solutions\\\": \\\"Potential solutions to fix the issue\\\"\\n},\\n\\\"depend\\\": \\\"OBD-Py Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mayor who actively supports initiatives promoting organ donation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Organ Donor Registration Interface\\\",\\n\\\"description\\\": \\\"This interface utilizes the Organ Donor Registry API to register a user as an organ donor. It simplifies the process of organ donor registration by providing a high-level function that takes in basic personal information and handles the API request.\\\",\\n\\\"function_name\\\": \\\"register_organ_donor\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"dob\\\", \\\"address\\\", \\\"contact_number\\\", \\\"email\\\"],\\n\\\"return\\\": \\\"A string message indicating whether the registration was successful or not.\\\",\\n\\\"depend\\\": \\\"Python's requests library and the Organ Donor Registry API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Physics student from Madagascar", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physics Equation Solver Interface\\\",\\n\\\"description\\\": \\\"An interface to solve physics equations. Users need to input a physics equation as text, and specify the variable to solve for. The interface will return the solved equation.\\\",\\n\\\"function_name\\\": \\\"solve_physics_equation\\\",\\n\\\"input_args\\\": [\\\"equation\\\", \\\"variable_to_solve\\\"],\\n\\\"return\\\": \\\"The solved equation as a list of solutions.\\\",\\n\\\"depend\\\": [\\\"SymPy Python Library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A parent of a shy 7-year-old looking for ways to build their confidence.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Confidence Building Activities Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface uses online sources to suggest activities that can help build confidence in children based on their age and interests.\\\",\\n\\\"function_name\\\": \\\"get_activity_suggestions\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the child\\\",\\n    \\\"interests\\\": \\\"The interests of the child\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended activities\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"bs4 (BeautifulSoup)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A caregiver seeking solutions for managing the medication and treatment of their elderly parent at home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface for setting up reminders for medication. It sends a reminder message every time it's time to take the medication.\\\",\\n\\\"function_name\\\": \\\"start_reminder\\\",\\n\\\"input_args\\\": {\\n    \\\"medication_name\\\": \\\"The name of the medication\\\",\\n    \\\"dosage\\\": \\\"The dosage of the medication\\\",\\n    \\\"frequency_in_hours\\\": \\\"The frequency of the medication in hours\\\"\\n},\\n\\\"return\\\": \\\"None. Prints a reminder message.\\\",\\n\\\"depend\\\": \\\"Python's built-in libraries: time, datetime\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property developer specializing in high-rise buildings and is in need of fire-resistant designs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fire Resistant Material Suggestions Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch fire-resistant properties of a material from NIST Fire Research Division's Material Database\\\",\\n\\\"function_name\\\": \\\"get_fire_resistant_properties\\\",\\n\\\"input_args\\\": \\\"material\\\",\\n\\\"return\\\": \\\"Fire-resistant properties of the material as a JSON object or an error message as a string\\\",\\n\\\"depend\\\": \\\"National Institute of Standards and Technology (NIST) Fire Research Division's Material Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A street artist collaborating on a public art project, combining graphic design and urban art", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Mural Design Optimization Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a machine learning model to optimize the color combination of a mural design. It takes the path to an image file of the mural design and returns an optimized version of the image with better color combinations.\\\",\\n  \\\"function_name\\\": \\\"optimize_mural_design\\\",\\n  \\\"input_args\\\": [\\\"path_to_img\\\"],\\n  \\\"return\\\": \\\"optimized_image\\\",\\n  \\\"depend\\\": [\\\"Python PIL library\\\", \\\"PyTorch\\\", \\\"Huggingface Transformers (openai/clip-vit-base-patch32 model)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A second-generation Tibetan teenager navigating cultural identity between Tibetan heritage and Swiss upbringing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tibetan to Swiss German Translation Interface\\\",\\n\\\"description\\\": \\\"This interface takes Tibetan text as input and returns the translated Swiss German text.\\\",\\n\\\"function_name\\\": \\\"translate_tibetan_to_swiss_german\\\",\\n\\\"input_args\\\": [\\\"tibetan_text\\\"],\\n\\\"return\\\": \\\"Swiss German text\\\",\\n\\\"depend\\\": [\\\"HuggingFace's Transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A beauty blogger who believes in the power of natural ingredients and DIY skincare", "synthesized text": "\"{\\n\\\"name\\\": \\\"Facial Ingredient Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of ingredients as input and returns a brief description of each ingredient, its purpose, and potential side effects if any.\\\",\\n\\\"function_name\\\": \\\"ingredient_analysis\\\",\\n\\\"input_args\\\": [\\\"ingredients\\\"],\\n\\\"return\\\": \\\"A string that includes the name, description, purpose, and potential side effects of each ingredient.\\\",\\n\\\"depend\\\": \\\"Open Food Facts API, Python requests library, and a large language model\\\"\\n}\"", "description": "tool development"}
{"input persona": "网络热点话题制作者", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u7f51\\u7edc\\u70ed\\u70b9\\u8bdd\\u9898\\u5236\\u4f5c\\u8005\\\",\\n\\\"description\\\": \\\"\\u4f7f\\u7528Twitter API\\u83b7\\u53d6\\u7ed9\\u5b9a\\u5730\\u7406\\u4f4d\\u7f6e\\u7684\\u70ed\\u95e8\\u8bdd\\u9898\\\",\\n\\\"function_name\\\": \\\"get_trending_topics\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"list of trending topics\\\",\\n\\\"depend\\\": \\\"tweepy library, Twitter API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of a kayaking forum with extensive knowledge about different waterways and their challenges", "synthesized text": "\"{\\n\\\"name\\\": \\\"Waterway Difficulty Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides users with a comprehensive analysis of a given waterway, including its length, elevation changes, current weather and water conditions, and an estimated difficulty rating.\\\",\\n\\\"function_name\\\": \\\"get_waterway_info\\\",\\n\\\"input_args\\\": \\\"waterway\\\",\\n\\\"return\\\": \\\"a dictionary with the length of the waterway (currently unavailable), its elevation, current weather conditions, and an estimated difficulty rating\\\",\\n\\\"depend\\\": \\\"Google Places API, Google Maps Elevation API, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A GFWC (General Federation of Women's Clubs) member who is also a home decor enthusiast.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interior Design Style Recommendation Interface\\\",\\n\\\"description\\\": \\\"A interface that uses a machine learning model to recommend an interior design style based on a user's description or a photo of a room.\\\",\\n\\\"function_name\\\": \\\"recommend_style\\\",\\n\\\"input_args\\\": [\\\"description\\\", \\\"img_url\\\"],\\n\\\"return\\\": \\\"A string representing the recommended interior design style.\\\",\\n\\\"depend\\\": [\\\"PIL\\\", \\\"requests\\\", \\\"tensorflow\\\", \\\"transformers pipeline\\\", \\\"Hugging Face pretrained model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A technical project manager responsible for overseeing the development and deployment of large-scale database systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Health Check Interface\\\",\\n\\\"description\\\": \\\"This interface returns information about the health of a PostgreSQL database, such as the number of active connections, the amount of disk space used, and the last time the database was accessed.\\\",\\n\\\"function_name\\\": \\\"get_db_health\\\",\\n\\\"input_args\\\": {\\n    \\\"dbname\\\": \\\"Name of the database\\\",\\n    \\\"user\\\": \\\"User name\\\",\\n    \\\"password\\\": \\\"Password\\\",\\n    \\\"host\\\": \\\"Host\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing the number of active connections, the disk space used, and the last access time of the database.\\\",\\n\\\"depend\\\": \\\"psycopg2 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of a tax-exempt organization oversight committee tasked with ensuring compliance and preventing abuse", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tax Exempt Organization Search\\\",\\n  \\\"description\\\": \\\"Checks the tax-exempt status of an organization using its EIN.\\\",\\n  \\\"function_name\\\": \\\"check_tax_exempt_status\\\",\\n  \\\"input_args\\\": {\\n    \\\"ein\\\": \\\"The Employer Identification Number of the organization.\\\"\\n  },\\n  \\\"return\\\": \\\"The tax-exempt status of the organization or an error message if the EIN is invalid or the service is unavailable.\\\",\\n  \\\"depend\\\": \\\"IRS API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow sweet tooth struggling with dental problems, sharing tips and encouragement", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sugar Intake Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to track their sugar intake by inputting the name of a food item they have consumed. It uses the Edamam food database API to retrieve nutritional information about the food item.\\\",\\n\\\"function_name\\\": \\\"get_food_sugar_content\\\",\\n\\\"input_args\\\": \\\"food_name - a string representing the name of a food item\\\",\\n\\\"return\\\": \\\"A float representing the sugar content (in grams) of the food item, or 'No data available' if the API does not return any data for the specified food item.\\\",\\n\\\"depend\\\": \\\"Edamam Food Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An empathetic admission officer who values diverse backgrounds in the admission process", "synthesized text": "\"{\\n\\\"name\\\": \\\"Applicant Diversity Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface takes an applicant's essay as input and predicts the applicant's background diversity.\\\", \\n\\\"function_name\\\": \\\"analyze_diversity\\\", \\n\\\"input_args\\\": \\\"applicant_essay\\\", \\n\\\"return\\\": \\\"diversity_level\\\", \\n\\\"depend\\\": {\\\"libraries\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"sklearn\\\"], \\\"model\\\": \\\"Pre-trained RandomForest model for diversity prediction\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A Kiwi father who cares for his family's safety.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Earthquake Alert Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest earthquake data from the GeoNet API and filters out earthquakes that have a magnitude less than the user-specified threshold.\\\",\\n\\\"function_name\\\": \\\"get_latest_earthquakes\\\",\\n\\\"input_args\\\": \\\"magnitude - a float value representing the minimum magnitude of the earthquakes to return\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the location and magnitude of an earthquake.\\\",\\n\\\"depend\\\": \\\"requests library, GeoNet API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former basketball player for the 2022-23 UNLV Runnin' Rebels team", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Player Stats Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch a basketball player's stats for a specific season\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": [\\\"player_name\\\", \\\"season\\\"],\\n\\\"return\\\": \\\"dictionary of player's stats\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"MySportsFeeds API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A seasoned competitive dancer looking for a new partner to train and compete with in foxtrot", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dance Partner Finder Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to find potential dance partners matching their dance style, location, and level of experience.\\\",\\n\\\"function_name\\\": \\\"find_dance_partners\\\",\\n\\\"input_args\\\": {\\n  \\\"dance_style\\\": \\\"The style of dance the user is interested in (e.g., 'foxtrot').\\\",\\n  \\\"location\\\": \\\"The user's current location (e.g., 'New York City').\\\",\\n  \\\"experience_level\\\": \\\"The user's level of dance experience (e.g., 'beginner', 'intermediate', 'advanced').\\\"\\n},\\n\\\"return\\\": \\\"A list of potential dance partners' names.\\\",\\n\\\"depend\\\": \\\"Dance Partner Finder API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced bamboo farmer who shares advanced techniques for maximizing bamboo growth and harvest", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bamboo Growth Prediction Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to predict bamboo growth based on environmental parameters such as temperature, rainfall, and soil pH.\\\",\\n  \\\"function_name\\\": \\\"predict_bamboo_growth\\\",\\n  \\\"input_args\\\": {\\n    \\\"temp\\\": \\\"Temperature in degrees Celsius.\\\",\\n    \\\"rainfall\\\": \\\"Rainfall in mm.\\\",\\n    \\\"soil_ph\\\": \\\"Soil pH level.\\\"\\n  },\\n  \\\"return\\\": \\\"Predicted bamboo growth.\\\",\\n  \\\"depend\\\": \\\"This function relies on the sklearn library and a pre-trained machine learning model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skeptic retiree who often engages in friendly debates about space exploration cost effectiveness", "synthesized text": "\"{\\n\\\"name\\\": \\\"Space Exploration Cost Data Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches data on various space exploration missions from NASA's APIs and calculates their cost effectiveness in terms of cost and scientific return.\\\",\\n\\\"function_name\\\": \\\"get_space_mission_cost_effectiveness\\\",\\n\\\"input_args\\\": \\\"mission_name - The name or ID of the space mission\\\",\\n\\\"return\\\": \\\"cost_effectiveness - The cost effectiveness of the mission, calculated as scientific return divided by mission cost\\\",\\n\\\"depend\\\": \\\"requests, json, NASA's APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A theology student studying the impact of interreligious dialogue on social cohesion", "synthesized text": "\"{\\n\\\"name\\\": \\\"Religious Text Similarity Interface\\\",\\n\\\"description\\\": \\\"An interface for comparing the semantic similarity of two pieces of religious text. Useful in interreligious dialogue to find common moral grounds or teachings.\\\",\\n\\\"function_name\\\": \\\"compute_similarity\\\",\\n\\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n\\\"return\\\": \\\"A similarity score indicating how similar the two texts are in terms of meaning. The score ranges from -1 (completely dissimilar) to 1 (exactly similar).\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A priest who often orders bread for the church's weekly communion", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bakery Order Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to order bread from a bakery by specifying the type of bread, the quantity, and the delivery date.\\\",\\n\\\"function_name\\\": \\\"place_bakery_order\\\",\\n\\\"input_args\\\": [\\\"bread_type\\\", \\\"quantity\\\", \\\"delivery_date\\\"],\\n\\\"return\\\": \\\"A string indicating whether the order was placed successfully or not.\\\",\\n\\\"depend\\\": \\\"Requests library, Bakery Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A self-made millionaire who started from humble beginnings and built a successful empire in the same industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Health Check Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and returns key financial ratios of a company based on the given ticker symbol, providing a snapshot of the company's financial health.\\\",\\n\\\"function_name\\\": \\\"get_financial_ratios\\\",\\n\\\"input_args\\\": \\\"symbol - A string that represents the ticker symbol of a company\\\",\\n\\\"return\\\": \\\"A dictionary containing the Debt-to-Equity ratio, Current Ratio, Return on Assets, and Earnings per Share of the company\\\",\\n\\\"depend\\\": \\\"This function depends on the requests library for making HTTP requests and the Alpha Vantage API for financial data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former Richmond Spider football player who's always been proud of his team's glory days.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Team Statistics Interface\\\",\\n\\\"description\\\": \\\"Provides annual statistics for the Richmond Spiders Football team using the Sports Open Data API.\\\",\\n\\\"function_name\\\": \\\"get_team_statistics\\\",\\n\\\"input_args\\\": [\\\"year\\\"],\\n\\\"return\\\": {\\\"year\\\": \\\"int\\\", \\n            \\\"team_name\\\": \\\"str\\\", \\n            \\\"matches_played\\\": \\\"int\\\",\\n            \\\"wins\\\": \\\"int\\\",\\n            \\\"draws\\\": \\\"int\\\",\\n            \\\"losses\\\": \\\"int\\\",\\n            \\\"goals_for\\\": \\\"int\\\",\\n            \\\"goals_against\\\": \\\"int\\\",\\n            \\\"points\\\": \\\"int\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"Sports Open Data API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A diplomat from Egypt's Cultural Affairs Office, offering support and guidance on the exhibition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Art Exhibition Information Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts important details about an art exhibition from a given URL.\\\",\\n\\\"function_name\\\": \\\"extract_exhibition_info\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": {\\\"Exhibition Name\\\": \\\"string\\\", \\\"Artists\\\": \\\"list of strings\\\", \\\"Dates\\\": \\\"string\\\", \\\"Location\\\": \\\"string\\\", \\\"Description\\\": \\\"string\\\"},\\n\\\"depend\\\": [\\\"python libraries (BeautifulSoup, requests)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a newcomer cyber security analyst in Patrick Sullivan's team", "synthesized text": "\"{\\n\\\"name\\\": \\\"IP Address Reputation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the VirusTotal API to get the reputation of an IP address. It returns a score between 0 (safe) and 100 (malicious).\\\",\\n\\\"function_name\\\": \\\"get_ip_reputation\\\",\\n\\\"input_args\\\": [\\\"ip_address\\\"],\\n\\\"return\\\": \\\"Reputation score of the IP address.\\\",\\n\\\"depend\\\": \\\"VirusTotal API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a lifetime tenant who has lived in Jaipur, Rajasthan and is very familiar with the local housing rental agreements.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rental Agreement Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface extracts key information from a rental agreement PDF file by first extracting the text from the PDF and then using a pre-trained NER model to identify and extract specific pieces of information like person names and locations.\\\",\\n\\\"function_name\\\": \\\"analyze_rental_agreement\\\",\\n\\\"input_args\\\": [\\\"pdf_path\\\"],\\n\\\"return\\\": \\\"A dictionary containing key information extracted from the agreement.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"PyPDF2\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"dbmdz/bert-large-cased-finetuned-conll03-english\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a devoted Spengler Cup fan, originally from Davos, Switzerland and now living in the United States.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Match Time Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts the time of a sports match from one timezone to another. It is designed for sports fans who live in a different timezone than where the match is held.\\\",\\n\\\"function_name\\\": \\\"convert_match_time\\\",\\n\\\"input_args\\\": {\\\"original_time\\\": \\\"The time of the match in the original timezone (format: 'YYYY-MM-DD HH:MM:SS')\\\", \\\"target_timezone\\\": \\\"The timezone to convert the match time to (e.g., 'US/Eastern')\\\"},\\n\\\"return\\\": \\\"The time of the match in the target timezone (format: 'YYYY-MM-DD HH:MM:SS')\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"datetime\\\", \\\"pytz\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A funding agency representative who evaluates and supports research proposals related to virtual reality and neuroscience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Research Paper Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface fetches existing research papers using the Semantic Scholar API based on a given query and computes their semantic similarity to a provided research proposal using the Sentence-Transformers model from HuggingFace.\\\",\\n\\\"function_name\\\": \\\"research_similarity\\\",\\n\\\"input_args\\\": {\\n    \\\"proposal\\\": \\\"Text of the research proposal that you want to check for similarity.\\\",\\n    \\\"query\\\": \\\"Query to fetch relevant papers from Semantic Scholar API.\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples, each containing the title of a research paper and its similarity to the proposal (sorted in descending order of similarity).\\\",\\n\\\"depend\\\": \\\"Python's requests library, Sentence-Transformers from HuggingFace, Semantic Scholar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young couple embarking on a home renovation project seeking advice on structural integrity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Structural Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface uses a pre-trained deep learning model to analyze the structural integrity of a building given its blueprint or 3D model.\\\", \\n\\\"function_name\\\": \\\"analyze_structure\\\", \\n\\\"input_args\\\": \\\"path_to_blueprint - the path to the blueprint or 3D model file\\\", \\n\\\"return\\\": \\\"A numpy array representing the analysis of the structure's integrity.\\\", \\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, a pre-trained model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physics professor who believes that metaphysics is an outdated and irrelevant field of study", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Quantum Circuit Simulation Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to simulate the execution of a quantum circuit using the Qiskit library. Users define the quantum circuit by specifying the number of qubits and a list of gates, and the interface simulates the circuit and returns the results.\\\",\\n  \\\"function_name\\\": \\\"simulate_quantum_circuit\\\",\\n  \\\"input_args\\\": { \\\"num_qubits\\\": \\\"integer\\\", \\\"gates\\\": \\\"list of dictionaries\\\" },\\n  \\\"return\\\": \\\"dictionary\\\",\\n  \\\"depend\\\": [\\\"Qiskit library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A radio host who specializes in playing hits from the 60s and 70s, including The Monkees", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Song Lyrics Interface\\\",\\n  \\\"description\\\": \\\"Fetches the lyrics of a song given the artist and song title\\\",\\n  \\\"function_name\\\": \\\"get_song_lyrics\\\",\\n  \\\"input_args\\\": [\\\"artist\\\", \\\"title\\\"],\\n  \\\"return\\\": \\\"Lyrics of the song as a string\\\",\\n  \\\"depend\\\": \\\"requests library, Lyrics.ovh API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior materials scientist who is primarily focused on the development and application of Ti6Al4V Powder", "synthesized text": "\"{\\n\\\"name\\\": \\\"Metal Density Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the density of a metal alloy given its composition.\\\",\\n\\\"function_name\\\": \\\"predict_metal_density\\\",\\n\\\"input_args\\\": [\\\"model_path\\\", \\\"composition\\\"],\\n\\\"return\\\": \\\"Predicted density of the metal alloy\\\",\\n\\\"depend\\\": [\\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A dance studio owner looking to improve their online presence and attract more students", "synthesized text": "\"{\\n\\\"name\\\": \\\"Website SEO Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Moz or Ahrefs API to analyze the SEO of a user's website, providing information on top keywords, backlinks, domain authority, and more.\\\",\\n\\\"function_name\\\": \\\"analyze_seo\\\",\\n\\\"input_args\\\": \\\"website_url\\\",\\n\\\"return\\\": \\\"A JSON object containing the SEO analysis of the website.\\\",\\n\\\"depend\\\": \\\"Moz or Ahrefs API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another local business owner who successfully implemented coding in their own company and can share their experiences and best practices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Customer Churn Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts whether a customer will churn or not based on their data\\\",\\n\\\"function_name\\\": \\\"predict_customer_churn\\\",\\n\\\"input_args\\\": \\\"customer_data\\\",\\n\\\"return\\\": \\\"Churn or No Churn prediction\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers Library, Pre-trained ML model (e.g., DialoGPT-large)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a loyal fan of CS Oașul who lives in Negrești-Oaș", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the outcome of a football match between two teams using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_match_outcome\\\",\\n\\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\"],\\n\\\"return\\\": \\\"A string predicting the outcome of the match.\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A scientist who finds inspiration in the unpredictable patterns of chaos theory", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chaos Theory Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface generates a 3D plot of the Lorenz Attractor, a system of differential equations that exhibits chaotic behavior. The user specifies the number of steps for the simulation.\\\",\\n\\\"function_name\\\": \\\"plot_lorenz_attractor\\\",\\n\\\"input_args\\\": \\\"num_steps: The number of steps for the simulation to run for.\\\",\\n\\\"return\\\": \\\"A 3D plot of the Lorenz Attractor.\\\",\\n\\\"depend\\\": \\\"The function uses the numpy, scipy.integrate, matplotlib.pyplot, and mpl_toolkits.mplot3d Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow computer scientist who continues to work on advancing artificial intelligence and seeks advice and guidance from the retired computer scientist", "synthesized text": "\"{\\n  \\\"name\\\": \\\"AI Model Performance Evaluation Interface\\\",\\n  \\\"description\\\": \\\"This interface evaluates the performance of an AI model by calculating different metrics, including accuracy, precision, recall, f1 score, and the confusion matrix.\\\",\\n  \\\"function_name\\\": \\\"model_performance_evaluation\\\",\\n  \\\"input_args\\\": {\\n    \\\"y_true\\\": \\\"A list of actual values.\\\",\\n    \\\"y_predicted\\\": \\\"A list of the model's predicted values.\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary of different performance metrics.\\\",\\n  \\\"depend\\\": \\\"The function leverages the sklearn library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mother of a two-year-old child living in a rental house built before 1980 in Connecticut.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lead Exposure Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface assesses the risk level of lead exposure in a house built before 1980 based on the U.S. Environmental Protection Agency's Lead-Safe Certified Guide to Renovate Right API.\\\",\\n\\\"function_name\\\": \\\"get_lead_risk\\\",\\n\\\"input_args\\\": [\\\"year_built\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"Risk level of lead exposure\\\",\\n\\\"depend\\\": \\\"requests library, U.S. Environmental Protection Agency's Lead-Safe Certified Guide to Renovate Right API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A big fan of artistic gymnastics & Brisa Ailen Carraro", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Gymnastics Skill Detection Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses OpenPose to detect and identify gymnastics skills from a video.\\\",\\n  \\\"function_name\\\": \\\"detect_skills\\\",\\n  \\\"input_args\\\": \\\"path_to_video\\\",\\n  \\\"return\\\": \\\"A list of detected gymnastics skills\\\",\\n  \\\"depend\\\": \\\"OpenPose library, OpenCV library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a registered nurse who works in a maternity ward", "synthesized text": "\"{\\n\\\"name\\\": \\\"Breastfeeding Advice Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained Hugging Face model to provide answers to common questions about breastfeeding.\\\",\\n\\\"function_name\\\": \\\"breastfeeding_advice\\\",\\n\\\"input_args\\\": \\\"question - A string containing a question about breastfeeding.\\\",\\n\\\"return\\\": \\\"A string containing the answer to the asked question.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skeptic who dislikes any form of collaboration.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Task Management Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to add, view, update, and delete tasks from their to-do list.\\\",\\n\\\"function_name\\\": [\\\"initialize_db\\\", \\\"add_task\\\", \\\"get_tasks\\\", \\\"update_task\\\", \\\"delete_task\\\"],\\n\\\"input_args\\\": {\\\"initialize_db\\\": [], \\\"add_task\\\": [\\\"task\\\"], \\\"get_tasks\\\": [], \\\"update_task\\\": [\\\"id\\\", \\\"status\\\"], \\\"delete_task\\\": [\\\"id\\\"]},\\n\\\"return\\\": {\\\"initialize_db\\\": \\\"None\\\", \\\"add_task\\\": \\\"None\\\", \\\"get_tasks\\\": \\\"List of tasks with their id, description and status\\\", \\\"update_task\\\": \\\"None\\\", \\\"delete_task\\\": \\\"None\\\"},\\n\\\"depend\\\": \\\"SQLite\\\"\\n}\"", "description": "tool development"}
{"input persona": "A group of history enthusiasts who are eager to learn about Malta's rich heritage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Events Interface\\\",\\n\\\"description\\\": \\\"This interface fetches historical events related to Malta from the Wikipedia API. The user inputs the year they are interested in, and the interface returns all the historical events of Malta that happened in that year.\\\",\\n\\\"function_name\\\": \\\"get_malta_historical_events\\\",\\n\\\"input_args\\\": \\\"year\\\",\\n\\\"return\\\": \\\"A list of historical events and their brief descriptions.\\\",\\n\\\"depend\\\": \\\"Wikipedia API, Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated leader who ensures that all customers receive excellent service and that the store remains well-stocked", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Inventory Management Interface\\\",\\n\\\"description\\\": \\\"Predicts the inventory levels of a store based on past sales data\\\",\\n\\\"function_name\\\": \\\"predict_inventory\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A dictionary with product names as keys and predicted inventory levels as values\\\",\\n\\\"depend\\\": \\\"pandas, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biochemist who is investigating the molecular mechanisms underlying stem cell differentiation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Protein Interaction Network Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a protein name as input and plots an interaction network of the protein with other proteins, using data from the BioGRID database.\\\",\\n\\\"function_name\\\": \\\"plot_protein_interactions\\\",\\n\\\"input_args\\\": \\\"protein: The official symbol of the protein of interest, as a string.\\\",\\n\\\"return\\\": \\\"A plot of the interaction network of the input protein with other proteins.\\\",\\n\\\"depend\\\": \\\"requests, networkx, matplotlib, BioGRID API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young English teacher residing in Papua New Guinea who loves football.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to know the upcoming match schedule for their favorite football team. It leverages the Football Data API to retrieve the data.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_matches\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary contains the date of the match, and the home and away teams.\\\",\\n\\\"depend\\\": \\\"Web API (Football Data API)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long-time resident of Seoul, familiar with the local culture and traditions but not particularly interested in tourist activities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Korean Name Romanization Interface\\\",\\n\\\"description\\\": \\\"This interface receives a Korean name in Hangul script and returns its Romanized version.\\\",\\n\\\"function_name\\\": \\\"romanize_korean_name\\\",\\n\\\"input_args\\\": \\\"korean_name - A string representing a Korean name in Hangul script\\\",\\n\\\"return\\\": \\\"A string representing the Romanized version of the Korean name\\\",\\n\\\"depend\\\": \\\"Python library: hangul_romanize\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Democratic political strategist who dislikes condescending remarks.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Profanity Filter Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to detect and filter out offensive content from a given text.\\\",\\n\\\"function_name\\\": \\\"filter_offensive_content\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"Filtered text with offensive words replaced by asterisks.\\\",\\n\\\"depend\\\": \\\"Hugging Face's 'cardiffnlp/twitter-roberta-base-offensive' model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An instructional designer who relies on the developer's expertise to create engaging e-learning modules", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interactive Quiz Interface\\\",\\n\\\"description\\\": \\\"This interface accepts text content from an e-learning module and generates multiple-choice quiz questions to engage learners.\\\",\\n\\\"function_name\\\": \\\"generate_quiz_questions\\\",\\n\\\"input_args\\\": \\\"text_content\\\",\\n\\\"return\\\": \\\"A list of generated multiple-choice quiz questions.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a long-term resident in Tampico, IL who loves DIY home improvement projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Home Design Interface\\\", \\n\\\"description\\\": \\\"This interface takes in the dimensions of the user's home and returns a 3D model of the home\\\", \\n\\\"function_name\\\": \\\"draw_home\\\", \\n\\\"input_args\\\": [\\\"length\\\", \\\"width\\\", \\\"height\\\"], \\n\\\"return\\\": \\\"A new window with a 3D model of the home\\\", \\n\\\"depend\\\": \\\"Python libraries: Pygame, PyOpenGL\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Bavarian stand-up comedian who occasionally performs at the Munich Lustspielhaus", "synthesized text": "\"{\\n\\\"name\\\": \\\"Joke Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a joke related to a given theme or topic using a pre-trained language model from Hugging Face (GPT-2).\\\",\\n\\\"function_name\\\": \\\"generate_joke\\\",\\n\\\"input_args\\\": \\\"theme - a string representing the theme or topic for the joke\\\",\\n\\\"return\\\": \\\"A string representing the generated joke\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library (GPT-2 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A burglar who only steals hi-tech gadgets.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Device Price Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the price range of a tech gadget based on current online prices from eBay and Amazon.\\\",\\n\\\"function_name\\\": \\\"estimate_gadget_price\\\",\\n\\\"input_args\\\": \\\"gadget_name - a string that represents the name and model of the gadget\\\",\\n\\\"return\\\": \\\"A dictionary with the keys 'min' and 'max' that represent the minimum and maximum estimated prices of the gadget respectively.\\\",\\n\\\"depend\\\": \\\"Python's requests library, eBay API, Amazon API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A supporter of minimum alcohol pricing policies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alcohol Price Check Interface\\\",\\n\\\"description\\\": \\\"This interface returns the minimum and average price of a specified type and brand of alcohol in the market.\\\",\\n\\\"function_name\\\": \\\"get_alcohol_price\\\",\\n\\\"input_args\\\": [\\\"alcohol_type\\\", \\\"brand\\\"],\\n\\\"return\\\": \\\"Minimum price and average price of the specified alcohol\\\",\\n\\\"depend\\\": \\\"Web APIs (https://api.alcohol-price.com/)\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a politically active resident of North Ayrshire, passionate about local governance and community development.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Government Meeting Schedule Interface\\\",\\n\\\"description\\\": \\\"An interface that scrapes the North Ayrshire Council's online meeting calendar and returns the dates and times of upcoming meetings for a specified committee.\\\",\\n\\\"function_name\\\": \\\"get_committee_meeting_schedule\\\",\\n\\\"input_args\\\": [\\\"committee_name\\\"],\\n\\\"return\\\": \\\"A list of strings, each string represents the date and time of an upcoming meeting.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a casual observer who doesn't work in industrial refrigeration but loves to travel for global exhibitions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Exhibition Finder Interface\\\",\\n\\\"description\\\": \\\"An interface to search for exhibitions at a given location related to user's interest. It uses Eventful API to fetch the data.\\\",\\n\\\"function_name\\\": \\\"get_nearby_exhibitions\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\", \\\"interest\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"List of dictionaries, where each dictionary represents an exhibition with keys - 'title', 'venue', 'city', 'start_time'.\\\",\\n\\\"depend\\\": \\\"requests library, Eventful API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a casual user of SME-size database solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Query Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of querying from a PostgreSQL database. The user needs to provide the database credentials and the SQL query, and the interface will return the query results.\\\",\\n\\\"function_name\\\": \\\"execute_query\\\",\\n\\\"input_args\\\": [\\\"username\\\", \\\"password\\\", \\\"dbname\\\", \\\"host\\\", \\\"sql_query\\\"],\\n\\\"return\\\": \\\"DataFrame with query results\\\",\\n\\\"depend\\\": \\\"psycopg2, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A scheduler responsible for managing the government spokesperson's busy calendar and organizing press conferences", "synthesized text": "\"{\\n\\\"name\\\": \\\"Press Conference Scheduling Interface\\\",\\n\\\"description\\\": \\\"An interface for scheduling press conferences using Google Calendar's API. It takes the date, time, duration, and details of the press conference as inputs, adds the event to the spokesperson's calendar and returns a confirmation once the event is successfully scheduled.\\\",\\n\\\"function_name\\\": \\\"schedule_press_conference\\\",\\n\\\"input_args\\\": [\\\"date_time_str\\\", \\\"duration\\\", \\\"summary\\\", \\\"description\\\"],\\n\\\"return\\\": \\\"Confirmation ID of the scheduled event\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly Slovak art enthusiast who has a personal admiration for Ester Šimerová-Martinčeková", "synthesized text": "\"{\\n\\\"name\\\": \\\"Art Recognition Interface\\\",\\n\\\"description\\\": \\\"Generate an image from a text description using OpenAI's DALL-E model\\\",\\n\\\"function_name\\\": \\\"generate_artwork_from_description\\\",\\n\\\"input_args\\\": \\\"description - a text description of an artwork\\\",\\n\\\"return\\\": \\\"A generated image as a numpy array\\\",\\n\\\"depend\\\": \\\"torch, transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A digital programmer skilled in developing AR applications", "synthesized text": "\"{\\n  \\\"name\\\": \\\"AR Object Placement Interface\\\",\\n  \\\"description\\\": \\\"This interface places a specified 3D object at given coordinates in an AR environment. The object will appear to be positioned in the real world when viewed through an ARCore-supported device.\\\",\\n  \\\"function_name\\\": \\\"place_ar_object\\\",\\n  \\\"input_args\\\": [\\\"object_name\\\", \\\"x_coordinate\\\", \\\"y_coordinate\\\", \\\"z_coordinate\\\"],\\n  \\\"return\\\": \\\"AR environment with the object placed at the specified coordinates\\\",\\n  \\\"depend\\\": \\\"ARCore\\\"\\n}\"", "description": "tool development"}
{"input persona": "A historian specializing in Asian currencies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface that provides historical currency conversion rates between two given currencies on a particular date.\\\",\\n\\\"function_name\\\": \\\"get_historical_exchange_rate\\\",\\n\\\"input_args\\\": [\\\"source_currency\\\", \\\"target_currency\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"Conversion rate for the provided currencies on the given date.\\\",\\n\\\"depend\\\": \\\"ExchangeRatesAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Khartoum-native who teaches French at the University of Khartoum, familiar with Garden City and its environs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traffic Congestion Prediction Interface\\\", \\n\\\"description\\\": \\\"This interface predicts the traffic congestion at a future time between two locations using real-time traffic data and a pre-trained machine learning model.\\\", \\n\\\"function_name\\\": \\\"predict_future_traffic\\\", \\n\\\"input_args\\\": [\\\"location\\\", \\\"target_location\\\", \\\"future_time\\\"], \\n\\\"return\\\": \\\"Estimated traffic congestion at the future time in seconds.\\\", \\n\\\"depend\\\": \\\"Google Maps API, TensorFlow, TensorFlow Hub, Pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A UI/UX designer providing detailed wireframes and design mockups for the front-end developer to implement", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Design Mockup to HTML Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a design mockup and converts it into HTML/CSS code, making the process of implementing design mockups easier for front-end developers.\\\",\\n  \\\"function_name\\\": \\\"design_mockup_to_html\\\",\\n  \\\"input_args\\\": [\\\"file_path\\\"],\\n  \\\"return\\\": \\\"HTML/CSS code equivalent of the design mockup.\\\",\\n  \\\"depend\\\": [\\\"htmlai library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a learning Bash scripting tutor", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bash Scripting Tutor\\\",\\n  \\\"description\\\": \\\"This interface provides explanations for Bash commands or scripts, making it easier for beginners to learn Bash scripting.\\\",\\n  \\\"function_name\\\": \\\"bash_scripting_tutor\\\",\\n  \\\"input_args\\\": {\\n    \\\"command\\\": \\\"A string containing the Bash command or script that the user wants to understand.\\\"\\n  },\\n  \\\"return\\\": \\\"A string containing a simple explanation of what the input Bash command or script does.\\\",\\n  \\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a biologist and female politician from Angola.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Species Classification Interface\\\",\\n\\\"description\\\": \\\"This interface classifies the species category based on an input image file.\\\",\\n\\\"function_name\\\": \\\"classify_species\\\",\\n\\\"input_args\\\": \\\"path_to_img - String path to the image file\\\",\\n\\\"return\\\": \\\"A numpy array representing the species categories\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, and a pretrained bird classifier model from tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A digital marketing expert specializing in the food and beverage industry, offering guidance on effective online advertising campaigns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Facebook Ad Insights Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve key performance metrics for a specific Facebook ad using the Facebook Graph API\\\",\\n\\\"function_name\\\": \\\"get_facebook_ad_insights\\\",\\n\\\"input_args\\\": {\\n    \\\"access_token\\\": \\\"User's access token to interact with the Facebook Graph API\\\",\\n    \\\"ad_id\\\": \\\"Identifier for the specific Facebook ad\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing five key performance metrics: impressions, clicks, spend, reach, and frequency\\\",\\n\\\"depend\\\": \\\"Python's requests library and the Facebook Graph API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wealthy property owner who offers their exclusive estates and properties as shooting locations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Popularity Prediction Interface\\\", \\n\\\"description\\\": \\\"Predict the popularity of a property for shooting based on its features. The higher the score, the more popular the property.\\\", \\n\\\"function_name\\\": \\\"predict_property_popularity\\\", \\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\", \\\"area\\\": \\\"string\\\", \\\"num_rooms\\\": \\\"string\\\", \\\"style\\\": \\\"string\\\", \\\"view\\\": \\\"string\\\"}, \\n\\\"return\\\": {\\\"Popularity Score\\\": \\\"float between 0 and 100\\\"}, \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"torch\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"bert-base-cased-finetuned-mrpc from Huggingface\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A credit card enthusiast, a 'points' collector, and a somewhat casual tennis fan.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Credit Card Points to Flight Miles Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts credit card points into flight miles. Users need to input the name of their credit card and the number of points they have, and the interface will return the estimated equivalent flight miles they can get.\\\",\\n\\\"function_name\\\": \\\"convert_points_to_miles\\\",\\n\\\"input_args\\\": {\\n    \\\"card_name\\\": \\\"The name of the user's credit card\\\",\\n    \\\"points\\\": \\\"The number of points the user has\\\"\\n},\\n\\\"return\\\": \\\"The estimated equivalent flight miles that the user can get\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\"],\\n    \\\"web_APIs\\\": [\\\"Airline or Credit Card Company API\\\"],\\n    \\\"machine_learning_models\\\": []\\n}\\n}\"", "description": "tool development"}
{"input persona": "A musician who channels Alice Cooper's energy and stage presence in their own performances", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Genre Classification Interface\\\",\\n\\\"description\\\": \\\"An interface to classify the genre of a song using the Spotify Web API and a pre-trained machine learning model from tensorflow_hub. The user inputs the Spotify track ID, and the interface returns the predicted genre of the song.\\\",\\n\\\"function_name\\\": \\\"classify_genre\\\",\\n\\\"input_args\\\": [\\\"track_id\\\"],\\n\\\"return\\\": \\\"Predicted genre of the song\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"spotipy\\\"], \\\"Web APIs\\\": [\\\"Spotify Web API\\\"], \\\"Machine Learning Models\\\": [\\\"https://tfhub.dev/google/nnlm-en-dim128/2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a California-based worker experiencing unemployment", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Unemployment Insurance Claim Status Check Interface\\\",\\n  \\\"description\\\": \\\"An interface to check the status of an unemployment insurance claim for a California-based worker. The user provides their Social Security Number, and the function returns the status of their claim.\\\",\\n  \\\"function_name\\\": \\\"check_unemployment_claim_status\\\",\\n  \\\"input_args\\\": [\\\"ssn\\\"],\\n  \\\"return\\\": \\\"Status of the unemployment claim (e.g., 'Pending', 'Approved', 'Denied')\\\",\\n  \\\"depend\\\": [\\\"requests library\\\", \\\"California Employment Development Department API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A competitive dressage horse being treated for a recurrent joint issue", "synthesized text": "\"{\\n  \\\"name\\\": \\\"AI-Assisted Veterinary Treatment Tracker\\\",\\n  \\\"description\\\": \\\"A high-level interface to record and track the treatment details of a horse for joint issues.\\\",\\n  \\\"function_name\\\": \\\"add_treatment_record\\\",\\n  \\\"input_args\\\": {\\n    \\\"horse_name\\\": \\\"Name of the horse\\\",\\n    \\\"treatment_date\\\": \\\"Date when the treatment was given\\\",\\n    \\\"joint_treated\\\": \\\"The joint that was treated\\\",\\n    \\\"treatment_given\\\": \\\"The specific treatment that was given\\\",\\n    \\\"notes\\\": \\\"Any additional notes about the treatment\\\"\\n  },\\n  \\\"return\\\": \\\"The function does not return any value, but updates a CSV file with the new treatment record.\\\",\\n  \\\"depend\\\": \\\"Python's pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concerned East El Paso resident who had a close friend killed by a drunk driver.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traffic Accident Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses data from the local traffic department or available APIs to provide information about the number of traffic accidents that have occurred in a specific location due to drunk driving.\\\",\\n\\\"function_name\\\": \\\"get_drunk_driving_accidents\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"Number of drunk driving accidents at the given location\\\",\\n\\\"depend\\\": \\\"Web API of local traffic department or similar\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local sports league organizer seeking guidance on broadcasting live games", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Live Streaming Interface\\\",\\n  \\\"description\\\": \\\"Creates a new YouTube LiveBroadcast for streaming live games. Returns the LiveBroadcast ID for managing the live stream.\\\",\\n  \\\"function_name\\\": \\\"create_live_broadcast\\\",\\n  \\\"input_args\\\": [\\\"title\\\", \\\"description\\\", \\\"scheduled_start_time\\\"],\\n  \\\"return\\\": \\\"YouTube LiveBroadcast ID\\\",\\n  \\\"depend\\\": [\\\"Google YouTube LiveBroadcasts API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A firefighter frequently discussing the importance of safety regulations in construction", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Compliance Check Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path of a file containing building data and returns the compliance status of the building with the safety regulations using a pre-trained model.\\\",\\n\\\"function_name\\\": \\\"check_building_compliance\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A string indicating the compliance status of the building.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"pandas\\\", \\\"tensorflow\\\"], \\\"Machine Learning Models\\\": [\\\"pre-trained model for predicting building compliance\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A mechanical engineer who builds intricate tracks and obstacles for the toy car races", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physics Simulation Interface\\\",\\n\\\"description\\\": \\\"An interface that simulates how a toy car moves on a track and encounters obstacles, using the PyBullet physics simulation library. The user inputs 3D model files for the track and the car, and the interface returns the time it takes for the car to complete the track.\\\",\\n\\\"function_name\\\": \\\"run_simulation\\\",\\n\\\"input_args\\\": [\\\"track_file\\\", \\\"car_file\\\", \\\"simulation_steps\\\"],\\n\\\"return\\\": \\\"elapsed_time\\\",\\n\\\"depend\\\": [\\\"PyBullet library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Engineering professor who specializes in Process Systems Engineering and Optimization but has no knowledge of GUI development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Optimization Problem Solving Interface\\\",\\n\\\"description\\\": \\\"Solves an optimization problem by taking as input the objective function, the constraints and an initial guess, and returns the optimal solution.\\\",\\n\\\"function_name\\\": \\\"solve_optimization_problem\\\",\\n\\\"input_args\\\": {\\n    \\\"func\\\": \\\"Objective function to be minimized\\\",\\n    \\\"constraints\\\": \\\"List of dictionaries, each dictionary contains the type of the constraint ('eq' for equality, 'ineq' for inequality) and a function defining the constraint\\\",\\n    \\\"x0\\\": \\\"Initial guess\\\"\\n    },\\n\\\"return\\\": \\\"Optimal solution or an error message if optimization did not converge\\\",\\n\\\"depend\\\": \\\"Scipy Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a newly hired IT manager with minimal experience with the LCFG (Local ConFiGuration system)", "synthesized text": "\"{\\n\\\"name\\\": \\\"LCFG Configuration Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of creating and modifying LCFG profiles. It abstracts the complexities of the LCFG tool, making it easier for newcomers to use.\\\",\\n\\\"function_name\\\": [\\\"create_lcfg_profile\\\", \\\"modify_lcfg_profile\\\"],\\n\\\"input_args\\\": [[\\\"server_name\\\", \\\"configuration\\\"], [\\\"server_name\\\", \\\"key\\\", \\\"new_value\\\"]],\\n\\\"return\\\": [\\\"A message indicating that the LCFG profile has been successfully updated.\\\", \\\"A message indicating that the LCFG profile has been successfully updated.\\\"],\\n\\\"depend\\\": [\\\"os\\\", \\\"json\\\", \\\"LCFG\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young and enthusiastic astronomy student eager to learn about galaxy simulations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Galaxy Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to visualize galaxy simulations by inputting the path to a simulation file. The interface will return a simple visualization of the galaxy.\\\",\\n\\\"function_name\\\": \\\"visualize_galaxy\\\",\\n\\\"input_args\\\": \\\"path_to_sim\\\",\\n\\\"return\\\": \\\"Displays a plot of the galaxy simulation\\\",\\n\\\"depend\\\": \\\"Python libraries: pynbody, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "a vegan musician who also identifies as a metalhead", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Genre Recommendation Interface\\\",\\n\\\"description\\\": \\\"Fetches vegan metal music recommendations for a user\\\",\\n\\\"function_name\\\": \\\"get_vegan_metal_music_recommendations\\\",\\n\\\"input_args\\\": [\\\"spotify_user_token\\\"],\\n\\\"return\\\": \\\"A list of vegan metal music recommendations\\\",\\n\\\"depend\\\": \\\"Spotify API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hotel developer looking for financial advice and investment opportunities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Data Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves financial data such as stock prices, forex rates, and crypto currencies from Alpha Vantage.\\\",\\n\\\"function_name\\\": \\\"get_financial_data\\\",\\n\\\"input_args\\\": [\\\"symbol\\\", \\\"interval\\\"],\\n\\\"return\\\": \\\"A time-series of the closing prices of the financial instrument.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Alpha Vantage API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a Stallion Laguna fan who is also an avid Philippine football blogger", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface provides match statistics between two specified football teams by scraping data from an online football database.\\\",\\n\\\"function_name\\\": \\\"get_match_statistics\\\",\\n\\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\"],\\n\\\"return\\\": \\\"A dictionary with match statistics.\\\",\\n\\\"depend\\\": [\\\"Python BeautifulSoup library\\\", \\\"Web scraping from online football databases\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A juvenile court judge committed to understanding the underlying causes of delinquent behavior", "synthesized text": "\"{\\n\\\"name\\\": \\\"Juvenile Delinquency Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the likelihood of a juvenile committing delinquent behavior based on a set of input features like family background, school performance, peer influence etc. It leverages a pre-trained RandomForest model to make this prediction.\\\",\\n\\\"function_name\\\": \\\"predict_delinquency\\\",\\n\\\"input_args\\\": [\\\"path_to_model\\\", \\\"feature_values\\\"],\\n\\\"return\\\": \\\"A dictionary that contains the likelihood of delinquent behavior\\\",\\n\\\"depend\\\": \\\"Python's pandas and sklearn libraries, and a pre-trained RandomForest model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports reporter intrigued by the player's determination and eager to highlight the skill and effort behind water polo", "synthesized text": "\"{\\n\\\"name\\\": \\\"Water Polo Player Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed performance data of a water polo player in a specific match. The data includes various performance metrics like goals scored, assists, fouls, etc.\\\",\\n\\\"function_name\\\": \\\"get_player_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"player_name\\\": \\\"Name of the player\\\",\\n    \\\"match_date\\\": \\\"Date of the match\\\"\\n},\\n\\\"return\\\": \\\"Detailed performance data of the player in the specified match\\\",\\n\\\"depend\\\": \\\"Sportsradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A private investigator who relies on the lawyer's expertise to gather evidence for cases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Case Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a legal case description and provides a detailed analysis, identifies potential evidences needed, and suggests possible questions to ask in court. It's particularly useful for private investigators who rely on lawyer's expertise to gather evidence for cases.\\\",\\n\\\"function_name\\\": \\\"analyze_legal_case\\\",\\n\\\"input_args\\\": \\\"case_description - A string that describes the legal case.\\\",\\n\\\"return\\\": \\\"A string that contains a detailed analysis of the case, potential evidences needed, and possible questions to ask in court.\\\",\\n\\\"depend\\\": \\\"openai GPT-3 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concerned average American who daily sends and receives mail", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mail Delivery Status Interface\\\",\\n\\\"description\\\": \\\"This interface uses USPS's Tracking API to track the delivery status of mail or packages. The user needs to provide the tracking number, and the interface returns the current delivery status of the mail or package.\\\",\\n\\\"function_name\\\": \\\"get_mail_delivery_status\\\",\\n\\\"input_args\\\": {\\n    \\\"track_id\\\": \\\"a USPS tracking number as a string\\\"\\n},\\n\\\"return\\\": \\\"A string describing the current delivery status of the mail or package.\\\",\\n\\\"depend\\\": \\\"requests library, xml.etree.ElementTree library, USPS's Tracking API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physician who is interested in exploring the applications of nanotechnology in their medical practice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nanoparticle Property Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface takes the diameter and shape of a nanoparticle and returns its volume, surface area, and the number of atoms it contains.\\\",\\n\\\"function_name\\\": \\\"get_nanoparticle_properties\\\",\\n\\\"input_args\\\": [\\\"diameter_nm\\\", \\\"shape\\\"],\\n\\\"return\\\": {\\\"Volume (m^3)\\\": \\\"volume of the nanoparticle in cubic meters\\\", \\\"Surface Area (m^2)\\\": \\\"surface area of the nanoparticle in square meters\\\", \\\"Atoms\\\": \\\"number of atoms in the nanoparticle\\\"},\\n\\\"depend\\\": \\\"Python's math and scipy libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who has been duped by alternative medicine and is seeking reliable information to make informed healthcare decisions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Research Interface\\\",\\n\\\"description\\\": \\\"Interface to search scholarly articles and reviews on a medical topic using the PubMed API.\\\",\\n\\\"function_name\\\": \\\"search_medical_research\\\",\\n\\\"input_args\\\": {\\n    \\\"topic\\\": \\\"A string representing the medical topic or condition to search for.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the title and authors of a relevant article.\\\",\\n\\\"depend\\\": \\\"Python requests library, PubMed API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sense of discipline, focus, and mental clarity to support the pursuit of cognitive enhancement", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meditation Timer Interface\\\",\\n\\\"description\\\": \\\"A simple and user-friendly interface for a customizable meditation timer. It allows users to input the duration of their meditation session in minutes, and optionally a preparation time, then provides audible signals to start and end the meditation session.\\\",\\n\\\"function_name\\\": \\\"meditation_timer\\\",\\n\\\"input_args\\\": [\\\"meditation_duration\\\", \\\"preparation_time\\\"],\\n\\\"return\\\": \\\"None, but it plays a sound and prints messages to signal the start and end of the meditation session.\\\",\\n\\\"depend\\\": \\\"Python's built-in libraries: time, winsound\\\"\\n}\"", "description": "tool development"}
{"input persona": "a music scholar who specializes in Eurovision Song Contest.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Eurovision Song Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to analyze Eurovision Song Contest data for a specific year, including the number of entries, countries participated, and the winner.\\\",\\n\\\"function_name\\\": \\\"analyze_eurovision_data\\\",\\n\\\"input_args\\\": {\\n    \\\"csv_path\\\": \\\"string - path to the CSV file containing Eurovision data\\\",\\n    \\\"year\\\": \\\"integer - the year to analyze\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Number of entries\\\": \\\"integer - the number of entries in the specified year\\\",\\n    \\\"Countries participated\\\": \\\"integer - the number of countries participated in the specified year\\\",\\n    \\\"Winner\\\": \\\"string - the country that won in the specified year\\\"\\n},\\n\\\"depend\\\": \\\"Pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local journalist who interviews the captain to inform and inspire the public about fire safety", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fire Incident Data Interface\\\",\\n\\\"description\\\": \\\"This interface fetches data about fire incidents from the US Fire Administration's Fire Incident Data API based on a provided date range.\\\",\\n\\\"function_name\\\": \\\"get_fire_incidents\\\",\\n\\\"input_args\\\": [\\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"List of fire incidents with information about each incident.\\\",\\n\\\"depend\\\": \\\"US Fire Administration's Fire Incident Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired professional rugby league player who once played alongside Steve Waddell", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Rugby Player Performance Stats Interface\\\",\\n  \\\"description\\\": \\\"Allows users to retrieve the career statistics of a rugby league player.\\\",\\n  \\\"function_name\\\": \\\"get_player_stats\\\",\\n  \\\"input_args\\\": [\\\"player_name\\\"],\\n  \\\"return\\\": \\\"A dictionary with the player's career statistics.\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\", \\\"https://www.rugbyleagueproject.org\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a long-time fan and active member of Richard Armitage's fanbase, who has a particular fascination with Armitage's appearances in dance videos.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Frame Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts specified frames from a dance video. It takes a video file and a start time (and optionally an end time), returning the corresponding frames as images.\\\",\\n\\\"function_name\\\": \\\"extract_video_frames\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"The path to the video file\\\",\\n    \\\"start_time\\\": \\\"The start time (in seconds) from which to extract frames\\\",\\n    \\\"end_time\\\": \\\"The end time (in seconds) until which to extract frames\\\"\\n    },\\n\\\"return\\\": \\\"List of video frames between the specified start and end times\\\",\\n\\\"depend\\\": \\\"OpenCV\\\"\\n}\"", "description": "tool development"}
{"input persona": "a loyal fan of Baashe Delta's music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"Interface to provide song recommendations based on the user's favorite artist using the Spotify API\\\",\\n\\\"function_name\\\": \\\"get_music_recommendations\\\",\\n\\\"input_args\\\": \\\"favorite_artist - a string representing the user's favorite artist\\\",\\n\\\"return\\\": \\\"A list of recommended song names\\\",\\n\\\"depend\\\": \\\"Python's spotipy library, Spotify API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pacifist politician advocating for disarmament and reallocating military funds to social programs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nuclear Weapons Stockpile Data Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about the nuclear weapon stockpile of a specified country. The information includes total stockpile, deployed weapons, retired weapons, and total warheads.\\\",\\n\\\"function_name\\\": \\\"get_nuclear_stockpile_info\\\",\\n\\\"input_args\\\": [\\\"country\\\"],\\n\\\"return\\\": \\\"Dictionary with information about the nuclear weapon stockpile of the specified country.\\\",\\n\\\"depend\\\": \\\"Web APIs: Nuclear Weapons Stockpile Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fearless and skilled driver who trusts the navigator's directions implicitly", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"Provides an optimal route for a driver, given the starting location and destination\\\",\\n\\\"function_name\\\": \\\"get_optimal_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\", \\\"api_key\\\"],\\n\\\"return\\\": \\\"List of directions for the optimal route or an error message\\\",\\n\\\"depend\\\": \\\"Google Maps' Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A frequent traveler between Lahore and Islamabad who values convenience and comfort", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about the cheapest, quickest, or best flights between Lahore and Islamabad using Skyscanner's Flight Search API.\\\",\\n\\\"function_name\\\": \\\"get_flight_info\\\",\\n\\\"input_args\\\": [\\\"departure_date\\\", \\\"return_date\\\"],\\n\\\"return\\\": \\\"A list of flights sorted by price, duration, or a balance of convenience and cost.\\\",\\n\\\"depend\\\": \\\"Skyscanner's Flight Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a 90 year-old grandmother who never watched American football", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Football Game Summary Interface\\\",\\n  \\\"description\\\": \\\"Scrapes game summaries from popular sports websites and uses a large language model to simplify and explain the game in layman's terms.\\\",\\n  \\\"function_name\\\": \\\"get_game_summary\\\",\\n  \\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\", \\\"date\\\"],\\n  \\\"return\\\": \\\"A simplified summary of the game.\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"Large Language Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who develops open-source tools for predictive modeling in R", "synthesized text": "\"{\\n\\\"name\\\": \\\"R to Python Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to execute R code within a Python environment and returns the results in Python. Particularly useful for software engineers developing open-source tools for predictive modeling in R but want to integrate or test those tools within a Python environment.\\\",\\n\\\"function_name\\\": \\\"execute_r_code\\\",\\n\\\"input_args\\\": \\\"r_code: A string of R code\\\",\\n\\\"return\\\": \\\"The result of the R code execution in Python\\\",\\n\\\"depend\\\": \\\"rpy2 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of a dog nutrition forum, always ready to discuss the latest research and product recommendations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dog Food Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed information about a specific dog food product including its ingredients, nutritional values, and reviews. The user only needs to input the product name.\\\",\\n\\\"function_name\\\": \\\"get_dog_food_analysis\\\",\\n\\\"input_args\\\": {\\\"product_name\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"JSON object containing detailed analysis of the product\\\",\\n\\\"depend\\\": \\\"requests library, Dog Food Analysis API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A social worker assisting in patient recovery and family relationships after drug rehabilitation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Recovery Progress Tracking Interface\\\",\\n\\\"description\\\": \\\"Predicts the likelihood of a patient's successful recovery based on their demographic and medical history.\\\",\\n\\\"function_name\\\": \\\"predict_recovery\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"Patient's age\\\",\\n    \\\"gender\\\": \\\"Patient's gender\\\",\\n    \\\"drug_type\\\": \\\"Type of drug the patient was addicted to\\\",\\n    \\\"addiction_length\\\": \\\"Length of the patient's addiction in years\\\",\\n    \\\"rehab_length\\\": \\\"Length of the patient's rehabilitation in months\\\"\\n},\\n\\\"return\\\": \\\"A score between 0 and 1 indicating the predicted probability of the patient's successful recovery.\\\",\\n\\\"depend\\\": \\\"Pandas, Scikit-learn, TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mechanical engineering student interested in the structural strength of 3D printed components", "synthesized text": "\"{\\n\\\"name\\\": \\\"Finite Element Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to perform finite element analysis on 3D models. It takes the path to a 3D model file and the material properties as inputs, and returns the maximum stress and the corresponding location in the model.\\\",\\n\\\"function_name\\\": \\\"perform_fea\\\",\\n\\\"input_args\\\": [\\\"model_file_path\\\", \\\"material_properties\\\"],\\n\\\"return\\\": [\\\"max_stress\\\", \\\"max_stress_location\\\"],\\n\\\"depend\\\": [\\\"PyFEM library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A reporter who covers the Wolverines' games and relies on the photographer for action shots", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Photo Selection Interface\\\",\\n  \\\"description\\\": \\\"An interface to select high-quality action shots from a directory of images, using a pre-trained image classification model from TensorFlow Hub.\\\",\\n  \\\"function_name\\\": \\\"classify_images\\\",\\n  \\\"input_args\\\": {\\n    \\\"image_directory\\\": \\\"A string that represents the path to the directory containing the images.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of filenames of the images that the model predicts as action shots.\\\",\\n  \\\"depend\\\": \\\"Python libraries: os, tensorflow, tensorflow_hub; Machine learning model: TensorFlow Hub's mobile_net_v2 classification model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager seeking guidance on implementing SharePoint-based collaboration solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"SharePoint File Upload Interface\\\", \\n\\\"description\\\": \\\"This interface allows users to upload files to a SharePoint site's document library by providing the SharePoint site URL, document library name, local file path, username, and password.\\\", \\n\\\"function_name\\\": \\\"upload_file_to_sharepoint\\\", \\n\\\"input_args\\\": [\\\"site_url\\\", \\\"document_library_name\\\", \\\"local_file_path\\\", \\\"username\\\", \\\"password\\\"], \\n\\\"return\\\": \\\"A success message when the file is uploaded, or an error message if the upload fails.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"requests_ntlm library\\\", \\\"SharePoint REST API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A product manager responsible for developing new semiconductor technologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Predictive Maintenance Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts the failure of equipment in semiconductor manufacturing based on parameters like temperature, pressure, humidity, etc. The user only needs to input these parameters, and our interface will return the probability of equipment failure in the near future.\\\",\\n\\\"function_name\\\": \\\"predict_equipment_failure\\\",\\n\\\"input_args\\\": {\\\"model_name\\\": \\\"Name of the pre-trained model\\\", \\\"temperature\\\": \\\"Current temperature\\\", \\\"pressure\\\": \\\"Current pressure\\\", \\\"humidity\\\": \\\"Current humidity\\\"},\\n\\\"return\\\": \\\"Probability of equipment failure in the near future\\\",\\n\\\"depend\\\": [\\\"Hugging Face Transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A law enforcement officer who finds the judge's sentencing decisions unpredictable", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Sentencing Prediction Interface\\\",\\n  \\\"description\\\": \\\"This interface predicts the sentencing decisions of a judge based on the case details.\\\",\\n  \\\"function_name\\\": \\\"predict_sentencing_decision\\\",\\n  \\\"input_args\\\": \\\"case_details - a string containing details about the case\\\",\\n  \\\"return\\\": \\\"A string that predicts the decision of the judge ('Guilty' or 'Not Guilty')\\\",\\n  \\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "The Chief Information Officer of a financial institution looking to leverage data analytics for business intelligence", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches and analyzes historical stock price data from a specified period. It returns the mean price, standard deviation, percent change, and a JSON string of the historical price data.\\\",\\n\\\"function_name\\\": \\\"get_stock_data\\\",\\n\\\"input_args\\\": {\\\"ticker\\\": \\\"The ticker symbol of the stock\\\", \\\"start_date\\\": \\\"The start date of the period\\\", \\\"end_date\\\": \\\"The end date of the period\\\"},\\n\\\"return\\\": {\\\"mean_price\\\": \\\"The mean stock price over the specified period\\\", \\\"std_price\\\": \\\"The standard deviation of the stock price\\\", \\\"percent_change\\\": \\\"The percent change in price from the start to the end date\\\", \\\"price_data\\\": \\\"A JSON string of the historical price data\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas_datareader\\\", \\\"pandas\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A cousin who lives in Italy and provides insider tips and recommendations for authentic experiences", "synthesized text": "\"{\\n\\\"name\\\": \\\"Italian Event Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface leverages the Eventbrite API to recommend events based on the user's location and preferred type of experience.\\\",\\n\\\"function_name\\\": \\\"get_event_recommendations\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"experience_type\\\"],\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the name and url of a recommended event.\\\",\\n\\\"depend\\\": \\\"Eventbrite API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A struggling, budget-conscious Drucker business school student in the United States who is studying Energy Economics and is trying to keep up with all the geopolitics of energy.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"News Summary Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from Huggingface Transformers to summarize news articles, allowing users to quickly understand the key points without having to read the full text.\\\",\\n  \\\"function_name\\\": \\\"summarize_article\\\",\\n  \\\"input_args\\\": \\\"url\\\",\\n  \\\"return\\\": \\\"Summary of the article\\\",\\n  \\\"depend\\\": \\\"Huggingface Transformers, BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager overseeing the entire development process of new automobiles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Timeline Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface generates a Gantt chart from a csv file containing project timeline data. The user inputs a csv file path, and the interface outputs a Gantt chart visualizing the project timeline.\\\",\\n\\\"function_name\\\": \\\"visualize_project_timeline\\\",\\n\\\"input_args\\\": \\\"csv_file_path\\\",\\n\\\"return\\\": \\\"A Gantt chart visualizing the project timeline.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, matplotlib.pyplot, matplotlib.dates\\\"\\n}\"", "description": "tool development"}
{"input persona": "An empathetic expatriate who had migrated from Tanjung Balai to Medan and works as a school history teacher.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the currency code of the home country and the current country, and returns the conversion rate between the two currencies.\\\",\\n\\\"function_name\\\": \\\"get_currency_conversion_rate\\\",\\n\\\"input_args\\\": [\\n    {\\n    \\\"name\\\": \\\"from_currency\\\",\\n    \\\"type\\\": \\\"str\\\",\\n    \\\"description\\\": \\\"The currency code of the home country.\\\"\\n    },\\n    {\\n    \\\"name\\\": \\\"to_currency\\\",\\n    \\\"type\\\": \\\"str\\\",\\n    \\\"description\\\": \\\"The currency code of the current residing country.\\\"\\n    }\\n],\\n\\\"return\\\": {\\n    \\\"name\\\": \\\"conversion_rate\\\",\\n    \\\"type\\\": \\\"float\\\",\\n    \\\"description\\\": \\\"The conversion rate from the home currency to the current country's currency.\\\"\\n},\\n\\\"depend\\\": \\\"Web API: ExchangeRate-API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A huge fan of water polo and the Japanese national team", "synthesized text": "\"{\\n\\\"name\\\": \\\"Water Polo Match Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface to get the detailed statistics of a particular water polo match using Sports Open Data API.\\\",\\n\\\"function_name\\\": \\\"get_match_statistics\\\",\\n\\\"input_args\\\": \\\"match_id - The id of the match\\\",\\n\\\"return\\\": \\\"A dictionary containing the detailed statistics of the match\\\",\\n\\\"depend\\\": \\\"requests, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A university professor from Bangladesh who is researching the demographics of different regions within the country.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Demographics Data Retrieval Interface\\\",\\n  \\\"description\\\": \\\"An interface for fetching demographic data for a specified country using the REST Countries API. The demographic data includes population, area, gini index, languages, currencies, region, and subregion.\\\",\\n  \\\"function_name\\\": \\\"get_demographics_data\\\",\\n  \\\"input_args\\\": [\\\"country\\\"],\\n  \\\"return\\\": \\\"A dictionary containing demographic data for the specified country.\\\",\\n  \\\"depend\\\": \\\"REST Countries API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A holistic healer who specializes in natural remedies and can offer alternative treatment options for recurring ear infections", "synthesized text": "\"{\\n\\\"name\\\": \\\"Natural Remedy Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of natural remedies for a given ailment. The database of remedies can be stored in a simple CSV file or a more complex database system.\\\",\\n\\\"function_name\\\": \\\"get_natural_remedies_for_ailment\\\",\\n\\\"input_args\\\": \\\"ailment - a string that represents the ailment the user wants to find natural remedies for\\\",\\n\\\"return\\\": \\\"A list of strings, each representing a natural remedy for the given ailment\\\",\\n\\\"depend\\\": \\\"Pandas library and a CSV file or database system containing natural remedies and their corresponding ailments\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired military general who seeks counseling to cope with the psychological impact of combat", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mental Health Resource Finder Interface\\\",\\n\\\"description\\\": \\\"This interface uses the U.S. Department of Veterans Affairs API to find nearby mental health resources, including counseling centers, veteran support groups, and mental health practitioners specialized in post-traumatic stress disorder (PTSD).\\\",\\n\\\"function_name\\\": \\\"get_mental_health_resources\\\",\\n\\\"input_args\\\": \\\"location - a string in the format 'city, state'\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing the name, address, phone number, and hours of operation of a mental health facility\\\",\\n\\\"depend\\\": \\\"requests library, U.S. Department of Veterans Affairs API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a web developer familiar with Web Distributed Authoring and Versioning (WebDAV) protocol", "synthesized text": "\"{\\n  \\\"name\\\": \\\"WebDAV File Management Interface\\\",\\n  \\\"description\\\": \\\"An interface that encapsulates the WebDAV operations using the easywebdav library. It allows the users to upload, download, and delete files on a WebDAV server with simple commands.\\\",\\n  \\\"function_name\\\": [\\\"__init__\\\", \\\"upload_file\\\", \\\"download_file\\\", \\\"delete_file\\\"],\\n  \\\"input_args\\\": {\\n    \\\"__init__\\\": [\\\"host\\\", \\\"username\\\", \\\"password\\\"],\\n    \\\"upload_file\\\": [\\\"local_path\\\", \\\"remote_path\\\"],\\n    \\\"download_file\\\": [\\\"remote_path\\\", \\\"local_path\\\"],\\n    \\\"delete_file\\\": [\\\"remote_path\\\"]\\n  },\\n  \\\"return\\\": {\\n    \\\"__init__\\\": \\\"An instance of the WebDAVClient class\\\",\\n    \\\"upload_file\\\": \\\"None, uploads a file to the WebDAV server\\\",\\n    \\\"download_file\\\": \\\"None, downloads a file from the WebDAV server\\\",\\n    \\\"delete_file\\\": \\\"None, deletes a file from the WebDAV server\\\"\\n  },\\n  \\\"depend\\\": [\\\"easywebdav Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A startup founder seeking consultation on implementing AngularJS in their web application for optimal performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"AngularJS Dependency Checker Interface\\\",\\n\\\"description\\\": \\\"An interface that uses PyT (Python Taint), a static code analysis tool, to analyze AngularJS code and identify potential areas of performance improvement.\\\",\\n\\\"function_name\\\": \\\"check_angularjs_dependencies\\\",\\n\\\"input_args\\\": \\\"file_path - The path to the AngularJS file.\\\",\\n\\\"return\\\": \\\"A list of potential areas where the AngularJS code's performance could be improved by optimizing dependencies.\\\",\\n\\\"depend\\\": \\\"PyT (Python Taint)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a German citizen who regularly commutes from Frankfurt to Nuremberg on the A3 highway.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Traffic Status Interface\\\",\\n  \\\"description\\\": \\\"Interface to get real-time traffic status and estimated travel time between two locations\\\",\\n  \\\"function_name\\\": \\\"get_traffic_status\\\",\\n  \\\"input_args\\\": [\\\"start_point\\\", \\\"end_point\\\"],\\n  \\\"return\\\": {\\\"status\\\": \\\"string indicating traffic status\\\", \\\"estimated_time\\\": \\\"string indicating estimated travel time\\\"},\\n  \\\"depend\\\": [\\\"requests library\\\", \\\"Google Maps Directions API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一个对体育完全无兴趣的星座迷", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u661f\\u5ea7\\u4fe1\\u606f\\u83b7\\u53d6\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u8fd9\\u4e2a\\u63a5\\u53e3\\u53ef\\u4ee5\\u4e3a\\u7528\\u6237\\u63d0\\u4f9b\\u4ed6\\u4eec\\u661f\\u5ea7\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\u3002\\u7528\\u6237\\u53ea\\u9700\\u8981\\u8f93\\u5165\\u4ed6\\u4eec\\u7684\\u661f\\u5ea7\\uff0c\\u63a5\\u53e3\\u5c06\\u8fd4\\u56de\\u5173\\u4e8e\\u8be5\\u661f\\u5ea7\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\u3002\\\",\\n\\\"function_name\\\": \\\"get_constellation_info\\\",\\n\\\"input_args\\\": \\\"constellation_name\\\",\\n\\\"return\\\": \\\"\\u5173\\u4e8e\\u8f93\\u5165\\u661f\\u5ea7\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\u7684\\u5b57\\u5178\\u3002\\\",\\n\\\"depend\\\": \\\"Astro-Seek API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research assistant working on a project related to mechatronics", "synthesized text": "\"{\\n  \\\"name\\\": \\\"3D Model Viewer\\\",\\n  \\\"description\\\": \\\"An interface for viewing 3D models using PyVista. The user needs to provide a file path to a 3D model file in a common format such as STL or OBJ.\\\",\\n  \\\"function_name\\\": \\\"view_3d_model\\\",\\n  \\\"input_args\\\": [\\\"file_path\\\"],\\n  \\\"return\\\": \\\"A window showing a 3D representation of the model in the provided file. The user can rotate, zoom, and pan the model in this window.\\\",\\n  \\\"depend\\\": [\\\"PyVista\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a physics undergraduate student with few knowledge about Density Functional Theory (DFT) and strain engineering on nano materials.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum Mechanical Strain Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input an atomic structure file in .xyz format and a strain parameter, applies the strain to the atomic structure, and then calculates the electronic properties under the given strain using Density Functional Theory (DFT).\\\",\\n\\\"function_name\\\": \\\"calculate_strain_properties\\\",\\n\\\"input_args\\\": [\\\"structure_file\\\", \\\"strain\\\"],\\n\\\"return\\\": [\\\"energy\\\", \\\"forces\\\"],\\n\\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"os\\\", \\\"subprocess\\\", \\\"ase\\\"],\\n    \\\"Machine Learning Models\\\": [\\\"Quantum Espresso\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "An art teacher who appreciates all forms of passion and dedication yet knows nothing about soccer", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Soccer Game Summary Interface\\\",\\n  \\\"description\\\": \\\"Fetches a summary of a soccer game from a sports data provider's API based on the names of the two teams.\\\",\\n  \\\"function_name\\\": \\\"fetch_soccer_game_summary\\\",\\n  \\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\"],\\n  \\\"return\\\": \\\"Dictionary with information about goals, fouls, yellow cards, red cards, offsides, and possession percentages.\\\",\\n  \\\"depend\\\": \\\"requests library, Sports Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated fan account on social media that shares daily updates and exclusive content about Selena Gomez", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitter Post Scheduling Interface\\\",\\n\\\"description\\\": \\\"An interface for scheduling tweets. The user inputs the tweet text and the desired time for posting, and the interface schedules the tweet to be posted at the specified time.\\\",\\n\\\"function_name\\\": \\\"schedule_tweet\\\",\\n\\\"input_args\\\": {\\\"api_key\\\": \\\"Twitter API key\\\", \\\"api_key_secret\\\": \\\"Twitter API key secret\\\", \\\"access_token\\\": \\\"Twitter access token\\\", \\\"access_token_secret\\\": \\\"Twitter access token secret\\\", \\\"tweet_text\\\": \\\"Text of the tweet\\\", \\\"post_time\\\": \\\"Time to post the tweet\\\"},\\n\\\"return\\\": \\\"None, the function runs indefinitely, posting the specified tweet at the specified time every day.\\\",\\n\\\"depend\\\": \\\"Tweepy library, Twitter API, schedule library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lifestyle blogger who seeks advice on finding the perfect suburban home for their growing family", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Finder Interface\\\",\\n\\\"description\\\": \\\"An interface that uses an API from a real estate platform to find homes that meet a user's criteria\\\",\\n\\\"function_name\\\": \\\"find_perfect_home\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\", \\\"budget\\\": \\\"int\\\", \\\"num_bedrooms\\\": \\\"int\\\", \\\"num_bathrooms\\\": \\\"int\\\", \\\"min_size\\\": \\\"int\\\"},\\n\\\"return\\\": \\\"list of dictionaries\\\",\\n\\\"depend\\\": \\\"requests library, Realtor.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一位待了多年的艺术体操教练，对运动员们的训练和比赛充满激情。随着我的运动员们准备参加这重大的赛事，我一直关注着2023年世界艺术体操锦标赛的各项安排，尤其是资格赛如何影响奥运选拔。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Information Interface\\\",\\n\\\"description\\\": \\\"\\u4ece\\u5b98\\u65b9\\u7f51\\u7ad9\\u6216\\u8005\\u76f8\\u5173\\u65b0\\u95fb\\u7f51\\u7ad9\\u83b7\\u53d6\\u6700\\u65b0\\u76842023\\u5e74\\u4e16\\u754c\\u827a\\u672f\\u4f53\\u64cd\\u9526\\u6807\\u8d5b\\u7684\\u76f8\\u5173\\u4fe1\\u606f\\\",\\n\\\"function_name\\\": \\\"get_event_info\\\",\\n\\\"input_args\\\": \\\"info_type\\\",\\n\\\"return\\\": \\\"\\u76f8\\u5173\\u4fe1\\u606f\\u7684\\u6587\\u672c\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Brazilian TV show producer who missed winning an award in this event", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Rating and Review Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the IMDb rating, number of votes, and a list of reviews for a given TV show.\\\",\\n\\\"function_name\\\": \\\"get_show_info\\\",\\n\\\"input_args\\\": {\\n    \\\"show_title\\\": \\\"Title of the TV show\\\"\\n},\\n\\\"return\\\": {\\n    \\\"rating\\\": \\\"The IMDb rating of the TV show\\\",\\n    \\\"votes\\\": \\\"The total number of votes the TV show has received on IMDb\\\",\\n    \\\"reviews\\\": \\\"A list of reviews for the TV show\\\"\\n},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"IMDb API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a young Ukrainian who dreams of joining the Territorial Defense Forces one day", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Fitness Test Preparation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the user's age, weight, height, and gender, and returns a personalized fitness and diet plan to help them prepare for the military fitness test.\\\",\\n\\\"function_name\\\": \\\"get_fitness_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the user in years\\\",\\n    \\\"weight\\\": \\\"The weight of the user in kilograms\\\",\\n    \\\"height\\\": \\\"The height of the user in centimeters\\\",\\n    \\\"gender\\\": \\\"The gender of the user\\\"\\n},\\n\\\"return\\\": \\\"A personalized fitness and diet plan to prepare for the military fitness test\\\",\\n\\\"depend\\\": \\\"A machine learning model from TensorFlow Hub that generates embeddings for the user's information, and functions that use these embeddings to predict an optimal workout routine and diet.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former gang member turned community leader, providing insights on urban crime dynamics", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Crime Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"Interface to return statistical data about specific crime type in a specific city and predict future crime rate\\\",\\n  \\\"function_name\\\": \\\"predict_future_crime_rate\\\",\\n  \\\"input_args\\\": [\\\"city\\\", \\\"crime_type\\\", \\\"future_month\\\"],\\n  \\\"return\\\": \\\"Predicted crime rate for the future month\\\",\\n  \\\"depend\\\": [\\\"Python pandas library\\\", \\\"requests library\\\", \\\"sklearn LinearRegression\\\", \\\"Crime data API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A health innovator in Nigeria involved in creating vaccination campaigns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vaccine Distribution Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the nearest vaccine center to a given latitude and longitude location, thus helping to plan vaccination campaigns for maximum coverage and efficiency.\\\",\\n\\\"function_name\\\": \\\"get_nearest_vaccine_center\\\",\\n\\\"input_args\\\": \\\"(Latitude, Longitude)\\\",\\n\\\"return\\\": \\\"Name of the nearest vaccination center\\\",\\n\\\"depend\\\": \\\"Python libraries - pandas, geopy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a semi-retired academic in the humanities who was once an ACLS Fellow herself", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Research Paper Similarity Interface\\\",\\n  \\\"description\\\": \\\"An interface to find research papers that are semantically similar to a given paper using the Semantic Scholar's Paper API and Hugging Face's Sentence Transformer model.\\\",\\n  \\\"function_name\\\": \\\"find_similar_papers\\\",\\n  \\\"input_args\\\": [\\\"s2_id\\\", \\\"num_similar_papers\\\"],\\n  \\\"return\\\": \\\"A list of tuples containing the titles and Semantic Scholar IDs of the similar papers.\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"sentence_transformers\\\", \\\"numpy\\\", \\\"sklearn\\\"], \\\"Web APIs\\\": [\\\"Semantic Scholar's Paper API\\\"], \\\"machine learning models\\\": [\\\"Hugging Face's Sentence Transformer\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A homeless individual whose life trajectory has been impacted by political decisions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Government Policy Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides an analysis of how recent political decisions might have affected an individual based on their personal circumstances.\\\",\\n\\\"function_name\\\": \\\"analyze_impact\\\",\\n\\\"input_args\\\": [\\\"income\\\", \\\"education_level\\\", \\\"city\\\"],\\n\\\"return\\\": \\\"A string stating how much the recent political decisions might have affected the individual.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A dedicated hobbyDB user who helps organize virtual trading events and ensures a safe trading environment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trade Verification Interface\\\",\\n\\\"description\\\": \\\"Generates a unique verification code for a trade to ensure its legitimacy.\\\",\\n\\\"function_name\\\": \\\"generate_trade_verification_code\\\",\\n\\\"input_args\\\": {\\n    \\\"item1\\\": \\\"Name of the first item in the trade\\\",\\n    \\\"item2\\\": \\\"Name of the second item in the trade\\\",\\n    \\\"trader1\\\": \\\"Name of the first trader\\\",\\n    \\\"trader2\\\": \\\"Name of the second trader\\\",\\n    \\\"date\\\": \\\"Date of the trade\\\"\\n},\\n\\\"return\\\": \\\"A unique verification code for the trade\\\",\\n\\\"depend\\\": [\\\"hashlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A popular YouTuber who creates content about the fandom and attends conventions as a panelist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Caption Generation Interface\\\",\\n\\\"description\\\": \\\"Interface that uses the Google Speech-to-Text API to automatically generate captions for a video.\\\",\\n\\\"function_name\\\": \\\"generate_captions\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"Path to the video file\\\"\\n},\\n\\\"return\\\": \\\"A string containing the captions for the video.\\\",\\n\\\"depend\\\": \\\"Google Speech-to-Text API, pydub, speech_recognition, os\\\"\\n}\"", "description": "tool development"}
{"input persona": "A political commentator who believes that external factors have a greater impact on a country's success", "synthesized text": "\"{\\n\\\"name\\\": \\\"Country's Economic Indicators Interface\\\",\\n\\\"description\\\": \\\"Fetches the most recent value of a specified economic indicator for a given country using the World Bank API.\\\",\\n\\\"function_name\\\": \\\"get_indicator_value\\\",\\n\\\"input_args\\\": [\\\"country\\\", \\\"indicator_code\\\"],\\n\\\"return\\\": \\\"A dictionary containing the year and value of the most recent non-null data point for the specified indicator and country.\\\",\\n\\\"depend\\\": \\\"World Bank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former classmate and friend of MacKenzie Caitlin May from Dubuque, Iowa.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenCV and a pre-trained deep learning model from FaceNet to perform face recognition. It checks whether the face in the provided image matches with MacKenzie Caitlin May's face.\\\",\\n\\\"function_name\\\": \\\"is_mackenzie\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"Boolean (True if the face in the image matches with Mackenzie's face, False otherwise)\\\",\\n\\\"depend\\\": \\\"OpenCV, keras, FaceNet model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A visa officer responsible for evaluating and processing applications from foreign artists", "synthesized text": "\"{\\n  \\\"name\\\": \\\"International Artist Application Evaluation Interface\\\",\\n  \\\"description\\\": \\\"This interface uses APIs from the U.S. Department of Homeland Security, a machine learning model from TensorFlow, and the Google Translate API to evaluate and process applications from foreign artists.\\\",\\n  \\\"function_name\\\": \\\"process_artist_application\\\",\\n  \\\"input_args\\\": {\\n    \\\"application\\\": {\\n      \\\"description\\\": \\\"A dictionary containing the text of the application, the visa application ID, and a list of paths to the images in the artist's portfolio.\\\",\\n      \\\"type\\\": \\\"dict\\\"\\n    }\\n  },\\n  \\\"return\\\": {\\n    \\\"description\\\": \\\"A dictionary containing the original and translated text of the application, the result of the visa validation, and the scores of the portfolio images.\\\",\\n    \\\"type\\\": \\\"dict\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"tensorflow\\\", \\\"google-cloud-translate\\\"],\\n    \\\"web APIs\\\": [\\\"DHS Visa Validation API\\\", \\\"Google Translate API\\\"],\\n    \\\"machine learning models\\\": [\\\"TensorFlow Art Portfolio Analysis Model\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A highly competitive water polo player making their mark at the national level", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Statistical Analysis Interface for Water Polo Players\\\",\\n  \\\"description\\\": \\\"This interface takes a csv file with match data and returns a statistical analysis of the player's performance, including total goals scored, average goals per match, total fouls, and average fouls per match.\\\",\\n  \\\"function_name\\\": \\\"analyze_performance\\\",\\n  \\\"input_args\\\": [\\\"file_path\\\"],\\n  \\\"return\\\": \\\"A dictionary with total_goals, average_goals, total_fouls, and average_fouls as keys, and their corresponding values.\\\",\\n  \\\"depend\\\": \\\"Python's pandas and numpy libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A director of a military rehabilitation center, overseeing the treatment of injured personnel", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physical Rehabilitation Exercise Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to recommend suitable rehabilitation exercises for injured personnel based on their injury type, injury location, and personal information.\\\",\\n\\\"function_name\\\": \\\"recommend_exercises\\\",\\n\\\"input_args\\\": [\\\"injury_type\\\", \\\"injury_location\\\", \\\"age\\\", \\\"fitness_level\\\"],\\n\\\"return\\\": \\\"A list of recommended exercises.\\\",\\n\\\"depend\\\": \\\"TensorFlow, Local Machine Learning Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "Un estudiante de doctorado en matemáticas aplicadas que colabora en proyectos de investigación conjuntos y comparte el interés por el análisis de datos", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interfaz de An\\u00e1lisis de Datos\\\",\\n  \\\"description\\\": \\\"Realiza un an\\u00e1lisis b\\u00e1sico de datos en un archivo CSV, incluyendo resumen estad\\u00edstico y regresi\\u00f3n lineal simple (si es aplicable).\\\",\\n  \\\"function_name\\\": \\\"basic_data_analysis\\\",\\n  \\\"input_args\\\": \\\"path_to_csv\\\",\\n  \\\"return\\\": \\\"Tuple (Resumen de datos, Modelo de regresi\\u00f3n lineal)\\\",\\n  \\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "An esteemed physicist who shares their own experiences of grappling with uncertainty in scientific research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Uncertainty Quantification Interface\\\",\\n\\\"description\\\": \\\"This interface allows you to perform calculations with measurements that have uncertainties. The interface leverages the Uncertainties Python library to do this. Users only need to input their measurement value and the associated uncertainty, and the interface will return the result of the calculation with its respective uncertainty.\\\",\\n\\\"function_name\\\": \\\"calculate_with_uncertainty\\\",\\n\\\"input_args\\\": {\\\"value\\\": \\\"The value of the measurement\\\", \\\"uncertainty\\\": \\\"The uncertainty associated with the measurement\\\"},\\n\\\"return\\\": \\\"The result of the calculation with its respective uncertainty\\\",\\n\\\"depend\\\": \\\"Python Uncertainties Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sociologist who argues that funds for particle physics research could be better spent on social sciences", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Paper Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and returns details about a scientific paper given its arXiv ID\\\",\\n\\\"function_name\\\": \\\"get_paper_details\\\",\\n\\\"input_args\\\": \\\"arXiv ID of the scientific paper\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'title', 'year', 'abstract' and 'citations', which represent the paper's title, year of publication, abstract and the number of citations it has received respectively.\\\",\\n\\\"depend\\\": \\\"Semantic Scholar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Network security engineer with very limited exposure to presentations and marketing materials.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Slide Generator Interface\\\", \\n\\\"description\\\": \\\"This interface allows users to generate PowerPoint slides with given title and content.\\\", \\n\\\"function_name\\\": \\\"create_slide\\\", \\n\\\"input_args\\\": [\\\"title\\\", \\\"content\\\", \\\"layout\\\"], \\n\\\"return\\\": \\\"A PowerPoint file named 'presentation.pptx' with a single slide containing the given title and content.\\\", \\n\\\"depend\\\": \\\"Python library: pptx\\\"\\n}\"", "description": "tool development"}
{"input persona": "A non-profit organization representative who coordinates and promotes the charity streams", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitch Stream Monitoring Interface\\\",\\n\\\"description\\\": \\\"An interface to monitor the current streaming status (whether the stream is live or not) and view count of a list of Twitch streams.\\\",\\n\\\"function_name\\\": \\\"get_twitch_stream_status\\\",\\n\\\"input_args\\\": [\\\"client_id\\\", \\\"client_secret\\\", \\\"stream_ids\\\"],\\n\\\"return\\\": \\\"A dictionary where each key is a stream_id and the value is another dictionary with keys 'live' and 'view_count', indicating whether the stream is currently live and the current view count respectively.\\\",\\n\\\"depend\\\": [\\\"Twitch API\\\", \\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Oncology nurse with 10 years of experience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cancer Drug Side Effects Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the OpenFDA API to return the common side effects of a cancer drug.\\\",\\n\\\"function_name\\\": \\\"get_drug_side_effects\\\",\\n\\\"input_args\\\": {\\n    \\\"drug_name\\\": \\\"Name of the cancer drug\\\"\\n},\\n\\\"return\\\": \\\"List of common side effects associated with the drug.\\\",\\n\\\"depend\\\": \\\"OpenFDA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a devoted PC user who dislikes musicals and never downloads anything", "synthesized text": "\"{\\n\\\"name\\\": \\\"App Spam Filter Interface\\\",\\n\\\"description\\\": \\\"An interface that helps the user to filter out musical apps based on their descriptions.\\\",\\n\\\"function_name\\\": \\\"is_musical_app\\\",\\n\\\"input_args\\\": \\\"app_description\\\",\\n\\\"return\\\": \\\"boolean (True if the app is a musical app, False otherwise)\\\",\\n\\\"depend\\\": \\\"Hugging Face\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former UN staff member who offers career advice and shares insights on working within the organization", "synthesized text": "\"{\\n\\\"name\\\": \\\"United Nations Job Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search for job postings on the United Nations website by category and location.\\\",\\n\\\"function_name\\\": \\\"get_UN_jobs\\\",\\n\\\"input_args\\\": {\\n    \\\"category\\\": \\\"The job category to search for. For example, 'Information Systems & Technology'.\\\",\\n    \\\"location\\\": \\\"The location to search for jobs in. For example, 'New York'.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, each containing the title, location, deadline, and link for a job posting.\\\",\\n\\\"depend\\\": \\\"This function uses the 'requests' and 'beautifulsoup4' Python libraries to scrape the UN website.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior citizen, living in Giridih, proud of his city's achievements, but who has never used an airport himself.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Information Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve real-time flight information from a specific airport. The function takes in the name of the airport and returns a list of flights, including their code, estimated departure, and arrival times.\\\",\\n\\\"function_name\\\": \\\"get_flight_info\\\",\\n\\\"input_args\\\": \\\"airport\\\",\\n\\\"return\\\": \\\"[{flight_code, departure, arrival},...]\\\",\\n\\\"depend\\\": \\\"requests library, AviationStack API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young girl who discovers her passion for gymnastics and dreams of becoming an Olympic athlete", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gymnastics Skills Progression Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that helps users track their progress in learning different gymnastics skills. It returns a progress report showing the time it took to learn each skill and the total number of skills mastered.\\\",\\n\\\"function_name\\\": [\\\"add_skill\\\", \\\"get_progress_report\\\"],\\n\\\"input_args\\\": {\\n    \\\"add_skill\\\": [\\\"skill_name\\\", \\\"start_date\\\", \\\"mastered_date\\\"],\\n    \\\"get_progress_report\\\": []\\n},\\n\\\"return\\\": {\\n    \\\"add_skill\\\": \\\"None\\\",\\n    \\\"get_progress_report\\\": \\\"A string containing a progress report\\\"\\n},\\n\\\"depend\\\": [\\\"pandas\\\", \\\"datetime\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A literature teacher who introduces their students to the author's lighthouse stories as part of the curriculum", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses BERT model from HuggingFace to analyze the complexity of a given text, providing a complexity score between 0 and 1. The higher the score, the more complex the text is.\\\",\\n\\\"function_name\\\": \\\"analyze_text_complexity\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"complexity_score\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"torch\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"BERT from HuggingFace\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An avid poetry enthusiast and admirer of Henry Lawson", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rhyme Finder Interface\\\",\\n\\\"description\\\": \\\"This interface takes a word as input and returns a list of words that rhyme with the input word. It is useful for poets and writers looking for rhymes.\\\",\\n\\\"function_name\\\": \\\"find_rhyming_words\\\",\\n\\\"input_args\\\": \\\"word - the word to find rhymes for\\\",\\n\\\"return\\\": \\\"A list of words that rhyme with the input word\\\",\\n\\\"depend\\\": \\\"The function leverages the Datamuse API to find rhyming words\\\"\\n}\"", "description": "tool development"}
{"input persona": "A competitive business major determined to innovate in the FinTech sector", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses LSTM model from Keras library to predict the future price of a given stock.\\\",\\n\\\"function_name\\\": \\\"get_stock_price\\\",\\n\\\"input_args\\\": [\\\"ticker\\\"],\\n\\\"return\\\": \\\"Predicted Future Stock Price\\\",\\n\\\"depend\\\": \\\"pandas_datareader, numpy, sklearn, keras, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local farmer specializing in exotic and rare produce that perfectly complements fusion cuisine", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Produce Recommendation Interface\\\",\\n  \\\"description\\\": \\\"Recommends exotic and rare produce for a given cuisine and season, based on a dataset of fusion cuisine recipes and the produce they use.\\\",\\n  \\\"function_name\\\": \\\"recommend_produce\\\",\\n  \\\"input_args\\\": [\\\"cuisine\\\", \\\"season\\\"],\\n  \\\"return\\\": \\\"List of recommended produce\\\",\\n  \\\"depend\\\": \\\"Machine Learning Model (Nearest Neighbors from Sklearn), Python Library (pandas)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A race director seeking advice on designing challenging and engaging racecourses", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Elevation Profile Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a list of coordinates (latitude, longitude) that define the race route, and returns the elevation profile of the route, which can help the race director to assess the difficulty of the race.\\\",\\n  \\\"function_name\\\": \\\"get_elevation_profile\\\",\\n  \\\"input_args\\\": \\\"coordinates\\\",\\n  \\\"return\\\": \\\"A list of elevations corresponding to the input coordinates.\\\",\\n  \\\"depend\\\": \\\"Google Elevation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a working-class woman who benefited from federal assistance programs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Stamp Eligibility Interface\\\",\\n\\\"description\\\": \\\"This interface determines eligibility for SNAP (Supplemental Nutrition Assistance Program, commonly known as 'food stamps') based on user's income, household size, and state.\\\",\\n\\\"function_name\\\": \\\"calculate_snap_eligibility\\\",\\n\\\"input_args\\\": [\\\"income\\\", \\\"household_size\\\", \\\"state\\\"],\\n\\\"return\\\": \\\"A string indicating whether the user is likely to be eligible for SNAP benefits.\\\",\\n\\\"depend\\\": [\\\"USDA's Food and Nutrition Service API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A forensic entomologist who studies insects to determine time of death", "synthesized text": "\"{\\n\\\"name\\\": \\\"Insect Identification Interface\\\",\\n\\\"description\\\": \\\"Identify the species of an insect from an image file. Uses a TensorFlow Hub model trained on various species of insects.\\\",\\n\\\"function_name\\\": \\\"identify_insect\\\",\\n\\\"input_args\\\": \\\"path_to_image\\\",\\n\\\"return\\\": \\\"species of the insect\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software developer specializing in cloud computing who helps optimize the observatory system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cloud Usage Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface to interact with AWS Cost Explorer to provide cost and usage reports.\\\",\\n\\\"function_name\\\": \\\"get_aws_cost_and_usage\\\",\\n\\\"input_args\\\": {\\n    \\\"start_date\\\": \\\"The start date for the report in 'YYYY-MM-DD' format.\\\",\\n    \\\"end_date\\\": \\\"The end date for the report in 'YYYY-MM-DD' format.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, each containing the blended cost, unblended cost, and total usage for each day within the specified date range.\\\",\\n\\\"depend\\\": \\\"Boto3 library, AWS SDK for Python and AWS account\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software architect who specializes in designing modular software systems using OSGi technology", "synthesized text": "\"{\\n\\\"name\\\": \\\"OSGi Bundle Version Check Interface\\\",\\n\\\"description\\\": \\\"An interface to check the version of an OSGi bundle. The user provides the path to the jar file, and the function returns the version of the bundle.\\\",\\n\\\"function_name\\\": \\\"get_osgi_bundle_version\\\",\\n\\\"input_args\\\": [\\n    {\\n        \\\"name\\\": \\\"jar_file_path\\\",\\n        \\\"type\\\": \\\"String\\\",\\n        \\\"description\\\": \\\"The file path to the jar file of the OSGi bundle.\\\"\\n    }\\n],\\n\\\"return\\\": {\\n    \\\"name\\\": \\\"bundle_version\\\",\\n    \\\"type\\\": \\\"String\\\",\\n    \\\"description\\\": \\\"The version of the OSGi bundle.\\\"\\n},\\n\\\"depend\\\": [\\\"Python Library: zipfile\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A small independent record label owner who needs album covers designed for their vinyl releases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Album Cover Design Interface\\\",\\n\\\"description\\\": \\\"Converts an image into an artistic style suitable for an album cover\\\",\\n\\\"function_name\\\": \\\"design_album_cover\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\"],\\n\\\"return\\\": \\\"URL of the generated artistic image\\\",\\n\\\"depend\\\": \\\"DeepArt API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious Korean financier who is always on the go.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface uses the ExchangeRate-API to get the current exchange rate between two specified currencies.\\\",\\n\\\"function_name\\\": \\\"get_exchange_rate\\\",\\n\\\"input_args\\\": {\\n    \\\"base_currency\\\": \\\"The base currency you want to convert from. It should be in the 3-letter ISO format (e.g., 'USD').\\\",\\n    \\\"target_currency\\\": \\\"The target currency you want to convert to. It should also be in the 3-letter ISO format (e.g., 'KRW').\\\"\\n},\\n\\\"return\\\": \\\"The current exchange rate from the base currency to the target currency.\\\",\\n\\\"depend\\\": \\\"This function depends on the ExchangeRate-API and the requests library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a huge fan of Indonesian voice acting and puppetry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voice Actor Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input an audio file and returns the identified Indonesian voice actor's name.\\\",\\n\\\"function_name\\\": \\\"voice_actor_recognition\\\",\\n\\\"input_args\\\": \\\"audio_path - A string that specifies the path to the audio file\\\",\\n\\\"return\\\": \\\"A string containing the name of the identified voice actor\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, numpy, librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "a professional classical pianist who appreciates the complexity of Michael Tippett’s sonatas.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Sheet Music Transcription Interface\\\",\\n  \\\"description\\\": \\\"Transcribes an audio file to MIDI using a deep learning model from Magenta's Onsets and Frames. The user only needs to provide the path to an audio file, and the interface will return a MIDI file representing the transcribed sheet music.\\\",\\n  \\\"function_name\\\": \\\"transcribe_audio_to_midi\\\",\\n  \\\"input_args\\\": [\\\"audio_file_path\\\", \\\"sequence_example_file\\\", \\\"model_checkpoint\\\"],\\n  \\\"return\\\": \\\"MIDI file\\\",\\n  \\\"depend\\\": [\\\"magenta\\\", \\\"tensorflow\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A marathon runner who regularly trains in the same park as the architect", "synthesized text": "\"{\\n\\\"name\\\": \\\"Running Route Elevation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Maps Elevation API to calculate the total elevation gain for a running route. The user inputs the coordinates of the running route (start and end points), and the interface will return the total elevation gain of the route.\\\",\\n\\\"function_name\\\": \\\"get_elevation_gain\\\",\\n\\\"input_args\\\": {\\\"start_coords\\\": \\\"coordinates of start point of the running route\\\", \\\"end_coords\\\": \\\"coordinates of end point of the running route\\\"},\\n\\\"return\\\": \\\"total elevation gain of the running route\\\",\\n\\\"depend\\\": \\\"Google Maps Elevation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property developer seeking financing options for a new residential project", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mortgage Rate Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from various banks or financial service providers to pull current home loan interest rates. The users input the mortgage amount, term and down payment and the interface returns a comparison of interest rates from various providers.\\\",\\n\\\"function_name\\\": \\\"get_mortgage_rates\\\",\\n\\\"input_args\\\": [\\\"amount\\\", \\\"term\\\", \\\"down_payment\\\"],\\n\\\"return\\\": \\\"A dictionary with provider names as keys and corresponding interest rates as values\\\",\\n\\\"depend\\\": \\\"Web APIs from various banks or financial service providers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property developer with a clear vision for the project, relying on the construction professional to make it a reality", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Material Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the amount of building materials required for a construction project given a building plan.\\\",\\n\\\"function_name\\\": \\\"estimate_building_materials\\\",\\n\\\"input_args\\\": \\\"building_plan_path - A string that represents the file path of the building plan.\\\",\\n\\\"return\\\": \\\"An array of estimated building materials required for the construction project.\\\",\\n\\\"depend\\\": \\\"Python's sklearn library, a RandomForestRegressor model, and a hypothetical function `extract_features_from_plan`\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local single mother who has benefited from Arizona Helping Hands in the past", "synthesized text": "\"{\\n\\\"name\\\": \\\"Assistance Locator Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves a list of organizations that can provide the requested type of assistance in the specified location.\\\",\\n\\\"function_name\\\": \\\"get_assistance_providers\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"assistance_type\\\"],\\n\\\"return\\\": \\\"List of organizations\\\",\\n\\\"depend\\\": \\\"Charity Navigator API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The Kansas Jayhawks head coach who seeks the referee's feedback on game strategies and officiating decisions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze game strategies and referee decisions in basketball games. It leverages Sportradar API for game data and a pre-trained model from huggingface for analysis.\\\",\\n\\\"function_name\\\": \\\"analyze_game_strategy\\\",\\n\\\"input_args\\\": \\\"game_id - A string that represents the ID of the game.\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'team_strategy' and 'referee_decisions'. Each key corresponds to a list of dictionaries, where each dictionary represents a category and its score.\\\",\\n\\\"depend\\\": \\\"requests, json, transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A real estate agent who depends on the administrative assistant to keep track of appointments and manage property inspection schedules", "synthesized text": "\"{\\n\\\"name\\\": \\\"Calendar Management Interface\\\",\\n\\\"description\\\": \\\"This interface creates an event in Google Calendar. The user only needs to input event details like title, start time, end time, and the interface will create the event.\\\",\\n\\\"function_name\\\": \\\"create_event\\\",\\n\\\"input_args\\\": [\\\"title\\\", \\\"start_time\\\", \\\"end_time\\\"],\\n\\\"return\\\": \\\"Google Calendar event link\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a professional rowing coach who is obsessed with detail and strategizing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rowing Stroke Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a video of a rower and analyzes their rowing stroke, returning the stroke rate, stroke length, and power application.\\\",\\n\\\"function_name\\\": \\\"analyze_stroke\\\",\\n\\\"input_args\\\": \\\"path_to_video: str\\\",\\n\\\"return\\\": \\\"Dict[str, np.array]\\\",\\n\\\"depend\\\": \\\"Python libraries: cv2, numpy, keras; Machine learning model: a pre-trained model suitable for video analysis\\\"\\n}\"", "description": "tool development"}
{"input persona": "Un historien passionné par la généalogie des familles influentes en France", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interface de Recherche d'Arbre G\\u00e9n\\u00e9alogique\\\",\\n  \\\"description\\\": \\\"Une interface qui permet \\u00e0 l'utilisateur de rechercher l'arbre g\\u00e9n\\u00e9alogique d'une famille sp\\u00e9cifique en entrant le nom de famille. L'interface utilise l'API de FamilySearch pour obtenir les informations.\\\",\\n  \\\"function_name\\\": \\\"fetch_family_tree\\\",\\n  \\\"input_args\\\": {\\n    \\\"family_name\\\": \\\"Le nom de famille \\u00e0 rechercher.\\\"\\n  },\\n  \\\"return\\\": \\\"Un objet JSON contenant l'arbre g\\u00e9n\\u00e9alogique de la famille recherch\\u00e9e, ou un message d'erreur si la requ\\u00eate \\u00e9choue.\\\",\\n  \\\"depend\\\": \\\"Python library - requests, Web API - FamilySearch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned architect who sees a parallel between the pianist's compositions and architectural design", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music to Architecture Design Interface\\\",\\n\\\"description\\\": \\\"This interface converts music into visual patterns that can serve as a source of inspiration for architectural designs.\\\",\\n\\\"function_name\\\": \\\"music_to_spectrogram\\\",\\n\\\"input_args\\\": \\\"music_file_path\\\",\\n\\\"return\\\": \\\"A visual pattern representing the frequency components of the input music.\\\",\\n\\\"depend\\\": [\\\"librosa\\\", \\\"numpy\\\", \\\"matplotlib.pyplot\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A strict education officer focused on academic achievement over emotional support", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Performance Predictor Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts a student's academic performance based on factors such as attendance, past grades, study time, etc. Users input these factors, and the interface returns the predicted academic performance of the student.\\\",\\n\\\"function_name\\\": \\\"predict_student_performance\\\",\\n\\\"input_args\\\": [\\\"path_to_model\\\", \\\"student_data\\\"],\\n\\\"return\\\": \\\"The predicted academic performance of the student.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn.ensemble.RandomForestRegressor\\\", \\\"joblib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "歷史學家專注於現代沖突", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conflict Data Interface\\\",\\n\\\"description\\\": \\\"Interface to fetch data about conflicts that have occurred in a specific location within a given timeframe, leveraging the Armed Conflict Location & Event Data Project (ACLED) API.\\\",\\n\\\"function_name\\\": \\\"get_conflict_data\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"Information about all conflicts that have occurred in the specified location within the given dates\\\",\\n\\\"depend\\\": \\\"Armed Conflict Location & Event Data Project (ACLED) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A guitar teacher who specializes in teaching students how to play Lou Reed's iconic guitar riffs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chord Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface takes an audio file of a guitar riff and outputs a sequence of musical notes.\\\",\\n\\\"function_name\\\": \\\"audio_to_pitch_sequence\\\",\\n\\\"input_args\\\": \\\"audio_file\\\",\\n\\\"return\\\": \\\"pitch_sequence\\\",\\n\\\"depend\\\": \\\"tensorflow, crepe, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical student shadowing the medical technologist to learn about the practical implementation of advanced medical equipment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Image Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to segment medical images, specifically for the identification of different tissues in MRI images.\\\",\\n\\\"function_name\\\": \\\"medical_image_analysis\\\",\\n\\\"input_args\\\": \\\"path_to_img - String that specifies the path to the image file\\\",\\n\\\"return\\\": \\\"Segmented image displayed using matplotlib's jet colormap and also returned as a 2D numpy array\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, numpy, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "an intense book filer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Filtering Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Google Books API to filter books based on specific requirements, such as author, genre, and publication year.\\\",\\n\\\"function_name\\\": \\\"filter_books\\\",\\n\\\"input_args\\\": {\\n    \\\"author\\\": \\\"Optional: The author of the book.\\\",\\n    \\\"genre\\\": \\\"Optional: The genre of the book.\\\",\\n    \\\"publication_year\\\": \\\"Optional: The publication year of the book.\\\"\\n},\\n\\\"return\\\": \\\"A list of book titles that match the specified filters.\\\",\\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "：一名香港本地出租车司机，钟情于香港电影的黄金时代。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hong Kong Film Recommendation Interface\\\", \\n\\\"description\\\": \\\"This interface takes the user's preferred genre and year as input and returns a list of the most highly rated Hong Kong films from that year in the specified genre.\\\", \\n\\\"function_name\\\": \\\"get_hk_movie_recommendations\\\", \\n\\\"input_args\\\": [\\\"genre\\\", \\\"year\\\"], \\n\\\"return\\\": \\\"List of film titles\\\", \\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A strategist and decision-maker who relies on the engineer's analysis to make informed race-day decisions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Race Analysis Interface\\\",\\n\\\"description\\\": \\\"Predicts the winning probability of a race based on the current position of a race car using a Random Forest Classifier model trained on historical race data.\\\",\\n\\\"function_name\\\": \\\"predict_win_probability\\\",\\n\\\"input_args\\\": {\\\"current_position\\\": \\\"The current position of the race car\\\"},\\n\\\"return\\\": \\\"Winning probability of the race as a float between 0 and 1\\\",\\n\\\"depend\\\": \\\"scikit-learn library, pandas library, race_data.csv dataset\\\"\\n}\"", "description": "tool development"}
{"input persona": "An older relative who grew up in a time when physical security was the norm and shares stories of relying on strong locks and alarms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Password Strength Checker\\\",\\n\\\"description\\\": \\\"This interface checks the strength of a password based on certain policies such as length, uppercase, numbers, and nonletters. A password is considered strong if it meets all the policy requirements.\\\",\\n\\\"function_name\\\": \\\"check_password_strength\\\",\\n\\\"input_args\\\": [\\\"password\\\"],\\n\\\"return\\\": \\\"A boolean value indicating whether the password is strong (True) or not (False).\\\",\\n\\\"depend\\\": [\\\"password_strength Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A junior C# developer who is learning about NLibuv, an event-driven I/O library based on Libuv.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Driven I/O Interface\\\",\\n\\\"description\\\": \\\"An interface that encapsulates the event-driven I/O functionalities. The user only needs to input the event type and callback function, and the interface will handle the event accordingly.\\\",\\n\\\"function_name\\\": \\\"handle_event\\\",\\n\\\"input_args\\\": {\\n    \\\"event_type\\\": \\\"The type of event to handle. It can be 'read', 'write' or 'exception'.\\\",\\n    \\\"callback\\\": \\\"The callback function to execute when the event is triggered.\\\"\\n},\\n\\\"return\\\": \\\"No return value, but the callback function will be executed when the event is triggered.\\\",\\n\\\"depend\\\": \\\"Python asyncio library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional golfer who has competed against Robert Allenby in multiple tournaments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Golf Score Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows a professional golfer to input their past scores and the scores of Robert Allenby, and it will return a prediction of the user's future scores compared to Allenby.\\\",\\n\\\"function_name\\\": \\\"predict_golf_scores\\\",\\n\\\"input_args\\\": [\\\"user_scores\\\", \\\"allenby_scores\\\"],\\n\\\"return\\\": \\\"Predicted future golf score\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"scikit-learn\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a radiation therapist from Canada who genuinely loves her job.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Radiation Dosage Calculator Interface\\\",\\n  \\\"description\\\": \\\"Calculates the radiation dosage per fraction and the equivalent dose in sieverts (Sv) for a given total dosage, number of fractions, and radiation type.\\\",\\n  \\\"function_name\\\": \\\"calculate_radiation_dosage\\\",\\n  \\\"input_args\\\": {\\n    \\\"total_dosage\\\": \\\"The total radiation dosage required for the treatment.\\\",\\n    \\\"number_of_fractions\\\": \\\"The number of fractions in which the total dosage will be divided.\\\",\\n    \\\"radiation_type\\\": \\\"The type of radiation used for the treatment. It can be 'alpha', 'beta', or 'gamma'.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"dosage_per_fraction\\\": \\\"The radiation dosage per fraction.\\\",\\n    \\\"dosage_in_Sv\\\": \\\"The equivalent dose in sieverts (Sv), the standard measure of radiation dose.\\\"\\n  },\\n  \\\"depend\\\": \\\"SciPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A prominent figure in the open-source community who regularly gives talks on OVS and its benefits", "synthesized text": "\"{\\n\\\"name\\\": \\\"Open vSwitch Configuration Interface\\\",\\n\\\"description\\\": \\\"This interface manages the configuration of Open vSwitch, allowing users to add, delete, and list interfaces in a particular bridge.\\\",\\n\\\"function_name\\\": \\\"manage_ovs_interfaces\\\",\\n\\\"input_args\\\": [\\\"action\\\", \\\"bridge\\\", \\\"interface\\\"],\\n\\\"return\\\": \\\"A status message of the operation or a list of the interfaces in the specified bridge in case of 'list' action.\\\",\\n\\\"depend\\\": \\\"Python's subprocess module to interact with the command-line interface of Open vSwitch.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lead guitarist in a rock band, looking for a unique tattoo design inspired by their latest album", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Similarity Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to find similar images from a large dataset based on the input image. It can be used to find tattoo design inspiration.\\\",\\n\\\"function_name\\\": \\\"find_similar_images\\\",\\n\\\"input_args\\\": [\\\"album_cover_path\\\", \\\"top_k\\\"],\\n\\\"return\\\": \\\"A list of paths to the top_k most similar images in the dataset.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, sklearn, and a dataset of images\\\"\\n}\"", "description": "tool development"}
{"input persona": "A healthcare provider liaison responsible for liaising between health practitioners and database management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Data Query Interface\\\",\\n\\\"description\\\": \\\"This interface provides an easy way to query patient data from a SQLite database using Python's sqlite3 library.\\\",\\n\\\"function_name\\\": \\\"get_patient_data\\\",\\n\\\"input_args\\\": {\\n    \\\"patient_id\\\": \\\"The unique identifier for the patient whose data is to be fetched\\\"\\n},\\n\\\"return\\\": {\\n    \\\"patient_data\\\": \\\"A dictionary containing the fetched patient data if found, otherwise a message stating that no data was found.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"sqlite3\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "An attorney specializing in international trade law, providing expert advice on cross-border transportation issues", "synthesized text": "\"{\\n\\\"name\\\": \\\"Incoterms Finder Interface\\\",\\n\\\"description\\\": \\\"An interface to find Incoterms (International Commercial Terms) in a given legal text. Useful for attorneys working in international trade law.\\\",\\n\\\"function_name\\\": \\\"find_incoterms_in_text\\\",\\n\\\"input_args\\\": \\\"text - The legal text to find Incoterms in.\\\",\\n\\\"return\\\": \\\"A list of all Incoterms found in the text.\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers and a pre-trained model (dslim/bert-base-NER in this example).\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software vendor specializing in continuous integration and deployment solutions, offering streamlined processes for quick software updates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Continuous Deployment Interface\\\",\\n\\\"description\\\": \\\"An interface to start a new build job for continuous integration and deployment using the Jenkins API.\\\",\\n\\\"function_name\\\": \\\"start_jenkins_build\\\",\\n\\\"input_args\\\": {\\\"server_url\\\": \\\"string\\\", \\\"job_name\\\": \\\"string\\\", \\\"username\\\": \\\"string\\\", \\\"password\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": \\\"requests library, Jenkins API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a long-distance truck driver originally from Bangladesh", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Directions API to provide users with the optimal route based on their start and end locations.\\\",\\n\\\"function_name\\\": \\\"get_optimal_route\\\",\\n\\\"input_args\\\": {\\n    \\\"start_location\\\": \\\"string representing the start location (e.g., 'Dhaka')\\\",\\n    \\\"end_location\\\": \\\"string representing the end location (e.g., 'Chittagong')\\\"\\n},\\n\\\"return\\\": {\\n    \\\"distance\\\": \\\"string representing the total distance of the route (e.g., '264 km')\\\",\\n    \\\"duration\\\": \\\"string representing the estimated duration of the route (e.g., '5 hours 20 mins')\\\",\\n    \\\"start_address\\\": \\\"string representing the detailed address of the start location\\\",\\n    \\\"end_address\\\": \\\"string representing the detailed address of the end location\\\",\\n    \\\"steps\\\": \\\"list of strings, each representing step-by-step instructions for the route\\\"\\n},\\n\\\"depend\\\": \\\"Google Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A home stager who uses synthetic aroma products to make properties more inviting for potential buyers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aroma Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends the best aroma based on the property's details and the preferences of potential buyers.\\\",\\n\\\"function_name\\\": \\\"recommend_aroma\\\",\\n\\\"input_args\\\": {\\n    \\\"property_details\\\": \\\"A string describing the property's details\\\",\\n    \\\"buyer_preferences\\\": \\\"A string describing the preferences of potential buyers\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended aromas.\\\",\\n\\\"depend\\\": \\\"Scikit-learn library, Pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An academic researcher interested in conducting oral history interviews with long-time residents", "synthesized text": "\"{\\n\\\"name\\\": \\\"Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained ASR model from Huggingface Transformers to convert long speech recordings into text.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"Text transcription of the input audio file.\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers, soundfile\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software developer who has experience with client-server applications and database management.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Health Check Interface\\\",\\n\\\"description\\\": \\\"A simplified interface for checking the health of a PostgreSQL database by executing a simple SELECT query. Returns True if the database is responsive, False otherwise.\\\",\\n\\\"function_name\\\": \\\"check_database_health\\\",\\n\\\"input_args\\\": [\\\"db_uri\\\"],\\n\\\"return\\\": \\\"boolean (True if database is healthy, False otherwise)\\\",\\n\\\"depend\\\": \\\"Python libraries: psycopg2, sqlalchemy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A speedcuber with a knack for solving the Rubik's Cube one-handed and blindfolded", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cube Scramble Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a scramble for a Rubik's Cube of a given size.\\\",\\n\\\"function_name\\\": \\\"generate_scramble\\\",\\n\\\"input_args\\\": \\\"cube_size\\\",\\n\\\"return\\\": \\\"A string representing the scramble.\\\",\\n\\\"depend\\\": \\\"pycuber library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graduate whose soul has been taken by the corporates.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Resume Review Interface\\\",\\n\\\"description\\\": \\\"This interface extracts various types of information from a resume, including skills, college name, degree, designation, experiences, and more. It uses the 'pyresparser' Python library to parse the resume.\\\",\\n\\\"function_name\\\": \\\"extract_resume_information\\\",\\n\\\"input_args\\\": \\\"resume_path - A string that represents the path to a resume file (PDF, docx).\\\",\\n\\\"return\\\": \\\"A dictionary of the extracted information from the resume.\\\",\\n\\\"depend\\\": \\\"pyresparser Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A reload speed specialist who can quickly replenish ammunition during competitions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bullet Counter Interface\\\",\\n\\\"description\\\": \\\"This interface tracks the number of bullets left in the magazine and the total number of bullets left. Users input the initial number of bullets in the magazine, the total number of bullets, and the number of bullets fired. The interface returns the number of bullets remaining in the magazine and the total number of bullets remaining.\\\",\\n\\\"function_name\\\": \\\"bullet_counter\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"initial_magazine_bullets\\\": \\\"The initial number of bullets in the magazine.\\\",\\n    \\\"total_bullets\\\": \\\"The total number of bullets available.\\\",\\n    \\\"bullets_fired\\\": \\\"The number of bullets the user fired.\\\"\\n    },\\n\\\"return\\\": \\n    {\\n    \\\"remaining_magazine_bullets\\\": \\\"The number of bullets remaining in the magazine after firing.\\\",\\n    \\\"total_bullets\\\": \\\"The total number of bullets remaining after firing.\\\"\\n    },\\n\\\"depend\\\": \\\"Python Basic Libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A science professor who believes that history is the least important trivia category", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trivia Question Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates trivia questions from specified categories, excluding history. It is very helpful for a science professor who believes that history is the least important trivia category.\\\",\\n\\\"function_name\\\": \\\"generate_trivia_questions\\\",\\n\\\"input_args\\\": [\\\"number_of_questions\\\", \\\"categories\\\"],\\n\\\"return\\\": \\\"List of trivia questions with category, type, difficulty, question, correct answer, and incorrect answers.\\\",\\n\\\"depend\\\": \\\"Open Trivia Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated team of volunteers who provide logistical and emotional support during races", "synthesized text": "\"{\\n\\\"name\\\": \\\"Race Support Interface\\\",\\n\\\"description\\\": \\\"This interface allows volunteers to send supportive text messages to a list of racers during a race.\\\",\\n\\\"function_name\\\": \\\"send_supportive_message\\\",\\n\\\"input_args\\\": [\\\"phone_numbers\\\", \\\"message\\\"],\\n\\\"return\\\": \\\"A string message indicating that the supportive messages have been sent to all racers.\\\",\\n\\\"depend\\\": \\\"Twilio API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Belgian waffle vendor who is a casual cycling fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cycling Race Result Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch cycling race results or rider's performance data\\\",\\n\\\"function_name\\\": [\\\"get_cycling_race_result\\\", \\\"get_rider_results\\\"],\\n\\\"input_args\\\": [\\\"race_name\\\", \\\"rider_name\\\"],\\n\\\"return\\\": \\\"Race results or Rider's performance data\\\",\\n\\\"depend\\\": \\\"ProCyclingStats API\\\"\\n}\"", "description": "tool development"}
{"input persona": "GZA from Wu-Tang Clan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lyric Rhyme Matching Interface\\\",\\n\\\"description\\\": \\\"This interface takes a word as input and returns a list of words that rhyme with the input word. Useful for songwriters, rappers, and poets.\\\",\\n\\\"function_name\\\": \\\"get_rhymes\\\",\\n\\\"input_args\\\": [\\\"word\\\"],\\n\\\"return\\\": \\\"List of words that rhyme with the input word\\\",\\n\\\"depend\\\": \\\"pronouncing library in Python\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local journalist familiar with Tulare County and interested in aviation and law enforcement.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Traffic Monitoring Interface\\\",\\n\\\"description\\\": \\\"Fetches real-time flight data and returns only law enforcement aircrafts for a specific region\\\",\\n\\\"function_name\\\": \\\"get_law_enforcement_aircrafts\\\",\\n\\\"input_args\\\": [\\\"longitude_min\\\", \\\"latitude_min\\\", \\\"longitude_max\\\", \\\"latitude_max\\\"],\\n\\\"return\\\": \\\"List of law enforcement aircrafts within the specified region. Each aircraft data includes callsign, origin country, time position, last contact time, longitude, latitude, altitude, on ground status, velocity, true track, vertical rate, sensors, and geo altitude\\\",\\n\\\"depend\\\": \\\"OpenSky API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An artist who captures the beauty of lavender fields in various seasons", "synthesized text": "\"{\\n  \\\"name\\\": \\\"AI Art Generation Interface\\\",\\n  \\\"description\\\": \\\"Generates an AI-created image based on a provided textual description.\\\",\\n  \\\"function_name\\\": \\\"generate_image_from_text\\\",\\n  \\\"input_args\\\": [\\\"description\\\"],\\n  \\\"return\\\": \\\"A numpy array representing the generated image.\\\",\\n  \\\"depend\\\": [\\\"TensorFlow\\\", \\\"TensorFlow Hub\\\", \\\"ProGAN model from TensorFlow Hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a software engineer with 10 years of experience working with different programming languages including AutoIt", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Formatting Interface\\\",\\n\\\"description\\\": \\\"This interface receives a piece of code and the source and target programming languages, and returns the code converted into the target language.\\\",\\n\\\"function_name\\\": \\\"convert_code\\\",\\n\\\"input_args\\\": [\\\"source_code\\\", \\\"source_language\\\", \\\"target_language\\\"],\\n\\\"return\\\": \\\"The converted code as a string.\\\",\\n\\\"depend\\\": \\\"Rosetta Code Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A longtime friend and business partner of B.C. Lee.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface uses the openexchangerates API to get the current currency conversion rates. Users input their base currency and the currency they want to convert to, and it returns the conversion rate.\\\",\\n\\\"function_name\\\": \\\"get_currency_conversion_rate\\\",\\n\\\"input_args\\\": {\\n\\\"base_currency\\\": \\\"The currency you want to convert from.\\\",\\n\\\"target_currency\\\": \\\"The currency you want to convert to.\\\"\\n},\\n\\\"return\\\": \\\"The conversion rate from the base currency to the target currency.\\\",\\n\\\"depend\\\": \\\"Uses the Open Exchange Rates API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local resident of Mönchengladbach who is not very familiar with architecture terminology, but who is interested in the future development of their town.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Permit Data Interface\\\", \\n\\\"description\\\": \\\"An interface to fetch and summarize building permit data for a specified city, indicating the future development of the area.\\\", \\n\\\"function_name\\\": \\\"fetch_building_permit_data\\\", \\n\\\"input_args\\\": [\\\"city\\\"], \\n\\\"return\\\": \\\"A dictionary with keys - 'Total Permits', 'New Buildings', 'Renovations', 'Demolitions', and their respective counts as values.\\\",\\n\\\"depend\\\": \\\"requests, pandas, Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a devoted Gamba Osaka supporter who doesn't fully understand English.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Live Match Commentary Translation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches live match commentary for a given football team and translates it into the user's preferred language.\\\",\\n\\\"function_name\\\": \\\"translate_commentary\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"team_name\\\": \\\"Name of the user's favorite football team\\\",\\n    \\\"target_language\\\": \\\"The language to which the user wants the commentary to be translated\\\"\\n    },\\n\\\"return\\\": \\\"Translated live match commentary\\\",\\n\\\"depend\\\": \\\"huggingface's transformer library for translation and a Sports API for fetching live match commentary\\\"\\n}\"", "description": "tool development"}
{"input persona": "A journalist who covers political events and provides a platform for the community organizer to promote the Congress party's initiatives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitter Trending Topics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the top trending topics related to the Congress party on Twitter using the given geolocation ID (WOEID).\\\",\\n\\\"function_name\\\": \\\"get_trending_topics\\\",\\n\\\"input_args\\\": \\\"woeid - Where On Earth Identifier, a unique identifier assigned by Twitter to specific geographic locations\\\",\\n\\\"return\\\": \\\"A list of top trending topics related to the Congress party on Twitter.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tweepy\\\"], \\\"Web APIs\\\": [\\\"Twitter API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A diligent teenage learner interested in mastering jazz guitar techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chord Progression Generator\\\",\\n\\\"description\\\": \\\"Generates a random chord progression in a given key\\\",\\n\\\"function_name\\\": \\\"generate_chord_progression\\\",\\n\\\"input_args\\\": [\\\"key\\\"],\\n\\\"return\\\": \\\"List of chords in the generated chord progression\\\",\\n\\\"depend\\\": \\\"music21 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history obsessed, organized stay-at-home mom who loves to find patterns in facts.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historical Event Comparison Interface\\\",\\n  \\\"description\\\": \\\"This interface compares two historical events input by the user. It returns the difference in years, months, and days between the events, and a brief summary of the two events from Wikipedia.\\\",\\n  \\\"function_name\\\": \\\"compare_historical_events\\\",\\n  \\\"input_args\\\": [\\\"event1\\\", \\\"event2\\\"],\\n  \\\"return\\\": {\\\"years\\\": \\\"int\\\", \\\"months\\\": \\\"int\\\", \\\"days\\\": \\\"int\\\"},\\n  \\\"depend\\\": [\\\"Wikipedia API\\\", \\\"dateutil\\\", \\\"LLM\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A researcher investigating the presence of water on Mars and its implications for habitability", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mars Weather Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch and analyze weather data from Mars, in a specified date range, using NASA's Mars Weather API. It returns a pandas dataframe with the date, average temperature, minimum temperature, and maximum temperature.\\\",\\n\\\"function_name\\\": \\\"get_mars_weather_data\\\",\\n\\\"input_args\\\": {\\n    \\\"start_date\\\": \\\"The start date for the data (string in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ)\\\",\\n    \\\"end_date\\\": \\\"The end date for the data (string in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ)\\\"\\n},\\n\\\"return\\\": \\\"Pandas dataframe with columns: ['av', 'ct', 'mn', 'mx'] representing average, count, minimum and maximum temperatures respectively, with dates as index.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas; Web APIs: NASA's Mars Weather API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local who voted for Ashish Kumar Chhabra in the recent elections", "synthesized text": "\"{\\n\\\"name\\\": \\\"Election Result Checker Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a candidate and returns the election results for that candidate.\\\",\\n\\\"function_name\\\": \\\"get_election_results\\\",\\n\\\"input_args\\\": {\\n  \\\"candidate_name\\\": \\\"The name of the candidate for whom the user voted. Type: String\\\"\\n  },\\n\\\"return\\\": {\\n  \\\"candidate\\\": \\\"The name of the candidate. Type: String\\\",\\n  \\\"votes\\\": \\\"The total number of votes received by the candidate. Type: Integer\\\",\\n  \\\"percentage\\\": \\\"The percentage of votes received by the candidate. Type: Float\\\",\\n  \\\"result\\\": \\\"The election result for the candidate. Type: String\\\"\\n},\\n\\\"depend\\\": \\\"This function depends on the python 'requests' library and a government or election result provider API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Chinese human rights lawyer who is inspired by advocates for political and judicial reform.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chinese Law Documents Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates Chinese law documents into English to aid non-Chinese speaking advocates in understanding Chinese political and judicial reforms.\\\",\\n\\\"function_name\\\": \\\"translate_chinese_law_document\\\",\\n\\\"input_args\\\": {\\\"chinese_text\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (translated English text)\\\",\\n\\\"depend\\\": \\\"Hugging Face's Helsinki-NLP/opus-mt-zho-eng NMT model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A television executive who appreciates the judge's ability to create captivating moments and generate viewer interest", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Rating Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the rating of a TV show from the IMDb API.\\\",\\n\\\"function_name\\\": \\\"get_tv_show_rating\\\",\\n\\\"input_args\\\": \\\"tv_show_name\\\",\\n\\\"return\\\": \\\"The rating of the TV show as a float or None if the show or its rating was not found.\\\",\\n\\\"depend\\\": \\\"IMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skilled structural engineer who collaborates with the construction engineer on complex design challenges", "synthesized text": "\"{\\n\\\"name\\\": \\\"Structural Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses numpy and scipy to perform structural analysis calculations based on a stiffness matrix, degree of indeterminacy, load vector, and displacement vector. It returns the reaction vector and the displacement vector.\\\",\\n\\\"function_name\\\": \\\"structural_analysis\\\",\\n\\\"input_args\\\": [\\\"stiffness_matrix\\\", \\\"indeterminacy_degree\\\", \\\"load_vector\\\", \\\"displacement_vector\\\"],\\n\\\"return\\\": [\\\"reaction_vector\\\", \\\"displacement_vector\\\"],\\n\\\"depend\\\": \\\"numpy, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "Специалист по контролю качества, который проверяет функциональность и взаимодействие интерфейса пользователя", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Automated UI Testing Interface\\\",\\n  \\\"description\\\": \\\"An interface for automating user interface tests. It uses Selenium WebDriver to interact with the webpage and perform a series of standard tests for functionality and user interaction.\\\",\\n  \\\"function_name\\\": \\\"run_automated_ui_tests\\\",\\n  \\\"input_args\\\": \\\"url - The URL of the webpage to test.\\\",\\n  \\\"return\\\": \\\"A report detailing the results of the tests.\\\",\\n  \\\"depend\\\": \\\"Selenium WebDriver\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst who helps analyze and interpret large amounts of copyright infringement data", "synthesized text": "\"{\\n\\\"name\\\": \\\"Infringement Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze and interpret large amounts of copyright infringement data. The function reads a CSV file, calculates the total number of infringements, and identifies the top 5 infringers and the top 5 most affected copyright holders.\\\",\\n\\\"function_name\\\": \\\"analyze_infringement_data\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": {\\n    \\\"total_infringements\\\": \\\"The total number of infringements in the data.\\\",\\n    \\\"top_infringers\\\": \\\"A list of the top 5 infringers.\\\",\\n    \\\"top_affected\\\": \\\"A list of the top 5 most affected copyright holders.\\\"\\n},\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "An alumnus of the School of Sport, Exercise and Health Sciences (SSEHS) at Loughborough University, now a successful sports psychologist living in the United States", "synthesized text": "\"{\\n\\\"name\\\": \\\"Performance Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to predict an athlete's performance based on certain input parameters.\\\",\\n\\\"function_name\\\": \\\"predict_performance\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"experience\\\", \\\"practice_hours\\\", \\\"psychological_score\\\"],\\n\\\"return\\\": \\\"Predicted performance score\\\",\\n\\\"depend\\\": [\\\"scikit-learn\\\", \\\"pandas\\\", \\\"numpy\\\", \\\"Pre-trained Random Forest Regressor model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a Democrat New Yorker who firmly supports the #MeToo movement", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Twitter Sentiment Analysis Interface\\\",\\n  \\\"description\\\": \\\"Fetches recent tweets about #MeToo movement and performs sentiment analysis on them\\\",\\n  \\\"function_name\\\": \\\"analyze_sentiment_of_tweets\\\",\\n  \\\"input_args\\\": [],\\n  \\\"return\\\": \\\"A dictionary with number of positive and negative sentiments\\\",\\n  \\\"depend\\\": [\\\"tweepy\\\", \\\"transformers (Hugging Face)\\\", \\\"Twitter API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A member of the current Louisiana State Senate who admires the career trajectory of Kenneth Osterberger.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legislator Voting Record Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the voting record of a legislator. It utilizes the ProPublica Congress API to fetch this data.\\\",\\n\\\"function_name\\\": \\\"fetch_voting_record\\\",\\n\\\"input_args\\\": {\\\"legislator_id\\\": \\\"String (The ID of the legislator)\\\"},\\n\\\"return\\\": \\\"Dictionary (Each key is a bill or resolution and the corresponding value is the legislator's vote)\\\",\\n\\\"depend\\\": \\\"ProPublica Congress API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A captured sailor who reluctantly joins the pirate crew and learns the ways of the sea", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pirate Language Translator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the funtranslations.com API to translate English text into Pirate language.\\\",\\n\\\"function_name\\\": \\\"translate_to_pirate\\\",\\n\\\"input_args\\\": \\\"english_text\\\",\\n\\\"return\\\": \\\"The translated Pirate text.\\\",\\n\\\"depend\\\": \\\"funtranslations.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A supportive partner who encourages their love for Brazilian Jiu-Jitsu and understands the commitment required for training", "synthesized text": "\"{\\n  \\\"name\\\": \\\"BJJ Training Tracker Interface\\\",\\n  \\\"description\\\": \\\"An interface to automatically add Brazilian Jiu-Jitsu training sessions to a Google Calendar. This helps the user track their training schedule and keep others informed about their commitments.\\\",\\n  \\\"function_name\\\": \\\"add_bjj_training_to_calendar\\\",\\n  \\\"input_args\\\": {\\n    \\\"date\\\": \\\"The date of the training session (in 'YYYY-MM-DD' format).\\\",\\n    \\\"start_time\\\": \\\"The start time of the training session (in 'HH:MM' format in 24-hour time).\\\",\\n    \\\"end_time\\\": \\\"The end time of the training session (in 'HH:MM' format in 24-hour time).\\\",\\n    \\\"description\\\": \\\"An optional description of the training session.\\\"\\n  },\\n  \\\"return\\\": \\\"The event ID of the training session added to the calendar.\\\",\\n  \\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A postdoctoral researcher focusing on sensor fusion and autonomous navigation in robotics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sensor Fusion and Autonomous Navigation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses data from multiple sensors (like Lidar and Radar) to calculate the optimal path for a robot. The user inputs the robot's current position, destination, and sensor data. The interface returns a list of waypoints for the robot to follow.\\\",\\n\\\"function_name\\\": \\\"get_waypoints\\\",\\n\\\"input_args\\\": [\\\"current_position\\\", \\\"destination\\\", \\\"lidar_data\\\", \\\"radar_data\\\"],\\n\\\"return\\\": \\\"waypoints\\\",\\n\\\"depend\\\": \\\"Robot Operating System (ROS), rospy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A civil engineer working in hydraulic engineering focuses on the flow and conveyance of fluids, principally water", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hydrograph Generation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in rainfall data and generates a hydrograph, which is a graphical representation of the flow rate of water over time.\\\",\\n\\\"function_name\\\": \\\"generate_hydrograph\\\",\\n\\\"input_args\\\": {\\\"rainfall_data\\\": \\\"a list of tuples, where each tuple represents time in hours and amount of rainfall in mm\\\"},\\n\\\"return\\\": \\\"A hydrograph displayed to the user, showing the flow rate of water over time. The function does not return a value in the traditional sense.\\\",\\n\\\"depend\\\": {\\\"Python libraries\\\": [\\\"numpy\\\", \\\"matplotlib\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Айтишник с двадцатилетним опытом работы", "synthesized text": "\"{\\n\\\"name\\\": \\\"Server Load Balancer\\\",\\n\\\"description\\\": \\\"This interface allows users to check the load on different servers and balance it accordingly by finding the server with the least load.\\\",\\n\\\"function_name\\\": \\\"get_least_loaded_server\\\",\\n\\\"input_args\\\": \\\"a list of server IP addresses\\\",\\n\\\"return\\\": \\\"the IP address of the server with the least load\\\",\\n\\\"depend\\\": \\\"Python's built-in os library and the psutil library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A psychology student studying the effects of stress on decision-making in military officers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Heart Rate Variability Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a csv file containing RR Heart Rate Intervals and computes a variety of Heart Rate Variability (HRV) metrics, which are often used as indicators of physiological stress.\\\",\\n\\\"function_name\\\": \\\"compute_hrv_metrics\\\",\\n\\\"input_args\\\": {\\\"path_to_csv\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"dictionary\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"numpy\\\", \\\"pandas\\\", \\\"biosppy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A medical device manufacturer who collaborates with the sales representative to develop and market the contrast agent", "synthesized text": "\"{\\n\\\"name\\\": \\\"Contrast Agent Market Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses Yahoo Finance API to fetch the current market data of related companies in the contrast agent industry. This can help in analyzing the market trends and understanding the competitors better.\\\",\\n\\\"function_name\\\": \\\"get_market_data\\\",\\n\\\"input_args\\\": \\\"stock_symbols - A list of stock symbols of the competitor companies in the contrast agent industry.\\\",\\n\\\"return\\\": \\\"A pandas dataframe containing the market data of the listed companies.\\\",\\n\\\"depend\\\": \\\"Python libraries (requests, pandas), Yahoo Finance API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mother of triplets born prematurely, navigating the challenges of raising medically fragile children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Appointment Scheduler Interface\\\",\\n\\\"description\\\": \\\"An interface to schedule medical appointments in a Google Calendar. The user provides the appointment details, and the interface creates a calendar event and returns a confirmation.\\\",\\n\\\"function_name\\\": \\\"create_event\\\",\\n\\\"input_args\\\": {\\n    \\\"summary\\\": \\\"A brief description of the appointment.\\\",\\n    \\\"location\\\": \\\"The location of the appointment.\\\",\\n    \\\"description\\\": \\\"A detailed description of the appointment.\\\",\\n    \\\"start_time\\\": \\\"The start time of the appointment in ISO 8601 format.\\\",\\n    \\\"end_time\\\": \\\"The end time of the appointment in ISO 8601 format.\\\"\\n},\\n\\\"return\\\": \\\"A confirmation message with a link to the created event.\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired railway enthusiast fond of blogging about her canal walks.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Distance and Time Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Maps Directions API to calculate the walking distance and estimated time between two points. Ideal for bloggers who want to note the distance and walking time of their walks.\\\",\\n\\\"function_name\\\": \\\"get_walking_distance_and_time\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": [\\\"distance\\\", \\\"duration\\\"],\\n\\\"depend\\\": [\\\"requests\\\", \\\"Google Maps Directions API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a computer science student learning about Node communication in Apollo Cyber RT", "synthesized text": "\"{\\n\\\"name\\\": \\\"CyberRT Node Communication Log Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface is for students or developers who are learning or working on Apollo Cyber RT. This interface takes the path of a log file generated by Cyber RT as input and returns a summary of node communication (which node sent what message to which node at what time).\\\",\\n\\\"function_name\\\": \\\"analyze_node_communication\\\",\\n\\\"input_args\\\": [\\\"log_file_path\\\"],\\n\\\"return\\\": \\\"A pandas DataFrame with columns: node, message, counts, which represents the communication between nodes in the Cyber RT system.\\\",\\n\\\"depend\\\": [\\\"Python Standard Library (re, open)\\\", \\\"Pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a civic-minded tailor in Ondo State, Nigeria, with an active interest in local politics and a knack for breaking down complex situations into simple fabric analogies.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Political News Simplifier Interface\\\",\\n\\\"description\\\": \\\"An interface that gets the latest political news and simplifies it using a large language model.\\\",\\n\\\"function_name\\\": \\\"simplify_news\\\",\\n\\\"input_args\\\": \\\"None\\\",\\n\\\"return\\\": \\\"A tuple containing the title of the news article and the simplified news article.\\\",\\n\\\"depend\\\": \\\"News API, Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "Un noto architetto che contribuisce con la sua creatività e competenza nella progettazione degli immobili", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interfaccia di Ricognizione 3D da Immagini 2D\\\",\\n  \\\"description\\\": \\\"Crea un modello 3D da un'immagine 2D utilizzando un modello pre-addestrato da TensorFlow Hub.\\\",\\n  \\\"function_name\\\": \\\"create_3d_model_from_2d_image\\\",\\n  \\\"input_args\\\": \\\"path_to_img\\\",\\n  \\\"return\\\": \\\"Un numpy array che rappresenta il modello 3D dell'immagine 2D.\\\",\\n  \\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, modello pre-addestrato 'https://tfhub.dev/google/3d_image_reconstruction/1'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local tour guide in Laibin, Guangxi, China", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Local Attraction Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Google Places API to recommend local attractions based on the user's current location. It returns a list of names of the attractions.\\\",\\n  \\\"function_name\\\": \\\"get_local_attractions\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"The user's current location in latitude,longitude format.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of names of the nearby local attractions.\\\",\\n  \\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A politician leading a pilot project of UBI implementation in a small town", "synthesized text": "\"{\\n\\\"name\\\": \\\"UBI Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the likely effects on the economy of a small town after implementing Universal Basic Income (UBI).\\\",\\n\\\"function_name\\\": \\\"predict_ubi_effects\\\",\\n\\\"input_args\\\": {\\n    \\\"num_residents\\\": \\\"The number of residents in the town.\\\",\\n    \\\"avg_income\\\": \\\"The average income of the town's residents.\\\",\\n    \\\"ubi_amount\\\": \\\"The proposed UBI amount.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"change_in_avg_income\\\": \\\"The predicted change in average income.\\\",\\n    \\\"change_in_spending\\\": \\\"The predicted change in spending.\\\",\\n    \\\"change_in_savings\\\": \\\"The predicted change in savings.\\\"\\n},\\n\\\"depend\\\": \\\"numpy, sklearn, a trained machine learning model ('ubi_model.sav')\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mission control flight director responsible for guiding astronauts during space missions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Space Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface provides real-time space weather data using APIs from the National Oceanic and Atmospheric Administration (NOAA). It is designed to help flight directors understand space weather, which can greatly impact communications, navigation, and the health of astronauts.\\\",\\n\\\"function_name\\\": \\\"get_space_weather_forecast\\\",\\n\\\"input_args\\\": \\\"hours - The duration for which the user wants the forecast, in hours.\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary represents a forecast at a specific time within the requested duration. The dictionary contains information about the time of the forecast ('time_tag'), the satellite from which the data was obtained ('satellite'), and the xray intensity at two different wavelengths ('flux', 'energy').\\\",\\n\\\"depend\\\": \\\"Python's requests and datetime libraries, NOAA's space weather data API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physicist who relies on mathematical models to understand the laws of the universe", "synthesized text": "\"{\\n\\\"name\\\": \\\"Symbolic Computation Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies a mathematical expression using symbolic computation. It takes a mathematical expression and variable(s) as input and returns the simplified form of the expression.\\\",\\n\\\"function_name\\\": \\\"simplify_expression\\\",\\n\\\"input_args\\\": [\\\"expression_string\\\", \\\"variable_string\\\"],\\n\\\"return\\\": \\\"simplified mathematical expression\\\",\\n\\\"depend\\\": \\\"SymPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former professional softball player with a wealth of knowledge and experience in the game", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Softball Pitch Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model to analyze a softball pitch, providing statistics such as speed, spin rate, and release point.\\\",\\n  \\\"function_name\\\": \\\"analyze_pitch\\\",\\n  \\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"Path to the video file of the softball pitch.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"speed\\\": \\\"The speed of the pitch in mph.\\\",\\n    \\\"spin_rate\\\": \\\"The spin rate of the pitch in rpm.\\\",\\n    \\\"release_point\\\": \\\"The release point of the pitch in feet.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"cv2\\\": \\\"Python library for handling video files.\\\",\\n    \\\"numpy\\\": \\\"Python library for handling arrays.\\\",\\n    \\\"tensorflow\\\": \\\"Machine learning library used to load and apply the pre-trained model.\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A retired officer who used to serve in the Imperial German Navy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Ship Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches detailed information about historical ships using the Maritime Connect API. The user only needs to provide the name of the historical ship as input.\\\",\\n\\\"function_name\\\": \\\"get_historical_ship_info\\\",\\n\\\"input_args\\\": \\\"ship_name - The name of the historical ship\\\",\\n\\\"return\\\": \\\"A dictionary containing detailed information about the historical ship including its construction, service history, and any notable events.\\\",\\n\\\"depend\\\": \\\"Python's requests library, Maritime Connect API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A large museum that needs to store and preserve its extensive collection of digital artwork", "synthesized text": "\"{\\n\\\"name\\\": \\\"Digital Artwork Preservation Interface\\\",\\n\\\"description\\\": \\\"Encode digital artworks into compact latent vectors for efficient storage using DALL-E\\\",\\n\\\"function_name\\\": \\\"encode_artwork\\\",\\n\\\"input_args\\\": \\\"image_path: Path to the artwork image file\\\",\\n\\\"return\\\": \\\"numpy.ndarray: Encoded latent vector of the artwork\\\",\\n\\\"depend\\\": \\\"torch, PIL, torchvision, dall_e\\\"\\n}\"", "description": "tool development"}
{"input persona": "A teenager who spends hours playing video games and can provide insights on the best console for kids", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Game Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches age-appropriate video game recommendations based on user's preferred genre from the RAWG video game database API.\\\",\\n\\\"function_name\\\": \\\"get_video_game_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age rating of the games (i.e., 1 for '3+', 2 for '7+', 3 for '12+', 4 for '16+', 5 for '18+')\\\",\\n    \\\"genre\\\": \\\"The genre of the games (i.e., 'Action', 'Adventure', 'RPG', 'Strategy', etc.)\\\"\\n  },\\n\\\"return\\\": \\\"A list of recommended video game names.\\\",\\n\\\"depend\\\": \\\"RAWG Video Game Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A blogger who writes detailed reviews and recommendations for home brewing equipment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Beer Recipe Generator Interface\\\",\\n\\\"description\\\": \\\"Generates detailed beer brewing recipes for given beer types using a pre-trained GPT-3 model from huggingface.\\\",\\n\\\"function_name\\\": \\\"generate_beer_recipe\\\",\\n\\\"input_args\\\": [\\\"beer_type\\\"],\\n\\\"return\\\": \\\"A detailed recipe for brewing the specified type of beer.\\\",\\n\\\"depend\\\": \\\"python libraries (transformers from huggingface), machine learning models (GPT-3)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer architecture professor who debates the interplay between hardware and software in information systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Instruction Set Architecture (ISA) Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface fetches data from the Wikipedia pages of different ISAs and returns a comparison of two ISAs based on their design principles and use cases.\\\",\\n\\\"function_name\\\": \\\"compare_isas\\\",\\n\\\"input_args\\\": [\\\"isa1\\\", \\\"isa2\\\"],\\n\\\"return\\\": \\\"A dictionary with the names of the ISAs as keys and their Wikipedia extract as values.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A spiritualist who believes in cosmic events and interprets natural occurrences as signs of the impending apocalypse", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cosmic Event Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about cosmic events happening on a given date using NASA's API.\\\",\\n\\\"function_name\\\": \\\"get_cosmic_events\\\",\\n\\\"input_args\\\": \\\"date\\\",\\n\\\"return\\\": \\\"cosmic_event\\\",\\n\\\"depend\\\": \\\"NASA's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Russian cybersecurity analyst skeptical of Western media narratives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Incident Report Analysis\\\",\\n\\\"description\\\": \\\"This interface uses the MITRE ATT&CK framework to analyze incident reports and return the associated tactics, techniques, and procedures (TTPs).\\\",\\n\\\"function_name\\\": \\\"extract_ttps_from_report\\\",\\n\\\"input_args\\\": \\\"report_text\\\",\\n\\\"return\\\": \\\"A dictionary that maps 'tactics' and 'techniques' to their corresponding list of matches from the incident report text.\\\",\\n\\\"depend\\\": \\\"Python's 'requests' library for making API calls and 'nltk' for text tokenization. Web API: 'MITRE ATT&CK'.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chief information officer of a large corporation, impressed by the sales rep's presentation and considering implementing the software", "synthesized text": "\"{\\n\\\"name\\\": \\\"Software Usage Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve the usage statistics for a specific software during a specified time period.\\\",\\n\\\"function_name\\\": \\\"get_software_usage\\\",\\n\\\"input_args\\\": {\\\"software_name\\\": \\\"string\\\", \\\"start_date\\\": \\\"string\\\", \\\"end_date\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"list of dictionaries\\\",\\n\\\"depend\\\": [\\\"Revulytics API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A skeptical cousin who does not believe in the importance of understanding their ancestral lineage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancestry DNA Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from a genetic testing API to return a detailed report about a user's ancestry lineage, traits, health predispositions etc. The user needs to provide the path to their raw DNA data file.\\\",\\n\\\"function_name\\\": \\\"get_dna_analysis\\\",\\n\\\"input_args\\\": \\\"dna_file_path\\\",\\n\\\"return\\\": \\\"A json object that contains detailed genetic information about the user.\\\",\\n\\\"depend\\\": \\\"requests library, Genomelink API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a mother whose child is diagnosed with SLC35A1-CDG", "synthesized text": "\"{\\n\\\"name\\\": \\\"SLC35A1-CDG Disease Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches detailed information about a specific disease from the Disease Ontology database. Users only need to input the disease id, and our interface will return detailed information about the disease.\\\",\\n\\\"function_name\\\": \\\"get_disease_info\\\",\\n\\\"input_args\\\": {\\\"disease_id\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"json\\\",\\n\\\"depend\\\": \\\"requests library, Disease Ontology API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long-term Watseka resident, who doesn't own a car and uses SHOW Bus daily.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bus Schedule Lookup Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the bus schedule for a specific route from the current location to the destination.\\\",\\n\\\"function_name\\\": \\\"get_bus_schedule\\\",\\n\\\"input_args\\\": [\\\"current_location\\\", \\\"destination\\\"],\\n\\\"return\\\": \\\"List of next few bus schedules.\\\",\\n\\\"depend\\\": \\\"Public Transit Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A forensic scientist who analyzes drug samples to identify counterfeit medications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Counterfeit Drug Identification Interface\\\",\\n\\\"description\\\": \\\"Interface to predict whether a drug is counterfeit or genuine based on its spectrogram.\\\",\\n\\\"function_name\\\": \\\"is_counterfeit\\\",\\n\\\"input_args\\\": \\\"path_to_spectrogram\\\",\\n\\\"return\\\": \\\"A string indicating whether the drug is 'Counterfeit' or 'Genuine'.\\\",\\n\\\"depend\\\": \\\"TensorFlow, trained model for spectrogram analysis\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Christian blogger who offers practical tips and resources for enhancing prayer life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verse Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches Bible verses related to a given keyword using the bible-api.com API. It's useful for finding Bible verses related to a specific theme or topic.\\\",\\n\\\"function_name\\\": \\\"get_related_bible_verses\\\",\\n\\\"input_args\\\": {\\n    \\\"keyword\\\": \\\"A string that represents a keyword related to a prayer topic. For example, 'love', 'hope', 'faith', etc.\\\"\\n},\\n\\\"return\\\": \\\"A list of Bible verses related to the keyword. If no verses are found, returns a string 'No verses found for this keyword.'\\\",\\n\\\"depend\\\": \\\"requests library, bible-api.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a stand-up comedian from Nashville.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Joke Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the JokeAPI to fetch a random joke based on user-specified parameters (category and type).\\\",\\n\\\"function_name\\\": \\\"get_random_joke\\\",\\n\\\"input_args\\\": {\\n    \\\"category\\\": \\\"The category of joke (programming, miscellaneous, general, or Any). Default is 'Any'.\\\",\\n    \\\"type\\\": \\\"The type of joke (single or two-part). Default is 'single'.\\\"\\n},\\n\\\"return\\\": \\\"A string containing a random joke.\\\",\\n\\\"depend\\\": \\\"Python's requests library and JokeAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A large media company that offers advertising space and sponsorship opportunities for the organization's campaigns", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Ad Campaign Analysis Interface\\\",\\n    \\\"description\\\": \\\"This interface uses the Google Ads API to return detailed statistics about a specific ad campaign.\\\",\\n    \\\"function_name\\\": \\\"get_campaign_details\\\",\\n    \\\"input_args\\\": [\\\"customer_id\\\", \\\"campaign_id\\\"],\\n    \\\"return\\\": \\\"List of dictionaries that each contain detailed information about a specific ad campaign. The information includes campaign id, ad group id, criterion id, keyword, match type, impressions, clicks, and average cost per click (cpc).\\\",\\n    \\\"depend\\\": [\\\"Google Ads API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A prospective student considering attendance at Sakshi Malik Government College for Girls, Mokhra (Rohtak).", "synthesized text": "\"{\\n\\\"name\\\": \\\"College Information Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves detailed information about a specific college, including its location, average cost, graduation rate, and median salary after graduation.\\\",\\n\\\"function_name\\\": \\\"get_college_info\\\",\\n\\\"input_args\\\": \\\"college_name\\\",\\n\\\"return\\\": \\\"A dictionary with detailed information about the college.\\\",\\n\\\"depend\\\": \\\"CollegeScorecard API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A musician who wants a music festival-themed party for their birthday, complete with live performances and multiple stages", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Festival Schedule Generator\\\",\\n\\\"description\\\": \\\"Generates a schedule for a music festival-themed party given a list of artists, the number of stages, and the party duration.\\\",\\n\\\"function_name\\\": \\\"generate_music_festival_schedule\\\",\\n\\\"input_args\\\": [\\\"artist_list\\\", \\\"num_stages\\\", \\\"party_start_time\\\", \\\"party_end_time\\\"],\\n\\\"return\\\": \\\"Dictionary with keys as stages and values as lists of tuples. Each tuple contains the name of an artist and their performance start and end time.\\\",\\n\\\"depend\\\": [\\\"Python's built-in libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a professional dog breeder from Germany", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dog Breed Classifier Interface\\\",\\n\\\"description\\\": \\\"This interface classifies the breed of a dog from an image. The user needs to provide the path to the image file.\\\",\\n\\\"function_name\\\": \\\"classify_dog_breed\\\",\\n\\\"input_args\\\": {\\\"image_path\\\": \\\"str\\\"},\\n\\\"return\\\": \\\"str (dog breed name)\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a bored software engineer who has never been interested in geography.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Geography Quiz Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the REST Countries API to generate multiple-choice geography quiz questions. The user starts the quiz by calling a function, and the interface asks a question and provides four choices. The user inputs their choice, and the interface tells them if the answer was correct.\\\",\\n  \\\"function_name\\\": \\\"start_geography_quiz\\\",\\n  \\\"input_args\\\": \\\"None\\\",\\n  \\\"return\\\": \\\"None - interacts via console\\\",\\n  \\\"depend\\\": \\\"requests library, REST Countries API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A big fan of Christopher Hitchens", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech to Text Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google Speech-to-Text API to transcribe audio files, particularly useful for transcribing speeches or debates for fans of public speakers like Christopher Hitchens.\\\",\\n\\\"function_name\\\": \\\"transcribe_speech\\\",\\n\\\"input_args\\\": {\\\"audio_file_path\\\": \\\"The path to the audio file to be transcribed.\\\"},\\n\\\"return\\\": \\\"Returns the transcribed text from the audio file.\\\",\\n\\\"depend\\\": \\\"Google Speech-to-Text API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retiree who was a former co-worker of Joe Sestak", "synthesized text": "\"{\\n\\\"name\\\": \\\"Campaign Donation Information Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to find the total campaign contributions for a given politician using the OpenSecrets API.\\\",\\n\\\"function_name\\\": \\\"get_campaign_contributions\\\",\\n\\\"input_args\\\": [\\\"politician_name\\\"],\\n\\\"return\\\": \\\"Total campaign contributions for the given politician.\\\",\\n\\\"depend\\\": [\\\"OpenSecrets API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hematologist working in a renowned cancer treatment hospital in Japan.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Genomic Mutation Identification Interface\\\",\\n    \\\"description\\\": \\\"An interface for identifying mutations in genomic sequences. Users only need to input the path to the file containing the genomic sequence (in FASTA format), and the interface will return a list of identified mutations.\\\",\\n    \\\"function_name\\\": \\\"identify_mutations\\\",\\n    \\\"input_args\\\": [\\\"path_to_genomic_sequence\\\"],\\n    \\\"return\\\": \\\"List of tuples, where each tuple contains the ID of a sequence and the position of a mutation.\\\",\\n    \\\"depend\\\": [\\\"Biopython\\\", \\\"VarScan\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a freshman student in Andover High School who's currently battling with flu", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Flu Symptom Tracker Interface\\\",\\n  \\\"description\\\": \\\"A simple interface for tracking flu symptoms over time.\\\",\\n  \\\"function_name\\\": [\\\"record_symptoms\\\", \\\"get_symptom_history\\\"],\\n  \\\"input_args\\\": [\\\"symptoms\\\"],\\n  \\\"return\\\": \\\"A record of the symptoms and their severity over time.\\\",\\n  \\\"depend\\\": [\\\"Python's built-in datetime library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a technical support specialist familiar with email server settings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Email Server Configuration Verification Interface\\\",\\n\\\"description\\\": \\\"This interface verifies the email server settings by trying to connect to the server and send a test email.\\\",\\n\\\"function_name\\\": \\\"verify_email_server_settings\\\",\\n\\\"input_args\\\": {\\n    \\\"server\\\": \\\"Email server name (like 'smtp.gmail.com' for Gmail)\\\",\\n    \\\"port\\\": \\\"Port number (like 587)\\\",\\n    \\\"user\\\": \\\"User's email address\\\",\\n    \\\"password\\\": \\\"User's email password\\\",\\n    \\\"to_email\\\": \\\"Email address to send the test email\\\"\\n},\\n\\\"return\\\": \\\"If successful, returns 'Email sent successfully'. Otherwise, returns the error that occurred during the process.\\\",\\n\\\"depend\\\": \\\"Python yagmail library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wildlife veterinarian who provides medical care to injured animals found during clean-up events", "synthesized text": "\"{\\n\\\"name\\\": \\\"Animal Disease Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model to predict diseases in animals based on the symptoms described by the user.\\\",\\n\\\"function_name\\\": \\\"predict_animal_disease\\\",\\n\\\"input_args\\\": [\\n    {\\n    \\\"name\\\": \\\"symptoms\\\",\\n    \\\"type\\\": \\\"string\\\",\\n    \\\"description\\\": \\\"The symptoms observed in the animal.\\\"\\n    }\\n],\\n\\\"return\\\": {\\n    \\\"name\\\": \\\"prediction\\\",\\n    \\\"type\\\": \\\"string\\\",\\n    \\\"description\\\": \\\"The most likely disease the animal might be suffering from.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python\\\": [\\\"transformers\\\"],\\n    \\\"machine_learning_model\\\": [\\\"distilbert-base-uncased-finetuned-sst-2-english\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A chief information officer responsible for overseeing the digital preservation strategies for multiple institutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Digital Preservation Status Checker Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the BagIt Python library to check the preservation status of digital assets. The user only needs to input the path to a BagIt bag, and the function will return whether the bag is valid and any potential errors.\\\",\\n\\\"function_name\\\": \\\"check_preservation_status\\\",\\n\\\"input_args\\\": \\\"bag_path - The path to the BagIt bag that the user wants to check.\\\",\\n\\\"return\\\": \\\"A dictionary with two keys: 'status' - a string that indicates whether the bag is 'Valid' or 'Invalid', and 'error' - a string that describes any potential errors if the bag is invalid. If the bag is valid, 'error' will be None.\\\",\\n\\\"depend\\\": \\\"BagIt Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An eccentric millionaire with an extensive collection of historical encryption devices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Cipher Decoder Interface\\\",\\n\\\"description\\\": \\\"This interface decodes text that was encrypted using a historical cipher. Currently supports Caesar, Playfair, and Enigma ciphers.\\\",\\n\\\"function_name\\\": \\\"historical_cipher_decoder\\\",\\n\\\"input_args\\\": {\\n    \\\"cipher_type\\\": \\\"The type of cipher used to encrypt the text. Options are 'caesar', 'playfair', 'enigma'.\\\",\\n    \\\"encrypted_text\\\": \\\"The text that was encrypted with the cipher.\\\",\\n    \\\"key\\\": \\\"(Optional) The key used for the Caesar or Playfair cipher.\\\",\\n    \\\"rotor_settings\\\": \\\"(Optional) The rotor settings for the Enigma machine. Should be a dictionary with rotor names as keys and their initial positions as values.\\\"\\n},\\n\\\"return\\\": \\\"The decrypted text.\\\",\\n\\\"depend\\\": \\\"PyCipher library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long-time fan and advocate of Personal Rapid Transit (PRT) systems", "synthesized text": "\"{\\n  \\\"name\\\": \\\"PRT Schedule Optimization Interface\\\",\\n  \\\"description\\\": \\\"An interface that takes in the current PRT station, the destination station, and the current time, and returns the optimal schedule for the user.\\\",\\n  \\\"function_name\\\": \\\"optimize_schedule\\\",\\n  \\\"input_args\\\": {\\n    \\\"current_station\\\": \\\"type: string, the current PRT station\\\",\\n    \\\"destination_station\\\": \\\"type: string, the destination PRT station\\\",\\n    \\\"current_time\\\": \\\"type: datetime.datetime, the current time\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"optimal_schedule\\\": \\\"type: dict, the optimal schedule with 'departure_time' and 'arrival_time'\\\"\\n  },\\n  \\\"depend\\\": \\\"Google OR-Tools\\\"\\n}\"", "description": "tool development"}
{"input persona": "A police officer who warns about the dangers of exploiting digital vulnerabilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vulnerability Scan Interface\\\",\\n\\\"description\\\": \\\"Scan a system for potential vulnerabilities using Nessus Scanner.\\\",\\n\\\"function_name\\\": \\\"scan_vulnerabilities\\\",\\n\\\"input_args\\\": [\\\"ip_address\\\"],\\n\\\"return\\\": \\\"List of potential vulnerabilities.\\\",\\n\\\"depend\\\": [\\\"Python Library: pyNessus\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A 'Sons of Anarchy' series fan who has closely followed all its episodes.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"TV Show Episode Information Interface\\\",\\n    \\\"description\\\": \\\"Retrieve detailed information about a specific episode of a TV show.\\\",\\n    \\\"function_name\\\": \\\"get_tv_show_episode_info\\\",\\n    \\\"input_args\\\": [\\\"show_name\\\", \\\"season\\\", \\\"episode\\\"],\\n    \\\"return\\\": {\\n        \\\"name\\\": \\\"string\\\",\\n        \\\"season\\\": \\\"integer\\\",\\n        \\\"episode\\\": \\\"integer\\\",\\n        \\\"summary\\\": \\\"string\\\",\\n        \\\"air_date\\\": \\\"string\\\",\\n        \\\"air_time\\\": \\\"string\\\",\\n        \\\"runtime\\\": \\\"integer\\\"\\n    },\\n    \\\"depend\\\": [\\\"requests library\\\", \\\"TVMaze API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A determined undergraduate aspiring to become a physiotherapist, always curious to understand the connections between economy and health", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Health Correlation Interface\\\",\\n\\\"description\\\": \\\"Fetches data about a country's economic and health indicators from the World Bank API and calculates their correlation.\\\",\\n\\\"function_name\\\": \\\"correlate_economy_and_health\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"A float between -1 and 1 indicating the correlation between the country's economic and health indicators.\\\",\\n\\\"depend\\\": \\\"World Bank API, pandas, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concertgoer and devout fan of Brandon Lake, who attended the Miracle Nights Tour and volunteers at religious community events.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Management Interface\\\",\\n\\\"description\\\": \\\"An interface to manage volunteer activities for an event. It checks if the volunteer is registered for the event, and returns the tasks assigned to them.\\\",\\n\\\"function_name\\\": \\\"get_volunteer_tasks\\\",\\n\\\"input_args\\\": [\\\"volunteer_name\\\", \\\"event_name\\\"],\\n\\\"return\\\": \\\"The tasks assigned to the volunteer for the event, or a message indicating the volunteer is not registered for the event.\\\",\\n\\\"depend\\\": \\\"Eventbrite API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aspiring interior designer eager to learn about different renovation styles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Renovation Style Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the path to an image of a renovated space and returns the style of the renovation. It uses a pre-trained tensorflow model to classify the image into different styles.\\\",\\n\\\"function_name\\\": \\\"recognize_renovation_style\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"style of renovation (e.g., 'Modern', 'Classic', 'Industrial', 'Contemporary', 'Minimalist')\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, a pre-trained image classification model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A culinary artist skilled in preparing traditional Italian dishes using fresh herbs and vegetables from the garden", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Recipe Ingredient Replacement Interface\\\",\\n  \\\"description\\\": \\\"An interface for finding possible substitutes for a specific ingredient in a recipe. The user inputs an ingredient and the interface returns a list of possible substitutes. This could be useful for culinary artists who may not have a specific ingredient on hand or for people with dietary restrictions looking for alternatives.\\\",\\n  \\\"function_name\\\": \\\"get_ingredient_substitutes\\\",\\n  \\\"input_args\\\": {\\\"ingredient\\\": \\\"a string of the ingredient name that needs to be replaced\\\"},\\n  \\\"return\\\": \\\"a list of possible substitutes for the input ingredient\\\",\\n  \\\"depend\\\": \\\"Spoonacular's Food API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from a foundation supporting scientific research, who sees the potential impact of this study on our understanding of human history", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequence Alignment Interface\\\",\\n\\\"description\\\": \\\"This interface accepts two DNA sequences as input and returns their alignment. It is useful for comparing DNA sequences, which is crucial in many biological analyses.\\\",\\n\\\"function_name\\\": \\\"align_dna_sequences\\\",\\n\\\"input_args\\\": [\\\"seq1\\\", \\\"seq2\\\"],\\n\\\"return\\\": \\\"A string that represents the alignment of the two DNA sequences, showing matches, mismatches, and gaps.\\\",\\n\\\"depend\\\": \\\"Biopython\\\"\\n}\"", "description": "tool development"}
{"input persona": "a basketball enthusiast who often disagrees with the calls made by Scott Foster", "synthesized text": "\"{\\n\\\"name\\\": \\\"NBA Game Statistics Interface\\\",\\n\\\"description\\\": \\\"Fetch the game statistics of NBA games refereed by Scott Foster.\\\",\\n\\\"function_name\\\": \\\"get_game_stats\\\",\\n\\\"input_args\\\": \\\"date\\\",\\n\\\"return\\\": \\\"game_stats\\\",\\n\\\"depend\\\": \\\"requests library, balldontlie.io API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A photography student looking for vintage cameras to add to their collection", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Online Vintage Camera Search Interface\\\",\\n    \\\"description\\\": \\\"This interface uses the eBay API to find a list of vintage cameras based on the user's search term.\\\",\\n    \\\"function_name\\\": \\\"get_vintage_cameras\\\",\\n    \\\"input_args\\\": \\\"search_term\\\",\\n    \\\"return\\\": \\\"[{'title': 'Vintage Camera Title', 'price': 'Price in USD', 'itemWebUrl': 'URL to the eBay listing'}]\\\",\\n    \\\"depend\\\": \\\"eBay API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious young historian focusing their thesis on the role of media during the Watergate era", "synthesized text": "\"[{'source': 'The New York Times', 'title': 'Watergate: The Scandal That Brought Down Richard Nixon'}, {'source': 'The Washington Post', 'title': 'The Watergate Story - A Timeline'}, ...]\"", "description": "tool development"}
{"input persona": "A skeptical local tribe leader who worries that excavation may disturb ancestral grounds", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cultural Heritage Sites Protection Interface\\\",\\n\\\"description\\\": \\\"An interface to check if a proposed excavation site is within a protected cultural heritage area. It uses Google's Geocoding API to get location data for the coordinates, and geospatial libraries in Python to check if the location is within a heritage area.\\\",\\n\\\"function_name\\\": \\\"check_site_in_heritage_area\\\",\\n\\\"input_args\\\": \\\"coordinates - The latitude and longitude of the proposed excavation site, as a string in the format 'lat,lng'.\\\",\\n\\\"return\\\": \\\"True if the site is within a protected cultural heritage area, False otherwise. If there is an issue with the request to the Geocoding API, it will return a message indicating the error.\\\",\\n\\\"depend\\\": \\\"Python libraries: Geopandas, requests; Web API: Google's Geocoding API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A factory worker affected by the changes brought by industrialization", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Level Monitoring Interface\\\",\\n\\\"description\\\": \\\"Monitors the sound level in real-time and provide alerts when the sound level exceeds a certain threshold.\\\",\\n\\\"function_name\\\": \\\"sound_alert\\\",\\n\\\"input_args\\\": {\\n    \\\"duration\\\": \\\"The duration for which the sound level needs to be monitored, in seconds.\\\",\\n    \\\"threshold\\\": \\\"The sound level threshold which, if exceeded, will trigger an alert.\\\"\\n},\\n\\\"return\\\": \\\"A message indicating that monitoring has finished. Alerts are printed directly to the console.\\\",\\n\\\"depend\\\": \\\"Python library: sounddevice, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional mentor who helps individuals set goals and develop strategies for success", "synthesized text": "\"{\\n\\\"name\\\": \\\"Goal Setting and Tracking Interface\\\",\\n\\\"description\\\": \\\"This interface helps users to generate SMART (Specific, Measurable, Achievable, Relevant, Time-bound) goals from their plain text input and store it for future tracking.\\\",\\n\\\"function_name\\\": \\\"set_and_track_goal\\\",\\n\\\"input_args\\\": {\\\"user_id\\\": \\\"The user's unique identifier, as a string.\\\", \\\"goal_text\\\": \\\"The user's goal, as a string.\\\"},\\n\\\"return\\\": \\\"A dictionary with the 'smartGoal' - the SMART version of their goal, and 'goalStored' - a boolean indicating whether the goal was successfully stored.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"transformers\\\"], \\\"web APIs\\\": [\\\"Database API\\\"], \\\"machine learning models\\\": [\\\"GPT-2 from Hugging Face\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A parent who homeschools their children and relies on educational apps for math instruction", "synthesized text": "\"{\\n\\\"name\\\": \\\"Math Problem Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a random math problem based on the operation and difficulty level specified by the user.\\\",\\n\\\"function_name\\\": \\\"generate_math_problem\\\",\\n\\\"input_args\\\": {\\n    \\\"operation\\\": \\\"A string representing the operation type. Can be 'addition', 'subtraction', 'multiplication', or 'division'.\\\",\\n    \\\"difficulty\\\": \\\"A string representing the difficulty level. Can be 'easy', 'medium', or 'hard'.\\\"\\n},\\n\\\"return\\\": \\\"A tuple containing the problem as a string and the solution as a string.\\\",\\n\\\"depend\\\": [\\\"sympy\\\", \\\"random\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A sentimental and sentimental mother who wants her daughter's wedding to be an unforgettable experience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Planning Interface\\\",\\n\\\"description\\\": \\\"An interface to help plan events. It returns a list of available venues, caterers, and a weather forecast for the event day based on the given date and location.\\\",\\n\\\"function_name\\\": \\\"get_event_planning_info\\\",\\n\\\"input_args\\\": {\\n    \\\"date\\\": \\\"The date of the event, given in the format 'YYYY-MM-DD'.\\\",\\n    \\\"location\\\": \\\"The location of the event, given as a tuple of latitude and longitude.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing lists of venues and caterers, and a weather forecast.\\\",\\n\\\"depend\\\": \\\"Eventbrite API, Yelp API, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A shy public relations officer of a recluse nursing home.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Social Media Post Scheduler Interface\\\",\\n\\\"description\\\": \\\"This interface schedules social media posts on different platforms at a specified time.\\\",\\n\\\"function_name\\\": \\\"schedule_social_media_post\\\",\\n\\\"input_args\\\": {\\n    \\\"post_text\\\": \\\"The text of the post to be published.\\\",\\n    \\\"post_time\\\": \\\"The time at which the post should be published. Format should be 'HH:MM'.\\\",\\n    \\\"platform\\\": \\\"The social media platform where the post should be published. Options are 'Facebook', 'Twitter', 'Instagram'.\\\"\\n},\\n\\\"return\\\": \\\"A scheduled job that will post the input text to the specified social media platform at the specified time.\\\",\\n\\\"depend\\\": \\\"Python's built-in 'requests', 'schedule', and 'time' libraries, as well as APIs from social media platforms such as Facebook, Twitter, and Instagram.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fast-fashion consumer slowly becoming aware of their shopping habits' impact on the environment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sustainable Shopping Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface to provide the user with the sustainability rating of a fashion brand. The rating is fetched from the Good On You platform.\\\",\\n\\\"function_name\\\": \\\"get_sustainability_rating\\\",\\n\\\"input_args\\\": \\\"brand_name\\\",\\n\\\"return\\\": \\\"The sustainability rating of the input brand.\\\",\\n\\\"depend\\\": \\\"Good On You API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An emergency services dispatcher who provides firsthand accounts of incidents and emergencies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emergency Incident Reporting Interface\\\",\\n\\\"description\\\": \\\"Converts the address of an incident into geographic coordinates, then uses a machine learning model to classify the type of incident based on the dispatcher's description.\\\",\\n\\\"function_name\\\": \\\"report_incident\\\",\\n\\\"input_args\\\": {\\n    \\\"address\\\": \\\"The address where the incident took place.\\\",\\n    \\\"description\\\": \\\"A description of the incident.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"latitude\\\": \\\"The latitude of the incident location.\\\",\\n    \\\"longitude\\\": \\\"The longitude of the incident location.\\\",\\n    \\\"incident_type\\\": \\\"The type of incident, classified by the machine learning model.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"libraries\\\": [\\\"requests\\\", \\\"tensorflow\\\"],\\n    \\\"web_apis\\\": [\\\"Google Geocoding\\\"],\\n    \\\"ml_models\\\": [\\\"TensorFlow Keras model (incident_classifier.h5)\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "an aspiring equestrian from France who admires the Werndl siblings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dressage Score Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the dressage score based on the horse's breed, age, gender, and the rider's experience.\\\",\\n\\\"function_name\\\": \\\"predict_dressage_score\\\",\\n\\\"input_args\\\": [\\\"horse_breed\\\", \\\"horse_age\\\", \\\"horse_gender\\\", \\\"rider_experience\\\"],\\n\\\"return\\\": \\\"Predicted dressage score.\\\",\\n\\\"depend\\\": [\\\"Hugging Face\\\", \\\"PyTorch\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A parent who nurtured the songwriter's love for music by exposing them to various genres and artists from a young age", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Genre Classification Interface\\\", \\n\\\"description\\\": \\\"This interface takes in song lyrics and a list of potential genres and returns a list of genres that the song could belong to. It leverages a pre-trained zero-shot classification model from Hugging Face.\\\", \\n\\\"function_name\\\": \\\"classify_song_genre\\\", \\n\\\"input_args\\\": [\\n    {\\\"name\\\": \\\"lyrics\\\", \\\"type\\\": \\\"String\\\", \\\"description\\\": \\\"The lyrics of the song\\\"}, \\n    {\\\"name\\\": \\\"genre_list\\\", \\\"type\\\": \\\"List of Strings\\\", \\\"description\\\": \\\"A list of potential genres that the song could belong to\\\"}\\n], \\n\\\"return\\\": {\\\"type\\\": \\\"List of Strings\\\", \\\"description\\\": \\\"A list of genres that the song could belong to\\\"},\\n\\\"depend\\\": {\\\"type\\\": \\\"Machine Learning Models\\\", \\\"description\\\": \\\"Hugging Face's transformer library (zero-shot-classification pipeline)\\\"}\\n}\"", "description": "tool development"}
{"input persona": "An established Supreme Court Justice with a long tenure in the court", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Case Summary Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a legal case citation as input and returns a summary of the case details.\\\",\\n\\\"function_name\\\": \\\"get_case_summary\\\",\\n\\\"input_args\\\": {\\\"citation\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"case_name\\\": \\\"string\\\", \\\"judge\\\": \\\"string\\\", \\\"court\\\": \\\"string\\\", \\\"date\\\": \\\"string\\\", \\\"summary\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"CourtListener API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional software developer with years of experience using Firestore, a NoSQL document database built for automatic scaling, high performance, and ease of application development.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Firestore Query Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to query Firestore by providing collection name, field name, and value. It returns the documents that satisfy the query.\\\",\\n\\\"function_name\\\": \\\"firestore_query\\\",\\n\\\"input_args\\\": {\\n    \\\"collection_name\\\": \\\"Name of the collection in Firestore\\\",\\n    \\\"field_name\\\": \\\"Name of the field to be queried\\\",\\n    \\\"value\\\": \\\"Value of the field to be matched\\\"\\n},\\n\\\"return\\\": \\\"List of dictionaries, where each dictionary represents a document that satisfies the query.\\\",\\n\\\"depend\\\": [\\\"google.cloud.firestore\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A person who is not interested in celebrity gossip and prefers to focus on the technical aspects of music production", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Feature Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts technical features from a music file using the Librosa library. It returns a dictionary of features including spectral contrast, chroma frequencies, tonnetz, and MFCCs.\\\",\\n\\\"function_name\\\": \\\"extract_music_features\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"Dictionary of music features\\\",\\n\\\"depend\\\": \\\"Librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A group of fellow mountaineers who share the same passion and practice rescue techniques together", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Mountain Safety Alerts Interface\\\",\\n  \\\"description\\\": \\\"Provides current weather conditions including temperature, wind speed, and precipitation at a specific location to assist mountaineers in assessing safety.\\\",\\n  \\\"function_name\\\": \\\"get_weather_conditions\\\",\\n  \\\"input_args\\\": {\\\"lat\\\": \\\"Latitude of location\\\", \\\"lon\\\": \\\"Longitude of location\\\"},\\n  \\\"return\\\": {\\\"Temperature\\\": \\\"Current temperature\\\", \\\"Wind Speed\\\": \\\"Current wind speed\\\", \\\"Precipitation\\\": \\\"Precipitation forecast\\\"},\\n  \\\"depend\\\": [\\\"requests library\\\", \\\"OpenWeatherMap API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a high school student who is a fan of breakdancing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dance Move Identifier Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to identify dance moves from a video file.\\\",\\n\\\"function_name\\\": \\\"identify_dance_moves\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"A list of numpy arrays representing the dance moves identified in the video.\\\",\\n\\\"depend\\\": \\\"Python libraries (cv2, numpy, tensorflow, tensorflow_hub), TensorFlow Hub model (MoveNet)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sales representative at the same dealership, specializing in European-made motorcycles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Information Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the VIN decoder API to extract detailed information about a vehicle using its Vehicle Identification Number (VIN).\\\",\\n\\\"function_name\\\": \\\"get_vehicle_info\\\",\\n\\\"input_args\\\": [\\\"VIN\\\"],\\n\\\"return\\\": \\\"Dictionary with detailed information about the vehicle, such as make, model, year, etc.\\\",\\n\\\"depend\\\": \\\"requests library, VIN decoder API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curious world traveler who loves learning about different cultures and their naming conventions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Culture-Specific Name Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the 'uinames' API to generate random names based on a specific culture. The user inputs a nationality, and the interface generates a set of random names from that culture.\\\",\\n\\\"function_name\\\": \\\"generate_cultural_names\\\",\\n\\\"input_args\\\": {\\n  \\\"nationality\\\": \\\"The culture the user is interested in, as a string. For example, 'Chinese'\\\",\\n  \\\"amount\\\": \\\"The number of names to generate. Default is 10\\\"\\n},\\n\\\"return\\\": \\\"A list of randomly generated names from the specified culture\\\",\\n\\\"depend\\\": \\\"requests library, 'uinames' API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A postdoctoral researcher in electrochemistry, recently entered the field of ionic liquids", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ionic Liquid Property Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the properties of ionic liquids given their chemical formula. The properties include viscosity, density, etc.\\\",\\n\\\"function_name\\\": \\\"get_ionic_liquid_properties\\\",\\n\\\"input_args\\\": \\\"chemical_formula - a string representing the ionic liquid's chemical formula\\\",\\n\\\"return\\\": \\\"A dictionary containing the predicted properties of the ionic liquid\\\",\\n\\\"depend\\\": \\\"This function uses the scikit-learn Python library and a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a database analyst who is concerned about efficient query performance.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"SQL Query Optimization Interface\\\",\\n  \\\"description\\\": \\\"This interface takes in an SQL query as input and returns a potentially optimized version of it. The optimization techniques include eliminating subqueries, simplifying case expressions, and using joins instead of correlated subqueries.\\\",\\n  \\\"function_name\\\": \\\"optimize_sql_query\\\",\\n  \\\"input_args\\\": {\\\"query\\\": \\\"string\\\"},\\n  \\\"return\\\": \\\"string (optimized SQL query)\\\",\\n  \\\"depend\\\": \\\"sqlparse Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional barrel racer known for her flashy cowgirl outfits and accessories", "synthesized text": "\"{\\n\\\"name\\\": \\\"Outfit Color Coordination Interface\\\",\\n\\\"description\\\": \\\"This interface takes a primary color (in HSV format) as input and returns a complementary color and two analogous colors that can match the primary color.\\\",\\n\\\"function_name\\\": \\\"get_matching_colors\\\",\\n\\\"input_args\\\": {\\\"primary_color\\\": \\\"A tuple of three floats representing the hue, saturation, and value of the primary color, respectively.\\\"},\\n\\\"return\\\": {\\\"complementary\\\": \\\"A tuple of three floats representing the complementary color in HSV format.\\\", \\\"analogous\\\": \\\"A list of two tuples, each representing an analogous color in HSV format.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"colorsys\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A pharmacist operating a small community pharmacy in Trenton, New Jersey.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface sets reminders for medication intake for a specified patient. It takes the patient's name, medication name, dosage, and number of times per day the medication should be taken, and schedules reminders throughout the day.\\\",\\n\\\"function_name\\\": \\\"set_medication_reminder\\\",\\n\\\"input_args\\\": [\\\"patient_name\\\", \\\"medication_name\\\", \\\"dosage\\\", \\\"times_per_day\\\"],\\n\\\"return\\\": \\\"None. However, the function schedules notifications on the user's computer to remind the patient to take their medication.\\\",\\n\\\"depend\\\": [\\\"Python library: crontab\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A television news reporter often breaking the same stories for a different audience", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Translation Interface\\\",\\n\\\"description\\\": \\\"An interface to translate news articles into a different language using the Google Translate API.\\\",\\n\\\"function_name\\\": \\\"translate_news\\\",\\n\\\"input_args\\\": {\\n    \\\"article\\\": \\\"A string that contains the news article to be translated.\\\",\\n    \\\"target_language\\\": \\\"A string that represents the target language for the translation.\\\"\\n},\\n\\\"return\\\": \\\"A string that contains the translated news article.\\\",\\n\\\"depend\\\": [\\\"googletrans Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A marketing manager seeking guidance on how to effectively target specific consumer segments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Customer Segmentation Interface\\\",\\n\\\"description\\\": \\\"This interface uses topic modelling to understand the main topics in customer reviews or feedback. This helps in effectively targeting specific consumer segments.\\\",\\n\\\"function_name\\\": \\\"extract_topics_from_reviews\\\",\\n\\\"input_args\\\": [\\\"reviews\\\", \\\"num_topics\\\", \\\"num_words\\\"],\\n\\\"return\\\": \\\"Main topics present in the reviews\\\",\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"Hugging Face's transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A talk show host who invites experts to share tips on safety and crisis management", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Emergency Crisis Information Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches and returns relevant and up-to-date safety tips and crisis management information for a given keyword.\\\",\\n  \\\"function_name\\\": \\\"fetch_emergency_information\\\",\\n  \\\"input_args\\\": {\\n    \\\"keyword\\\": \\\"A keyword related to the emergency or crisis situation of interest (e.g., 'earthquake', 'pandemic', 'flood').\\\"\\n  },\\n  \\\"return\\\": \\\"A list of strings, each containing a piece of information related to the given keyword.\\\",\\n  \\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries; Information from World Health Organization's website.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud parent of a student enrolled in one of the schools within Community Consolidated School District 181.", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Calendar Interface\\\",\\n\\\"description\\\": \\\"This interface uses web scraping to parse the online calendar of Community Consolidated School District 181 and provides a list of upcoming events for the next 7 days based on the input date.\\\",\\n\\\"function_name\\\": \\\"get_school_events\\\",\\n\\\"input_args\\\": \\\"date - A string representing the current date in the format 'YYYY-MM-DD'\\\",\\n\\\"return\\\": \\\"A list of tuples, where each tuple contains a date and an event happening on that date.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a science fiction enthusiast who is particularly fascinated by the “Dune” universe created by Frank Herbert.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dune Universe Encyclopedia Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get detailed explanation about a keyword from the Dune universe. It uses OpenAI's GPT-3 model to generate the explanation.\\\",\\n\\\"function_name\\\": \\\"dune_encyclopedia\\\",\\n\\\"input_args\\\": \\\"keyword - A string of the keyword from the Dune universe.\\\",\\n\\\"return\\\": \\\"A string of the detailed explanation about the keyword.\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A genealogist specialized in tracing Thai lineages, currently residing in the United States", "synthesized text": "\"{\\n\\\"name\\\": \\\"Thai Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Cloud Translation API to translate English text into Thai, simplifying communication for users who do not speak Thai.\\\",\\n\\\"function_name\\\": \\\"translate_english_to_thai\\\",\\n\\\"input_args\\\": {\\n    \\\"english_text\\\": \\\"The text in English that needs to be translated to Thai.\\\"\\n},\\n\\\"return\\\": \\\"A string of text in Thai language.\\\",\\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced BlackBerry application developer", "synthesized text": "\"{\\n\\\"name\\\": \\\"BlackBerry Application Compilation Interface\\\",\\n\\\"description\\\": \\\"This interface compiles Java source code into BlackBerry applications using the BlackBerry JDE.\\\",\\n\\\"function_name\\\": \\\"compile_blackberry_app\\\",\\n\\\"input_args\\\": {\\n    \\\"source_file_path\\\": \\\"The path to the .java source file that needs to be compiled.\\\"\\n},\\n\\\"return\\\": \\\"The path to the compiled .cod file.\\\",\\n\\\"depend\\\": \\\"BlackBerry Java Development Environment (JDE), python os and subprocess libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young Arab astronomer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Star Position Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Skyfield library in Python to calculate the position of stars, planets, and other celestial bodies. Users only need to input the name of a celestial body, and the interface will return the current position of that body in the sky.\\\",\\n\\\"function_name\\\": \\\"get_star_position\\\",\\n\\\"input_args\\\": \\\"star_name - a string representing the name of the celestial body\\\",\\n\\\"return\\\": \\\"A dictionary containing the right ascension (RA), declination (DEC), and distance in astronomical units (AU) of the provided star.\\\",\\n\\\"depend\\\": \\\"Python Skyfield library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A neuropsychologist studying the effects of spirituality on brain function", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brain Activity Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface loads EEG data from a .fif file and generates visualizations of the brain activity.\\\",\\n\\\"function_name\\\": \\\"visualize_brain_activity\\\",\\n\\\"input_args\\\": \\\"path_to_eeg_file - String that represents the path to the .fif file containing EEG data.\\\",\\n\\\"return\\\": \\\"Two plots showing the brain activity: 1) Power Spectral Density (PSD) plot, 2) 3D plot of sensor locations.\\\",\\n\\\"depend\\\": \\\"MNE-Python library, .fif file for EEG data\\\"\\n}\"", "description": "tool development"}
{"input persona": "A program officer from a government agency supporting research on climate change and its impacts on polar regions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Ice Melt Rate Interface\\\",\\n  \\\"description\\\": \\\"An interface to calculate the ice melt rate in polar regions using data from NASA's ICESat-2 API.\\\",\\n  \\\"function_name\\\": \\\"calculate_ice_melt_rate\\\",\\n  \\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n  \\\"return\\\": \\\"melt_rate\\\",\\n  \\\"depend\\\": \\\"ICESat-2 API from NASA\\\"\\n}\"", "description": "tool development"}
{"input persona": "A current school principal seeking advice on handling disciplinary issues and improving student outcomes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Behavior Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Huggingface Transformers to understand the context of incidents reported in disciplinary notes, categorize the behavior, and suggest possible interventions.\\\",\\n\\\"function_name\\\": \\\"analyze_behavior\\\",\\n\\\"input_args\\\": \\\"note_text - The text of a disciplinary note\\\",\\n\\\"return\\\": \\\"A tuple containing the category of the behavior and a suggested intervention\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst who specializes in mining and analyzing large datasets related to human trafficking", "synthesized text": "\"{\\n\\\"name\\\": \\\"Human Trafficking Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to load, visualize, and predict future trends in human trafficking data.\\\",\\n\\\"function_name\\\": \\\"analyze_data\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"analysis_type\\\", \\\"*args\\\"],\\n\\\"return\\\": \\\"Depends on the analysis type. For 'visualize', it displays a histogram. For 'predict', it returns the predicted value.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, matplotlib, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Dayton Flyers super fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Live Game Score Update Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves live game scores from a specified game. It uses the Sportradar API to retrieve the data and formats it for the user.\\\",\\n\\\"function_name\\\": \\\"get_live_game_score\\\",\\n\\\"input_args\\\": \\\"game_id: The unique identifier of the game\\\",\\n\\\"return\\\": \\\"A string with the format: '[Home Team Name]: [Home Team Score], [Away Team Name]: [Away Team Score]'\\\",\\n\\\"depend\\\": \\\"requests library, Sportradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research scientist seeking assistance in implementing Tensorflow and XLA for their experiments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tensorflow XLA Interface\\\",\\n\\\"description\\\": \\\"An interface that compiles and runs a TensorFlow graph using XLA (Accelerated Linear Algebra), a domain-specific compiler for linear algebra that optimizes TensorFlow computations.\\\",\\n\\\"function_name\\\": \\\"run_with_xla\\\",\\n\\\"input_args\\\": [\\\"tensorflow_graph_func\\\"],\\n\\\"return\\\": \\\"The result of the user's TensorFlow graph function run with XLA.\\\",\\n\\\"depend\\\": \\\"Tensorflow\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一名残疾人奥林匹克运动会的忠实粉丝，特别关注和推动伤残体育运动，我自己也是轮椅运动员。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Paralympics Event Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface provides the schedule of a specified sport on a specified date in Paralympics.\\\",\\n\\\"function_name\\\": \\\"get_paralympics_schedule\\\",\\n\\\"input_args\\\": {\\\"sport\\\": \\\"The sport the user is interested in\\\", \\\"date\\\": \\\"The date the user wants to check the schedule for\\\"},\\n\\\"return\\\": \\\"A list of events on the specified date for the specified sport in the Paralympics\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\", \\\"International Paralympic Committee Website\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An AI researcher focused on integrating machine learning with real-time rendering", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-Time Object Detection Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a path to a video file and returns a video with bounding boxes around the detected objects.\\\",\\n\\\"function_name\\\": \\\"detect_objects_in_video\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"detections\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, cv2, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A disability rights activist who provides feedback and suggestions on how to improve the app's accessibility for individuals with disabilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Accessibility Score Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze a web page's accessibility for individuals with disabilities. It returns an accessibility score based on various criteria such as color contrast, keyboard accessibility, and labeling.\\\",\\n\\\"function_name\\\": \\\"get_accessibility_score\\\",\\n\\\"input_args\\\": \\\"url - The URL of the web page to analyze.\\\",\\n\\\"return\\\": \\\"A dictionary containing information about accessibility violations found on the web page.\\\",\\n\\\"depend\\\": \\\"Accessibility Insights for Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graffiti artist who offers to paint a vibrant mural on the bike frame", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Color Palette Generation Interface\\\",\\n  \\\"description\\\": \\\"Generates a color palette from an image using KMeans clustering.\\\",\\n  \\\"function_name\\\": \\\"get_image_colors\\\",\\n  \\\"input_args\\\": {\\n    \\\"image_path\\\": \\\"Path to the image file\\\",\\n    \\\"n_colors\\\": \\\"Number of colors to include in the palette\\\"\\n  },\\n  \\\"return\\\": \\\"A list of RGB values for the top N dominant colors in the image.\\\",\\n  \\\"depend\\\": \\\"Scikit-learn library, cv2 library, Numpy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a longtime friend of Katelynn and her husband, sharing their passion for wine and art", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wine Pairing with Art Interface\\\",\\n\\\"description\\\": \\\"This interface uses TheMealDB API to get a wine suggestion based on a meal and a pre-trained model from TensorFlow Hub to classify the art style. Once the art style is classified, the interface will return a wine suggestion that matches the mood of the art.\\\",\\n\\\"function_name\\\": \\\"wine_pairing_with_art\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_art\\\": \\\"The path to the art image file.\\\",\\n    \\\"meal\\\": \\\"A meal to pair the wine with.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"art_style\\\": \\\"The style of the art.\\\",\\n    \\\"wine_suggestion\\\": \\\"A wine suggestion that matches the mood of the art.\\\"\\n},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"tensorflow library\\\", \\\"tensorflow_hub library\\\", \\\"TheMealDB API\\\", \\\"TensorFlow Hub model for art style classification\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A PPC specialist who firmly advocates for paid advertising as the most effective way to boost app downloads", "synthesized text": "\"{\\n\\\"name\\\": \\\"App Download Ad Performance Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch performance metrics for app download ads from Google Ads API\\\",\\n\\\"function_name\\\": \\\"fetch_app_download_ad_performance\\\",\\n\\\"input_args\\\": [\\\"client_id\\\", \\\"campaign_id\\\"],\\n\\\"return\\\": \\\"App download ad performance metrics\\\",\\n\\\"depend\\\": \\\"Google Ads API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mother of three toddlers in Saint Bonaventure, NY who is exhausted from constantly cleaning up after them.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Online Shopping Interface\\\",\\n  \\\"description\\\": \\\"An interface to find cleaning supplies on Walmart's website.\\\",\\n  \\\"function_name\\\": \\\"get_cleaning_supplies\\\",\\n  \\\"input_args\\\": {\\n    \\\"product_name\\\": \\\"The type of cleaning supply needed (e.g., 'disinfectant wipes')\\\"\\n  },\\n  \\\"return\\\": \\\"A list of available products with their titles, prices, and links to buy them.\\\",\\n  \\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nuclear physicist who lived through and contributed to the nuclear advancements in the Cold War era", "synthesized text": "\"{\\n\\\"name\\\": \\\"Radioactive Decay Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to calculate the remaining quantity of a radioactive element after a certain time period by using the decay law.\\\",\\n\\\"function_name\\\": \\\"calculate_remaining_radioactive_material\\\",\\n\\\"input_args\\\": [\\\"initial_quantity\\\", \\\"half_life\\\", \\\"time_passed\\\"],\\n\\\"return\\\": \\\"The remaining quantity of the radioactive material after the time passed.\\\",\\n\\\"depend\\\": \\\"math library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged Kenyan local who wrongly assumed the hospital is government-funded", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Hospital Funding Verification Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a web API from a health services database to verify the funding source of a specific hospital.\\\",\\n  \\\"function_name\\\": \\\"get_hospital_funding_source\\\",\\n  \\\"input_args\\\": \\\"hospital_name\\\",\\n  \\\"return\\\": \\\"Funding source of the hospital or 'Hospital not found in the database' if the hospital is not found in the database\\\",\\n  \\\"depend\\\": \\\"requests library, Health Services Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a big fan of comedy movies who hasn't watched Zoolander 1 yet", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that returns top-rated movies of a specified genre that the user hasn't watched yet.\\\",\\n\\\"function_name\\\": \\\"get_top_rated_movies_not_watched\\\",\\n\\\"input_args\\\": {\\n    \\\"genre\\\": \\\"Preferred genre of movies (e.g., comedy, drama, action, etc.)\\\",\\n    \\\"number_of_movies\\\": \\\"Number of movies to recommend\\\",\\n    \\\"watched_movies\\\": \\\"List of movies already watched\\\"\\n},\\n\\\"return\\\": \\\"List of top-rated movies of the specified genre that the user hasn't watched yet\\\",\\n\\\"depend\\\": \\\"OMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nurse manager who oversees the collaboration between nurses and pharmacy technicians to ensure efficient and accurate medication administration", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Administration Efficiency Interface\\\",\\n\\\"description\\\": \\\"Predicts the time taken for medication administration tasks to help improve efficiency\\\",\\n\\\"function_name\\\": \\\"predict_task_time\\\",\\n\\\"input_args\\\": {\\\"model\\\": \\\"The trained Random Forest Regressor model\\\", \\\"task_details\\\": \\\"Details of the task including medication name, dosage, route, frequency, and the nurse and technician involved\\\"},\\n\\\"return\\\": \\\"The predicted time taken for the task\\\",\\n\\\"depend\\\": \\\"Uses the pandas and sklearn libraries, and requires historical data of medication administration tasks\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college literature professor researching the influence of early 20th century fiction on modern storytelling", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a list of modern books influenced by a given early 20th century author or book\\\",\\n\\\"function_name\\\": \\\"get_recommended_books\\\",\\n\\\"input_args\\\": \\\"input_book_or_author\\\",\\n\\\"return\\\": \\\"List of book titles\\\",\\n\\\"depend\\\": \\\"Goodreads API, requests library, xml.etree.ElementTree library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of a goat breeding forum who shares the same passion for goat breeding and often engages in discussions about different breeds and genetics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Goat Breed Information Interface\\\",\\n\\\"description\\\": \\\"This interface returns detailed information about a specific goat breed, including its origin, physical characteristics, and genetic diversity. It utilizes DAD-IS, a comprehensive database of livestock breeds provided by the Food and Agriculture Organization of the United Nations.\\\",\\n\\\"function_name\\\": \\\"get_breed_info\\\",\\n\\\"input_args\\\": {\\\"breed_name\\\": \\\"String\\\"},\\n\\\"return\\\": {\\\"Origin\\\": \\\"String\\\", \\\"Physical Characteristics\\\": \\\"String\\\", \\\"Genetic Diversity\\\": \\\"String\\\"},\\n\\\"depend\\\": {\\\"Web API\\\": \\\"DAD-IS from the Food and Agriculture Organization of the United Nations\\\"}\\n}\"", "description": "tool development"}
{"input persona": "One of the original artists who contributed to 'Do They Know It's Christmas?' and shares their experiences about the making of the song", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Artist Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the top songs by a given artist using the Spotify Web API, and fetches the song facts, which might contain the artist's experiences about the making of the song, using the Genius API.\\\",\\n\\\"function_name\\\": [\\\"spotify_token\\\", \\\"get_artist_top_tracks\\\", \\\"get_song_facts\\\"],\\n\\\"input_args\\\": [\\\"artist_name\\\"],\\n\\\"return\\\": [\\\"top_tracks\\\", \\\"song_facts\\\"],\\n\\\"depend\\\": [\\\"requests\\\", \\\"Spotify Web API\\\", \\\"Genius API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A respected physics professor, known for her strict adherence to scientific ethics and protocols", "synthesized text": "\"{\\n\\\"name\\\": \\\"Particle Physics Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface leverages the Scikit-learn library to perform data analysis on particle physics experimental data. It returns a trained RandomForestClassifier model and its prediction accuracy.\\\",\\n\\\"function_name\\\": \\\"analyze_particle_physics_data\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the data file in CSV format\\\", \\\"target_col\\\": \\\"The name of the target column\\\", \\\"feature_cols\\\": \\\"The names of the feature columns\\\"},\\n\\\"return\\\": {\\\"model\\\": \\\"Trained RandomForestClassifier model\\\", \\\"accuracy\\\": \\\"Prediction accuracy of the model\\\"},\\n\\\"depend\\\": \\\"Scikit-learn, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A German politician who shared the same political era with Horst Vetter.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Persona-Based Wikipedia Search Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch a Wikipedia summary based on a given persona. If the persona is found on Wikipedia, the interface will return a summary of the Wikipedia article related to the individual. If the persona is not found, the interface will return a message indicating that no related Wikipedia article was found.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_summary\\\",\\n\\\"input_args\\\": \\\"persona\\\",\\n\\\"return\\\": \\\"Summary of the Wikipedia article related to the given persona or a message indicating no related article was found.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A talented young choreographer whose career was jumpstarted by the benefactor's financial support", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dance Move Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to generate dance moves in a specified style to a specified piece of music.\\\",\\n\\\"function_name\\\": \\\"generate_dance_moves\\\",\\n\\\"input_args\\\": {\\n    \\\"style\\\": \\\"The desired style of dance\\\",\\n    \\\"music_path\\\": \\\"The path to the music file\\\",\\n    \\\"model_path\\\": \\\"The path to the trained TensorFlow model\\\"\\n},\\n\\\"return\\\": \\\"A sequence of dance moves\\\",\\n\\\"depend\\\": \\\"tensorflow, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diligent retail employee trained to explain the benefits and limitations of promotional offers to customers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Promotion Explanation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a GPT-2 model to explain the details of a promotional offer in simple terms\\\",\\n\\\"function_name\\\": \\\"explain_promotion\\\",\\n\\\"input_args\\\": {\\\"promotion_details\\\": \\\"A string describing the details of the promotional offer\\\"},\\n\\\"return\\\": {\\\"explanation\\\": \\\"A string that explains the benefits and limitations of the promotional offer in plain English\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"],\\n            \\\"pretrained models\\\": [\\\"GPT2LMHeadModel\\\", \\\"GPT2Tokenizer\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A doctoral candidate passionate about astrophysics, aiming to contribute to the research on cosmic inflation and dark energy", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Cosmic Inflation Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Astrophysics Data System API to retrieve scholarly publications related to a user's specific research query. It then uses a natural language processing model from HuggingFace to extract key findings from these publications.\\\",\\n  \\\"function_name\\\": \\\"analyze_cosmic_inflation_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"query\\\": \\\"A string representing the user's research query.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of strings, each representing a summary of key findings from a relevant publication.\\\",\\n  \\\"depend\\\": {\\n    \\\"Web API\\\": \\\"Astrophysics Data System API\\\",\\n    \\\"Machine Learning Model\\\": \\\"HuggingFace BERT\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A project manager who oversees the development of algorithmic solutions for astronomical research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Astronomical Image Processing Interface\\\",\\n\\\"description\\\": \\\"This interface processes astronomical images in FITS format, detecting and highlighting stars using the Hough Circle Transform algorithm.\\\",\\n\\\"function_name\\\": \\\"detect_and_highlight_stars\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"An image with detected stars highlighted.\\\",\\n\\\"depend\\\": \\\"Astropy, OpenCV\\\"\\n}\"", "description": "tool development"}
{"input persona": "A geographer analyzing the impact of climate change on ancient settlements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historic Climate Data Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves historical climate data (average temperature and precipitation) for a given geographical location and time period from the NOAA's Climate Data Online (CDO) web services API.\\\",\\n\\\"function_name\\\": \\\"get_historic_climate_data\\\",\\n\\\"input_args\\\": {\\n    \\\"lat\\\": \\\"The latitude of the location.\\\",\\n    \\\"lon\\\": \\\"The longitude of the location.\\\",\\n    \\\"start_date\\\": \\\"The start date of the time period. Format: YYYY-MM-DD.\\\",\\n    \\\"end_date\\\": \\\"The end date of the time period. Format: YYYY-MM-DD.\\\"\\n},\\n\\\"return\\\": \\\"A pandas DataFrame with date as index and average temperature (TAVG) and precipitation (PRCP) as columns.\\\",\\n\\\"depend\\\": \\\"This interface uses the requests library to access the NOAA's CDO API, and pandas to process and return the data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young parent concerned about the increased traffic and noise that would come with new stadiums", "synthesized text": "\"{\\n\\\"name\\\": \\\"Noise Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to analyze the noise level of sound files. The user inputs the path to a sound file and the interface returns the predicted noise level in decibels (dB).\\\",\\n\\\"function_name\\\": \\\"analyze_noise_level\\\",\\n\\\"input_args\\\": \\\"path_to_sound\\\",\\n\\\"return\\\": \\\"Predicted noise level in dB\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Google's YAMNet Sound Classification Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A working mother with a soul for cooking and leadership insights", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Recipe Suggestion and Leadership Quote Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a list of ingredients as input and returns a suggested recipe using those ingredients along with a daily leadership quote.\\\",\\n  \\\"function_name\\\": \\\"get_recipe_and_leadership_quote\\\",\\n  \\\"input_args\\\": \\\"ingredients\\\",\\n  \\\"return\\\": {\\n    \\\"recipe\\\": \\\"A suggested recipe using the input ingredients\\\",\\n    \\\"quote\\\": \\\"A daily leadership quote\\\",\\n    \\\"author\\\": \\\"Author of the quote\\\"\\n  },\\n  \\\"depend\\\": \\\"Spoonacular API, ZenQuotes API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student gossiping with friends", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Recognition Interface\\\", \\n\\\"description\\\": \\\"A simple interface for detecting and recognizing faces from an image. The user inputs the path to an image file, and the function returns the names of the people recognized in the photo.\\\", \\n\\\"function_name\\\": \\\"identify_people_in_photo\\\", \\n\\\"input_args\\\": \\\"photo_path (str) - path to the photo to process\\\", \\n\\\"return\\\": \\\"List of names (str) of known people recognized in the photo\\\", \\n\\\"depend\\\": \\\"Python's face_recognition library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fellow trade unionist and former colleague of Eddie Dempsey", "synthesized text": "\"{\\n\\\"name\\\": \\\"Union Meeting Scheduler Interface\\\",\\n\\\"description\\\": \\\"This interface helps users create a Google Calendar event and send invitations to the attendees. It uses Google Calendar API.\\\",\\n\\\"function_name\\\": \\\"schedule_union_meeting\\\",\\n\\\"input_args\\\": {\\n    \\\"title\\\": \\\"The title of the meeting. (String)\\\",\\n    \\\"start_time\\\": \\\"The start time of the meeting in ISO 8601 format (YYYY-MM-DDTHH:MM:SS). (String)\\\",\\n    \\\"end_time\\\": \\\"The end time of the meeting in ISO 8601 format (YYYY-MM-DDTHH:MM:SS). (String)\\\",\\n    \\\"attendees\\\": \\\"A list of attendees' email addresses. (List of Strings)\\\"\\n},\\n\\\"return\\\": \\\"A string containing the URL of the created event.\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A speech-language pathologist who is interested in providing services for patients with dementia.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Recognition and Text Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that converts spoken language into written text and analyzes the complexity of the speech. Useful for speech-language pathologists working with dementia patients.\\\",\\n\\\"function_name\\\": [\\\"convert_speech_to_text\\\", \\\"analyze_text_complexity\\\"],\\n\\\"input_args\\\": [\\\"audio_file_path\\\", \\\"text\\\"],\\n\\\"return\\\": [\\\"text\\\", \\\"complexity\\\"],\\n\\\"depend\\\": [\\\"Google's Speech-to-Text API\\\", \\\"Natural Language Toolkit (NLTK)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow programmer who shares tips and tricks for integrating Xiaomi Aqara devices with custom software", "synthesized text": "\"{\\n\\\"name\\\": \\\"Xiaomi Aqara Device Control Interface\\\",\\n\\\"description\\\": \\\"Interface to control Xiaomi Aqara devices using the Python Xiaomi Gateway library. It provides methods to get the status and control the devices.\\\",\\n\\\"function_name\\\": [\\\"get_device_status\\\", \\\"control_device\\\"],\\n\\\"input_args\\\": {\\\"get_device_status\\\": [\\\"gateway_ip\\\", \\\"gateway_token\\\", \\\"device_sid\\\"], \\\"control_device\\\": [\\\"gateway_ip\\\", \\\"gateway_token\\\", \\\"device_sid\\\", \\\"command\\\"]},\\n\\\"return\\\": {\\\"get_device_status\\\": \\\"Device Status\\\", \\\"control_device\\\": \\\"Command Execution Status\\\"},\\n\\\"depend\\\": \\\"Python Xiaomi Gateway library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A policy analyst responsible for developing conservation strategies that prioritize insect habitats", "synthesized text": "\"{\\n\\\"name\\\": \\\"Insect Species Distribution Modeling Interface\\\",\\n\\\"description\\\": \\\"Predicts the most likely insect species to inhabit a location given the environmental parameters: temperature, precipitation, and a vegetation index.\\\",\\n\\\"function_name\\\": \\\"predict_insect_distribution\\\",\\n\\\"input_args\\\": [\\\"temperature\\\", \\\"precipitation\\\", \\\"vegetation_index\\\"],\\n\\\"return\\\": \\\"Predicted insect species with the highest probability\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a Moroccan social worker who advocates for rare diseases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disease Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves detailed information about a specific disease based on its name or ID. It uses the Disease Ontology API to fetch the data.\\\",\\n\\\"function_name\\\": \\\"get_disease_information\\\",\\n\\\"input_args\\\": {\\n    \\\"disease_name_or_id\\\": \\\"The name or ID of the disease for which information is to be retrieved.\\\"\\n},\\n\\\"return\\\": \\\"A JSON object with comprehensive information about the disease, including its definition, synonyms, and related diseases.\\\",\\n\\\"depend\\\": \\\"Disease Ontology API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data scientist with expertise in analyzing and visualizing data from NoSQL databases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Analysis and Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to analyze and visualize data in a MongoDB collection. It returns a histogram of the specified field's data.\\\",\\n\\\"function_name\\\": \\\"analyze_and_visualize_data\\\",\\n\\\"input_args\\\": {\\n    \\\"mongodb_conn_str\\\": \\\"The MongoDB connection string\\\",\\n    \\\"db_name\\\": \\\"The name of the MongoDB database\\\",\\n    \\\"collection_name\\\": \\\"The name of the collection within the database\\\",\\n    \\\"field_name\\\": \\\"The name of the field to analyze\\\"\\n},\\n\\\"return\\\": \\\"A histogram of the specified field's data.\\\",\\n\\\"depend\\\": \\\"The Python libraries 'pymongo' and 'matplotlib' are used to fetch data from MongoDB and visualize it, respectively.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cultural exchange officer at the U.S. Embassy who facilitates sporting events as a means to strengthen international relations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Event Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face's transformers and the Twitter API to analyze the social media reactions to a sporting event. The user needs to input the name of the event and the date it took place, and the interface will return a detailed analysis of the event's reception.\\\",\\n\\\"function_name\\\": \\\"analyze_event_reception\\\",\\n\\\"input_args\\\": {\\n    \\\"event_name\\\": \\\"The name of the event\\\",\\n    \\\"event_date\\\": \\\"The date the event took place in YYYY-MM-DD format\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with the number of positive and negative reactions to the event.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers, Twitter API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A community organizer in Kagiso, Krugersdorp, focusing on healthcare improvement and political engagement.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vaccine Availability Check Interface\\\",\\n\\\"description\\\": \\\"An interface to check the availability of a specified vaccine in a given location, and returns the nearby healthcare facilities where the vaccine is available.\\\",\\n\\\"function_name\\\": \\\"check_vaccine_availability\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"vaccine\\\"],\\n\\\"return\\\": \\\"List of healthcare facilities where the vaccine is available\\\",\\n\\\"depend\\\": \\\"Healthcare.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent who experienced the impact of propaganda firsthand in a historical context", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Fake News Detection Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Grover model from Hugging Face to detect whether a piece of text is real news or fake news.\\\",\\n  \\\"function_name\\\": \\\"detect_fake_news\\\",\\n  \\\"input_args\\\": \\\"text\\\",\\n  \\\"return\\\": \\\"A string that indicates whether the input text is 'real news' or 'fake news'.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"transformers\\\"],\\n    \\\"machine learning models\\\": [\\\"Grover\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A web platform owner who collaborates with the game developer to distribute and promote their HTML5 games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Statistics Interface\\\",\\n\\\"description\\\": \\\"Interface to fetch comprehensive game statistics including player count, average play time, etc. for a specified game.\\\",\\n\\\"function_name\\\": \\\"fetch_game_statistics\\\",\\n\\\"input_args\\\": \\\"game_id - Unique identifier for a game\\\",\\n\\\"return\\\": \\\"A JSON object containing various metrics related to the game statistics.\\\",\\n\\\"depend\\\": \\\"requests library, GameAnalytics API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A company that specializes in creating interactive and educational toys for young children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google's Speech-to-Text API to convert audio into text. This can be used in interactive toys to respond to children's speech.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": [\\\"audio_file_path\\\"],\\n\\\"return\\\": \\\"Transcribed text from the audio file\\\",\\n\\\"depend\\\": [\\\"Google Speech-to-Text API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A parent who uses data analysis to identify patterns and trends in their children's behavior", "synthesized text": "\"{\\n\\\"name\\\": \\\"Behavior Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface analyzes a dataset of children's behavior and returns a comprehensive report including mean, median, standard deviation, and trend over time for each behavior.\\\", \\n\\\"function_name\\\": \\\"analyze_behavior\\\", \\n\\\"input_args\\\": \\\"file_path: A string that represents the path to the CSV file that logs the children's behavior.\\\", \\n\\\"return\\\": \\\"A string that represents the path to the generated HTML report.\\\", \\n\\\"depend\\\": \\\"This function uses the pandas and pandas_profiling libraries in Python.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A large media organization that relies on custom Drupal modules for their website functionality", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drupal Module Update Checker Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Drupal.org API to check if any of the custom Drupal modules used by the organization have updates available. Users just need to input the names of their custom modules, and the interface will return the latest versions of these modules.\\\",\\n\\\"function_name\\\": \\\"check_drupal_module_updates\\\",\\n\\\"input_args\\\": {\\n    \\\"module_names\\\": \\\"List of names of the custom Drupal modules\\\"\\n},\\n\\\"return\\\": {\\n    \\\"latest_versions\\\": \\\"Dictionary where the keys are the module names and the values are the latest versions or error messages\\\"\\n},\\n\\\"depend\\\": \\\"requests library, Drupal.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young girl inspired by their empowering content, who starts her own blog to share stories of women's achievements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blog Post SEO Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface to optimize the blog posts for search engines using SEO optimization libraries.\\\",\\n\\\"function_name\\\": \\\"seo_optimize_blogpost\\\",\\n\\\"input_args\\\": [\\\"content\\\", \\\"keyword\\\"],\\n\\\"return\\\": \\\"SEO optimized blog post content\\\",\\n\\\"depend\\\": [\\\"seoanalyzer python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a resident who just recently moved to the Sienna Plantation and who often turns to sarcasm when confronted with situations that are out of their control.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Weather Forecast with Sarcasm\\\",\\n\\\"description\\\": \\\"This interface fetches the current weather forecast for a given city and country code and returns a sarcastic comment based on the weather conditions.\\\",\\n\\\"function_name\\\": \\\"get_sarcastic_comment_on_weather\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"country_code\\\"],\\n\\\"return\\\": \\\"A sarcastic comment based on the current weather conditions.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"], \\\"web APIs\\\": [\\\"OpenWeatherMap\\\"], \\\"machine learning models\\\": [\\\"Large Language Model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A retired Australian theater director who remembers John Sheerin fondly.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Play Script Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes a play script for number of lines per character, number of scenes, and most frequently used words.\\\",\\n\\\"function_name\\\": \\\"analyze_script\\\",\\n\\\"input_args\\\": \\\"path_to_script: A string path to the script file\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'character_lines', 'num_scenes', and 'freq_words'. 'character_lines' is a Counter object with number of lines per character. 'num_scenes' is an integer of total number of scenes. 'freq_words' is a list of tuples with most frequently used words and their counts.\\\",\\n\\\"depend\\\": \\\"Python's NLTK library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school student learning about the structure of local government", "synthesized text": "\"{\\n\\\"name\\\": \\\"City Council Members Information Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to retrieve the names, districts, and contact information of city council members by simply inputting the city name.\\\",\\n\\\"function_name\\\": \\\"get_city_council_info\\\",\\n\\\"input_args\\\": \\\"city_name\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the name, district, and contact information of a city council member.\\\",\\n\\\"depend\\\": \\\"This function uses the 'requests' and 'BeautifulSoup' Python libraries to scrape information from city council websites.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Chilean surfing enthusiast who used to be a professional surfer", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Surf Forecast Interface\\\",\\n    \\\"description\\\": \\\"This interface provides the surf forecast (including wave height, swell direction, and wind speed) for a given location, using the Storm Glass API.\\\",\\n    \\\"function_name\\\": \\\"get_surf_forecast\\\",\\n    \\\"input_args\\\": {\\n        \\\"lat\\\": \\\"Latitude of the desired location (float)\\\",\\n        \\\"lon\\\": \\\"Longitude of the desired location (float)\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"Wave Height\\\": \\\"Expected wave height (float)\\\",\\n        \\\"Swell Direction\\\": \\\"Expected swell direction (float)\\\",\\n        \\\"Wind Speed\\\": \\\"Expected wind speed (float)\\\"\\n    },\\n    \\\"depend\\\": \\\"Storm Glass API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Java programmer who uses Bouncy Castle libraries frequently and has a rudimentary knowledge of PHP cryptography.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"RSA Encryption Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a plaintext and a RSA public key as input, and returns the encrypted ciphertext.\\\",\\n  \\\"function_name\\\": \\\"rsa_encrypt\\\",\\n  \\\"input_args\\\": [\\\"plaintext\\\", \\\"public_key\\\"],\\n  \\\"return\\\": \\\"ciphertext (bytes)\\\",\\n  \\\"depend\\\": [\\\"cryptography.hazmat.primitives.serialization\\\", \\\"cryptography.hazmat.primitives.asymmetric.padding\\\", \\\"cryptography.hazmat.primitives.hashes\\\"]\\n}\"", "description": "tool development"}
{"input persona": "College football enthusiast who followed Keenan Allen's career at California", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Career Stats Interface\\\",\\n\\\"description\\\": \\\"Fetches the career stats for a particular player from SportsRadar API.\\\",\\n\\\"function_name\\\": \\\"get_player_career_stats\\\",\\n\\\"input_args\\\": [\\\"player_name\\\"],\\n\\\"return\\\": \\\"Dictionary of player's career stats.\\\",\\n\\\"depend\\\": \\\"requests library, SportsRadar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fan of Melba Montgomery who dislikes studio albums being reduced to just a collection of charting songs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Album Track List Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spotify Web API to get the tracklist of a specific album from a specified artist. It's meant for music fans who want to appreciate an entire album, not just the popular charting songs.\\\",\\n\\\"function_name\\\": \\\"get_album_tracklist\\\",\\n\\\"input_args\\\": {\\n    \\\"artist_name\\\": \\\"Name of the artist\\\",\\n    \\\"album_name\\\": \\\"Name of the album\\\"\\n},\\n\\\"return\\\": \\\"A list of tracks in the specified album.\\\",\\n\\\"depend\\\": \\\"Python library: spotipy, Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single dad who is contemplating adopting another child.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Compatibility Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to calculate a compatibility score between two children based on their personality descriptions.\\\",\\n\\\"function_name\\\": \\\"calculate_compatibility_score\\\",\\n\\\"input_args\\\": [\\\"current_child_desc\\\", \\\"potential_child_desc\\\"],\\n\\\"return\\\": \\\"Compatibility score between the two children, ranging from 0 (not compatible) to 1 (highly compatible).\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Mexican immigrant living in the USA, who learned English as a second language.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automatic Speech Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface translates spoken language into written text, which can be useful for users who want to transcribe their speech or any audio files to improve their English pronunciation or writing skills.\\\",\\n\\\"function_name\\\": [\\\"transcribe_audio\\\", \\\"transcribe_audio_advanced\\\"],\\n\\\"input_args\\\": [\\\"path_to_audio\\\"],\\n\\\"return\\\": \\\"Transcribed text from the audio file\\\",\\n\\\"depend\\\": [\\\"python library: speech_recognition\\\", \\\"python library: transformers\\\", \\\"python library: soundfile\\\", \\\"Web API: Google Speech Recognition\\\", \\\"Machine Learning Model: facebook/wav2vec2-base-960h\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a former law student who had Steven E. Zipperstein as a professor", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Case Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a legal case text as input and returns a brief summary, identifies the main legal issues, and predicts the outcome based on similar previous cases.\\\",\\n\\\"function_name\\\": [\\\"process_text\\\", \\\"identify_issues\\\", \\\"predict_outcome\\\"],\\n\\\"input_args\\\": [\\\"case_text\\\"],\\n\\\"return\\\": [\\\"issues\\\", \\\"predicted_outcome\\\"],\\n\\\"depend\\\": [\\\"nltk\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a beginner to intermediate programmer with some familiarity with RocketMQ", "synthesized text": "\"{\\n\\\"name\\\": \\\"RocketMQ Message Publishing Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of sending a message to a RocketMQ server. Users only need to input the nameserver, topic, tags, and message body.\\\",\\n\\\"function_name\\\": \\\"publish_message_to_rocketmq\\\",\\n\\\"input_args\\\": [\\\"nameserver\\\", \\\"topic\\\", \\\"tags\\\", \\\"message_body\\\"],\\n\\\"return\\\": \\\"None. Print the status of the message sending process.\\\",\\n\\\"depend\\\": \\\"RocketMQ python client library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conspiracy theorist who believes that climate change is a hoax invented by governments for control", "synthesized text": "\"{\\n\\\"name\\\": \\\"Climate Change Evidence Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the average global temperature for a given year and compares it to the average temperature in 1880 to provide evidence of climate change.\\\",\\n\\\"function_name\\\": \\\"get_global_temperature\\\",\\n\\\"input_args\\\": \\\"year\\\",\\n\\\"return\\\": \\\"A string stating the average global temperature of the given year and how it compares to the average temperature in 1880.\\\",\\n\\\"depend\\\": \\\"NASA's InSight: Mars Weather Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A male athlete who respects the protagonist's advocacy but disagrees on the means to achieve gender equality", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Fitness Tracker Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Strava API to fetch a user's athletic activities and then calculates the total distance covered, total time spent, and average speed for activities within a specified date range.\\\",\\n  \\\"function_name\\\": \\\"get_activity_summary\\\",\\n  \\\"input_args\\\": {\\\"access_token\\\": \\\"str\\\", \\\"start_date\\\": \\\"str\\\", \\\"end_date\\\": \\\"str\\\"},\\n  \\\"return\\\": {\\\"total_distance\\\": \\\"float\\\", \\\"total_time\\\": \\\"float\\\", \\\"avg_speed\\\": \\\"float\\\"},\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"datetime\\\"], \\\"Web APIs\\\": [\\\"Strava API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a practicing Dawoodi Bohra member who highly regards Qasim Hakimudddin", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quran Verse Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for verses in the Quran that contain a specific keyword. The function sends a request to the Al Quran Cloud API and parses the results.\\\",\\n\\\"function_name\\\": \\\"search_quran_verses\\\",\\n\\\"input_args\\\": \\\"keyword - A word or phrase to search for in the Quran.\\\",\\n\\\"return\\\": \\\"A list of verses from the Quran that contain the keyword.\\\",\\n\\\"depend\\\": \\\"requests library, Al Quran Cloud API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an enthusiastic and dedicated Egyptian handball coach.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses machine learning model PoseNet to analyze a player's movements from a video of a handball game to help coaches identify the strengths and weaknesses in their playing style.\\\",\\n\\\"function_name\\\": \\\"analyze_player_performance\\\",\\n\\\"input_args\\\": \\\"video_path - The path to the video file of the handball game\\\",\\n\\\"return\\\": \\\"A list of coordinates representing the movements of the player\\\",\\n\\\"depend\\\": \\\"Python libraries: cv2, numpy, posenet; Machine learning model: PoseNet\\\"\\n}\"", "description": "tool development"}
{"input persona": "An official from the environmental agency responsible for monitoring pollution levels in the port", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Air Quality Monitoring Interface\\\",\\n  \\\"description\\\": \\\"Fetches the latest air quality data for a given city using the OpenAQ API\\\",\\n  \\\"function_name\\\": \\\"get_air_quality\\\",\\n  \\\"input_args\\\": {\\n    \\\"city\\\": \\\"Name of the city for which to fetch air quality data\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"City\\\": \\\"City name\\\",\\n    \\\"Country\\\": \\\"Country where the city is located\\\",\\n    \\\"Location\\\": \\\"Specific location where measurement was taken\\\",\\n    \\\"Pollutant\\\": \\\"Type of pollutant measured\\\",\\n    \\\"Value\\\": \\\"Pollutant value\\\",\\n    \\\"Unit\\\": \\\"Unit of measurement\\\",\\n    \\\"Date\\\": \\\"Date and time when the measurement was taken\\\"\\n  },\\n  \\\"depend\\\": [\\\"requests\\\", \\\"OpenAQ API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A stubborn landowner who disagrees with the village leader's decisions on land distribution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Boundary Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface receives the coordinates of user's land and the village leader's proposed land distribution coordinates, and returns whether the proposed distribution is within the user's property boundaries.\\\",\\n\\\"function_name\\\": \\\"is_within_boundary\\\",\\n\\\"input_args\\\": {\\n    \\\"user_land_coords\\\": \\\"A list of tuples with each tuple representing the latitude and longitude of a point on the user's land boundary\\\",\\n    \\\"proposed_land_coords\\\": \\\"A list of tuples with each tuple representing the latitude and longitude of a point on the proposed land distribution boundary\\\"\\n},\\n\\\"return\\\": \\\"Boolean value indicating whether the proposed land distribution is within the user's property boundaries\\\",\\n\\\"depend\\\": \\\"GeoPandas and Shapely Python libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A catholic priest and follower of Huertas Vargas", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bible Verse Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a topic as input and uses a pre-trained NLP model to generate a bible verse relevant to that topic. It simplifies the process of finding relevant bible verses for different topics.\\\",\\n  \\\"function_name\\\": \\\"recommend_bible_verse\\\",\\n  \\\"input_args\\\": {\\n    \\\"topic\\\": \\\"A string representing the topic for which the user wants a bible verse.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"verse\\\": \\\"A string representing a bible verse relevant to the input topic.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"transformers\\\"],\\n    \\\"machine learning models\\\": [\\\"distilgpt2 model from Hugging Face's transformers library\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A Thai villager who survived the Sungai Kolok fireworks disaster", "synthesized text": "\"{\\n\\\"name\\\": \\\"Seismic Event Information Interface\\\",\\n\\\"description\\\": \\\"This interface is used to gather detailed information about seismic events or earthquakes based on the location and the date range of the event.\\\",\\n\\\"function_name\\\": \\\"get_seismic_event_info\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"A string representing the location of the seismic event.\\\",\\n    \\\"start_date\\\": \\\"A string representing the start date of the range in 'YYYY-MM-DD' format.\\\",\\n    \\\"end_date\\\": \\\"A string representing the end date of the range in 'YYYY-MM-DD' format.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing information about the seismic event, including magnitude, coordinates, location, and time among other details.\\\",\\n\\\"depend\\\": \\\"The function leverages the 'requests' Python library and the USGS Earthquake Database API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a competitive salesperson in another stereo-to-5.1 upmixer company", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stereo to 5.1 Upmixer Interface\\\",\\n\\\"description\\\": \\\"An interface that converts stereo audio into 5.1 audio. User only need to input the path to the stereo audio file, and the path where the upmixed audio file will be saved.\\\",\\n\\\"function_name\\\": \\\"stereo_to_5_1\\\",\\n\\\"input_args\\\": {\\n    \\\"stereo_audio_path\\\": \\\"Path to the stereo audio file\\\",\\n    \\\"upmixed_audio_path\\\": \\\"Path where the upmixed audio file will be saved\\\"\\n},\\n\\\"return\\\": \\\"Path of the upmixed audio file\\\",\\n\\\"depend\\\": \\\"PyDub Python library, FFmpeg tool\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biology major who finds solace in the predictability of science compared to the subjectivity of literature", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that simplifies the process of DNA sequence analysis. It takes a DNA sequence and returns its reverse complement, its transcription, and its translation into a protein sequence.\\\",\\n\\\"function_name\\\": \\\"dna_analysis\\\",\\n\\\"input_args\\\": \\\"dna_sequence\\\",\\n\\\"return\\\": \\\"Dictionary with 'Reverse Complement', 'Transcription', and 'Translation' of the input DNA sequence\\\",\\n\\\"depend\\\": \\\"Biopython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young LGBTQ+ individual seeking a supportive spiritual community", "synthesized text": "\"{\\n  \\\"name\\\": \\\"LGBTQ+ Friendly Spiritual Community Search Interface\\\",\\n  \\\"description\\\": \\\"Search for nearby LGBTQ+ friendly spiritual communities within a specified spiritual tradition.\\\",\\n  \\\"function_name\\\": \\\"get_lgbtq_friendly_spiritual_communities\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"The user's current location.\\\",\\n    \\\"tradition\\\": \\\"The user's preferred spiritual tradition.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of names of nearby LGBTQ+ friendly spiritual communities within the specified tradition.\\\",\\n  \\\"depend\\\": \\\"Web API of an online spiritual community directory\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pyrotechnician who collaborates with the fire performer to create mesmerizing fire effects during performances", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fire Effect Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to simulate fire effects given certain parameters like initial temperature, fuel type, and ventilation conditions.\\\",\\n\\\"function_name\\\": \\\"simulate_fire_effect\\\",\\n\\\"input_args\\\": {\\n    \\\"initial_temperature\\\": \\\"The initial temperature of the heat source.\\\",\\n    \\\"fuel_type\\\": \\\"The type of fuel used in the heat source.\\\",\\n    \\\"ventilation\\\": \\\"The ventilation conditions of the environment.\\\"\\n},\\n\\\"return\\\": \\\"A simulation of the fire effect given the input parameters.\\\",\\n\\\"depend\\\": \\\"PyroSim library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Awoman in the Victorian age who does not appreciate women being left out in historic scientific contributions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Women Scientist Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface fetches articles about a given scientific field from Wikipedia, extracts names from the articles, determines the likely gender of each named individual using the Genderize.io API, and returns a list of likely female scientists who contributed to the field.\\\",\\n\\\"function_name\\\": \\\"get_female_scientists_in_field\\\",\\n\\\"input_args\\\": \\\"field - A string representing the scientific field to search in.\\\",\\n\\\"return\\\": \\\"A list of strings, each string representing the name of a likely female scientist in the field.\\\",\\n\\\"depend\\\": \\\"This function relies on the Wikipedia API for fetching article content, the spaCy Python library for name extraction, and the Genderize.io API for gender prediction.\\\"\\n}\"", "description": "tool development"}
{"input persona": "一位对电视剧情节改编持怀疑态度的文学评论家", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Episode Summary Interface\\\",\\n\\\"description\\\": \\\"\\u63d0\\u4f9b\\u7535\\u89c6\\u5267\\u67d0\\u4e00\\u96c6\\u7684\\u6458\\u8981\\\",\\n\\\"function_name\\\": \\\"get_tv_episode_summary\\\",\\n\\\"input_args\\\": [\\\"tv_show\\\", \\\"season\\\", \\\"episode\\\"],\\n\\\"return\\\": \\\"A string containing the overview of the specified TV show episode\\\",\\n\\\"depend\\\": \\\"requests library, IMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seventh-generation resident of Coxheath who serves on the local church council.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Church Service Scheduling Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to schedule church services on Google Calendar by providing the service's name, start time, end time, and any additional details.\\\",\\n\\\"function_name\\\": \\\"create_service_event\\\",\\n\\\"input_args\\\": [\\\"service_name\\\", \\\"start_time\\\", \\\"end_time\\\", \\\"details\\\"],\\n\\\"return\\\": \\\"Confirmation message with a link to the created event\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A health insurance representative advocating for cost-effective options for policyholders", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Prescription Drug Price Comparison Interface\\\",\\n    \\\"description\\\": \\\"A high-level interface that allows users to compare the prices of prescription drugs at different pharmacies, enabling them to choose the most cost-effective option.\\\",\\n    \\\"function_name\\\": \\\"compare_drug_prices\\\",\\n    \\\"input_args\\\": \\\"drug_name\\\",\\n    \\\"return\\\": \\\"A dictionary with the names of the pharmacies as keys and the prices of the drug as values\\\",\\n    \\\"depend\\\": \\\"National Drug Code directory API, GoodRx API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A media historian studying the evolution of visual and audiovisual media in museums", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audiovisual Media Analyzer Interface\\\", \\n\\\"description\\\": \\\"An interface to analyze the content of audiovisual media. It uses Google Cloud Vision API for image analysis and Google Cloud Speech-to-Text API for audio analysis.\\\", \\n\\\"function_name\\\": \\\"analyze_media\\\", \\n\\\"input_args\\\": {\\\"file_path\\\": \\\"Path to the audio or image file to be analyzed.\\\"}, \\n\\\"return\\\": \\\"A string containing the results of the content analysis. For images, it returns the labels detected in the image. For audio files, it returns the transcription of the audio.\\\", \\n\\\"depend\\\": \\\"google-cloud-vision, google-cloud-speech\\\"\\n}\"", "description": "tool development"}
{"input persona": "A patient enrolled in a clinical trial studying the effects of nutritional interventions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clinical Trial Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface loads clinical trial data from a csv file, calculates summary statistics for each measurement, and performs a t-test to compare the means of each measurement between two groups.\\\",\\n\\\"function_name\\\": \\\"analyze_clinical_trial_data\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the csv file containing the clinical trial data.\\\",\\n    \\\"patient_id_col\\\": \\\"The name of the column in the csv file that represents patient IDs.\\\",\\n    \\\"group_col\\\": \\\"The name of the column in the csv file that represents the group each patient is in (e.g., treatment vs. control).\\\",\\n    \\\"measurement_cols\\\": \\\"A list of the names of the columns in the csv file that represent the measurements taken during the trial.\\\"\\n},\\n\\\"return\\\": \\\"A tuple where the first element is a dictionary of summary statistics for each measurement and the second element is a dictionary of t-test results for each measurement.\\\",\\n\\\"depend\\\": \\\"Pandas and SciPy libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college basketball player who looks up to the West Virginia Mountaineers and seeks advice from the fan on how to improve their game", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Game Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes a basketball player's game performance and provides suggestions for improvement.\\\",\\n\\\"function_name\\\": \\\"analyze_game_performance\\\",\\n\\\"input_args\\\": {\\n  \\\"shooting_percentage\\\": \\\"The player's shooting percentage in the game.\\\",\\n  \\\"number_of_assists\\\": \\\"The number of assists made by the player in the game.\\\",\\n  \\\"number_of_rebounds\\\": \\\"The number of rebounds made by the player in the game.\\\",\\n  \\\"turnovers\\\": \\\"The number of turnovers made by the player in the game.\\\",\\n  \\\"steals\\\": \\\"The number of steals made by the player in the game.\\\"\\n},\\n\\\"return\\\": \\\"A list of areas (shooting, assists, rebounds, turnovers, steals) that the player could focus on to improve their game.\\\",\\n\\\"depend\\\": \\\"Python's scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A confused freshman trying to decide between pursuing a degree in biology or psychology", "synthesized text": "\"{\\n\\\"name\\\": \\\"University Major Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface uses GPT-3 to compare two different university majors based on certain criteria such as future job prospects, difficulty, interest, etc.\\\",\\n\\\"function_name\\\": \\\"gpt3_compare_majors\\\",\\n\\\"input_args\\\": [\\\"major1\\\", \\\"major2\\\"],\\n\\\"return\\\": \\\"A text comparison between the two majors.\\\",\\n\\\"depend\\\": [\\\"openai\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A veteran who transitioned to organic farming after military service.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast for Crop Planting Interface\\\",\\n\\\"description\\\": \\\"An interface to get a 7-day weather forecast for a given location. This assists farmers in deciding the optimal time for crop planting.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\"],\\n\\\"return\\\": \\\"A 7-day weather forecast including temperature, humidity, wind speed, and precipitation.\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concert promoter who is determined to bring the young violinist to the Vienna Musikverein stage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Concert Date Availability Interface\\\",\\n\\\"description\\\": \\\"An interface that checks and returns the available dates for a concert at Vienna Musikverein within the specified date range.\\\",\\n\\\"function_name\\\": \\\"get_available_dates\\\",\\n\\\"input_args\\\": {\\\"start_date\\\": \\\"string in 'YYYY-MM-DD' format\\\", \\\"end_date\\\": \\\"string in 'YYYY-MM-DD' format\\\"},\\n\\\"return\\\": \\\"List of available dates in 'YYYY-MM-DD' format\\\",\\n\\\"depend\\\": \\\"requests library, Vienna Musikverein API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hydrogen fuel cell manufacturer excited about the potential of their technology in the transportation sector", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hydrogen Fuel Cell Efficiency Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes the operating temperature, hydrogen flow rate, and electrical power of a hydrogen fuel cell, and calculates the efficiency of the fuel cell.\\\",\\n\\\"function_name\\\": \\\"calculate_efficiency\\\",\\n\\\"input_args\\\": {\\\"operating_temperature\\\": \\\"Temperature at which the fuel cell is operating in Kelvin\\\", \\\"hydrogen_flow_rate\\\": \\\"The flow rate of hydrogen in the fuel cell in grams per second\\\", \\\"electrical_power\\\": \\\"The electrical power produced by the fuel cell in watts\\\"},\\n\\\"return\\\": \\\"The efficiency of the hydrogen fuel cell as a decimal\\\",\\n\\\"depend\\\": [\\\"scipy\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A music recorder who enjoys keeping track of music charts and releases.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Chart Tracker Interface\\\",\\n\\\"description\\\": \\\"Fetches the top 10 tracks from the specified country's music charts using the Spotify Web API.\\\",\\n\\\"function_name\\\": \\\"get_top_tracks\\\",\\n\\\"input_args\\\": {\\\"country_code\\\": \\\"A two-letter country code as per ISO 3166-1 alpha-2.\\\", \\\"client_id\\\": \\\"Your Spotify Web API Client ID.\\\", \\\"client_secret\\\": \\\"Your Spotify Web API Client Secret.\\\"},\\n\\\"return\\\": \\\"A list of the top 10 tracks in the specified country.\\\",\\n\\\"depend\\\": \\\"requests library, Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The owner of a neighboring golf course who is skeptical about the benefits of virtual simulators", "synthesized text": "\"{\\n\\\"name\\\": \\\"Golf Shot Simulator Interface\\\",\\n\\\"description\\\": \\\"Simulate the golf shots based on the strength and angle of the swing. The result includes the distance the ball would travel, the trajectory it will follow, and the final resting place of the ball on the golf course.\\\",\\n\\\"function_name\\\": \\\"simulate_golf_shot\\\",\\n\\\"input_args\\\": [\\\"strength\\\", \\\"angle\\\"],\\n\\\"return\\\": \\\"List of positions representing the trajectory of the golf ball.\\\",\\n\\\"depend\\\": [\\\"pybullet\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A junior Python developer learning how to package a simple library.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Packaging Interface\\\",\\n\\\"description\\\": \\\"This interface automates the process of creating a simple Python library package for sharing code by creating necessary files and directories.\\\",\\n\\\"function_name\\\": \\\"create_python_package\\\",\\n\\\"input_args\\\": [\\\"package_name\\\"],\\n\\\"return\\\": \\\"A string indicating the successful creation of the package\\\",\\n\\\"depend\\\": [\\\"os library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "En naturintresserad lärare som tycker om att undervisa om marina ekosystem.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Marine Species Identification Interface\\\",\\n  \\\"description\\\": \\\"En high-level interface f\\u00f6r att identifiera arter av marina organismer med hj\\u00e4lp av Deep Learning. Anv\\u00e4ndaren beh\\u00f6ver bara ange s\\u00f6kv\\u00e4gen till en bildfil, och gr\\u00e4nssnittet returnerar den mest troliga arten som avbildas i bilden.\\\",\\n  \\\"function_name\\\": \\\"identify_marine_species\\\",\\n  \\\"input_args\\\": [\\\"img_path\\\"],\\n  \\\"return\\\": \\\"Den mest troliga arten (str\\u00e4ng) som avbildas i bilden.\\\",\\n  \\\"depend\\\": \\\"Python libraries: TensorFlow, TensorFlow Hub. Machine Learning model: en f\\u00f6rtr\\u00e4nad Deep Learning modell fr\\u00e5n TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a recent high school graduate from Allahabad who's interested in pursuing a career in medicine.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical School Admission Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to predict the chances of a student getting into a medical school based on their academic history, extra-curricular activities, test scores, etc.\\\",\\n\\\"function_name\\\": \\\"get_admission_probability\\\",\\n\\\"input_args\\\": [\\\"path - The path to the student data file\\\", \\\"student_info - A dictionary containing the student's information\\\"],\\n\\\"return\\\": \\\"A prediction of whether the student would be admitted or not.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\", \\\"machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A talented filmmaker who dreams of working with Denzel Washington one day, admiring his versatility and ability to bring characters to life on the screen", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Clip Summarizer Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a path to a film clip as input and returns a summary of the clip's content.\\\",\\n\\\"function_name\\\": \\\"summarize_movie_clip\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_clip\\\": \\\"The path to the movie clip file\\\"\\n},\\n\\\"return\\\": \\\"A summary of the movie clip's content\\\",\\n\\\"depend\\\": \\\"Huggingface's bert-extractive-summarizer library, Speech recognition library (e.g., Google Speech-to-Text API or IBM Watson's Speech to Text)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A linguistics expert who studies the language used in ancient legal texts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface performs linguistic analysis on a given text, using part-of-speech tagging, named entity recognition, and dependency parsing.\\\",\\n\\\"function_name\\\": \\\"perform_linguistic_analysis\\\",\\n\\\"input_args\\\": \\\"text - a string containing the text to be analyzed\\\",\\n\\\"return\\\": \\\"a dictionary containing three keys: 'POS Tagging' with a list of tuples (word, POS tag), 'Named Entities' with a list of tuples (entity, entity type), and 'Dependency Parsing' with a list of tuples (word, dependency relation, head word)\\\",\\n\\\"depend\\\": \\\"spaCy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hedge fund manager interested in automating their trading process using tradingview pinescript", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Trading Interface\\\",\\n\\\"description\\\": \\\"An interface for automated stock trading using provided strategy. Users need to provide stock symbol, amount to invest, and trading strategy in pinescript. The interface will then execute the trades automatically according to the strategy.\\\",\\n\\\"function_name\\\": \\\"trade_stock\\\",\\n\\\"input_args\\\": [\\\"symbol\\\", \\\"amount\\\", \\\"strategy\\\"],\\n\\\"return\\\": \\\"None, but executes trades on the user's Alpaca account\\\",\\n\\\"depend\\\": \\\"Alpaca Trade API, yfinance\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mathematician who provides the necessary mathematical tools and computational skills for the physicist's research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Matrix Multiplication Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of matrix multiplication. The user only needs to input two 2D lists (representing the matrices), and it will return the product of these matrices.\\\",\\n\\\"function_name\\\": \\\"matrix_multiplication\\\",\\n\\\"input_args\\\": [\\\"matrix1\\\", \\\"matrix2\\\"],\\n\\\"return\\\": \\\"A 2D list representing the product of the input matrices\\\",\\n\\\"depend\\\": [\\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic young fan of Jamaican cricketer Aaron Johnson who lives in Canada", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cricket Score and Stats Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to fetch a cricketer's statistics and performance details by inputting the cricketer's name.\\\",\\n\\\"function_name\\\": \\\"get_cricketer_stats\\\",\\n\\\"input_args\\\": \\\"cricketer_name: The name of the cricketer as a string\\\",\\n\\\"return\\\": \\\"A dictionary containing the cricketer's statistics and performance details, or 'Player not found' if the cricketer does not exist.\\\",\\n\\\"depend\\\": \\\"Python library - requests, Web API - CricAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "a computer scientist who is not familiar with mountain climbing but fascinated by secret missions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mission Route Planner Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Maps Directions API and OpenWeatherMap API to plan an optimal route that goes through all specified waypoints and provide weather forecast at each waypoint for a mission. The user inputs starting point, destination, and a list of waypoints.\\\",\\n\\\"function_name\\\": \\\"get_optimal_route_with_weather\\\",\\n\\\"input_args\\\": {\\\"start\\\": \\\"string\\\", \\\"end\\\": \\\"string\\\", \\\"waypoints\\\": \\\"list of strings\\\"},\\n\\\"return\\\": \\\"list of tuples (waypoint, weather forecast)\\\",\\n\\\"depend\\\": \\\"requests, Google Maps Directions API, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A book cover designer who appreciates the unique texture and color of the recycled paper", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color & Texture Analyzer\\\",\\n\\\"description\\\": \\\"This interface analyzes the dominant color and texture characteristics of an image. Useful for a designer who wants to understand the unique color and texture of different materials.\\\",\\n\\\"function_name\\\": \\\"analyze_image\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\"],\\n\\\"return\\\": \\\"A tuple containing the dominant color (as an array of RGB values) and texture metrics (as a tuple of five values: contrast, dissimilarity, homogeneity, energy, correlation).\\\",\\n\\\"depend\\\": \\\"OpenCV, NumPy, and skimage.feature libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diligent employee who ensures that all passengers have valid tickets and obey safety rules", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ticket Validation Interface\\\",\\n\\\"description\\\": \\\"An interface to validate tickets using QR code. It decodes the information encoded in a QR code and checks if the ticket is valid for the current day.\\\",\\n\\\"function_name\\\": [\\\"validate_ticket\\\", \\\"is_valid_ticket\\\"],\\n\\\"input_args\\\": [\\\"qr_code_image_path\\\", \\\"ticket_info\\\"],\\n\\\"return\\\": [\\\"Decoded information from QR code\\\", \\\"Boolean value indicating if the ticket is valid\\\"],\\n\\\"depend\\\": [\\\"Python's cv2 and pyzbar libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A former colleague and close friend of Victor Tatarskiy, who worked with him in the broadcasting industry and shared many memorable moments over the years.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Video Transcription Interface\\\",\\n    \\\"description\\\": \\\"An interface that takes a path to a video file as input and returns the transcript of all spoken content in the video.\\\",\\n    \\\"function_name\\\": \\\"transcribe_video\\\",\\n    \\\"input_args\\\": [\\\"path_to_video\\\"],\\n    \\\"return\\\": \\\"transcript\\\",\\n    \\\"depend\\\": \\\"Google's Speech-to-Text API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A knowledgeable pharmacist who recommends over-the-counter eye drops and provides advice on managing dry eye symptoms", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Eye Drops Recommendation Interface\\\",\\n    \\\"description\\\": \\\"An interface that uses a machine learning model to recommend over-the-counter eye drops and provide advice on managing dry eye symptoms based on user input.\\\",\\n    \\\"function_name\\\": \\\"recommend_eye_drops\\\",\\n    \\\"input_args\\\": \\\"symptoms - A list of symptoms as strings\\\",\\n    \\\"return\\\": \\\"A dictionary containing a recommended over-the-counter eye drop and advice on managing dry eye symptoms\\\",\\n    \\\"depend\\\": \\\"tensorflow, keras, a trained machine learning model (eye_drops_recommendation_model.h5)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A factory owner who values efficiency and cost-effectiveness in leather production", "synthesized text": "\"{\\n\\\"name\\\": \\\"Leather Quality Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the quality of leather based on various parameters like temperature, humidity, pressure, and pH value during the tanning process.\\\",\\n\\\"function_name\\\": \\\"predict_leather_quality\\\",\\n\\\"input_args\\\": [\\\"temp\\\", \\\"humidity\\\", \\\"pressure\\\", \\\"pH\\\"],\\n\\\"return\\\": \\\"Predicted quality of the leather\\\",\\n\\\"depend\\\": \\\"scikit-learn library, pickle\\\"\\n}\"", "description": "tool development"}
{"input persona": "A psychologist studying the effectiveness of AI-based interventions in anxiety management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mood Score Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to predict the mood score of a patient based on their diary entry\\\",\\n\\\"function_name\\\": \\\"predict_mood_score\\\",\\n\\\"input_args\\\": \\\"diary_entry - Text of the diary entry\\\",\\n\\\"return\\\": \\\"mood_score - A value between 0 and 1 representing the mood score. Higher values indicate a more positive mood\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer with no experience in OAuth", "synthesized text": "\"{\\n\\\"name\\\": \\\"OAuth Token Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates an OAuth token for API access. It receives client_id, client_secret, and scope as input and returns an access token.\\\",\\n\\\"function_name\\\": \\\"generate_oauth_token\\\",\\n\\\"input_args\\\": [\\\"client_id\\\", \\\"client_secret\\\", \\\"scope\\\"],\\n\\\"return\\\": \\\"OAuth access token (string)\\\",\\n\\\"depend\\\": \\\"requests library, Google OAuth server\\\"\\n}\"", "description": "tool development"}
{"input persona": "A commercial airline pilot who has broken records for the longest non-stop flights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Duration Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the duration of a flight based on source and destination airport, departure date and time, and aircraft type\\\",\\n\\\"function_name\\\": \\\"predict_flight_duration\\\",\\n\\\"input_args\\\": [\\\"src_airport\\\", \\\"dest_airport\\\", \\\"departure_date_time\\\", \\\"aircraft_type\\\"],\\n\\\"return\\\": \\\"Predicted flight duration in hours\\\",\\n\\\"depend\\\": \\\"Pandas library, Scikit-learn library, A trained RandomForestRegressor model (flight_duration_model.pkl)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An art gallery curator looking to incorporate interactive installations into upcoming exhibits, seeking advice on technical feasibility", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interactive Art Installation Feasibility Analysis\\\",\\n\\\"description\\\": \\\"Predicts the feasibility of an interactive art installation based on a given proposal.\\\",\\n\\\"function_name\\\": \\\"predict_feasibility\\\",\\n\\\"input_args\\\": {\\\"proposal\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"Feasibility Score (int)\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"scikit-learn\\\", \\\"pandas\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A local café owner who appreciates the engineer's technical help with their business Wi-Fi", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wi-Fi Signal Strength Interface\\\",\\n\\\"description\\\": \\\"An interface that scans and analyzes all available Wi-Fi networks, outputting a list of Wi-Fi networks along with their respective signal strength.\\\",\\n\\\"function_name\\\": \\\"get_wifi_signal_strength\\\",\\n\\\"input_args\\\": \\\"None\\\",\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary contains the 'ssid' (name of the Wi-Fi network) and 'signal' (signal strength of the Wi-Fi network).\\\",\\n\\\"depend\\\": \\\"wifi Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An author who writes fantasy novels featuring dragons as main characters", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Dragon Name Generator Interface\\\",\\n  \\\"description\\\": \\\"Generates unique and interesting dragon names using a pre-trained GPT-2 model.\\\",\\n  \\\"function_name\\\": \\\"generate_dragon_names\\\",\\n  \\\"input_args\\\": {\\n    \\\"num_names\\\": \\\"The number of dragon names to generate.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of generated dragon names.\\\",\\n  \\\"depend\\\": \\\"huggingface transformers library (GPT-2 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned speaker designer aiming to create the most visually appealing speaker designs", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Visual Quality Enhancement Interface\\\",\\n\\\"description\\\": \\\"An interface to enhance the visual quality of a 3D model using a pre-trained TensorFlow model.\\\",\\n\\\"function_name\\\": \\\"enhance_3d_model\\\",\\n\\\"input_args\\\": \\\"path_to_model - A string that is the path to the 3D model file\\\",\\n\\\"return\\\": \\\"A numpy array representing the enhanced 3D model\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A government agency looking to transition to open-source solutions for better cost-efficiency", "synthesized text": "\"{\\n\\\"name\\\": \\\"Open Source License Compatibility Checker\\\",\\n\\\"description\\\": \\\"This interface checks the compatibility between two open-source licenses.\\\",\\n\\\"function_name\\\": \\\"check_license_compatibility\\\",\\n\\\"input_args\\\": [\\\"license1\\\", \\\"license2\\\"],\\n\\\"return\\\": \\\"Boolean value indicating whether the two licenses are compatible.\\\",\\n\\\"depend\\\": \\\"Python 'license' library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly piano teacher who was influenced by Hazel Gertrude Kinscella's methods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sheet Music Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface converts an image of sheet music into a MIDI file that can be played back. Simply input the path to the image of the sheet music.\\\",\\n\\\"function_name\\\": \\\"image_to_midi\\\",\\n\\\"input_args\\\": [\\\"path_to_sheet_music\\\"],\\n\\\"return\\\": \\\"Path to the MIDI file\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\", \\\"music21\\\", \\\"midi2audio\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一位对国际政治持怀疑态度的博主", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u56fd\\u5185\\u65b0\\u95fb\\u81ea\\u52a8\\u7ffb\\u8bd1\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u8f93\\u5165\\u56fd\\u5185\\u65b0\\u95fb\\u7684URL\\uff0c\\u8fd4\\u56de\\u8be5\\u65b0\\u95fb\\u7684\\u82f1\\u6587\\u7ffb\\u8bd1\\u3002\\\",\\n\\\"function_name\\\": \\\"translate_news\\\",\\n\\\"input_args\\\": \\\"url, target_language\\\",\\n\\\"return\\\": \\\"translated_news\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup, Google Translate API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservative financial analyst who doesn't share the musical passion but supports their sibling's pursuits", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Music Mood Classification Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a deep learning model to classify the mood of a song based on its lyrics.\\\",\\n  \\\"function_name\\\": \\\"classify_music_mood\\\",\\n  \\\"input_args\\\": \\\"lyrics - a string of song lyrics\\\",\\n  \\\"return\\\": \\\"mood - a string indicating the mood of the song\\\",\\n  \\\"depend\\\": \\\"Hugging Face: cardiffnlp/twitter-roberta-base-emotion model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from the National Archives providing guidance on legal requirements for preserving government records", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Preservation Status Interface\\\", \\n\\\"description\\\": \\\"This interface extracts text from a PDF and uses a large language model to summarize the legal requirements for preserving government records mentioned in the document.\\\", \\n\\\"function_name\\\": \\\"get_preservation_requirements\\\", \\n\\\"input_args\\\": \\\"pdf_path\\\", \\n\\\"return\\\": \\\"A summary of the legal requirements for preserving government records mentioned in the document.\\\", \\n\\\"depend\\\": \\\"PyPDF2 library, Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A programmer who codes the game mechanics and implements the audio into the gameplay", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Implementation Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to play an audio file when a certain game event is triggered. In this example, the audio plays when player's score reaches 10 or more.\\\",\\n\\\"function_name\\\": \\\"play_audio_on_event\\\",\\n\\\"input_args\\\": [\\\"audio_file_path\\\", \\\"player_score\\\"],\\n\\\"return\\\": \\\"Function that plays the audio when player's score is 10 or more\\\",\\n\\\"depend\\\": [\\\"pygame\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An opposing candidate who believes that prioritizing renewable energy will lead to economic downfall", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Energy Economic Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes economic impact data of solar energy from the Solar Energy Industries Association (SEIA) and returns the economic impact for a specific year.\\\",\\n\\\"function_name\\\": \\\"get_solar_economic_impact\\\",\\n\\\"input_args\\\": {\\n    \\\"year\\\": \\\"The year for which the user wants the economic impact data.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Jobs\\\": \\\"The number of jobs created by the solar industry in the specified year.\\\",\\n    \\\"Companies\\\": \\\"The number of companies in the solar industry in the specified year.\\\",\\n    \\\"Investment\\\": \\\"The amount of investment in the solar industry in the specified year.\\\"\\n},\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"pandas\\\", \\\"SEIA website\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An experienced Kotlin engineer who is familiar with Retrofit library and server communication.", "synthesized text": "\"{\\n\\\"name\\\": \\\"HTTP Request Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to send HTTP requests using the python requests library. Supports GET, POST, PUT, and DELETE methods.\\\",\\n\\\"function_name\\\": \\\"send_http_request\\\",\\n\\\"input_args\\\": {\\n    \\\"method\\\": \\\"The HTTP method to use. Supports GET, POST, PUT, and DELETE.\\\",\\n    \\\"url\\\": \\\"The URL to send the request to.\\\",\\n    \\\"params\\\": \\\"Optional. A dictionary of parameters to send with the request. Defaults to None.\\\",\\n    \\\"body\\\": \\\"Optional. A dictionary to send as the body of the request. Defaults to None.\\\"\\n},\\n\\\"return\\\": \\\"The response of the HTTP request, parsed as a JSON object.\\\",\\n\\\"depend\\\": \\\"Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research assistant who is eager to learn about quantitative research methods in sociology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Natural Language Processing library (NLTK) to analyze the complexity of a text. It takes as input a text file and outputs a summary of the text's complexity, including the number of unique words, average sentence length, and lexical diversity.\\\",\\n\\\"function_name\\\": \\\"text_complexity_analysis\\\",\\n\\\"input_args\\\": [\\\"text_file\\\"],\\n\\\"return\\\": {\\\"number_of_words\\\": \\\"int\\\", \\\"number_of_sentences\\\": \\\"int\\\", \\\"number_of_unique_words\\\": \\\"int\\\", \\\"average_sentence_length\\\": \\\"float\\\", \\\"lexical_diversity\\\": \\\"float\\\"},\\n\\\"depend\\\": [\\\"nltk\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A barista at a local coffee shop who shares tips on finding budget-friendly food options", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Affordable Food Options Finder Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a location as input and returns a list of budget-friendly food options in that area. It uses web scraping to gather this information from a website that lists affordable food options.\\\",\\n  \\\"function_name\\\": \\\"get_affordable_food_options\\\",\\n  \\\"input_args\\\": [\\\"location\\\"],\\n  \\\"return\\\": \\\"A list of budget-friendly food options in the input location.\\\",\\n  \\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an aspiring singer-songwriter who has recently discovered my song being used in a commercial without my permission.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Audio Fingerprinting Interface\\\",\\n  \\\"description\\\": \\\"An interface to detect if two audio files match using audio fingerprinting.\\\",\\n  \\\"function_name\\\": \\\"audio_match\\\",\\n  \\\"input_args\\\": [\\\"path_to_original_audio\\\", \\\"path_to_suspected_audio\\\"],\\n  \\\"return\\\": \\\"A boolean value indicating if the two audio files match.\\\",\\n  \\\"depend\\\": {\\\"python_libraries\\\": [\\\"dejavu\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "coding bootcamp mentor who shares Refactoring, the practice of modifying an existing code base in a systematic approach to improve its readability or efficiency.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Refactoring Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Python library 'rope' to refactor Python code. It supports different types of refactorings like renaming and extracting methods. The user needs to provide the code to refactor, the type of refactoring to perform, and any arguments needed for that refactoring.\\\",\\n\\\"function_name\\\": \\\"refactor_code\\\",\\n\\\"input_args\\\": [\\\"code\\\", \\\"refactor_type\\\", \\\"*args\\\"],\\n\\\"return\\\": \\\"The refactored code as a string.\\\",\\n\\\"depend\\\": [\\\"rope\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a student majoring in Women's Studies in the United States.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Paper Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analyzing academic papers. It reads a PDF, preprocesses the text, extracts the main topics, and summarizes the paper.\\\",\\n\\\"function_name\\\": \\\"analyze_paper\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The path to the PDF file to be analyzed.\\\"}},\\n\\\"return\\\": {\\\"summary\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"A summary of the paper.\\\"}, \\\"topics\\\": {\\\"type\\\": \\\"list\\\", \\\"description\\\": \\\"The main topics covered in the paper.\\\"}},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"PyPDF2\\\", \\\"nltk\\\", \\\"gensim\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"BERT\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A dedicated scientist who values the participants' contributions and ensures their well-being throughout the trial", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clinical Trial Participant Management Interface\\\",\\n\\\"description\\\": \\\"An interface to manage clinical trial participants, including functions to add new participants, update participant details, and retrieve participant information.\\\",\\n\\\"function_names\\\": [\\\"connect_db\\\", \\\"add_participant\\\", \\\"update_participant\\\", \\\"get_participant\\\"],\\n\\\"input_args\\\": {\\\"connect_db\\\": [\\\"db_file\\\"], \\\"add_participant\\\": [\\\"db_conn\\\", \\\"id\\\", \\\"name\\\", \\\"age\\\", \\\"gender\\\", \\\"contact\\\"], \\\"update_participant\\\": [\\\"db_conn\\\", \\\"id\\\", \\\"name\\\", \\\"age\\\", \\\"gender\\\", \\\"contact\\\"], \\\"get_participant\\\": [\\\"db_conn\\\", \\\"id\\\"]},\\n\\\"return\\\": {\\\"connect_db\\\": \\\"db_conn\\\", \\\"add_participant\\\": \\\"None\\\", \\\"update_participant\\\": \\\"None\\\", \\\"get_participant\\\": \\\"Participant details as tuple\\\"},\\n\\\"depend\\\": [\\\"Python sqlite3 module\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an R2-D2 enthusiast who enjoys interpreting R2-D2's emotions from the Star Wars films", "synthesized text": "\"{\\n\\\"name\\\": \\\"R2-D2 Emotion Interpretation Interface\\\",\\n\\\"description\\\": \\\"Interprets the emotions of R2-D2's 'beeps' and 'boops'. User inputs the text representation of R2-D2's sounds and the function returns the interpreted emotion.\\\",\\n\\\"function_name\\\": \\\"interpret_r2d2_emotions\\\",\\n\\\"input_args\\\": {\\\"beep_boop_text\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (emotion)\\\",\\n\\\"depend\\\": \\\"huggingface ('cardiffnlp/twitter-roberta-base-emotion' model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dance instructor who utilizes the graphic designer's social media posts to create choreography for Usher's songs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Color Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to extract the dominant colors from an image. Useful for getting color inspiration from images.\\\",\\n\\\"function_name\\\": \\\"get_dominant_colors\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"k\\\"],\\n\\\"return\\\": \\\"List of tuples representing the dominant colors. Each tuple has the percentage of the color in the image and the RGB value of the color.\\\",\\n\\\"depend\\\": [\\\"cv2\\\", \\\"numpy\\\", \\\"sklearn.cluster.KMeans\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A multicultural artist who creates artwork inspired by different cultures, including Kazakhstan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cultural Color Palette Generator\\\",\\n\\\"description\\\": \\\"Generates a color palette inspired by the specified culture, by searching for images associated with the culture and extracting the dominant colors.\\\",\\n\\\"function_name\\\": \\\"cultural_color_palette\\\",\\n\\\"input_args\\\": [\\\"query\\\", \\\"num_colors\\\"],\\n\\\"return\\\": \\\"A list of hexadecimal color codes.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"PIL\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"sklearn.cluster\\\", \\\"numpy\\\", \\\"Google Custom Search JSON API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A demanding bride who wants a show-stopping dessert that will impress all of her guests", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a custom, detailed, and elaborate dessert recipe based on the user's input of dessert type and ingredients. The result is a unique and impressive recipe suitable for a grand event.\\\",\\n\\\"function_name\\\": \\\"get_custom_dessert_recipe\\\",\\n\\\"input_args\\\": {\\n    \\\"dessert_type\\\": \\\"The type of dessert the user wants (e.g., cake, pie, pastry).\\\",\\n    \\\"ingredients\\\": \\\"A list of ingredients that the user wants to include in the recipe.\\\"\\n},\\n\\\"return\\\": \\\"A text string containing the detailed and elaborate dessert recipe.\\\",\\n\\\"depend\\\": \\\"GPT-3 from OpenAI\\\"\\n}\"", "description": "tool development"}
{"input persona": "a film score composer and an absolute fan of John William's film scores", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Score Mood Classification Interface\\\",\\n\\\"description\\\": \\\"An interface that uses deep learning to classify the mood of a piece of music. The user only needs to input the path to a music file, and the interface will return the classified mood of the film score.\\\",\\n\\\"function_name\\\": \\\"predict_mood\\\",\\n\\\"input_args\\\": \\\"path_to_music\\\",\\n\\\"return\\\": \\\"Mood of the music piece\\\",\\n\\\"depend\\\": [\\\"huggingface Wav2Vec2\\\", \\\"librosa\\\", \\\"pydub\\\", \\\"numpy\\\", \\\"torch\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hired professional who tracks down information on well-known public figures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Public Figure Information Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Wikipedia API to gather information on a specified public figure. Users only need to provide the name of the public figure, and the interface will return a summary of information about that figure.\\\",\\n\\\"function_name\\\": \\\"get_public_figure_info\\\",\\n\\\"input_args\\\": {\\n\\\"name\\\": \\\"The name of the public figure.\\\"\\n},\\n\\\"return\\\": \\\"A summary of information about the specified public figure.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tree expert who can recommend and help plant large, sturdy trees for added privacy and shade", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tree Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends tree species based on user's needs, location, and soil type. The user's needs are processed by a large language model.\\\",\\n\\\"function_name\\\": \\\"recommend_trees\\\",\\n\\\"input_args\\\": {\\n  \\\"needs\\\": \\\"A string describing the user's needs, like 'privacy', 'shade', 'fruit-bearing'.\\\",\\n  \\\"location\\\": \\\"A string describing the user's location, like 'California', 'Florida', 'New York'.\\\",\\n  \\\"soil_type\\\": \\\"A string describing the type of soil in the user's area, like 'sandy', 'clay', 'loamy'.\\\"\\n},\\n\\\"return\\\": \\\"A list of tree species that meet the user's needs and are suitable for the given location and soil type, or a message indicating that no suitable trees were found.\\\",\\n\\\"depend\\\": \\\"Pandas library, large language model for processing user's needs, and a CSV or online database of tree species.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a bible study leader who is passionate about clarifying biblical genealogy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Biblical Genealogy Interface\\\",\\n\\\"description\\\": \\\"An interface that retrieves genealogy information of a person from the Bible. The user needs to input a name, and it returns the person's parents, siblings, spouse, and children according to biblical records.\\\",\\n\\\"function_name\\\": \\\"get_biblical_genealogy\\\",\\n\\\"input_args\\\": \\\"name\\\",\\n\\\"return\\\": \\\"A dictionary containing the parents, siblings, spouse, and children of the person.\\\",\\n\\\"depend\\\": \\\"bible-api.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A potter who is recognized for creating ancient designs with a modern twist", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Generation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained Generative Adversarial Network (GAN) model from TensorFlow Hub to generate 3D models from a given image.\\\",\\n\\\"function_name\\\": \\\"generate_3d_model\\\",\\n\\\"input_args\\\": \\\"image_path: The path to the design image.\\\",\\n\\\"return\\\": \\\"A 3D model of the design in the image, represented as a Numpy array.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A British actress who shares behind-the-scenes stories and recommendations for the best theater experiences in London", "synthesized text": "\"{\\n\\\"name\\\": \\\"Theater Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface returns the top-rated upcoming theater events in London based on the user's preferred genre.\\\",\\n\\\"function_name\\\": \\\"get_top_theater_events\\\",\\n\\\"input_args\\\": \\\"genre\\\",\\n\\\"return\\\": \\\"List of dictionaries, where each dictionary contains 'name' (name of the event), 'date' (date of the event), and 'venue' (location of the event).\\\",\\n\\\"depend\\\": \\\"Ticketmaster Discovery API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A makeup artist looking for advice on creating makeup looks that enhance different features", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Feature Enhancement Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenCV to detect facial features in an image and provides makeup suggestions to enhance those features.\\\",\\n\\\"function_name\\\": \\\"makeup_suggestions\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"A dictionary with makeup suggestions for each detected facial feature.\\\",\\n\\\"depend\\\": \\\"OpenCV library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business owner who was frustrated by the aggressive tactics and decided to switch to another media buying agency", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitor Media Buying Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to pull data about a competitor's ad campaigns using the Google Ads API.\\\",\\n\\\"function_name\\\": \\\"get_competitor_ads_data\\\",\\n\\\"input_args\\\": {\\n    \\\"developer_token\\\": \\\"Your Google Ads Developer Token\\\",\\n    \\\"client_customer_id\\\": \\\"Your Google Ads Client Customer ID\\\",\\n    \\\"competitor_url\\\": \\\"Competitor's website URL\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, each containing data about one of the competitor's ad campaigns.\\\",\\n\\\"depend\\\": \\\"Google Ads API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A setter who relies on the player's powerful spikes to score points", "synthesized text": "\"{\\n\\\"name\\\": \\\"Volleyball Match Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to analyse a volleyball match video and count the number of successful spikes by a specific player.\\\",\\n\\\"function_name\\\": \\\"analyse_spikes\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_video\\\": \\\"The path to the video file to analyse.\\\",\\n    \\\"player_id\\\": \\\"The identifier of the player to analyse.\\\"\\n},\\n\\\"return\\\": \\\"The number of successful spikes by the specified player.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, a pre-trained model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A methodical thinker passionate about forensic science and finding factual evidence to support arguments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Forensic Document Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that uses OpenCV and scikit-image to compare the similarity of two documents. Useful in forensic science to determine if two documents were written by the same person.\\\",\\n\\\"function_name\\\": \\\"compare_documents\\\",\\n\\\"input_args\\\": [\\\"path_to_doc1\\\", \\\"path_to_doc2\\\"],\\n\\\"return\\\": \\\"A similarity score between 0 and 1. Values closer to 1 indicate greater similarity.\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\", \\\"scikit-image\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A maulana who offers guidance on integrating physical fitness with Islamic principles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fitness Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface uses Fitbit's Web API to get a user's fitness statistics and provides Islamic fitness guidance based on these statistics.\\\",\\n\\\"function_name\\\": \\\"provide_islamic_fitness_guidance\\\",\\n\\\"input_args\\\": {\\n    \\\"fitbit_user_id\\\": \\\"The user's Fitbit ID.\\\"\\n},\\n\\\"return\\\": \\\"A string of Islamic fitness guidance based on the user's activity level and sleep duration.\\\",\\n\\\"depend\\\": \\\"Fitbit's Web API, Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm an old-time Oakland Athletics fan who's extremely sentimental about the team's history and community impact.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baseball Statistics and History Interface\\\",\\n\\\"description\\\": \\\"An interface that provides access to historical player statistics, team performance, and community involvement of the Oakland Athletics.\\\",\\n\\\"function_name\\\": [\\\"get_player_stats\\\", \\\"get_team_history\\\", \\\"get_charity_involvement\\\"],\\n\\\"input_args\\\": [\\\"name\\\", \\\"year\\\"],\\n\\\"return\\\": [\\\"Player statistics\\\", \\\"Team performance for a given year\\\", \\\"Player's charity involvement\\\"],\\n\\\"depend\\\": [\\\"pybaseball Python library\\\", \\\"Lahman's Baseball Database\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local resident in Las Vegas, who is deeply invested in local politics, trusts in the electoral system, and is frustrated by conspiracy theories.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fact Check Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to fact-check political statements or claims. It leverages a pre-trained model from Hugging Face to generate a fact-checking result for the input statement.\\\",\\n\\\"function_name\\\": \\\"fact_check_statement\\\",\\n\\\"input_args\\\": \\\"statement - A string representing the political statement or claim to be fact-checked\\\",\\n\\\"return\\\": \\\"fact_check_result - A string representing the fact-checking result of the input statement\\\",\\n\\\"depend\\\": \\\"Hugging Face's pre-trained model 'mrm8488/t5-base-finetuned-finetuneD-politifact'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A career police officer who firmly believes in the principle of 'criminal actions deserve severe punishments'", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Crime Rate Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predict the crime rate of a region based on a set of factors about the region\\\",\\n  \\\"function_name\\\": \\\"predict_crime_rate\\\",\\n  \\\"input_args\\\": \\\"region_factors - A set of factors about a region (such as average income, population density, education level, etc.)\\\",\\n  \\\"return\\\": \\\"crime_rate - The predicted crime rate of the region\\\",\\n  \\\"depend\\\": \\\"scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Eastern Orthodox believer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Passage Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface fetches specific Bible passages from the Bible API. Users can input the book and chapter, and optionally the specific verses, to receive the text of the requested passage.\\\",\\n\\\"function_name\\\": \\\"get_bible_passage\\\",\\n\\\"input_args\\\": {\\n    \\\"book\\\": \\\"Name of the book in the Bible\\\",\\n    \\\"chapter\\\": \\\"Chapter number\\\",\\n    \\\"verse\\\": \\\"Specific verse or range of verses (optional)\\\"\\n},\\n\\\"return\\\": \\\"The text of the requested Bible passage.\\\",\\n\\\"depend\\\": \\\"Web API: https://api.bibleapi.com\\\"\\n}\"", "description": "tool development"}
{"input persona": "A talented, teenage figure skater whose low-income family cannot afford private lessons", "synthesized text": "\"{\\n\\\"name\\\": \\\"Figure Skating Training Video Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained pose estimation model from TensorFlow Hub to analyze and provide feedback on the user's figure skating performance. The user only needs to input the path to a figure skating training video file, and the interface will analyze the video and return useful feedback to help the user improve their performance.\\\",\\n\\\"function_name\\\": \\\"analyze_figure_skating_video\\\",\\n\\\"input_args\\\": \\\"path_to_video: string\\\",\\n\\\"return\\\": \\\"Feedback: string\\\",\\n\\\"depend\\\": \\\"OpenCV, TensorFlow Hub, Pre-trained Pose Estimation Model, and Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired project manager with decades of experience, providing valuable insights on effective quality control strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Quality Control Interface\\\",\\n\\\"description\\\": \\\"This interface takes a project description as input and returns a quality score for the project based on a pretrained text classification model.\\\",\\n\\\"function_name\\\": \\\"predict_quality\\\",\\n\\\"input_args\\\": \\\"project_description\\\",\\n\\\"return\\\": \\\"quality_score\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library (AutoModelForSequenceClassification, AutoTokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software developer who has used the yum-epel cookbook", "synthesized text": "\"{\\n\\\"name\\\": \\\"Package Management Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of managing system packages. It allows users to easily install, remove, or update packages on their system.\\\",\\n\\\"function_name\\\": \\\"manage_package\\\",\\n\\\"input_args\\\": {\\n\\\"operation\\\": \\\"The type of operation to perform. Can be 'install', 'remove', or 'update'.\\\",\\n\\\"package_name\\\": \\\"The name of the package to manage.\\\"\\n},\\n\\\"return\\\": \\\"The function does not return a value, but performs the specified operation on the package.\\\",\\n\\\"depend\\\": \\\"This function depends on the 'yum' Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sibling who is skeptical of the alignment between philosophy and religious principles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Philosophy and Religion Analyzer\\\",\\n\\\"description\\\": \\\"This interface uses OpenAI's GPT-3 language model to analyze the alignment between a given philosophical concept and a religious principle, providing an output text that describes their connection or disconnection.\\\",\\n\\\"function_name\\\": \\\"analyze_philosophy_religion_alignment\\\",\\n\\\"input_args\\\": [\\\"philosophy\\\", \\\"religion\\\"],\\n\\\"return\\\": \\\"A text analysis of the alignment between the input philosophical concept and religious principle.\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An award-winning poet who weaves the complexities of science into her poignant verses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poetic Word Embeddings Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from HuggingFace's Transformers library that uses deep learning to understand the semantic similarities between words and returns a list of words that are semantically related.\\\",\\n\\\"function_name\\\": \\\"get_related_words\\\",\\n\\\"input_args\\\": {\\n    \\\"word\\\": \\\"The word you want to find related words for\\\",\\n    \\\"top_k\\\": \\\"The number of top related words you want to return (default is 10)\\\"\\n},\\n\\\"return\\\": \\\"A list of words that are semantically related to the input word\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"torch\\\", \\\"transformers\\\"],\\n    \\\"Web APIs\\\": [],\\n    \\\"machine learning models\\\": [\\\"bert-base-uncased\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A fellow pilot who flew alongside the former pilot in dangerous missions and has become a lifelong friend", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"Provides weather information for the departure and arrival locations for a flight.\\\",\\n\\\"function_name\\\": \\\"get_flight_weather\\\",\\n\\\"input_args\\\": {\\n  \\\"departure\\\": \\\"string representing the departure location\\\",\\n  \\\"arrival\\\": \\\"string representing the arrival location\\\"\\n},\\n\\\"return\\\": {\\n  \\\"departure\\\": {\\n    \\\"location\\\": \\\"string representing the departure location\\\",\\n    \\\"weather\\\": \\\"string representing the weather at the departure location\\\",\\n    \\\"temperature\\\": \\\"float representing the temperature at the departure location\\\"\\n  },\\n  \\\"arrival\\\": {\\n    \\\"location\\\": \\\"string representing the arrival location\\\",\\n    \\\"weather\\\": \\\"string representing the weather at the arrival location\\\",\\n    \\\"temperature\\\": \\\"float representing the temperature at the arrival location\\\"\\n  }\\n},\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A novelist who finds inspiration in the contradictions of the oil industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Oil Price Trend Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface fetches historical oil price data and creates a plot showing the trend of oil prices over a selected period.\\\", \\n\\\"function_name\\\": \\\"plot_oil_price_trend\\\", \\n\\\"input_args\\\": {\\\"start_date\\\": \\\"The start date for the period to analyze\\\", \\\"end_date\\\": \\\"The end date for the period to analyze\\\"}, \\n\\\"return\\\": \\\"A plot showing the trend of oil prices over the selected period.\\\", \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"matplotlib\\\"], \\\"Web APIs\\\": \\\"Oil Price API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "a proud colleague of Bogdan, who values teamwork", "synthesized text": "\"{\\n\\\"name\\\": \\\"Teamwork Efficiency Analysis Interface\\\",\\n\\\"description\\\": \\\"Creates a network of team members and their collaborations from a CSV file and calculates the overall teamwork efficiency.\\\",\\n\\\"function_name\\\": \\\"calculate_teamwork_efficiency\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"Teamwork Efficiency measure (float between 0 and 1)\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, networkx\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow drama student specialising in stage direction with an ambition of working in Broadway", "synthesized text": "\"{\\n\\\"name\\\": \\\"Script Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a script and returns a character analysis including character count, frequency of dialogue, and a list of scenes in which each character appears.\\\",\\n\\\"function_name\\\": [\\\"get_character_dialogue\\\", \\\"get_character_scenes\\\"],\\n\\\"input_args\\\": {\\\"get_character_dialogue\\\": [\\\"script_path\\\"], \\\"get_character_scenes\\\": [\\\"script_path\\\"]},\\n\\\"return\\\": {\\\"get_character_dialogue\\\": \\\"dialogue_dict\\\", \\\"get_character_scenes\\\": \\\"character_scenes\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"spacy\\\", \\\"os\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A parent of a high school student who is hesitant about enrolling her child in the JROTC program.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Career Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface allows parents and students to simulate potential career paths within the military based on the student's interests, abilities, and personality traits.\\\",\\n\\\"function_name\\\": \\\"simulate_military_career\\\",\\n\\\"input_args\\\": {\\n  \\\"interests\\\": \\\"The student's main areas of interest.\\\",\\n  \\\"abilities\\\": \\\"The student's key abilities.\\\",\\n  \\\"personality_traits\\\": \\\"The student's dominant personality traits.\\\"\\n},\\n\\\"return\\\": \\\"A simulated career path within the military.\\\",\\n\\\"depend\\\": \\\"Python's sklearn library, pandas library, numpy library, and a pre-trained RandomForestClassifier model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Laura Sonn, a former sixth-grade math teacher who completed the Teach for America program and holds degrees from Pace University and the University of Notre Dame.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Math Quiz Generator Interface\\\",\\n\\\"description\\\": \\\"An interface for generating math quizzes with specified number of questions, difficulty level, and type of math problems. The interface returns a list of math problems and their solutions.\\\",\\n\\\"function_name\\\": \\\"generate_math_quiz\\\",\\n\\\"input_args\\\": {\\n    \\\"num_questions\\\": \\\"Number of questions for the quiz.\\\",\\n    \\\"difficulty\\\": \\\"The difficulty level of the questions. Can be 'easy', 'medium', or 'hard'.\\\",\\n    \\\"type\\\": \\\"The type of math problems. Can be 'addition', 'subtraction', 'multiplication', 'division', 'fractions', etc.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"questions\\\": \\\"A list of math problems.\\\",\\n    \\\"solutions\\\": \\\"A list of solutions to the math problems.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\", \\\"json\\\"],\\n    \\\"Web APIs\\\": [\\\"Math Problems API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A professional athlete seeking customized performance tracking software to enhance training", "synthesized text": "\"{\\n\\\"name\\\": \\\"Performance Tracking Interface\\\",\\n\\\"description\\\": \\\"This interface predicts an athlete's future performance based on their past performance data.\\\",\\n\\\"function_name\\\": [\\\"__init__\\\", \\\"prepare_data\\\", \\\"train_model\\\", \\\"predict_performance\\\"],\\n\\\"input_args\\\": [\\\"csv_file\\\", \\\"-\\\", \\\"-\\\", \\\"input_data\\\"],\\n\\\"return\\\": [\\\"-\\\", \\\"-\\\", \\\"-\\\", \\\"prediction\\\"],\\n\\\"depend\\\": [\\\"pandas library\\\", \\\"scikit-learn library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An online learning platform that collaborates with the student to design visually appealing courses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Course Design Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a course name and a brief description as input, and generates a visually appealing course design and a detailed outline for the course.\\\",\\n\\\"function_name\\\": \\\"design_course\\\",\\n\\\"input_args\\\": [\\\"course_name\\\", \\\"course_description\\\"],\\n\\\"return\\\": \\\"A dictionary with the course outline and the design id.\\\",\\n\\\"depend\\\": \\\"Canva's Design API, OpenAI's GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "a technical recruiters who specialize in software development hiring", "synthesized text": "\"{\\n\\\"name\\\": \\\"Resume Screening Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a path to a resume file as input, extracts the text from the file, and uses a pre-trained NER model to identify and return the technical skills found in the resume.\\\",\\n\\\"function_name\\\": \\\"extract_skills\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the resume file.\\\"},\\n\\\"return\\\": \\\"A list of technical skills found in the resume.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\", \\\"PyPDF2\\\"], \\\"machine learning models\\\": [\\\"dslim/bert-base-NER\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An Australian taxi driver who knows her routes like the back of her hand.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traffic Information Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the optimal route between two locations based on real-time traffic conditions.\\\",\\n\\\"function_name\\\": \\\"get_optimal_route\\\",\\n\\\"input_args\\\": {\\n    \\\"start_location\\\": \\\"The starting point of the route. Should be a string in the format accepted by Google Maps API, e.g., 'Sydney, NSW'\\\",\\n    \\\"destination\\\": \\\"The destination point of the route. Should be a string in the format accepted by Google Maps API, e.g., 'Melbourne, VIC'\\\"\\n},\\n\\\"return\\\": \\\"A string representing the best route based on current traffic conditions.\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a business owner in South Africa who values privacy", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Encrypted File Storage\\\",\\n  \\\"description\\\": \\\"This interface encrypts a file from a source path and stores the encrypted file at a specified path.\\\",\\n  \\\"function_name\\\": \\\"encrypt_file\\\",\\n  \\\"input_args\\\": {\\n    \\\"source_file_path\\\": \\\"Path to the file that needs to be encrypted.\\\",\\n    \\\"encrypted_file_path\\\": \\\"Path where the encrypted file will be stored.\\\"\\n  },\\n  \\\"return\\\": \\\"Status message indicating whether the file was successfully encrypted and stored.\\\",\\n  \\\"depend\\\": \\\"Python Cryptography Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An early riser who enjoys physical work.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Post Filter Interface\\\",\\n\\\"description\\\": \\\"This interface filters job posts based on user's preferences using Indeed Job Search API. It enables users to find jobs that match their preferences without manually searching and filtering.\\\",\\n\\\"function_name\\\": \\\"get_relevant_jobs\\\",\\n\\\"input_args\\\": {\\n\\\"job_type\\\": \\\"The type of job the user is interested in, such as 'fulltime', 'parttime', etc.\\\",\\n\\\"location\\\": \\\"The location where the user wants to work, such as 'New York City', 'San Francisco', etc.\\\",\\n\\\"keyword\\\": \\\"A keyword that the user wants to match in the job posts, such as 'early riser', 'physical work' etc.\\\"\\n},\\n\\\"return\\\": \\\"A list of job titles that match the user's preferences.\\\",\\n\\\"depend\\\": \\\"Indeed Job Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow R programmer who frequently shares new tips and tricks for data visualization using ggplot2", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the ggplot2 package from R to create a scatterplot from a pandas DataFrame. The plot is saved as a .png file.\\\",\\n\\\"function_name\\\": \\\"ggplot2_plot\\\",\\n\\\"input_args\\\": {\\n    \\\"dataframe\\\": \\\"A pandas DataFrame containing the data to be plotted.\\\",\\n    \\\"x_var\\\": \\\"A string specifying the column in the DataFrame to be used as the x variable.\\\",\\n    \\\"y_var\\\": \\\"A string specifying the column in the DataFrame to be used as the y variable.\\\",\\n    \\\"aes\\\": \\\"An optional string specifying an aesthetic argument for the plot, such as color, size, or shape.\\\"\\n},\\n\\\"return\\\": \\\"The path to the saved png file of the plot.\\\",\\n\\\"depend\\\": \\\"This function leverages the rpy2 library to run R code within Python, and uses the ggplot2 package from R for data visualization.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young civil engineer working in a prestigious engineering firm, experiencing the challenges of starting a career in the field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Structural Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes the number of elements, number of nodes, stiffness of each element, the node number for each element, and the forces applied to each node, and returns the displacement of each node and the reactions.\\\",\\n\\\"function_name\\\": \\\"structural_analysis\\\",\\n\\\"input_args\\\": {\\n    \\\"num_elements\\\": \\\"Number of elements in the structure\\\",\\n    \\\"num_nodes\\\": \\\"Number of nodes in the structure\\\",\\n    \\\"stiffness\\\": \\\"Array of stiffness matrices for each element\\\",\\n    \\\"element_nodes\\\": \\\"Array of node numbers for each element\\\",\\n    \\\"forces\\\": \\\"Array of external forces applied to each node\\\"\\n    },\\n\\\"return\\\": {\\n    \\\"Displacements\\\": \\\"Array of displacements for each node\\\",\\n    \\\"Reactions\\\": \\\"Array of reactions for each node\\\"\\n    },\\n\\\"depend\\\": [\\\"numpy\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A defense contractor working on missile guidance systems using signal processing", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Radar Signal Processing Interface\\\",\\n  \\\"description\\\": \\\"This interface processes raw radar signal data by applying a Hamming window, Fast Fourier Transform (FFT), and a Highpass filter. The user only needs to input the path to a file containing the raw signal data, and the interface will return the processed signal data.\\\",\\n  \\\"function_name\\\": \\\"process_signal_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_file\\\": \\\"The path to a file containing the raw signal data to be processed.\\\"\\n  },\\n  \\\"return\\\": \\\"The processed signal data as a numpy array.\\\",\\n  \\\"depend\\\": \\\"Python's numpy and scipy.signal libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager leading a community-driven initiative to implement solar power in local businesses", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Solar Potential Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface provides estimates of the energy production and cost of energy of grid-connected photovoltaic energy systems throughout the world. It uses the PVWatts API for the calculations.\\\",\\n  \\\"function_name\\\": \\\"get_pv_system_estimates\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"A string representing the location of the PV system\\\",\\n    \\\"system_capacity\\\": \\\"A float representing the system capacity in kW\\\",\\n    \\\"array_type\\\": \\\"An integer representing the type of array. 0 for fixed open rack, 1 for fixed roof mount, 2 for 1-axis tracking, 3 for 1-axis backtracking, 4 for 2-axis tracking\\\",\\n    \\\"tilt\\\": \\\"A float representing the tilt of the array in degrees\\\",\\n    \\\"azimuth\\\": \\\"A float representing the azimuth angle of the array in degrees\\\",\\n    \\\"system_losses\\\": \\\"A float representing the system losses in percentage\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary containing estimates of AC annual energy production in kWh, capacity factor, monthly energy production etc.\\\",\\n  \\\"depend\\\": \\\"The function depends on the requests library for making HTTP requests and the PVWatts API for solar power estimates\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student majoring in computer science, unclear about his future leadership potential", "synthesized text": "\"{\\n\\\"name\\\": \\\"Leadership Score Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to predict a leadership score based on a student's GPA, number of leadership positions held, and number of team projects.\\\",\\n\\\"function_name\\\": \\\"predict_leadership_score\\\",\\n\\\"input_args\\\": [\\\"gpa\\\", \\\"num_leadership_positions\\\", \\\"num_team_projects\\\"],\\n\\\"return\\\": \\\"Estimated leadership score\\\",\\n\\\"depend\\\": \\\"A pre-trained machine learning model ('leadership_score_model.pkl'), sklearn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A web hosting provider who offers specialized Laravel hosting solutions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Laravel Deployment Interface\\\",\\n  \\\"description\\\": \\\"This interface automates the process of deploying Laravel applications. It clones the desired branch of a git repository, installs the dependencies using Composer, and sets up the application using Artisan.\\\",\\n  \\\"function_name\\\": \\\"deploy_laravel_application\\\",\\n  \\\"input_args\\\": {\\n    \\\"git_repo_url\\\": \\\"The URL of the git repository to clone.\\\",\\n    \\\"branch\\\": \\\"The branch to clone.\\\",\\n    \\\"web_dir\\\": \\\"The path to the web directory on the server.\\\",\\n    \\\"ssh_user\\\": \\\"The SSH username.\\\",\\n    \\\"ssh_key_path\\\": \\\"The path to the SSH key.\\\"\\n  },\\n  \\\"return\\\": \\\"A string indicating whether the deployment was successful.\\\",\\n  \\\"depend\\\": \\\"Git, Composer, PHP, Artisan, os, subprocess\\\"\\n}\"", "description": "tool development"}
{"input persona": "A São Toméan environmental economist with a focus on blue economy", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Sea Surface Temperature Retrieval Interface\\\",\\n  \\\"description\\\": \\\"An interface that retrieves the sea surface temperature for a specified location from the NOAA's ERDDAP server.\\\",\\n  \\\"function_name\\\": \\\"get_sst\\\",\\n  \\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\"],\\n  \\\"return\\\": \\\"Sea surface temperature as a float\\\",\\n  \\\"depend\\\": \\\"netCDF4 library, NOAA's ERDDAP server\\\"\\n}\"", "description": "tool development"}
{"input persona": "a soldier who served in the 99th Brigade in the British Army.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Battlefield Weather Forecast Interface\\\",\\n  \\\"description\\\": \\\"An interface that returns the current weather conditions for a given location. Useful for soldiers to quickly access weather information in their current location or a location they are moving to.\\\",\\n  \\\"function_name\\\": \\\"get_battlefield_weather\\\",\\n  \\\"input_args\\\": {\\n    \\\"lat\\\": \\\"Latitude of the location\\\",\\n    \\\"lon\\\": \\\"Longitude of the location\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"Temperature\\\": \\\"Current temperature at the location\\\",\\n    \\\"Humidity\\\": \\\"Current humidity at the location\\\",\\n    \\\"Weather Description\\\": \\\"Brief description of the current weather\\\"\\n  },\\n  \\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An architect who admires Qatari architectural achievements and supports the country's vision for the World Cup", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Modeling Interface\\\",\\n\\\"description\\\": \\\"This interface takes a set of 2D images of a building and returns a 3D point cloud of the building.\\\",\\n\\\"function_name\\\": \\\"images_to_pointcloud\\\",\\n\\\"input_args\\\": [\\\"images_path\\\"],\\n\\\"return\\\": \\\"Numpy array of 3D points representing the point cloud\\\",\\n\\\"depend\\\": \\\"Open3D library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Privileged, single, and independent person with no intentions of having children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Personalized Event Recommendation\\\",\\n\\\"description\\\": \\\"This interface uses the Eventbrite API to provide personalized event recommendations based on the user's interests. The user needs to input their city and a list of categories they are interested in, and the function will return a list of events, each represented as a dictionary with the event's name and URL.\\\",\\n\\\"function_name\\\": \\\"get_personalized_events\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"categories\\\"],\\n\\\"return\\\": \\\"List of dictionaries, each containing an 'name' and 'url' of an event\\\",\\n\\\"depend\\\": \\\"Eventbrite API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young family with kids who love searching for hidden treasures at the garage sales", "synthesized text": "\"{\\n\\\"name\\\": \\\"Garage Sale Finder Interface\\\",\\n\\\"description\\\": \\\"This interface uses Yelp API to return the top-rated garage sales in the given city or zipcode. It provides the name, rating, and address of each garage sale.\\\",\\n\\\"function_name\\\": \\\"get_top_rated_garage_sales\\\",\\n\\\"input_args\\\": \\\"city_or_zip\\\",\\n\\\"return\\\": \\\"A list of dictionaries with each dictionary containing the name, rating, and address of a garage sale.\\\",\\n\\\"depend\\\": \\\"requests library, Yelp API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud Arabic-speaking Moroccan-American woman whose name is Nezha", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Arabic Text to Speech Interface\\\",\\n  \\\"description\\\": \\\"Converts input Arabic text into spoken text (audio file) using Google Text-to-Speech.\\\", \\n  \\\"function_name\\\": \\\"arabic_text_to_speech\\\",\\n  \\\"input_args\\\": {\\\"text\\\": \\\"string\\\", \\\"filename\\\": \\\"string\\\"},\\n  \\\"return\\\": {\\\"filename\\\": \\\"string\\\"},\\n  \\\"depend\\\": {\\\"Python libraries\\\": [\\\"gTTS\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A university registrar responsible for maintaining student records and coordinating course enrollment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Course Enrollment Interface\\\",\\n\\\"description\\\": \\\"An interface for managing student records and coordinating course enrollment in a university setting. It provides functions to add/remove students, add/remove courses, and enroll/drop students from courses.\\\",\\n\\\"function_names\\\": [\\\"create_db\\\", \\\"add_student\\\", \\\"remove_student\\\", \\\"add_course\\\", \\\"remove_course\\\", \\\"enroll_student\\\", \\\"drop_student\\\"],\\n\\\"input_args\\\": [\\\"name\\\", \\\"id\\\", \\\"code\\\", \\\"capacity\\\"],\\n\\\"return\\\": [\\\"None\\\"],\\n\\\"depend\\\": [\\\"sqlite3\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A pair of identical twins who are willing to participate in twin studies to contribute to the advancement of scientific knowledge", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Variant Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface compares the genetic variants of a pair of twins by taking the paths to their genetic sequence files as input and returning a comparison of their genetic variants.\\\",\\n\\\"function_name\\\": \\\"compare_genetic_variants\\\",\\n\\\"input_args\\\": [\\\"path_to_twin1_seq\\\", \\\"path_to_twin2_seq\\\"],\\n\\\"return\\\": \\\"List of tuples, each containing the position of the difference and the different bases\\\",\\n\\\"depend\\\": [\\\"Biopython library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A regular gambler who enjoys the immersive experiences provided by VR gambling games", "synthesized text": "\"{\\n  \\\"name\\\": \\\"VR Gambling Game Enhancement Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses GPT-3 to generate immersive narratives and decision-making prompts for VR gambling games based on the current game state.\\\",\\n  \\\"function_name\\\": \\\"enhance_gaming_experience\\\",\\n  \\\"input_args\\\": {\\n    \\\"game_state\\\": \\\"A text description of the current situation in the game.\\\"\\n  },\\n  \\\"return\\\": \\\"A text generated by GPT-3 model providing an immersive narrative or decision-making prompt.\\\",\\n  \\\"depend\\\": \\\"OpenAI's GPT-3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young Indigenous student preparing to study early childhood education.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Reading Level Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Flesch\\u2013Kincaid readability tests to estimate the readability level of a piece of English text. This can be useful for teachers, parents, librarians, and others to judge the readability level of various books and texts.\\\",\\n\\\"function_name\\\": \\\"assess_reading_level\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": {\\\"Flesch Reading Ease\\\": \\\"float\\\", \\\"Flesch-Kincaid Grade Level\\\": \\\"float\\\"},\\n\\\"depend\\\": [\\\"textstat library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a front-end developer who favors the BEM (Block Element Modifier) methodology for CSS structuring", "synthesized text": "\"{\\n\\\"name\\\": \\\"CSS Class Name Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a BEM compliant CSS class name based on the block, element, and modifier inputs.\\\",\\n\\\"function_name\\\": \\\"generate_bem_class_name\\\",\\n\\\"input_args\\\": {\\n    \\\"block\\\": \\\"The Block part of the BEM methodology.\\\",\\n    \\\"element\\\": \\\"The Element part of the BEM methodology.\\\",\\n    \\\"modifier\\\": \\\"The Modifier part of the BEM methodology.\\\"\\n},\\n\\\"return\\\": \\\"A string representing the BEM compliant CSS class name.\\\",\\n\\\"depend\\\": \\\"Python's built-in string concatenation.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fellow Nollywood actor who guest-starred in one of Allahbura's films", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nollywood Actor Filmography Interface\\\",\\n\\\"description\\\": \\\"An interface to the IMDb movie database that returns the filmography of a given actor. The function uses the IMDbPY Python library to search for the actor and retrieve their filmography.\\\",\\n\\\"function_name\\\": \\\"get_actor_filmography\\\",\\n\\\"input_args\\\": \\\"actor_name - The name of the actor to search for.\\\",\\n\\\"return\\\": \\\"A list of film titles that the actor has appeared in.\\\",\\n\\\"depend\\\": \\\"IMDbPY Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A maritime journalist who believes sea freight is more sustainable than air freight", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Ship Tracking Interface\\\",\\n\\\"description\\\": \\\"This interface returns real-time details about a ship's location, status, speed, etc. using the MMSI or IMO number of the ship.\\\",\\n\\\"function_name\\\": \\\"get_ship_details\\\",\\n\\\"input_args\\\": \\\"mmsi_or_imo: The MMSI or IMO number of the ship.\\\",\\n\\\"return\\\": \\\"A dictionary with details about the ship's current information. If the MMSI or IMO number is incorrect or the API call fails, it returns an error message.\\\",\\n\\\"depend\\\": \\\"This function leverages the MarineTraffic API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A current client of Louis Y. Fishman", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real Estate Market Data Interface\\\",\\n\\\"description\\\": \\\"Fetches real estate market data from the Zillow API. Returns a dictionary of property details.\\\",\\n\\\"function_name\\\": \\\"get_property_details\\\",\\n\\\"input_args\\\": \\\"address - The address of the property\\\",\\n\\\"return\\\": \\\"Dictionary containing property details including estimated price, rent estimates, and other property details.\\\",\\n\\\"depend\\\": \\\"Python's requests and xml.etree.ElementTree libraries, Zillow API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An overwhelmed homeowner seeking guidance on how to declutter and create a minimalist home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Organization Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model to classify images of rooms and provide specific decluttering and organization recommendations.\\\",\\n\\\"function_name\\\": \\\"declutter_recommendation\\\",\\n\\\"input_args\\\": \\\"image_url\\\",\\n\\\"return\\\": \\\"A string containing a specific recommendation on how to declutter and organize the room.\\\",\\n\\\"depend\\\": \\\"HuggingFace model 'huggingface/prunebert-base-uncased-6-finepruning', Python libraries: PIL, requests, io, torchvision, huggingface_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A frustrated tour guide who values customer safety and is considering whistleblowing on negligent practices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Safety Report Submission Interface\\\",\\n\\\"description\\\": \\\"An interface for sending an email to report safety issues. The user only needs to input the subject and body of the message, and our interface will send an email to the appropriate authority.\\\",\\n\\\"function_name\\\": \\\"send_email\\\",\\n\\\"input_args\\\": {\\\"subject\\\": \\\"string\\\", \\\"body\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"None. This function sends an email and does not return any value.\\\",\\n\\\"depend\\\": \\\"Python's smtplib and email libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一位在都市里面忙碌生活，偶尔喜欢静下心来听音乐沉浸在另一个世界的白领。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u97f3\\u4e50\\u63a8\\u8350\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u6839\\u636e\\u7528\\u6237\\u559c\\u6b22\\u7684\\u97f3\\u4e50\\u7c7b\\u578b\\uff0c\\u8fd4\\u56de\\u4e00\\u4e9b\\u63a8\\u8350\\u7684\\u6b4c\\u66f2\\\",\\n\\\"function_name\\\": \\\"get_music_recommendations\\\",\\n\\\"input_args\\\": \\\"genre: \\u7528\\u6237\\u559c\\u6b22\\u7684\\u97f3\\u4e50\\u7c7b\\u578b\\uff0c\\u662f\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\\",\\n\\\"return\\\": \\\"\\u4e00\\u7ec4\\u63a8\\u8350\\u7684\\u6b4c\\u66f2\\uff0c\\u6bcf\\u4e2a\\u5143\\u7d20\\u90fd\\u662f\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\\",\\n\\\"depend\\\": \\\"\\u4f7f\\u7528\\u4e86Spotipy\\u5e93\\u4ee5\\u53caSpotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An academic journal editor responsible for reviewing and publishing the mathematician's papers on mathematical applications in quantum mechanics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mathematical Expression Simplifier Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies complex mathematical expressions using symbolic computation.\\\",\\n\\\"function_name\\\": \\\"simplify_math_expression\\\",\\n\\\"input_args\\\": \\\"expression - a string representing a complex mathematical expression\\\",\\n\\\"return\\\": \\\"a string representing the simplified version of the input mathematical expression\\\",\\n\\\"depend\\\": \\\"sympy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Un experto en gestión de proyectos con experiencia en el desarrollo de aplicaciones móviles que ofrece orientación sobre cómo mejorar la eficiencia en el diseño de la interfaz", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface de An\\u00e1lisis de Usabilidad de la Interfaz de Usuario\\\",\\n\\\"description\\\": \\\"Una interfaz que utiliza la API de Apptentive para analizar la usabilidad de una aplicaci\\u00f3n m\\u00f3vil y proporcionar recomendaciones de mejora basadas en las m\\u00e9tricas de usabilidad.\\\",\\n\\\"function_name\\\": \\\"analyze_usability\\\",\\n\\\"input_args\\\": [\\\"app_identifier\\\"],\\n\\\"return\\\": [\\\"lista de recomendaciones de mejora\\\"],\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Apptentive API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A senior data scientist who guides and advises the data scientist on statistical genetics research and career development", "synthesized text": "\"{\\n  \\\"_id\\\": \\\"chr7:g.140453134T>C\\\",\\n  \\\"_version\\\": 1,\\n  \\\"cadd\\\": {\\n    \\\"_license\\\": \\\"http://goo.gl/bkpNhq\\\",\\n    \\\"alt\\\": \\\"C\\\",\\n    \\\"anc\\\": \\\"T\\\",\\n    \\\"annotype\\\": [\\n      \\\"CodingTranscript\\\",\\n      \\\"Intergenic\\\",\\n      \\\"Transcript\\\"\\n    ],\\n    ...\\n  },\\n  \\\"clinvar\\\": {\\n    ...\\n  },\\n  \\\"dbnsfp\\\": {\\n    ...\\n  },\\n  \\\"dbsnp\\\": {\\n    ...\\n  },\\n  \\\"wellderly\\\": {\\n    ...\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A person named Rajabi who is curious about her/his name origin and commonness.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Name Origin and Popularity Interface\\\",\\n\\\"description\\\": \\\"This interface returns the origin and popularity of a given name based on the 'Behind The Name' and 'Agify.io' APIs.\\\",\\n\\\"function_name\\\": \\\"name_origin_and_popularity\\\",\\n\\\"input_args\\\": {\\n\\\"name\\\": \\\"The name of the person\\\",\\n\\\"country\\\": \\\"The country where the person lives\\\"\\n},\\n\\\"return\\\": {\\n\\\"origin\\\": \\\"The origin and history of the name\\\",\\n\\\"popularity\\\": \\\"The popularity of the name in the specified country\\\"\\n},\\n\\\"depend\\\": \\\"Uses the 'Behind The Name' and 'Agify.io' APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long-time patio lover and frequent outdoors entertainer", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weather Forecast Interface\\\",\\n  \\\"description\\\": \\\"This interface provides the weather forecast for the next 5 days based on the city input by the user. It leverages the OpenWeatherMap API.\\\",\\n  \\\"function_name\\\": \\\"get_weather_forecast\\\",\\n  \\\"input_args\\\": [\\\"city\\\"],\\n  \\\"return\\\": \\\"A dictionary where each key-value pair corresponds to a datetime and its associated weather forecast. The forecast includes information such as temperature, humidity, and pressure.\\\",\\n  \\\"depend\\\": \\\"requests, json, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A quaint bakery owner with ancestral ties to the English village", "synthesized text": "\"{\\n\\\"name\\\": \\\"Old English Recipe Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface takes an old English recipe and converts the measurements to modern day measurements\\\",\\n\\\"function_name\\\": \\\"old_to_modern_measurements\\\",\\n\\\"input_args\\\": \\\"old_recipe - a string containing the old recipe with old measurements\\\",\\n\\\"return\\\": \\\"A string containing the recipe with the measurements converted to modern day equivalents\\\",\\n\\\"depend\\\": \\\"Python's built-in 're' library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A veteran break dance battle judge who shares insights and techniques for evaluating dancers' performances", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dance Moves Recognition Interface\\\",\\n\\\"description\\\": \\\"Interface to recognize dance moves from a dance video file. It returns a list of recognized dance moves.\\\",\\n\\\"function_name\\\": \\\"recognize_dance_moves\\\",\\n\\\"input_args\\\": [\\\"video_path\\\"],\\n\\\"return\\\": \\\"A list of recognized dance moves\\\",\\n\\\"depend\\\": \\\"Python libraries: cv2, numpy, tensorflow; Machine Learning Models: pose_estimation_model.h5, dance_moves_model.h5\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Saudi Arabian student studying architecture who can recommend the best door design and materials for the dormitory", "synthesized text": "\"{\\n\\\"name\\\": \\\"Door Design Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to recommend the best door design and materials based on the architectural style, material preference, and functional requirements.\\\",\\n\\\"function_name\\\": \\\"recommend_door_design\\\",\\n\\\"input_args\\\": {\\n    \\\"style\\\": \\\"The architectural style of the building (e.g., 'Modern', 'Traditional', 'Gothic').\\\",\\n    \\\"material\\\": \\\"The preferred material for the door (e.g., 'Wood', 'Steel', 'Glass').\\\",\\n    \\\"requirements\\\": \\\"A list of functional requirements (e.g., ['Soundproof', 'Fire Resistant', 'Insulated']).\\\"\\n},\\n\\\"return\\\": \\\"A string representing the recommended door design and materials (e.g., 'Modern Steel Door with Soundproof and Insulated Design').\\\",\\n\\\"depend\\\": \\\"A pre-trained machine learning model (e.g., a Random Forest Classifier trained on architectural styles, materials, and functional requirements).\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tech enthusiast arguing that technological advancements have improved communication and language skills", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates a given text from one language to another using the HuggingFace transformers library.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": {\\n    \\\"input_text\\\": \\\"Text to be translated\\\",\\n    \\\"source_lang\\\": \\\"Source language of the input text\\\",\\n    \\\"target_lang\\\": \\\"Target language for the translation\\\"\\n},\\n\\\"return\\\": \\\"Translated text in the target language\\\",\\n\\\"depend\\\": \\\"HuggingFace transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer responsible for maintaining the rover's operating system and ensuring smooth communication with mission control", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rover Command Interface\\\",\\n\\\"description\\\": \\\"An interface to send commands to the rover and receive responses. It handles communication with the rover's operating system.\\\",\\n\\\"function_name\\\": \\\"send_rover_command\\\",\\n\\\"input_args\\\": {\\n    \\\"command\\\": \\\"The command to be sent to the rover.\\\"\\n},\\n\\\"return\\\": \\\"The response from the rover after processing the command.\\\",\\n\\\"depend\\\": \\\"Web API to communicate with the rover's operating system.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former shot put competitor who misses his golden days", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Activity Recognition Interface\\\",\\n  \\\"description\\\": \\\"An interface to analyze shot put form using PoseNet, a pre-trained model from TensorFlow.js, that detects human figures in images and videos so we can analyze their pose.\\\",\\n  \\\"function_name\\\": \\\"analyze_shot_put_form\\\",\\n  \\\"input_args\\\": \\\"video_path\\\",\\n  \\\"return\\\": \\\"A list of JSON objects, where each JSON object contains the keypoints and their corresponding scores for each frame in the video.\\\",\\n  \\\"depend\\\": \\\"tensorflow, tf_pose, cv2\\\"\\n}\"", "description": "tool development"}
{"input persona": "a 40-year-old Hanoi resident and taxi driver", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traffic Status Interface\\\",\\n\\\"description\\\": \\\"This interface provides traffic status between two locations including the travel distance and time.\\\",\\n\\\"function_name\\\": \\\"get_traffic_status\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"the distance and duration of the route, or a message if no route is found\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Google Maps Directions API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A university professor who specializes in the field of the researcher's study and provides expertise for verifying sources", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Source Verification Interface\\\",\\n  \\\"description\\\": \\\"Interface to verify the credibility of academic sources using Google Scholar\\\",\\n  \\\"function_name\\\": \\\"get_source_details\\\",\\n  \\\"input_args\\\": {\\n    \\\"title\\\": \\\"Title of the academic source to be verified\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"title\\\": \\\"Title of the academic source\\\",\\n    \\\"authors_info\\\": \\\"Authors and publication info of the source\\\",\\n    \\\"snippet\\\": \\\"Snippet of the source content\\\",\\n    \\\"citation_info\\\": \\\"Information about how many times the source has been cited\\\"\\n  },\\n  \\\"depend\\\": [\\\"requests\\\", \\\"bs4\\\", \\\"Google Scholar API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a nostalgic local resident born and raised in Ahmedabad", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Weather Data Interface\\\", \\n\\\"description\\\": \\\"This interface fetches historical weather data for Ahmedabad city using Visual Crossing's API. Users need to input the date for which they wish to know the weather, and the interface returns the weather conditions on that day in Ahmedabad.\\\", \\n\\\"function_name\\\": \\\"get_historical_weather\\\", \\n\\\"input_args\\\": \\\"date - The date for which the user wants to fetch weather data. The date should be in 'dd-mm-yyyy' format.\\\",\\n\\\"return\\\": \\\"A dictionary containing the average temperature and weather conditions in Ahmedabad on the specified date.\\\",\\n\\\"depend\\\": \\\"Python's requests library for making HTTP requests, datetime library for date manipulation and Visual Crossing's Weather Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young football fan with great passion and admiration for Troy Jules", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that scrapes and returns football player statistics from ESPN\\\",\\n\\\"function_name\\\": \\\"scrape_player_stats\\\",\\n\\\"input_args\\\": {\\\"player_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"player_stats\\\": \\\"dictionary\\\"},\\n\\\"depend\\\": {\\\"Python libraries\\\": [\\\"BeautifulSoup\\\", \\\"requests\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A distinguished professor in the field of computer science who guided and inspired Daniel throughout his academic career", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface that uses a BERT model from HuggingFace to calculate the similarity between two pieces of text, which can be used to detect potential plagiarism.\\\",\\n  \\\"function_name\\\": \\\"calculate_similarity\\\",\\n  \\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n  \\\"return\\\": \\\"A similarity score between 0 and 1, where a higher score indicates greater similarity and potential plagiarism.\\\",\\n  \\\"depend\\\": {\\n    \\\"libraries\\\": [\\\"torch\\\", \\\"transformers\\\"],\\n    \\\"web_apis\\\": [],\\n    \\\"ml_models\\\": [\\\"bert-base-uncased from HuggingFace\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a believer in prayer and miracles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prayer Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface notifies the user when it's time for prayer. The user inputs the times for the prayers and the system will remind them at the specified times using the system's default text-to-speech functionality.\\\",\\n\\\"function_name\\\": \\\"prayer_reminder\\\",\\n\\\"input_args\\\": {\\n    \\\"fajr_time\\\": \\\"String representation of the time for Fajr prayer in 24-hour format\\\",\\n    \\\"dhuhr_time\\\": \\\"String representation of the time for Dhuhr prayer in 24-hour format\\\",\\n    \\\"asr_time\\\": \\\"String representation of the time for Asr prayer in 24-hour format\\\",\\n    \\\"maghrib_time\\\": \\\"String representation of the time for Maghrib prayer in 24-hour format\\\",\\n    \\\"isha_time\\\": \\\"String representation of the time for Isha prayer in 24-hour format\\\"\\n},\\n\\\"return\\\": \\\"No return value. The function operates indefinitely until manually stopped, providing verbal reminders at the specified prayer times.\\\",\\n\\\"depend\\\": \\\"Python's built-in datetime and os libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cousin who is a classically trained pianist and often joins in jam sessions, adding a unique dynamic to the music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chord Progression Generator\\\",\\n\\\"description\\\": \\\"Generates a chord progression in a specified key using the 'mingus' Python library.\\\",\\n\\\"function_name\\\": \\\"generate_chord_progression\\\",\\n\\\"input_args\\\": [\\\"key\\\"],\\n\\\"return\\\": \\\"A list of chords forming a progression in the specified key.\\\",\\n\\\"depend\\\": \\\"Python library - mingus\\\"\\n}\"", "description": "tool development"}
{"input persona": "A scout in a Major League Baseball (MLB) Team", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Stats Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves a player's current season stats from the MLB StatsAPI. User inputs the player's ID, the function returns the player's current season stats.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": \\\"player_id\\\",\\n\\\"return\\\": \\\"Dictionary with player's name as key and his current season stats as value.\\\",\\n\\\"depend\\\": \\\"requests library, MLB StatsAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "a climatology student who admires Bjorn Stevens for his professional achievements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the weather forecast for a given city using the OpenWeatherMap API. It returns the forecast for the next few days, including the date, temperature, and a description of the weather.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"string\\\"},\\n\\\"return\\\": {\\n    \\\"city\\\": \\\"string\\\",\\n    \\\"forecast\\\": [{\\\"date\\\": \\\"string\\\", \\\"temp\\\": \\\"float\\\", \\\"weather\\\": \\\"string\\\"}]\\n},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"OpenWeatherMap API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A military veteran who is open to learning about alternative approaches to conflict resolution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conflict Resolution Text Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained NER model from Huggingface to identify the entities involved in a conflict and their roles/actions from a given text.\\\",\\n\\\"function_name\\\": \\\"conflict_resolution_analysis\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"List of identified entities with their roles\\\",\\n\\\"depend\\\": \\\"Huggingface Transformer library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physics major who studies the physics behind the sweeping techniques in curling", "synthesized text": "\"{\\n\\\"name\\\": \\\"Friction Calculation Interface\\\",\\n\\\"description\\\": \\\"Calculate the friction between the curling stone and the ice surface based on the input parameters\\\",\\n\\\"function_name\\\": \\\"calculate_friction\\\",\\n\\\"input_args\\\": {\\n    \\\"mass\\\": \\\"The mass of the curling stone in kilograms (kg)\\\",\\n    \\\"normal_force\\\": \\\"The normal force in newtons (N)\\\",\\n    \\\"coefficient_of_friction\\\": \\\"The coefficient of friction, a unitless value\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Weight\\\": \\\"The weight of the curling stone in newtons (N)\\\",\\n    \\\"Friction Force\\\": \\\"The friction force in newtons (N)\\\",\\n    \\\"Acceleration due to Friction\\\": \\\"The acceleration due to friction in meters per second squared (m/s\\u00b2)\\\"\\n},\\n\\\"depend\\\": \\\"Python library: scipy.constants\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow lab technician from a different institution, sharing tips and tricks for identifying bacterial contaminants", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bacterial Contaminant Identification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained image classification model from TensorFlow Hub to predict the class of bacteria in a given image.\\\",\\n\\\"function_name\\\": \\\"predict_bacteria\\\",\\n\\\"input_args\\\": {\\\"path_to_img\\\": \\\"Path to the bacterial colony image file.\\\"},\\n\\\"return\\\": \\\"Predicted class of the bacteria in the image.\\\",\\n\\\"depend\\\": {\\\"tensorflow\\\": \\\"2.6.0\\\", \\\"tensorflow-hub\\\": \\\"0.12.0\\\", \\\"Web API\\\": \\\"https://tfhub.dev/google/imagenet/mobilenet_v2_130_224/classification/4\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A science-fiction novelist who often discusses potential pandemic scenarios", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pandemic Scenario Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the progression of a pandemic based on the SEIR model.\\\",\\n\\\"function_name\\\": \\\"predict_pandemic_scenario\\\",\\n\\\"input_args\\\": {\\n    \\\"N\\\": \\\"Total population\\\",\\n    \\\"I0\\\": \\\"Initial number of infected individuals\\\",\\n    \\\"beta\\\": \\\"Infection rate\\\",\\n    \\\"gamma\\\": \\\"Recovery rate\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing lists of susceptible, exposed, infected, and recovered individuals over time.\\\",\\n\\\"depend\\\": \\\"Scipy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "台灣退休教師，在潘家慶教授任教時期曾是同事", "synthesized text": "\"{\\n\\\"name\\\": \\\"Taiwan Earthquake Information Interface\\\",\\n\\\"description\\\": \\\"This interface can help users get detailed earthquake information in Taiwan on a specific date by simply inputting the date. The underlying API is from Taiwan's Central Weather Bureau.\\\",\\n\\\"function_name\\\": \\\"get_earthquake_info\\\",\\n\\\"input_args\\\": \\\"date\\\",\\n\\\"return\\\": \\\"Earthquake report in a text format\\\",\\n\\\"depend\\\": \\\"requests library, Central Weather Bureau's Earthquake Report API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who couldn't care less about Wi-Fi technology or industry awards.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wi-Fi Signal Strength Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the signal strength of a specified Wi-Fi network.\\\",\\n\\\"function_name\\\": \\\"get_wifi_signal_strength\\\",\\n\\\"input_args\\\": {\\n    \\\"ssid\\\": \\\"The SSID (name) of the Wi-Fi network.\\\"\\n},\\n\\\"return\\\": \\\"The signal strength of the specified network or a message indicating that the network was not found.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"wifi\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A graduate student researching the intersection of science fiction literature and political ideologies", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Book Recommendations Interface\\\",\\n  \\\"description\\\": \\\"Using Goodreads API and Gensim LDA to fetch books of a specific genre and topic\\\",\\n  \\\"function_name\\\": \\\"get_books_on_topic\\\",\\n  \\\"input_args\\\": {\\n    \\\"genre\\\": \\\"Genre of the books\\\",\\n    \\\"topic\\\": \\\"Topic to search within the genre\\\",\\n    \\\"num_books\\\": \\\"Number of book recommendations\\\"\\n  },\\n  \\\"return\\\": \\\"List of book recommendations with title, author and description\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"gensim\\\"],\\n    \\\"web API\\\": [\\\"Goodreads API\\\"],\\n    \\\"ML model\\\": [\\\"Latent Dirichlet Allocation\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A pediatric occupational therapist who advocates for accessible and affordable therapy services for all children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Therapy Coverage Checker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check if their insurance coverage includes pediatric occupational therapists in their state. It uses a web API from a healthcare provider database.\\\",\\n\\\"function_name\\\": \\\"get_covered_therapists\\\",\\n\\\"input_args\\\": {\\n    \\\"insurance_provider\\\": \\\"Name of the insurance provider\\\",\\n    \\\"state\\\": \\\"State of residence\\\"\\n},\\n\\\"return\\\": \\\"A list of names of pediatric occupational therapists that accept the specified insurance in the specified state.\\\",\\n\\\"depend\\\": \\\"requests library, Healthcare.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An official from the Bureau of Indian Affairs who advises the curator on matters related to Native American cultural preservation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Artifact Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to analyze and classify historical artifacts based on images.\\\",\\n\\\"function_name\\\": \\\"analyze_artifact\\\",\\n\\\"input_args\\\": \\\"url_to_image\\\",\\n\\\"return\\\": \\\"Analysis and classification of the artifact\\\",\\n\\\"depend\\\": \\\"PIL, requests, io, huggingface\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer actively contributing to open-source projects involving transformer models", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Code Review and Improvement Suggestions Interface\\\",\\n    \\\"description\\\": \\\"This module takes a Python code as input, reviews it using a pre-trained machine learning model, and returns suggestions for improvement.\\\",\\n    \\\"function_name\\\": \\\"review_python_code\\\",\\n    \\\"input_args\\\": [\\\"code\\\"],\\n    \\\"return\\\": \\\"Suggestions for code improvement\\\",\\n    \\\"depend\\\": [\\\"huggingface: EleutherAI/gpt-j-6B\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A budget analyst responsible for monitoring and allocating financial resources for urban development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface for forecasting financial resources for urban development. Users input a CSV file of historical data, and the interface returns a forecast for the next period.\\\",\\n\\\"function_name\\\": \\\"financial_forecast\\\",\\n\\\"input_args\\\": \\\"csv_file\\\",\\n\\\"return\\\": \\\"dataframe with a column for actual values and a column for predicted values\\\",\\n\\\"depend\\\": \\\"Python's pandas and scikit-learn libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A meticulous proof assistant developer, passionate about formal verification and the evolution of proof assistant software.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Proof Verification Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input mathematical claims in the form of equations or inequalities and verifies those claims. It's particularly useful for those interested in formal verification or proof assistants.\\\",\\n\\\"function_name\\\": \\\"verify_math_claim\\\",\\n\\\"input_args\\\": [\\\"lhs\\\", \\\"rhs\\\"],\\n\\\"return\\\": \\\"A string message indicating whether the claim is verified or not.\\\",\\n\\\"depend\\\": [\\\"sympy python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am afflicted with obsessive-compulsive disorder; upon encountering disordered or erroneous text and formatting, I feel compelled to reorganize them meticulously.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Formatting Interface\\\",\\n\\\"description\\\": \\\"This interface formats the input text according to user specified formatting conventions.\\\",\\n\\\"function_name\\\": \\\"format_text\\\",\\n\\\"input_args\\\": {\\n    \\\"input_text\\\": \\\"The text that needs to be formatted.\\\",\\n    \\\"formatting_conventions\\\": \\\"A dictionary containing the formatting conventions to be applied. The keys can be 'remove_extra_spaces', 'to_lowercase', 'to_uppercase', 'replace_tabs', 'remove_punctuation'. The values should be Boolean.\\\"\\n    },\\n\\\"return\\\": \\\"A string of formatted text according to the specified formatting conventions.\\\",\\n\\\"depend\\\": \\\"Python's built-in regex library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a resident of Auden Padariya, who works as a mailman in the local post office", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mail Tracking Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to track the status and location of a package by simply inputting the tracking number.\\\",\\n\\\"function_name\\\": \\\"track_package\\\",\\n\\\"input_args\\\": [\\\"tracking_number\\\"],\\n\\\"return\\\": {\\\"Status\\\": \\\"string\\\", \\\"Location\\\": \\\"string\\\"},\\n\\\"depend\\\": [\\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A high school female athlete who played in the Iowa Girl's State Championship.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a given sports video to extract key performance indicators such as speed, distance covered, and stamina.\\\",\\n\\\"function_name\\\": \\\"analyze_sports_performance\\\",\\n\\\"input_args\\\": \\\"path_to_video - A string representing the path to the video file.\\\",\\n\\\"return\\\": \\\"A dictionary containing key performance indicators.\\\",\\n\\\"depend\\\": \\\"Python libraries: cv2, torch, torchvision. External file: video_analytics.py\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sociologist focusing on poverty studies and has written significant papers about its impact on society", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poverty Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of analyzing poverty data by encapsulating the pandas library. Users input the path to their data file, the column to be analyzed, and the method of analysis, and the interface returns the result of the analysis.\\\",\\n\\\"function_name\\\": \\\"analyze_poverty_data\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"column_name\\\", \\\"method\\\"],\\n\\\"return\\\": \\\"The result of the analysis (a numerical value).\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A multimedia visual artist who uses AR technology in her installations", "synthesized text": "\"{\\n    \\\"name\\\": \\\"AR Model Overlay Interface\\\",\\n    \\\"description\\\": \\\"This interface uses ARCore library to overlay a 3D model over the camera view, creating an Augmented Reality experience.\\\",\\n    \\\"function_name\\\": \\\"overlay_ar_model\\\",\\n    \\\"input_args\\\": [\\\"model_path\\\"],\\n    \\\"return\\\": \\\"A string message indicating that the AR model overlay has started.\\\",\\n    \\\"depend\\\": [\\\"google.ar.core\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mom of three kids who accidentally subscribed to optic technology news, has zero knowledge of photonics, and is quite upset with the overflow of jargon in her mailbox.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Jargon Simplifier Interface\\\",\\n\\\"description\\\": \\\"An interface to simplify complex jargon-filled text into easy-to-understand language.\\\",\\n\\\"function_name\\\": \\\"simplify_jargon\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"Simplified text string\\\",\\n\\\"depend\\\": [\\\"HuggingFace's transformer models\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A resident in the Fox Run community, involved in decision-making and governance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Noise Complaint Management Interface\\\",\\n\\\"description\\\": \\\"An interface to report and manage noise complaints in a community. It takes the details of a noise complaint (date, time, location, description) and stores these details in a cloud-based database.\\\",\\n\\\"function_name\\\": \\\"report_noise_complaint\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"time\\\", \\\"location\\\", \\\"description\\\"],\\n\\\"return\\\": \\\"A string indicating successful reporting of the complaint.\\\",\\n\\\"depend\\\": [\\\"pyrebase\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A South African taxpayer frustrated with government mismanagement", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tax Return Calculator Interface\\\",\\n\\\"description\\\": \\\"Calculates the tax for a given annual income based on the South African tax brackets for the 2021/22 financial year.\\\",\\n\\\"function_name\\\": \\\"calculate_tax\\\",\\n\\\"input_args\\\": {\\\"annual_income\\\": \\\"The total annual income of the user.\\\"},\\n\\\"return\\\": {\\\"tax\\\": \\\"The total tax that the user has to pay for the given financial year.\\\"},\\n\\\"depend\\\": {\\\"python\\\": \\\"\\\"}\\n}\"", "description": "tool development"}
{"input persona": "a former teammate and friend of Ruslan Panteleymonov in the Great Britain gymnastics team", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gymnastics Routine Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface for analyzing a gymnastics routine from a video. The interface uses Pose Estimation libraries to provide feedback about the user's poses and movements.\\\",\\n\\\"function_name\\\": \\\"analyze_gymnastics_routine\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"A list of tuples. Each tuple corresponds to a frame in the video. The first element of the tuple is the pose score, the second element is the keypoint scores, and the third element is the keypoint coordinates.\\\",\\n\\\"depend\\\": \\\"python libraries: cv2, numpy, tensorflow; Pose Estimation libraries: OpenPose or PoseNet\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a nostalgic software engineer who is still enamored with the Lua programming language and Torch, despite the industry's pivot towards Python and PyTorch.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lua to Python Code Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface translates Lua code snippets into Python, leveraging a pretrained language translation model.\\\",\\n\\\"function_name\\\": \\\"lua_to_python\\\",\\n\\\"input_args\\\": \\\"lua_code - a string that contains Lua code\\\",\\n\\\"return\\\": \\\"A string that contains the corresponding Python code\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library and a pretrained language translation model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A driven academic balancing their studies with learning capoeira to relieve stress", "synthesized text": "\"{\\n\\\"name\\\": \\\"Capoeira Move Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to recommend capoeira moves based on the user's skill level and physical condition. The user inputs their skill level and physical condition, and the interface returns a suitable capoeira move for them to practice.\\\",\\n\\\"function_name\\\": \\\"recommend_capoeira_move\\\",\\n\\\"input_args\\\": {\\n    \\\"skill_level\\\": \\\"The user's skill level. Possible values are 'beginner', 'intermediate', and 'advanced'.\\\",\\n    \\\"physical_condition\\\": \\\"The user's physical condition. Possible values are 'tired', 'normal', and 'energetic'.\\\"\\n},\\n\\\"return\\\": \\\"A string representing the recommended capoeira move.\\\",\\n\\\"depend\\\": \\\"Scikit-learn's RandomForestClassifier model, joblib for loading the pre-trained model, and numpy for array manipulations.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An engineering student struggling to understand programming concepts for their robotics project", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Execution and Error Explanation Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a piece of Python code as input, executes it, and provides a simplified explanation if any error occurs.\\\",\\n\\\"function_name\\\": \\\"execute_and_explain_error\\\",\\n\\\"input_args\\\": {\\\"user_code\\\": \\\"A string containing the Python code to be executed.\\\"},\\n\\\"return\\\": \\\"A string stating either that the code was executed successfully, or providing a simplified explanation of the error that occurred.\\\",\\n\\\"depend\\\": \\\"Python's built-in functions, and Large Language Models (LLMs) for error message simplification\\\"\\n}\"", "description": "tool development"}
{"input persona": "a longtime Windows user who disliked the removal of the Start menu.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Windows Start Menu Search\\\",\\n\\\"description\\\": \\\"Simulates the search function of the Windows Start Menu. The user inputs the name of an application or file, and the function returns the most relevant results.\\\",\\n\\\"function_name\\\": \\\"simulate_windows_search\\\",\\n\\\"input_args\\\": {\\\"query\\\": \\\"name of the application or file\\\"},\\n\\\"return\\\": \\\"List of most relevant application or file names\\\",\\n\\\"depend\\\": [\\\"Python's built-in os module\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A reliable medical equipment distributor who provides efficient inventory management and timely deliveries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inventory Management Interface\\\",\\n\\\"description\\\": \\\"An interface to manage inventory data of a medical equipment distributor. It provides functionalities to view current inventory, check for stock shortages, and update inventory after deliveries.\\\",\\n\\\"function_name\\\": [\\\"view_inventory\\\", \\\"check_shortages\\\", \\\"update_inventory\\\"],\\n\\\"input_args\\\": {\\n    \\\"view_inventory\\\": \\\"None\\\",\\n    \\\"check_shortages\\\": \\\"None\\\",\\n    \\\"update_inventory\\\": {\\\"item_id\\\": \\\"Unique identifier of the item\\\", \\\"quantity\\\": \\\"Quantity to add to the current inventory\\\"}\\n},\\n\\\"return\\\": {\\n    \\\"view_inventory\\\": \\\"DataFrame showing the current inventory\\\",\\n    \\\"check_shortages\\\": \\\"DataFrame showing items with quantity less than the reorder level\\\",\\n    \\\"update_inventory\\\": \\\"Updates the inventory file with new quantity for the specified item\\\"\\n},\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A government official responsible for compiling and maintaining accurate statistical data", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Data Cleaning & Outlier Detection Interface\\\",\\n  \\\"description\\\": \\\"This interface loads a dataset from a provided file path, cleans the data by replacing infinite values with NaN and dropping rows with missing values, and then detects and removes outliers using the Isolation Forest algorithm from the scikit-learn library.\\\",\\n  \\\"function_name\\\": \\\"clean_and_remove_outliers\\\",\\n  \\\"input_args\\\": \\\"file_path - path to the csv file containing the data\\\",\\n  \\\"return\\\": \\\"DataFrame - cleaned dataset with outliers removed\\\",\\n  \\\"depend\\\": \\\"Pandas, NumPy, and Scikit-Learn libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Spanish-speaking immigrant in Houston, Texas who is also a parishioner of Our Lady of Guadalupe Church", "synthesized text": "\"{\\n\\\"name\\\": \\\"Church Event Translation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in English text of the event details and returns the Spanish translation. It's particularly useful for Spanish-speaking immigrants who need to understand church events better.\\\",\\n\\\"function_name\\\": \\\"translate_event_details\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"Spanish translation of the input text\\\",\\n\\\"depend\\\": \\\"Google Translate API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow aspiring gamer who shares tips, strategies, and motivation for improvement", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Statistics Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to compare their game statistics with their friends. It uses the gaming statistics provider's web API to fetch the user data.\\\",\\n\\\"function_name\\\": \\\"get_game_stats_comparison\\\",\\n\\\"input_args\\\": {\\n    \\\"game_title\\\": \\\"The title of the game\\\",\\n    \\\"user1\\\": \\\"Username of the first user\\\",\\n    \\\"user2\\\": \\\"Username of the second user\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with usernames as keys and their game statistics as values\\\",\\n\\\"depend\\\": \\\"requests library, Gaming Statistics Provider's Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young college student who is new to Grails and Spring Security, but very interested in learning", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grails Spring Security Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that encapsulates basic operations of authentication and authorization in a Grails application with Spring Security.\\\",\\n\\\"function_name\\\": [\\\"grails_spring_security_authenticate\\\", \\\"grails_spring_security_authorize\\\"],\\n\\\"input_args\\\": [\\\"username\\\", \\\"password\\\", \\\"role\\\"],\\n\\\"return\\\": \\\"Returns whether the user is authenticated and authorized.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"Grails application with Spring Security plugin\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Soy un desarrollador de software con mucha experiencia en la generación de documentos PDF en PHP usando mPDF.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interface de Generaci\\u00f3n de PDF\\\",\\n  \\\"description\\\": \\\"Genera un documento PDF a partir del texto proporcionado por el usuario\\\",\\n  \\\"function_name\\\": \\\"generate_pdf\\\",\\n  \\\"input_args\\\": [\\\"text\\\"],\\n  \\\"return\\\": \\\"Ruta al archivo PDF generado\\\",\\n  \\\"depend\\\": \\\"PyPDF2 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a janitor who doesn't know much about technology but enjoys Christmas decorations.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Christmas Lights Control Interface\\\",\\n\\\"description\\\": \\\"An easy-to-use interface for controlling Christmas lights with a Raspberry Pi. The user inputs a command 'on' or 'off', and the lights respond accordingly.\\\",\\n\\\"function_name\\\": \\\"control_christmas_lights\\\",\\n\\\"input_args\\\": {\\\"command\\\": \\\"A string either 'on' or 'off'\\\"},\\n\\\"return\\\": \\\"No return value, but the state of the Christmas lights will change based on the command given.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"gpiozero\\\", \\\"time\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An Orthodox Christian and a proud Serbian from Sombor.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Orthodox Church Feast Days Reminding Interface\\\",\\n\\\"description\\\": \\\"An interface that reminds the user of upcoming Orthodox feast days.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_orthodox_feast_days\\\",\\n\\\"input_args\\\": \\\"current_date - The current date, represented as a datetime.date object.\\\",\\n\\\"return\\\": \\\"A list of the next five Orthodox feast days, represented as dates (day of the month). The feast days are sorted in ascending order.\\\",\\n\\\"depend\\\": \\\"Python 'datetime' and 'calendar' libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A crisis management consultant hired by government agencies to provide strategic communication guidance during emergencies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emergency News Categorization Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a news text and returns the category of the news to help crisis management consultants quickly sort through the news and prioritize their communication strategies.\\\",\\n\\\"function_name\\\": \\\"categorize_emergency_news\\\",\\n\\\"input_args\\\": \\\"news_text - string\\\",\\n\\\"return\\\": \\\"Category of the news text - string\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library (model: 'distilbert-base-uncased-finetuned-sst-2-english')\\\"\\n}\"", "description": "tool development"}
{"input persona": "An atmospheric chemist studying the interaction between greenhouse gases and the ozone layer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Greenhouse Gases Concentration Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to retrieve the concentrations of major greenhouse gases (CO2, CH4, N2O, O3) in a specific city on a specific date from the OpenAQ API.\\\",\\n\\\"function_name\\\": \\\"get_greenhouse_gas_concentration\\\",\\n\\\"input_args\\\": {\\n    \\\"city\\\": \\\"The city where the user wants to retrieve air quality data from.\\\",\\n    \\\"date\\\": \\\"The date when the user wants to retrieve air quality data. The format should be YYYY-MM-DD.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with the concentrations of CO2, CH4, N2O, and O3 on the specified date in the specified city.\\\",\\n\\\"depend\\\": \\\"OpenAQ API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Kentucky farmer who voted for Daniel Elliott", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Crop Disease Detection Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained model from TensorFlow Hub to detect diseases in crops based on the image provided.\\\",\\n  \\\"function_name\\\": \\\"detect_crop_disease\\\",\\n  \\\"input_args\\\": [\\\"path_to_img\\\"],\\n  \\\"return\\\": \\\"Predicted class of the crop health status ('healthy' or 'diseased')\\\",\\n  \\\"depend\\\": [\\\"TensorFlow\\\", \\\"TensorFlow Hub\\\", \\\"Convolutional Neural Network Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A devoted Buddhist classmate offering a different perspective on spiritual fulfilment and enlightenment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meditation Session Duration Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to track the duration of their meditation sessions. They simply start and end the session, and the duration is calculated for them.\\\",\\n\\\"function_name\\\": [\\\"start_meditation_session\\\", \\\"end_meditation_session\\\"],\\n\\\"input_args\\\": [\\\"self\\\"],\\n\\\"return\\\": \\\"The duration of the meditation session in minutes.\\\",\\n\\\"depend\\\": [\\\"Python's time library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a long-time friend of Alfred (Alf) George Barwell", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geolocation History Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of IP addresses and returns the corresponding geolocations.\\\",\\n\\\"function_name\\\": \\\"get_geolocations\\\",\\n\\\"input_args\\\": [\\\"ip_addresses\\\"],\\n\\\"return\\\": \\\"List of geolocations corresponding to the input IP addresses\\\",\\n\\\"depend\\\": \\\"requests library, IP Geolocation API (ipinfo.io)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local cultural historian who provides insights into the symbolic meanings behind traditional tattoos in different countries", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tattoo Symbol Meaning Interface\\\",\\n  \\\"description\\\": \\\"This interface leverages Google's Vision AI to recognize and categorize the image of a tattoo. The recognized labels are then matched with their symbolic meanings from a pre-compiled dictionary.\\\",\\n  \\\"function_name\\\": \\\"get_tattoo_symbol_meaning\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to the image file of the tattoo.\\\"\\n  },\\n  \\\"return\\\": \\\"An array of possible symbolic meanings associated with the recognized tattoo.\\\",\\n  \\\"depend\\\": \\\"Google Vision AI, Python's os and google.cloud libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious economics student taking actuarial science as a minor at university", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interest Rate Swap Valuation Interface\\\",\\n  \\\"description\\\": \\\"Calculates the fair fixed rate and the NPV of an interest rate swap.\\\",\\n  \\\"function_name\\\": \\\"calculate_swap_value\\\",\\n  \\\"input_args\\\": {\\n    \\\"fixed_rate\\\": \\\"The fixed rate of the swap.\\\",\\n    \\\"nominal\\\": \\\"The nominal value of the swap.\\\",\\n    \\\"years_to_maturity\\\": \\\"The number of years until the swap matures.\\\",\\n    \\\"fixed_tenor\\\": \\\"The fixed tenor of the swap.\\\",\\n    \\\"float_tenor\\\": \\\"The floating tenor of the swap.\\\",\\n    \\\"yield_curve\\\": \\\"The yield curve used for pricing.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"fair_rate\\\": \\\"The fair fixed rate of the swap.\\\",\\n    \\\"NPV\\\": \\\"The net present value of the swap.\\\"\\n  },\\n  \\\"depend\\\": \\\"QuantLib library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aspiring actress who is passionate about World War II films.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that returns highly rated film recommendations based on a specified genre. In this case, for World War II films.\\\",\\n\\\"function_name\\\": \\\"get_film_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"genre\\\": \\\"a string that represents the genre of the films\\\",\\n    \\\"number_of_films\\\": \\\"an integer that represents the number of film recommendations desired\\\"\\n},\\n\\\"return\\\": \\\"A list of film names that are highly rated in the specified genre.\\\",\\n\\\"depend\\\": \\\"The Movie Database (TMDb) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An editor of a psychology journal interested in publishing research on road accidents and human behavior", "synthesized text": "\"{\\n\\\"name\\\": \\\"Road Accidents Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a CSV file as input and returns a dictionary with total number of accidents, number of accidents grouped by causes, and the average number of road accidents per day.\\\",\\n\\\"function_name\\\": \\\"load_and_analyze_data\\\",\\n\\\"input_args\\\": \\\"path_to_csv\\\",\\n\\\"return\\\": \\\"Dictionary with keys: Total Accidents, Accidents by Cause, Average Accidents per Day\\\",\\n\\\"depend\\\": \\\"pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an elderly woman who is passionate about DIY mosaics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mosaic Pattern Generation Interface\\\",\\n\\\"description\\\": \\\"An interface for generating mosaic patterns using a pre-trained deep learning model.\\\",\\n\\\"function_name\\\": [\\\"generate_mosaic_pattern\\\", \\\"save_mosaic_pattern\\\"],\\n\\\"input_args\\\": {\\n    \\\"generate_mosaic_pattern\\\": [\\\"height\\\", \\\"width\\\"],\\n    \\\"save_mosaic_pattern\\\": [\\\"mosaic_pattern\\\", \\\"filename\\\"]\\n    },\\n\\\"return\\\": {\\n    \\\"generate_mosaic_pattern\\\": \\\"An Image object representing the generated mosaic pattern.\\\",\\n    \\\"save_mosaic_pattern\\\": \\\"No return value. The function saves the mosaic pattern to a file.\\\"\\n    },\\n\\\"depend\\\": [\\\"torch\\\", \\\"torchvision\\\", \\\"PIL\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A real estate agent who specializes in the Clifton, NJ, area and provides personalized advice to clients.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Price Prediction Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from the Hugging Face Model Hub to predict the price of a house given its features.\\\",\\n  \\\"function_name\\\": \\\"get_estimated_price\\\",\\n  \\\"input_args\\\": \\\"features\\\",\\n  \\\"return\\\": \\\"A string that includes the estimated price of the house.\\\",\\n  \\\"depend\\\": \\\"Hugging Face Model Hub, transformers library, torch library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A self-motivated student volunteering as a research subject to contribute to the understanding of learning processes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brainwave Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze EEG data for understanding learning processes. It applies a Fast Fourier Transform (FFT) to convert the data from the time domain to the frequency domain, filters out noise, and then identifies the dominant frequency.\\\",\\n\\\"function_name\\\": \\\"analyze_brainwave\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"low_freq\\\", \\\"high_freq\\\"],\\n\\\"return\\\": \\\"dominant_freq\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"pandas\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A cousin who is always looking for new home improvement projects to tackle together", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Improvement Project Idea Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates creative home improvement project ideas based on a given topic of interest. It uses a pretrained GPT-2 model from huggingface to generate these ideas.\\\",\\n\\\"function_name\\\": \\\"generate_project_ideas\\\",\\n\\\"input_args\\\": \\\"a string which is the general topic of interest\\\",\\n\\\"return\\\": \\\"a list of strings, each of which is a generated project idea\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library and a pretrained GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A transportation specialist who ensures that the circus troupe's equipment and animals are safely transported between locations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"Optimize the order of locations to minimize the travel distance and time for a circus troupe's equipment and animals transportation between locations.\\\",\\n\\\"function_name\\\": \\\"optimize_route\\\",\\n\\\"input_args\\\": \\\"locations - A list of locations in sequence of travel\\\",\\n\\\"return\\\": \\\"A string that contains the optimized order of locations to travel and the total travel distance\\\",\\n\\\"depend\\\": \\\"Google's Distance Matrix API, ortools Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biologist researching network structures in biological systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Network Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a file containing the adjacency matrix of a network as input and returns various network statistics. The statistics include the number of nodes, number of edges, average degree, and diameter of the network.\\\", \\n\\\"function_name\\\": \\\"get_network_statistics\\\", \\n\\\"input_args\\\": {\\\"file_path\\\": \\\"string representing the path to the file containing the adjacency matrix\\\"}, \\n\\\"return\\\": \\\"dictionary containing various network statistics\\\", \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"networkx\\\", \\\"numpy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A Sherpa tea house owner who provides climbers with warm meals and lodging", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenWeatherMap API to provide a 7-day weather forecast for a given location. It is helpful for a Sherpa tea house owner to plan accordingly for climbers.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"A string that represents the location where the weather forecast is needed.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary represents a day's forecast, including date, temperature, and weather description.\\\",\\n\\\"depend\\\": \\\"This function depends on the 'requests' Python library and the OpenWeatherMap API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "：一位对政治并不感兴趣，但对历史投票率数据感兴趣的统计学家", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Voter Turnout History Interface\\\",\\n  \\\"description\\\": \\\"Provides the voter turnout percentage for a specified year and country.\\\",\\n  \\\"function_name\\\": \\\"get_voter_turnout\\\",\\n  \\\"input_args\\\": {\\n    \\\"year\\\": \\\"The year for which voter turnout data is required.\\\",\\n    \\\"country\\\": \\\"The country for which voter turnout data is required.\\\"\\n  },\\n  \\\"return\\\": \\\"The voter turnout percentage for the specified year and country.\\\",\\n  \\\"depend\\\": \\\"requests, Web API (https://api.electionturnout.com)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A divorced parent seeking advice on how to navigate the custody evaluation process", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parenting Plan Creation Interface\\\",\\n\\\"description\\\": \\\"This interface helps parents to organize a structured parenting plan using the Google Calendar API.\\\",\\n\\\"function_name\\\": \\\"create_parenting_plan\\\",\\n\\\"input_args\\\": \\\"events - A list of dictionaries. Each dictionary represents an event with fields such as 'summary', 'location', 'description', 'start', 'end', etc.\\\",\\n\\\"return\\\": \\\"None. The function operates by side effect, creating events in the user's default Google Calendar.\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A registered nurse pursuing further studies to specialize in Intensive Care", "synthesized text": "\"{\\n\\\"name\\\": \\\"Heart Rate Variability Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes heart rate variability from ECG data.\\\",\\n\\\"function_name\\\": \\\"analyze_heart_rate_variability\\\",\\n\\\"input_args\\\": \\\"path_to_file\\\",\\n\\\"return\\\": \\\"Dictionary with heart rate variability measures\\\",\\n\\\"depend\\\": \\\"HeartPy, pandas, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "An active Twitter user who shares interesting articles and research findings about medieval history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitter Post Scheduling Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to schedule tweets for a specific time. The user only needs to provide the tweet text and the desired posting time.\\\",\\n\\\"function_name\\\": \\\"schedule_tweet\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"String - The text of the tweet to be posted\\\",\\n    \\\"post_time\\\": \\\"String - The desired posting time in 'YYYY-MM-DD HH:MM:SS' format\\\"\\n},\\n\\\"return\\\": \\\"String - Confirmation message that the tweet has been scheduled\\\",\\n\\\"depend\\\": \\\"python libraries: tweepy, time, datetime; Web APIs: Twitter API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A specialized physical therapist who focuses on relieving back pain caused by prolonged sitting", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Posture Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained PoseNet model to analyze the user's posture from an image, providing a posture score and suggestions for improvement.\\\",\\n  \\\"function_name\\\": \\\"analyze_posture\\\",\\n  \\\"input_args\\\": {\\n    \\\"image_path\\\": \\\"Path to the image file\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"score\\\": \\\"Posture score\\\",\\n    \\\"suggestion\\\": \\\"Suggestions for posture improvement\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"libraries\\\": [\\\"cv2\\\", \\\"numpy\\\", \\\"tensorflow\\\"],\\n    \\\"models\\\": [\\\"PoseNet from TensorFlow.js\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged British Man of Chinese descent, a community leader and an avid fan of June Yee's radio program.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Radio Program Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface helps to find the schedule of June Yee's radio program for a given day of the week.\\\",\\n\\\"function_name\\\": \\\"get_june_yee_program_schedule\\\",\\n\\\"input_args\\\": \\\"day_of_week\\\",\\n\\\"return\\\": \\\"Time of June Yee's program if it's scheduled on the given day, else a message indicating it's not scheduled on that day.\\\",\\n\\\"depend\\\": \\\"Web API from the radio station\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm an old-school golf purist who appreciates the traditions of the sport", "synthesized text": "\"{\\n\\\"name\\\": \\\"Golf Course Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the weather forecast for a given golf course. It uses the OpenWeatherMap API to fetch the weather data.\\\",\\n\\\"function_name\\\": \\\"get_golf_course_weather\\\",\\n\\\"input_args\\\": \\\"course_name - The name of the golf course for which to fetch the weather forecast.\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'temperature', 'humidity', 'wind_speed', and 'weather_description', providing the respective weather conditions at the golf course.\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API, Requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a marginalized member of the Narragansett Tribe who was wrongfully disenrolled.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tribal Enrollment Verification Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Bureau of Indian Affairs' Tribal Leaders Directory and the U.S. Department of the Interior's Indian Affairs databases to verify the tribal enrollment status of an individual.\\\",\\n\\\"function_name\\\": \\\"get_tribal_enrollment_status\\\",\\n\\\"input_args\\\": \\\"full_name\\\",\\n\\\"return\\\": \\\"The tribal enrollment status of the individual, or a message indicating that the individual is not found or not enrolled.\\\",\\n\\\"depend\\\": \\\"requests library, Bureau of Indian Affairs' Tribal Leaders Directory and U.S. Department of the Interior's Indian Affairs databases\\\"\\n}\"", "description": "tool development"}
{"input persona": "a hopeful prospective sperm donor who is an advocate for inclusivity and LGBT rights.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sperm Donor Eligibility Check Interface\\\", \\n\\\"description\\\": \\\"This interface uses a machine learning model to predict a user's eligibility to donate sperm based on their age, health status, lifestyle habits, and sexual orientation.\\\", \\n\\\"function_name\\\": \\\"check_sperm_donor_eligibility\\\", \\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the user\\\",\\n    \\\"health_status\\\": \\\"The health status of the user\\\",\\n    \\\"smoking\\\": \\\"The smoking habits of the user\\\",\\n    \\\"alcohol\\\": \\\"The alcohol consumption habits of the user\\\",\\n    \\\"exercise\\\": \\\"The exercise habits of the user\\\",\\n    \\\"sexual_orientation\\\": \\\"The sexual orientation of the user\\\"\\n    }, \\n\\\"return\\\": \\\"A string that says either 'Eligible' or 'Not Eligible' depending on the prediction of the machine learning model\\\", \\n\\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior partner at the law firm who relies on the legal assistant's organizational skills to keep track of multiple cases", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Case Management Interface\\\",\\n  \\\"description\\\": \\\"An interface that allows users to manage legal cases by adding, removing, updating, and retrieving case details.\\\",\\n  \\\"function_name\\\": [\\\"add_case\\\", \\\"remove_case\\\", \\\"update_case\\\", \\\"get_case\\\"],\\n  \\\"input_args\\\": {\\n    \\\"add_case\\\": [\\\"case_id\\\", \\\"client_name\\\", \\\"case_type\\\", \\\"date\\\", \\\"status\\\", \\\"notes\\\"],\\n    \\\"remove_case\\\": [\\\"case_id\\\"],\\n    \\\"update_case\\\": [\\\"case_id\\\", \\\"status\\\", \\\"notes\\\"],\\n    \\\"get_case\\\": [\\\"case_id\\\"]\\n  },\\n  \\\"return\\\": {\\n    \\\"add_case\\\": \\\"None\\\",\\n    \\\"remove_case\\\": \\\"None\\\",\\n    \\\"update_case\\\": \\\"None\\\",\\n    \\\"get_case\\\": \\\"Tuple containing case details (case_id, client_name, case_type, date, status, notes)\\\"\\n  },\\n  \\\"depend\\\": \\\"sqlite3 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A star football player who relies on the engineer's gear to stay safe on the field", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Gear Strength Simulation Interface\\\",\\n  \\\"description\\\": \\\"This interface simulates the strength of the football gear under different impact forces.\\\",\\n  \\\"function_name\\\": \\\"simulate_impact\\\",\\n  \\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the 3D model file of the gear\\\", \\\"force\\\": \\\"The impact force applied on the gear\\\"},\\n  \\\"return\\\": \\\"A numpy array representing the stress distribution on the gear under the impact force\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"numpy\\\", \\\"pymesh\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A community safety officer dismayed by an uptick in reported incidents.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Incident Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Python's Pandas and Matplotlib libraries to analyze and visualize trends in reported incidents over time. The input is a CSV file containing incident data, and the output is a line graph showing the trend of incidents over time. The CSV file should contain at least two columns: 'date' (in the format 'YYYY-MM-DD') and 'incident_type'.\\\",\\n\\\"function_name\\\": \\\"analyze_incident_trends\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A line graph visualizing the trend of incidents over time.\\\",\\n\\\"depend\\\": \\\"Python's Pandas and Matplotlib libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "an entry-level sales representative in a shipping company", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Shipping Cost Calculator Interface\\\",\\n  \\\"description\\\": \\\"This interface calculates the shipping cost for a package. It takes the origin, destination, and package details as input and returns the shipping cost.\\\",\\n  \\\"function_name\\\": \\\"calculate_shipping_cost\\\",\\n  \\\"input_args\\\": {\\n    \\\"origin\\\": \\\"A dictionary that contains the address details of the origin.\\\",\\n    \\\"destination\\\": \\\"A dictionary that contains the address details of the destination.\\\",\\n    \\\"package_details\\\": \\\"A dictionary that contains the weight and dimensions of the package.\\\"\\n  },\\n  \\\"return\\\": \\\"The shipping cost for the package.\\\",\\n  \\\"depend\\\": \\\"This function depends on the ShipperHQ API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a secondary school student in Delta State, Nigeria", "synthesized text": "\"{\\n\\\"name\\\": \\\"Homework Assistance Interface\\\",\\n\\\"description\\\": \\\"This interface provides answers to homework questions using the Wolfram Alpha API. It can solve math problems, answer history questions, provide chemistry formulas, etc.\\\",\\n\\\"function_name\\\": \\\"get_homework_help\\\",\\n\\\"input_args\\\": \\\"question - The homework question.\\\",\\n\\\"return\\\": \\\"The answer to the homework question.\\\",\\n\\\"depend\\\": \\\"Wolfram Alpha API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged woman from India who has an adult son studying in the U.S. and considering an H-1B visa for him.", "synthesized text": "\"{\\n\\\"name\\\": \\\"H-1B Visa Eligibility Check Interface\\\",\\n\\\"description\\\": \\\"This interface uses U.S. Department of Labor's Foreign Labor Certification Data Center API to check whether a specific job in a certain location is within the top occupations for H-1B visa applications.\\\",\\n\\\"function_name\\\": \\\"check_h1b_visa_eligibility\\\",\\n\\\"input_args\\\": [\\\"job_title\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A string message indicating the probability of getting an H-1B visa for the specific job and location.\\\",\\n\\\"depend\\\": \\\"requests, json, U.S. Department of Labor's Foreign Labor Certification Data Center API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A logical and skeptical AI researcher", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Hypothesis Testing Interface\\\",\\n\\\"description\\\": \\\"Interface that performs statistical hypothesis testing on two samples and returns the p-value of the hypothesis that the two samples have the same population mean.\\\",\\n\\\"function_name\\\": \\\"perform_hypothesis_testing\\\",\\n\\\"input_args\\\": [\\\"sample1\\\", \\\"sample2\\\"],\\n\\\"return\\\": \\\"p_value\\\",\\n\\\"depend\\\": [\\\"SciPy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A linguist advocating for the use of natural language processing in encryption algorithms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Encryption Interface\\\",\\n\\\"description\\\": \\\"This interface encrypts and decrypts text messages using a key. It uses the cryptography library in Python for encryption and decryption.\\\",\\n\\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_message\\\", \\\"decrypt_message\\\"],\\n\\\"input_args\\\": [\\\"message\\\", \\\"key\\\"],\\n\\\"return\\\": [\\\"encrypted_message\\\", \\\"decrypted_message\\\"],\\n\\\"depend\\\": [\\\"cryptography\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A technology expert who advises on the secure storage and integration of genomic data for clinical use", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genomic Data Encryption Interface\\\",\\n\\\"description\\\": \\\"An interface that encrypts genomic data for secure storage and integration. The user inputs a file path to the genomic data and a symmetric encryption key. The interface returns a new file path to the encrypted data.\\\",\\n\\\"function_name\\\": [\\\"encrypt_genomic_data\\\", \\\"generate_key\\\"],\\n\\\"input_args\\\": {\\\"encrypt_genomic_data\\\": [\\\"file_path\\\", \\\"key\\\"], \\\"generate_key\\\": []},\\n\\\"return\\\": {\\\"encrypt_genomic_data\\\": \\\"encrypted_file_path\\\", \\\"generate_key\\\": \\\"key\\\"},\\n\\\"depend\\\": [\\\"cryptography Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A department director focused on streamlining bureaucratic procedures to enhance service delivery", "synthesized text": "\"{\\n\\\"name\\\": \\\"Form Filling Automation Interface\\\",\\n\\\"description\\\": \\\"An interface to automate the process of filling PDF forms. The user provides the path to a PDF file and a dictionary with field names and the text to be filled, and the interface returns a new PDF with the fields filled.\\\",\\n\\\"function_name\\\": \\\"fill_pdf_form\\\",\\n\\\"input_args\\\": [\\\"path_to_pdf\\\", \\\"field_data\\\"],\\n\\\"return\\\": \\\"Path to the new PDF with filled fields.\\\",\\n\\\"depend\\\": \\\"Python's PyPDF2 or PDFPlumber and FPDF libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A paleontologist specializing in the study of dinosaur communication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dinosaur Sound Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface accepts parameters related to a dinosaur (size, habitat, anatomy) and generates a simulated sound that the dinosaur might have produced, based on a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"generate_dino_sound\\\",\\n\\\"input_args\\\": [\\\"size\\\", \\\"habitat\\\", \\\"anatomy\\\"],\\n\\\"return\\\": \\\"A string representing the path of the generated .wav audio file.\\\",\\n\\\"depend\\\": \\\"tensorflow.keras, numpy, scipy.io.wavfile\\\"\\n}\"", "description": "tool development"}
{"input persona": "A forward-thinking museum director who recognizes the cultural significance of punk art and tattoo culture", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tattoo Style Classification Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to an image file of a tattoo and returns a classification of the tattoo style. It leverages a pre-trained model from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"classify_tattoo_style\\\",\\n\\\"input_args\\\": \\\"path_to_img, a string representing the path to an image file\\\",\\n\\\"return\\\": \\\"A list of tuples, each containing the ID, name, and classification score of a predicted tattoo style\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "An insurance agent specializing in commercial insurance, providing advice on obtaining the right coverage for the locksmith business", "synthesized text": "\"{\\n\\\"name\\\": \\\"Insurance Plan Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends insurance plans for a locksmith business based on its location, size, number of employees, and years of operation.\\\",\\n\\\"function_name\\\": \\\"recommend_insurance_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"the location of the locksmith business\\\",\\n    \\\"size\\\": \\\"the size of the locksmith business\\\",\\n    \\\"num_employees\\\": \\\"the number of employees in the locksmith business\\\",\\n    \\\"years_operation\\\": \\\"the number of years the locksmith business has been in operation\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended insurance plans based on historical data of similar businesses.\\\",\\n\\\"depend\\\": \\\"Pandas for data processing, Scikit-learn for the recommendation algorithm\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer specializing in developing algorithms for wireless communication protocols", "synthesized text": "\"{\\n\\\"name\\\": \\\"Signal Strength Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the pyRadioHead_RF95 library to communicate with wireless modules and analyze signal strength. The user inputs the frequency to monitor, and the interface returns the received signal strength indicator (RSSI) for that frequency.\\\",\\n\\\"function_name\\\": \\\"get_signal_strength\\\",\\n\\\"input_args\\\": \\\"frequency - The frequency to monitor for signal strength.\\\",\\n\\\"return\\\": \\\"The received signal strength indicator (RSSI) for the input frequency, or an error message if the RF95 driver fails to initialize.\\\",\\n\\\"depend\\\": \\\"Python library: pyRadioHead_RF95\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer science student interested in exploring the capabilities of the Kinect SDK", "synthesized text": "\"{\\n\\\"name\\\": \\\"Kinect Body Tracking Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Kinect SDK to track the body movements of a person in a video. The input is the path to a Kinect video file and the output is a list of dictionaries, each dictionary represents a body detected in the video.\\\",\\n\\\"function_name\\\": \\\"get_body_movements\\\",\\n\\\"input_args\\\": [\\\"path_to_video\\\"],\\n\\\"return\\\": \\\"A list of dictionaries, each dictionary represents a body detected in the video. Each key in the dictionary is the name of a joint, and the value is a tuple representing the (x, y, z) coordinates of that joint.\\\",\\n\\\"depend\\\": \\\"pykinect2 library, Kinect SDK\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Vietnamese parent wanting the best international education for their child", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Information and Ranking Interface\\\",\\n\\\"description\\\": \\\"This interface uses the API from SchoolDigger to provide information and ranking of schools based on the input school name or city.\\\",\\n\\\"function_name\\\": \\\"get_school_info_and_ranking\\\",\\n\\\"input_args\\\": [\\\"school_name_or_city\\\"],\\n\\\"return\\\": \\\"List of dictionaries, each containing the name, city, state, rank, and score of a school.\\\",\\n\\\"depend\\\": \\\"requests library, SchoolDigger API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fictional character from a children's storybook who is friends with various animals in the rainforest.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Animal Sound Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the name of an animal as an input and plays the corresponding sound of the animal.\\\",\\n\\\"function_name\\\": \\\"play_animal_sound\\\",\\n\\\"input_args\\\": {\\\"animal_name\\\": \\\"name of the animal\\\"},\\n\\\"return\\\": \\\"Plays the sound of the input animal. If the animal's sound is not found, it prints a message stating so.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pydub\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An experienced production manager who shares valuable insights on project management and meeting deadlines", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Deadline Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates the total duration of a project and the remaining days till the project deadline. The user inputs the project start date, end date, and today's date, and the interface returns the total number of days for the project and the remaining days until the deadline.\\\",\\n\\\"function_name\\\": \\\"calculate_days_remaining\\\",\\n\\\"input_args\\\": {\\\"start_date\\\": \\\"The start date of the project in 'YYYY-MM-DD' format\\\", \\\"end_date\\\": \\\"The end date of the project in 'YYYY-MM-DD' format\\\", \\\"today_date\\\": \\\"Today's date in 'YYYY-MM-DD' format\\\"},\\n\\\"return\\\": {\\\"total_days\\\": \\\"Total number of days for the project\\\", \\\"remaining_days\\\": \\\"Remaining days until the project deadline\\\"},\\n\\\"depend\\\": [\\\"Python's datetime module\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An elder sibling who is already studying in the same prestigious engineering college and provides guidance and support throughout the admission process", "synthesized text": "\"{\\n    \\\"name\\\": \\\"College Admission Guidance Interface\\\",\\n    \\\"description\\\": \\\"This interface provides users with important college admission data such as admission rate, average SAT score, and average ACT score by using the College Scorecard Data API from the U.S. Department of Education.\\\",\\n    \\\"function_name\\\": \\\"get_college_admission_data\\\",\\n    \\\"input_args\\\": {\\n        \\\"college_name\\\": \\\"The name of the college for which to get admission data.\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"admission_rate\\\": \\\"The admission rate of the college.\\\",\\n        \\\"average_sat_score\\\": \\\"The average SAT score of admitted students at the college.\\\",\\n        \\\"average_act_score\\\": \\\"The average ACT score of admitted students at the college.\\\"\\n    },\\n    \\\"depend\\\": [\\\"requests\\\", \\\"College Scorecard Data API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a Fellow of the IEEE and close friend of Sukumar Brahma", "synthesized text": "\"{\\n\\\"name\\\": \\\"Power Grid Stability Assistant\\\",\\n\\\"description\\\": \\\"This interface utilizes the PyPower library to perform power flow analysis on a given power grid's bus and branch data, returning the grid's stability status.\\\",\\n\\\"function_name\\\": \\\"power_grid_stability\\\",\\n\\\"input_args\\\": {\\n    \\\"bus_data\\\": \\\"A numpy array containing the power grid's bus data.\\\",\\n    \\\"branch_data\\\": \\\"A numpy array containing the power grid's branch data.\\\"\\n},\\n\\\"return\\\": \\\"A string indicating whether the power grid is stable or unstable.\\\",\\n\\\"depend\\\": \\\"PyPower library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Latin American woman who encountered gender discrimination in her professional life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gender Discrimination Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to classify a text as offensive or not, which might indicate gender discrimination in a professional setting.\\\",\\n\\\"function_name\\\": \\\"classify_text\\\",\\n\\\"input_args\\\": \\\"text - a string that describes a situation\\\",\\n\\\"return\\\": \\\"label - a string that classifies the text as 'NOT' (not offensive) or 'OFF' (offensive)\\\",\\n\\\"depend\\\": \\\"Hugging Face 'cardiffnlp/twitter-roberta-base-offensive' model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A government official overseeing an internship or job opportunity for the student, providing hands-on experience in public policy and governance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Matching Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to match the job descriptions with the applicant's resume. Users only need to input the paths to a job description and the applicant's resume, and it will return a matching score indicating how well the applicant's skills and experiences match the job description.\\\",\\n\\\"function_name\\\": \\\"compute_similarity\\\",\\n\\\"input_args\\\": [\\\"job_desc_path\\\", \\\"resume_path\\\"],\\n\\\"return\\\": \\\"A matching score between the job description and the resume. Closer to 1 means a better match.\\\",\\n\\\"depend\\\": [\\\"Hugging Face Transformers (RobertaTokenizer, TFRobertaModel)\\\", \\\"TensorFlow\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A school nurse who provides immediate medical assistance and first aid to students", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface sets up a medication reminder for a specific student at a specific time.\\\",\\n\\\"function_name\\\": \\\"set_medication_reminder\\\",\\n\\\"input_args\\\": [\\\"student_name\\\", \\\"medication\\\", \\\"medication_time\\\"],\\n\\\"return\\\": \\\"A reminder when it's time for the medication to be given.\\\",\\n\\\"depend\\\": \\\"Python's schedule library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Sharepoint Administrator with SSRS experience", "synthesized text": "\"{\\n\\\"name\\\": \\\"SharePoint Document Upload Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of uploading a document to a SharePoint site. It abstracts the complexities of using the SharePoint API, allowing users to upload documents by merely providing the document path, SharePoint site URL, document library name, and their credentials.\\\",\\n\\\"function_name\\\": \\\"upload_document_to_sharepoint\\\",\\n\\\"input_args\\\": {\\n    \\\"document_path\\\": \\\"The absolute path to the document to be uploaded\\\",\\n    \\\"site_url\\\": \\\"The URL of the SharePoint site where the document will be uploaded\\\",\\n    \\\"library_name\\\": \\\"The name of the document library in the SharePoint site\\\",\\n    \\\"username\\\": \\\"The username of the user\\\",\\n    \\\"password\\\": \\\"The password of the user\\\"\\n},\\n\\\"return\\\": \\\"A message indicating whether the document was uploaded successfully or an error occurred\\\",\\n\\\"depend\\\": \\\"This interface uses the office365 python library, specifically the AuthenticationContext, ClientContext, and File modules\\\"\\n}\"", "description": "tool development"}
{"input persona": "A muralist known for their bold and vibrant creations, perfect for adding a touch of urban flair to the hotel", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mural Color Palette Generator\\\",\\n\\\"description\\\": \\\"Extracts the dominant colors from an image as a reference for a muralist.\\\",\\n\\\"function_name\\\": \\\"extract_colors\\\",\\n\\\"input_args\\\": \\\"path_to_img, num_colors\\\",\\n\\\"return\\\": \\\"A list of RGB color values\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, sklearn, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a real estate agent seeking CRM tools to streamline business operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"CRM Tool Integration Interface\\\",\\n\\\"description\\\": \\\"This interface integrates with Zoho CRM to add new leads to the CRM system.\\\",\\n\\\"function_name\\\": \\\"add_lead_to_zoho_crm\\\",\\n\\\"input_args\\\": {\\n    \\\"name\\\": \\\"The name of the lead to be added.\\\",\\n    \\\"email\\\": \\\"The email of the lead to be added.\\\"\\n},\\n\\\"return\\\": \\\"A success message if the lead was added successfully or an error message if not.\\\",\\n\\\"depend\\\": \\\"This function uses the Zoho CRM API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An up-and-coming indie artist who values the vlogger's honest and insightful reviews", "synthesized text": "\"{\\n\\\"name\\\": \\\"YouTube Video Analytics Interface\\\",\\n\\\"description\\\": \\\"Extracts statistics and comments from a specific YouTube video. The user only needs to input the video URL, and the interface will return the video's view count, like count, dislike count, comment count, and top 5 comments.\\\",\\n\\\"function_name\\\": \\\"get_video_statistics_and_comments\\\",\\n\\\"input_args\\\": [\\\"video_url\\\"],\\n\\\"return\\\": \\\"A dictionary containing the video title, view count, like count, dislike count, comment count and top 5 comments.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"urllib.parse\\\"], \\\"web APIs\\\": [\\\"YouTube Data API v3\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A curmudgeonly local Helsinkian, deeply skeptical about any changes to public transportation and wary of anything that seems like a hassle.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Helsinki Public Transportation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches real-time information about public transportation from a given stop using the Helsinki Region Transport (HSL) API.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_departures\\\",\\n\\\"input_args\\\": \\\"stop_name\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains information about an upcoming departure: the scheduled and real-time departure times, any departure delay, whether the real-time data is available, the state of the real-time data, the service day, and the headsign of the vehicle.\\\",\\n\\\"depend\\\": \\\"requests library, Helsinki Region Transport (HSL) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A native from Concord, NH who is not religious but deeply respects and has historical interest in local congregational churches.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Church Information Interface\\\",\\n\\\"description\\\": \\\"This interface utilizes the OpenStreetMap API to find information about historical congregational churches in a given location. Users only need to input their city, and the interface will return a list of historical congregational churches in that city.\\\",\\n\\\"function_name\\\": \\\"get_historical_congregational_churches\\\",\\n\\\"input_args\\\": \\\"city - name of the city where the user wants to find historical congregational churches\\\",\\n\\\"return\\\": \\\"A list of historical congregational churches in the city, each represented as a dictionary with the name of the church and its latitude and longitude coordinates.\\\",\\n\\\"depend\\\": \\\"Python requests library, OpenStreetMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a business owner who uses industrial communication systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Industrial Communication Systems Health Check Interface\\\",\\n\\\"description\\\": \\\"An interface to check the health of industrial communication systems via MQTT protocol\\\",\\n\\\"function_name\\\": \\\"check_communication_system_health\\\",\\n\\\"input_args\\\": [\\\"mqtt_broker_url\\\", \\\"topic\\\", \\\"time_interval\\\"],\\n\\\"return\\\": \\\"Prints the received messages from the MQTT broker\\\",\\n\\\"depend\\\": [\\\"paho-mqtt python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mobile commerce analyst who is impressed by the potential impact of the algorithm", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of products a user has interacted with and returns a list of recommended products for this user using a pre-trained BERT model.\\\",\\n\\\"function_name\\\": \\\"recommend_products\\\",\\n\\\"input_args\\\": \\\"user_products: a list of product ids or names\\\",\\n\\\"return\\\": \\\"a list of recommended product ids or names\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated study skills coach who helps students develop effective learning strategies for calculus", "synthesized text": "\"{\\n\\\"name\\\": \\\"Calculus Problem Solver Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a calculus problem in string format and returns the solved problem using Python's SymPy library\\\",\\n\\\"function_name\\\": \\\"solve_calculus_problem\\\",\\n\\\"input_args\\\": {\\\"problem_str\\\": \\\"String representation of a calculus problem\\\"},\\n\\\"return\\\": \\\"A solution to the input calculus problem\\\",\\n\\\"depend\\\": \\\"SymPy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned atheist author who presents strong arguments against the existence of a higher power", "synthesized text": "\"{\\n  \\\"name\\\" : \\\"Text Similarity Check Interface\\\",\\n  \\\"description\\\" : \\\"This interface takes as input a user's written text and a reference text, and returns a similarity score between the two texts using a Sentence Transformer model from Hugging Face Transformers library. This can help authors ensure the originality of their arguments and avoid inadvertent plagiarism.\\\",\\n  \\\"function_name\\\" : \\\"text_similarity_check\\\",\\n  \\\"input_args\\\" : [\\\"user_text\\\", \\\"reference_text\\\"],\\n  \\\"return\\\" : \\\"A similarity score (between -1 and 1) representing the semantic similarity between the user text and reference text\\\",\\n  \\\"depend\\\" : {\\\"python libraries\\\" : [\\\"transformers\\\", \\\"torch\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A meticulous artist responsible for creating and maintaining the visual style of the film", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Palette Extraction Interface\\\",\\n\\\"description\\\": \\\"Extracts dominant colors from a film still\\\",\\n\\\"function_name\\\": \\\"get_dominant_colors\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"k\\\"],\\n\\\"return\\\": \\\"An array with RGB values of dominant colors from the image\\\",\\n\\\"depend\\\": [\\\"OpenCV library\\\", \\\"sklearn library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A science fiction writer incorporating ancient healing practices into their speculative narratives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancient Healing Practice Lookup Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed information about various ancient healing practices. Simply input the name of a healing practice and get comprehensive information about it.\\\",\\n\\\"function_name\\\": \\\"get_ancient_healing_info\\\",\\n\\\"input_args\\\": \\\"practice_name - The name of the ancient healing practice\\\",\\n\\\"return\\\": \\\"A dictionary containing information about the healing practice. If no information is found, returns a string stating the same.\\\",\\n\\\"depend\\\": \\\"Natural Medicines Comprehensive Database's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a bartender with a great sense of humor, and I enjoy a good joke or prank, as long as no one gets hurt.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Joke Generation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches a joke from a specified category using the JokeAPI. The joke can either be a single-line joke or a two-part joke with a setup and delivery.\\\",\\n\\\"function_name\\\": \\\"generate_joke\\\",\\n\\\"input_args\\\": {\\\"category\\\": \\\"The category of the joke you want to generate.\\\"},\\n\\\"return\\\": \\\"A string representing the joke fetched from the JokeAPI.\\\",\\n\\\"depend\\\": \\\"Python's requests library, JokeAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A water resource management expert who is critical of inadequate water infrastructure and management in developing countries.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Water Quality Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a .csv file containing water quality data, analyzes the data, and provides a comprehensive report along with visual plots.\\\",\\n\\\"function_name\\\": \\\"analyze_data\\\",\\n\\\"input_args\\\": \\\"path_to_file\\\",\\n\\\"return\\\": \\\"Prints a summary of the data and plot histograms for each parameter\\\",\\n\\\"depend\\\": \\\"pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A homeless individual in need of medical care and assistance in accessing shelter", "synthesized text": "\"{\\n\\\"name\\\": \\\"Healthcare and Shelter Assistance Interface\\\",\\n\\\"description\\\": \\\"This interface provides information on the nearest healthcare facilities and shelters based on the user's location.\\\",\\n\\\"function_name\\\": \\\"get_nearest_healthcare_and_shelters\\\",\\n\\\"input_args\\\": \\\"location - the current location of the user\\\",\\n\\\"return\\\": \\\"A dictionary containing two lists: one with the names of the nearest healthcare facilities, and one with the names of the nearest shelters.\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cautious house buyer trying to navigate through the murky world of real estate with little knowledge about law and Terms & Conditions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real Estate Term Explanation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a paragraph from a real estate contract and returns a simpler explanation of the legal terms found in the input.\\\",\\n\\\"function_name\\\": \\\"explain_real_estate_terms\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"A dictionary where the keys are the legal terms found in the input text and the values are their simplified explanations.\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers for Named Entity Recognition, Large Language Model for explanation generation.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A visiting nurse who admires his intellectual prowess and independence", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface that reminds users when to take their medication based on the provided medication name, dosage, and frequency.\\\",\\n\\\"function_name\\\": [\\\"MedicationReminder.__init__\\\", \\\"MedicationReminder.time_to_next_dose\\\", \\\"MedicationReminder.take_medication\\\", \\\"MedicationReminder.reminder\\\"],\\n\\\"input_args\\\": {\\\"MedicationReminder.__init__\\\": [\\\"medication\\\", \\\"dosage\\\", \\\"frequency\\\"], \\\"MedicationReminder.take_medication\\\": []},\\n\\\"return\\\": {\\\"MedicationReminder.__init__\\\": \\\"None\\\", \\\"MedicationReminder.time_to_next_dose\\\": \\\"Time remaining for the next dose\\\", \\\"MedicationReminder.take_medication\\\": \\\"Confirmation of medication taken and time for next dose\\\", \\\"MedicationReminder.reminder\\\": \\\"Reminder to take medication or time remaining for the next dose\\\"},\\n\\\"depend\\\": [\\\"Python's built-in library: datetime and time\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local politician championing policies to address poverty and inequality in Bangladesh", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poverty Rate Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the poverty rate based on given economic indicators. The user only needs to input the values for these economic indicators, and the interface will return the predicted poverty rate.\\\",\\n\\\"function_name\\\": \\\"predict_poverty_rate\\\",\\n\\\"input_args\\\": {\\\"gdp\\\": \\\"float\\\", \\\"inflation\\\": \\\"float\\\", \\\"unemployment\\\": \\\"float\\\"},\\n\\\"return\\\": \\\"float\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"sklearn.ensemble\\\", \\\"joblib\\\"], \\\"machine learning models\\\": [\\\"RandomForestRegressor\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A previous Activision employee who is still a passionate fan of Call of Duty games.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Game Statistics Interface\\\",\\n  \\\"description\\\": \\\"An interface to get detailed game statistics for a Call of Duty player\\\",\\n  \\\"function_name\\\": \\\"get_game_stats\\\",\\n  \\\"input_args\\\": {\\n    \\\"username\\\": \\\"The username of the Call of Duty player\\\",\\n    \\\"platform\\\": \\\"The gaming platform the player uses (e.g., 'psn', 'xbl', 'battle', 'uno', 'steam')\\\"\\n  },\\n  \\\"return\\\": \\\"Detailed game statistics for the player, or an error message\\\",\\n  \\\"depend\\\": \\\"Call of Duty API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curator at a national library with a collection of historical maps used for political purposes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Map Similarity Comparison Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to compare two maps and get a score representing their similarity. This can help identify maps with similar political implications or origins.\\\",\\n  \\\"function_name\\\": \\\"compare_maps\\\",\\n  \\\"input_args\\\": [\\\"map1_path\\\", \\\"map2_path\\\"],\\n  \\\"return\\\": \\\"A similarity score between two maps, range from 0 to 1.\\\",\\n  \\\"depend\\\": [\\\"keras.preprocessing\\\", \\\"keras.applications.vgg16\\\", \\\"numpy\\\", \\\"sklearn.metrics.pairwise\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged man who works as a self-employed general contractor in Texas and has been diagnosed with Chronic Obstructive Pulmonary Disease (COPD) and Chronic Kidney Disease (CKD)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health Condition Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface provides a high-level analysis of the user's health condition based on their inputted lab test results and symptoms. It uses the CKD Stager and COPD Assessment Test (CAT) APIs.\\\",\\n\\\"function_name\\\": \\\"analyze_health_condition\\\",\\n\\\"input_args\\\": {\\\"eGFR\\\": \\\"Estimated Glomerular Filtration Rate for CKD diagnosis\\\", \\\"CAT_score\\\": \\\"COPD Assessment Test score based on symptoms\\\"},\\n\\\"return\\\": {\\\"CKD_stage\\\": \\\"The stage of Chronic Kidney Disease\\\", \\\"COPD_severity\\\": \\\"The severity of Chronic Obstructive Pulmonary Disease\\\"},\\n\\\"depend\\\": \\\"CKD Stager and COPD Assessment Test (CAT) APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a retired Brazilian footballer who played for the São Paulo state team in the 1940s.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch football match statistics for a specific team in a specific season using the StatsBomb API.\\\",\\n\\\"function_name\\\": \\\"get_football_stats\\\",\\n\\\"input_args\\\": {\\\"season\\\": \\\"the season of interest\\\", \\\"team\\\": \\\"the team of interest\\\"},\\n\\\"return\\\": \\\"A list of dictionaries, each containing details about a match played by the specified team in the specified season.\\\",\\n\\\"depend\\\": \\\"Python's built-in requests library and the StatsBomb API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biology major who creates tactile models and diagrams to assist the visually impaired student in grasping complex biological structures", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Protein Structure Generator Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the 3D structure data of a given protein from the PDB (Protein Data Bank) and uses PyMOL to generate a 3D diagram. A 3D printable model is created using PyCAM. The input is a PDB ID, and the output is a 3D printable model file.\\\",\\n\\\"function_name\\\": \\\"create_3d_printable_model\\\",\\n\\\"input_args\\\": \\\"pdb_id\\\",\\n\\\"return\\\": \\\"3D printable model file (STL)\\\",\\n\\\"depend\\\": \\\"Python libraries: pypdb, pymol, pycam; Web API: PDB (Protein Data Bank) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A self-taught programmer seeking guidance and advice on advanced C programming concepts", "synthesized text": "\"{\\n\\\"name\\\": \\\"C Code Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a C code and returns an analysis of the code, including a control flow graph and a call graph, using the radare2 API.\\\",\\n\\\"function_name\\\": \\\"analyze_c_code\\\",\\n\\\"input_args\\\": \\\"A string of C code.\\\",\\n\\\"return\\\": \\\"A dictionary containing the control flow graph and the call graph.\\\",\\n\\\"depend\\\": \\\"radare2 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A construction project manager responsible for building and renovating teaching and research facilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Material Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the cost of building materials. It takes a dictionary of materials and their quantities as input, and returns the total estimated cost.\\\",\\n\\\"function_name\\\": \\\"estimate_building_cost\\\",\\n\\\"input_args\\\": {\\\"materials\\\": \\\"dict\\\"},\\n\\\"return\\\": \\\"float\\\",\\n\\\"depend\\\": [\\\"Python libraries: BeautifulSoup, requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young, job-seeking biochemist in Weld County, Colorado", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Search Interface\\\",\\n\\\"description\\\": \\\"Get a list of job listings based on job title and location using Indeed's Job Search API.\\\",\\n\\\"function_name\\\": \\\"get_job_listings\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"job_title\\\": \\\"The title of the job the user is interested in, e.g., 'Biochemist'.\\\",\\n    \\\"location\\\": \\\"The location where the user wants to find a job, e.g., 'Weld County, Colorado'.\\\"\\n    },\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains 'jobtitle', 'company', 'city', 'state', and 'date' of a job listing.\\\",\\n\\\"depend\\\": \\\"requests library, Indeed Job Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Greek local who prefers traditional means of transportation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ferry Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the ferry schedule between two islands in Greece using the OpenMobilityData API. Just input your current location (island name) and your destination, and our interface will return the next few ferry schedules.\\\",\\n\\\"function_name\\\": \\\"get_ferry_schedule\\\",\\n\\\"input_args\\\": [\\\"current_island\\\", \\\"destination_island\\\"],\\n\\\"return\\\": \\\"List of upcoming ferry schedules (in the format of departure time).\\\",\\n\\\"depend\\\": \\\"requests library, OpenMobilityData API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person obsessed with train trivia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Train Schedule Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to input their desired departure and arrival station to get the next available train schedules.\\\",\\n\\\"function_name\\\": \\\"get_next_train_schedules\\\",\\n\\\"input_args\\\": {\\n    \\\"departure_station\\\": \\\"The station from which the user desires to depart.\\\",\\n    \\\"arrival_station\\\": \\\"The station at which the user desires to arrive.\\\"\\n},\\n\\\"return\\\": \\\"List of dictionaries containing the next available train schedules as per the user's input including departure time, arrival time, and operator.\\\",\\n\\\"depend\\\": \\\"Python requests library, TransportAPI platform\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biomedical engineering student studying the mechanical properties of vocal cord tissue", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mechanical Property Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes in stress-strain data from a tensile test on vocal cord tissue and returns the Young's modulus and ultimate tensile strength of the tissue.\\\",\\n\\\"function_name\\\": \\\"get_young_modulus_uts\\\",\\n\\\"input_args\\\": {\\\"stress_data\\\": \\\"list of numerical values for stress\\\", \\\"strain_data\\\": \\\"list of numerical values for strain\\\"},\\n\\\"return\\\": \\\"A dictionary containing the Young's modulus and ultimate tensile strength\\\",\\n\\\"depend\\\": \\\"numpy, scipy.optimize\\\"\\n}\"", "description": "tool development"}
{"input persona": "a resident living near the Alabama Gulf Coast who dislikes bureaucratic inefficiency.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hurricane Alert Interface\\\",\\n\\\"description\\\": \\\"This interface provides current hurricane alerts for a given location using data from the National Hurricane Center and Central Pacific Hurricane Center.\\\",\\n\\\"function_name\\\": \\\"get_hurricane_alerts\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"A list of current hurricane alerts for the given location.\\\",\\n\\\"depend\\\": \\\"requests library, National Hurricane Center and Central Pacific Hurricane Center APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "Старший разработчик ПО с опытом работы в Big Tech, специализирующийся на high-performance computing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parallel Computing Interface\\\",\\n\\\"description\\\": \\\"This interface performs vector addition operation on both CPU and GPU and provides a comparison of their performance.\\\",\\n\\\"function_name\\\": \\\"vector_addition\\\",\\n\\\"input_args\\\": {\\\"size\\\": \\\"Integer value indicating the size of the vectors to be created and added.\\\"},\\n\\\"return\\\": {\\\"CPU Time\\\": \\\"Time taken for vector addition operation on CPU.\\\", \\\"GPU Time\\\": \\\"Time taken for vector addition operation on GPU.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pycuda\\\", \\\"numpy\\\", \\\"time\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An aggressive defense attorney representing a wealthy individual accused of exerting undue influence in a will", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\", \\n\\\"description\\\": \\\"An interface to calculate the similarity between two documents using the Doc2Vec model.\\\", \\n\\\"function_name\\\": \\\"similarity_score\\\", \\n\\\"input_args\\\": [\\\"doc1\\\", \\\"doc2\\\", \\\"model_path\\\"], \\n\\\"return\\\": \\\"A similarity score between 0 and 1, where 1 indicates that the documents are identical and 0 indicates no similarity.\\\", \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"gensim\\\"], \\\"machine learning models\\\": [\\\"Doc2Vec\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A restaurant owner facing a potential lawsuit from a customer regarding food poisoning", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Safety Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to analyze the food safety of a restaurant based on the text description of the food preparation process. It returns a safety score, with higher scores indicating safer processes.\\\",\\n\\\"function_name\\\": \\\"food_safety_analysis\\\",\\n\\\"input_args\\\": \\\"description - a text description of the food preparation process\\\",\\n\\\"return\\\": \\\"safety_score - a float between 0 and 1 indicating the safety of the food preparation process\\\",\\n\\\"depend\\\": \\\"Hugging Face transformers library, PyTorch library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graduate student planning to write her thesis on Leonardo da Vinci as an artist-engineer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Da Vinci Art Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the artistic style and details of da Vinci's paintings using the Microsoft Azure computer vision API\\\",\\n\\\"function_name\\\": \\\"analyze_davinci_art\\\",\\n\\\"input_args\\\": \\\"image_url - The URL of the painting image\\\",\\n\\\"return\\\": \\\"A JSON object containing information about the dominant colors in the image, a description of the image, and detected objects in the image\\\",\\n\\\"depend\\\": \\\"Microsoft Azure computer vision API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A user experience designer who ensures that the encryption features are seamlessly integrated into the messaging app", "synthesized text": "\"{\\n\\\"name\\\": \\\"Message Encryption Interface\\\",\\n\\\"description\\\": \\\"An interface to encrypt and decrypt text messages using a given password\\\",\\n\\\"function_name\\\": [\\\"get_key\\\", \\\"encrypt_message\\\", \\\"decrypt_message\\\"],\\n\\\"input_args\\\": [\\\"message\\\", \\\"password\\\"],\\n\\\"return\\\": \\\"For encryption: encrypted message as a string. For decryption: decrypted message as a string.\\\",\\n\\\"depend\\\": \\\"Python cryptography library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ORV rental shop owner concerned about the potential impact of stricter regulations on their business", "synthesized text": "\"{\\n\\\"name\\\": \\\"Business Regulations Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the OpenAI GPT-3 model to provide a detailed analysis of the potential impact of new regulations on a business.\\\",\\n\\\"function_name\\\": \\\"analyze_regulation_impact\\\",\\n\\\"input_args\\\": {\\n    \\\"regulation_text\\\": \\\"The text of the regulations to be analyzed.\\\"\\n},\\n\\\"return\\\": \\\"A string containing a detailed analysis of the potential impact of the regulations on the business.\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wealthy tech entrepreneur fascinated by the mysteries of the universe, who funds the professor's research on dark matter", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dark Matter Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze dark matter data. It reads the data from a file, calculates the luminosity distance based on the redshift value, and performs a linear regression between the distance and mass of the dark matter.\\\",\\n\\\"function_name\\\": \\\"analyze_dark_matter_distribution\\\",\\n\\\"input_args\\\": \\\"path_to_file - the path to the input data file\\\",\\n\\\"return\\\": \\\"A dictionary with the slope, intercept, correlation coefficient (r_value), p_value and standard error of the regression\\\",\\n\\\"depend\\\": \\\"Astropy for handling astronomical data, Scipy for statistical analysis and Pandas for data manipulation\\\"\\n}\"", "description": "tool development"}
{"input persona": "An urban planner researching the infrastructural changes small towns undergo with military developments", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Military Base Impact Analysis Interface\\\",\\n  \\\"description\\\": \\\"Analyzes the impact of military base establishments on small towns by extracting and topic modeling information available on the web.\\\",\\n  \\\"function_name\\\": \\\"analyze_impact\\\",\\n  \\\"input_args\\\": {\\n    \\\"town_name\\\": \\\"Name of the town to analyze\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"topics\\\": \\\"A dictionary where keys are topic numbers and values are lists of top words associated with each topic\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"beautifulsoup4\\\", \\\"requests\\\", \\\"scikit-learn\\\", \\\"transformers\\\"],\\n    \\\"web APIs\\\": [],\\n    \\\"machine learning models\\\": [\\\"BERT\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A progressive congresswoman trying to pass legislation related to prison reform", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legislation Similarity Search Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the abstract of a proposed legislation and returns a list of similar legislation that have been passed or proposed in different jurisdictions.\\\",\\n\\\"function_name\\\": \\\"get_similar_legislation\\\",\\n\\\"input_args\\\": [\\\"legislation_abstract\\\"],\\n\\\"return\\\": \\\"A list of similar legislation\\\",\\n\\\"depend\\\": \\\"IBM Watson Natural Language Understanding API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Mexican citizen who consistently votes for the leftist political party MORENA (Movimiento Regeneración Nacional).", "synthesized text": "\"{\\n\\\"name\\\": \\\"Election Results Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for retrieving the percentage of votes that the MORENA party obtained in a specific year and state in Mexico. It uses the INE (Instituto Nacional Electoral) API.\\\",\\n\\\"function_name\\\": \\\"get_election_results\\\",\\n\\\"input_args\\\": [\\\"year\\\", \\\"state\\\"],\\n\\\"return\\\": \\\"The percentage of votes that the MORENA party obtained.\\\",\\n\\\"depend\\\": \\\"INE API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an enthusiastic follower of MrShibolet and an active member of the Israeli gaming community", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Game Statistics Interface\\\",\\n  \\\"description\\\": \\\"This interface returns statistics about a particular game using RAWG's API. It returns a dictionary with information about the game, including its name, release date, ratings, and description.\\\",\\n  \\\"function_name\\\": \\\"get_game_statistics\\\",\\n  \\\"input_args\\\": \\\"game_name\\\",\\n  \\\"return\\\": \\\"A dictionary with keys 'name', 'release_date', 'rating', and 'description', each containing the corresponding information about the game.\\\",\\n  \\\"depend\\\": \\\"RAWG's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A woman searching for her long-lost twin brother who was separated at birth", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Face Recognition Interface\\\",\\n  \\\"description\\\": \\\"This interface compares two faces and returns a similarity score. The higher the score, the more likely the two faces belong to identical twins.\\\",\\n  \\\"function_name\\\": \\\"compare_faces\\\",\\n  \\\"input_args\\\": {\\n    \\\"image_path_1\\\": \\\"Path to the first image file\\\",\\n    \\\"image_path_2\\\": \\\"Path to the second image file\\\"\\n  },\\n  \\\"return\\\": \\\"A similarity score between the two faces. Higher scores indicate higher similarity.\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"dlib\\\", \\\"numpy\\\", \\\"PIL\\\", \\\"skimage\\\", \\\"matplotlib\\\"],\\n    \\\"pretrained_models\\\": [\\\"shape_predictor_68_face_landmarks.dat\\\", \\\"dlib_face_recognition_resnet_model_v1.dat\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A field technician who performs feasibility tests on proposed design solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Design Solution Feasibility Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the PyBullet physics simulation library to simulate and evaluate the physical feasibility of a proposed design. Users provide a 3D model file of their design and the simulation parameters, and the interface returns a feasibility score based on the design's performance under the given parameters.\\\",\\n\\\"function_name\\\": \\\"evaluate_design_feasibility\\\",\\n\\\"input_args\\\": {\\n    \\\"model_file\\\": \\\"A string representing the path to the 3D model file (in URDF, SDF, or MJCF format) of the design to be evaluated\\\",\\n    \\\"simulation_params\\\": \\\"A dictionary with keys 'position' and 'orientation', representing the initial position and orientation of the model in the simulation\\\"\\n},\\n\\\"return\\\": \\\"A number representing the feasibility score of the design. Higher scores represent higher feasibility.\\\",\\n\\\"depend\\\": \\\"PyBullet physics simulation library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A videographer focusing on visually rich human interest stories that complement economic narratives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Scene Segmentation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to segment different parts of a video into different characters, background, etc.\\\",\\n\\\"function_name\\\": \\\"segment_video\\\",\\n\\\"input_args\\\": [\\\"path_to_video\\\"],\\n\\\"return\\\": \\\"a sequence of segmented images from the video\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, cv2\\\"\\n}\"", "description": "tool development"}
{"input persona": "An innocent sibling of the officer, completely unaware of their involvement in covert operations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Character Profile Generator Interface\\\",\\n  \\\"description\\\": \\\"Generate a detailed character profile including name, location, email, username, password, birthday, etc based on nationality and gender.\\\",\\n  \\\"function_name\\\": \\\"generate_character_profile\\\",\\n  \\\"input_args\\\": [\\\"nationality\\\", \\\"gender\\\"],\\n  \\\"return\\\": \\\"A dictionary with the character's profile details.\\\",\\n  \\\"depend\\\": \\\"randomuser.me API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A religious studies scholar arguing the moral consequences of tampering with life's blueprint", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Modification Ethical Discussion Interface\\\",\\n\\\"description\\\": \\\"This interface uses the EthicsNet API to generate a structured ethical analysis on the topic of genetic modification. The user only needs to input the specific aspect of genetic modification they are interested in, and our interface will return a structured ethical discussion on the topic.\\\",\\n\\\"function_name\\\": \\\"get_ethical_discussion_on_genetic_modification\\\",\\n\\\"input_args\\\": \\\"aspect\\\",\\n\\\"return\\\": \\\"A structured ethical discussion on the specified aspect of genetic modification.\\\",\\n\\\"depend\\\": \\\"EthicsNet API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a bureaucratic satirist.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Simplification Interface\\\",\\n\\\"description\\\": \\\"An interface that simplifies complex sentences into more understandable language.\\\",\\n\\\"function_name\\\": \\\"simplify_text\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"A complex sentence that needs simplification.\\\"},\\n\\\"return\\\": \\\"A simplified version of the input text.\\\",\\n\\\"depend\\\": \\\"Huggingface: tuner007/pegasus_paraphrase\\\"\\n}\"", "description": "tool development"}
{"input persona": "A billionaire sheikh passionate about breeding and racing Arabian horses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horse Race Outcome Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes details about participating horses as input and predicts the outcome of the race.\\\",\\n\\\"function_name\\\": \\\"horse_race_outcome_prediction\\\",\\n\\\"input_args\\\": \\\"horse_details\\\",\\n\\\"return\\\": \\\"A list of probabilities of each horse winning the race.\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library and a pre-trained model for horse race outcome prediction\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow lawyer specializing in workers' compensation law who provides insights on overlapping issues", "synthesized text": "\"{\\n\\\"name\\\": \\\"Overlapping Issues Identification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a BERT model from HuggingFace to identify overlapping issues in two different legal documents. The user inputs the paths to two document files, and the interface returns a list of overlapping issues.\\\",\\n\\\"function_name\\\": \\\"get_overlapping_issues\\\",\\n\\\"input_args\\\": [\\\"path_to_doc1\\\", \\\"path_to_doc2\\\"],\\n\\\"return\\\": \\\"List of overlapping issues\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library (BERT model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A visual artist who takes inspiration from classical music for her paintings", "synthesized text": "\"{\\n\\\"name\\\" : \\\"Classical Music Feature Extraction Interface\\\",\\n\\\"description\\\" : \\\"An interface to extract the main features from a classical music file which can be used as a source of inspiration for visual artists. The interface uses a pre-trained model from TensorFlow, YAMNet, to identify the most prominent feature of the audio.\\\",\\n\\\"function_name\\\" : \\\"extract_classical_music_features\\\",\\n\\\"input_args\\\" : \\\"file_path : String\\\",\\n\\\"return\\\" : \\\"Dictionary {class : String, score : Float}\\\",\\n\\\"depend\\\" : \\\"TensorFlow, TensorFlow Hub, YAMNet model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a patient who has had Kennedy’s disease for years", "synthesized text": "\"{\\n\\\"name\\\": \\\"Kennedy's Disease Symptom Tracker\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained BERT model from huggingface to classify the severity of a patient's symptoms based on their description. It helps patients with Kennedy's disease track the progression of their symptoms over time.\\\",\\n\\\"function_name\\\": \\\"classify_symptom_severity\\\",\\n\\\"input_args\\\": \\\"symptom_description - a text description of the patient's symptoms\\\",\\n\\\"return\\\": \\\"The severity score of the symptoms, as predicted by the BERT model\\\",\\n\\\"depend\\\": \\\"huggingface transformers library, bert-base-multilingual-cased model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A trusted local guide with extensive knowledge of the conflict zone and connections to ensure safe passage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Safe Passage Route Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Graph Theory and Dijkstra's algorithm to find the safest passage route in a conflict zone. It requires input of the current location and destination and returns the safest passage route.\\\",\\n\\\"function_name\\\": \\\"get_safe_passage\\\",\\n\\\"input_args\\\": {\\n  \\\"start\\\": \\\"A string representing the current location\\\",\\n  \\\"end\\\": \\\"A string representing the destination location\\\"},\\n\\\"return\\\": \\\"A list of strings representing the locations in the safest route order\\\",\\n\\\"depend\\\": \\\"NetworkX library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Сотрудник разработки проектов, который может предложить студенту реальный опыт и руководство по веб-разработке", "synthesized text": "\"{\\n\\\"name\\\": \\\"Web Page Source Code Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface takes a URL and returns the source code of the webpage. This helps beginners in web development understand how different components of a webpage are structured and implemented.\\\",\\n\\\"function_name\\\": \\\"get_source_code\\\",\\n\\\"input_args\\\": {\\\"url\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A bakery owner seeking guidance on tax deductions for ingredients and equipment purchases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tax Deduction Calculation Interface\\\",\\n\\\"description\\\": \\\"Calculates the potential tax deductions for a bakery based on the cost of goods and equipment. Uses predefined tax deduction rates.\\\",\\n\\\"function_name\\\": \\\"get_tax_deduction\\\",\\n\\\"input_args\\\": [\\\"goods_cost\\\", \\\"equipment_cost\\\"],\\n\\\"return\\\": \\\"The total amount of tax deduction the bakery owner is eligible for.\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A programmer specializing in developing algorithms and software tools for analyzing cardiac data", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Heart Rate Variability Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface to analyze heart rate variability from a csv file containing beat-to-beat intervals. It provides both time-domain and frequency-domain HRV metrics.\\\",\\n  \\\"function_name\\\": \\\"analyze_heart_rate\\\",\\n  \\\"input_args\\\": {\\n    \\\"hrv_data_file\\\": \\\"path to the csv file containing heart rate data\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary containing both time-domain and frequency-domain HRV metrics.\\\",\\n  \\\"depend\\\": \\\"heartpy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a member of a neighboring city's drums and pipes band", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drum Beat Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a MIDI file with a drum beat based on the specified drum type and rhythm pattern.\\\",\\n\\\"function_name\\\": \\\"generate_drum_beat\\\",\\n\\\"input_args\\\": [\\\"drum_type\\\", \\\"rhythm_pattern\\\"],\\n\\\"return\\\": \\\"A MIDI file with the generated drum beat, or an error message if invalid inputs are provided.\\\",\\n\\\"depend\\\": \\\"MIDIUtil library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a psychiatric therapist who is interested in the link between drug addiction and economic stress.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Stress and Drug Addiction Correlation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Scholar to collect research papers related to the input keywords, and then uses a pre-trained model from Hugging Face to extract key points from the abstracts of these papers.\\\",\\n\\\"function_name\\\": \\\"get_key_points_on_topic\\\",\\n\\\"input_args\\\": {\\n    \\\"keywords\\\": \\\"a string of search terms separated by '+' symbols\\\"\\n},\\n\\\"return\\\": \\\"A numpy array of key points extracted from the abstracts of the research papers\\\",\\n\\\"depend\\\": \\\"Python requests library, Google Scholar API, Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a YA fantasy novel fan and a fanatic babysitter.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Books API to recommend books based on a given genre and age range.\\\",\\n\\\"function_name\\\": \\\"get_book_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"genre\\\": \\\"The genre of the books to recommend. This can be any genre, such as 'fantasy', 'science fiction', 'romance', etc.\\\",\\n    \\\"min_age\\\": \\\"The minimum age for the intended audience of the recommended books.\\\",\\n    \\\"max_age\\\": \\\"The maximum age for the intended audience of the recommended books.\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended books that match the given genre and are suitable for the given age range.\\\",\\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular YouTuber who shares personal stories about how medical marijuana has improved their quality of life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Strain Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface to recommend marijuana strains based on a given medical condition. It fetches data from the Strain API, which provides information and user reviews on different strains of marijuana.\\\",\\n\\\"function_name\\\": \\\"recommend_strains_for_condition\\\",\\n\\\"input_args\\\": \\\"condition - a string representing the medical condition the user is trying to alleviate\\\",\\n\\\"return\\\": \\\"A list of top 5 recommended strains for the given medical condition, sorted by user ratings.\\\",\\n\\\"depend\\\": \\\"Uses the Strain API (https://strainapi.evanbusse.com/)\\\"\\n}\"", "description": "tool development"}
{"input persona": "Sports commentator with a particular fondness for unexpected twists", "synthesized text": "\"{\\n\\\"name\\\": \\\"Live Game Score API Interface\\\",\\n\\\"description\\\": \\\"This interface provides live game score updates for a given sport and teams. It leverages sports data APIs like Sportradar, ESPN etc.\\\",\\n\\\"function_name\\\": \\\"get_live_game_score\\\",\\n\\\"input_args\\\": [\\\"sport\\\", \\\"team1\\\", \\\"team2\\\"],\\n\\\"return\\\": \\\"A dictionary containing the sport, teams, their scores and game status, or a message if no live game is found.\\\",\\n\\\"depend\\\": \\\"requests library, sports data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud Pakistani friend who knew her since school", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translation Interface\\\", \\n\\\"description\\\": \\\"This interface uses Huggingface's transformers library to translate text from one language to another. The user inputs the text in the original language and the desired target language (in ISO 639-1 code), and the function returns the translated text.\\\", \\n\\\"function_name\\\": \\\"translate_text\\\", \\n\\\"input_args\\\": [\\\"text\\\", \\\"target_language\\\"], \\n\\\"return\\\": \\\"translated text\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A non-native English speaker who poorly understands the culture of British TV shows.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"British TV Show Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that recommends a British TV show based on the user's favorite TV show. The recommendation is made by comparing the similarity of the plot summaries.\\\",\\n  \\\"function_name\\\": \\\"find_similar_british_tv_show\\\",\\n  \\\"input_args\\\": [\\\"favorite_show\\\"],\\n  \\\"return\\\": \\\"A string of the recommended British TV show's name.\\\",\\n  \\\"depend\\\": [\\\"transformers\\\", \\\"torch\\\", \\\"requests\\\", \\\"OMDb API\\\", \\\"BERT model from huggingface\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A member of parliament who supports the idea of harmonizing domestic law with international legal principles", "synthesized text": "\"{\\n\\\"name\\\": \\\"International Law Compliance Check Interface\\\",\\n\\\"description\\\": \\\"This interface takes a specific domestic law as input and returns a comparison with corresponding international legal principles.\\\",\\n\\\"function_name\\\": \\\"compare_domestic_law_with_international_law\\\",\\n\\\"input_args\\\": {\\\"domestic_law\\\": \\\"a string representing the specific domestic law\\\"},\\n\\\"return\\\": \\\"a dictionary containing detailed information and comparison between the specific domestic law and corresponding international legal principles\\\",\\n\\\"depend\\\": \\\"Python Requests Library, Legal Entity Identifier (LEI) Info API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineering student who never practiced decorator design pattern.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Decorator Design Pattern Interface\\\",\\n\\\"description\\\": \\\"This interface applies a pre-defined decorator to an input function and executes it. The decorator adds some functionality before and after the execution of the function.\\\",\\n\\\"function_name\\\": \\\"use_decorator\\\",\\n\\\"input_args\\\": {\\n    \\\"func_name\\\": \\\"The function to which the decorator should be applied.\\\"\\n    },\\n\\\"return\\\": \\\"The result of the execution of the decorated function.\\\",\\n\\\"depend\\\": \\\"Python's in-built functionality\\\"\\n}\"", "description": "tool development"}
{"input persona": "A petrochemical plant manager always on the lookout for industry insights and competitive edges", "synthesized text": "\"{\\n\\\"name\\\": \\\"Oil Price Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest and historical oil prices for a given type of oil. It leverages the Oilpriceapi.com API.\\\",\\n\\\"function_name\\\": \\\"get_oil_price\\\",\\n\\\"input_args\\\": \\\"oil_type - A string representing the type of oil (e.g., 'BRENT_CRUDE', 'WTI')\\\",\\n\\\"return\\\": \\\"A dictionary with the oil type, its current price, and its recent price trend.\\\",\\n\\\"depend\\\": \\\"requests library, Oilpriceapi.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a technology news journalist who has been covering the RFID industry for a decade", "synthesized text": "\"{\\n\\\"name\\\": \\\"RFID Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze RFID data from a CSV file, providing the number of unique tags, the most frequently read tag, and the least frequently read tag.\\\",\\n\\\"function_name\\\": \\\"analyze_rfid_data\\\",\\n\\\"input_args\\\": \\\"csv_file_path\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'unique_tags', 'most_freq_tag', 'least_freq_tag' and their respective values.\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "a person who has just started watching professional wrestling last month.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wrestling Match Highlight Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from HuggingFace to generate a summary of wrestling match highlights. The user only needs to input the text file path containing details of a wrestling match, and the interface will return a summary of the wrestling match highlights.\\\",\\n\\\"function_name\\\": \\\"summarize_wrestling_match\\\",\\n\\\"input_args\\\": [\\\"text_file_path\\\"],\\n\\\"return\\\": \\\"A string summary of the wrestling match highlights.\\\",\\n\\\"depend\\\": [\\\"HuggingFace's transformer library, specifically the 'facebook/bart-large-cnn' model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A developer using JLibTorrent in Java", "synthesized text": "\"{\\n\\\"name\\\": \\\"Torrent File Download Interface\\\",\\n\\\"description\\\": \\\"This interface helps to download files using BitTorrent protocol. Simply input the magnet link of the file to be downloaded and the destination to store the downloaded file.\\\",\\n\\\"function_name\\\": \\\"download_torrent\\\",\\n\\\"input_args\\\": [\\\"magnet_link\\\", \\\"destination_path\\\"],\\n\\\"return\\\": \\\"This function does not return any value but prints the progress of the download and notifies when the download is complete.\\\",\\n\\\"depend\\\": \\\"This function uses the JLibTorrent library in python.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A commercial pilot who dreams of flying the fastest and most advanced fighter jets", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aircraft Specification Interface\\\",\\n\\\"description\\\": \\\"This interface fetches real-time data about aircraft specifications using the OpenSky API.\\\",\\n\\\"function_name\\\": \\\"get_aircraft_specifications\\\",\\n\\\"input_args\\\": \\\"icao24 - The unique ICAO24 code of the aircraft\\\",\\n\\\"return\\\": \\\"A JSON object containing detailed specifications of the aircraft, such as manufacturer, model, owner, etc.\\\",\\n\\\"depend\\\": \\\"OpenSky API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior financial manager overseeing the financial analyst's work and providing guidance on complex financial transactions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the historical market data for a given stock and calculates key statistical measures such as mean, variance, standard deviation, maximum and minimum price.\\\",\\n\\\"function_name\\\": \\\"analyze_financial_data\\\",\\n\\\"input_args\\\": {\\n    \\\"ticker\\\": \\\"String representing the ticker symbol of the stock\\\",\\n    \\\"start_date\\\": \\\"String representing the starting date in the format 'yyyy-mm-dd'\\\",\\n    \\\"end_date\\\": \\\"String representing the ending date in the format 'yyyy-mm-dd'\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with key statistical measures.\\\",\\n\\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"yfinance\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A young linguistics undergraduate fascinated by the evolution of Bengali language under colonial rule", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bengali Text to Speech Interface\\\",\\n  \\\"description\\\": \\\"Converts Bengali text to speech using a pre-trained model from Hugging Face's Transformer library. Returns a .wav file of the spoken text.\\\",\\n  \\\"function_name\\\": \\\"bengali_text_to_speech\\\",\\n  \\\"input_args\\\": {\\\"text\\\": \\\"string\\\"},\\n  \\\"return\\\": {\\\"path_to_audio_file\\\": \\\"string\\\"},\\n  \\\"depend\\\": \\\"Transformers, SoundFile\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young child who looks forward to visiting the store and receiving stickers from the staff", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Store Visit Sticker Reward Predictor Interface\\\",\\n  \\\"description\\\": \\\"Predicts how many stickers a child might receive based on the child's behavior and the store's policy.\\\",\\n  \\\"function_name\\\": \\\"predict_sticker_reward\\\",\\n  \\\"input_args\\\": {\\n    \\\"visit_description\\\": \\\"a description of the child's behavior during the store visit\\\"\\n  },\\n  \\\"return\\\": \\\"the predicted number of stickers (integer)\\\",\\n  \\\"depend\\\": \\\"HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A PhD student teaching a seminar on research methods and experimental design", "synthesized text": "\"{\\n\\\"name\\\": \\\"Statistical Test Selection Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to perform various statistical tests by simply specifying the test type and necessary parameters. The interface uses the Pingouin library to conduct the tests.\\\",\\n\\\"function_name\\\": \\\"select_statistical_test\\\",\\n\\\"input_args\\\": {\\\"data_file_path\\\": \\\"Path to CSV data file.\\\", \\\"test_type\\\": \\\"Type of statistical test ('t-test', 'anova', 'correlation').\\\", \\\"test_params\\\": \\\"Parameters needed for the chosen test.\\\"},\\n\\\"return\\\": \\\"Statistical test results.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, Pingouin\\\"\\n}\"", "description": "tool development"}
{"input persona": "A career advisor specialized in agriculture and animal health sectors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Recommender Interface\\\",\\n\\\"description\\\": \\\"This interface leverages a machine learning model to recommend jobs in the agriculture and animal health sectors based on a person's skills and experience.\\\",\\n\\\"function_name\\\": \\\"job_recommender\\\",\\n\\\"input_args\\\": \\\"skills_experience\\\",\\n\\\"return\\\": \\\"list of recommended jobs\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"sklearn\\\"], \\\"machine learning models\\\": [\\\"TfidfVectorizer, cosine_similarity\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A surf instructor offering lessons in hostels along the coast, embracing the beach lifestyle", "synthesized text": "\"{\\n\\\"name\\\": \\\"Surf Forecasting Interface\\\",\\n\\\"description\\\": \\\"This interface uses the StormGlass API to provide surf forecasts for a given beach location. It returns the wave height, water temperature, and wind speed.\\\",\\n\\\"function_name\\\": \\\"get_surf_forecast\\\",\\n\\\"input_args\\\": \\\"beach_location - a tuple containing the latitude and longitude of the beach\\\",\\n\\\"return\\\": \\\"A dictionary with wave height, water temperature, and wind speed for the specified beach location.\\\",\\n\\\"depend\\\": \\\"requests library, StormGlass API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A historian and author who provides valuable insights into the historical significance of different properties", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Building Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the OpenStreetMap API to retrieve detailed information about historical buildings in a specific area.\\\",\\n\\\"function_name\\\": \\\"get_historical_buildings_info\\\",\\n\\\"input_args\\\": \\\"area - the area (city, town, village, etc.) of interest\\\",\\n\\\"return\\\": \\\"A JSON object containing detailed information about historical buildings in the specified area.\\\",\\n\\\"depend\\\": \\\"Python requests library, OpenStreetMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A literary agent who provides feedback and guidance on incorporating software engineering concepts into the writer's stories", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Snippet Interface\\\",\\n\\\"description\\\": \\\"Generates code snippets based on a natural language description. Useful for incorporating realistic software engineering concepts into stories.\\\",\\n\\\"function_name\\\": \\\"generate_code\\\",\\n\\\"input_args\\\": [\\\"description\\\"],\\n\\\"return\\\": \\\"Three possible code snippets that could achieve the described functionality.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library (microsoft/CodeBERTa-base model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from the Department of Environmental Conservation who allocates funding for wetland restoration projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wetland Restoration Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface that leverages a machine learning model to predict the cost of wetland restoration based on the area, type of wetland, and location.\\\",\\n\\\"function_name\\\": \\\"estimate_restoration_cost\\\",\\n\\\"input_args\\\": {\\\"area\\\": \\\"float - The area of the wetland to be restored in square meters\\\", \\n               \\\"wetland_type\\\": \\\"string - The type of wetland (e.g., 'marsh', 'swamp')\\\", \\n               \\\"location\\\": \\\"string - The location of the wetland (e.g., 'Upstate NY', 'Long Island')\\\"},\\n\\\"return\\\": \\\"float - The estimated cost of restoration in USD\\\",\\n\\\"depend\\\": \\\"Scikit-learn library, RandomForestRegressor model, Pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个在丹麦长大的花样滑冰教练", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ice Skating Routine Generator Interface\\\",\\n\\\"description\\\": \\\"Generate a new sequence of ice skating moves based on user's skill level.\\\",\\n\\\"function_name\\\": \\\"generate_ice_skating_routine\\\",\\n\\\"input_args\\\": \\\"skill_level - The skill level of the user.\\\",\\n\\\"return\\\": \\\"A sequence of new ice skating moves.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\"], \\\"machine learning models\\\": [\\\"ice_skating_routine_generator.h5\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A fast-food worker who earns the minimum wage.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meal Planner Interface\\\",\\n\\\"description\\\": \\\"Given a budget in calories and dietary restrictions, it returns a meal plan for the week that fits the criteria.\\\",\\n\\\"function_name\\\": \\\"get_meal_plan\\\",\\n\\\"input_args\\\": [\\\"budget\\\", \\\"diet\\\"],\\n\\\"return\\\": \\\"A week's worth of meal plans that meet the specified criteria\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Spoonacular API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A camera operator who captures the action on the ice during hockey games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Slow Motion Video Interface\\\",\\n\\\"description\\\": \\\"This interface takes a video file path and a slow motion factor as inputs, and outputs a slow motion version of the original video.\\\",\\n\\\"function_name\\\": \\\"generate_slow_motion_video\\\",\\n\\\"input_args\\\": {\\\"path_to_video\\\": \\\"string\\\", \\\"slow_motion_factor\\\": \\\"float\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"cv2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A veterinary specialist who has knowledge about the genetics and traits associated with different coat colors and patterns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cat Coat Color Prediction Interface\\\", \\n\\\"description\\\": \\\"Predicts the coat color and pattern of a cat based on its genetic information.\\\", \\n\\\"function_name\\\": \\\"predict_coat_color\\\", \\n\\\"input_args\\\": [\\\"genetic_info\\\"], \\n\\\"return\\\": \\\"String indicating the predicted coat color and pattern of the cat.\\\", \\n\\\"depend\\\": \\\"A machine learning model trained on a dataset of cat genetics and associated coat colors and patterns.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Miffed Indian traveler who was affected by GoAir’s flight cancellation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Compensation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the AviationStack API to check if a flight was cancelled and then uses EU's Flight Compensation Regulation 261/2004 to calculate the amount of compensation the user is eligible for.\\\",\\n\\\"function_name\\\": \\\"get_compensation\\\",\\n\\\"input_args\\\": [\\\"flight_number\\\", \\\"flight_date\\\", \\\"flight_distance\\\"],\\n\\\"return\\\": \\\"Compensation amount in Euros or a message indicating that no compensation is due.\\\",\\n\\\"depend\\\": \\\"AviationStack API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a veteran sales manager in the water treatment industry from Brunei", "synthesized text": "\"{\\n\\\"name\\\": \\\"Water Quality Check Interface\\\",\\n\\\"description\\\": \\\"This interface takes a csv file path as input and plots the trend of each water quality parameter over time.\\\",\\n\\\"function_name\\\": \\\"plot_water_quality_trends\\\",\\n\\\"input_args\\\": {\\\"csv_file_path\\\": \\\"string representing the path to the csv file\\\"},\\n\\\"return\\\": \\\"No return value. Plots are displayed directly.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A commercial airline pilot responsible for safely transporting military personnel and cargo to international destinations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Route Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses real-time flight data to find the optimal flight route between a source and a destination. The optimization considers factors like weather, wind speed, and air traffic.\\\",\\n\\\"function_name\\\": \\\"optimise_flight_route\\\",\\n\\\"input_args\\\": [\\\"source\\\", \\\"destination\\\"],\\n\\\"return\\\": \\\"A list of flights that make up the optimal route.\\\",\\n\\\"depend\\\": {\\\"Web API\\\": \\\"OpenSky API\\\", \\\"Python Libraries\\\": [\\\"requests\\\", \\\"scipy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A former police chief who supports comprehensive background checks and stricter regulations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Firearm Background Check Interface\\\",\\n  \\\"description\\\": \\\"An interface for comprehensive background checks for firearm purchases using the National Instant Criminal Background Check System (NICS). Users only need to input necessary personal details of the prospective buyer, and the interface will return the approval status for the firearm purchase.\\\",\\n  \\\"function_name\\\": \\\"firearm_background_check\\\",\\n  \\\"input_args\\\": {\\n    \\\"first_name\\\": \\\"First name of the prospective buyer\\\",\\n    \\\"last_name\\\": \\\"Last name of the prospective buyer\\\",\\n    \\\"dob\\\": \\\"Date of birth of the prospective buyer\\\",\\n    \\\"ssn\\\": \\\"Social Security Number of the prospective buyer\\\"\\n  },\\n  \\\"return\\\": \\\"Approval status for the firearm purchase\\\",\\n  \\\"depend\\\": \\\"National Instant Criminal Background Check System (NICS) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "As an animal enthusiast and resident of New York City who is thinking about moving in with a pet, with a strong sense of cleanliness and orderliness.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Compatibility Score Interface\\\",\\n\\\"description\\\": \\\"Predicts the compatibility of a pet with the user's lifestyle and recommends suitable pet types.\\\",\\n\\\"function_name\\\": \\\"predict_pet_compatibility\\\",\\n\\\"input_args\\\": \\\"user_lifestyle\\\",\\n\\\"return\\\": \\\"A dictionary with 'compatibility_score' and 'recommended_pet_type' as keys.\\\",\\n\\\"depend\\\": \\\"Petfinder API, Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graduate student researching the representation of national identity in contemporary Balkan poetry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nationality Detection Interface\\\",\\n\\\"description\\\": \\\"An interface to determine the nationality of a poem based on its language. The language detection is done via the langid.py library. Only works for languages uniquely associated with a single Balkan country.\\\",\\n\\\"function_name\\\": \\\"infer_nationality\\\",\\n\\\"input_args\\\": \\\"poem_text - a string containing the text of the poem\\\",\\n\\\"return\\\": \\\"A string representing the inferred nationality of the poem ('Bosnia and Herzegovina', 'Bulgaria', 'Croatia', 'North Macedonia', 'Montenegro', 'Serbia', 'Slovenia', or 'Unknown')\\\",\\n\\\"depend\\\": \\\"Python library: langid.py\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physics professor who aids in understanding the scientific principles behind illusions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Optical Illusion Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface takes in an image of an optical illusion and returns the type of illusion as well as a brief explanation about the scientific principles behind it.\\\",\\n\\\"function_name\\\": \\\"analyze_illusion\\\",\\n\\\"input_args\\\": \\\"path_to_img - The path to the image of the optical illusion.\\\",\\n\\\"return\\\": \\\"Returns the type of optical illusion and a brief explanation about the scientific principles behind the illusion.\\\",\\n\\\"depend\\\": \\\"tensorflow, huggingface (for the pre-trained models), and a Large Language Model (for generating the explanation).\\\"\\n}\"", "description": "tool development"}
{"input persona": "A music instructor who encourages their students to pursue their passion for music like BTS", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Key Detection Interface\\\",\\n\\\"description\\\": \\\"An interface that detects the key of a song given an audio file. This can be useful for music students who are trying to learn a new song and need to know the key.\\\",\\n\\\"function_name\\\": \\\"detect_song_key\\\",\\n\\\"input_args\\\": \\\"path_to_audio - A string representing the path to the audio file.\\\",\\n\\\"return\\\": \\\"A string representing the detected key of the song.\\\",\\n\\\"depend\\\": \\\"Librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A meticulous artist who creates breathtaking sets that complement the costumes and transport audiences to different time periods", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Import and Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface imports 3D models from a given file path and visualizes it using matplotlib. This allows users to quickly and easily preview 3D models for their sets, without the need for complex CAD software.\\\",\\n\\\"function_name\\\": \\\"visualize_3d_model\\\",\\n\\\"input_args\\\": \\\"filepath\\\",\\n\\\"return\\\": \\\"A matplotlib figure visualizing the 3D model\\\",\\n\\\"depend\\\": \\\"Python's trimesh and matplotlib libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "Aspiring musician and big fan of Katie Wighton", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Key Detection Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to detect the key of a song by inputting an audio file. It utilizes the librosa library to analyze the audio file and estimate the key.\\\",\\n\\\"function_name\\\": \\\"detect_song_key\\\",\\n\\\"input_args\\\": \\\"audio_file\\\",\\n\\\"return\\\": \\\"The estimated key of the song.\\\",\\n\\\"depend\\\": \\\"librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who encounters the same Mono XML parsing error, using humor as a coping mechanism while debugs the issue.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Error Debugging Interface\\\",\\n\\\"description\\\": \\\"This interface helps users by fetching relevant StackOverflow questions for the error they are encountering and also lightens the mood by generating a humoristic comment related to the error.\\\",\\n\\\"function_name\\\": \\\"debug_and_cope\\\",\\n\\\"input_args\\\": {\\\"error\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"questions\\\": \\\"list of StackOverflow questions\\\", \\\"comment\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"Python libraries\\\": [\\\"traceback\\\", \\\"requests\\\", \\\"transformers\\\"], \\\"Web APIs\\\": [\\\"StackOverflow API\\\"], \\\"Machine Learning Models\\\": [\\\"GPT2 Language Model from Hugging Face\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Students who study Brazilian history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brazilian History Quiz Generator Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about a specific topic related to Brazilian history from Wikipedia and uses a large language model to generate quiz questions from this information.\\\",\\n\\\"function_name\\\": \\\"generate_quiz_questions\\\",\\n\\\"input_args\\\": {\\\"topic\\\": \\\"The name of a topic related to Brazilian history.\\\"},\\n\\\"return\\\": {\\\"questions\\\": \\\"A list of quiz questions related to the input topic.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"], \\\"Web APIs\\\": [\\\"Wikipedia API\\\"], \\\"machine learning models\\\": [\\\"Large Language Model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged novice Pilates practitioner with zero understanding of sports science.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Pilates Exercise Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a machine learning model to recommend a set of Pilates exercises based on the user's age, gender, fitness level, and physical conditions.\\\",\\n  \\\"function_name\\\": \\\"recommend_pilates_exercises\\\",\\n  \\\"input_args\\\": [\\\"age\\\", \\\"gender\\\", \\\"fitness_level\\\", \\\"physical_conditions\\\"],\\n  \\\"return\\\": \\\"A list of recommended Pilates exercises.\\\",\\n  \\\"depend\\\": [\\\"sklearn.externals.joblib\\\", \\\"Machine Learning Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A biochemist specializing in the study of lipids and their impact on human health", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lipid Structure Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the structure of lipids based on their composition. Users only need to input the lipid composition (a string of lipid molecules), and our interface will return the estimated structure of the lipid.\\\",\\n\\\"function_name\\\": \\\"predict_lipid_structure\\\",\\n\\\"input_args\\\": \\\"lipid_composition\\\",\\n\\\"return\\\": \\\"a tuple containing three elements representing the fraction of amino acids which tend to be in helix, turn or sheet\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A scriptwriter working on a psychological thriller film", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Style Transformation Interface\\\",\\n\\\"description\\\": \\\"Transforms the style of the input text to match a desired style and intensity, useful for scriptwriters to adapt dialogues to specific characters or contexts.\\\",\\n\\\"function_name\\\": \\\"style_transform\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"style\\\", \\\"intensity\\\"],\\n\\\"return\\\": \\\"transformed_text\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A documentary filmmaker exploring the intricate relationship between bees and agriculture", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes the content of a video file, identifying scenes with bees, flowers, farming activities, etc.\\\",\\n\\\"function_name\\\": \\\"analyze_video\\\",\\n\\\"input_args\\\": [\\\"path_to_video\\\"],\\n\\\"return\\\": \\\"A detailed analysis of video content\\\",\\n\\\"depend\\\": [\\\"Google's Video Intelligence API\\\", \\\"OpenAI's CLIP\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical company seeking guidance on maintaining compliance with FDA regulations in document management", "synthesized text": "\"{\\n\\\"name\\\": \\\"FDA Compliance Document Verification Interface\\\",\\n\\\"description\\\": \\\"An interface that uses NLP to analyze a document and identify potential areas of non-compliance with FDA regulations.\\\",\\n\\\"function_name\\\": \\\"compliance_check\\\",\\n\\\"input_args\\\": \\\"path_to_doc - a string representing the path to the document that needs to be checked for compliance.\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary represents a potential area of non-compliance, with keys for 'entity_group' (the type of entity) and 'score' (the confidence score of the entity detection).\\\",\\n\\\"depend\\\": \\\"Python's built-in 'open' function, Spacy, and the 'dslim/bert-base-NER' model from HuggingFace.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A colleague of Paul Brumer in the field of theoretical chemistry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum State Solver Interface\\\",\\n\\\"description\\\": \\\"This interface calculates quantum properties such as energy and dipole moment for a molecule given its chemical formula.\\\",\\n\\\"function_name\\\": \\\"get_quantum_state\\\",\\n\\\"input_args\\\": [\\\"chemical_formula\\\", \\\"property_to_calculate\\\"],\\n\\\"return\\\": \\\"The calculated value of the requested quantum property (energy or dipole moment).\\\",\\n\\\"depend\\\": \\\"Psi4 Python Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An economist daughter who challenges and refines her parent's coaching methods through intellectual debates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Indicator Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the historical data of an economic indicator from Federal Reserve Bank of St. Louis (FRED) API and returns a pandas dataframe.\\\",\\n\\\"function_name\\\": \\\"get_economic_indicator_data\\\",\\n\\\"input_args\\\": [\\\"indicator\\\"],\\n\\\"return\\\": \\\"Pandas DataFrame with date and value of the indicator.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas; Web APIs: FRED API\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a psychologist with expertise in behavior support systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emotion Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface takes in an audio file and recognizes the emotions in the speech using a pre-trained model from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"recognize_emotion\\\",\\n\\\"input_args\\\": [\\\"path_to_audio\\\"],\\n\\\"return\\\": \\\"A dictionary with the recognized emotions as keys and their corresponding scores as values.\\\",\\n\\\"depend\\\": [\\\"TensorFlow\\\", \\\"TensorFlow Hub\\\", \\\"PyDub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An elderly priest known for his sermons on the bond between humans, animals, and spirituality", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verse Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a question about the Bible and returns the relevant Bible verse. It uses a pre-trained BERT model that's fine-tuned for question answering.\\\",\\n\\\"function_name\\\": \\\"get_bible_verse\\\",\\n\\\"input_args\\\": [\\\"question\\\", \\\"bible_text\\\"],\\n\\\"return\\\": \\\"Relevant Bible verse\\\",\\n\\\"depend\\\": [\\\"transformers library (Hugging Face)\\\", \\\"BERT model fine-tuned for QA\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A field supervisor responsible for overseeing logging operations and preserving safety protocols", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Logging Safety Analysis Interface\\\",\\n  \\\"description\\\": \\\"Analyzes the safety protocols in the logging operations based on a text description and returns a safety score.\\\",\\n  \\\"function_name\\\": \\\"analyze_safety_protocols\\\",\\n  \\\"input_args\\\": {\\n    \\\"text_description\\\": \\\"A string describing the logging operations and safety protocols\\\"\\n  },\\n  \\\"return\\\": \\\"A float indicating the safety score of the operations. Positive score indicates good adherence to safety protocols, while negative score suggests possible safety concerns.\\\",\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"transformers\\\"],\\n    \\\"Machine Learning Models\\\": [\\\"distilbert-base-uncased-finetuned-sst-2-english\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An aspiring game developer who sees turning mods into standalone games as the ultimate achievement", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Game Asset Extraction Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface to extract game assets from mods and transform them into standalone game assets using OpenAI's DALL-E model\\\",\\n  \\\"function_name\\\": \\\"extract_game_assets\\\",\\n  \\\"input_args\\\": \\\"mod_file_path\\\",\\n  \\\"return\\\": \\\"A list of standalone game assets\\\",\\n  \\\"depend\\\": \\\"Python libraries (zipfile, os, tensorflow), Machine Learning Model (DALL-E)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A web marketing specialist who is also a taco lover", "synthesized text": "\"{\\n\\\"name\\\": \\\"Taco Recipe Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a taco recipe matching the given quantity using the Spoonacular API\\\",\\n\\\"function_name\\\": \\\"generate_tacos_recipe\\\",\\n\\\"input_args\\\": {\\n    \\\"quantity\\\": \\\"The number of tacos to make\\\"\\n},\\n\\\"return\\\": \\\"A list of ingredients with adjusted quantities\\\",\\n\\\"depend\\\": \\\"Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A classical musician who provides essential input on show scores and possible sound effects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Effect Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses the FreeSound API to find sound effects based on a provided keyword. Users input a keyword related to the sound effect they're looking for, and the interface returns a list of sounds matching that keyword.\\\",\\n\\\"function_name\\\": \\\"search_sound_effects\\\",\\n\\\"input_args\\\": \\\"keyword\\\",\\n\\\"return\\\": \\\"A list of sound names matching the provided keyword.\\\",\\n\\\"depend\\\": \\\"FreeSound API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a third-generation Louisiana oysterman", "synthesized text": "\"{\\n\\\"name\\\": \\\"Oyster Production Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes environmental parameters (temperature, salinity, and pH) as inputs and predicts the oyster production using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_oyster_production\\\",\\n\\\"input_args\\\": {\\n    \\\"temp\\\": \\\"Temperature of the water in degrees Celsius\\\",\\n    \\\"salinity\\\": \\\"Salinity of the water in parts per thousand\\\",\\n    \\\"pH\\\": \\\"pH of the water\\\"\\n},\\n\\\"return\\\": \\\"Predicted oyster production\\\",\\n\\\"depend\\\": \\\"scikit-learn, pandas, pickle\\\"\\n}\"", "description": "tool development"}
{"input persona": "a heartbroken resident who used to live in Maboussou village, Central African Republic.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emotion Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface takes a text string as input and outputs the predominant emotion in the text. It utilizes the 'cardiffnlp/twitter-roberta-base-emotion' model from Hugging Face Transformers.\\\", \\n\\\"function_name\\\": \\\"detect_emotion\\\", \\n\\\"input_args\\\": \\\"text\\\", \\n\\\"return\\\": \\\"emotion label\\\", \\n\\\"depend\\\": \\\"Hugging Face Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "PHP programmer", "synthesized text": "\"{\\n  \\\"name\\\": \\\"PHP Code Formatter\\\",\\n  \\\"description\\\": \\\"Formats PHP code according to the PHP-FIG PSR-1 and PSR-2 coding standards.\\\",\\n  \\\"function_name\\\": \\\"format_php_code\\\",\\n  \\\"input_args\\\": [\\\"code\\\"],\\n  \\\"return\\\": \\\"Formatted PHP code.\\\",\\n  \\\"depend\\\": [\\\"subprocess (Python Standard Library)\\\", \\\"PHP Coding Standards Fixer (PHP-FIG)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A community organizer from Little Venice concerned about local governance and community development.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Community Organizer Support Interface\\\",\\n    \\\"description\\\": \\\"Provides the most recent service requests or issues reported in a particular area, enabling a community organizer to identify local issues and better coordinate community development efforts.\\\",\\n    \\\"function_name\\\": \\\"get_recent_service_requests\\\",\\n    \\\"input_args\\\": \\\"location\\\",\\n    \\\"return\\\": \\\"A list of most recent service requests or issues reported in the input location. Each item in the list contains information like service request id, status, request type, address, updated date, etc.\\\",\\n    \\\"depend\\\": \\\"Open311 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mother who's planning a family trip to Romania.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\", \\n\\\"description\\\": \\\"This interface provides the weather forecast for the next 5 days for the input city.\\\", \\n\\\"function_name\\\": \\\"get_weather_forecast\\\", \\n\\\"input_args\\\": \\\"city - The name of the city to get the weather forecast for\\\", \\n\\\"return\\\": \\\"A dictionary mapping from date strings to the temperature forecast (min and max in Celsius) and weather description for that day.\\\", \\n\\\"depend\\\": \\\"Python's requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dental assistant with a soothing voice who provides comfort during dental procedures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dental Appointment Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface sends an automated voice reminder to a patient about their upcoming dental appointment.\\\",\\n\\\"function_name\\\": \\\"send_dental_appointment_reminder\\\",\\n\\\"input_args\\\": {\\n    \\\"patient_phone_number\\\": \\\"The patient's phone number to which the reminder will be sent.\\\",\\n    \\\"appointment_date\\\": \\\"The date of the patient's appointment.\\\",\\n    \\\"appointment_time\\\": \\\"The time of the patient's appointment.\\\"\\n},\\n\\\"return\\\": \\\"The SID of the call made using the Twilio API.\\\",\\n\\\"depend\\\": \\\"Twilio API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local barangay captain advocating for sustainable water usage in the neighborhood", "synthesized text": "\"{\\n\\\"name\\\": \\\"Water Usage Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface accepts the path to a csv file containing daily water usage data and returns a plot showing the trend of water usage and prediction for the next 7 days.\\\",\\n\\\"function_name\\\": \\\"analyze_and_predict_water_usage\\\",\\n\\\"input_args\\\": \\\"path_to_csv\\\",\\n\\\"return\\\": \\\"A plot of water usage trend and an array of predicted water usage for the next 7 days\\\",\\n\\\"depend\\\": \\\"Pandas for data manipulation, Matplotlib for data visualization, Sklearn for regression analysis\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fan of Diana Lin who appreciates her talent and contribution to the film industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"Provide top rated movies that a particular actor/actress has been involved in\\\",\\n\\\"function_name\\\": \\\"get_top_movies_of_actor\\\",\\n\\\"input_args\\\": {\\\"actor_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"top_movies\\\": \\\"list of strings\\\"},\\n\\\"depend\\\": \\\"IMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A veteran bike mechanic with vast knowledge and experience in optimizing performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bicycle Performance Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to predict and suggest optimal gear ratios for bicycle performance based on certain parameters such as rider weight, strength, terrain, and bicycle type.\\\",\\n\\\"function_name\\\": \\\"get_optimal_gear_ratio\\\",\\n\\\"input_args\\\": \\\"rider_weight, rider_strength, terrain, bicycle_type\\\",\\n\\\"return\\\": \\\"Optimal gear ratio for the provided parameters\\\",\\n\\\"depend\\\": \\\"Scikit-Learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A public transport user who provides feedback on the engineer's designs and proposals", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Transit Route Efficiency Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface provides the most efficient transit route, estimated travel time, and the distance between two locations. It can be used to provide feedback on transit route designs and proposals.\\\",\\n  \\\"function_name\\\": \\\"get_optimal_route\\\",\\n  \\\"input_args\\\": {\\n    \\\"start_location\\\": \\\"The start location of the transit route.\\\",\\n    \\\"end_location\\\": \\\"The end location of the transit route.\\\",\\n    \\\"mode\\\": \\\"The mode of transport. It can be 'driving', 'walking', 'bicycling', or 'transit'.\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary with keys 'distance', 'duration', and 'directions'. 'distance' is the total distance of the route, 'duration' is the estimated travel time, and 'directions' is a list of step-by-step directions for the route.\\\",\\n  \\\"depend\\\": \\\"Google Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer with a lot of experience in GStreamer and CMake", "synthesized text": "\"{\\n\\\"name\\\": \\\"GStreamer Pipeline Builder Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input a GStreamer pipeline configuration and returns the output of the pipeline.\\\",\\n\\\"function_name\\\": \\\"run_gstreamer_pipeline\\\",\\n\\\"input_args\\\": {\\\"pipeline\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": [\\\"Python's subprocess library\\\", \\\"GStreamer\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a young Indian girl who is learning to play Veena", "synthesized text": "\"{\\n\\\"name\\\": \\\"Veena Tuning Interface\\\",\\n\\\"description\\\": \\\"This interface helps users in tuning their Veena to the correct notes. The user inputs a recording of their Veena's current tuning, and the interface returns indications on how to adjust each string based on the difference from the target tuning.\\\",\\n\\\"function_name\\\": \\\"analyze_tuning\\\",\\n\\\"input_args\\\": \\\"audio_file: path to an audio file\\\",\\n\\\"return\\\": \\\"Dictionary where each key is a note (C, D, E, F, G, A, B) and the corresponding value is the difference in Hz from the target tuning. A positive value indicates the string is tuned too low and needs to be tightened, while a negative value indicates the string is tuned too high and needs to be loosened.\\\",\\n\\\"depend\\\": \\\"librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "a parent of a child who attends My Own Montessori (M.O.M.)", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Homework Assistance Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Wolfram Alpha API to solve mathematical problems and answer factual questions.\\\",\\n  \\\"function_name\\\": \\\"get_homework_solution\\\",\\n  \\\"input_args\\\": [\\\"app_id\\\", \\\"problem\\\"],\\n  \\\"return\\\": \\\"The solution to the problem or the answer to the question.\\\",\\n  \\\"depend\\\": \\\"Wolfram Alpha API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ancient deity known for their wisdom in cosmic affairs and mastery of temporal phenomena", "synthesized text": "\"{\\n\\\"name\\\": \\\"Astrological Event Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the next significant astrological event for a given celestial body from a specific date\\\",\\n\\\"function_name\\\": \\\"next_astro_event\\\",\\n\\\"input_args\\\": {\\n    \\\"celestial_body\\\": \\\"a string representing a celestial body\\\",\\n    \\\"date\\\": \\\"a datetime.date object representing the date from which to start looking for the next event\\\"\\n},\\n\\\"return\\\": \\\"a string that represents the time (in UTC) of the next significant event for the given celestial body, as seen from London\\\",\\n\\\"depend\\\": \\\"Skyfield Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An avid fan of English drama and Katherine Manners", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drama Series Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that provides a list of drama series where a given actor/actress has played a major role.\\\",\\n\\\"function_name\\\": \\\"get_drama_series_by_actor\\\",\\n\\\"input_args\\\": \\\"name - The name of the actor/actress\\\",\\n\\\"return\\\": \\\"A list of drama series where the actor/actress has played a major role.\\\",\\n\\\"depend\\\": \\\"TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Pakistani musician who appreciates classic music and respects old masters", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Music Style Transfer Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from Magenta to transfer the style of one music to another. The user inputs the paths to two music files, where one is the content music and the other is the style music. The interface returns a new music that applies the style of the style music to the content music.\\\",\\n  \\\"function_name\\\": \\\"music_style_transfer\\\",\\n  \\\"input_args\\\": [\\\"path_to_content_audio\\\", \\\"path_to_style_audio\\\"],\\n  \\\"return\\\": \\\"A new music file that has the content of the content music and the style of the style music.\\\",\\n  \\\"depend\\\": [\\\"Magenta\\\", \\\"TensorFlow\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A klezmer musician with deep knowledge of Jewish folk music, bringing authenticity to the soundtrack", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Genre Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model to predict the genre of a music file. It returns the top 5 most likely genres.\\\",\\n\\\"function_name\\\": \\\"music_genre_classification\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A list of the top 5 most likely music genres.\\\",\\n\\\"depend\\\": \\\"This function uses the tensorflow, tensorflow_io, and keras Python libraries, and requires a pre-trained music genre classification model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curious and health-conscious high school student who seeks advice on maintaining well-being", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutrition Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get nutritional facts of a food item\\\",\\n\\\"function_name\\\": \\\"get_nutrition_facts\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"food_name\\\": \\\"Name of the food item\\\"\\n    },\\n\\\"return\\\": \\\"A dictionary containing nutritional facts of the food item\\\",\\n\\\"depend\\\": \\\"Edamam Nutrition Analysis API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A customer service representative at Pets at Home who provides personalized advice on pet products", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Product Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from HuggingFace to provide personalized advice on pet products based on the pet's breed, age, and behavior\\\",\\n\\\"function_name\\\": \\\"recommend_product\\\",\\n\\\"input_args\\\": [\\\"pet_breed\\\", \\\"pet_age\\\", \\\"pet_behavior\\\"],\\n\\\"return\\\": \\\"List of recommended products\\\",\\n\\\"depend\\\": [\\\"HuggingFace\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An elderly man with visual impairment who relies on radio broadcasts to follow his favorite baseball team", "synthesized text": "\"{\\n\\\"name\\\": \\\"Live Game Score Update Interface\\\",\\n\\\"description\\\": \\\"An interface to get the live game score update for a specific baseball game.\\\",\\n\\\"function_name\\\": \\\"get_live_game_score\\\",\\n\\\"input_args\\\": [\\\"home_team\\\", \\\"away_team\\\"],\\n\\\"return\\\": \\\"A string indicating the current scores of the home and away teams.\\\",\\n\\\"depend\\\": \\\"ESPN API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A humanitarian aid organization seeking security expertise for their projects in conflict-affected areas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conflict Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"An interface to assess the risk level of conflict in a specific country based on past and recent conflicts data from Uppsala Conflict Data Program (UCDP).\\\",\\n\\\"function_name\\\": \\\"conflict_risk_assessment\\\",\\n\\\"input_args\\\": \\\"country - The name of the country where the humanitarian project is planned.\\\",\\n\\\"return\\\": \\\"A risk assessment report which includes the country name, risk level (High if average deaths in last 5 years due to conflicts is more than 100, else Low), and average number of deaths in last 5 years due to conflicts.\\\",\\n\\\"depend\\\": \\\"Python libraries - requests, pandas, datetime. Web API - Uppsala Conflict Data Program (UCDP) API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An established author of textbooks renowned for demystifying complex algorithms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Algorithm Understanding Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained language model to provide simplified explanations of complex algorithms.\\\",\\n\\\"function_name\\\": \\\"explain_algorithm\\\",\\n\\\"input_args\\\": {\\n    \\\"algorithm_name\\\": \\\"The name of the algorithm the user wants to understand.\\\"\\n},\\n\\\"return\\\": \\\"A simplified explanation of the specified algorithm.\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library, specifically the GPT-3 model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A CTO who recognizes the value of Puppet and supports the developer's initiatives to improve automation processes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Puppet Configuration Interface\\\",\\n\\\"description\\\": \\\"This interface applies a specific Puppet configuration to a list of servers. The user only needs to input the Puppet manifest file path and a list of server IP addresses or hostnames, and our interface will apply the configuration to these servers.\\\",\\n\\\"function_name\\\": \\\"apply_puppet_configuration\\\",\\n\\\"input_args\\\": [\\\"manifest_path\\\", \\\"server_list\\\", \\\"username\\\", \\\"password\\\"],\\n\\\"return\\\": \\\"A string message indicating the success of the operation.\\\",\\n\\\"depend\\\": {\\\"python_library\\\": [\\\"paramiko\\\", \\\"os\\\"], \\\"other\\\": [\\\"Puppet software\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A landlord who ensures that all residential buildings have adequate fire safety measures in place", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Fire Safety Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface assesses the presence of fire safety measures in a building image. It identifies the presence of fire extinguishers, smoke detectors, and fire exits.\\\",\\n\\\"function_name\\\": \\\"assess_fire_safety\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"A dictionary 'assessment' with keys as the fire safety equipment and values as boolean indicating whether the equipment is present or not.\\\",\\n\\\"depend\\\": \\\"PyTorch, torchvision, PIL\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer with experience in deploying neural networks at scale", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Distributed Training Interface\\\",\\n  \\\"description\\\": \\\"This interface simplifies the process of distributed training in TensorFlow. It allows users to train neural network models on multiple GPUs with a single function call.\\\",\\n  \\\"function_name\\\": \\\"distributed_training\\\",\\n  \\\"input_args\\\": [\\\"model\\\", \\\"train_dataset\\\", \\\"val_dataset\\\", \\\"epochs\\\"],\\n  \\\"return\\\": \\\"Trained model\\\",\\n  \\\"depend\\\": \\\"TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "An acquisitions editor specializing in non-fiction titles, particularly in the field of science", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Goodreads API to provide book recommendations based on a specified genre and a minimum rating.\\\",\\n\\\"function_name\\\": \\\"get_recommended_books\\\",\\n\\\"input_args\\\": {\\n    \\\"genre\\\": \\\"The genre of the books to be recommended.\\\",\\n    \\\"min_rating\\\": \\\"The minimum average rating of the books to be recommended.\\\"\\n},\\n\\\"return\\\": \\\"A list of book titles that fit the specified genre and have an average rating equal to or higher than the specified minimum rating.\\\",\\n\\\"depend\\\": \\\"This function depends on the requests and xmltodict Python libraries and the Goodreads API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud resident of Sienna, Texas and an enthusiastic parent whose two daughters will attend Almeta Crawford High School.", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Lunch Menu Interface\\\",\\n\\\"description\\\": \\\"This interface returns the school lunch menu for a given date at Almeta Crawford High School. The function fetches and parses data from the school's website or food services provider's API.\\\",\\n\\\"function_name\\\": \\\"get_school_lunch_menu\\\",\\n\\\"input_args\\\": \\\"date - The date for which to fetch the lunch menu. The date should be in the format YYYY-MM-DD.\\\",\\n\\\"return\\\": \\\"The lunch menu for the given date.\\\",\\n\\\"depend\\\": \\\"The function depends on the requests and BeautifulSoup Python libraries, as well as the school's website or food services provider's API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skilled Pokémon breeder who shares tips and tricks for breeding perfect Pokémon", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pokemon Stats Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the stats of a Pok\\u00e9mon given its type, level, and other features.\\\",\\n\\\"function_name\\\": \\\"predict_pokemon_stats\\\",\\n\\\"input_args\\\": {\\\"pokemon_type\\\": \\\"string\\\", \\\"level\\\": \\\"integer\\\", \\\"other_features\\\": \\\"dictionary\\\"},\\n\\\"return\\\": \\\"array of predicted stats\\\",\\n\\\"depend\\\": \\\"pandas, numpy, scikit-learn, pre-trained RandomForestRegressor model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An NZR employee", "synthesized text": "\"{\\n\\\"name\\\": \\\"Seismic Activity Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to monitor recent seismic activities based on their specified magnitude and depth ranges. The data is sourced from the GeoNet API, which is the official source of geological hazard information for New Zealand.\\\",\\n\\\"function_name\\\": \\\"get_recent_earthquakes\\\",\\n\\\"input_args\\\": {\\\"magnitude_min\\\": \\\"minimum magnitude of the earthquakes\\\", \\\"magnitude_max\\\": \\\"maximum magnitude of the earthquakes\\\", \\\"depth_min\\\": \\\"minimum depth of the earthquakes\\\", \\\"depth_max\\\": \\\"maximum depth of the earthquakes\\\"},\\n\\\"return\\\": \\\"A list of recent earthquakes that fall within the specified magnitude and depth ranges. Each earthquake is represented as a dictionary containing the title, magnitude, and depth of the earthquake.\\\",\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python library for making HTTP requests\\\", \\\"GeoNet API\\\": \\\"Web API for retrieving geological hazard information for New Zealand\\\"}\\n}\"", "description": "tool development"}
{"input persona": "a committed Spielberg fan who attended the Dragon Con for the first time", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Movie Information Retrieval Interface\\\",\\n  \\\"description\\\": \\\"This interface retrieves detailed information about a movie including the director, cast, genre, runtime, rating, and synopsis using movie database APIs.\\\",\\n  \\\"function_name\\\": \\\"get_movie_info\\\",\\n  \\\"input_args\\\": [\\\"movie_title\\\"],\\n  \\\"return\\\": {\\n    \\\"Title\\\": \\\"string\\\",\\n    \\\"Year\\\": \\\"string\\\",\\n    \\\"Rated\\\": \\\"string\\\",\\n    \\\"Runtime\\\": \\\"string\\\",\\n    \\\"Genre\\\": \\\"string\\\",\\n    \\\"Director\\\": \\\"string\\\",\\n    \\\"Actors\\\": \\\"string\\\",\\n    \\\"Plot\\\": \\\"string\\\",\\n    \\\"Language\\\": \\\"string\\\",\\n    \\\"Country\\\": \\\"string\\\",\\n    \\\"Awards\\\": \\\"string\\\",\\n    \\\"Rating\\\": \\\"string\\\"\\n  },\\n  \\\"depend\\\": [\\\"requests\\\", \\\"OMDb API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A pharmacist entrepreneur who has successfully built and managed their own chain of pharmacies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medicine Inventory Management Interface\\\",\\n\\\"description\\\": \\\"An interface to manage and update the inventory of medicines in different pharmacies. It updates the quantity of a specific medicine for a specific pharmacy and returns the updated inventory for that medicine.\\\",\\n\\\"function_name\\\": \\\"update_inventory\\\",\\n\\\"input_args\\\": {\\n  \\\"inventory\\\": \\\"A pandas DataFrame representing the current inventory.\\\",\\n  \\\"medicine_name\\\": \\\"The name of the medicine to be updated.\\\",\\n  \\\"quantity_received\\\": \\\"The quantity of the medicine received.\\\",\\n  \\\"pharmacy_name\\\": \\\"The name of the pharmacy where the inventory is updated.\\\"\\n},\\n\\\"return\\\": \\\"A pandas DataFrame containing the updated inventory for the specific medicine.\\\",\\n\\\"depend\\\": \\\"Python's pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enterprise software company in need of seamless integration with their existing .NET infrastructure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface for Running .NET Code from Python\\\",\\n\\\"description\\\": \\\"An interface to execute .NET code from within a Python environment. Useful in mixed system architectures of Python and .NET.\\\",\\n\\\"function_name\\\": \\\"run_dotnet_code\\\",\\n\\\"input_args\\\": \\\"dotnet_code - The .NET code to be executed, as a string.\\\",\\n\\\"return\\\": \\\"A string message indicating successful execution of the .NET code.\\\",\\n\\\"depend\\\": \\\"Python library: pythonnet\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former classmate of Natwar Goyal", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Text-To-Speech Interface\\\",\\n  \\\"description\\\": \\\"This interface converts input text into speech and generates an audio file. It uses the Google Text-to-Speech (gTTS) Python library.\\\",\\n  \\\"function_name\\\": \\\"convert_text_to_speech\\\",\\n  \\\"input_args\\\": \\n    {\\n      \\\"text\\\": \\\"The text to be converted into speech.\\\",\\n      \\\"language\\\": \\\"The language in which the text is to be spoken. Default is 'en' for English.\\\",\\n      \\\"slow\\\": \\\"Whether the speech should be slow or not. Default is False.\\\",\\n      \\\"filename\\\": \\\"The name of the output audio file. Default is 'output.mp3'.\\\"\\n    },\\n  \\\"return\\\": \\\"The name of the output audio file.\\\",\\n  \\\"depend\\\": \\\"Google Text-to-Speech (gTTS) Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A railway photographer who has captured the beauty and charm of train journeys in their country", "synthesized text": "\"{\\n\\\"name\\\": \\\"Train Route Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to visualize a train route on an interactive map. Users input the names of the start and end stations, and the function generates a map displaying the route.\\\",\\n\\\"function_name\\\": \\\"visualize_train_route\\\",\\n\\\"input_args\\\": [\\\"start_station\\\", \\\"end_station\\\"],\\n\\\"return\\\": \\\"An interactive map showing the train route from start station to end station.\\\",\\n\\\"depend\\\": [\\\"Python's Folium library\\\", \\\"OpenStreetMap\\\", \\\"Geopy library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A well-respected dog breeder known for their award-winning Border Collie lineage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dog Breed Identifier Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to identify the breed of a dog from an image. The user inputs the path to an image file of a dog, and the interface returns the breed of the dog.\\\",\\n\\\"function_name\\\": \\\"identify_dog_breed\\\",\\n\\\"input_args\\\": {\\\"path_to_img\\\": \\\"Path to the image file of the dog\\\"},\\n\\\"return\\\": \\\"String representing the breed of the dog\\\",\\n\\\"depend\\\": {\\\"tensorflow\\\": \\\"2.4.0\\\", \\\"tensorflow_hub\\\": \\\"0.11.0\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A startup founder seeking advice on database architecture to handle their growing user base", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Schema Visualizer Interface\\\",\\n\\\"description\\\": \\\"This interface generates a visualization of the database schema from a SQL Alchemy engine. It helps users to better understand the structure of their database and make informed decisions about optimizing it.\\\",\\n\\\"function_name\\\": \\\"visualize_database_schema\\\",\\n\\\"input_args\\\": {\\n  \\\"uri\\\": \\\"The URI of the database.\\\"\\n},\\n\\\"return\\\": \\\"A path to the PNG image of the database schema.\\\",\\n\\\"depend\\\": \\\"This function relies on the SQLAlchemy and Graphviz Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A neuroscientist exploring the possibility of implementing biological-inspired learning algorithms into autonomous robot systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Neural Network Model Training and Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to train and evaluate a neural network model using Keras. The user needs to provide the paths to the training and testing data files, and the function will return the trained model and its accuracy on the test data.\\\",\\n\\\"function_name\\\": \\\"train_and_evaluate_model\\\",\\n\\\"input_args\\\": [\\\"train_data_path\\\", \\\"test_data_path\\\"],\\n\\\"return\\\": {\\\"model\\\": \\\"Trained Keras model\\\", \\\"accuracy\\\": \\\"Model accuracy on the test data\\\"},\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\", \\\"tensorflow\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A historian specializing in the golden era of Japanese motorsports, providing valuable insights and rare archival footage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Motorsport Video Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analyzing historical motorsport video footage. It uses the Google Video Intelligence API to identify car models and estimate the date of the footage.\\\",\\n\\\"function_name\\\": \\\"analyze_motorsport_video\\\",\\n\\\"input_args\\\": {\\\"video_path\\\": \\\"The path to the video file to be analyzed.\\\"},\\n\\\"return\\\": \\\"The function prints out the analysis of the video, including the models of cars seen in the footage and the estimated dates of the video. Each identified label includes a description, a category, a segment (start and end time), and a confidence score.\\\",\\n\\\"depend\\\": \\\"Google Video Intelligence API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated tennis player and leader who believes the closure is necessary for the club's financial stability", "synthesized text": "\"{\\n\\\"name\\\" : \\\"Player Performance Analysis Interface\\\",\\n\\\"description\\\" : \\\"Interface to predict a tennis player's performance in the upcoming games using machine learning model.\\\",\\n\\\"function_name\\\" : \\\"player_performance_prediction\\\",\\n\\\"input_args\\\" : \\\"player_name\\\",\\n\\\"return\\\" : \\\"Mean Absolute Error (MAE) between the predicted and actual performance.\\\",\\n\\\"depend\\\" : \\\"requests, pandas, scikit-learn, Tennis Australia's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "African American woman with a master's degree in education who is currently working as an Education Consultant.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Education Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to load a CSV data file and get a summary of the data's descriptive statistics. The summary includes the central tendency, dispersion and shape of a dataset\\u2019s distribution, excluding NaN values.\\\",\\n\\\"function_name\\\": \\\"load_and_describe_data\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"Pandas DataFrame that describes the dataset.\\\",\\n\\\"depend\\\": \\\"Python's pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another captain who embodies the camaraderie and teamwork required in the Air Force", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Path Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface takes the current location, destination, and aircraft model as input, and returns the optimized flight path.\\\",\\n\\\"function_name\\\": \\\"optimize_flight_path\\\",\\n\\\"input_args\\\": [\\\"current_location\\\", \\\"destination\\\", \\\"aircraft_model\\\"],\\n\\\"return\\\": \\\"optimized_path\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"requests\\\", \\\"json\\\", \\\"sklearn.externals.joblib\\\"], \\\"API\\\": [\\\"OpenSky Network API\\\"], \\\"models\\\": [\\\"Path optimization model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A fellow independent artist competing for recognition and collaborations in the apparel design scene", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Apparel Design Similarity Check Interface\\\",\\n  \\\"description\\\": \\\"This interface uses OpenAI's CLIP model to compare the similarity between two apparel designs. It can help artists check if their new design is unique or too similar to existing ones.\\\",\\n  \\\"function_name\\\": \\\"get_design_similarity\\\",\\n  \\\"input_args\\\": {\\n    \\\"image_path1\\\": \\\"Path to the first image file\\\",\\n    \\\"image_path2\\\": \\\"Path to the second image file\\\"\\n  },\\n  \\\"return\\\": \\\"A similarity score between 0 and 1. A score closer to 1 means the images are more similar.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"torch\\\", \\\"PIL\\\", \\\"openai\\\"],\\n    \\\"models\\\": [\\\"OpenAI's CLIP\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A pioneering computer scientist who conducts research on next-generation distributed computing architectures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Distributed System Health Check Interface\\\",\\n\\\"description\\\": \\\"An interface to monitor the health of a distributed system by checking the CPU, memory, and disk usage of a specified machine within the system.\\\",\\n\\\"function_name\\\": \\\"get_system_health\\\",\\n\\\"input_args\\\": {\\n    \\\"host_address\\\": \\\"Address of the host to check the system health. e.g., '192.168.0.1:8080'\\\"\\n},\\n\\\"return\\\": {\\n    \\\"cpu\\\": \\\"Percentage of CPU usage.\\\",\\n    \\\"memory\\\": \\\"Percentage of memory usage.\\\",\\n    \\\"disk\\\": \\\"Percentage of disk usage.\\\"\\n},\\n\\\"depend\\\": \\\"Python's psutil library and requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gym owner who is looking to incorporate smart gym accessories into their facility", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Smart Fitness Tracker Interface\\\",\\n    \\\"description\\\": \\\"Interface to access user's Fitbit data.\\\",\\n    \\\"function_name\\\": \\\"get_fitbit_data\\\",\\n    \\\"input_args\\\": {\\n        \\\"user_id\\\": \\\"User's Fitbit ID\\\",\\n        \\\"data_type\\\": \\\"Type of data to access (e.g., 'activities/heart', 'body/log/weight', 'activities/steps')\\\"\\n    },\\n    \\\"return\\\": \\\"User's requested Fitbit data for today\\\",\\n    \\\"depend\\\": \\\"Fitbit Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A guy who knows nothing about nail polish, doesn't care about it, but forced to give a comment because his sister forced him to.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nail Polish Review Generator\\\",\\n\\\"description\\\": \\\"An interface that generates a detailed review of a nail polish given its brand and color.\\\",\\n\\\"function_name\\\": \\\"generate_nail_polish_review\\\",\\n\\\"input_args\\\": {\\n    \\\"brand\\\": \\\"The brand of the nail polish.\\\",\\n    \\\"color\\\": \\\"The color of the nail polish.\\\"\\n},\\n\\\"return\\\": \\\"A detailed review of the nail polish.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software developer familiar with AWS SDK and Java", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface uses Amazon Polly to convert text into lifelike speech.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"The text you want to convert into speech.\\\"},\\n\\\"return\\\": \\\"An audio stream of the converted speech.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"boto3\\\"], \\\"web APIs\\\": [\\\"Amazon Polly\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Persona Brasileira apaixonada por história e educação", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface de Pesquisa de Livros Hist\\u00f3ricos\\\",\\n\\\"description\\\": \\\"Uma interface que utiliza a API do Google Books para procurar livros hist\\u00f3ricos com base em uma palavra-chave ou frase fornecida pelo usu\\u00e1rio.\\\",\\n\\\"function_name\\\": \\\"buscar_livros_historicos\\\",\\n\\\"input_args\\\": \\\"pesquisa - uma string que representa a palavra-chave ou frase a ser pesquisada.\\\",\\n\\\"return\\\": \\\"Uma lista dos 5 principais t\\u00edtulos de livros que correspondem \\u00e0 pesquisa.\\\",\\n\\\"depend\\\": \\\"API do Google Books\\\"\\n}\"", "description": "tool development"}
{"input persona": "A plastic bottle cap manufacturer from China", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plastic Bottle Cap Quality Assurance Interface\\\",\\n\\\"description\\\": \\\"An interface to classify whether a plastic bottle cap is defective or not using a pre-trained image classification model.\\\",\\n\\\"function_name\\\": \\\"is_defective_bottle_cap\\\",\\n\\\"input_args\\\": \\\"path_to_img - string representing the local path to the image file.\\\",\\n\\\"return\\\": \\\"String - 'Defective' if the cap is predicted to be defective, 'Not Defective' otherwise.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Pretrained MobileNet V2 model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A spokesperson for a political campaign who provides data and statistics to support their candidate's platform", "synthesized text": "\"{\\n\\\"name\\\": \\\"Political Data Retrieval\\\",\\n\\\"description\\\": \\\"Fetches and returns data about the bills sponsored by a candidate, their voting record, and campaign finance using the ProPublica API.\\\",\\n\\\"function_name\\\": \\\"get_candidate_data\\\",\\n\\\"input_args\\\": \\\"candidate_name - The unique identifier of the candidate\\\",\\n\\\"return\\\": \\\"A python dictionary containing the bills sponsored by the candidate, their voting record, and campaign finance data\\\",\\n\\\"depend\\\": \\\"requests library, ProPublica API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservative writer advocating for less intervention in local neighborhoods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Crime Rate Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface fetches crime rate data for two neighborhoods and returns a comparison of the crime rates. It uses the FBI's Uniform Crime Reporting (UCR) Program's API to gather the data.\\\",\\n\\\"function_name\\\": \\\"compare_neighborhood_crime\\\",\\n\\\"input_args\\\": [\\\"neighborhood1\\\", \\\"neighborhood2\\\"],\\n\\\"return\\\": \\\"A dictionary with the two input neighborhoods as keys and their respective crime rates as values.\\\",\\n\\\"depend\\\": \\\"Requests library, FBI's UCR Program API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hardware manufacturer providing advanced camera sensors for computer vision applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Camera Calibration Interface\\\",\\n\\\"description\\\": \\\"Calibrates a camera given a set of chessboard images and returns the camera matrix and distortion coefficients.\\\",\\n\\\"function_name\\\": \\\"calibrate_camera\\\",\\n\\\"input_args\\\": {\\n\\\"images_dir\\\": \\\"The directory path containing images of a chessboard pattern taken from different angles.\\\"\\n},\\n\\\"return\\\": {\\n\\\"mtx\\\": \\\"Camera matrix\\\",\\n\\\"dist\\\": \\\"Distortion coefficients\\\"\\n},\\n\\\"depend\\\": \\\"OpenCV\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow young adult with a family history of heart disease, sharing their own experiences and tips for maintaining a healthy lifestyle", "synthesized text": "\"{\\n\\\"name\\\": \\\"Heart Rate Monitoring Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes heart rate data from a CSV file and returns the average heart rate and whether it is within a healthy range.\\\",\\n\\\"function_name\\\": \\\"analyze_heart_rate\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": {\\\"avg_heart_rate\\\": \\\"The average heart rate.\\\", \\\"healthy_range\\\": \\\"A boolean indicating if the heart rate is within a healthy range.\\\"},\\n\\\"depend\\\": [\\\"pandas\\\", \\\"heartpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A climate scientist specializing in modeling the long-term effects of economic policies on ecosystems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Policy Climate Impact Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the long-term effects of economic policies on ecosystems. Users provide details of an economic policy, and the interface returns an estimate of the climate impact.\\\",\\n\\\"function_name\\\": \\\"predict_climate_impact\\\",\\n\\\"input_args\\\": \\\"policy_details - A list of numeric values representing the details of the economic policy.\\\",\\n\\\"return\\\": \\\"A single numeric value representing the estimated climate impact of the given economic policy.\\\",\\n\\\"depend\\\": \\\"Pandas for data manipulation, Numpy for numerical operations, and Scikit-learn for the machine learning model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wildlife photographer seeking advice on choosing the right camera and lenses for capturing bird photography", "synthesized text": "\"{\\n\\\"name\\\": \\\"Camera Selection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to suggest the best camera and lenses based on a user's specific requirements.\\\",\\n\\\"function_name\\\": \\\"choose_camera\\\",\\n\\\"input_args\\\": {\\n    \\\"user_requirements\\\": \\\"A list of user's specific requirements and preferences.\\\"\\n},\\n\\\"return\\\": \\\"The name of the recommended camera.\\\",\\n\\\"depend\\\": \\\"pandas, sklearn.ensemble.RandomForestClassifier\\\"\\n}\"", "description": "tool development"}
{"input persona": "A clinical psychologist specializing in cognitive-behavioral therapy for individuals with hallucinations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hallucination Detection Interface\\\",\\n\\\"description\\\": \\\"An interface for detecting hallucinations in a given text using a pre-trained model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"detect_hallucinations\\\",\\n\\\"input_args\\\": \\\"text - a string of text\\\",\\n\\\"return\\\": \\\"A boolean indicating whether the text indicates hallucinations (True) or not (False)\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired actress who was a close friend of Gabrielle Upton and has watched the evolution of television and film over several decades.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends movies based on the user's favorite movie. It utilizes the MovieLens dataset and a recommendation system model from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"recommend_movies\\\",\\n\\\"input_args\\\": {\\\"favorite_movie\\\": \\\"String - The title of the user's favorite movie.\\\"},\\n\\\"return\\\": \\\"List of Strings - Titles of the recommended movies.\\\",\\n\\\"depend\\\": [\\\"TensorFlow Hub\\\", \\\"MovieLens dataset from GroupLens\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a master's student in immunology who looks up to Katherine L. Knight as a role model", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gene Interactions Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the BioGRID API to fetch interactions between two genes. This can be particularly useful for students or researchers in the field of biology or medical research who need to understand how different genes interact with each other.\\\",\\n\\\"function_name\\\": \\\"get_gene_interactions\\\",\\n\\\"input_args\\\": [\\\"gene1\\\", \\\"gene2\\\"],\\n\\\"return\\\": \\\"A dictionary with interaction details between the two input genes.\\\",\\n\\\"depend\\\": \\\"BioGRID API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A frequent traveler and a loyal customer of Wyndham Hotels.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hotel Booking Interface\\\",\\n\\\"description\\\": \\\"An interface to book a hotel room at a Wyndham hotel using the Wyndham Hotels API. The user provides the hotel name, check-in date, check-out date, and room type.\\\",\\n\\\"function_name\\\": \\\"book_hotel_wyndham\\\",\\n\\\"input_args\\\": {\\n    \\\"hotel_name\\\": \\\"The name of the Wyndham hotel\\\",\\n    \\\"check_in_date\\\": \\\"The check-in date in the format 'YYYY-MM-DD'\\\",\\n    \\\"check_out_date\\\": \\\"The check-out date in the format 'YYYY-MM-DD'\\\",\\n    \\\"room_type\\\": \\\"The type of room to book\\\"\\n},\\n\\\"return\\\": \\\"A confirmation message for the booking or an error message if the booking failed.\\\",\\n\\\"depend\\\": \\\"Wyndham Hotels API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Data scientist who spends most of their time working with neural network models", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Neural Network Training Interface\\\",\\n  \\\"description\\\": \\\"This interface enables users to train a simple neural network model using the Keras API from TensorFlow. The user provides a path to the training data (CSV format) and the target column name, and the interface returns the trained model.\\\",\\n  \\\"function_name\\\": \\\"train_neural_network\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_csv\\\": \\\"Path to the CSV file containing the training data.\\\",\\n    \\\"target_column\\\": \\\"Name of the target column in the CSV file.\\\"\\n  },\\n  \\\"return\\\": \\\"Trained Keras model.\\\",\\n  \\\"depend\\\": {\\n    \\\"Python libraries\\\": [\\\"pandas\\\", \\\"tensorflow\\\", \\\"sklearn\\\"],\\n    \\\"Web APIs\\\": [],\\n    \\\"Machine Learning Models\\\": [\\\"Keras Sequential Model\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A graduate student studying women's literature and writing a thesis on Toni Morrison", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides a set of readability measures for given text, including the Flesch Reading Ease score, the SMOG index, and the Gunning Fog index.\\\",\\n\\\"function_name\\\": \\\"analyze_text_complexity\\\",\\n\\\"input_args\\\": \\\"text - a string of text that the user wants to analyze\\\",\\n\\\"return\\\": \\\"a dictionary with the scores of different readability measures\\\",\\n\\\"depend\\\": \\\"textstat Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an enthusiastic musician who has recently formed a band and is in the process of choosing a band name.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Band Name Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a list of potential band names using a pre-trained language model. Users input a keyword or phrase and the number of names they want to generate, and the function returns a list of band names.\\\",\\n\\\"function_name\\\": \\\"generate_band_names\\\",\\n\\\"input_args\\\": {\\n    \\\"keyword\\\": \\\"A keyword or phrase that the user wants their band name to contain.\\\",\\n    \\\"num_names\\\": \\\"The number of band names the user wants to generate.\\\"\\n},\\n\\\"return\\\": \\\"A list of potential band names that contain the input keyword or phrase.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library (GPT2Tokenizer, GPT2LMHeadModel)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A newbie in the gaming world, but a huge fan of collectible card games, especially \"Magic: The Gathering\" (MTG)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Card Value Lookup Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Scryfall API to get the price of a specific Magic: The Gathering card. The user inputs the name of the card they are interested in, and the interface returns the price of that card.\\\",\\n\\\"function_name\\\": \\\"get_card_price\\\",\\n\\\"input_args\\\": {\\\"card_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"name\\\": \\\"string\\\", \\\"usd\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"Scryfall API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A neurophysiologist studying the electrical activity of neurons and its role in brain function", "synthesized text": "\"{\\n\\\"name\\\": \\\"Neuron Spike Detection Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of detecting spikes in neural time series data. It uses the neurodsp library to perform the spike detection, and outputs the times and amplitudes of the detected spikes.\\\",\\n\\\"function_name\\\": \\\"detect_neuron_spikes\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the time series data file\\\",\\n    \\\"fs\\\": \\\"The sampling rate of the data\\\",\\n    \\\"spike_threshold\\\": \\\"The minimum amplitude for a data point to be considered a spike\\\"\\n},\\n\\\"return\\\": \\\"A tuple of two numpy arrays. The first array contains the times of each detected spike, and the second contains the corresponding amplitudes of the spikes.\\\",\\n\\\"depend\\\": \\\"Python's numpy library for data handling, and the neurodsp library for the spike detection feature\\\"\\n}\"", "description": "tool development"}
{"input persona": "A trivia whiz who always dominates in the show's daily quizzes and competitions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trivia Question Generation Interface\\\",\\n\\\"description\\\": \\\"Generates a trivia question given a topic using OpenAI's GPT-3 model\\\",\\n\\\"function_name\\\": \\\"generate_trivia_question\\\",\\n\\\"input_args\\\": {\\n    \\\"topic\\\": \\\"string representing the topic for the trivia question\\\"\\n},\\n\\\"return\\\": \\\"string representing the generated trivia question\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "The mayor of the town who values the historian's expertise and works closely with them on preserving the sporting heritage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Sports Event Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface pulls historical sports data from various online sources, analyzes them, and provides a summary of significant events in that sport during a specified period.\\\",\\n\\\"function_name\\\": \\\"get_sport_history\\\",\\n\\\"input_args\\\": [\\\"sport\\\", \\\"start_year\\\", \\\"end_year\\\"],\\n\\\"return\\\": \\\"List of sentences, each describing a significant event in the specified sport during the specified period.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"nltk\\\"],\\n\\\"Web APIs\\\": [],\\n\\\"ML models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "An experienced geophysicist who has pioneered ground-penetrating radar techniques in archaeological research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ground Penetrating Radar Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface processes and plots Ground Penetrating Radar (GPR) data from a provided file.\\\",\\n\\\"function_name\\\": \\\"plot_gpr_data\\\",\\n\\\"input_args\\\": \\\"path_to_gpr_data\\\",\\n\\\"return\\\": \\\"A plot of the GPR data\\\",\\n\\\"depend\\\": \\\"Python library: PyGPR\\\"\\n}\"", "description": "tool development"}
{"input persona": "A documentary filmmaker who values the security consultant's guidance in navigating sensitive environments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Encryption Interface\\\",\\n\\\"description\\\": \\\"An interface to encrypt a document using AES encryption. The user inputs a file path and a password, and the function outputs an encrypted file.\\\",\\n\\\"function_name\\\": \\\"encrypt_document\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the file to be encrypted\\\",\\n    \\\"password\\\": \\\"The password to be used for encryption\\\"\\n    },\\n\\\"return\\\": \\\"The path to the encrypted file\\\",\\n\\\"depend\\\": [\\\"PyCrypto\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a person who is totally lost when it comes to Regex and digital data processing.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Regex Helper Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the use of regular expressions (Regex) for users. Users input the text and the pattern they are looking for, and this interface will return all matches.\\\",\\n\\\"function_name\\\": \\\"regex_helper\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"The text in which to search for the pattern.\\\",\\n    \\\"pattern\\\": \\\"The pattern to search for in the text.\\\"\\n},\\n\\\"return\\\": \\\"A list of all matches of the pattern in the text.\\\",\\n\\\"depend\\\": \\\"Python's built-in 're' module\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data center manager emphasizing the importance of physical security alongside cybersecurity measures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Center Physical Threat Alert Interface\\\",\\n\\\"description\\\": \\\"An interface to get real-time threats to the physical security of a data center\\\",\\n\\\"function_name\\\": \\\"get_security_threats\\\",\\n\\\"input_args\\\": {\\n    \\\"data_center_id\\\": \\\"ID or location of the data center\\\"\\n},\\n\\\"return\\\": \\\"A string describing the threats to the data center if any\\\",\\n\\\"depend\\\": \\\"Security system API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cousin who became a millionaire by investing in Bitcoin during its early stages", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bitcoin Price History Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the CoinDesk API to provide users with historical price data for Bitcoin. Users only need to input the start date and end date of the period they're interested in, and the interface will return a list of Bitcoin price data for each day within that period.\\\",\\n  \\\"function_name\\\": \\\"get_bitcoin_price_history\\\",\\n  \\\"input_args\\\": [\\\"start_date\\\", \\\"end_date\\\"],\\n  \\\"return\\\": \\\"A dictionary where the keys are the dates in 'YYYY-MM-DD' format and the values are the closing prices of Bitcoin on those dates.\\\",\\n  \\\"depend\\\": \\\"CoinDesk API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An overprotective older brother who monitors the blogger's travel itinerary and provides safety advice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Travel Safety Advice Interface\\\",\\n\\\"description\\\": \\\"This interface returns safety advice for a given destination, including travel advisories, potential risky areas based on a machine learning model, and general safety tips.\\\",\\n\\\"function_name\\\": \\\"provide_safety_advice\\\",\\n\\\"input_args\\\": \\\"destination\\\",\\n\\\"return\\\": \\\"A dictionary containing safety advice, potential risky areas and safety tips.\\\",\\n\\\"depend\\\": \\\"Travel Advisory API, HuggingFace Transformer Model, Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A homeowner concerned about potential burglaries and wants to ensure their property is secure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Security Assessment Interface\\\",\\n\\\"description\\\": \\\"An interface that assesses home security by identifying potential security vulnerabilities based on an image of the property.\\\",\\n\\\"function_name\\\": \\\"assess_home_security\\\",\\n\\\"input_args\\\": {\\n    \\\"image_path\\\": \\\"The path to an image file of the user's property.\\\"\\n},\\n\\\"return\\\": \\\"A list of potential security vulnerabilities (doors, windows, gates) identified in the image.\\\",\\n\\\"depend\\\": \\\"Python libraries (Pillow, numpy, tensorflow, tensorflow_hub), TensorFlow Hub model (Faster R-CNN: A model for object detection)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tech blogger who has just recently transitioned from Django 1.8 to Django 1.9.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Django Database Migration Interface\\\",\\n\\\"description\\\": \\\"This interface automates the process of database migration in Django. It's specifically useful when transitioning between Django versions.\\\",\\n\\\"function_name\\\": \\\"django_db_migration\\\",\\n\\\"input_args\\\": \\\"app_name - The name of the Django app for which you want to perform database migration.\\\",\\n\\\"return\\\": \\\"A string message indicating that the database migration has been completed.\\\",\\n\\\"depend\\\": \\\"Python's os library and Django framework are used in this function.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An AI programmer responsible for creating realistic and unpredictable enemy behavior", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI Enemy Behavior Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a trained reinforcement learning model to predict the next action of an AI enemy based on the game state. The model is trained with the PPO algorithm from Stable Baselines.\\\",\\n\\\"function_name\\\": \\\"get_enemy_action\\\",\\n\\\"input_args\\\": {\\n    \\\"game_state\\\": \\\"A representation of the current game state, such as a screen image or a set of game variables.\\\"\\n    },\\n\\\"return\\\": \\\"The next action that the AI enemy should take, represented as an integer or a set of game commands.\\\",\\n\\\"depend\\\": \\\"Stable Baselines library and a pre-trained reinforcement learning model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired navy officer who provides firsthand insights on the accuracy of naval details in the novels", "synthesized text": "\"{\\n\\\"name\\\": \\\"Novel Naval Accuracy Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks the accuracy of naval details in a novel text using a machine learning model. It returns a score indicating how accurate the naval details are.\\\",\\n\\\"function_name\\\": \\\"naval_accuracy_check\\\",\\n\\\"input_args\\\": \\\"novel_text - a string containing the text from the novel\\\",\\n\\\"return\\\": \\\"accuracy_score - a float representing the accuracy of the naval details in the novel text\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformer library with the 'textattack/roberta-base-MNLI' model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A police officer with first-hand experience in implementing and observing the outcomes of various law enforcement strategies in the field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crime Prediction Interface\\\",\\n\\\"description\\\": \\\"Predict future crime rates based on historical data using Facebook's Prophet model.\\\",\\n\\\"function_name\\\": \\\"predict_crime\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"dataframe with columns ds (date), yhat (predicted value), yhat_lower (lower bound of prediction), yhat_upper (upper bound of prediction)\\\",\\n\\\"depend\\\": \\\"pandas library, fbprophet library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired vision scientist whose groundbreaking work on optical health remains influential", "synthesized text": "\"{\\n\\\"name\\\": \\\"Eye Health Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow to predict the likelihood of common eye diseases (diabetic retinopathy, age-related macular degeneration, and glaucoma) based on retinal fundus photographs.\\\",\\n\\\"function_name\\\": \\\"predict_eye_diseases\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A dictionary containing the diseases as keys and the corresponding likelihoods as values\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, and the pre-trained eye disease classifier model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent worried about their child's financial stability due to student loans", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Loan Repayment Planner Interface\\\",\\n\\\"description\\\": \\\"An interface that helps calculate the repayment plan for student loans.\\\",\\n\\\"function_name\\\": \\\"calculate_loan_repayment\\\",\\n\\\"input_args\\\": {\\n    \\\"principal\\\": \\\"The principal loan amount in dollars.\\\",\\n    \\\"annual_interest_rate\\\": \\\"The annual interest rate as a percentage.\\\",\\n    \\\"years\\\": \\\"The repayment period in years.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"monthly_payment\\\": \\\"The amount to be paid monthly for the loan.\\\",\\n    \\\"total_payment\\\": \\\"The total amount to be paid over the loan period.\\\"\\n},\\n\\\"depend\\\": \\\"numpy_financial library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a big fan of Will Smith's family.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Celebrity Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves information about a celebrity's filmography from the IMDb API.\\\",\\n\\\"function_name\\\": \\\"get_celebrity_info\\\",\\n\\\"input_args\\\": \\\"name\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing information about a different performance by the celebrity.\\\",\\n\\\"depend\\\": \\\"IMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rushed and capricious middle manager caught amidst the whirlwind of shutdowns and task delegation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Task Prioritization Interface\\\",\\n\\\"description\\\": \\\"This interface takes a dictionary of tasks and their corresponding priority levels as input and returns a dictionary of tasks sorted in descending order of priority.\\\",\\n\\\"function_name\\\": \\\"prioritize_tasks\\\",\\n\\\"input_args\\\": \\\"task_dict - A dictionary where each key-value pair represents a task and a corresponding priority level.\\\",\\n\\\"return\\\": \\\"A dictionary of tasks sorted in descending order of priority.\\\",\\n\\\"depend\\\": \\\"Python Standard Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A shop class instructor who introduces the student to various construction techniques and projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Requirement Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the amount of materials needed for a particular construction project based on the project type and size.\\\",\\n\\\"function_name\\\": \\\"estimate_materials\\\",\\n\\\"input_args\\\": [\\\"project_type\\\", \\\"project_size\\\"],\\n\\\"return\\\": \\\"An estimate of the materials required for the project.\\\",\\n\\\"depend\\\": \\\"scikit-learn library, a pre-trained RandomForestRegressor model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A CEO who highly values the ability to orchestrate team workflow to meet company goals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Task Scheduling Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Calendar API to schedule tasks for team members. The user inputs the task details (task name, start time, end time, and assigned person's email), and the interface adds the task to the assigned person's Google Calendar.\\\",\\n\\\"function_name\\\": \\\"schedule_task\\\",\\n\\\"input_args\\\": {\\n    \\\"task_name\\\": \\\"string (name of the task)\\\",\\n    \\\"start_time\\\": \\\"string (ISO format datetime string for task start time)\\\",\\n    \\\"end_time\\\": \\\"string (ISO format datetime string for task end time)\\\",\\n    \\\"assigned_person_email\\\": \\\"string (email of the person to whom the task is assigned)\\\"\\n},\\n\\\"return\\\": \\\"string (URL of the created event in Google Calendar)\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software developer who has experience with Lua scripting and Logitech's on-board memory features.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface for Accessing Mouse Data\\\",\\n\\\"description\\\": \\\"This interface communicates with Logitech Gaming Software (LGS) to access mouse data such as DPI, button configuration, and RGB lighting.\\\",\\n\\\"function_name\\\": \\\"get_logitech_mouse_data\\\",\\n\\\"input_args\\\": \\\"mouse_model\\\",\\n\\\"return\\\": \\\"A dictionary with the current DPI, button configuration, and RGB lighting of the given mouse model.\\\",\\n\\\"depend\\\": \\\"PyLua library, Logitech Gaming Software's Lua API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Italian Chef who owns a restaurant in Al Murabaa.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface suggests new recipes based on specific parameters such as cuisine, diet, intolerances, ingredients, etc.\\\",\\n\\\"function_name\\\": \\\"get_recipe_suggestions\\\",\\n\\\"input_args\\\": {\\n    \\\"cuisine\\\": \\\"The type of cuisine the user wants to explore. For example, 'Italian', 'Mexican', 'Chinese', etc.\\\",\\n    \\\"number_of_recipes\\\": \\\"(Optional) The number of recipe suggestions the user wants to receive. Default is 5.\\\"\\n    },\\n\\\"return\\\": \\\"A list of recipe titles based on the user's input parameters.\\\",\\n\\\"depend\\\": \\\"Spoonacular's Complex Recipe Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a medical student currently cramming for anatomy finals and am somewhat overwhelmed by the volume of information.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Anatomy Image Labeling Interface\\\",\\n  \\\"description\\\": \\\"An interface to identify and label different parts of the anatomy in an image. The interface uses Google's Cloud Vision API to identify and label the images\\\",\\n  \\\"function_name\\\": \\\"label_anatomy_image\\\",\\n  \\\"input_args\\\": [\\\"image_path\\\"],\\n  \\\"return\\\": \\\"[(label, score)] - A list of tuples. Each tuple contains a label (a string that represents the name of the body part) and a score (a float that represents the confidence level of the label)\\\",\\n  \\\"depend\\\": \\\"google.cloud.vision\\\"\\n}\"", "description": "tool development"}
{"input persona": "A disgruntled dealer who was fired for suspected collusion with players", "synthesized text": "\"{\\n\\\"name\\\": \\\"Card Game Cheating Detection Interface\\\",\\n\\\"description\\\": \\\"Detect possible cheating in card games by analyzing the sequence of game results. The interface returns the anomaly score and the probability of cheating.\\\",\\n\\\"function_name\\\": \\\"detect_cheating\\\",\\n\\\"input_args\\\": \\\"game_sequence - a sequence of game results (e.g., players' hands or winnings in poker)\\\",\\n\\\"return\\\": \\\"a dictionary with two elements: 'anomaly_score' - the average anomaly score of the game sequence (the lower, the more anomalous); 'cheating_probability' - estimated probability of cheating\\\",\\n\\\"depend\\\": \\\"Python library: sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A canon lawyer who advises the priest on matters of church law and regulations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Church Law Consultation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a large language model trained on the principles and articles of 'Canon Law: Letter and Spirit' to provide initial guidance on questions related to church law.\\\",\\n\\\"function_name\\\": \\\"church_law_consultation\\\",\\n\\\"input_args\\\": \\n    {\\n        \\\"question\\\": \\\"A string containing the user's question or scenario related to church law.\\\"\\n    },\\n\\\"return\\\": \\\"A string containing the model's explanation or advice according to church law.\\\",\\n\\\"depend\\\": \\\"A large language model trained on 'Canon Law: Letter and Spirit'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A couple seeking professional advice on mortgage options and investment strategies for buying a home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mortgage Calculation and Investment Strategy Interface\\\",\\n\\\"description\\\": \\\"Calculate the monthly mortgage payment and future value of investment based on inputs.\\\",\\n\\\"function_name\\\": \\\"calculate_mortgage_and_investment\\\",\\n\\\"input_args\\\": [\\\"house_price\\\", \\\"down_payment\\\", \\\"mortgage_term\\\", \\\"interest_rate\\\", \\\"investment_return_rate\\\"],\\n\\\"return\\\": \\\"Monthly mortgage payment, Future value of investment\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, numpy-financial; Web APIs: Zillow's GetRegionChildren API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic OCR participant who travels the globe to take part in various events, and is a part-time OCR blogger.", "synthesized text": "\"{\\n\\\"name\\\": \\\"OCR Event Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface provides the weather forecast for an OCR event based on location and date.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"The location of the OCR event\\\",\\n    \\\"date\\\": \\\"The date of the OCR event in YYYY-MM-DD format\\\"\\n},\\n\\\"return\\\": {\\n    \\\"date\\\": \\\"The date of the OCR event\\\",\\n    \\\"location\\\": \\\"The location of the OCR event\\\",\\n    \\\"temperature\\\": \\\"The average temperature of the day in Celsius\\\",\\n    \\\"weather\\\": \\\"The main weather condition (e.g., Clear, Rain, Snow)\\\",\\n    \\\"description\\\": \\\"A brief description of the weather condition\\\"\\n},\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A geneticist exploring the potential applications of biological research in art and design", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to provide quick and comprehensive statistics on a DNA sequence. Users only need to provide the path to a FASTA file, and the interface will return a dictionary of statistics, including the GC content, count of each nucleotide, and sequence length.\\\",\\n\\\"function_name\\\": \\\"analyze_dna_sequence\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the FASTA file containing the DNA sequence.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"gc_content\\\": \\\"The GC content of the DNA sequence.\\\",\\n    \\\"a_count\\\": \\\"The count of adenine in the DNA sequence.\\\",\\n    \\\"c_count\\\": \\\"The count of cytosine in the DNA sequence.\\\",\\n    \\\"g_count\\\": \\\"The count of guanine in the DNA sequence.\\\",\\n    \\\"t_count\\\": \\\"The count of thymine in the DNA sequence.\\\",\\n    \\\"sequence_length\\\": \\\"The length of the DNA sequence.\\\"\\n},\\n\\\"depend\\\": [\\\"BioPython library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A parent with children attending school in South Delhi", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Information Interface\\\",\\n\\\"description\\\": \\\"This interface uses web scraping to extract information from school websites. Users input the URL of the school's website and the type of information they're looking for, and the function returns the relevant information.\\\",\\n\\\"function_name\\\": \\\"get_school_info\\\",\\n\\\"input_args\\\": [\\\"url\\\", \\\"info_type\\\"],\\n\\\"return\\\": \\\"Relevant school information based on the 'info_type' provided.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Latvian female professional tennis player who's friends with Darja Semeņistaja", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tennis Match Statistics Interface\\\",\\n\\\"description\\\": \\\"Fetches head-to-head tennis match statistics of two players from the Sportradar API.\\\",\\n\\\"function_name\\\": \\\"get_tennis_match_statistics\\\",\\n\\\"input_args\\\": [\\\"player1\\\", \\\"player2\\\"],\\n\\\"return\\\": \\\"A JSON object containing head-to-head match statistics of the two players.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Sportradar API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a loyal, longtime fan of Roger Federer from Switzerland", "synthesized text": "\"{\\n\\\"name\\\": \\\"Match Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface uses web scraping to get match statistics for a given player and year from the ATP World Tour website.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": [\\\"player_name\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"Dictionary containing match statistics for the given player and year.\\\",\\n\\\"depend\\\": [\\\"BeautifulSoup\\\", \\\"requests library\\\", \\\"ATP World Tour website\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A property owner in Morven, North Carolina who values thoughtful service and prioritizes long-term relationships", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tenant Background Check Interface\\\",\\n\\\"description\\\": \\\"A high-level interface for initiating tenant background checks and getting the status of the background check. It simplifies the complex API calls into easy-to-use functions that take in simple inputs (tenant's full name and email) and returns the background check status.\\\",\\n\\\"function_name\\\": [\\\"initiate_tenant_background_check\\\", \\\"get_background_check_status\\\"],\\n\\\"input_args\\\": [\\\"full_name\\\", \\\"email\\\", \\\"candidate_id\\\"],\\n\\\"return\\\": [\\\"candidate_id\\\", \\\"background_check_status\\\"],\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Checkr API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A solar physicist who studies the behavior of the Sun and its impact on space weather", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Flare Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the probability of a solar flare occurring within the next 24 hours based on historical solar observations.\\\",\\n\\\"function_name\\\": \\\"predict_solar_flare\\\",\\n\\\"input_args\\\": \\\"path_to_csv - The path to a CSV file with historical solar observations.\\\",\\n\\\"return\\\": \\\"The probability of a solar flare occurring within the next 24 hours.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, tensorflow, sklearn.preprocessing; Machine learning model: A pre-trained TensorFlow model for solar flare prediction.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A second-generation Eastern European immigrant who shares personal family recipes and stories", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts the quantities of ingredients in a recipe to the user's preferred units.\\\",\\n\\\"function_name\\\": \\\"convert_recipe_ingredients\\\",\\n\\\"input_args\\\": [\\\"ingredients\\\", \\\"to_unit\\\"],\\n\\\"return\\\": \\\"Dictionary with ingredients as keys and tuples as values. The first element in the tuple is the numeric value and the second one is the converted unit.\\\",\\n\\\"depend\\\": \\\"python library: pint\\\"\\n}\"", "description": "tool development"}
{"input persona": "An occupational safety specialist who collaborates with the industrial engineer to ensure workplace ventilation meets industry standards", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides air quality parameters including PM1.0, PM2.5 and PM10 by reading data from a connected sensor.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": {\\n    \\\"serial_port\\\": \\\"The serial port where the air quality sensor is connected.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"PM1.0\\\": \\\"Concentration of PM1.0 particles in ug/m3.\\\",\\n    \\\"PM2.5\\\": \\\"Concentration of PM2.5 particles in ug/m3.\\\",\\n    \\\"PM10\\\": \\\"Concentration of PM10 particles in ug/m3.\\\"\\n},\\n\\\"depend\\\": \\\"This function depends on the py-air-quality Python library, and requires a physical air quality sensor like PMS5003.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nostalgic adult who grew up watching Lucky Luke and is now a pop culture blogger.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Comic Character Appearance Count Interface\\\",\\n\\\"description\\\": \\\"An interface to count the number of times a character appears in a comic script. The user inputs the path to a PDF script file and the character's name, and the interface returns the count of the character's appearances in the script.\\\",\\n\\\"function_name\\\": \\\"count_character_appearances\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_pdf\\\": \\\"the path to the PDF script file\\\",\\n    \\\"character_name\\\": \\\"the name of the character\\\"\\n},\\n\\\"return\\\": \\\"the count of the character's appearances in the script\\\",\\n\\\"depend\\\": \\\"PyPDF2 library, NLTK library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Armenian growing up in Ukraine who is a huge fan of heavyweight boxing.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Boxing Match Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model to predict the outcome of a boxing match between two boxers.\\\",\\n\\\"function_name\\\": \\\"predict_boxing_match\\\",\\n\\\"input_args\\\": [\\\"boxer1\\\", \\\"boxer2\\\"],\\n\\\"return\\\": \\\"A string indicating the predicted winner of the match.\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers (BERT), PyTorch, Pre-trained Boxing Prediction Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A busy and meticulous graduate school applicant with a strong background in Romance languages, planning to apply for a program at Notre Dame", "synthesized text": "\"{\\n  \\\"name\\\": \\\"University Application Deadline Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches the application deadline for a specific program from a university's official website.\\\",\\n  \\\"function_name\\\": \\\"get_application_deadline\\\",\\n  \\\"input_args\\\": [\\\"university\\\", \\\"program\\\"],\\n  \\\"return\\\": \\\"Application deadline as a string\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A non-profit organization seeking to enhance their online fundraising efforts with a professional and visually appealing donation platform", "synthesized text": "\"{\\n\\\"name\\\": \\\"Donation Platform Interface\\\",\\n\\\"description\\\": \\\"An interface for processing online donations using the Stripe API\\\",\\n\\\"function_name\\\": \\\"process_donation\\\",\\n\\\"input_args\\\": [\\\"donation_amount\\\", \\\"card_number\\\", \\\"card_exp_month\\\", \\\"card_exp_year\\\", \\\"card_cvc\\\"],\\n\\\"return\\\": \\\"Transaction status ('succeeded' for successful transactions)\\\",\\n\\\"depend\\\": \\\"Stripe API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A community health nurse from Chase County", "synthesized text": "\"{\\n\\\"name\\\": \\\"Community Health Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface provides a health risk assessment based on the user's provided location and recent health symptoms. It uses APIs from the CDC and WHO to fetch the health risks for the given location, and then filters out those that match the provided symptoms.\\\",\\n\\\"function_name\\\": \\\"get_health_risks\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"symptoms\\\"],\\n\\\"return\\\": \\\"A list of potential health risks in the given location that match the provided symptoms.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"CDC API\\\", \\\"WHO API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired golf professional who is not familiar with the history of golf carts.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Golf Cart History Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the history of golf carts from Wikipedia.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_history\\\",\\n\\\"input_args\\\": \\\"subject\\\",\\n\\\"return\\\": \\\"history_text\\\",\\n\\\"depend\\\": \\\"requests, wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An urban planning consultant familiar with the development trends and growth potential of the East Wanneroo region", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Population Growth Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the population growth based on historical data using a pre-trained machine learning model.\\\",\\n  \\\"function_name\\\": \\\"predict_population\\\",\\n  \\\"input_args\\\": [\\\"years\\\"],\\n  \\\"return\\\": \\\"A list of population predictions for the input years.\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"numpy\\\", \\\"pandas\\\", \\\"tensorflow\\\", \\\"sklearn\\\"], \\\"machine learning models\\\": [\\\"path_to_model.h5\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A group of aspiring actors who idolize Bollywood stars and dream of making it big in the industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bollywood Celebrity Face Recognition Interface\\\",\\n\\\"description\\\": \\\"Interface for recognizing Bollywood celebrities in images. It accepts the path to an image file and returns the name of the Bollywood celebrity that the person in the image most closely resembles.\\\",\\n\\\"function_name\\\": \\\"predict_bollywood_celebrity\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"predicted_celebrity\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "老利物浦球迷，对俱乐部历史有深入了解，对美国商业人士接手球队有激烈反对立场", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Club Historical Data Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to quickly access the historical data of a specific football club, including past match results, player transfers, championship records, manager changes, etc. The user only needs to input the name of the club.\\\",\\n\\\"function_name\\\": \\\"get_football_club_history\\\",\\n\\\"input_args\\\": \\\"club_name\\\",\\n\\\"return\\\": \\\"A list of matches containing historical data for the specified football club\\\",\\n\\\"depend\\\": \\\"requests, football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一位挪威体育记者，专注于冬季两项比赛。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u5b9e\\u65f6\\u5929\\u6c14\\u67e5\\u8be2\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u63d0\\u4f9b\\u7528\\u6237\\u8f93\\u5165\\u57ce\\u5e02\\u540d\\uff0c\\u8fd4\\u56de\\u8be5\\u57ce\\u5e02\\u7684\\u5b9e\\u65f6\\u5929\\u6c14\\u4fe1\\u606f\\uff0c\\u5305\\u62ec\\u5929\\u6c14\\u4e3b\\u8981\\u60c5\\u51b5\\u3001\\u8be6\\u7ec6\\u63cf\\u8ff0\\u3001\\u5f53\\u524d\\u6e29\\u5ea6\\u548c\\u6e7f\\u5ea6\\u3002\\\",\\n\\\"function_name\\\": \\\"get_real_time_weather\\\",\\n\\\"input_args\\\": [\\\"city_name\\\"],\\n\\\"return\\\": \\\"\\u4e00\\u4e2a\\u5b57\\u5178\\uff0c\\u5305\\u542b'main_weather'\\uff08\\u4e3b\\u8981\\u5929\\u6c14\\u60c5\\u51b5\\uff09, 'description'\\uff08\\u8be6\\u7ec6\\u63cf\\u8ff0\\uff09, 'temp'\\uff08\\u5f53\\u524d\\u6e29\\u5ea6\\uff09, 'humidity'\\uff08\\u6e7f\\u5ea6\\uff09\\u3002\\\",\\n\\\"depend\\\": \\\"Python requests\\u5e93\\uff0cOpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A loan processor who assists with gathering and organizing the necessary documents", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Organizer Interface\\\",\\n\\\"description\\\": \\\"This interface assists with gathering and organizing the necessary documents by file type within a given directory.\\\",\\n\\\"function_name\\\": \\\"get_all_files\\\",\\n\\\"input_args\\\": [\\\"directory\\\", \\\"file_type\\\"],\\n\\\"return\\\": \\\"Dictionary with filenames as keys and their respective file paths as values.\\\",\\n\\\"depend\\\": [\\\"Python libraries: os, pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a local guide from the Bío Bío Region, Chile.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Earthquake Alert Interface\\\",\\n    \\\"description\\\": \\\"An interface to get recent earthquakes in the B\\u00edo B\\u00edo Region, Chile that exceed a specified magnitude. The information is obtained from the USGS Earthquake Data Center.\\\",\\n    \\\"function_name\\\": \\\"get_recent_earthquakes\\\",\\n    \\\"input_args\\\": \\\"min_magnitude - the minimum magnitude of earthquakes to return\\\",\\n    \\\"return\\\": \\\"A list of dictionaries. Each dictionary contains information about an earthquake, including the magnitude ('mag'), location ('place'), and time of the earthquake ('time').\\\",\\n    \\\"depend\\\": \\\"Python's built-in requests and datetime libraries, and the USGS Earthquake Data Center API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tech-savvy student leader of the rocketry club who sees robotics as less exciting", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rocket Trajectory Prediction Interface\\\", \\n\\\"description\\\": \\\"This interface receives initial conditions of a rocket launch (velocity, launch angle) and returns the maximum height, total time in the air, and the total distance covered by the rocket.\\\", \\n\\\"function_name\\\": \\\"rocket_trajectory\\\", \\n\\\"input_args\\\": {\\n    \\\"velocity\\\": \\\"The initial velocity of the rocket (in m/s).\\\", \\n    \\\"angle\\\": \\\"The initial launch angle of the rocket (in degrees).\\\"\\n}, \\n\\\"return\\\": {\\n    \\\"Time of Flight\\\": \\\"The total time the rocket is in the air (in seconds).\\\",\\n    \\\"Max Height\\\": \\\"The maximum height reached by the rocket (in meters).\\\",\\n    \\\"Total Distance\\\": \\\"The total horizontal distance covered by the rocket (in meters).\\\"\\n}, \\n\\\"depend\\\": [\\\"scipy\\\", \\\"numpy\\\", \\\"math\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A childhood friend of Zoran Jankovic who grew up with him in Belgrade but lost contact when he moved to the U.S.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Friend Locator Interface\\\", \\n\\\"description\\\": \\\"An interface that uses social media APIs and an email lookup service to help locate a long-lost friend.\\\", \\n\\\"function_name\\\": \\\"locate_friend\\\", \\n\\\"input_args\\\": {\\\"name\\\": \\\"string representing the friend's name\\\", \\\"location\\\": \\\"string representing the friend's last known location\\\"}, \\n\\\"return\\\": \\\"A dictionary with possible matches from LinkedIn, Facebook, and Hunter.\\\", \\n\\\"depend\\\": [\\\"requests library, LinkedIn API, Facebook Graph API, Hunter API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A New Yorker who can't function without his morning coffee", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nearby Coffee Shop Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Places API to return a list of nearby coffee shops based on the user's current location.\\\",\\n\\\"function_name\\\": \\\"get_nearby_coffee_shops\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"The user's current location. It should be a string in the format of 'latitude,longitude'.\\\"\\n},\\n\\\"return\\\": \\\"A list of names of the nearby coffee shops.\\\",\\n\\\"depend\\\": \\\"This function depends on the requests library and Google Places API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical company seeking to optimize drug discovery using quantum computing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum Drug Discovery Interface\\\",\\n\\\"description\\\": \\\"This interface receives a molecular structure and returns the lowest energy conformation using quantum computing.\\\",\\n\\\"function_name\\\": \\\"get_lowest_energy_conformation\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"molecule\\\": \\\"A string representing the molecular structure of a potential drug. Each atom is represented by its atomic symbol and cartesian coordinates. For example, 'H .0 .0 .0; H .0 .0 .742'.\\\"\\n    },\\n\\\"return\\\": \\\"The lowest energy conformation of the molecule, a critical step in drug discovery.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"qiskit\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A mathematician who specializes in stochastic models for predicting housing prices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Housing Price Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface receives a dictionary with housing features as input and returns a predicted price for the house using a pre-trained TensorFlow model.\\\",\\n\\\"function_name\\\": \\\"predict_housing_price\\\",\\n\\\"input_args\\\": {\\\"input_dict\\\": \\\"A dictionary with housing features like location, number of rooms, type of house etc.\\\"},\\n\\\"return\\\": \\\"A predicted price for the house.\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"tensorflow\\\", \\\"pandas\\\", \\\"sklearn.preprocessing\\\"], \\\"model\\\": \\\"Pre-trained TensorFlow model for housing price prediction\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A skeptic about the cryptocurrency hype and its long-term viability", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cryptocurrency Price Tracker\\\",\\n\\\"description\\\": \\\"This interface takes in the name of a cryptocurrency and returns its current price, market cap, and 24-hour trading volume.\\\",\\n\\\"function_name\\\": \\\"get_crypto_data\\\",\\n\\\"input_args\\\": {\\n    \\\"crypto_name\\\": \\\"The name of the cryptocurrency (string)\\\"\\n},\\n\\\"return\\\": {\\n    \\\"current_price\\\": \\\"The current price of the cryptocurrency (float)\\\",\\n    \\\"market_cap\\\": \\\"The market cap of the cryptocurrency (float)\\\",\\n    \\\"trading_volume\\\": \\\"The 24-hour trading volume of the cryptocurrency (float)\\\"\\n},\\n\\\"depend\\\": \\\"CoinGecko API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A financial analyst who advises on the best credit card strategies for maximizing points", "synthesized text": "\"{\\n\\\"name\\\": \\\"Credit Card Recommendation Interface\\\", \\n\\\"description\\\": \\\"This interface takes in monthly expenditure in various categories and returns the best credit cards for maximizing points based on the expenditure.\\\", \\n\\\"function_name\\\": \\\"get_best_credit_cards\\\", \\n\\\"input_args\\\": [\\\"groceries\\\", \\\"dining\\\", \\\"travel\\\", \\\"gas\\\", \\\"other\\\"], \\n\\\"return\\\": [\\\"List of top 5 credit cards\\\"], \\n\\\"depend\\\": [\\\"Credit Card API from CreditCardAPI.com\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A talent agent who represents the Harry Potter actors and coordinates their interviews and publicity appearances", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interview Schedule Management Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google Calendar API to manage interview and publicity schedules for actors. It creates an event in the calendar based on the input parameters.\\\",\\n\\\"function_name\\\": \\\"create_calendar_event\\\",\\n\\\"input_args\\\": {\\\"actor_name\\\": \\\"string\\\", \\\"date\\\": \\\"string\\\", \\\"start_time\\\": \\\"string\\\", \\\"end_time\\\": \\\"string\\\", \\\"description\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (URL of the created event)\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Ukrainian coal miner", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Index Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the real-time air quality index (AQI) data for a specified city.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": \\\"city\\\",\\n\\\"return\\\": {\\\"AQI\\\": \\\"The current Air Quality Index\\\", \\\"Category\\\": \\\"The category of the current AQI\\\"},\\n\\\"depend\\\": \\\"requests library, AQICN API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casual consumer not too familiar with the technicalities of cable connectors.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cable Connector Type Identification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to identify the type of a cable connector from an image.\\\",\\n\\\"function_name\\\": \\\"identify_cable_connector\\\",\\n\\\"input_args\\\": \\\"img_path - The path to the image file of the cable connector.\\\",\\n\\\"return\\\": \\\"The type of the cable connector in the image. Possible return values include: 'HDMI', 'USB', 'VGA', 'DVI', 'Ethernet', 'Auxiliary', 'Coaxial'.\\\",\\n\\\"depend\\\": \\\"This function depends on the TensorFlow library and a pre-trained machine learning model for cable connector classification.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A community outreach coordinator working on a financial literacy program for low-income families", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Health Score Interface\\\",\\n\\\"description\\\": \\\"This interface takes in financial data (income, expenses, savings, debt) and returns a financial health score using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"get_financial_health_score\\\",\\n\\\"input_args\\\": {\\\"model_path\\\": \\\"Path to the pre-trained model\\\", \\\"income\\\": \\\"Monthly income in dollars\\\", \\\"expenses\\\": \\\"Monthly expenses in dollars\\\", \\\"savings\\\": \\\"Current savings in dollars\\\", \\\"debt\\\": \\\"Current debt in dollars\\\"},\\n\\\"return\\\": \\\"A financial health score (a continuous value).\\\",\\n\\\"depend\\\": \\\"Python library: numpy, sklearn, pickle; Trained Machine Learning Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional painter adamant that physical mediums convey emotion more deeply than digital ones", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Palette Extraction Interface\\\",\\n\\\"description\\\": \\\"Extracts the dominant colors from a digital image of a painting. The colors are returned as a list of RGB values.\\\",\\n\\\"function_name\\\": \\\"get_dominant_colors\\\",\\n\\\"input_args\\\": {\\n    \\\"image_path\\\": \\\"The path to the image file.\\\",\\n    \\\"color_count\\\": \\\"The number of dominant colors to extract (optional, defaults to 5).\\\"\\n},\\n\\\"return\\\": \\\"A list of RGB values representing the dominant colors in the image.\\\",\\n\\\"depend\\\": \\\"OpenCV, sklearn.cluster.KMeans\\\"\\n}\"", "description": "tool development"}
{"input persona": "a first-time dad who is excited about celebrating Mother's Day with his wife and newborn", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Gift Recommendation Interface\\\",\\n  \\\"description\\\": \\\"Interface for recommending breakfast recipes for a first-time dad to make for his wife on Mother's Day. The interface considers dietary restrictions.\\\",\\n  \\\"function_name\\\": \\\"get_breakfast_recipes\\\",\\n  \\\"input_args\\\": {\\\"dietary_restrictions\\\": \\\"a string indicating dietary restrictions, e.g. 'vegetarian', 'vegan', 'gluten free'. The argument is optional.\\\"},\\n  \\\"return\\\": \\\"A list of 5 dictionaries, each containing a 'title' (the name of the recipe), 'image' (a link to an image of the completed recipe), and 'recipe_link' (a link to the full recipe).\\\",\\n  \\\"depend\\\": \\\"This function leverages the Spoonacular API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A privacy lawyer who frequently discusses the ethical implications of reality TV with their partner", "synthesized text": "\"{\\n\\\"name\\\": \\\"Reality TV Topic Classification Interface\\\",\\n\\\"description\\\": \\\"An interface that classifies sentences or paragraphs about reality TV into different topics such as ethics, privacy, competition, entertainment value, etc.\\\",\\n\\\"function_name\\\": \\\"classify_reality_tv_topic\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"classification result\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library with the 'distilbert-base-uncased-finetuned-sst-2-english' model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former professional basketball player seeking advice on managing a chronic knee injury", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Physical Exercise Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that provides exercise recommendations for managing chronic knee injuries based on the user's age, weight, height, and injury severity.\\\",\\n  \\\"function_name\\\": \\\"recommend_exercises\\\",\\n  \\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the user (integer)\\\",\\n    \\\"weight\\\": \\\"The weight of the user (float, kg)\\\",\\n    \\\"height\\\": \\\"The height of the user (float, cm)\\\",\\n    \\\"injury_severity\\\": \\\"The severity of the user's knee injury on a scale of 1 to 10 (integer)\\\"\\n  },\\n  \\\"return\\\": \\\"A list of recommended exercises (strings) sorted in descending order of recommendation score.\\\",\\n  \\\"depend\\\": \\\"TensorFlow, pandas, numpy, a pre-trained TensorFlow model for exercise recommendation, and a .npy file for exercise labels\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a Vietnamese geology graduate who is interested in geopolitical issues", "synthesized text": "\"{\\n\\\"name\\\": \\\"Country Geological Information Interface\\\",\\n\\\"description\\\": \\\"This interface returns geological and geopolitical information of a specific country, including area, population, region, subregion, languages, currencies, and recent earthquake events.\\\",\\n\\\"function_name\\\": \\\"get_country_info\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"A dictionary with the country's name, area, population, region, subregion, languages, currencies, and recent earthquake events.\\\",\\n\\\"depend\\\": \\\"requests, datetime, timedelta, RestCountries API, USGS Earthquake Hazards Program API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A grandfather who worked as a construction engineer and shares fascinating stories of building structures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Structural Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that provides analysis of a structure including the forces, moments, and displacements. The user inputs the details of a structure (such as beams, columns, and loads), and the interface returns an analysis of the structure.\\\",\\n\\\"function_name\\\": \\\"analyze_structure\\\",\\n\\\"input_args\\\": [\\\"nodes\\\", \\\"elements\\\", \\\"supports\\\", \\\"loads\\\"],\\n\\\"return\\\": [\\\"forces\\\", \\\"moments\\\", \\\"displacements\\\"],\\n\\\"depend\\\": [\\\"PyCiv\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hardworking PhD candidate striving to contribute novel ideas in the field of distributed systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Latency Measurement Interface\\\",\\n\\\"description\\\": \\\"This interface measures the latency of communication between a client and a server in a distributed system. It uses Python's built-in socket library to send a message to the server and measures the time it takes for a response to be received.\\\",\\n\\\"function_name\\\": \\\"measure_latency\\\",\\n\\\"input_args\\\": [\\\"server_ip\\\", \\\"server_port\\\"],\\n\\\"return\\\": \\\"Latency in milliseconds between the client and the server.\\\",\\n\\\"depend\\\": \\\"Python's built-in socket and time libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A PhD student majoring in genetics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genomic Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a genomic sequence by counting the occurrence of each nucleotide, calculating the GC content, and determining the total length of the sequence.\\\",\\n\\\"function_name\\\": \\\"analyze_genomic_sequence\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"the path to a genomic sequence file in FASTA format\\\"},\\n\\\"return\\\": {\\\"A_count\\\": \\\"the count of Adenine nucleotides\\\", \\\"T_count\\\": \\\"the count of Thymine nucleotides\\\", \\\"G_count\\\": \\\"the count of Guanine nucleotides\\\", \\\"C_count\\\": \\\"the count of Cytosine nucleotides\\\", \\\"GC_content\\\": \\\"the GC content of the sequence\\\", \\\"sequence_length\\\": \\\"the total length of the sequence\\\"},\\n\\\"depend\\\": [\\\"Biopython (Python library)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A wise and understanding parent who has been through their fair share of ups and downs in relationships", "synthesized text": "\"{\\n\\\"name\\\": \\\"Relationship Advice Query Interface\\\",\\n\\\"description\\\": \\\"This interface provides a way to generate relationship advice based on a given issue. It leverages a pre-trained model from Hugging Face to generate this advice.\\\",\\n\\\"function_name\\\": \\\"relationship_advice_query\\\",\\n\\\"input_args\\\": \\\"issue - The relationship issue that the user wants advice on.\\\",\\n\\\"return\\\": \\\"A string containing advice on the given issue.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A priest who served at St. Philip Neri Church in the past.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Passage Lookup Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches specific Bible passages. The user only needs to input the book, chapter, and verses they want to look up, and the interface will return the text of those verses.\\\",\\n\\\"function_name\\\": \\\"lookup_bible_passage\\\",\\n\\\"input_args\\\": {\\n    \\\"book\\\": \\\"The book of the Bible (e.g., 'John')\\\",\\n    \\\"chapter\\\": \\\"The chapter number (e.g., 3)\\\",\\n    \\\"verse\\\": \\\"The verse number(s) (e.g., 16)\\\"\\n},\\n\\\"return\\\": \\\"The text of the specified Bible verse(s).\\\",\\n\\\"depend\\\": \\\"Web API: Bible API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A published neuroscientist with a passion for exploring the connection between cognition and emotions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brainwave Data Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface loads EEG data from a file and plots its power spectral density, providing insights into the dominant frequencies of the brain waves.\\\", \\n\\\"function_name\\\": \\\"plot_psd\\\", \\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the EEG data file (.edf format).\\\"\\n}, \\n\\\"return\\\": \\\"Displays a power spectral density plot of the EEG data.\\\", \\n\\\"depend\\\": \\\"This function leverages the MNE-Python library for processing and analyzing EEG data, and matplotlib for visualization.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Um professor de estatística que orienta o data scientist na aplicação de métodos estatísticos adequados para a análise de dados", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interface de Sele\\u00e7\\u00e3o de M\\u00e9todo Estat\\u00edstico\\\",\\n  \\\"description\\\": \\\"Esta interface pega a descri\\u00e7\\u00e3o do problema do usu\\u00e1rio e sugere o m\\u00e9todo estat\\u00edstico mais adequado para a an\\u00e1lise de dados.\\\",\\n  \\\"function_name\\\": \\\"suggest_statistical_method\\\",\\n  \\\"input_args\\\": {\\n    \\\"problem_description\\\": \\\"Uma descri\\u00e7\\u00e3o simples do problema de an\\u00e1lise de dados.\\\"\\n  },\\n  \\\"return\\\": \\\"O m\\u00e9todo estat\\u00edstico mais adequado para resolver o problema.\\\",\\n  \\\"depend\\\": \\\"HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired drag racing champion who competed against Tim Wilkerson and now reminisces about their racing days", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Drag Race Statistics Interface\\\",\\n  \\\"description\\\": \\\"Fetches and summarizes historical data about drag races between two racers\\\",\\n  \\\"function_name\\\": \\\"get_drag_race_statistics\\\",\\n  \\\"input_args\\\": {\\n    \\\"racer1\\\": \\\"Name of the first racer\\\",\\n    \\\"racer2\\\": \\\"Name of the second racer\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"racer1\\\": \\\"Name of the first racer\\\",\\n    \\\"racer2\\\": \\\"Name of the second racer\\\",\\n    \\\"number_of_races\\\": \\\"Number of races between the two racers\\\",\\n    \\\"racer1_wins\\\": \\\"Number of races won by the first racer\\\",\\n    \\\"racer2_wins\\\": \\\"Number of races won by the second racer\\\"\\n  },\\n  \\\"depend\\\": \\\"Drag Race API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a technical expert on task automation with Grunt", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grunt Task Runner Execution Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to execute tasks with Grunt by providing the task name. It returns the output of the task along with a success flag.\\\",\\n\\\"function_name\\\": \\\"execute_grunt_task\\\",\\n\\\"input_args\\\": {\\n    \\\"task_name\\\": \\\"Name of the task to execute with Grunt\\\"\\n},\\n\\\"return\\\": {\\n    \\\"success\\\": \\\"A boolean indicating if the task execution was successful\\\",\\n    \\\"output\\\": \\\"The output or error message from the task execution\\\"\\n},\\n\\\"depend\\\": [\\\"subprocess (Python standard library)\\\", \\\"Grunt (Node.js)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Civil War history podcaster in search of unique and personal narratives to share with their audience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Civil War Soldier Record Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for Civil War soldier records to create unique and personal narratives.\\\",\\n\\\"function_name\\\": \\\"get_civil_war_soldier_details\\\",\\n\\\"input_args\\\": \\\"soldier_name\\\",\\n\\\"return\\\": \\\"A dictionary containing details about the soldier, including Name, Company, Rank In, Rank Out, Regiment, Side, State, Function, Alternate Names.\\\",\\n\\\"depend\\\": \\\"National Park Service's Civil War Soldiers and Sailors System (CWSS) API, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "An educational institution seeking to enhance their history curriculum with interactive timelines", "synthesized text": "\"{\\n\\\"name\\\": \\\"Timeline Creation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Knight Lab's TimelineJS library to create interactive timelines from a Google Spreadsheet.\\\",\\n\\\"function_name\\\": \\\"create_timeline\\\",\\n\\\"input_args\\\": {\\n  \\\"spreadsheet_url\\\": \\\"The URL of the Google Spreadsheet containing the timeline data. The spreadsheet must be published to the web.\\\"\\n  },\\n\\\"return\\\": \\\"An interactive timeline embedded in an HTML file.\\\",\\n\\\"depend\\\": \\\"IPython.display, getpass, Knight Lab's TimelineJS library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Pakistani TV drama critic who avidly follows the Lux Style Awards", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Lux Style Awards Nominees and Winners Data Extraction Interface\\\",\\n  \\\"description\\\": \\\"Extracts nominees and winners data for each category from Lux Style Awards' official website for a specified year.\\\",\\n  \\\"function_name\\\": \\\"get_lux_awards_data\\\",\\n  \\\"input_args\\\": \\\"year\\\",\\n  \\\"return\\\": \\\"A dictionary containing nominees and winners for each category.\\\",\\n  \\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a chill 20-year-old who loves memes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meme Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the imgflip API to generate a custom meme based on user inputs. It requires the user to input the template name and the top and bottom texts for the meme.\\\",\\n\\\"function_name\\\": \\\"generate_meme\\\",\\n\\\"input_args\\\": {\\\"template_name\\\": \\\"string\\\", \\\"top_text\\\": \\\"string\\\", \\\"bottom_text\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (URL to the generated meme)\\\",\\n\\\"depend\\\": \\\"imgflip API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an anxious tenant in Ontario", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rent Increase Calculator Interface\\\", \\n\\\"description\\\": \\\"An interface to calculate the maximum legal rent increase for a tenant in Ontario, Canada. It scrapes the latest rent increase cap from the Ontario government's website.\\\",\\n\\\"function_name\\\": \\\"calculate_max_rent_increase\\\",\\n\\\"input_args\\\": [\\\"current_rent\\\"],\\n\\\"return\\\": \\\"The maximum amount the user's rent could legally be increased to.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup from bs4\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A licensed electrician specializing in rewiring old buildings to meet safety standards", "synthesized text": "\"{\\n\\\"name\\\": \\\"Circuit Diagram Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to analyze a circuit diagram and provide all the necessary details related to it like the number and type of components, their arrangement, etc.\\\",\\n\\\"function_name\\\": \\\"analyze_circuit_diagram\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"A dictionary containing detailed information about each component present in the circuit diagram.\\\",\\n\\\"depend\\\": \\\"Python libraries (torch, PIL, torchvision), Machine Learning Model (YOLOv5)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An older sibling who works in a traditional industry and advises caution in covering volatile tech companies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Volatility Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches historical stock market data for a certain company by using the yfinance API and calculates the stock's volatility over a given period. The user only needs to input the stock's ticker symbol and the desired period for analysis.\\\",\\n\\\"function_name\\\": \\\"calculate_volatility\\\",\\n\\\"input_args\\\": {\\n  \\\"ticker\\\": \\\"The ticker symbol representing the company's stock (string)\\\",\\n  \\\"period\\\": \\\"The period over which to calculate volatility. Default is '1y' for one year (string)\\\"\\n},\\n\\\"return\\\": \\\"The calculated volatility of the company's stock (float).\\\",\\n\\\"depend\\\": \\\"yfinance, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from a clean energy company seeking collaboration with the inventor", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patent Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for patents associated with a specific inventor using the Google Patents Public Datasets API\\\",\\n\\\"function_name\\\": \\\"get_patents_by_inventor\\\",\\n\\\"input_args\\\": \\\"inventor_name\\\",\\n\\\"return\\\": \\\"List of patents associated with the inventor\\\",\\n\\\"depend\\\": \\\"Google Patents Public Datasets API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young student in Japan majored in religious studies.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Buddhist Scripture Translation Interface\\\",\\n\\\"description\\\": \\\"An interface for translating Buddhist scriptures from Pali or Sanskrit to English or Japanese, using the Google Translation API.\\\",\\n\\\"function_name\\\": \\\"translate_buddhist_scripture\\\",\\n\\\"input_args\\\": [\\\"input_text\\\", \\\"target_language\\\"],\\n\\\"return\\\": [\\\"original_text\\\", \\\"translated_text\\\", \\\"source_language\\\"],\\n\\\"depend\\\": [\\\"Google Cloud Translation API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young musician struggling with the side effects of medication and seeking alternative treatments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alternative Treatments Search Interface\\\",\\n\\\"description\\\": \\\"This interface takes user input of side effects and returns a list of potential alternative treatments mentioned in medical literature.\\\",\\n\\\"function_name\\\": \\\"get_alternative_treatments\\\",\\n\\\"input_args\\\": \\\"side_effects\\\",\\n\\\"return\\\": \\\"A list of potential alternative treatments mentioned in medical literature.\\\",\\n\\\"depend\\\": \\\"Uses the Huggingface Transformers library for Natural Language Processing and the PubMed API for querying medical literature.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A university professor teaching aeronautics and astronautics, always ready with a challenging question", "synthesized text": "\"{\\n\\\"name\\\": \\\"Astronomy Data Fetcher Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the astronomy picture of the day along with its explanation from NASA's APOD API.\\\",\\n\\\"function_name\\\": \\\"fetch_astronomy_data\\\",\\n\\\"input_args\\\": {\\\"date\\\": \\\"The date for which the astronomy data is to be fetched in YYYY-MM-DD format.\\\"},\\n\\\"return\\\": {\\\"image_url\\\": \\\"The URL of the astronomy picture of the day.\\\", \\\"explanation\\\": \\\"Explanation of the astronomy picture.\\\"},\\n\\\"depend\\\": {\\\"requests\\\": \\\"A Python library for making HTTP requests.\\\", \\\"NASA's APOD API\\\": \\\"A Web API from NASA.\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A traditional parenting expert who believes in discipline and structure over evidence-based guidance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Discipline Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface for recording and retrieving discipline records of children. This helps parents or educators track and maintain discipline records in a structured manner.\\\",\\n\\\"function_name\\\": [\\\"record_discipline\\\", \\\"get_discipline_records\\\"],\\n\\\"input_args\\\": {\\n    \\\"record_discipline\\\": [\\\"child_name\\\", \\\"date\\\", \\\"behavior\\\", \\\"action_taken\\\"],\\n    \\\"get_discipline_records\\\": [\\\"child_name\\\"]\\n  },\\n\\\"return\\\": {\\n    \\\"record_discipline\\\": \\\"None, the function writes data to a file.\\\",\\n    \\\"get_discipline_records\\\": \\\"A list of discipline records for the specified child.\\\"\\n  },\\n\\\"depend\\\": \\\"Python built-in functionalities\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer programming prodigy who builds advanced dental software to streamline orthodontic procedures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tooth Segmentation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model to segment teeth in a dental image. This can be used for various dental procedures like detection of cavities, crowns, root canals, etc.\\\",\\n\\\"function_name\\\": \\\"tooth_segmentation\\\",\\n\\\"input_args\\\": \\\"path_to_img - string representing the path to the dental image\\\",\\n\\\"return\\\": \\\"An image with teeth segmented\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, cv2, numpy, a pre-trained model for tooth segmentation.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A university history professor writing a book on the evolution of flight technology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Flight Data Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a flight number and date, and returns detailed information about the flight, including the aircraft type, departure and arrival airports, and estimated departure and arrival times.\\\",\\n\\\"function_name\\\": \\\"get_historical_flight_data\\\",\\n\\\"input_args\\\": [\\\"flight_number\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'aircraft_type', 'departure_airport', 'arrival_airport', 'departure_time', 'arrival_time'\\\",\\n\\\"depend\\\": \\\"AviationStack API\\\"\\n}\"", "description": "tool development"}
{"input persona": "PHP developer with 5 years of experience interested in caching strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Memcached caching Interface\\\",\\n\\\"description\\\": \\\"An interface to interact with Memcached for caching data. It provides methods to set, get, and delete data from the cache.\\\",\\n\\\"function_name\\\": [\\\"set_cache\\\", \\\"get_cache\\\", \\\"delete_cache\\\"],\\n\\\"input_args\\\": [\\\"key\\\", \\\"value\\\", \\\"time\\\"],\\n\\\"return\\\": [\\\"True if success, False if fail\\\"],\\n\\\"depend\\\": [\\\"python-memcached library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A medical information technologist who develops and implements secure electronic health record systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"EHR Encryption Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to encrypt and decrypt electronic health records using a password. It uses the cryptography library in Python for encryption and decryption.\\\",\\n\\\"function_name\\\": [\\\"get_key\\\", \\\"encrypt_ehr\\\", \\\"decrypt_ehr\\\"],\\n\\\"input_args\\\": [[\\\"password\\\"], [\\\"data\\\", \\\"password\\\"], [\\\"cipher_text\\\", \\\"password\\\", \\\"salt\\\"]],\\n\\\"return\\\": [\\\"key, salt\\\", \\\"cipher_text, salt\\\", \\\"plain_text\\\"],\\n\\\"depend\\\": [\\\"Python cryptography library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow judge who shares a commitment to combating housing discrimination and educational inequities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Housing Discrimination Report Interface\\\",\\n\\\"description\\\": \\\"An interface for generating reports on housing and educational discrimination for a given location using data from the Civil Rights Data Collection (CRDC) API.\\\",\\n\\\"function_name\\\": \\\"get_discrimination_data\\\",\\n\\\"input_args\\\": \\\"location - a string representing the location for which to generate the report\\\",\\n\\\"return\\\": \\\"A dictionary containing data on instances of housing and educational discrimination in the given location.\\\",\\n\\\"depend\\\": \\\"Python's requests and pandas libraries, and the Civil Rights Data Collection (CRDC) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A crime novel writer intrigued by the diversity and complexity of urban life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crime Pattern Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface identifies the patterns or hotspots of different types of crimes in a city, given a dataset of crime reports.\\\",\\n\\\"function_name\\\": \\\"crime_pattern_analysis\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"crime_type\\\", \\\"n_clusters\\\"],\\n\\\"return\\\": \\\"centroids of the crime hotspots\\\",\\n\\\"depend\\\": \\\"sklearn.cluster.KMeans, pandas, sklearn.preprocessing.MinMaxScaler\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow parole officer who shares the same commitment and dedication to their work", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inmate Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input an inmate's profile (e.g., age, previous offenses, etc.), and uses a pre-trained model from Hugging Face's transformer models to return an assessment of the risk of reoffending.\\\",\\n\\\"function_name\\\": \\\"predict_recidivism\\\",\\n\\\"input_args\\\": \\\"inmate_profile\\\",\\n\\\"return\\\": \\\"A float representing the probability of high risk of reoffending\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformer models\\\"\\n}\"", "description": "tool development"}
{"input persona": "a middle-aged woman living paycheck to paycheck in the United States", "synthesized text": "\"{\\n\\\"name\\\": \\\"Budget Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface to record transactions, categorize and visualize expenditure to help users manage their budget.\\\",\\n\\\"function_name\\\": \\\"track_budget\\\",\\n\\\"input_args\\\": \\\"A list of transactions. Each transaction is a dictionary that contains 'category', 'amount', and 'date'.\\\",\\n\\\"return\\\": \\\"A summary of expenditure by category and a pie chart.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "an ophthalmologist concerned about the prevalence of misdiagnosis in dry-eye disease", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dry Eye Disease Diagnosis Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that diagnoses dry-eye disease from ocular images using a pre-trained deep learning model from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"diagnose_dry_eye\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\"],\\n\\\"return\\\": \\\"Diagnosis result: 'Dry Eye Disease' or 'Not Dry Eye Disease'\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"machine learning model (from tensorflow_hub or similar) trained to diagnose dry-eye disease\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A prop master for film and television productions, always on the hunt for period-accurate electronics", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Vintage Electronics Price Estimator Interface\\\",\\n    \\\"description\\\": \\\"An interface that uses the eBay API to estimate the price of vintage electronics based on their name and model.\\\",\\n    \\\"function_name\\\": \\\"get_average_price\\\",\\n    \\\"input_args\\\": {\\n        \\\"electronic_name\\\": \\\"The name of the vintage electronic.\\\",\\n        \\\"model\\\": \\\"The model of the vintage electronic.\\\"\\n    },\\n    \\\"return\\\": \\\"The estimated average price of the vintage electronic based on similar items sold on eBay.\\\",\\n    \\\"depend\\\": \\\"Web API: eBay API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A loyal customer who supports the fast food chain but wishes for more vegetarian options", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vegetarian Menu Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spoonacular API to suggest vegetarian dishes that could be added to a specified fast food chain's menu.\\\",\\n\\\"function_name\\\": \\\"get_vegetarian_suggestions\\\",\\n\\\"input_args\\\": [\\\"fast_food_chain\\\"],\\n\\\"return\\\": \\\"A list of vegetarian dish names.\\\",\\n\\\"depend\\\": \\\"Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud Italian and a swimming coach who doesn't follow diving closely.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Diving Score Calculation Interface\\\",\\n  \\\"description\\\": \\\"Calculates the score of a dive based on its difficulty, execution, and judges' scores.\\\",\\n  \\\"function_name\\\": \\\"calculate_diving_score\\\",\\n  \\\"input_args\\\": [\\\"difficulty\\\", \\\"execution\\\", \\\"judge_scores\\\"],\\n  \\\"return\\\": \\\"The final calculated score of the dive.\\\",\\n  \\\"depend\\\": \\\"Python built-in functions\\\"\\n}\"", "description": "tool development"}
{"input persona": "a passionate Italian poet", "synthesized text": "\"{\\n\\\"name\\\": \\\"Italian Poem Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates Italian poems into English using the Google Cloud Translation API.\\\",\\n\\\"function_name\\\": \\\"translate_italian_poem\\\",\\n\\\"input_args\\\": {\\\"italian_poem\\\": \\\"a string of Italian poem content\\\"},\\n\\\"return\\\": \\\"the English translation of the input Italian poem as a string\\\",\\n\\\"depend\\\": [\\\"google.cloud.translate_v2\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A breeder of Bichon Frises who is in constant competition with the Shih Tzu breeder for top honors in dog shows", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dog Show Result Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface compares the recent show results for the user's dog breed and a competitor's breed by scraping data from a dog show results website.\\\",\\n\\\"function_name\\\": \\\"compare_show_results\\\",\\n\\\"input_args\\\": [\\\"user_breed\\\", \\\"competitor_breed\\\"],\\n\\\"return\\\": \\\"A dictionary with the results for the user's breed and the competitor's breed.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A postcolonial scholar who argues that colonial development exploited and diminished Aboriginal heritage sites", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aboriginal Heritage Sites Preservation Interface\\\",\\n\\\"description\\\": \\\"An interface that retrieves a list of Aboriginal heritage sites in a specific location to promote awareness and preservation.\\\",\\n\\\"function_name\\\": \\\"get_aboriginal_heritage_sites\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"list of strings (names of Aboriginal heritage sites)\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A construction estimator who uses data from the geotechnical engineer to accurately calculate project costs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Soil Properties Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface performs statistical analysis on soil data provided by a geotechnical engineer and returns the mean, median, and standard deviation of different soil properties.\\\",\\n\\\"function_name\\\": \\\"analyze_soil_properties\\\",\\n\\\"input_args\\\": \\\"path_to_csv - A string representing the path to a CSV file containing soil data\\\",\\n\\\"return\\\": \\\"A dictionary where the keys represent different soil properties and the values are another dictionary with keys 'mean', 'median', and 'std' representing the mean, median, and standard deviation of that soil property, respectively.\\\",\\n\\\"depend\\\": \\\"Python Libraries - pandas, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a native resident of Coatzacoalcos who is enthusiastic about his hometown development", "synthesized text": "\"{\\n\\\"name\\\": \\\"City Development Data Interface\\\",\\n\\\"description\\\": \\\"This interface provides various data about city development such as cost of living, property prices, crime, health care, pollution, traffic, quality of life, and travel. It uses the Numbeo API to fetch this data.\\\",\\n\\\"function_name\\\": \\\"get_city_data\\\",\\n\\\"input_args\\\": [\\\"city_name\\\"],\\n\\\"return\\\": \\\"Dictionary containing various indices related to city development\\\",\\n\\\"depend\\\": [\\\"Numbeo API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired surgeon who was a personal friend of Dr. Thomas R. Russell.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Medical Research Paper Summary Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches abstracts of medical research papers from the PubMed database and summarizes them using a pre-trained model from Hugging Face Transformers.\\\",\\n  \\\"function_name\\\": \\\"summarize_abstract\\\",\\n  \\\"input_args\\\": \\\"pmid - The PubMed ID of the research paper\\\",\\n  \\\"return\\\": \\\"A summarized version of the paper's abstract\\\",\\n  \\\"depend\\\": \\\"requests, Hugging Face Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "a conservative Iranian government official", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Converter Interface\\\",\\n\\\"description\\\": \\\"This interface provides the current exchange rate between two currencies provided by the user.\\\",\\n\\\"function_name\\\": \\\"get_currency_conversion_rate\\\",\\n\\\"input_args\\\": [\\\"base_currency\\\", \\\"target_currency\\\"],\\n\\\"return\\\": \\\"Current exchange rate from the base currency to the target currency.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"ExchangeRate-API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a spanish-speaking songwriter who has just released his album", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Lyrics Translation Interface\\\",\\n  \\\"description\\\": \\\"Translates Spanish lyrics to English to help Spanish-speaking songwriters reach a broader, English-speaking audience.\\\",\\n  \\\"function_name\\\": \\\"translate_lyrics\\\",\\n  \\\"input_args\\\": \\\"spanish_lyrics\\\",\\n  \\\"return\\\": \\\"English translation of the lyrics\\\",\\n  \\\"depend\\\": \\\"deepl Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer science graduate student who is using the open source library as a learning resource", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Snippet Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses GitHub's search API to find code snippets on GitHub. Users input the programming language and the keywords, and the interface returns a list of URLs to the relevant code snippets.\\\",\\n\\\"function_name\\\": \\\"search_code_snippets\\\",\\n\\\"input_args\\\": {\\n    \\\"language\\\": \\\"Programming language of the code snippet. e.g., 'python', 'java', etc.\\\",\\n    \\\"keywords\\\": \\\"Keywords to search for in the code snippet. e.g., 'machine learning algorithm', 'web scraping', etc.\\\"\\n},\\n\\\"return\\\": \\\"A list of URLs to the relevant code snippets on GitHub.\\\",\\n\\\"depend\\\": \\\"This function depends on the 'requests' Python library and GitHub's Search API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A political science student from Russia who admires Margaret Thatcher", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pretrained model from Hugging Face to analyze the sentiment of a speech or text, returning whether the sentiment is positive, negative, or neutral.\\\",\\n\\\"function_name\\\": \\\"analyze_speech\\\",\\n\\\"input_args\\\": \\\"speech\\\",\\n\\\"return\\\": \\\"The sentiment of the input speech or text ('POSITIVE', 'NEGATIVE', or 'NEUTRAL').\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library for natural language processing.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a dive tourism operator in the Marshall Islands", "synthesized text": "\"{\\n\\\"name\\\": \\\"Radiation Levels Monitoring Interface\\\",\\n\\\"description\\\": \\\"An interface to monitor the current radiation levels in a given location. This is especially useful for dive tourism operators in places with historical nuclear activity, like the Marshall Islands.\\\",\\n\\\"function_name\\\": \\\"get_radiation_level\\\",\\n\\\"input_args\\\": \\\"location - A string representing the location where the radiation level is to be measured\\\",\\n\\\"return\\\": \\\"A float representing the current radiation level in the given location.\\\",\\n\\\"depend\\\": \\\"This function relies on the RadNet API for radiation data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aspiring marine mammal trainer who dreams of working at a marine park", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Dolphin Sound Identification Interface\\\",\\n    \\\"description\\\": \\\"This interface allows the user to classify dolphin sounds. The user inputs the path to an audio file, and the interface returns the predicted category of the dolphin sound.\\\",\\n    \\\"function_name\\\": \\\"classify_dolphin_sound\\\",\\n    \\\"input_args\\\": \\\"file_path\\\",\\n    \\\"return\\\": \\\"predicted category of the dolphin sound\\\",\\n    \\\"depend\\\": \\\"TensorFlow, librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retired business executive who used to compete with Ayala Corporation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and returns the historical stock market data of a specified company for a specified period.\\\",\\n\\\"function_name\\\": \\\"get_stock_data\\\",\\n\\\"input_args\\\": \\n    {\\n        \\\"ticker_symbol\\\": \\\"The ticker symbol of the company\\\",\\n        \\\"period\\\": \\\"(Optional) The period for which to fetch the data. Defaults to '1y' (1 year)\\\"\\n    },\\n\\\"return\\\": \\\"A pandas DataFrame containing the historical stock market data of the company for the specified period.\\\",\\n\\\"depend\\\": \\\"Python library: yfinance\\\"\\n}\"", "description": "tool development"}
{"input persona": "汽车爱好者和深圳证券交易所的经验丰富的股票投资者", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Stock Price Query Interface\\\",\\n\\\"description\\\": \\\"This interface calls the Alpha Vantage API to get the real-time price of a specific stock. Users only need to input the stock symbol, and the interface will return the real-time price of the stock.\\\",\\n\\\"function_name\\\": \\\"get_stock_price\\\",\\n\\\"input_args\\\": \\\"symbol\\\",\\n\\\"return\\\": \\\"Real-time price of the input stock symbol\\\",\\n\\\"depend\\\": \\\"Alpha Vantage API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A novice web developer trying to understand PHP concatenation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"PHP Concatenation Explanation Interface\\\",\\n\\\"description\\\": \\\"This interface parses and analyzes PHP code to provide a detailed explanation of how concatenation works in the code. The user inputs PHP code as a string, and the interface returns an explanation.\\\",\\n\\\"function_name\\\": \\\"explain_php_concatenation\\\",\\n\\\"input_args\\\": {\\n    \\\"code\\\": \\\"a string of PHP code\\\"\\n},\\n\\\"return\\\": \\\"a list of explanations of the concatenation operations in the code\\\",\\n\\\"depend\\\": \\\"php-parser library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated Missouri Tigers supporter who runs a podcast discussing collegiate sports rivalries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches game statistics between two college football teams in a given year.\\\",\\n\\\"function_name\\\": \\\"get_game_statistics\\\",\\n\\\"input_args\\\": {\\n    \\\"team1\\\": \\\"Type: String, Description: Name of the first team.\\\",\\n    \\\"team2\\\": \\\"Type: String, Description: Name of the second team.\\\",\\n    \\\"year\\\": \\\"Type: Integer, Description: Year of the game.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Type\\\": \\\"Dictionary/String\\\",\\n    \\\"Description\\\": \\\"A dictionary containing game statistics if found, else a string message indicating no game was found.\\\"\\n},\\n\\\"depend\\\": \\\"Python requests library, CollegeFootballData API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Ericsson old-timer who has been working since the 1960s and loves company history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Company Historical Facts Interface\\\",\\n\\\"description\\\": \\\"Fetch historical facts about Ericsson from Wikipedia based on the input year\\\",\\n\\\"function_name\\\": \\\"get_ericsson_history\\\",\\n\\\"input_args\\\": \\\"year\\\",\\n\\\"return\\\": \\\"Historical facts about Ericsson in the given year\\\",\\n\\\"depend\\\": \\\"wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A novice web developer trying to understand how to implement Trumbowyg, a WYSIWYG editor.", "synthesized text": "\"{\\n\\\"name\\\": \\\"HTML Content Editor Interface\\\",\\n\\\"description\\\": \\\"This function creates an HTML string to implement Trumbowyg, a WYSIWYG editor, in a webpage. The user inputs the HTML content they want the editor to display.\\\",\\n\\\"function_name\\\": \\\"create_trumbowyg_editor\\\",\\n\\\"input_args\\\": [\\\"html_content\\\"],\\n\\\"return\\\": \\\"An HTML string that can be rendered in a webpage to display a Trumbowyg editor with the user's content.\\\",\\n\\\"depend\\\": [\\\"Python\\\", \\\"Flask\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A college graduate in computer science seeking to specialize in legacy system maintenance and management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legacy Code Refactoring Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze Python files in a legacy system, providing metrics to understand the complexity and maintainability of the code.\\\",\\n\\\"function_name\\\": \\\"analyze_legacy_code\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": {\\\"lines\\\": \\\"int\\\", \\\"comments\\\": \\\"int\\\", \\\"blank\\\": \\\"int\\\", \\\"cyclomatic_complexity\\\": \\\"list of str\\\", \\\"halstead_difficulty\\\": \\\"float\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"radon\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "SNL fan who doesn't use TikTok and has never heard of Marcello Hernandez", "synthesized text": "\"{\\n\\\"name\\\": \\\"TikTok Video Download Interface\\\",\\n\\\"description\\\": \\\"This interface downloads the most recent videos posted by a specified TikTok creator for offline viewing.\\\",\\n\\\"function_name\\\": \\\"get_tiktok_videos\\\",\\n\\\"input_args\\\": [\\\"username\\\"],\\n\\\"return\\\": \\\"List of filenames of the downloaded videos\\\",\\n\\\"depend\\\": \\\"Python library: requests, os; Web API: TikTok API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a conservative Brazilian businessman who owns large acres of land.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Land Area Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface to convert the land area from acres to another unit like hectares, square kilometers or square miles.\\\",\\n\\\"function_name\\\": \\\"convert_land_area\\\",\\n\\\"input_args\\\": [\\\"area_in_acres\\\", \\\"to_unit\\\"],\\n\\\"return\\\": \\\"Land area in the desired unit\\\",\\n\\\"depend\\\": [\\\"pyproj\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a person who has never left the United States but is extremely fascinated with African culture and geography.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Country Information Interface\\\",\\n    \\\"description\\\": \\\"Fetches detailed information about a country, including population, area, languages spoken, and more using the REST Countries API.\\\",\\n    \\\"function_name\\\": \\\"get_country_info\\\",\\n    \\\"input_args\\\": [\\\"country_name\\\"],\\n    \\\"return\\\": {\\n        \\\"name\\\": \\\"string\\\",\\n        \\\"population\\\": \\\"int\\\",\\n        \\\"area\\\": \\\"float\\\",\\n        \\\"languages\\\": \\\"list of string\\\",\\n        \\\"currency\\\": \\\"list of string\\\",\\n        \\\"region\\\": \\\"string\\\",\\n        \\\"subregion\\\": \\\"string\\\",\\n        \\\"capital\\\": \\\"string\\\",\\n        \\\"flag\\\": \\\"string (URL)\\\"\\n    },\\n    \\\"depend\\\": \\\"REST Countries API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a distant relative who heard about Ronald's death several years later, and regrets not staying in touch over the years.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Memorial Page Creation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about a deceased person from an obituary website and generates an HTML code for a basic memorial page.\\\",\\n\\\"function_name\\\": \\\"create_memorial_page\\\",\\n\\\"input_args\\\": {\\\"name\\\": \\\"The full name of the deceased person.\\\"},\\n\\\"return\\\": \\\"A string of HTML code for a basic memorial page.\\\",\\n\\\"depend\\\": \\\"This function depends on the Python libraries BeautifulSoup, requests, and yattag.\\\"\\n}\"", "description": "tool development"}
{"input persona": "an enthusiastic learner who knows little about ancient Greek literature and history.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancient Greek Literature and History Summary Interface\\\",\\n\\\"description\\\": \\\"This interface uses Wikipedia's API to provide a summary of various topics related to ancient Greek literature and history.\\\",\\n\\\"function_name\\\": \\\"get_greek_history_summary\\\",\\n\\\"input_args\\\": \\\"topic\\\",\\n\\\"return\\\": \\\"A summary of the input topic from Wikipedia.\\\",\\n\\\"depend\\\": \\\"Wikipedia's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An anthropologist conducting research on the cultural significance of the leader's ancestral lands", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geospatial Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface accepts the name or coordinates of a region and returns a visual map highlighting the anthropological significant areas within that region.\\\",\\n\\\"function_name\\\": \\\"plot_anthro_data\\\",\\n\\\"input_args\\\": \\\"region\\\",\\n\\\"return\\\": \\\"A visual map\\\",\\n\\\"depend\\\": [\\\"geopandas\\\", \\\"matplotlib\\\", \\\"requests\\\", \\\"Web API for anthropological data\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A patient suffering from a degenerative disease and hoping for a cure through stem cell therapy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stem Cell Research Paper Finder Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the recent research papers related to stem cell therapy for a specific disease from PubMed. It returns the first 10 results with their titles and links to the full text.\\\",\\n\\\"function_name\\\": \\\"get_recent_stem_cell_papers\\\",\\n\\\"input_args\\\": \\\"disease - a string representing the specific disease\\\",\\n\\\"return\\\": \\\"A list of dictionaries, where each dictionary has two keys: 'title' for the title of the paper, and 'link' for the link to the full text of the paper.\\\",\\n\\\"depend\\\": \\\"Python's requests library for making HTTP requests, BeautifulSoup for parsing HTML content, PubMed for scientific literature\\\"\\n}\"", "description": "tool development"}
{"input persona": "A children's book author who seeks advice and recommendations for writing diverse characters", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Diversity Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface provides advice and recommendations on writing diverse characters based on the user's input.\\\",\\n\\\"function_name\\\": \\\"get_diversity_recommendations\\\",\\n\\\"input_args\\\": {\\n\\\"diversity_type\\\": {\\n\\\"type\\\": \\\"string\\\",\\n\\\"description\\\": \\\"The type of character diversity the user wants to explore (e.g., race, gender, culture, disability, etc.).\\\"\\n}\\n},\\n\\\"return\\\": {\\n\\\"type\\\": \\\"string\\\",\\n\\\"description\\\": \\\"The advice and recommendations for writing diverse characters.\\\"\\n},\\n\\\"depend\\\": \\\"Huggingface's Transformers Library (GPT3LMHeadModel, GPT2Tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An education major who believes that digital resources are the future and physical resources are outdated", "synthesized text": "\"{\\n\\\"name\\\": \\\"Textbook Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Books API to provide a list of textbooks and other educational resources based on a keyword search. It returns a list of related books and their authors.\\\",\\n\\\"function_name\\\": \\\"search_books\\\",\\n\\\"input_args\\\": \\\"keyword - The title of the book or related keyword you want to search for.\\\",\\n\\\"return\\\": \\\"A list of tuples, where each tuple contains the title of a book and a list of its authors.\\\",\\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a Puerto Rican real estate agent with a passion for historical architecture.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Architecture Information Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that extracts key information about a historical site from its Wikipedia page.\\\",\\n\\\"function_name\\\": \\\"get_historical_architecture_info\\\",\\n\\\"input_args\\\": \\\"site_name\\\",\\n\\\"return\\\": \\\"A dictionary with key information about the historical site.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "An anthropologist focusing on the intersection of technology and religion", "synthesized text": "\"{\\n\\\"name\\\": \\\"Religious Text Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search religious texts for passages that include a specific keyword or phrase. The text is scraped from a specific website, and the NLTK library is used to tokenize the text into sentences, which are then searched for the keyword.\\\",\\n\\\"function_name\\\": \\\"find_relevant_passages\\\",\\n\\\"input_args\\\": [\\\"keyword\\\", \\\"url\\\"],\\n\\\"return\\\": \\\"A list of sentences that include the keyword.\\\",\\n\\\"depend\\\": \\\"BeautifulSoup, requests, NLTK\\\"\\n}\"", "description": "tool development"}
{"input persona": "An owner of the 1970's old Alfa Romeo", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car Part Price Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface to find and compare prices for car parts from different suppliers. User inputs the part they are looking for and the function returns a list of suppliers and their prices.\\\",\\n\\\"function_name\\\": \\\"get_part_prices\\\",\\n\\\"input_args\\\": \\\"part\\\",\\n\\\"return\\\": \\\"A list of dictionaries with each dictionary being a supplier and the price they offer for the input part\\\",\\n\\\"depend\\\": \\\"requests library, APIs from car parts suppliers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mechanical engineer who emphasizes the importance of practicality in design", "synthesized text": "\"{\\n  \\\"name\\\": \\\"3D Model Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that takes in a path to a 3D model file and returns the volume, surface area, and center of mass of the model.\\\",\\n  \\\"function_name\\\": \\\"analyze_3d_model\\\",\\n  \\\"input_args\\\": {\\n    \\\"model_path\\\": \\\"The path to the 3D model file (.stl or .obj)\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"volume\\\": \\\"The volume of the 3D model\\\",\\n    \\\"surface area\\\": \\\"The surface area of the 3D model\\\",\\n    \\\"center of mass\\\": \\\"The center of mass of the 3D model\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"trimesh\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A CTO of a financial institution concerned about protecting sensitive customer data", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sensitive Data Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses Named Entity Recognition (NER) from the SpaCy library to identify potential sensitive data such as names, addresses, email addresses, and credit card numbers in a given text.\\\",\\n\\\"function_name\\\": \\\"identify_sensitive_data\\\",\\n\\\"input_args\\\": \\\"text - a string of text that may contain sensitive data\\\",\\n\\\"return\\\": \\\"a list of potential sensitive data found in the text, each item is a tuple where the first element is the data and the second element is the type of the data\\\",\\n\\\"depend\\\": \\\"SpaCy library, Regex library in Python\\\"\\n}\"", "description": "tool development"}
{"input persona": "A first-time parent seeking accurate information about vaccine safety for their newborn baby", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Vaccine Safety Information Interface\\\",\\n  \\\"description\\\": \\\"Provides accurate and up-to-date vaccine safety information for newborn babies based on the country's recommended immunization schedule.\\\",\\n  \\\"function_name\\\": \\\"get_vaccine_info\\\",\\n  \\\"input_args\\\": \\\"ip_address\\\",\\n  \\\"return\\\": \\\"Vaccine safety information for newborn babies based on the user's location.\\\",\\n  \\\"depend\\\": \\\"OpenCage Geocoder API, CDC API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film student who aspires to follow in Mark Wahlberg's footsteps and seeks advice on pursuing a career in the industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"Fetches the filmography of an actor from The Movie Database (TMDB).\\\",\\n\\\"function_name\\\": \\\"get_actor_filmography\\\",\\n\\\"input_args\\\": [\\\"name: The name of the actor.\\\"],\\n\\\"return\\\": \\\"A list of movie titles that the actor has appeared in.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"TMDB API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who has experience in theoretical computer science but has never heard of the concept \"Weihrauch reducibility.\"", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weihrauch Reducibility Interface\\\",\\n  \\\"description\\\": \\\"Provides a simple explanation and a list of top 5 relevant academic papers on a provided concept.\\\",\\n  \\\"function_name\\\": \\\"understand_concept\\\",\\n  \\\"input_args\\\": [\\\"concept\\\"],\\n  \\\"return\\\": {\\\"explanation\\\": \\\"A simple explanation generated by a large language model\\\", \\\"relevant_papers\\\": \\\"A list of top 5 relevant academic papers\\\"},\\n  \\\"depend\\\": [\\\"Large language model\\\", \\\"Semantic Scholar's API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A geologist who provides insights into the geological formations and landscapes of ancient Denmark", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geological Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a location in ancient Denmark as input and returns a map with geological formations and landscapes.\\\",\\n\\\"function_name\\\": \\\"get_geological_data\\\",\\n\\\"input_args\\\": \\\"location - a string representing a location in ancient Denmark\\\",\\n\\\"return\\\": \\\"a string representing an HTML representation of a Folium Map object\\\",\\n\\\"depend\\\": \\\"Geopy Python library, Folium library, Nominatim service from Geopy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A vintage building material supplier with an extensive collection of reclaimed wood, bricks, and other historical elements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Availability and Price Check Interface\\\",\\n\\\"description\\\": \\\"An interface that checks the availability and price of a certain material in a vintage building supplier's inventory.\\\",\\n\\\"function_name\\\": \\\"check_material_availability_and_price\\\",\\n\\\"input_args\\\": \\\"material_name: The name of the material to check.\\\",\\n\\\"return\\\": \\\"A dictionary with either the availability and price of the material or an error message.\\\",\\n\\\"depend\\\": \\\"Python 'requests' library, Vintage building supplier's web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of the Securities and Exchange Commission who investigates and prosecutes corporate wrongdoings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the closing prices of a particular stock over a specific period of time to help in the analysis of stock price trends.\\\",\\n\\\"function_name\\\": \\\"get_stock_closing_prices\\\",\\n\\\"input_args\\\": {\\\"symbol\\\": \\\"Symbol of the stock\\\", \\\"start_date\\\": \\\"Start date of the period\\\", \\\"end_date\\\": \\\"End date of the period\\\"},\\n\\\"return\\\": \\\"A list of closing prices for each trading day within the specified period\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"yfinance\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am a retired South Korean history professor with a passion for the history of Christianity in Korea.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verses Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search for a specific verse from the Bible in both English and Korean. It's useful for users who want to study the Bible and compare the verses in different translations.\\\",\\n\\\"function_name\\\": \\\"get_bible_verses\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"book\\\": \\\"Name of the book in the Bible\\\", \\n    \\\"chapter\\\": \\\"Chapter number\\\", \\n    \\\"verse\\\": \\\"Verse number\\\"\\n    },\\n\\\"return\\\": \\n    {\\n    \\\"English\\\": \\\"English translation of the selected verse\\\", \\n    \\\"Korean\\\": \\\"Korean translation of the selected verse\\\"\\n    },\\n\\\"depend\\\": \\\"BibleGateway API or similar service\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school student who loves to sketch aircraft and aspires to join an aeronautical engineering program", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aircraft Design Validation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained deep learning model to classify the type of aircraft in a user-provided sketch. This can help aspiring aeronautical engineers validate their design sketches.\\\",\\n\\\"function_name\\\":\\\"classify_aircraft\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"Aircraft class (type)\\\",\\n\\\"depend\\\": \\\"PyTorch, torchvision, PIL\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个塞尔维亚足球迷，对本国年轻球员的发展感到非常自豪。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Football Player Statistics Interface\\\",\\n  \\\"description\\\": \\\"An interface that fetches and returns football player statistics from the Football-Data.org API. Input the player's name, and the interface will return the player's statistics.\\\",\\n  \\\"function_name\\\": \\\"get_player_statistics\\\",\\n  \\\"input_args\\\": \\\"player_name\\\",\\n  \\\"return\\\": \\\"Player's statistics in JSON format\\\",\\n  \\\"depend\\\": \\\"Football-Data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local artist who incorporates Viennese history and culture into their artwork", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Historical Context Interface\\\",\\n\\\"description\\\": \\\"This interface returns a short description about a specific term related to Viennese history or culture. It helps artists quickly gain inspiration or context for their artwork without having to conduct extensive research.\\\",\\n\\\"function_name\\\": \\\"get_wikidata_description\\\",\\n\\\"input_args\\\": \\\"term - a specific term related to Viennese history or culture\\\",\\n\\\"return\\\": \\\"A short description about the given term\\\",\\n\\\"depend\\\": \\\"Wikidata Query Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former train enthusiast and a retired railroader from Canada who lived through those snowstorms in 1998.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Snowfall Prediction Module\\\",\\n\\\"description\\\": \\\"This module uses the OpenWeatherMap API to predict snowfall for the next 7 days for a given location.\\\",\\n\\\"function_name\\\": \\\"get_snowfall_prediction\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"Dictionary with date as keys and snowfall prediction as values in the format {'2022-01-01': '3 mm', '2022-01-02': 'No snowfall predicted', ...}\\\",\\n\\\"depend\\\": \\\"requests python library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A legal advisor specializing in art law and assists in navigating complex art transactions and verifying authenticity", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Artwork Authenticity Verification Interface\\\",\\n  \\\"description\\\": \\\"An interface to verify the authenticity of an artwork using the Verisart API. The user inputs the artwork's certification ID, and the interface returns the certification data from the Verisart database.\\\",\\n  \\\"function_name\\\": \\\"get_artwork_authenticity\\\",\\n  \\\"input_args\\\": {\\n    \\\"certification_id\\\": \\\"The certification ID of the artwork.\\\"\\n  },\\n  \\\"return\\\": \\\"The certification data of the artwork, including the artwork's title, artist, creation date, and provenance.\\\",\\n  \\\"depend\\\": \\\"Verisart API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A detail-orientated bassist who tends to focus more on technical aspects than the overall composition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Feature Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts detailed technical information from a music file, such as tempo, beat frames, chroma feature, spectral contrast, tonnetz, etc. The user only needs to input the path to a music file, and the interface will return the relevant information.\\\",\\n\\\"function_name\\\": \\\"extract_music_features\\\",\\n\\\"input_args\\\": [\\\"path_to_music\\\"],\\n\\\"return\\\": \\\"A dictionary with keys being the feature names (tempo, beat_frames, chroma_stft, spectral_contrast, tonnetz) and values being the corresponding feature values. For example, {'tempo': 123.4, 'beat_frames': [1, 2, 3, ...], 'chroma_stft': [[0.1, 0.2, ...], [...], ...], 'spectral_contrast': [[0.1, 0.2, ...], [...], ...], 'tonnetz': [[0.1, 0.2, ...], [...], ...]}\\\",\\n\\\"depend\\\": \\\"librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired baseball player who had a short and underrated career but achieved incredible feats", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baseball Player Stats Interface\\\",\\n\\\"description\\\": \\\"This interface uses the MLB StatsAPI to fetch career statistics of a specified baseball player.\\\",\\n\\\"function_name\\\": \\\"get_player_career_stats\\\",\\n\\\"input_args\\\": {\\\"player_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"Player Name\\\": \\\"string\\\", \\\"Career Hits\\\": \\\"int\\\", \\\"Career Home Runs\\\": \\\"int\\\", \\\"Career Batting Average\\\": \\\"float\\\", \\\"Career Games Played\\\": \\\"int\\\"},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"MLB StatsAPI\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a senior who feels socially disconnected.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Social Interaction Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Meetup's API to find local events based on the user's location and interests.\\\",\\n\\\"function_name\\\": \\\"get_local_events\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"interests\\\"],\\n\\\"return\\\": \\\"A list of local events that match the user's interests.\\\",\\n\\\"depend\\\": \\\"Meetup's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a female law enforcement officer from the UK who is also a mother", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated License Plate Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenALPR API to recognize the license plate and vehicle details from a given image.\\\",\\n\\\"function_name\\\": \\\"get_license_plate_details\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"License plate number, Vehicle details\\\",\\n\\\"depend\\\": \\\"OpenALPR API, requests, base64\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular YouTube content creator who specializes in creating comprehensive tutorials on SQLAlchemy and Python for beginners", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Transcript Generation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google's Speech-to-Text API to transcribe the audio from a YouTube video into text, creating a transcript for the video.\\\",\\n\\\"function_name\\\": \\\"generate_video_transcript\\\",\\n\\\"input_args\\\": \\\"video_url\\\",\\n\\\"return\\\": \\\"transcript\\\",\\n\\\"depend\\\": \\\"Google's Speech-to-Text API, youtube_dl Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Kurdish historian specializing in the impact of conflict on cultural heritage and demography", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cultural Heritage Destruction Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub and satellite imagery from Google Earth Engine to detect potential destruction or damage to cultural heritage sites.\\\",\\n\\\"function_name\\\": \\\"detect_cultural_heritage_destruction\\\",\\n\\\"input_args\\\": [\\\"coordinates\\\"],\\n\\\"return\\\": \\\"An assessment of the potential damage to the cultural heritage site at the specified coordinates.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"Google Earth Engine\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A seasoned environmental policy expert with deep knowledge and experience in sustainable development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the carbon footprint of various activities (e.g. flights, car travels, energy consumption) in CO2 equivalent. Users have to input the type of activity and related parameters.\\\",\\n\\\"function_name\\\": \\\"calculate_carbon_footprint\\\",\\n\\\"input_args\\\": [\\\"activity_type\\\", \\\"parameters\\\"],\\n\\\"return\\\": \\\"A float representing the carbon footprint in kg CO2e\\\",\\n\\\"depend\\\": \\\"API from Carbon Interface platform\\\"\\n}\"", "description": "tool development"}
{"input persona": "Un critico gastronomico rispettato che viaggia alla ricerca dei migliori ristoranti locali", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interfaccia di Ricerca Ristoranti in base alle Recensioni\\\",\\n\\\"description\\\": \\\"Questa interfaccia utilizza l'API di Yelp per trovare i ristoranti locali con le migliori recensioni in base alla posizione e alla categoria inserite dall'utente.\\\",\\n\\\"function_name\\\": \\\"get_best_local_restaurants\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"La posizione corrente dell'utente.\\\", \\\"category\\\": \\\"La categoria di ristorante che l'utente sta cercando.\\\"},\\n\\\"return\\\": \\\"Una lista di nomi dei ristoranti locali con le migliori recensioni.\\\",\\n\\\"depend\\\": \\\"Questa funzione dipende dalla libreria Python 'requests' e dall'API di Yelp.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fan of Susanna Hoffs who always appreciates diversity in music", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Song Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that recommends songs similar to a specific artist's style using Spotify's Web API.\\\",\\n  \\\"function_name\\\": \\\"recommend_songs_by_artist\\\",\\n  \\\"input_args\\\": [\\\"artist_name\\\", \\\"client_id\\\", \\\"client_secret\\\"],\\n  \\\"return\\\": \\\"A list of song recommendations based on the artist's music.\\\",\\n  \\\"depend\\\": \\\"Spotify's Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A self-taught programmer seeking guidance on computer vision projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Object Detection Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from TensorFlow Hub to detect objects in a given image. Returns bounding boxes and class labels for each detected object.\\\",\\n\\\"function_name\\\": \\\"detect_objects\\\",\\n\\\"input_args\\\": \\\"path_to_image - string representing the path to the image file\\\",\\n\\\"return\\\": \\\"Dictionary with keys 'detection_boxes' (bounding boxes around detected objects), 'detection_classes' (class ID of the detected objects), 'detection_scores' (confidence score for each detected object), and 'detection_masks_reframed' (masks for each detected object, reframed to the size of the image).\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A social media personality advocating for the benefits of face-to-face communication in real estate transactions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Real Estate Property Search Interface\\\",\\n  \\\"description\\\": \\\"An interface to search for real estate properties based on user's location, budget and property type preferences.\\\",\\n  \\\"function_name\\\": \\\"find_properties\\\",\\n  \\\"input_args\\\": [\\\"location\\\", \\\"budget_min\\\", \\\"budget_max\\\", \\\"property_type\\\"],\\n  \\\"return\\\": \\\"List of addresses of properties that match the user's criteria.\\\",\\n  \\\"depend\\\": \\\"Zillow Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A perplexed coding hobbyist unfamiliar with complex build systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Project Build Interface\\\",\\n\\\"description\\\": \\\"This interface builds the user's coding project by executing the 'make' command in the command line. The user only needs to provide the path to their project directory.\\\",\\n\\\"function_name\\\": \\\"build_project\\\",\\n\\\"input_args\\\": {\\n    \\\"project_path\\\": \\\"The path to the project directory that contains the Makefile.\\\"\\n},\\n\\\"return\\\": \\\"Prints 'Project built successfully' if the build process was successful, otherwise prints the error message.\\\",\\n\\\"depend\\\": \\\"Python's built-in subprocess module.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired art history professor living close to Queen Elizabeth Olympic Park.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Park Event Information Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of events happening in or around a specified location.\\\",\\n\\\"function_name\\\": \\\"get_local_events\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary includes 'title', 'start_time', and 'venue_name' of an event.\\\",\\n\\\"depend\\\": \\\"Eventful API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a senior software engineer with years of experience in UI design and key management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Password Strength Checker Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a user's password and checks its strength based on a pre-defined policy. It returns a list of unfulfilled criteria based on the policy.\\\",\\n\\\"function_name\\\": \\\"check_password_strength\\\",\\n\\\"input_args\\\": {\\\"password\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"List of unfulfilled policy criteria\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"password_strength\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A night-shift nurse who appreciates the quiet apartment ambiance during daytime", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Ambient Noise Generator Interface\\\",\\n    \\\"description\\\": \\\"An interface that generates ambient noise based on the user's preference. The user just needs to specify the type of noise (e.g., 'rain', 'forest', 'ocean') and the duration in seconds, and our interface will generate and save the ambient noise to a file.\\\",\\n    \\\"function_name\\\": \\\"generate_ambient_noise\\\",\\n    \\\"input_args\\\": [\\\"noise_type\\\", \\\"duration\\\"],\\n    \\\"return\\\": \\\"A message indicating that the ambient noise has been generated and saved to a file.\\\",\\n    \\\"depend\\\": [\\\"pydub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A curator of a heritage preservation society organizing exclusive tours of Montreal's luxury estates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Estate Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface fetches detailed information about a specified historical estate from Wikipedia. The information can include a brief history, architectural style, notable events, etc.\\\",\\n\\\"function_name\\\": \\\"get_estate_info\\\",\\n\\\"input_args\\\": \\\"estate_name - The name of the estate for which to fetch information\\\",\\n\\\"return\\\": \\\"A string of text containing the introductory section of the Wikipedia page for the specified estate. If no information is found, the function returns 'Information not found.'\\\",\\n\\\"depend\\\": \\\"requests, Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Italian pizzaiolo who is continuously perfecting his pizza dough recipe", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pizza Dough Hydration Calculator Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to calculate the hydration level of pizza dough given the weights of flour and water. Hydration level is expressed in percentage.\\\",\\n\\\"function_name\\\": \\\"calculate_dough_hydration\\\",\\n\\\"input_args\\\": [\\\"flour_weight\\\", \\\"water_weight\\\"],\\n\\\"return\\\": \\\"Hydration level in percentage\\\",\\n\\\"depend\\\": \\\"Python's numerical operations\\\"\\n}\"", "description": "tool development"}
{"input persona": "A roommate who is talkative and enjoys engaging in lively debates on various topics", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Debate Interface\\\",\\n\\\"description\\\": \\\"This interface uses the News API to fetch the latest news and the transformers library from Hugging Face for text summarization. It provides fresh topics for debate with headline, summary and URL for each topic.\\\",\\n\\\"function_name\\\": \\\"news_debate_topics\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"List of dictionaries with keys 'headline', 'summary', and 'url' for each topic\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"transformers (Hugging Face)\\\", \\\"News API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A writer who is captivated by the dancer's resilience and wants to immortalize their story in a book", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text to Speech Interface\\\",\\n\\\"description\\\": \\\"This interface takes a text input and converts it into an audio file using Google Cloud's Text-to-Speech functionality.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\n\\\"text\\\": \\\"The text to be converted to speech. This could be a string of any length, but it is recommended to limit the length for best performance.\\\",\\n\\\"output_filename\\\": \\\"The name of the output file where the audio will be saved. The file will be saved in the MP3 format.\\\"\\n},\\n\\\"return\\\": \\\"The name of the output file with the audio content.\\\",\\n\\\"depend\\\": \\\"google-cloud-texttospeech\\\"\\n}\"", "description": "tool development"}
{"input persona": "A businessman prioritizing commercial interests and considering art in urban projects as an unnecessary expense", "synthesized text": "\"{\\n\\\"name\\\": \\\"Public Art Value Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface that estimates the potential value of incorporating art into urban projects based on factors like increased tourism, potential for higher property values, and improved public satisfaction.\\\",\\n\\\"function_name\\\": \\\"estimate_art_value\\\",\\n\\\"input_args\\\": {\\n    \\\"project_type\\\": \\\"The type of the project (string)\\\",\\n    \\\"project_size\\\": \\\"The size of the project (integer)\\\",\\n    \\\"location_popularity\\\": \\\"The popularity of the location on a scale from 1 to 10 (integer)\\\",\\n    \\\"current_property_value\\\": \\\"The current value of the property in dollars (float)\\\"\\n},\\n\\\"return\\\": \\\"The estimated potential increase in value from incorporating art into the project (float)\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A coffee bean farmer from Colombia looking to export their product to Hawaii", "synthesized text": "\"{\\n\\\"name\\\": \\\"Shipping Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface to estimate the shipping cost from one location to another using FedEx's Web Services API. Users need to input the weight of their package, the origin, and the destination.\\\",\\n\\\"function_name\\\": \\\"get_shipping_cost\\\",\\n\\\"input_args\\\": [\\\"weight\\\", \\\"origin\\\", \\\"destination\\\"],\\n\\\"return\\\": \\\"Estimated shipping cost in currency of the origin location.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"xml.etree.ElementTree\\\", \\\"FedEx's Web Services API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A renowned chemist who developed innovative methods for paper restoration and preservation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Restoration Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenCV library to digitally restore and enhance old or damaged documents\\\",\\n\\\"function_name\\\": \\\"enhance_document\\\",\\n\\\"input_args\\\": [\\\"image_path\\\"],\\n\\\"return\\\": \\\"Enhanced document as an image\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\", \\\"PyTesseract\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local Sumter, SC resident who likes DIY projects but knows little about pools.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Pool Water Quality Checker Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches and returns the current pH, temperature, and ORP levels of a pool using the PoolSense API.\\\",\\n  \\\"function_name\\\": \\\"get_pool_water_quality\\\",\\n  \\\"input_args\\\": {\\n    \\\"token\\\": \\\"A token provided by PoolSense to access the pool data.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"pH_level\\\": \\\"The current pH level of the pool.\\\",\\n    \\\"temperature\\\": \\\"The current temperature of the pool.\\\",\\n    \\\"ORP_level\\\": \\\"The current Oxidation Reduction Potential level of the pool.\\\"\\n  },\\n  \\\"depend\\\": \\\"requests library, PoolSense API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A grassroots organization focused on training community members to monitor and report police misconduct", "synthesized text": "\"{\\n\\\"name\\\": \\\"Police Misconduct Reporting Interface\\\",\\n\\\"description\\\": \\\"An interface to report cases of police misconduct, tracking patterns and identifying officers or precincts with high rates of reported misconduct. Users input the officer's badge number, the date and time of the incident, a brief description of what happened, and any available evidence.\\\",\\n\\\"function_name\\\": \\\"report_police_misconduct\\\",\\n\\\"input_args\\\": [\\\"badge_number\\\", \\\"incident_time\\\", \\\"description\\\", \\\"evidence\\\"],\\n\\\"return\\\": \\\"A confirmation message indicating whether the report was successfully recorded.\\\",\\n\\\"depend\\\": \\\"Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a facilities manager at a healthcare facility", "synthesized text": "\"{\\n\\\"name\\\": \\\"Occupancy Monitoring Interface\\\",\\n\\\"description\\\": \\\"Interface to monitor and count the number of people in a certain area to ensure compliance with facility capacity rules.\\\",\\n\\\"function_name\\\": \\\"count_people_in_video\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"Path to the video file to process.\\\"\\n},\\n\\\"return\\\": \\\"Total count of people found in the video.\\\",\\n\\\"depend\\\": \\\"OpenCV, Numpy, TensorFlow, YOLOv3 Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a pregnant woman who is looking for a strong and meaningful name for her baby girl", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baby Name Generator Interface\\\",\\n\\\"description\\\": \\\"Generate a list of baby names that align with the user's preference for the baby name's meaning and gender\\\",\\n\\\"function_name\\\": \\\"get_baby_names_with_meaning\\\",\\n\\\"input_args\\\": {\\n    \\\"meaning\\\": \\\"The preferred meaning of the baby name\\\",\\n    \\\"gender\\\": \\\"The gender of the baby\\\"\\n},\\n\\\"return\\\": \\\"A list of baby names that align with the input preferences\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"https://api.babynames.io/\\\"], \\\"LLM\\\": \\\"Large Language Model\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A film industry executive who doesn't believe online popularity translates to mainstream success", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Popularity to Box Office Success Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the popularity score and box office collection of the input movie. It fetches data from TMDb and The Numbers APIs.\\\",\\n\\\"function_name\\\": \\\"correlate_popularity_to_success\\\",\\n\\\"input_args\\\": {\\\"movie_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"movie_name\\\": \\\"string\\\", \\\"popularity\\\": \\\"float\\\", \\\"box_office\\\": \\\"float\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"TMDb API\\\", \\\"The Numbers API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A real estate tycoon seeking advice on managing inheritance matters for his children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inheritance Tax Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate inheritance tax based on the inheritance amount and tax rates applicable in different regions.\\\",\\n\\\"function_name\\\": \\\"get_inheritance_tax\\\",\\n\\\"input_args\\\": {\\\"inheritance_amount\\\": \\\"total inheritance amount in USD\\\", \\\"region\\\": \\\"the region where the inheritance is applicable\\\"},\\n\\\"return\\\": \\\"The applicable inheritance tax based on the inheritance amount and the region.\\\",\\n\\\"depend\\\": \\\"Python\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced agent knowledgeable in health policies and coverage for heart conditions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health Policy Coverage Verification Interface\\\",\\n\\\"description\\\": \\\"An interface to verify insurance coverage for heart-related conditions. The user inputs their insurance policy number and the interface returns the details of coverage for heart-related conditions.\\\",\\n\\\"function_name\\\": \\\"get_heart_condition_coverage\\\",\\n\\\"input_args\\\": \\\"policy_number\\\",\\n\\\"return\\\": \\\"A dictionary with keys as the heart-related conditions and values as the coverage details.\\\",\\n\\\"depend\\\": \\\"Web API from healthinsurance.com\\\"\\n}\"", "description": "tool development"}
{"input persona": "A food blogger specializing in creating delicious steak recipes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Steak Doneness Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the doneness of steak based on cooking time, temperature, and weight\\\",\\n  \\\"function_name\\\": \\\"predict_steak_doneness\\\",\\n  \\\"input_args\\\": [\\\"cooking_time\\\", \\\"cooking_temp\\\", \\\"steak_weight\\\"],\\n  \\\"return\\\": \\\"A string indicating the steak's doneness ('raw', 'rare', 'medium rare', 'medium', 'medium well', 'well done')\\\",\\n  \\\"depend\\\": \\\"Scikit-Learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior researcher who has published extensively in the field of geoarchaeology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geospatial Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that reads a shapefile and calculates the total area of all polygons in the shapefile. Useful for basic geospatial data analysis.\\\",\\n\\\"function_name\\\": \\\"calculate_total_area\\\",\\n\\\"input_args\\\": \\\"shapefile_path - a string representing the path to a shapefile\\\",\\n\\\"return\\\": \\\"the total area of all polygons in the shapefile, represented as a float\\\",\\n\\\"depend\\\": \\\"GeoPandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fan of classical studies who never studied professionally in this field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancient Text Translation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the 'cltk' library to provide translations of ancient texts. The user inputs the text in an ancient language (like Latin), and the interface returns a translation of the text in English.\\\",\\n\\\"function_name\\\": \\\"translate_ancient_text\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"string (text in an ancient language like Latin)\\\",\\n    \\\"source_language\\\": \\\"string (name of the source language; default is 'latin')\\\"\\n},\\n\\\"return\\\": \\\"string (translated text in English)\\\",\\n\\\"depend\\\": \\\"cltk library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An individual who struggles with staying hydrated and looks to the influencer for motivation and tips", "synthesized text": "\"{\\n\\\"name\\\": \\\"Water Intake Reminder Interface\\\",\\n\\\"description\\\": \\\"A reminder tool that helps users stay hydrated by reminding them to drink water at user-defined intervals from start time to end time.\\\",\\n\\\"function_name\\\": \\\"water_reminder\\\",\\n\\\"input_args\\\": {\\\"start_time\\\": \\\"string in 'HH:MM' format\\\", \\\"end_time\\\": \\\"string in 'HH:MM' format\\\", \\\"interval\\\": \\\"int (minutes)\\\"},\\n\\\"return\\\": \\\"This function does not return a value but prints reminders at specified intervals.\\\",\\n\\\"depend\\\": \\\"Python's time and threading libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "a relatively experienced patient who was diagnosed with glioblastoma multiforme (GBM)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genomic Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and analyzes genomic data related to a specified gene. It uses the Biopython library and the MyGene.info web API to gather this information.\\\",\\n\\\"function_name\\\": \\\"get_gene_info\\\",\\n\\\"input_args\\\": \\\"gene_name\\\",\\n\\\"return\\\": \\\"A dictionary with the gene's chromosome location, strand direction, transcription start and end points, and a description of the gene.\\\",\\n\\\"depend\\\": \\\"Biopython library, MyGene.info web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Sonic the Hedgehog fan who constantly argues that Sonic games are better than Mario games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Rating Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface takes the names of two games as input and returns their aggregated ratings for comparison.\\\",\\n\\\"function_name\\\": \\\"compare_game_ratings\\\",\\n\\\"input_args\\\": [\\\"game1\\\", \\\"game2\\\"],\\n\\\"return\\\": \\\"A dictionary with the games as keys and their respective ratings as values.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"RAWG API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A gourmand who is also a sweet potato enthusiast.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sweet Potato Recipe Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends sweet potato recipes based on the meal type and dietary restrictions input by the user. It uses the Spoonacular API to fetch the recipes.\\\",\\n\\\"function_name\\\": \\\"get_sweet_potato_recipes\\\",\\n\\\"input_args\\\": {\\n    \\\"meal_type\\\": \\\"Type of the meal (e.g., breakfast, lunch, dinner, snack).\\\",\\n    \\\"diet\\\": \\\"Dietary restrictions (e.g., vegan, vegetarian, gluten-free).\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the title of the recipe, an image link, and a link to the recipe on the Spoonacular website.\\\",\\n\\\"depend\\\": \\\"requests library, Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An active cyberspace operator in the U.S. Air Force", "synthesized text": "\"{\\n\\\"name\\\": \\\"Domain Name Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the 'whois' Python library to extract domain registration details.\\\",\\n\\\"function_name\\\": \\\"get_domain_details\\\",\\n\\\"input_args\\\": \\\"domain - a string that represents the domain name\\\",\\n\\\"return\\\": \\\"A dictionary that contains the domain registration details such as domain name, registrar, creation date, expiration date, etc.\\\",\\n\\\"depend\\\": \\\"'whois' Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic new couple in the neighborhood committed to environmental conservation and solar panel installation", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Solar Panel Energy Output Estimation Interface\\\",\\n  \\\"description\\\": \\\"An interface to estimate the annual energy output and solar radiation of a solar panel at a specific location using the PVWatts API from National Renewable Energy Laboratory (NREL).\\\",\\n  \\\"function_name\\\": \\\"estimate_solar_output\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"A string representing the location of the solar panel\\\",\\n    \\\"system_capacity\\\": \\\"A float representing the system capacity in kW\\\",\\n    \\\"azimuth\\\": \\\"A float representing the azimuth angle in degrees\\\",\\n    \\\"tilt\\\": \\\"A float representing the tilt angle in degrees\\\",\\n    \\\"array_type\\\": \\\"An integer representing the array type (0 for fixed, 1 for fixed roof, 2 for one-axis, 3 for one-axis backtracking, 4 for two-axis)\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"ac_annual\\\": \\\"A float representing the estimated annual AC output in kWh\\\",\\n    \\\"solrad_annual\\\": \\\"A float representing the estimated annual solar radiation in kWh/m2/day\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"PVWatts API from National Renewable Energy Laboratory (NREL)\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a Hungarian tourist planning a California vacation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface provides the weather forecast for a specific city and date using the OpenWeatherMap API.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\n    \\\"city\\\": \\\"The city for which to retrieve the weather forecast.\\\",\\n    \\\"date\\\": \\\"The date for which to retrieve the weather forecast, in 'YYYY-MM-DD' format.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"temp\\\": \\\"The forecast temperature for the specified city and date.\\\",\\n    \\\"weather\\\": \\\"A description of the forecast weather conditions for the specified city and date.\\\",\\n    \\\"humidity\\\": \\\"The forecast humidity for the specified city and date.\\\",\\n    \\\"wind_speed\\\": \\\"The forecast wind speed for the specified city and date.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python library\\\": [\\\"requests\\\", \\\"datetime\\\"],\\n    \\\"web API\\\": [\\\"OpenWeatherMap API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A microbiologist specializing in anaerobic digestion to convert livestock waste into renewable energy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Anaerobic Digestion Process Simulation Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to simulate the anaerobic digestion process, taking the type and quantity of livestock waste as input and returning the quantity of biogas that can be produced.\\\",\\n\\\"function_name\\\": \\\"anaerobic_digestion_simulation\\\",\\n\\\"input_args\\\": {\\\"waste_type\\\": \\\"string\\\", \\\"waste_quantity\\\": \\\"numeric\\\"},\\n\\\"return\\\": \\\"The quantity of biogas produced in 'kg/hr'.\\\",\\n\\\"depend\\\": \\\"BioSTEAM Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a long-term flooring contractor who has used HTC's products for many years", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flooring Material Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the most suitable flooring material for a specific project based on input factors like building type, foot traffic, budget, and style.\\\",\\n\\\"function_name\\\": \\\"recommend_flooring_material\\\",\\n\\\"input_args\\\": [\\\"building_type\\\", \\\"foot_traffic\\\", \\\"budget\\\", \\\"style\\\"],\\n\\\"return\\\": \\\"recommended_material\\\",\\n\\\"depend\\\": [\\\"Hugging Face's transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "我是一个喜剧演员，乐于通过演艺让观众发笑和思考。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Joke Generation Interface\\\",\\n\\\"description\\\": \\\"Generate a joke about a specific topic using the GPT-2 model from HuggingFace\\\",\\n\\\"function_name\\\": \\\"generate_joke\\\",\\n\\\"input_args\\\": [\\\"topic\\\"],\\n\\\"return\\\": \\\"A joke about the input topic\\\",\\n\\\"depend\\\": \\\"HuggingFace's GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An amateur artist passionate about Zentangle®.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Zentangle Pattern Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates Zentangle patterns using a pre-trained GAN model. The number of patterns to generate is user-defined.\\\",\\n\\\"function_name\\\": \\\"generate_zentangle\\\",\\n\\\"input_args\\\": \\\"n: An integer specifying the number of patterns to generate\\\",\\n\\\"return\\\": \\\"Displays the generated Zentangle patterns\\\",\\n\\\"depend\\\": \\\"tensorflow, numpy, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a college professor who teaches a course about the historical legacy of colonialism in Southeast Asia. I've never played a board game before.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Events Timeline Interface\\\",\\n\\\"description\\\": \\\"An interface to extract a timeline of historical events related to a specified topic using the Google Knowledge Graph Search API.\\\",\\n\\\"function_name\\\": \\\"extract_historical_events\\\",\\n\\\"input_args\\\": \\\"topic\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing information about a historical event (name, description, date).\\\",\\n\\\"depend\\\": \\\"Google Knowledge Graph Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history teacher who incorporates the YouTuber's content into their lesson plans to make civics more interactive", "synthesized text": "\"{\\n\\\"name\\\": \\\"YouTube Video Search Interface\\\",\\n\\\"description\\\": \\\"Search for YouTube videos related to a specific topic\\\",\\n\\\"function_name\\\": \\\"search_youtube_videos\\\",\\n\\\"input_args\\\": [\\\"topic\\\", \\\"max_results\\\"],\\n\\\"return\\\": \\\"List of YouTube video URLs\\\",\\n\\\"depend\\\": \\\"Google's YouTube Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A CEO of a manufacturing company, emphasizing the need for industrial growth to boost the local economy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Predictive Maintenance Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to predict when an industrial machine is likely to fail based on historical sensor data. This helps in scheduling maintenance which can minimize downtime, save costs, and increase productivity.\\\",\\n\\\"function_name\\\": \\\"predict_machine_failure\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"new_data\\\"],\\n\\\"return\\\": \\\"Prediction of whether the machine is likely to fail or not based on the new_data input.\\\",\\n\\\"depend\\\": \\\"Scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a sports analyst and blogger who actively follows the hobby of sports card collecting", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Card Value Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface lets the users input the details of their sports card to get an estimated value of the card.\\\",\\n\\\"function_name\\\": \\\"get_card_value\\\",\\n\\\"input_args\\\": [\\\"player_name\\\", \\\"year\\\", \\\"brand\\\", \\\"card_number\\\"],\\n\\\"return\\\": \\\"Estimated value of the sports card\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Sports Card Database API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A social psychologist studying the psychological motivations behind charitable donations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Charitable Donations Analysis Interface\\\",\\n  \\\"description\\\": \\\"Interface to analyze a dataset of charitable donations, perform clustering analysis to find patterns, and use a machine learning model to predict future donations.\\\",\\n  \\\"function_name\\\": \\\"analyze_charitable_donations\\\",\\n  \\\"input_args\\\": \\\"csv_file_path\\\",\\n  \\\"return\\\": \\\"A dictionary with keys 'clusters' that holds the clustering results, 'predictions' that holds the predicted future donations, and 'rmse' that holds the Root Mean Square Error of the predictions.\\\",\\n  \\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A car parts manufacturer eager to showcase their products in educational videos", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to visualize a 3D model in .obj format. It renders a 3D visualization of the model that can be rotated and zoomed for educational purposes.\\\",\\n\\\"function_name\\\": \\\"render_model\\\",\\n\\\"input_args\\\": [\\\"file\\\"],\\n\\\"return\\\": \\\"None\\\",\\n\\\"depend\\\": \\\"pygame, PyOpenGL\\\"\\n}\"", "description": "tool development"}
{"input persona": "An economist who can demonstrate the potential cost savings of implementing prison reform policies, such as reduced incarceration rates and increased workforce productivity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cost Saving for Prison Reform Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the potential cost savings of implementing prison reform policies, such as reduced incarceration rates and increased workforce productivity.\\\",\\n\\\"function_name\\\": \\\"calculate_cost_savings\\\",\\n\\\"input_args\\\": {\\n  \\\"current_incarceration_cost\\\": \\\"The current cost of incarceration.\\\",\\n  \\\"reduced_incarceration_rate\\\": \\\"The projected reduction in incarceration rates.\\\",\\n  \\\"increased_workforce_productivity\\\": \\\"The projected increase in workforce productivity.\\\"\\n},\\n\\\"return\\\": \\\"The projected total savings from the implementation of the prison reform policies.\\\",\\n\\\"depend\\\": \\\"\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film enthusiast fascinated by China's vibrant movie industry but uninformed about the specifics of awards ceremonies.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chinese Film Awards Data Fetching Interface\\\",\\n\\\"description\\\": \\\"Fetches detailed information about Chinese Film Awards. Input is the name of the award, output is a detailed list of categories, nominees, and winners.\\\",\\n\\\"function_name\\\": \\\"fetch_chinese_film_awards_data\\\",\\n\\\"input_args\\\": \\\"award_name\\\",\\n\\\"return\\\": \\\"List of categories, nominees, and winners for the specified award.\\\",\\n\\\"depend\\\": \\\"requests, TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retail store owner in Davao City", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends products to a customer based on their historical purchase data or similar customer purchase patterns.\\\",\\n\\\"function_name\\\": \\\"get_product_recommendations\\\",\\n\\\"input_args\\\": {\\n\\\"customer_id\\\": \\\"The ID of the customer to whom recommendations are to be made.\\\",\\n\\\"purchase_data\\\": \\\"A pandas dataframe with columns 'CustomerID', 'ProductID', and 'Rating'.\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended product IDs.\\\",\\n\\\"depend\\\": \\\"Python surprise library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An astrophysicist with no background in biology or paleoanthropology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Human Evolution Timeline Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the human species that existed during a given time period. Useful for individuals with no background in biology or paleoanthropology.\\\",\\n\\\"function_name\\\": \\\"get_human_species_in_period\\\",\\n\\\"input_args\\\": \\\"period\\\",\\n\\\"return\\\": \\\"List of human species existed during the input period\\\",\\n\\\"depend\\\": \\\"Human Evolution Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a long-time Detroit Red Wings fan, hockey historian, and local sports blogger.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hockey Statistic Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the latest team or player statistics from the NHL's official API.\\\",\\n\\\"function_name\\\": [\\\"fetch_team_statistics\\\", \\\"fetch_player_statistics\\\"],\\n\\\"input_args\\\": [\\\"team_name\\\", \\\"player_name\\\"],\\n\\\"return\\\": \\\"JSON object with team or player statistics\\\",\\n\\\"depend\\\": \\\"Python's requests library, NHL's official API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A social media influencer who creates in-depth content about Roger Federer's career and shares exclusive behind-the-scenes footage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tennis Match Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches match statistics of Roger Federer for a specified tournament of a particular year. This is particularly useful for tennis enthusiasts, sports content creators, and journalists.\\\",\\n\\\"function_name\\\": \\\"get_federer_match_statistics\\\",\\n\\\"input_args\\\": {\\n    \\\"year\\\": \\\"The year of the tournament (e.g., '2022')\\\",\\n    \\\"tournament\\\": \\\"The name of the tournament (e.g., 'Wimbledon')\\\"\\n},\\n\\\"return\\\": \\\"A JSON object containing match statistics of Roger Federer for the specified tournament of the input year.\\\",\\n\\\"depend\\\": \\\"Python's built-in 'requests' library and the SportsData.io API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a trendy interior designer based in Madison, Mississippi", "synthesized text": "\"{\\n\\\"name\\\": \\\"Furniture Placement Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input an image of a room and outputs a set of recommended furniture placements.\\\",\\n\\\"function_name\\\": \\\"recommend_furniture_placement\\\",\\n\\\"input_args\\\": [\\\"image_path\\\"],\\n\\\"return\\\": \\\"List of dictionaries, where each dictionary represents a furniture item and its recommended coordinates in the form {'furniture_item': 'sofa', 'coordinates': (x, y)}\\\",\\n\\\"depend\\\": \\\"PIL, numpy, tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "Johnny Walker, a privacy-concerned individual who avoids signing up for websites and services unnecessarily.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disposable Email Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a disposable, temporary email address that can be used to avoid unnecessary sign ups. It uses the 10minutemail API to generate and return a random disposable email address.\\\",\\n\\\"function_name\\\": \\\"generate_disposable_email\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A string representing the disposable email address.\\\",\\n\\\"depend\\\": \\\"requests library, 10minutemail API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior law enforcement officer overseeing the implementation of breathalyzer technology in the field", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Breathalyzer Test Result Interface\\\", \\n  \\\"description\\\": \\\"This interface predicts the level of alcohol intoxication based on the breathalyzer test result using a pre-trained machine learning model.\\\", \\n  \\\"function_name\\\": \\\"predict_alcohol_level\\\", \\n  \\\"input_args\\\": {\\\"breathalyzer_result\\\": \\\"float\\\"}, \\n  \\\"return\\\": {\\\"predicted_alcohol_level\\\": \\\"float\\\"}, \\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"sklearn\\\", \\\"joblib\\\"], \\\"machine learning model\\\": \\\"RandomForestRegressor\\\"}\\n}\"", "description": "tool development"}
{"input persona": "a new recruit at UMass Medical School working under Ms. Fleisher's team in Medicaid program", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medicaid Eligibility Check Interface\\\",\\n\\\"description\\\": \\\"An interface to the CMS API to check the Medicaid eligibility of a patient. The user inputs the patient's identification information, and the interface returns the eligibility status.\\\",\\n\\\"function_name\\\": \\\"check_medicaid_eligibility\\\",\\n\\\"input_args\\\": \\\"patient_id\\\",\\n\\\"return\\\": \\\"Eligibility status in JSON format\\\",\\n\\\"depend\\\": \\\"CMS API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A patient and understanding educator who recognizes James' potential and encourages him to channel his mischievousness into creative pursuits", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts the input text into speech, generating an MP3 file with the spoken version of the text.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": { \\\"text\\\": \\\"The text to be converted into speech.\\\", \\\"filename\\\": \\\"The desired filename of the output audio file.\\\" },\\n\\\"return\\\": \\\"A confirmation message indicating successful generation of the audio file.\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS) library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A web developer responsible for maintaining the security and functionality of a political party's websites", "synthesized text": "\"{\\n\\\"name\\\": \\\"Website Vulnerability Scanner Interface\\\",\\n\\\"description\\\": \\\"Scans a website for potential security vulnerabilities using the OWASP ZAP API\\\",\\n\\\"function_name\\\": \\\"start_scan\\\",\\n\\\"input_args\\\": {\\\"url\\\": \\\"The URL of the website to scan\\\"},\\n\\\"return\\\": \\\"A JSON object containing the results of the scan, including any potential vulnerabilities found\\\",\\n\\\"depend\\\": \\\"OWASP ZAP API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly person who is readily contented with simple lifestyles and not fond of living near water bodies due to safety concerns.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Safe Neighborhood Search Interface\\\",\\n\\\"description\\\": \\\"This interface takes a city as input and returns the neighborhoods in the city that are far away from water bodies and have essential facilities like hospitals, grocery stores, etc. in the vicinity.\\\",\\n\\\"function_name\\\": \\\"get_safe_neighborhoods\\\",\\n\\\"input_args\\\": \\\"city\\\",\\n\\\"return\\\": \\\"A list of safe neighborhoods in the city\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an experienced Angular developer focusing on building web applications.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Angular Project Setup Interface\\\", \\n  \\\"description\\\": \\\"An interface to automatically set up a new Angular project with a 'Hello World' component using Angular CLI.\\\",\\n  \\\"function_name\\\": \\\"create_angular_project\\\",\\n  \\\"input_args\\\": \\\"project_name - The name of the Angular project to be created.\\\",\\n  \\\"return\\\": \\\"A success message if the project setup completes successfully, else an error message.\\\",\\n  \\\"depend\\\": \\\"Python's os and subprocess modules, Node.js, npm, and Angular CLI.\\\"\\n}\"", "description": "tool development"}
{"input persona": "an employee of Planned Parenthood who strongly supports reproductive rights", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Automatic Appointment Booking Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to automatically schedule appointments by inputting their name, email, and preferred date. The interface will return a confirmation message if the appointment has been successfully booked.\\\",\\n  \\\"function_name\\\": \\\"book_appointment\\\",\\n  \\\"input_args\\\": [\\\"name\\\", \\\"email\\\", \\\"date\\\"],\\n  \\\"return\\\": \\\"Confirmation message\\\",\\n  \\\"depend\\\": \\\"Calendly API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a decorated officer in the United States Public Health Service", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disease Outbreak News Interface\\\",\\n\\\"description\\\": \\\"This interface uses the API from the World Health Organization (WHO) to retrieve the latest disease outbreak news. Users only need to input the disease they are interested in, and the interface will return the latest news related to that disease.\\\",\\n\\\"function_name\\\": \\\"get_disease_outbreak_news\\\",\\n\\\"input_args\\\": {\\n    \\\"disease\\\": \\\"The disease the user is interested in, as a string.\\\"\\n    },\\n\\\"return\\\": \\\"A list of dictionaries, where each dictionary represents a news item related to the input disease. Each dictionary contains information about the news item, including its title, description, and URL.\\\",\\n\\\"depend\\\": \\\"requests, json, WHO Outbreak News API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer programmer who developed a cutting-edge algorithm for predicting cryptocurrency trends", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cryptocurrency Trend Prediction Interface\\\",\\n\\\"description\\\": \\\"Uses a pre-trained model from the Prophet library to predict future cryptocurrency trends based on historical data\\\",\\n\\\"function_name\\\": \\\"predict_cryptocurrency_trends\\\",\\n\\\"input_args\\\": \\\"path_to_csv: path to a CSV file containing historical cryptocurrency prices (columns: ds and y)\\\",\\n\\\"return\\\": \\\"Dataframe with future dates and corresponding predictions (columns: ds, yhat, yhat_lower, yhat_upper)\\\",\\n\\\"depend\\\": \\\"Pandas library, Prophet library from Facebook\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic local historian from Barrow-upon-Humber", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Events Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the timeline of historical events of a place from its Wikipedia page.\\\",\\n\\\"function_name\\\": \\\"get_historical_timeline\\\",\\n\\\"input_args\\\": \\\"place - the name of the place\\\",\\n\\\"return\\\": \\\"A list of tuples, where each tuple contains a year and a short description of an event that happened in that year.\\\",\\n\\\"depend\\\": \\\"Wikipedia API, SpaCy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A financial advisor who assists low-income individuals with tax preparation and educates them about tax strategies", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tax Strategy Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a decision tree or rule-based model to recommend tax strategies based on user's financial situation\\\",\\n  \\\"function_name\\\": \\\"get_tax_strategies\\\",\\n  \\\"input_args\\\": {\\n    \\\"income\\\": \\\"The user's annual income\\\",\\n    \\\"dependents\\\": \\\"The number of dependents the user has\\\",\\n    \\\"state_of_residence\\\": \\\"The state where the user resides\\\",\\n    \\\"marital_status\\\": \\\"The marital status of the user\\\"\\n  },\\n  \\\"return\\\": \\\"A list of tax strategies that the user can apply\\\",\\n  \\\"depend\\\": \\\"A trained decision tree model saved as 'tax_strategy_model.pkl'\\\"\\n}\"", "description": "tool development"}
{"input persona": "Java software developer who has used Doma before.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"API Call Count Tracker Interface\\\",\\n  \\\"description\\\": \\\"An interface that tracks the number of calls made to a specific API within a given time period.\\\",\\n  \\\"function_name\\\": [\\\"make_api_call\\\", \\\"get_api_call_count\\\"],\\n  \\\"input_args\\\": {\\\"make_api_call\\\": [\\\"url\\\", \\\"params\\\"], \\\"get_api_call_count\\\": [\\\"start_time\\\", \\\"end_time\\\"]},\\n  \\\"return\\\": {\\\"make_api_call\\\": \\\"API response JSON\\\", \\\"get_api_call_count\\\": \\\"Number of API calls made within the specified time range\\\"},\\n  \\\"depend\\\": \\\"Python's built-in datetime library, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A classical music lover who enjoys the sound of humming engines while practicing their violin", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Engine Sound Equalizer Interface\\\",\\n    \\\"description\\\": \\\"Records the sound of an engine for a specified length of time and plays it back at a desired volume, with equalization applied to normalize the sound.\\\",\\n    \\\"function_name\\\": \\\"record_engine_sound\\\",\\n    \\\"input_args\\\": {\\n        \\\"length_in_seconds\\\": \\\"The length of the recording in seconds.\\\",\\n        \\\"playback_volume\\\": \\\"The desired playback volume, normalized to a max of 1.0.\\\"\\n    },\\n    \\\"return\\\": \\\"No return value, but the equalized engine sound will be played back.\\\",\\n    \\\"depend\\\": [\\\"sounddevice\\\", \\\"numpy\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A construction expert skilled in using organic materials and techniques to create structures that harmonize with nature", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Material Suitability Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to determine the suitability and environmental impact of a construction material for a specific environment.\\\",\\n\\\"function_name\\\": \\\"get_material_suitability\\\",\\n\\\"input_args\\\": {\\n    \\\"material\\\": \\\"The type of construction material.\\\",\\n    \\\"environment\\\": \\\"The environment where the construction will take place.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with 'suitability' and 'environmental_impact' as keys, both of which are strings describing the suitability and environmental impact of the material.\\\",\\n\\\"depend\\\": \\\"This function depends on the Requests library for making HTTP requests and a hypothetical API providing information about construction materials.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Compulsive over-explainer who wants to be sure others understand the problem and solution fully.", "synthesized text": "\"{\\n\\\"name\\\": \\\"ExplainComplexDocs\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of understanding complex documents by automatically identifying and explaining technical terms or jargon. It uses a Named Entity Recognition (NER) model to identify technical terms and a large language model to generate easy-to-understand explanations for each term.\\\",\\n\\\"function_name\\\": \\\"explain_complex_docs\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are the technical terms and the values are the simplified explanations.\\\",\\n\\\"depend\\\": \\\"spacy library for Named Entity Recognition (NER), large language model (LLM) for generating explanations\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent who is constantly researching and comparing car safety ratings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car Safety Ratings Interface\\\",\\n\\\"description\\\": \\\"This interface uses the NHTSA's Vehicle Crash API to fetch safety rating data for a specific car. Users provide the make, model, and year of the car they're interested in, and the interface returns the safety rating for that car.\\\",\\n\\\"function_name\\\": \\\"get_car_safety_rating\\\",\\n\\\"input_args\\\": [\\\"make\\\", \\\"model\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"string (safety rating)\\\",\\n\\\"depend\\\": [\\\"requests (Python Library)\\\", \\\"NHTSA Vehicle Crash API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A parent who owns a collection of classic TV series DVDs from the 1970s", "synthesized text": "\"{\\n\\\"name\\\": \\\"DVD to Digital Conversion Interface\\\", \\n\\\"description\\\": \\\"An interface that uses HandBrakeCLI to convert DVD videos to digital format.\\\", \\n\\\"function_name\\\": \\\"convert_dvd_to_digital\\\", \\n\\\"input_args\\\": {\\n    \\\"input_path\\\": \\\"The path to the input DVD video file (.iso format)\\\",\\n    \\\"output_path\\\": \\\"The path to the output digital video file (.mp4 format)\\\"\\n}, \\n\\\"return\\\": \\\"No return value. The digital video will be saved to the output path specified.\\\", \\n\\\"depend\\\": \\\"HandBrakeCLI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior resident of Coronado who regularly plays golf at the Coronado Golf Course", "synthesized text": "\"{\\n\\\"name\\\": \\\"Golf Course Weather Interface\\\",\\n\\\"description\\\": \\\"An interface to get the expected weather at a specific date and time at the Coronado Golf Course. The user inputs a datetime object representing when they plan to play golf, and the function returns the expected weather conditions.\\\", \\n\\\"function_name\\\": \\\"get_future_weather\\\",\\n\\\"input_args\\\": [\\\"date_time\\\"],\\n\\\"return\\\": {\\\"weather\\\": \\\"Clear\\\", \\\"temperature\\\": 295.15},\\n\\\"depend\\\": [\\\"OpenWeatherMap API\\\", \\\"requests\\\", \\\"datetime\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a software engineer who has been using Linux for over a decade, but has never read Elvie", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts the input text into spoken words and saves them as an audio file.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"save_to\\\"],\\n\\\"return\\\": \\\"None. The audio file is saved to the specified location.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers for TTS model, soundfile for saving audio\\\"\\n}\"", "description": "tool development"}
{"input persona": "a close friend of Don Carrington", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Aggregator Interface\\\",\\n\\\"description\\\": \\\"This interface fetches top news headlines related to a specified topic using the NewsAPI.\\\",\\n\\\"function_name\\\": \\\"get_top_headlines\\\",\\n\\\"input_args\\\": \\\"topic\\\",\\n\\\"return\\\": \\\"List of top news headlines related to the input topic.\\\",\\n\\\"depend\\\": \\\"NewsAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A policewoman from the United States, who values the sharing of security practices across different countries.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Criminal Activity Alert Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches recent crime records from the specified location using a public crime database API. The input is the country and city, and it returns a list of recent crimes with their categories, locations, and outcome statuses.\\\",\\n  \\\"function_name\\\": \\\"get_recent_crimes\\\",\\n  \\\"input_args\\\": [\\\"country\\\", \\\"city\\\"],\\n  \\\"return\\\": \\\"A list of dictionaries, each representing a crime record. Each dictionary contains 'category', 'location', and 'outcome_status'. If no data is available, a message indicating this is returned.\\\",\\n  \\\"depend\\\": \\\"requests library, data.police.uk API, datetime library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a professor of statistics at a university, and I specialize in statistical hypothesis testing and experimental design.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hypothesis Testing Interface\\\",\\n\\\"description\\\": \\\"An interface to perform a Student's T-test on two samples of observations and return the t-statistic, p-value, and a basic interpretation of the results.\\\",\\n\\\"function_name\\\": \\\"perform_t_test\\\",\\n\\\"input_args\\\": [\\\"sample1\\\", \\\"sample2\\\"],\\n\\\"return\\\": [\\\"t_statistic\\\", \\\"p_value\\\", \\\"result\\\"],\\n\\\"depend\\\": [\\\"scipy.stats\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A computer science major conducting research on blockchain technology for secure voting systems", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Blockchain Transaction Verification Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch and verify transactions on the blockchain. Users input the network name and transaction id, and the interface returns the transaction's information, confirming its existence and validity on the blockchain.\\\",\\n  \\\"function_name\\\": \\\"get_transaction_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"network\\\": \\\"The name of the blockchain network.\\\",\\n    \\\"transaction_id\\\": \\\"The unique identifier of the transaction on the blockchain.\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary containing the transaction's information, or an error message if the transaction doesn't exist or the information couldn't be retrieved.\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"pycoingecko\\\"],\\n    \\\"web_apis\\\": [\\\"CoinGecko API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "Venezuelan student studying abroad in Poland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Converter Interface\\\",\\n\\\"description\\\": \\\"This interface converts a given amount from the home currency to the target currency using the latest exchange rates from the ExchangeRate-API.\\\",\\n\\\"function_name\\\": \\\"convert_currency\\\",\\n\\\"input_args\\\": [\\\"amount\\\", \\\"from_currency\\\", \\\"to_currency\\\"],\\n\\\"return\\\": \\\"Converted amount in target currency.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"ExchangeRate-API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An experienced actuary who provides guidance and advice on navigating the industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Insurance Premium Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the insurance premium for a policyholder based on their age, gender, and smoking status using principles of actuarial science.\\\",\\n\\\"function_name\\\": \\\"calculate_insurance_premium\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the policyholder\\\",\\n    \\\"gender\\\": \\\"The gender of the policyholder\\\",\\n    \\\"smoker\\\": \\\"Whether the policyholder is a smoker or not\\\"\\n},\\n\\\"return\\\": \\\"The calculated insurance premium for the policyholder\\\",\\n\\\"depend\\\": \\\"Python Built-In Libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Greek military officer who emphasizes the importance of training and technology upgrades", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Equipment Inventory Management Interface\\\",\\n\\\"description\\\": \\\"This interface helps to manage and track the military equipment inventory. It can load an inventory from a CSV file and return a summarized report of the inventory.\\\",\\n\\\"function_name\\\": \\\"summarize_inventory\\\",\\n\\\"input_args\\\": \\\"file_path - a string indicating the path to the CSV file of the inventory\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each representing a category of equipment and its total quantity\\\",\\n\\\"depend\\\": \\\"Python library: Pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired police officer who believes in upholding the law at all costs and has a vast network of law enforcement connections", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crime Report Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch crime reports based on user-specified parameters. The user inputs the type of crime, location, and date, and the interface returns a list of matching crime reports.\\\",\\n\\\"function_name\\\": \\\"fetch_crime_reports\\\",\\n\\\"input_args\\\": [\\\"crime_type\\\", \\\"location\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"List of crime reports matching the specified parameters.\\\",\\n\\\"depend\\\": \\\"Crime Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An economic migrant from Central African Republic living in the US", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts a given amount in US Dollars to Central African CFA Franc using exchange rates from Open Exchange Rates API.\\\",\\n\\\"function_name\\\": \\\"convert_usd_to_xaf\\\",\\n\\\"input_args\\\": \\\"amount: The amount in US Dollars that needs to be converted to Central African CFA Franc.\\\",\\n\\\"return\\\": \\\"The equivalent amount in Central African CFA Franc.\\\",\\n\\\"depend\\\": \\\"Python library: requests; Web API: Open Exchange Rates\\\"\\n}\"", "description": "tool development"}
{"input persona": "A friendly and outgoing young couple who have lived in the neighborhood for several years and are always ready to provide advice and help", "synthesized text": "\"{\\n\\\"name\\\": \\\"Restaurant Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Yelp's Fusion API to fetch information about restaurants based on user's location and preferred cuisine. It returns a list of recommended restaurants based on ratings and reviews.\\\",\\n\\\"function_name\\\": \\\"get_restaurant_recommendations\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"cuisine\\\"],\\n\\\"return\\\": \\\"List of dictionaries containing restaurant 'name', 'address', 'rating', and 'review_count'\\\",\\n\\\"depend\\\": \\\"Yelp Fusion API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A science major who believes that love is just a chemical reaction in the brain", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Chemical Reaction Simulation Interface\\\",\\n  \\\"description\\\": \\\"This interface accepts a list of reactants and returns the products of the simulated chemical reaction.\\\",\\n  \\\"function_name\\\": \\\"simulate_chemical_reaction\\\",\\n  \\\"input_args\\\": \\\"reactants - A string of reactants separated by commas\\\",\\n  \\\"return\\\": \\\"A string of the products of the chemical reaction\\\",\\n  \\\"depend\\\": \\\"chempy python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A filmmaker creating a series on the histories and lineage of different royal families", "synthesized text": "\"{\\n\\\"name\\\": \\\"Family Tree Generation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of family members and their relationships and generates a family tree.\\\",\\n\\\"function_name\\\": \\\"generate_family_tree\\\",\\n\\\"input_args\\\": [\\\"family_members\\\", \\\"edges\\\"],\\n\\\"return\\\": \\\"A graph that represents the family tree, visualizing the relationships between the family members\\\",\\n\\\"depend\\\": [\\\"networkx\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a parishioner at the church mentioned in the text", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verse Lookup Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to lookup a specific verse from the Bible.\\\",\\n\\\"function_name\\\": \\\"fetch_bible_verse\\\",\\n\\\"input_args\\\": {\\\"book\\\": \\\"string\\\", \\\"chapter\\\": \\\"string\\\", \\\"verse\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (content of the verse)\\\",\\n\\\"depend\\\": \\\"Web API (Bible API)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An unsuspecting casual Outlook user who doesn't often keep up with the new changes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Outlook Email Organizer Interface\\\",\\n\\\"description\\\": \\\"Organizes the user's emails based on categories such as 'unread', 'flagged', 'important', etc.\\\",\\n\\\"function_name\\\": \\\"get_outlook_emails\\\",\\n\\\"input_args\\\": {\\\"email_id\\\": \\\"User's email id\\\", \\\"category\\\": \\\"Email category such as 'unread', 'flagged', 'important'\\\"},\\n\\\"return\\\": \\\"A list of emails under the requested category\\\",\\n\\\"depend\\\": \\\"Microsoft Outlook API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A layman with zero background in particle physics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Particle Physics Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users with no background in particle physics to analyze experimental data. The user inputs the path to a file containing the data and an energy threshold, and the interface returns the number of events where the energy is above the threshold.\\\",\\n\\\"function_name\\\": \\\"count_high_energy_events\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"string\\\", \\\"energy_threshold\\\": \\\"float\\\"},\\n\\\"return\\\": \\\"int\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"hepstats\\\", \\\"uproot\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An older, experienced professional soccer player, who is also considered the team's leader on and off the field.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Fitness Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface analyzes and visualizes a soccer player's fitness data collected from wearables or fitness trackers. It takes as input a CSV file path and returns a summary of the player's performance and a visualization of the performance over time.\\\",\\n  \\\"function_name\\\": \\\"analyze_fitness_data\\\",\\n  \\\"input_args\\\": \\\"csv_path\\\",\\n  \\\"return\\\": \\\"A dictionary with average, maximum, and minimum heart rates, and a plot of heart rate over time.\\\",\\n  \\\"depend\\\": \\\"Python pandas and matplotlib libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "大阪居民，对政治中立但关心城市发展", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u57ce\\u5e02\\u53d1\\u5c55\\u6570\\u636e\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u8be5\\u63a5\\u53e3\\u83b7\\u53d6\\u7279\\u5b9a\\u57ce\\u5e02\\u7684\\u53d1\\u5c55\\u6570\\u636e\\uff0c\\u5982\\u4eba\\u53e3\\u3001\\u7ecf\\u6d4e\\u3001\\u57fa\\u7840\\u8bbe\\u65bd\\u7b49\\u3002\\\",\\n\\\"function_name\\\": \\\"get_city_development_data\\\",\\n\\\"input_args\\\": \\\"\\u57ce\\u5e02\\u540d\\u79f0\\\",\\n\\\"return\\\": \\\"\\u57ce\\u5e02\\u7684\\u53d1\\u5c55\\u6570\\u636e\\uff0c\\u4ee5json\\u683c\\u5f0f\\u8fd4\\u56de\\\",\\n\\\"depend\\\": \\\"requests\\u5e93\\uff0c\\u4ee5\\u53caOpen Data APIs\\u7b49\\u516c\\u5f00\\u6570\\u636e\\u8d44\\u6e90\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud resident of Mazad-i Qala-i Nau", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Index Interface\\\",\\n\\\"description\\\": \\\"Fetches the Air Quality Index (AQI) and associated health implications for any location using the IQAir API.\\\",\\n\\\"function_name\\\": \\\"get_air_quality_index\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"A tuple containing the AQI as an integer and the associated health implications as a string.\\\",\\n\\\"depend\\\": \\\"requests library, IQAir API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Iranian expat living in New York, running a Middle Eastern restaurant", "synthesized text": "\"{\\n\\\"name\\\": \\\"Restaurant Menu Translation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a restaurant menu item in Persian (Farsi) and returns the translation in English. It leverages Google Cloud Translation API.\\\",\\n\\\"function_name\\\": \\\"translate_menu_item\\\",\\n\\\"input_args\\\": [\\\"item_in_persian\\\"],\\n\\\"return\\\": \\\"A string that is the English translation of the input.\\\",\\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sound engineer with expertise in capturing the unique vocalizations of raccoons", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Spectrogram Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to an audio file as input and generates a spectrogram of the audio file. The generated spectrogram can be used to analyze the features of the sound.\\\",\\n\\\"function_name\\\": \\\"create_spectrogram\\\",\\n\\\"input_args\\\": \\\"audio_path\\\",\\n\\\"return\\\": \\\"Spectrogram saved as spectrogram.png\\\",\\n\\\"depend\\\": \\\"librosa, numpy, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A very sarcastic person who struggles with waking up early", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alarm Scheduler Interface\\\",\\n\\\"description\\\": \\\"This interface uses the datetime and pytz libraries in Python to schedule alarms. The user can input the time they want the alarm to be set for in 24 hour format and the timezone they are in. The interface will return a datetime object representing the next occurrence of that time.\\\",\\n\\\"function_name\\\": \\\"set_alarm\\\",\\n\\\"input_args\\\": {\\n    \\\"alarm_time\\\": \\\"The time the user wants the alarm to be set for, in 24 hour format (e.g., '07:30').\\\",\\n    \\\"timezone\\\": \\\"The timezone the user is in (e.g., 'US/Eastern').\\\"\\n},\\n\\\"return\\\": \\\"A datetime object representing the next occurrence of the alarm time.\\\",\\n\\\"depend\\\": [\\\"datetime\\\", \\\"pytz\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An options trader who shares the same passion for high-risk, high-reward trading strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Option Pricing Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Black-Scholes option pricing model to calculate the price of a call and a put option based on the underlying price, strike price, interest rate, days to expiration, and volatility.\\\",\\n\\\"function_name\\\": \\\"calculate_option_price\\\",\\n\\\"input_args\\\": [\\\"underlying_price\\\", \\\"strike_price\\\", \\\"interest_rate\\\", \\\"days_to_expiration\\\", \\\"volatility\\\"],\\n\\\"return\\\": {\\\"call_price\\\": \\\"price of the call option\\\", \\\"put_price\\\": \\\"price of the put option\\\"},\\n\\\"depend\\\": [\\\"mibian\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired prison guard who used to work in Konnunsuo agricultural prison", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prison Inmate Lookup Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to look up information about a specific inmate in a prison system. The user needs to supply either the name or identification number of the inmate.\\\",\\n\\\"function_name\\\": \\\"get_inmate_info\\\",\\n\\\"input_args\\\": [\\\"inmate_name_or_id\\\"],\\n\\\"return\\\": \\\"Dictionary containing information about the inmate. The exact contents will depend on the API used, but might include the inmate's full name, age, incarceration date, release date, current prison, and other details.\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"requests\\\"], \\\"web_apis\\\": [\\\"PrisonDB API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A local social worker from North Halishahar ward", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Nutrition Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Edamam Food Database API to extract nutrition information about food.\\\",\\n\\\"function_name\\\": \\\"get_nutrition_info\\\",\\n\\\"input_args\\\": \\\"food_name - Name of a food item\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'calories', 'fat', 'carbs', and 'protein' indicating the respective nutritional content of the food item.\\\",\\n\\\"depend\\\": \\\"Edamam Food Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software testing engineer from China whose main task is to perform a diversified range of software testing.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Automated Unit Test Generation Interface\\\",\\n  \\\"description\\\": \\\"Generate a unit test for a function, using Hypothesis to automatically generate test cases.\\\",\\n  \\\"function_name\\\": \\\"generate_unit_test\\\",\\n  \\\"input_args\\\": {\\n    \\\"function_to_test\\\": \\\"The function that you want to test.\\\",\\n    \\\"input_type\\\": \\\"A Hypothesis strategy for generating inputs for the function.\\\",\\n    \\\"output_type\\\": \\\"The expected type of the function output.\\\"\\n  },\\n  \\\"return\\\": \\\"A string containing the source code of a Pytest-compatible unit test for the input function.\\\",\\n  \\\"depend\\\": \\\"Python libraries: Pytest, Hypothesis, inspect\\\"\\n}\"", "description": "tool development"}
{"input persona": "a professional opera singer who has been inspired by Jessye Norman's career", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vocal Range Detection Interface\\\",\\n\\\"description\\\": \\\"Detects and returns the vocal range (from the lowest to the highest note) of the singer from an audio file\\\",\\n\\\"function_name\\\": \\\"get_vocal_range\\\",\\n\\\"input_args\\\": \\\"audio_file_path\\\",\\n\\\"return\\\": \\\"lowest_note, highest_note\\\",\\n\\\"depend\\\": \\\"librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sales representative for a company specializing in solar-powered irrigation systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Irradiance Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Solcast API to provide a forecast of the solar irradiance for a given location. This can be valuable information for estimating the potential performance of a solar-powered irrigation system.\\\",\\n\\\"function_name\\\": \\\"get_solar_irradiance_forecast\\\",\\n\\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\", \\\"api_key\\\"],\\n\\\"return\\\": \\\"List of forecast data, each item being a dictionary containing information such as the forecast period, the GHI (Global Horizontal Irradiance), DNI (Direct Normal Irradiance), and DHI (Diffuse Horizontal Irradiance).\\\",\\n\\\"depend\\\": \\\"Solcast API, Python's requests and json libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casual gamer who rarely plays Rainbow Six Siege.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rainbow Six Siege Game Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve a player's Rainbow Six Siege statistics using the R6Tab API. The user provides their username and platform, and the function returns their game statistics.\\\",\\n\\\"function_name\\\": \\\"get_r6s_stats\\\",\\n\\\"input_args\\\": [\\\"username\\\", \\\"platform\\\"],\\n\\\"return\\\": \\\"A dictionary containing the player's username, level, current rank, highest rank, kill/death ratio, and win/loss ratio.\\\",\\n\\\"depend\\\": \\\"requests, R6Tab API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A department supervisor responsible for overseeing customs operations at a major international airport", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Information Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch real-time flight status and tracking using FlightAware's API. Users need to input the flight number, and the interface will return the current status of the flight including departure time, arrival time, and current location.\\\",\\n\\\"function_name\\\": \\\"get_flight_info\\\",\\n\\\"input_args\\\": \\\"flight_number\\\",\\n\\\"return\\\": \\\"{ 'flight_number': string, 'origin': string, 'destination': string, 'departure_time': string, 'estimated_arrival_time': string, 'current_location': string }\\\",\\n\\\"depend\\\": \\\"FlightAware's API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A patient and knowledgeable Java programmer who offers step-by-step guidance on running the application", "synthesized text": "\"{\\n\\\"name\\\": \\\"Java Code Execution Interface\\\",\\n\\\"description\\\": \\\"An interface that compiles and runs a Java program, providing the console output. The user simply inputs the path to the Java file.\\\",\\n\\\"function_name\\\": \\\"compile_and_run_java\\\",\\n\\\"input_args\\\": {\\\"java_file_path\\\": \\\"The file path to the Java file to be compiled and run.\\\"},\\n\\\"return\\\": {\\\"status\\\": \\\"The status of the execution, either 'Compilation Error', 'Runtime Error', or 'Successful Execution'.\\\", \\\"output\\\": \\\"The console output produced by the compilation or execution of the Java program.\\\"},\\n\\\"depend\\\": [\\\"Java\\\", \\\"Python subprocess library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A 60-year-old small business owner from Mississippi, intending to retire within five years", "synthesized text": "\"{\\n\\\"name\\\": \\\"Retirement Plan Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to recommend a retirement plan based on the user's age, location, retirement timeline, current income, and savings.\\\",\\n\\\"function_name\\\": \\\"recommend_retirement_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the user.\\\",\\n    \\\"location\\\": \\\"The location of the user.\\\",\\n    \\\"retirement_timeline\\\": \\\"The timeline (in years) of the user's planned retirement.\\\",\\n    \\\"current_income\\\": \\\"The current annual income of the user.\\\",\\n    \\\"savings\\\": \\\"The current savings of the user.\\\"\\n},\\n\\\"return\\\": \\\"A recommended retirement plan.\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An ICT specialist experienced in implementing financial system upgrades", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of currency conversion by encapsulating the underlying API call to Open Exchange Rates. The user only needs to provide the amount they want to convert and the currencies they're converting from and to, and the function will return the converted amount.\\\",\\n\\\"function_name\\\": \\\"convert_currency\\\",\\n\\\"input_args\\\": [\\\"amount\\\", \\\"from_currency\\\", \\\"to_currency\\\"],\\n\\\"return\\\": \\\"The converted currency amount\\\",\\n\\\"depend\\\": \\\"requests library, Open Exchange Rates API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged man who recently survived a severe car accident and received treatment at the University of Louisville Hospital.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Healthcare Appointment Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to set up a reminder for their healthcare appointment. The reminder will alert them 24 hours before their appointment, both through an email and a popup notification.\\\",\\n\\\"function_name\\\": \\\"set_healthcare_appointment_reminder\\\",\\n\\\"input_args\\\": [\\\"service\\\", \\\"summary\\\", \\\"location\\\", \\\"description\\\", \\\"start_time\\\", \\\"end_time\\\"],\\n\\\"return\\\": \\\"A string that confirms the appointment reminder has been set and provides a link to the Google Calendar event.\\\",\\n\\\"depend\\\": [\\\"Google Calendar API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A French casual gamer who just found a long-lost friend.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Friendship Game Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of your favorite games and returns a list of recommended games that you can play together with your friends. It uses the RAWG video game database API.\\\",\\n\\\"function_name\\\": \\\"get_friendship_game_recommendations\\\",\\n\\\"input_args\\\": {\\\"favorite_games\\\": \\\"A list of strings. Each string is the name of one of your favorite games.\\\"},\\n\\\"return\\\": {\\\"recommended_games\\\": \\\"A list of strings. Each string is the name of a recommended game that you can play together with your friends.\\\"},\\n\\\"depend\\\": {\\\"Web APIs\\\": [\\\"RAWG video game database API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A sustainability director working for the local municipality, responsible for waste management policies and regulations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Waste Generation Forecast Interface\\\",\\n  \\\"description\\\": \\\"Predict the amount of waste that will be generated in the future based on past data.\\\",\\n  \\\"function_name\\\": \\\"predict_waste_generation\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_csv\\\": \\\"A string representing the path to a CSV file with historical waste generation data.\\\" \\n  },\\n  \\\"return\\\": \\\"A numpy array representing the predicted amount of waste for the next period.\\\",\\n  \\\"depend\\\": \\\"Scikit-learn's LinearRegression model, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "An adult who has undergone multiple surgeries and can offer reassurance and personal experiences to ease the teenager's fears", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Medical Terminology Simplification Interface\\\",\\n  \\\"description\\\": \\\"This interface simplifies complex medical terminologies for users by calling the UMLS API. Users input a medical term, and the system returns a simplified explanation of the term.\\\",\\n  \\\"function_name\\\": \\\"get_simplified_medical_terminology\\\",\\n  \\\"input_args\\\": \\\"term\\\",\\n  \\\"return\\\": \\\"simplified explanation of the term\\\",\\n  \\\"depend\\\": \\\"UMLS API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a junior female tennis player from Poland who idolizes Iga Świątek.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tennis Match Analysis\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model from Huggingface to analyze a tennis match video and return the match statistics.\\\",\\n\\\"function_name\\\": \\\"analyze_tennis_match\\\",\\n\\\"input_args\\\": {\\\"path_to_video\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"dictionary (match statistics)\\\",\\n\\\"depend\\\": \\\"cv2 library, huggingface/sports-analysis-model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A circus enthusiast from the United States who isn't very familiar with online ticket platforms.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ticket Availability Checking Interface\\\",\\n\\\"description\\\": \\\"This interface checks the availability of tickets for a specified event URL. It uses web scraping techniques to extract ticket information from the event page.\\\",\\n\\\"function_name\\\": \\\"check_ticket_availability\\\",\\n\\\"input_args\\\": \\\"event_url\\\",\\n\\\"return\\\": \\\"The availability status of the tickets.\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local cider producer who collaborates with the farmer to create unique apple cider blends", "synthesized text": "\"{\\n\\\"name\\\": \\\"Apple Variety Classifier Interface\\\",\\n\\\"description\\\": \\\"This interface classifies apple variety based on an image. The user provides the path to the image file of the apple, and the interface returns the predicted apple variety.\\\",\\n\\\"function_name\\\": \\\"classify_apple\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"predicted_class\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, a pre-trained model from TensorFlow Hub for image classification\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned professor in the field of sustainable tourism who specializes in community-based tourism", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sustainable Tourism Metrics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches sustainable tourism metrics for a specified country using the Global Sustainable Tourism Dashboard's API.\\\",\\n\\\"function_name\\\": \\\"get_sustainable_tourism_metrics\\\",\\n\\\"input_args\\\": \\\"{country: 'Country Name'}\\\",\\n\\\"return\\\": \\\"{metric1: value1, metric2: value2, ...}\\\",\\n\\\"depend\\\": \\\"requests library, Global Sustainable Tourism Dashboard API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A car rental agent who can provide guidance on renting a car and understanding local driving regulations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Driving Regulations and Car Rental Interface\\\",\\n\\\"description\\\": \\\"This interface provides local driving regulations and car rental options based on the user's input location. It uses API-Tech's Driving Rules API and Rentalcars API to collect the necessary data.\\\",\\n\\\"function_name\\\": \\\"get_local_driving_info_and_car_rental\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"{driving_rules: {..}, rental_options: {..}}\\\",\\n\\\"depend\\\": \\\"requests, API-Tech's Driving Rules API, Rentalcars API\\\"\\n}\"", "description": "tool development"}
{"input persona": "At LaJuan's very own little grocery store owner", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inventory Management Interface\\\",\\n\\\"description\\\": \\\"An interface to manage the inventory of a small grocery store. The user inputs the path to a CSV file containing the existing inventory data, and the interface provides functions for adding new products, updating existing product quantities, and removing products that are no longer sold.\\\",\\n\\\"function_name\\\": [\\\"__init__\\\", \\\"add_product\\\", \\\"update_quantity\\\", \\\"remove_product\\\", \\\"get_inventory\\\"],\\n\\\"input_args\\\": {\\n    \\\"__init__\\\": [\\\"inventory_file\\\"],\\n    \\\"add_product\\\": [\\\"product_id\\\", \\\"product_name\\\", \\\"quantity\\\", \\\"price\\\"],\\n    \\\"update_quantity\\\": [\\\"product_id\\\", \\\"new_quantity\\\"],\\n    \\\"remove_product\\\": [\\\"product_id\\\"],\\n    \\\"get_inventory\\\": []\\n},\\n\\\"return\\\": {\\n    \\\"__init__\\\": \\\"None\\\",\\n    \\\"add_product\\\": \\\"None\\\",\\n    \\\"update_quantity\\\": \\\"None\\\",\\n    \\\"remove_product\\\": \\\"None\\\",\\n    \\\"get_inventory\\\": \\\"DataFrame\\\"\\n},\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A certified strength and conditioning specialist who designs customized crossfit workouts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crossfit Workout Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a customized crossfit workout based on the user's desired workout length and intensity level. It uses a random workout generator algorithm to combine different crossfit exercises and rep schemes.\\\",\\n\\\"function_name\\\": \\\"crossfit_workout_generator\\\",\\n\\\"input_args\\\": {\\n    \\\"workout_length\\\": \\\"The desired length of the workout in minutes (integer).\\\",\\n    \\\"intensity\\\": \\\"The desired workout intensity, which can be 'low', 'medium', or 'high' (string).\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples, where each tuple represents one exercise and the number of reps to be performed in the workout.\\\",\\n\\\"depend\\\": \\\"Python's built-in random library\\\"\\n}\"", "description": "tool development"}
{"input persona": "The fire chief who works closely with the business owner to identify the department's needs and allocate the funds accordingly", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fire Department Budget Allocation Interface\\\",\\n\\\"description\\\": \\\"Analyze and visualize the fire department's budget allocation based on historical spending data, and suggest how to allocate the budget for different department needs.\\\",\\n\\\"function_name\\\": \\\"suggest_budget_allocation\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"Data frame of suggested budget allocation and a plot showing the distribution of funds\\\",\\n\\\"depend\\\": \\\"pandas, numpy, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "An amateur genealogist seeking to trace their family roots in the Arcadia region through old photographs and stories", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Facial Recognition Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from the face_recognition library to determine whether two faces in different images match or not. It's useful for genealogists who want to determine if people in different photos are the same person.\\\",\\n  \\\"function_name\\\": \\\"compare_faces\\\",\\n  \\\"input_args\\\": {\\n    \\\"file1\\\": \\\"The path to the first image file\\\",\\n    \\\"file2\\\": \\\"The path to the second image file\\\"\\n  },\\n  \\\"return\\\": \\\"A boolean value indicating whether the two faces match\\\",\\n  \\\"depend\\\": \\\"face_recognition library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A botanist specializing in the flora of the Western Ghats, with a penchant for poetic musing about the interconnectedness of life and language", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant Species Identification Interface\\\",\\n\\\"description\\\": \\\"Identify plant species from an image.\\\",\\n\\\"function_name\\\": \\\"identify_plant_species\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to the image of the plant.\\\"\\n},\\n\\\"return\\\": \\\"The most likely species that the plant belongs to.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, numpy, Google's plant species classifier model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a passionate amateur Thai baker", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bread Recipe Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses GPT-3 or OpenAI's APIs to generate a suitable bread recipe based on the type of bread and the ingredients provided by the user.\\\",\\n\\\"function_name\\\": \\\"generate_bread_recipe\\\",\\n\\\"input_args\\\": {\\n    \\\"bread_type\\\": \\\"Type of bread the user wants to bake (String)\\\",\\n    \\\"ingredients\\\": \\\"Ingredients the user has (String)\\\"\\n},\\n\\\"return\\\": \\\"A suitable bread recipe (String)\\\",\\n\\\"depend\\\": \\\"OpenAI's GPT-3 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow graduate student who is conducting research on the regulatory challenges faced by SPACs", "synthesized text": "\"{\\n  \\\"name\\\": \\\"SPAC News Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch and analyze latest SPAC news. It identifies entities like regulatory bodies and companies mentioned in the news.\\\",\\n  \\\"function_name\\\": \\\"analyze_spac_news\\\",\\n  \\\"input_args\\\": null,\\n  \\\"return\\\": \\\"A list of dictionaries where each dictionary represents an entity mentioned in the news. Each dictionary has 'entity', 'score', 'index', 'start', and 'end' keys.\\\",\\n  \\\"depend\\\": [\\\"Python BeautifulSoup Library\\\", \\\"Python Requests Library\\\", \\\"Hugging Face's Transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A novice Python developer just started learning data science.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface provides a set of basic summary statistics and visualizations for a given CSV file and specified columns. It includes a histogram and, if there are at least two numerical variables, a scatter plot.\\\",\\n\\\"function_name\\\": \\\"visualize_data\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the CSV file\\\",\\n    \\\"column1_name\\\": \\\"The name of the first column\\\",\\n    \\\"column2_name\\\": \\\"The name of the second column (optional)\\\"\\n},\\n\\\"return\\\": \\\"Summary statistics printed on the console, and a histogram and/or scatter plot displayed on the screen\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, matplotlib.pyplot\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tech-savvy foodie who lives in a crowded city and enjoys singing in the shower", "synthesized text": "\"{\\n\\\"name\\\": \\\"Restaurant Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface provides top-rated restaurant recommendations based on user's current location and preferred cuisine. It leverages Yelp Fusion API.\\\",\\n\\\"function_name\\\": \\\"get_top_rated_restaurants\\\",\\n\\\"input_args\\\": \\n    {\\\"location\\\": \\\"User's current location (as a string)\\\",\\n     \\\"cuisine\\\": \\\"User's preferred cuisine (as a string)\\\"},\\n\\\"return\\\": \\\"A list of top 5 restaurants (each as a dictionary containing name, rating, address, and phone number of the restaurant)\\\",\\n\\\"depend\\\": \\\"Yelp Fusion API, Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A writer who has created a series of compelling short stories for the study", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n\\\"description\\\": \\\"An interface used to check the originality of a text by returning a plagiarism score. Higher scores indicate higher levels of potential plagiarism.\\\",\\n\\\"function_name\\\": \\\"check_plagiarism\\\",\\n\\\"input_args\\\": \\\"text - the text to be checked for plagiarism\\\",\\n\\\"return\\\": \\\"plag_score - a score indicating the percentage of the text that may have been plagiarized\\\",\\n\\\"depend\\\": \\\"PyPlag library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow welding enthusiast from another country who connects with the grandparent through a welding forum", "synthesized text": "\"{\\n\\\"name\\\": \\\"Welding Parameters Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface that simplifies the calculation of heat input for welding. Users need to input the voltage, amperage, and welding speed, and the interface returns the calculated heat input.\\\",\\n\\\"function_name\\\": \\\"calculate_heat_input\\\",\\n\\\"input_args\\\": [\\\"voltage\\\", \\\"amperage\\\", \\\"welding_speed\\\"],\\n\\\"return\\\": \\\"heat_input\\\",\\n\\\"depend\\\": \\\"Python standard library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Durham University alumnus who fled during Thatcher’s saga and is nostalgic about his past in Durham.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Weather Data Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the historical weather data for a given location and date.\\\",\\n\\\"function_name\\\": \\\"get_historical_weather\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"location\\\": \\\"The location for which the historical weather data is required.\\\",\\n    \\\"date\\\": \\\"The date for which the historical weather data is required.\\\"\\n    },\\n\\\"return\\\": \\\"Returns a dictionary containing the historical weather data for the given location and date.\\\",\\n\\\"depend\\\": \\\"This function leverages the Visual Crossing Weather Data API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An introverted author who's latest novel has been both praised and criticized for its experimental narrative structure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides various complexity scores for a given text. It is helpful for authors to understand the complexity of their writing.\\\",\\n\\\"function_name\\\": \\\"text_complexity_analysis\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"The text to be analyzed.\\\"},\\n\\\"return\\\": \\\"A dictionary containing various complexity scores.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"textstat\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "The CEO of a grocery store chain partnering with the politician to donate excess food to local food banks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Donation Interface\\\",\\n\\\"description\\\": \\\"An interface to get nutritional information for a food item using the Edamam Food Database API. Useful for grocery stores and food banks to understand the nutritional content of donated food items.\\\",\\n\\\"function_name\\\": \\\"get_nutrition_info\\\",\\n\\\"input_args\\\": \\\"food_name - name of the food item\\\",\\n\\\"return\\\": \\\"A dictionary containing nutritional information of the food item, including energy (calories), protein, fat, carbohydrates, fiber, sugars, and cholesterol. If no data is found, it returns an error message.\\\",\\n\\\"depend\\\": \\\"Edamam Food Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a 60-year-old retired cop who used to watch \"The Rookies\" when it first aired", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches details about a TV show using the TVMaze API. The user inputs the name of a TV show and receives a dictionary with details about the show.\\\",\\n\\\"function_name\\\": \\\"get_tv_show_details\\\",\\n\\\"input_args\\\": {\\\"show_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"name\\\": \\\"string\\\", \\\"genres\\\": \\\"list\\\", \\\"status\\\": \\\"string\\\", \\\"premiered\\\": \\\"string\\\", \\\"rating\\\": \\\"number\\\", \\\"summary\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"requests library, TVMaze API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retired Indian Air Force officer who served in the same period as General Ashwani Kumar Channan.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Military Service Record Retrieval\\\",\\n  \\\"description\\\": \\\"This interface uses a hypothetical military records API to retrieve the service records of a given individual.\\\",\\n  \\\"function_name\\\": \\\"get_service_records\\\",\\n  \\\"input_args\\\": {\\n    \\\"name\\\": \\\"A string that represents the full name of the individual whose service records are to be retrieved.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"records\\\": \\\"A list of dictionaries where each dictionary represents a record of the individual's military service. Each dictionary contains details like the period of service, rank, deployments, awards etc.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"Hypothetical Military Records API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A small business owner who wants unique and personalized icons for their website to reflect their brand", "synthesized text": "\"{\\n\\\"name\\\": \\\"Icon Generator Interface\\\",\\n\\\"description\\\": \\\"An interface to generate unique and personalized icons for a website using a pre-trained GAN model from TensorFlow Hub. Different color themes can be generated based on the user's input.\\\",\\n\\\"function_name\\\": \\\"generate_icon\\\",\\n\\\"input_args\\\": [\\\"color_theme - a float value between 0 and 1 representing the color theme\\\"],\\n\\\"return\\\": \\\"A numpy array of shape (128, 128, 3) representing the generated icon in RGB format.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A spokesperson for a farming association promoting the responsible use of pesticides", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Pesticide Use Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the optimal amount of pesticide to use based on weather conditions, type of crop, and pest infestation level. This can help farmers use pesticides more responsibly and sustainably.\\\",\\n  \\\"function_name\\\": \\\"predict_pesticide_use\\\",\\n  \\\"input_args\\\": {\\n    \\\"crop_type\\\": \\\"The type of crop (e.g., 'wheat', 'corn').\\\",\\n    \\\"weather_conditions\\\": \\\"The current weather conditions (e.g., 'rainy', 'sunny').\\\",\\n    \\\"pest_infestation_level\\\": \\\"The level of pest infestation (e.g., 'low', 'high').\\\"\\n  },\\n  \\\"return\\\": \\\"The predicted optimal amount of pesticide to use.\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"tensorflow\\\", \\\"sklearn\\\"],\\n    \\\"machine_learning_model\\\": \\\"A TensorFlow Keras model trained to predict pesticide use based on crop type, weather conditions, and pest infestation level.\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A government agency seeking a secure database management system for storing classified information", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Secure Encryption Interface\\\",\\n  \\\"description\\\": \\\"An interface to securely store and retrieve data in a database using encryption.\\\",\\n  \\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_data\\\", \\\"decrypt_data\\\", \\\"store_data\\\", \\\"retrieve_data\\\"],\\n  \\\"input_args\\\": [{\\\"generate_key\\\": \\\"None\\\"}, {\\\"encrypt_data\\\": [\\\"key\\\", \\\"data\\\"]}, {\\\"decrypt_data\\\": [\\\"key\\\", \\\"cipher_text\\\"]}, {\\\"store_data\\\": [\\\"table_name\\\", \\\"key\\\", \\\"data\\\"]}, {\\\"retrieve_data\\\": [\\\"table_name\\\", \\\"key\\\"]}],\\n  \\\"return\\\": [{\\\"generate_key\\\": \\\"secret_key\\\"}, {\\\"encrypt_data\\\": \\\"encrypted_data\\\"}, {\\\"decrypt_data\\\": \\\"decrypted_data\\\"}, {\\\"store_data\\\": \\\"None\\\"}, {\\\"retrieve_data\\\": \\\"decrypted_data\\\"}],\\n  \\\"depend\\\": [\\\"cryptography library\\\", \\\"sqlalchemy\\\", \\\"os library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A farmer living near the volcano who has experienced the impacts of eruptions on agriculture", "synthesized text": "\"{\\n\\\"name\\\": \\\"Volcano Eruption Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the likelihood of an eruption from a specific volcano in the near future using the Global Volcanism Program API and a RandomForestClassifier from sklearn.\\\",\\n\\\"function_name\\\": \\\"predict_eruption\\\",\\n\\\"input_args\\\": [\\\"volcano_name\\\"],\\n\\\"return\\\": \\\"A string indicating the predicted likelihood of an eruption from the specified volcano in the near future.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\", \\\"requests\\\", \\\"Global Volcanism Program API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A data scientist focusing on machine learning applications for optimizing smart grid operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Energy Consumption Forecasting Interface\\\",\\n\\\"description\\\": \\\"This interface takes a csv file of historical energy consumption data and returns a forecast of energy consumption for the next 24 hours.\\\",\\n\\\"function_name\\\": \\\"forecast_energy_consumption\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the csv file containing historical energy consumption data.\\\"\\n},\\n\\\"return\\\": \\\"A numpy array containing the forecast of energy consumption for the next 24 hours.\\\",\\n\\\"depend\\\": \\\"This function relies on the pandas, tensorflow, and sklearn.preprocessing.MinMaxScaler Python libraries, as well as a pre-trained LSTM model saved as an h5 file.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a 55-year-old woman who has never used a dating app in her life.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dating App Tutorial Interface\\\",\\n\\\"description\\\": \\\"This interface provides a step-by-step guide for using a specific dating app. The guide is based on tutorials scraped from online websites.\\\",\\n\\\"function_name\\\": \\\"get_dating_app_tutorial\\\",\\n\\\"input_args\\\": \\\"app_name - String: The name of the dating app for which the user wants to get a tutorial.\\\",\\n\\\"return\\\": \\\"List of strings: Each string is a step in the tutorial for using the dating app.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a proud member of the Patawomeck Indian Tribe of Virginia, deeply invested in the preservation of our heritage and history.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Native Language Text Translation Interface\\\",\\n  \\\"description\\\": \\\"This interface translates text from English to a native language or vice versa. The user inputs the text they want to translate and the language code of the language they want to translate to (or from), and the interface returns the translated text.\\\",\\n  \\\"function_name\\\": \\\"translate_text\\\",\\n  \\\"input_args\\\": [\\\"text\\\", \\\"target_language\\\"],\\n  \\\"return\\\": \\\"Translated text in the specified target language.\\\",\\n  \\\"depend\\\": {\\\"Python Library\\\": [\\\"google.cloud\\\"], \\\"Web API\\\": [\\\"Google Cloud Translation API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A meteorologist studying the atmospheric conditions that contribute to the formation of severe storms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface fetches current weather details like temperature, humidity, pressure, and wind speed for a given city using the OpenWeatherMap API. These details can help meteorologists in predicting severe weather conditions.\\\",\\n\\\"function_name\\\": \\\"get_weather_details\\\",\\n\\\"input_args\\\": \\\"city_name\\\",\\n\\\"return\\\": \\\"A dictionary with weather details including temperature, humidity, pressure, and wind speed.\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API, requests library in Python\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior veterinary researcher renowned for their groundbreaking discoveries in equine medicine", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a DNA sequence and returns the GC content of the sequence. The GC content is a useful metric in genetic research, indicating the proportion of Guanine and Cytosine in the DNA sequence.\\\",\\n\\\"function_name\\\": \\\"analyze_dna_sequence\\\",\\n\\\"input_args\\\": {\\n  \\\"file_path\\\": \\\"The path to a file containing a DNA sequence in FASTA format.\\\"\\n},\\n\\\"return\\\": \\\"The GC content of the DNA sequence, expressed as a percentage.\\\",\\n\\\"depend\\\": \\\"This function leverages the BioPython library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A DevOps engineer responsible for automating CI/CD pipelines in cloud environments", "synthesized text": "\"{\\n    \\\"ec2_instances\\\": [\\n        {\\n            \\\"image_id\\\": \\\"ami-0abcdef1234567890\\\",\\n            \\\"instance_type\\\": \\\"t2.micro\\\",\\n            \\\"key_name\\\": \\\"my-key-pair\\\"\\n        }\\n    ],\\n    \\\"s3_buckets\\\": [\\n        {\\n            \\\"bucket_name\\\": \\\"my-s3-bucket\\\"\\n        }\\n    ]\\n}\"", "description": "tool development"}
{"input persona": "A fellow young offender who is also inspired by the activist and aims to change their life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Motivational Quote Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface fetches a motivational quote based on a given keyword. It uses the Quotes REST API to find a relevant quote.\\\",\\n\\\"function_name\\\": \\\"get_motivational_quote\\\",\\n\\\"input_args\\\": \\\"keyword - a string representing the type of motivation needed (e.g., 'change', 'life', 'strength')\\\",\\n\\\"return\\\": \\\"A string containing a motivational quote relevant to the given keyword, and the author of the quote.\\\",\\n\\\"depend\\\": \\\"Quotes REST API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aromatherapist who creates custom essential oil blends for relaxation and stress relief", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Essential Oil Blend Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that recommends a blend of essential oils based on the user's preference for relaxation, stress relief, or both. Users can also specify any specific oils they prefer to include or avoid.\\\",\\n  \\\"function_name\\\": \\\"recommend_essential_oil_blend\\\",\\n  \\\"input_args\\\": {\\n    \\\"preference\\\": \\\"A string indicating the user's preference ('relaxation', 'stress relief', or 'both')\\\",\\n    \\\"include_oils\\\": \\\"A list of strings specifying the oils the user prefers to include\\\",\\n    \\\"exclude_oils\\\": \\\"A list of strings specifying the oils the user prefers to avoid\\\"\\n  },\\n  \\\"return\\\": \\\"A list of strings representing the recommended essential oils\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas\\\", \\\"sklearn.ensemble.RandomForestClassifier\\\"],\\n    \\\"machine learning models\\\": [\\\"A RandomForest model trained on essential oils data\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A climate change expert providing insights on the impact of global warming on agricultural productivity in Africa", "synthesized text": "\"{\\n\\\"name\\\": \\\"Climate Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"Provides an analysis of the impact of climate change on agricultural productivity\\\",\\n\\\"function_name\\\": \\\"predict_agricultural_productivity\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"Predicted agricultural productivity based on climate data\\\",\\n\\\"depend\\\": \\\"Climate API, RandomForestRegressor from sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A veteran educator with years of experience, known for their traditional teaching methods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Quiz Generator Interface\\\",\\n\\\"description\\\": \\\"This interface takes a text passage as input and generates a set of questions based on the content. It is useful for educators to quickly create quizzes or tests.\\\",\\n\\\"function_name\\\": \\\"generate_questions\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains a question and the corresponding answer extracted from the text.\\\",\\n\\\"depend\\\": \\\"NLTK for text processing and HuggingFace's Transformer for question generation\\\"\\n}\"", "description": "tool development"}
{"input persona": "an underdog tennis player who has just begun his career on clay courts", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tennis Match Statistics Interface\\\",\\n  \\\"description\\\": \\\"Provides detailed statistics of a tennis match using the roanuz tennis API\\\",\\n  \\\"function_name\\\": \\\"get_match_statistics\\\",\\n  \\\"input_args\\\": [\\\"match_id\\\"],\\n  \\\"return\\\": \\\"JSON object containing detailed match statistics\\\",\\n  \\\"depend\\\": \\\"roanuz tennis API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturer of premium paint sets specifically designed for modelers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Paint Color Mixing Interface\\\",\\n\\\"description\\\": \\\"Predicts the proportions of basic colors needed to create a specific color given its RGB values\\\",\\n\\\"function_name\\\": \\\"predict_color_proportions\\\",\\n\\\"input_args\\\": [\\\"rgb_values\\\"],\\n\\\"return\\\": \\\"proportions of basic colors\\\",\\n\\\"depend\\\": \\\"sklearn, numpy, pickle\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Tanzanian villager who has benefited from TASAF programs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poverty Map Interface\\\",\\n\\\"description\\\": \\\"This interface uses open-source data from the Tanzania Social Action Fund (TASAF) and other sources to calculate the poverty level of a specific region in Tanzania.\\\",\\n\\\"function_name\\\": \\\"get_poverty_level\\\",\\n\\\"input_args\\\": \\\"region - a string that specifies a region or village in Tanzania\\\",\\n\\\"return\\\": \\\"A string that shows the poverty index of the specified region.\\\",\\n\\\"depend\\\": \\\"Python's requests and pandas libraries, and TASAF's open data platform\\\"\\n}\"", "description": "tool development"}
{"input persona": "An astrobiologist who lends their expertise on the possibilities of extraterrestrial life to help the writer create realistic alien species", "synthesized text": "\"{\\n\\\"name\\\": \\\"Exoplanet Habitability Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface provides basic information about an exoplanet, such as its size, orbital period, and temperature. This information is crucial for determining the potential habitability of the exoplanet.\\\", \\n\\\"function_name\\\": \\\"get_exoplanet_info\\\", \\n\\\"input_args\\\": \\\"exoplanet_name\\\", \\n\\\"return\\\": \\\"A dictionary containing the name of the exoplanet, its size in Jupiter radii, the length of its year in Earth days, and its equilibrium temperature in Kelvin.\\\", \\n\\\"depend\\\": \\\"NASA Exoplanet Archive's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Prince George local who was never a fan of football", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\", \\n\\\"description\\\": \\\"This interface provides current weather conditions for a specified city. It uses the OpenWeatherMap API to fetch data.\\\", \\n\\\"function_name\\\": \\\"get_weather_forecast\\\", \\n\\\"input_args\\\": \\\"city_name\\\", \\n\\\"return\\\": \\\"A dictionary containing main weather, description of weather, temperature, humidity, and wind speed.\\\", \\n\\\"depend\\\": \\\"requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Brazilian truck driver who frequently uses BR-267 for transporting goods.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Route Weather Forecast\\\",\\n  \\\"description\\\": \\\"Provides the current weather descriptions of the start and end cities of the route. Useful for truck drivers to prepare for weather conditions they might encounter.\\\",\\n  \\\"function_name\\\": \\\"get_route_weather\\\",\\n  \\\"input_args\\\": [\\\"start_city\\\", \\\"end_city\\\", \\\"api_key\\\"],\\n  \\\"return\\\": \\\"A dictionary with keys 'start_city', 'start_city_weather', 'end_city', 'end_city_weather' and their corresponding values\\\",\\n  \\\"depend\\\": \\\"Python's built-in requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports film director who seeks authenticity and believability in portraying athletes on screen", "synthesized text": "\"{\\n\\\"name\\\": \\\"Athlete Performance Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to input a video file of an athlete's performance, and it will return key pose points for each frame. This can help the director analyze and improve athletes' performance, making the scenes more believable.\\\",\\n\\\"function_name\\\": \\\"analyze_athlete_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"The path to the video file to be analyzed.\\\"\\n},\\n\\\"return\\\": \\\"A list of numpy arrays, each containing key pose points and their scores for the corresponding frame in the video.\\\",\\n\\\"depend\\\": \\\"This function utilizes a pre-trained Pose Estimation model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nurse practitioner specializing in women's health who collaborates with the obstetrician-gynecologist in providing comprehensive care", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pregnancy Due Date Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the estimated due date of a pregnant patient based on the first day of the last menstrual period.\\\",\\n\\\"function_name\\\": \\\"calculate_due_date\\\",\\n\\\"input_args\\\": \\\"LMP - The first day of the last menstrual period as a string in the format 'YYYY-MM-DD'.\\\",\\n\\\"return\\\": \\\"The estimated due date as a datetime.date object.\\\",\\n\\\"depend\\\": \\\"Python's datetime module\\\"\\n}\"", "description": "tool development"}
{"input persona": "Ein japanischer Fußballhistoriker, der sich auf die 90er Jahre spezialisiert hat", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fu\\u00dfballspiel Analyse-Schnittstelle\\\",\\n\\\"description\\\": \\\"Diese Schnittstelle nimmt den Pfad zu einer Videodatei eines Fu\\u00dfballspiels und gibt eine Analyse des Spiels zur\\u00fcck, einschlie\\u00dflich Torsch\\u00fcsse, Fouls und andere Schl\\u00fcsselereignisse.\\\",\\n\\\"function_name\\\": \\\"analyze_football_match\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"Ein W\\u00f6rterbuch mit Schl\\u00fcsselereignissen und ihren jeweiligen Vorhersagen.\\\",\\n\\\"depend\\\": \\\"PyTorch, PyTorchVideo, Huggingface Modell 'slowfast_r50'\\\"\\n}\"", "description": "tool development"}
{"input persona": "Addicted racing game player", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"Provides an easy way to evaluate the performance of a game AI in a specific OpenAI Gym game environment.\\\",\\n\\\"function_name\\\": \\\"evaluate_game_performance\\\",\\n\\\"input_args\\\": [\\\"model_path\\\", \\\"game_name\\\"],\\n\\\"return\\\": \\\"Average score over 100 episodes in the specified game environment.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"gym\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a parent on a road trip with kids", "synthesized text": "\"{\\n\\\"name\\\": \\\"Kids' Entertainment Content Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the age group and interests of kids and returns a list of YouTube videos that are suitable and educational for the kids.\\\",\\n\\\"function_name\\\": \\\"get_kids_entertainment\\\",\\n\\\"input_args\\\": \\n    {\\n        \\\"age_group\\\": \\\"a string that represents the age group of the kids\\\",\\n        \\\"interests\\\": \\\"a list of strings that represents the interests of the kids\\\"\\n    },\\n\\\"return\\\": \\\"a list of dictionaries where each dictionary contains the title and the link of a YouTube video\\\",\\n\\\"depend\\\": \\\"YouTube Data API, Google Cloud Natural Language API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Правительственный служащий, который видит в программировании важные навыки для будущих возможностей его ребенка", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Code Learning Progress Tracker\\\",\\n\\\"description\\\": \\\"Track the progress of a user learning Python programming by analyzing their GitHub repositories.\\\",\\n\\\"function_name\\\": \\\"get_python_learning_progress\\\",\\n\\\"input_args\\\": [\\\"username\\\"],\\n\\\"return\\\": \\\"{ 'num_python_repos': int, 'total_commits': int, 'last_commit_date': str }\\\",\\n\\\"depend\\\": \\\"GitHub API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced NetSuite consultant", "synthesized text": "\"{\\n\\\"name\\\": \\\"NetSuite Record Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface uses NetSuite's SuiteTalk Web Services API to fetch specific records. Users only need to input the record type and the record id, and the interface will return the record details.\\\",\\n\\\"function_name\\\": \\\"get_netsuite_record\\\",\\n\\\"input_args\\\": [\\\"record_type\\\", \\\"record_id\\\"],\\n\\\"return\\\": \\\"Record details if successful or error message if an error occurs\\\",\\n\\\"depend\\\": [\\\"NetSuite SuiteTalk Web Services API\\\", \\\"zeep (Python library)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a massive Jackie Shroff fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bollywood Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses The Movie Database (TMDb) API to get a list of Jackie Shroff's movies in a user-specified genre.\\\",\\n\\\"function_name\\\": \\\"get_jackie_shroff_movies\\\",\\n\\\"input_args\\\": \\\"genre\\\",\\n\\\"return\\\": \\\"A list of movie titles\\\",\\n\\\"depend\\\": \\\"requests, TMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A time management expert who believes in the power of breaks and encourages the use of relaxation techniques during work hours", "synthesized text": "\"{\\n\\\"name\\\": \\\"Relaxation Technique Recommender Interface\\\",\\n\\\"description\\\": \\\"Analyzes the user's work description and recommends an appropriate relaxation technique.\\\",\\n\\\"function_name\\\": \\\"recommend_relaxation_technique\\\",\\n\\\"input_args\\\": \\\"work_description\\\",\\n\\\"return\\\": \\\"recommendation of a suitable relaxation technique\\\",\\n\\\"depend\\\": \\\"huggingface's pre-trained natural language understanding model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mother who is a journalist always encourages her children to express facts and perspectives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fact Checking Interface\\\",\\n\\\"description\\\": \\\"An interface to verify the truthfulness of a statement using FullFact's API.\\\",\\n\\\"function_name\\\": \\\"fact_check\\\",\\n\\\"input_args\\\": [\\\"statement\\\"],\\n\\\"return\\\": \\\"Fact checking result as a string, or an error message if the claim couldn't be verified or an error occurred during fact checking.\\\",\\n\\\"depend\\\": \\\"FullFact API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history student who enjoys reading Arabian Nights", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Text to Speech Interface\\\",\\n  \\\"description\\\": \\\"This interface converts a piece of text to speech and saves it as an audio file. It's useful for users who want to listen to a text, like a chapter from Arabian Nights, instead of reading it.\\\",\\n  \\\"function_name\\\": \\\"text_to_speech\\\",\\n  \\\"input_args\\\": {\\n    \\\"text\\\": \\\"A string containing the text you want to convert to speech.\\\",\\n    \\\"save_path\\\": \\\"A string indicating where you want to save the audio file. Default is 'output.wav'.\\\"\\n  },\\n  \\\"return\\\": \\\"A string indicating the path where the audio file is saved.\\\",\\n  \\\"depend\\\": {\\n    \\\"Web API\\\": [],\\n    \\\"Python library\\\": [\\\"transformers\\\", \\\"soundfile\\\", \\\"tensorflow\\\"],\\n    \\\"Machine learning model\\\": [\\\"t5-base\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A police officer who understands the importance of firearm safety training", "synthesized text": "\"{\\n\\\"name\\\": \\\"Firearm Training Progress Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface to update and track an officer's progress in firearm safety training using a SQLite database.\\\",\\n\\\"function_name\\\": \\\"update_training_status\\\",\\n\\\"input_args\\\": [\\\"officer_id\\\", \\\"training_completed\\\"],\\n\\\"return\\\": \\\"A dictionary with officer_id and updated training completion status\\\",\\n\\\"depend\\\": \\\"sqlite3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A supplier who aligns their sustainability practices with CSR initiatives, highlighting the potential cost savings and increased customer loyalty", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates the carbon footprint based on the company's production details and suggests methods to reduce it, enabling the company to align with their CSR initiatives and potentially save costs.\\\",\\n\\\"function_name\\\": \\\"get_carbon_footprint\\\",\\n\\\"input_args\\\": \\\"production_details - A string that contains the details about the company's production process\\\",\\n\\\"return\\\": \\\"A string that contains the calculated carbon footprint and the suggested methods to reduce it.\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired British professor specialized in gender studies who has transitioned from female to male", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gender Pronoun Replacement Interface\\\",\\n\\\"description\\\": \\\"An interface that replaces all gender pronouns in a given text according to the user-selected gender.\\\",\\n\\\"function_name\\\": \\\"replace_gender_pronouns\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"gender\\\"],\\n\\\"return\\\": \\\"Text with all gender pronouns replaced according to the selected gender.\\\",\\n\\\"depend\\\": \\\"Python's built-in string manipulation functions\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged woman who enjoys reading romance novels but has no understanding or interest in manga or animation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Goodreads Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends highly rated books from a specified genre using the Goodreads API.\\\",\\n\\\"function_name\\\": \\\"get_genre_top_books\\\",\\n\\\"input_args\\\": \\\"genre - The preferred book genre of the user\\\",\\n\\\"return\\\": \\\"A list of top-rated books in the specified genre\\\",\\n\\\"depend\\\": \\\"Goodreads API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dental assistant who enjoys watching romance dramas in her spare time, but is unfamiliar with BL (Boys Love) genre.", "synthesized text": "\"{\\n\\\"name\\\": \\\"BL Anime Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Jikan API to fetch and filter BL (Boys Love) anime based on user's input rating and genre preferences.\\\",\\n\\\"function_name\\\": \\\"get_BL_anime_recommendations\\\",\\n\\\"input_args\\\": [\\\"min_rating\\\", \\\"preferred_genres\\\"],\\n\\\"return\\\": \\\"A list of recommended BL anime titles based on user preferences.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Jikan API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A cybersecurity entrepreneur leveraging blockchain to create decentralized identity and access management solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Transaction Verification Interface\\\",\\n\\\"description\\\": \\\"An interface to verify the status of a transaction in Ethereum blockchain.\\\",\\n\\\"function_name\\\": \\\"verify_ethereum_transaction\\\",\\n\\\"input_args\\\": \\\"transaction_hash - The hash of the Ethereum transaction\\\",\\n\\\"return\\\": \\\"True if the transaction has been successfully recorded in the blockchain, False otherwise\\\",\\n\\\"depend\\\": \\\"Web3.py library for interacting with Ethereum\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dental implant manufacturer with innovative products and solutions for dental surgeons", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dental Implant Design Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the optimal design for a dental implant based on a given patient's tooth measurements using a machine learning model. It returns a 3D model of the proposed implant.\\\",\\n\\\"function_name\\\": \\\"predict_implant_design\\\",\\n\\\"input_args\\\": \\\"tooth_measurements - A list of measurements for the patient's tooth.\\\",\\n\\\"return\\\": \\\"A 3D model of the proposed dental implant.\\\",\\n\\\"depend\\\": \\\"TensorFlow for the machine learning model, and a custom function to convert the predicted design into a 3D model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "an AI trained to simulate the thought process and voice of Prof. Lynn S. Liben, a scholar of gender identity and development.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chatbot Interface for Prof. Lynn S. Liben\\\",\\n\\\"description\\\": \\\"This interface simulates a conversation with Prof. Lynn S. Liben by leveraging a transformer-based model that has been fine-tuned on her works. The function takes a question as input and returns an answer generated by the model.\\\",\\n\\\"function_name\\\": \\\"ask_prof_liben\\\",\\n\\\"input_args\\\": [\\\"question\\\"],\\n\\\"return\\\": \\\"An answer generated by the model\\\",\\n\\\"depend\\\": [\\\"Hugging Face's Transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a law abiding citizen in Iowa who is interested in outdoor activities, such as hunting and fishing", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Hunting and Fishing License Purchase Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to easily purchase hunting and fishing licenses in Iowa. Users only need to input their personal information and the type of license they want to purchase.\\\",\\n  \\\"function_name\\\": \\\"purchase_license\\\",\\n  \\\"input_args\\\": {\\n    \\\"user_info\\\": \\\"A dictionary containing the user's personal information (e.g., full name, address, date of birth, etc.)\\\",\\n    \\\"license_type\\\": \\\"The type of license the user wants to purchase (e.g., 'deer hunting', 'fishing', etc.)\\\"\\n  },\\n  \\\"return\\\": \\\"The status of the purchase (e.g., 'success', 'failure', 'pending', etc.)\\\",\\n  \\\"depend\\\": \\\"This interface requires access to an online sales portal API for hunting and fishing licenses available in Iowa (e.g., 'https://iowa.hunting-license.org/api/purchase_license').\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Israeli citizen who is staying abroad and wants to return his homeland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Search Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the best flight options from a given location to Israel using the Skyscanner API.\\\",\\n\\\"function_name\\\": \\\"get_flights_to_israel\\\",\\n\\\"input_args\\\": {\\n    \\\"current_location\\\": \\\"string\\\"\\n},\\n\\\"return\\\": \\\"list of dictionaries representing flight options\\\",\\n\\\"depend\\\": \\\"requests library, Skyscanner API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A legal scholar based in the United States who frequently references FDA regulations", "synthesized text": "\"{\\n\\\"name\\\": \\\"FDA Regulation Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search for specific terms or phrases within FDA regulations.\\\",\\n\\\"function_name\\\": \\\"search_FDA_regulations\\\",\\n\\\"input_args\\\": \\\"search_term\\\",\\n\\\"return\\\": \\\"A list of regulations in which the search term appears\\\",\\n\\\"depend\\\": \\\"FDA's open API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager who relies on the software engineer's expertise to lead and deliver successful Magento projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Magento Version Compatibility Checker Interface\\\",\\n\\\"description\\\": \\\"This interface checks the compatibility of a given Magento version with the project requirements. It uses Magento's REST API and Python's requests library to perform the check.\\\",\\n\\\"function_name\\\": \\\"check_magento_version_compatibility\\\",\\n\\\"input_args\\\": \\\"version\\\",\\n\\\"return\\\": \\\"A string message indicating whether the provided Magento version is compatible with the project requirements or not.\\\",\\n\\\"depend\\\": \\\"Python's requests library, Magento's REST API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A labor union representative who has had a positive experience with the judge's decisions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Court Decision Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for users to analyze a particular judge's decisions.\\\",\\n\\\"function_name\\\": \\\"get_judge_decision_summary\\\",\\n\\\"input_args\\\": \\\"judge_name\\\",\\n\\\"return\\\": \\\"A dictionary with total number of cases presided over by the judge, number of decisions in favor of workers, and the percentage of pro-worker decisions.\\\",\\n\\\"depend\\\": \\\"Case Law Access Project API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small regional airline looking to optimize their operations and reduce expenses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface optimizes a flight route based on real-time weather and air traffic data. It takes in a flight route as input (i.e., a pair of ICAO airport codes), and outputs an optimized flight route.\\\",\\n\\\"function_name\\\": \\\"optimize_flight_route\\\",\\n\\\"input_args\\\": {\\\"start_airport\\\": \\\"ICAO airport code of the starting airport\\\", \\\"end_airport\\\": \\\"ICAO airport code of the destination airport\\\"},\\n\\\"return\\\": \\\"Optimized flight route based on current weather conditions and air traffic\\\",\\n\\\"depend\\\": [\\\"OpenSky API\\\", \\\"OpenWeatherMap API\\\", \\\"requests\\\", \\\"json\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Cyberspace security expert with knowledge in ASP.NET", "synthesized text": "\"{\\n\\\"name\\\": \\\"ASP.NET Security Scanner Interface\\\",\\n\\\"description\\\": \\\"This interface initiates a security scan on the provided ASP.NET website URL, and retrieves the scan results. The results include alerts and potential vulnerabilities.\\\",\\n\\\"function_name\\\": \\\"aspnet_security_scan\\\",\\n\\\"input_args\\\": \\\"target_url\\\",\\n\\\"return\\\": \\\"scan_results\\\",\\n\\\"depend\\\": \\\"OWASP ZAP API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A district manager who provides guidance and sets performance goals for postal inspectors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mail Volume Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches and analyzes the volume of mail processed by each postal office in a given district.\\\",\\n\\\"function_name\\\": \\\"analyze_mail_volume\\\",\\n\\\"input_args\\\": [\\\"api_key\\\", \\\"district\\\"],\\n\\\"return\\\": \\\"A dictionary containing the total, average, highest, and lowest mail volume in the given district.\\\",\\n\\\"depend\\\": \\\"requests library to fetch data, pandas library to analyze data, and a hypothetical mail volume web API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "an editor for a Bucharest-based magazine focusing on religious studies", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bible Passage Lookup Interface\\\",\\n  \\\"description\\\": \\\"An interface to lookup scripture passages in the Bible using the OpenBible.info API. Users input the book, chapter, and verse(s), and the function returns the text of the specified passage(s).\\\",\\n  \\\"function_name\\\": \\\"get_bible_passage\\\",\\n  \\\"input_args\\\": {\\n    \\\"book\\\": \\\"Name of the book in the Bible (e.g., 'John')\\\",\\n    \\\"chapter\\\": \\\"Chapter number (e.g., 3)\\\",\\n    \\\"verse_start\\\": \\\"Starting verse number (e.g., 16)\\\",\\n    \\\"verse_end\\\": \\\"Ending verse number (optional, e.g., 18)\\\"\\n  },\\n  \\\"return\\\": \\\"The text of the specified scripture passage(s)\\\",\\n  \\\"depend\\\": \\\"Python's requests library, OpenBible.info API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research assistant working on a thesis investigating the implications of string theory on the multiverse", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum String Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simulates the vibrational modes of a quantum string over time, given the number of timesteps and the string tension as input.\\\",\\n\\\"function_name\\\": \\\"simulate_quantum_string\\\",\\n\\\"input_args\\\": [\\\"timesteps\\\", \\\"tension\\\"],\\n\\\"return\\\": \\\"A matplotlib plot showing the vibrational modes of the quantum string over time.\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"matplotlib\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a huge fan of Janet Jackson who has a collection of all her albums.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Album Artwork Resolution Enhancement Interface\\\",\\n\\\"description\\\": \\\"This interface enhances the resolution of album artworks using a pre-trained model from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"enhance_artwork\\\",\\n\\\"input_args\\\": \\\"path_to_artwork\\\",\\n\\\"return\\\": \\\"A numpy array representing the high-resolution version of the input artwork.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Model: https://tfhub.dev/captain-pool/esrgan-tf2/1\\\"\\n}\"", "description": "tool development"}
{"input persona": "History buff from Finland", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Search Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Wikipedia's API to search for historical events related to a specific keyword. The user inputs a keyword, and the interface returns a list of historical events related to that keyword.\\\",\\n\\\"function_name\\\": \\\"get_historical_events\\\",\\n\\\"input_args\\\": \\\"keyword\\\",\\n\\\"return\\\": \\\"A list of historical events related to the keyword, or 'No results found' if no related events are found.\\\",\\n\\\"depend\\\": \\\"Python library: requests, Web API: Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior PHP developer who recognizes the YouTuber's contributions to the community and invites them to speak at a developer conference", "synthesized text": "\"{\\n\\\"name\\\": \\\"YouTube Video Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the YouTube Data API to get the statistics and details of videos posted by a YouTuber.\\\",\\n\\\"function_name\\\": \\\"youtube_video_analysis\\\",\\n\\\"input_args\\\": {\\\"channel_id\\\": \\\"The ID of the YouTube channel to analyze.\\\"},\\n\\\"return\\\": {\\\"videos\\\": \\\"A list of video data, each containing the title, details, and statistics of a video.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"], \\\"Web APIs\\\": [\\\"YouTube Data API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A concerned parent of a child recently diagnosed with a single ventricle heart defect", "synthesized text": "\"{\\n\\\"name\\\": \\\"Heart Defect Information Interface\\\",\\n\\\"description\\\": \\\"An interface that retrieves reliable information about a specified health topic from the National Library of Medicine's MedlinePlus service.\\\",\\n\\\"function_name\\\": \\\"get_medline_info\\\",\\n\\\"input_args\\\": {\\n    \\\"health_topic\\\": \\\"A string representing the name of a health topic.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"summary\\\": \\\"A brief summary of the health topic.\\\",\\n    \\\"link\\\": \\\"A link to more detailed information about the health topic.\\\"\\n},\\n\\\"depend\\\": [\\\"requests\\\", \\\"xml.etree.ElementTree\\\", \\\"MedlinePlus API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a proactive student of University of Mary who is highly sensitive to the campus environment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Index Interface\\\",\\n\\\"description\\\": \\\"Provide Air Quality Index (AQI) and related information\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"A tuple that contains the latitude and longitude of the location\\\"},\\n\\\"return\\\": {\\\"city\\\": \\\"The nearest city to the location\\\", \\\"country\\\": \\\"The country of the nearest city\\\", \\\"aqi\\\": \\\"The Air Quality Index\\\", \\\"main_pollutant\\\": \\\"The main pollutant\\\", \\\"temperature\\\": \\\"The temperature\\\", \\\"pressure\\\": \\\"The pressure\\\", \\\"humidity\\\": \\\"The humidity\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"], \\\"Web APIs\\\": [\\\"IQAir (AirVisual) API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "an admiring junior accountant who dreams to merge a career in accounting with a personal interest in veterinary science.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Health Check Interface for Veterinary Clinics\\\",\\n\\\"description\\\": \\\"This interface takes a path to a financial statement data file (CSV or Excel) and returns a financial health check report for a veterinary clinic, including key financial ratios and potential issues.\\\",\\n\\\"function_name\\\": \\\"financial_health_check\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"Financial health check report (string)\\\",\\n\\\"depend\\\": \\\"Pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Tanja Mehlstäubler, a German physicist known for her work with quantum optical clocks and ion trap based quantum technologies", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Quantum State Visualization Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a state vector as input and returns a visualization of the quantum state.\\\",\\n  \\\"function_name\\\": \\\"visualize_quantum_state\\\",\\n  \\\"input_args\\\": [\\\"state_vector\\\"],\\n  \\\"return\\\": \\\"A plot object which can be displayed to visualize the quantum state.\\\",\\n  \\\"depend\\\": [\\\"qiskit\\\", \\\"matplotlib\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An organization leader working to implement the professor's law reform recommendations in practice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface classifies legal documents according to the professor's law reform recommendations.\\\",\\n\\\"function_name\\\": \\\"classify_legal_document\\\",\\n\\\"input_args\\\": [\\\"document_text\\\"],\\n\\\"return\\\": \\\"A string indicating whether the document matches the professor's law reform recommendations ('MATCH') or not ('NO MATCH').\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\", \\\"torch\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A fellow athlete who trains alongside the gold medalist and shares the same dedication and determination", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Running Pace Calculator Interface\\\",\\n  \\\"description\\\": \\\"This interface calculates the average running pace given the total distance run and the time taken.\\\",\\n  \\\"function_name\\\": \\\"calculate_running_pace\\\",\\n  \\\"input_args\\\": [\\\"distance_km\\\", \\\"time_min\\\"],\\n  \\\"return\\\": \\\"Average pace per kilometer in minutes\\\",\\n  \\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tourist who fell in love with the Philippines' culture and became captivated by the dancer's performances", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dance Pose Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to input an image of a dancer, and it will return the keypoints indicating the body parts of the dancer, which can be used for further analysis or recreation of the dance steps.\\\",\\n\\\"function_name\\\": \\\"analyze_dance_pose\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"Keypoints indicating the body parts of the dancer in the image\\\",\\n\\\"depend\\\": \\\"Python libraries: cv2, numpy. Machine Learning Model: PoseNet or OpenPose from tf_pose\\\"\\n}\"", "description": "tool development"}
{"input persona": "a middle-aged Vietnamese woman who adored Trịnh Văn Bảo's victory last year.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chess Game Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Stockfish chess engine to predict the best next move in a chess game.\\\",\\n\\\"function_name\\\": \\\"predict_best_move\\\",\\n\\\"input_args\\\": [\\\"board_state\\\"],\\n\\\"return\\\": \\\"best_move\\\",\\n\\\"depend\\\": \\\"Stockfish chess engine\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Estonian stage actor deeply invested in the tradition of national theatre.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automatic Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Text-to-Speech (gTTS) library to convert a given script into spoken text, saved as an mp3 file. It can be used by actors, language learners, or anyone who needs to hear a written text read aloud.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\n    \\\"script\\\": \\\"The script to be converted to speech, as a string.\\\",\\n    \\\"language\\\": \\\"The language in which the script should be read, as a string representing the language code (e.g., 'en' for English, 'et' for Estonian).\\\",\\n    \\\"output_filename\\\": \\\"The desired name of the output mp3 file, as a string. Do not include the .mp3 extension in this argument.\\\"\\n},\\n\\\"return\\\": \\\"The path to the generated mp3 file, as a string.\\\",\\n\\\"depend\\\": [\\\"Python library: gTTS\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a tournament of kings enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chess Move Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the best next move in a chess game based on a given board configuration. The function uses a pre-trained model from huggingface to make the prediction.\\\",\\n\\\"function_name\\\": \\\"predict_chess_move\\\",\\n\\\"input_args\\\": {\\\"fen_string\\\": \\\"String representing a valid chess board configuration in Forsyth-Edwards Notation.\\\"},\\n\\\"return\\\": \\\"String representing the predicted best move.\\\",\\n\\\"depend\\\": \\\"Python libraries: transformers, torch; Machine learning model: lvwerra/trlm-chess from huggingface\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager overseeing multiple construction projects and relying on the civil engineer to provide accurate and timely inspection reports", "synthesized text": "\"{\\n\\\"name\\\": \\\"Civil Engineering Inspection Report Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to a civil engineering inspection report and returns a classification of the report based on urgency.\\\",\\n\\\"function_name\\\": \\\"classify_inspection_report\\\",\\n\\\"input_args\\\": \\\"report_path: str - The path to the text file containing the inspection report.\\\",\\n\\\"return\\\": \\\"str - A classification of the report based on urgency (e.g., 'urgent', 'moderate', 'low').\\\",\\n\\\"depend\\\": \\\"Python standard library for file handling, Hugging Face transformers library for text classification.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fictional character: Dr. Adrian Flux, a brilliant but somewhat eccentric molecular biologist with a keen interest in epigenetics and a penchant for comic book superheroes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genome Sequence Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for a specific gene sequence in a larger DNA sequence. Returns the positions at which the gene sequence is found.\\\",\\n\\\"function_name\\\": \\\"find_gene_sequence\\\",\\n\\\"input_args\\\": {\\n    \\\"dna_sequence\\\": \\\"The larger DNA sequence to search within. Must be a string of A, T, C, G characters.\\\",\\n    \\\"gene_sequence\\\": \\\"The gene sequence to search for. Must be a string of A, T, C, G characters.\\\"\\n},\\n\\\"return\\\": \\\"A list of integers representing the positions at which the gene sequence starts within the larger DNA sequence.\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow safety engineer from a different amusement park, regularly exchanging best practices and industry updates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ride Safety Inspection Report Interface\\\",\\n\\\"description\\\": \\\"An interface that extracts issues and solutions from an amusement ride safety inspection report using a pre-trained NLP model.\\\",\\n\\\"function_name\\\": \\\"extract_issues_and_solutions_from_report\\\",\\n\\\"input_args\\\": {\\\"report_text\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"issues\\\": \\\"string\\\", \\\"solutions\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"Machine Learning Models\\\": [\\\"Hugging Face\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A player from a rival college football team in 1935.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historic Football Match Statistics\\\",\\n\\\"description\\\": \\\"This module retrieves the historical football match data between two teams from a given year.\\\",\\n\\\"function_name\\\": \\\"get_football_match_statistics\\\",\\n\\\"input_args\\\": [\\\"year\\\", \\\"team1\\\", \\\"team2\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'team1_scores', 'team2_scores', 'winning_team', 'venue' or a message stating no match data found.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"collegefootballdata API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a devoted member of The Church of the Epiphany-Upper Room Thrift Shop in Southbury", "synthesized text": "\"{\\n\\\"name\\\": \\\"Donation Management Interface\\\",\\n\\\"description\\\": \\\"An interface to manage all donations. Users only need to input the details of the donation, and the interface will store it in the database.\\\",\\n\\\"function_name\\\": [\\\"create_donation_table\\\", \\\"add_donation\\\"],\\n\\\"input_args\\\": [\\\"donor\\\", \\\"item\\\", \\\"quantity\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"None. The functions perform operations on the database.\\\",\\n\\\"depend\\\": \\\"SQLite\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional music promoter who prefers live bands and considers electronic music as 'not real music'", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Songkick API to recommend live music events to the user, based on their location and preferred date. It filters out electronic music events.\\\",\\n\\\"function_name\\\": \\\"get_live_music_events\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"string representing the city where the user wants to attend the event\\\", \\\"date\\\": \\\"string representing the preferred date in YYYY-MM-DD format\\\"},\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary represents an event and contains keys like 'Event name', 'Artist', 'Venue', 'City', and 'Date'\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Songkick API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A grassroots activist organizing rallies and events to raise awareness about the benefits of alternative sentencing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Promotion Interface\\\",\\n\\\"description\\\": \\\"An interface to help grassroots activists create and manage events on Eventbrite.\\\",\\n\\\"function_name\\\": \\\"create_event\\\",\\n\\\"input_args\\\": {\\n    \\\"event_name\\\": \\\"The name of the event.\\\",\\n    \\\"start_time\\\": \\\"The start time of the event in UTC.\\\",\\n    \\\"end_time\\\": \\\"The end time of the event in UTC.\\\",\\n    \\\"description\\\": \\\"A description of the event.\\\"\\n},\\n\\\"return\\\": \\\"The URL of the event page on Eventbrite.\\\",\\n\\\"depend\\\": [\\\"Eventbrite API\\\", \\\"requests\\\", \\\"json\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A defunct tugboat fanatic from the Netherlands", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Marine Traffic Data Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to get the current status and location of a specific tugboat by inputting the tugboat's MMSI or IMO number.\\\",\\n  \\\"function_name\\\": \\\"get_tugboat_data\\\",\\n  \\\"input_args\\\": [\\\"mmsi_imo_number\\\"],\\n  \\\"return\\\": \\\"A dictionary containing the name, status, and location (longitude and latitude) of the tugboat.\\\",\\n  \\\"depend\\\": \\\"MarineTraffic API, requests Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly patient recently diagnosed with Paget's disease of the bone", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disease Information Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch information about a specific disease. The information is fetched from the Disease-ontology API.\\\",\\n\\\"function_name\\\": \\\"get_disease_info\\\",\\n\\\"input_args\\\": \\\"disease_name: The name of the disease to fetch information about\\\",\\n\\\"return\\\": \\\"A string containing the description of the disease.\\\",\\n\\\"depend\\\": \\\"Disease-ontology API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lifelong fan of Björn Borg who can be somewhat bitter about his losses", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Match Statistics Interface\\\",\\n    \\\"description\\\": \\\"Provides head-to-head match statistics between two tennis players.\\\",\\n    \\\"function_name\\\": \\\"get_head_to_head_statistics\\\",\\n    \\\"input_args\\\": [\\\"player1\\\", \\\"player2\\\"],\\n    \\\"return\\\": {\\n        \\\"player1\\\": {\\n            \\\"name\\\": \\\"string (name of player1)\\\",\\n            \\\"wins\\\": \\\"int (number of wins by player1)\\\",\\n            \\\"losses\\\": \\\"int (number of losses by player1)\\\",\\n            \\\"ties\\\": \\\"int (number of ties by player1)\\\",\\n            \\\"total_matches\\\": \\\"int (total matches played by player1)\\\"\\n        },\\n        \\\"player2\\\": {\\n            \\\"name\\\": \\\"string (name of player2)\\\",\\n            \\\"wins\\\": \\\"int (number of wins by player2)\\\",\\n            \\\"losses\\\": \\\"int (number of losses by player2)\\\",\\n            \\\"ties\\\": \\\"int (number of ties by player2)\\\",\\n            \\\"total_matches\\\": \\\"int (total matches played by player2)\\\"\\n        }\\n    },\\n    \\\"depend\\\": \\\"Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Thai gamer and streamer who mostly plays games on PC but also enjoys games on other platforms including XBOX.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of recommended games based on the user's preferred game genres and platform. It leverages the RAWG Video Games Database API.\\\",\\n\\\"function_name\\\": \\\"get_game_recommendations\\\",\\n\\\"input_args\\\": [\\\"genres\\\", \\\"platform\\\"],\\n\\\"return\\\": \\\"List of recommended games\\\",\\n\\\"depend\\\": \\\"RAWG Video Games Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An alumna of Collège Saint-Stanislas who is now a historian.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Document Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes historical documents, converting image to text and identifying important entities like people, places, and events.\\\",\\n\\\"function_name\\\": \\\"analyze_historical_document\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"A dictionary with two keys: 'text' - the recognized text from the image, 'entities' - a dictionary of identified entities.\\\",\\n\\\"depend\\\": \\\"pytesseract, PIL, spacy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturer specializing in lightweight and eco-friendly shipping containers, offering an alternative approach to the market", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Container Weight and Environmental Impact Estimation Interface\\\",\\n  \\\"description\\\": \\\"Estimates the weight and environmental impact of a container based on its dimensions, material, and thickness.\\\",\\n  \\\"function_name\\\": \\\"estimate_container_properties\\\",\\n  \\\"input_args\\\": {\\n    \\\"height\\\": \\\"The height of the container in meters.\\\",\\n    \\\"width\\\": \\\"The width of the container in meters.\\\",\\n    \\\"length\\\": \\\"The length of the container in meters.\\\",\\n    \\\"material\\\": \\\"The material used to build the container.\\\",\\n    \\\"thickness\\\": \\\"The thickness of the material used in the container. Default is 1.0.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"weight\\\": \\\"The estimated weight of the container in kilograms.\\\",\\n    \\\"environmental_impact\\\": \\\"The estimated environmental impact of the container in terms of carbon footprint in kilograms of CO2.\\\"\\n  },\\n  \\\"depend\\\": \\\"A RandomForestRegressor machine learning model trained on the properties of containers.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A crowdfunding expert who assists in creating successful fundraising campaigns for independent film projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Fundraising Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the success of a film fundraising campaign based on the film's genre, the director's past success, the fundraising goal, and the number of actors.\\\",\\n\\\"function_name\\\": \\\"predict_fundraising_success\\\",\\n\\\"input_args\\\": {\\n  \\\"path_to_model\\\": \\\"The path to the pre-trained model\\\",\\n  \\\"film_genre\\\": \\\"The genre of the film\\\",\\n  \\\"past_success\\\": \\\"The number of past successful campaigns by the director\\\",\\n  \\\"fundraising_goal\\\": \\\"The fundraising goal for the campaign\\\",\\n  \\\"num_actors\\\": \\\"The number of actors in the film\\\"\\n},\\n\\\"return\\\": \\\"A prediction of 'Success' or 'Failure' based on the input parameters.\\\",\\n\\\"depend\\\": \\\"Python's pandas and sklearn libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Idaho State University admissions counselor, whose responsibility is to assist prospective students on their application journey.", "synthesized text": "\"{\\n\\\"name\\\": \\\"University Application Status Checker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check the status of their university application by simply providing their application ID.\\\",\\n\\\"function_name\\\": \\\"check_application_status\\\",\\n\\\"input_args\\\": {\\\"application_id\\\": \\\"The unique ID provided to the student during the application process.\\\"},\\n\\\"return\\\": \\\"Returns the current status of the student's application.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"],\\n            \\\"Web APIs\\\": [\\\"University Application Portal API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a casual music listener who prefers mainstream pop music and rarely listens to indie music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends popular songs from the same genre as the song lyrics inputted by the user.\\\",\\n\\\"function_name\\\": \\\"recommend_songs\\\",\\n\\\"input_args\\\": {\\\"lyrics\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"List of song names as string\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"torch\\\", \\\"transformers\\\"], \\\"Web APIs\\\": \\\"\\\", \\\"machine learning models\\\": \\\"Huggingface: textattack/distilbert-base-uncased-ag-news\\\"}\\n}\"", "description": "tool development"}
{"input persona": "An ambitious basketball player from a competing team who sees the injury as an opportunity to shine", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Game Performance Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the STATS Perform API to provide basketball players with their game performance statistics. Users input their name and the date of a game, and the interface returns their performance statistics for that game.\\\",\\n\\\"function_name\\\": \\\"get_game_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"player_name\\\": \\\"The name of the basketball player\\\",\\n    \\\"game_date\\\": \\\"The date of the game in YYYY-MM-DD format\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with keys being different performance metrics (such as points, assists, rebounds, etc.) and values being the player's stats for those metrics in that particular game.\\\",\\n\\\"depend\\\": \\\"Web API: STATS Perform\\\"\\n}\"", "description": "tool development"}
{"input persona": "A microbiologist studying the mechanisms of disease transmission in tropical environments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disease Transmission Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the likelihood of disease transmission in a specific location based on disease name, geographic and meteorological data.\\\",\\n\\\"function_name\\\": \\\"predict_disease_transmission\\\",\\n\\\"input_args\\\": [\\\"disease\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A prediction of the likelihood of disease transmission.\\\",\\n\\\"depend\\\": \\\"huggingface, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer who has experience working with UIButton in iOS development", "synthesized text": "\"{\\n\\\"name\\\": \\\"App Icon Extractor Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the URL of a given app's icon using the iTunes Search API.\\\",\\n\\\"function_name\\\": \\\"get_app_icon\\\",\\n\\\"input_args\\\": \\\"app_name - The name of the app.\\\",\\n\\\"return\\\": \\\"The URL of the app's icon, or an error message if the app is not found or the request fails.\\\",\\n\\\"depend\\\": \\\"Python requests library, iTunes Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An extreme sports athlete specializing in base jumping and skydiving", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parachute Landing Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the landing spot of a base jumper or skydiver based on current conditions.\\\",\\n\\\"function_name\\\": \\\"predict_landing\\\",\\n\\\"input_args\\\": [\\\"model_path\\\", \\\"wind_speed\\\", \\\"wind_direction\\\", \\\"altitude\\\", \\\"weight\\\", \\\"parachute_type\\\", \\\"parachute_size\\\"],\\n\\\"return\\\": \\\"A prediction of the landing spot.\\\",\\n\\\"depend\\\": \\\"TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "a science enthusiast who became interested in nanotechnology after reading the book “Prey” by Michael Crichton.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nanomaterial Property Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the properties of a given nanomaterial using a pre-trained deep learning model.\\\",\\n\\\"function_name\\\": \\\"nanomaterial_properties_interface\\\",\\n\\\"input_args\\\": {\\n    \\\"nanomaterial\\\": \\\"The structure of the nanomaterial as a string.\\\", \\n    \\\"model_path\\\": \\\"Path to the pre-trained model.\\\"\\n},\\n\\\"return\\\": \\\"Predicted properties of the input nanomaterial.\\\",\\n\\\"depend\\\": \\\"DeepChem library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An art historian reflecting on abstractionism and the legacy of Thomas H. Kapsalis.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained deep learning model to extract abstract features from an artwork image. The user only needs to input the path to an artwork image file, and the function will return a feature vector representing the abstract elements of the artwork.\\\",\\n\\\"function_name\\\": \\\"analyze_artwork\\\",\\n\\\"input_args\\\": \\\"path_to_img: string (path to the artwork image file)\\\",\\n\\\"return\\\": \\\"A numpy array of shape (1, 2048), representing the abstract features of the artwork.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and a pre-trained Inception V3 model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a British construction worker who has been affected by previous budget cuts.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches various economic indicators like GDP, inflation, and unemployment rate for a given country and time period using the World Bank API\\\",\\n\\\"function_name\\\": \\\"get_economic_indicators\\\",\\n\\\"input_args\\\": {\\\"country\\\": \\\"string\\\", \\\"from_year\\\": \\\"int\\\", \\\"to_year\\\": \\\"int\\\"},\\n\\\"return\\\": \\\"dictionary\\\",\\n\\\"depend\\\": \\\"World Bank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a film studies professor specializing in the representation of different racial and social groups in the history of cinema.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses OpenAI's GPT-3 model to analyze the representation of different racial and social groups in movies. The user inputs the script of a movie, and the interface generates a report outlining the representation of different racial and social groups.\\\",\\n\\\"function_name\\\": \\\"analyze_representation\\\",\\n\\\"input_args\\\": {\\n  \\\"movie_script\\\": \\\"A string containing the preprocessed script of a movie.\\\"\\n},\\n\\\"return\\\": {\\n  \\\"report\\\": \\\"A string containing a report outlining the representation of different racial and social groups in the inputted movie.\\\"\\n},\\n\\\"depend\\\": \\\"OpenAI's GPT-3 model from the huggingface transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nosy neighborhood watch captain", "synthesized text": "\"{\\n\\\"name\\\": \\\"Suspicious Vehicle License Plate Identification Interface\\\",\\n\\\"description\\\": \\\"An interface to identify and return the license plate number from an image of a vehicle.\\\",\\n\\\"function_name\\\": \\\"identify_license_plate\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"String containing the detected license plate number or a message indicating no license plate was detected.\\\",\\n\\\"depend\\\": \\\"openALPR API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Yakov Plyassunov, Russian nutritionist and Deputy Head of the Department of Preventive Medicine", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meal Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Edamam's Nutrition Analysis API to recommend meals based on user's dietary requirements.\\\",\\n\\\"function_name\\\": \\\"get_meal_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"calorie_limit\\\": \\\"An integer indicating the maximum number of calories the meals should have\\\",\\n    \\\"diet_type\\\": \\\"A string indicating the type of diet, e.g., 'low-carb', 'vegan', etc.\\\",\\n    \\\"num_meals\\\": \\\"An integer indicating the number of meals\\\"\\n},\\n\\\"return\\\": \\\"A list of meal names that meet the specified dietary requirements\\\",\\n\\\"depend\\\": \\\"Edamam's Nutrition Analysis API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A systems engineer working on a satellite project seeking advice on control system design", "synthesized text": "\"{\\n\\\"name\\\": \\\"Control System Design Interface\\\",\\n\\\"description\\\": \\\"This interface enables systems engineers to design and analyze control systems. It takes as inputs the numerator and denominator of the system's transfer function, and generates the step response and Bode plot of the system for analysis. It also returns the system object, poles, and zeros.\\\",\\n\\\"function_name\\\": \\\"control_system_design\\\",\\n\\\"input_args\\\": [\\\"num\\\", \\\"den\\\"],\\n\\\"return\\\": {\\\"system\\\": \\\"TransferFunction object\\\", \\\"poles\\\": \\\"array of poles\\\", \\\"zeros\\\": \\\"array of zeros\\\"},\\n\\\"depend\\\": \\\"Python Control Systems Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A school friend who lost touch with Vladimir Rudenko after high school, never interested in joining religious activities but valued the memories we shared together at young age.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Friend's Social Media Presence Search\\\",\\n\\\"description\\\": \\\"Search for a friend's online presence on various social media platforms\\\",\\n\\\"function_name\\\": \\\"search_social_media\\\",\\n\\\"input_args\\\": {\\n    \\\"name\\\": \\\"The full name of the friend\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with social media platform names as keys and the presence on the platform as values\\\",\\n\\\"depend\\\": \\\"Python BeautifulSoup, requests libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curious undergraduate majoring in History and interested in studying the influence of technology throughout different time periods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Events and Technology Timeline Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a timeline of historical events and the emergence of notable technologies for a specific time range.\\\",\\n\\\"function_name\\\": \\\"get_historical_events_and_technologies\\\",\\n\\\"input_args\\\": [\\\"start_year\\\", \\\"end_year\\\"],\\n\\\"return\\\": \\\"Two lists: one with historical events and another with notable technologies of the given time range.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"Wikipedia API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A curious boy fascinated by the starry night, hoping to follow in grandparent's footsteps", "synthesized text": "\"{\\n\\\"name\\\": \\\"Star Identification Interface\\\",\\n\\\"description\\\": \\\"Identify visible celestial bodies from a given location and time.\\\",\\n\\\"function_name\\\": \\\"get_visible_celestial_bodies\\\",\\n\\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\", \\\"date_time\\\"],\\n\\\"return\\\": \\\"List of visible celestial bodies\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"astropy\\\", \\\"skyfield\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A retired police officer who enjoys showing his restored 1963 Jeep Wagoneer at car shows", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle History Report Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the detailed history report of a vehicle by using the VIN (Vehicle Identification Number).\\\",\\n\\\"function_name\\\": \\\"get_vehicle_history\\\",\\n\\\"input_args\\\": \\\"vin\\\",\\n\\\"return\\\": \\\"A detailed history report of the vehicle in JSON format.\\\",\\n\\\"depend\\\": \\\"VIN API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher studying the effects of transportation on air quality and climate change", "synthesized text": "\"{\\n\\\"name\\\": \\\"CO2 Emission Calculation Interface\\\",\\n\\\"description\\\": \\\"Calculates the CO2 emission based on the type of transportation, fuel used, and distance travelled.\\\",\\n\\\"function_name\\\": \\\"calculate_CO2_emission\\\",\\n\\\"input_args\\\": [\\\"type_of_transport\\\", \\\"type_of_fuel\\\", \\\"distance_in_km\\\"],\\n\\\"return\\\": \\\"The CO2 emission in kilograms.\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud member of the Mi'kmaq tribe", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Language Translation Interface\\\",\\n  \\\"description\\\": \\\"An interface that translates the input text into the specified target language using transformer-based machine translation models from the Hugging Face 'transformers' library.\\\",\\n  \\\"function_name\\\": \\\"translate_text\\\",\\n  \\\"input_args\\\": {\\n    \\\"text\\\": \\\"The text to be translated, in any language supported by the Hugging Face 'transformers' library.\\\",\\n    \\\"target_language\\\": \\\"The language to translate the text into. This should be specified in the ISO 639-1 format (e.g., 'fr' for French, 'de' for German).\\\"\\n  },\\n  \\\"return\\\": \\\"The translated text, in the specified target language.\\\",\\n  \\\"depend\\\": \\\"Hugging Face 'transformers' library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An electrical engineer developing new hardware for faster Fourier transformations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fourier Transform Computations Interface\\\",\\n\\\"description\\\": \\\"This interface computes the Fourier transformation of a list of complex numbers. The complex numbers should be provided as pairs of real and imaginary parts.\\\",\\n\\\"function_name\\\": \\\"compute_fourier_transform\\\",\\n\\\"input_args\\\": \\\"numbers - A list of tuples, where each tuple represents a complex number as a pair of real and imaginary parts\\\",\\n\\\"return\\\": \\\"A list of tuples, where each tuple represents a complex number (the Fourier transformation of the corresponding input number) as a pair of real and imaginary parts\\\",\\n\\\"depend\\\": \\\"NumPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Czech web developer who uses CKEditor for web development", "synthesized text": "\"{\\n\\\"name\\\": \\\"HTML to Markdown Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts an HTML string to its Markdown equivalent. It uses the 'markdownify' Python library to accomplish this. The user only needs to input an HTML string, and the interface will return the Markdown equivalent.\\\",\\n\\\"function_name\\\": \\\"html_to_markdown\\\",\\n\\\"input_args\\\": [\\\"html_string\\\"],\\n\\\"return\\\": \\\"Markdown string\\\",\\n\\\"depend\\\": [\\\"markdownify Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A 10-year-old who doesn't like chemistry at all", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemistry Equations Solver Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that simplifies the process of solving chemistry equations by using sympy, a Python library for symbolic mathematics.\\\",\\n\\\"function_name\\\": \\\"solve_chemistry_equation\\\",\\n\\\"input_args\\\": \\\"a string that represents the chemistry equation to be solved\\\",\\n\\\"return\\\": \\\"the solution(s) to the input chemistry equation\\\",\\n\\\"depend\\\": \\\"Sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A math-holic, an obsessed fan of every single mathematician in the world.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mathematician Info Search Interface\\\",\\n\\\"description\\\": \\\"Fetch information about a mathematician using the Wikidata Query Service API\\\",\\n\\\"function_name\\\": \\\"get_mathematician_info\\\",\\n\\\"input_args\\\": [\\\"name\\\"],\\n\\\"return\\\": \\\"A dictionary containing information about the mathematician or None\\\",\\n\\\"depend\\\": \\\"Wikidata Query Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sales representative from the company that provides the MQ series infrastructure, offering technical support and product updates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Message Queue Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to monitor the status of the message queue in the MQ environment.\\\",\\n\\\"function_name\\\": \\\"monitor_message_queue\\\",\\n\\\"input_args\\\": [\\\"hostname\\\", \\\"port\\\", \\\"topic\\\"],\\n\\\"return\\\": \\\"This function does not return a value. It prints the messages being received on the specified topic.\\\",\\n\\\"depend\\\": [\\\"paho-mqtt\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local Cleveland resident who has worked for Check Into Cash, Inc.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Payday Loan Calculator Interface\\\",\\n  \\\"description\\\": \\\"This interface calculates the total repayment amount for a payday loan given the principal amount, annual interest rate, and loan duration in days.\\\",\\n  \\\"function_name\\\": \\\"calculate_payday_loan_repayment\\\",\\n  \\\"input_args\\\": [\\\"principal\\\", \\\"rate\\\", \\\"duration_in_days\\\"],\\n  \\\"return\\\": \\\"Total repayment amount\\\",\\n  \\\"depend\\\": \\\"Python's built-in libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "Un desarrollador de Android que aboga por la superioridad del sistema operativo de Google y compite en hackathons", "synthesized text": "\"{\\n\\\"name\\\": \\\"Android App Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Play Store Scraping API to fetch and return valuable information about a specific Android application from the Google Play Store. The user just needs to input the name of the application, and they would receive information about the app such as its rating, the number of installations, last update, size, etc.\\\",\\n\\\"function_name\\\": \\\"get_app_info\\\",\\n\\\"input_args\\\": \\\"app_name\\\",\\n\\\"return\\\": \\\"{ 'rating': '4.5', 'review_count': '10203', 'last_update': '2020-11-26', 'size': 'Varies with device', 'installs': '1,000,000+' }\\\",\\n\\\"depend\\\": \\\"requests, re\\\"\\n}\"", "description": "tool development"}
{"input persona": "A talented race car driver who can promote the energy drink brand with their skills and achievements on the track", "synthesized text": "\"{\\n\\\"name\\\": \\\"Social Media Post Generator Interface\\\",\\n\\\"description\\\": \\\"Generates creative and engaging social media posts to promote a brand, using a pre-trained language model.\\\",\\n\\\"function_name\\\": \\\"generate_social_media_posts\\\",\\n\\\"input_args\\\": [\\\"achievement\\\", \\\"brand_name\\\"],\\n\\\"return\\\": \\\"A list of potential social media posts.\\\",\\n\\\"depend\\\": [\\\"Hugging Face's transformer library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A think tank researcher studying the geopolitical implications of the Belt and Road Initiative", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geopolitical Event Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses the GDELT Project's API to identify geopolitical events related to the Belt and Road Initiative by monitoring worldwide news media. The user inputs a date range and a list of countries of interest. The function returns a list of related geopolitical events detected during that period.\\\",\\n\\\"function_name\\\": \\\"get_geopolitical_events\\\",\\n\\\"input_args\\\": {\\n\\\"start_date\\\": \\\"The start date of the period of interest in the format YYYYMMDD\\\",\\n\\\"end_date\\\": \\\"The end date of the period of interest in the format YYYYMMDD\\\",\\n\\\"countries\\\": \\\"A list of countries of interest\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, where each dictionary represents a geopolitical event. Each dictionary includes the title of the news article (the event), the URL of the article, the date the article was seen, and the country of the source of the article.\\\",\\n\\\"depend\\\": \\\"GDELT Project API, requests, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A multilingual South Indian who only watches international news channels like BBC and CNN, and is not so interested in regional news channels.", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Article Translation Interface\\\",\\n\\\"description\\\": \\\"An interface to translate English news articles into other languages using Google Translate API and web scraping.\\\",\\n\\\"function_name\\\": \\\"translate_news_article\\\",\\n\\\"input_args\\\": {\\n    \\\"url\\\": \\\"URL of the news article to be translated\\\",\\n    \\\"target_language\\\": \\\"The language into which the article should be translated. Defaults to Tamil ('ta').\\\"\\n},\\n\\\"return\\\": \\\"The translated text of the news article\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"googletrans\\\", \\\"requests\\\", \\\"bs4\\\"],\\n    \\\"Web APIs\\\": [\\\"Google Translate API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A music executive who recognizes the value of sampling in modern music and advocates for its proper use", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Sampling Legality Check Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check the legality of sampling a specific track by leveraging APIs from music rights databases. Users input the name of the track and the artist, and the interface returns the legality status of sampling that track.\\\",\\n\\\"function_name\\\": \\\"check_sampling_legality\\\",\\n\\\"input_args\\\": [\\\"track_name\\\", \\\"artist_name\\\"],\\n\\\"return\\\": \\\"String indicating the legality status of sampling the input track.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"MusicBrainz API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An entry-level tax consultant new to True Partners Consulting", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tax Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to calculate income tax given a CSV file with income information and a tax year. The calculation is based on the U.S. federal tax system.\\\",\\n\\\"function_name\\\": \\\"calculate_income_tax\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"Path to the CSV file containing income data\\\",\\n    \\\"tax_year\\\": \\\"Year for which to calculate the tax\\\"\\n},\\n\\\"return\\\": \\\"Dataframe with calculated tax data\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, taxcalc\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical scribe responsible for documenting patient information accurately and efficiently", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Medical Records Interface\\\",\\n\\\"description\\\": \\\"This interface uses the FHIR web API to return a summary of a patient's medical records based on their ID.\\\",\\n\\\"function_name\\\": \\\"get_patient_records\\\",\\n\\\"input_args\\\": [\\\"patient_id\\\"],\\n\\\"return\\\": \\\"Patient's details including name, gender, birth date, and any recorded medical conditions.\\\",\\n\\\"depend\\\": [\\\"requests for HTTP requests\\\", \\\"FHIR web API for patient data\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A cybersecurity expert who tests the security measures of online betting platforms", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Password Strength Checker Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from HuggingFace to assess the strength of passwords. Users input a password, and the interface returns a score that indicates the password's strength.\\\",\\n  \\\"function_name\\\": \\\"check_password_strength\\\",\\n  \\\"input_args\\\": {\\n    \\\"password\\\": \\\"A string representing the password to be checked\\\"\\n  },\\n  \\\"return\\\": \\\"A score indicating the strength of the password\\\",\\n  \\\"depend\\\": [\\\"HuggingFace Transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A biotechnologist conducting research on alternative methods to genetically modify crops without the use of transgenic techniques", "synthesized text": "\"{\\n  \\\"name\\\": \\\"CRISPR Gene Editing Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the CRISPR gene editing technique to modify DNA sequences. Users need to input the original DNA sequence, the guide RNA sequence, and the desired modification, and the interface will return the modified DNA sequence.\\\",\\n  \\\"function_name\\\": \\\"crispr_gene_editing\\\",\\n  \\\"input_args\\\": {\\n    \\\"dna_sequence\\\": \\\"The original DNA sequence to be modified.\\\",\\n    \\\"guide_rna\\\": \\\"The guide RNA sequence that targets the specific location in the DNA sequence to be modified.\\\",\\n    \\\"modification\\\": \\\"The DNA sequence that is to replace the targeted DNA sequence.\\\"\\n  },\\n  \\\"return\\\": \\\"The modified DNA sequence.\\\",\\n  \\\"depend\\\": \\\"BioPython\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tech entrepreneur who sees the potential of motorsport as a marketing platform for their products", "synthesized text": "\"{\\n\\\"name\\\": \\\"Motorsport Event Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for details of motorsport events using the Ergast Developer API\\\",\\n\\\"function_name\\\": \\\"get_motorsport_event\\\",\\n\\\"input_args\\\": [\\\"year\\\", \\\"round\\\"],\\n\\\"return\\\": \\\"A list of dictionaries containing the race name, circuit, and date of the motorsport event(s)\\\",\\n\\\"depend\\\": \\\"requests library, Ergast Developer API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a college junior majoring in communication who is dreaming of working in the banking sector", "synthesized text": "\"{\\n\\\"name\\\": \\\"Resume Keyword Matching Interface\\\",\\n\\\"description\\\": \\\"This interface extracts keywords from a job posting and compares them with the resume, returning a list of keywords that are not present in the resume but are in the job posting.\\\",\\n\\\"function_name\\\": \\\"get_missing_keywords\\\",\\n\\\"input_args\\\": [\\\"job_posting_text\\\", \\\"path_to_resume\\\"],\\n\\\"return\\\": \\\"A list of keywords that are present in the job posting but not in the resume.\\\",\\n\\\"depend\\\": \\\"Python's Natural Language Processing library (NLTK), docx2txt library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer scientist specializing in machine learning algorithms to improve variant classification accuracy", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Variant Classification Interface\\\",\\n    \\\"description\\\": \\\"This interface uses a machine learning model to classify genetic variants. Users provide the variant information, and the interface returns the predicted class of the variant.\\\",\\n    \\\"function_name\\\": \\\"classify_variant\\\",\\n    \\\"input_args\\\": {\\n        \\\"variant\\\": \\\"A string representing the genetic variant\\\"\\n    },\\n    \\\"return\\\": \\\"The predicted class of the variant\\\",\\n    \\\"depend\\\": \\\"This function depends on the scikit-learn library for the classifier, the huggingface transformers library for encoding the variant, and a pre-trained classifier model saved as a pickle file.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nurse specialized in trauma care, providing critical medical support during missions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vital Signs Monitor Interface\\\",\\n\\\"description\\\": \\\"An interface that processes data from wearable IoT devices to monitor vital signs in real time. It uses a pre-trained TensorFlow model to predict vital signs such as heart rate and blood pressure.\\\",\\n\\\"function_name\\\": \\\"process_vital_data\\\",\\n\\\"input_args\\\": \\\"data - The input data from the wearable device. It should be a numpy array.\\\",\\n\\\"return\\\": \\\"A dictionary containing the monitored vital signs - heart rate and blood pressure.\\\",\\n\\\"depend\\\": \\\"TensorFlow library, a pre-trained TensorFlow model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A historical site enthusiast living in Kragerø, Norway.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historical Site Finder Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Wikidata Query Service API to find historical sites near a given location. It returns a list of historical site names.\\\",\\n  \\\"function_name\\\": \\\"get_nearby_historical_sites\\\",\\n  \\\"input_args\\\": \\\"location\\\",\\n  \\\"return\\\": \\\"list of historical site names\\\",\\n  \\\"depend\\\": \\\"requests library, Wikidata Query Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Um consultor de TI renomado que orienta o analista de sistemas em sua carreira e o ajuda a avançar em sua área", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface de An\\u00e1lise de C\\u00f3digo\\\",\\n\\\"description\\\": \\\"Uma interface de alto n\\u00edvel que encapsula a API do SonarQube para fornecer an\\u00e1lise de c\\u00f3digo-fonte detalhada.\\\",\\n\\\"function_name\\\": \\\"get_code_analysis\\\",\\n\\\"input_args\\\": {\\n    \\\"source_code_path\\\": \\\"O caminho do arquivo de c\\u00f3digo-fonte a ser analisado.\\\"\\n},\\n\\\"return\\\": \\\"Retorna um objeto json contendo os resultados da an\\u00e1lise de c\\u00f3digo, que podem incluir informa\\u00e7\\u00f5es sobre erros de codifica\\u00e7\\u00e3o, bugs e viola\\u00e7\\u00f5es de regras de codifica\\u00e7\\u00e3o.\\\",\\n\\\"depend\\\": \\\"Esta fun\\u00e7\\u00e3o depende da biblioteca 'requests' do Python e da API do SonarQube.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a journalist learning about Dr. Lisa Kitko's professional journey for writing a feature article", "synthesized text": "\"{\\n\\\"name\\\": \\\"Professional Journey Interface\\\",\\n\\\"description\\\": \\\"Fetches a person's professional history from their LinkedIn profile.\\\",\\n\\\"function_name\\\": \\\"get_linkedin_profile\\\",\\n\\\"input_args\\\": [\\\"linkedin_url\\\"],\\n\\\"return\\\": \\\"A dictionary containing the person's name, current position, location, summary, experiences, and educations.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\", \\\"LinkedIn's Public Data\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A laid-back college dropout and an aspiring musician who's never had any formal interaction with the legal system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Term Explanation Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a string of text and returns explanations of any legal terms found within the text. It utilizes a Named Entity Recognition model from HuggingFace for term extraction and a large language model for term explanation.\\\",\\n\\\"function_name\\\": \\\"extract_and_explain_legal_terms\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"A dictionary where keys are the legal terms found in the text and values are their explanations.\\\",\\n\\\"depend\\\": [\\\"HuggingFace: dslim/bert-base-NER model\\\", \\\"LLM\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An avid gardener whose hobby is creating a peaceful communism with his disciplined lifestyle", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant Disease Identification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to identify plant diseases from leaf images. The user inputs the path to a leaf image file, and the interface returns the identified disease if any.\\\",\\n\\\"function_name\\\": \\\"identify_plant_disease\\\",\\n\\\"input_args\\\": {\\\"path_to_img\\\": \\\"Path to the leaf image file\\\"},\\n\\\"return\\\": {\\\"disease\\\": \\\"Name of the detected disease\\\", \\\"confidence\\\": \\\"Confidence of the prediction\\\"},\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"], \\\"Machine Learning Models\\\": [\\\"TensorFlow Hub plant disease detection model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A local Cheltenham resident who uses hearing aids", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech-to-Text Interface\\\",\\n\\\"description\\\": \\\"This interface takes an audio file and returns its transcribed text. It can be used by individuals with hearing aids who might have difficulty understanding certain audio content.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"transcriptions\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An editor responsible for selecting and enhancing medical illustrations for publication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Illustration Enhancement Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to enhance the resolution of medical illustrations.\\\",\\n\\\"function_name\\\": \\\"enhance_medical_illustration\\\",\\n\\\"input_args\\\": \\\"path_to_img - str: the path to the image file that needs to be enhanced\\\",\\n\\\"return\\\": \\\"numpy.ndarray containing the enhanced image\\\",\\n\\\"depend\\\": \\\"Requires tensorflow and tensorflow_hub libraries, and access to the pre-trained model at 'https://tfhub.dev/captain-pool/esrgan-tf2/1'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lockdown defender who complements the player's offensive skills with their defensive prowess", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Strategy Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the optimal basketball defensive strategy based on the opponent's team and player details.\\\",\\n\\\"function_name\\\": \\\"recommend_defensive_strategy\\\",\\n\\\"input_args\\\": [\\\"opponent_team\\\", \\\"opponent_player\\\"],\\n\\\"return\\\": \\\"Optimal defensive strategy\\\",\\n\\\"depend\\\": [\\\"sklearn.ensemble.RandomForestClassifier\\\", \\\"sklearn.preprocessing.LabelEncoder\\\", \\\"Machine Learning Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hospital administrator recognizing the value of surgical simulation in training and patient safety", "synthesized text": "\"{\\n\\\"name\\\": \\\"Surgical Simulation Score Interface\\\",\\n\\\"description\\\": \\\"This interface takes a video file of a surgical simulation and returns a score indicating the surgical skill level.\\\",\\n\\\"function_name\\\": \\\"assess_surgical_skill\\\",\\n\\\"input_args\\\": [\\\"video_path\\\"],\\n\\\"return\\\": \\\"A floating point number which represents the surgical skill level.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"PIL\\\", \\\"torch\\\", \\\"torchvision\\\", \\\"pytorch_lightning\\\", \\\"transformers\\\"], \\\"machine learning model\\\": \\\"JIGSAWS Surgical Skill4Health from HuggingFace\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A transit authority manager who recognizes the bus driver's contributions and provides guidance for improvement", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bus Route Efficiency Analyzer\\\",\\n  \\\"description\\\": \\\"Analyzes the efficiency of a bus route, comparing actual route data to the optimal route defined by Google Maps Directions API. Returns a comparison to the optimal route and suggestions for improvement.\\\",\\n  \\\"function_name\\\": \\\"calculate_route_efficiency\\\",\\n  \\\"input_args\\\": {\\n    \\\"start_point\\\": \\\"The start point of the bus route, as a string in the format 'latitude,longitude'\\\",\\n    \\\"end_point\\\": \\\"The end point of the bus route, as a string in the format 'latitude,longitude'\\\",\\n    \\\"actual_route\\\": \\\"The actual route the bus took, as a list of strings in the format 'latitude,longitude'\\\"\\n  },\\n  \\\"return\\\": \\\"A float representing the efficiency of the actual route compared to the optimal route, where 1.0 is perfectly efficient and less than 1.0 indicates inefficiency.\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"geopy\\\", \\\"Google Maps Directions API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A computer science enthusiast who uses programming to simulate electromagnetism phenomena", "synthesized text": "\"{\\n\\\"name\\\": \\\"Electromagnetic Field Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface uses scipy and numpy libraries to simulate the electromagnetic field. The user only needs to input the electric charge and position, and our interface will return the electromagnetic field.\\\",\\n\\\"function_name\\\": \\\"calculate_electric_field\\\",\\n\\\"input_args\\\": {\\n    \\\"charge\\\": \\\"The electric charge in coulombs.\\\",\\n    \\\"position\\\": \\\"The position of the point where the field is calculated, relative to the position of the charge (i.e., r - r').\\\"\\n},\\n\\\"return\\\": \\\"The electric field vector at the position relative to the charge.\\\",\\n\\\"depend\\\": \\\"Uses numpy and scipy libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent of one of the other competitors from the Thor British Youth Nationals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface returns the weather forecast for the next 5 days in a given city.\\\",\\n\\\"function_name\\\": \\\"get_5_day_forecast\\\",\\n\\\"input_args\\\": \\\"city - the name of the city where the event will be held\\\",\\n\\\"return\\\": \\\"A dictionary with the date as the key and another dictionary as the value. The inner dictionary contains the temperature and weather description for that day.\\\",\\n\\\"depend\\\": \\\"This function depends on the OpenWeatherMap API and the requests library in Python.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced travel photographer who has explored numerous aristocratic estates across the world", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historic Estates Information Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Wikidata SPARQL API to retrieve information about historic estates from around the world. It provides a brief summary of the estate, including its location, the period during which it was built, and any notable people associated with it.\\\",\\n  \\\"function_name\\\": \\\"get_estate_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"estate_name\\\": \\\"String - The name of the estate.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"estate_info\\\": \\\"Dictionary - A brief summary of the estate.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"Wikidata SPARQL API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A homeowner who is looking to replace their old roof and seeks the expertise of the roofing contractor", "synthesized text": "\"{\\n\\\"name\\\": \\\"Roof Material Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends the best roofing material based on factors such as climate, budget, and house style.\\\",\\n\\\"function_name\\\": \\\"recommend_roofing_material\\\",\\n\\\"input_args\\\": {\\\"climate\\\": \\\"string\\\", \\\"budget\\\": \\\"int\\\", \\\"house_style\\\": \\\"string\\\", \\\"path_to_model\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"material\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"sklearn.ensemble\\\"], \\\"machine learning models\\\": [\\\"RandomForestClassifier model trained on roofing data\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A geophysicist who focuses on the study of Earth's magnetic field and its relationship to plate tectonics", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Plate Tectonics Visualization Interface\\\",\\n  \\\"description\\\": \\\"An interface to visualize the Earth's magnetic field data on a world map. The magnetic field data is color-coded to reflect the strength of the magnetic field.\\\",\\n  \\\"function_name\\\": \\\"visualize_magnetic_field\\\",\\n  \\\"input_args\\\": {\\n    \\\"file\\\": \\\"A file that contains the Earth's magnetic field data. The file should have three columns: longitude, latitude, and magnetic field strength.\\\"\\n  },\\n  \\\"return\\\": \\\"A visualization of the Earth's magnetic field data on a world map.\\\",\\n  \\\"depend\\\": \\\"Python libraries: Matplotlib, Cartopy, and numpy.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Sam is a travel blogger who enjoys painting and photography, and is always seems to be planning their next adventure.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trip Planning Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from Skyscanner, Booking.com, and Google Places to plan a trip. It returns the best flight options, recommended accommodations, and suggested points of interest based on the user's current location, destination, and travel dates.\\\",\\n\\\"function_name\\\": \\\"plan_trip\\\",\\n\\\"input_args\\\": {\\n    \\\"source_location\\\": \\\"User's current location\\\",\\n    \\\"destination_location\\\": \\\"User's travel destination\\\",\\n    \\\"travel_dates\\\": \\\"User's travel dates\\\"\\n},\\n\\\"return\\\": {\\n    \\\"flights\\\": \\\"Best flight options from Skyscanner\\\",\\n    \\\"accommodations\\\": \\\"Recommended accommodations from Booking.com\\\",\\n    \\\"points_of_interest\\\": \\\"Suggested points of interest from Google Places\\\"\\n},\\n\\\"depend\\\": \\\"Python's requests library, Skyscanner API, Booking.com API, and Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a long-time opponent of nuclear energy due to environmental and safety concerns.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nuclear Power Plants Risk Level Interface\\\",\\n\\\"description\\\": \\\"This function returns the risk level of a given nuclear power plant based on data from the World Nuclear Association and other reliable sources.\\\",\\n\\\"function_name\\\": \\\"get_nuclear_plant_risk_level\\\",\\n\\\"input_args\\\": \\\"plant_name - The name of the nuclear power plant\\\",\\n\\\"return\\\": \\\"Risk level of the given nuclear power plant, or a message if no data is available for this plant\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup4\\\"\\n}\"", "description": "tool development"}
{"input persona": "A competitive skater with a strong technical skill-set, yet lacking in artistic interpretation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Figure Skating Music Tempo Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes in the path to an audio file and returns the estimated tempo of the music in beats per minute. This can help figure skaters improve their artistic interpretation of their program's music.\\\",\\n\\\"function_name\\\": \\\"analyze_tempo\\\",\\n\\\"input_args\\\": [\\\"audio_path\\\"],\\n\\\"return\\\": \\\"Estimated tempo of the music in beats per minute.\\\",\\n\\\"depend\\\": \\\"Python library: librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "A farmer whose land is being taken over for a large-scale industrial project", "synthesized text": "\"{\\n\\\"name\\\": \\\"Land Quality Assessment Interface\\\",\\n\\\"description\\\": \\\"Predicts the quality of the land based on various features\\\",\\n\\\"function_name\\\": \\\"predict_land_quality\\\",\\n\\\"input_args\\\": \\\"data_csv_file\\\",\\n\\\"return\\\": \\\"Mean predicted land quality rating\\\",\\n\\\"depend\\\": \\\"Scikit-learn library, a trained RandomForestRegressor model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A construction worker who balances the dreams of their children with budget constraints", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Budget-Friendly Toy Recommender Interface\\\",\\n  \\\"description\\\": \\\"An interface that returns a list of toys that fit within a specified budget by leveraging the Amazon Product Advertising API.\\\",\\n  \\\"function_name\\\": \\\"get_budget_friendly_toys\\\",\\n  \\\"input_args\\\": \\\"budget - The maximum price for the toys in cents.\\\",\\n  \\\"return\\\": \\\"A list of toy names that fit within the specified budget.\\\",\\n  \\\"depend\\\": \\\"Amazon Product Advertising API, Python Libraries: bottlenose, xml.etree.ElementTree\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renewable energy expert providing guidance on integrating green energy sources into public transportation systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Green Energy Source Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to compare different types of renewable energy sources by inputting their desired energy source. The function will then return a comparison of the performance, cost, and environmental impact of the desired energy source versus other renewable sources.\\\",\\n\\\"function_name\\\": \\\"get_energy_source_comparison\\\",\\n\\\"input_args\\\": {\\\"desired_energy_source\\\": \\\"The type of renewable energy source you want to compare. Options include 'solar', 'wind', 'geothermal', etc.\\\"},\\n\\\"return\\\": \\\"A json object which contains data comparing the performance, cost, and environmental impact of the desired energy source against other renewable sources.\\\",\\n\\\"depend\\\": \\\"This function depends on the NREL API and the 'requests' Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gifted young metal guitarist looking for ways to expand his musical repertoire", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chord Progression Generator Interface\\\",\\n\\\"description\\\": \\\"This interface takes a musical key as input and generates a random four-chord progression in that key.\\\",\\n\\\"function_name\\\": \\\"generate_chord_progression\\\",\\n\\\"input_args\\\": {\\n    \\\"key\\\": \\\"The key in which to generate the chord progression. This should be a string representing a musical key, such as 'C', 'G', 'D', etc.\\\"\\n},\\n\\\"return\\\": \\\"A list of four strings, each representing a chord in the generated progression.\\\",\\n\\\"depend\\\": \\\"Python music21 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Hollywood reporter who believes that Western cinema is superior and more influential", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Similarity Interface\\\", \\n\\\"description\\\": \\\"This interface takes as input the names of two movies, and returns a similarity score based on their plot summaries. It uses a pre-trained BERT model from Hugging Face's transformers library to compute semantic similarity.\\\", \\n\\\"function_name\\\": \\\"compute_similarity\\\", \\n\\\"input_args\\\": [\\\"movie_name_1\\\", \\\"movie_name_2\\\"], \\n\\\"return\\\": \\\"A float representing the cosine similarity between the plot summaries of the two movies. A higher value indicates greater similarity.\\\", \\n\\\"depend\\\": [\\\"Hugging Face's transformers library (BERT model)\\\", \\\"LLM for movie summary retrieval\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a newbie to the MacOS and Dropbox", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dropbox File Upload Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of uploading a file to Dropbox. The user just needs to provide the local file path, the Dropbox file path, and their Dropbox API access token.\\\",\\n\\\"function_name\\\": \\\"upload_file_to_dropbox\\\",\\n\\\"input_args\\\": [\\\"local_file_path\\\", \\\"dropbox_file_path\\\", \\\"access_token\\\"],\\n\\\"return\\\": \\\"A success message indicating the file has been uploaded, or an error message in case of failure.\\\",\\n\\\"depend\\\": [\\\"dropbox\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An elderly collector of vintage dolls who shares stories about the history and origins of the Raggedy Ann collection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Antique Doll Information Interface\\\",\\n\\\"description\\\": \\\"An interface that scrapes information about antique dolls from an online resource. It returns the history and origins of the input doll.\\\",\\n\\\"function_name\\\": \\\"get_doll_information\\\",\\n\\\"input_args\\\": \\\"doll_name - The name of the antique doll\\\",\\n\\\"return\\\": \\\"A string containing the history and origins of the doll, or a message indicating no information was found.\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A student learning Linux kernel development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Linux Kernel Information Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve information about the Linux kernel running on the system. No input is required from the user.\\\",\\n\\\"function_name\\\": \\\"get_linux_kernel_info\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": {\\n    \\\"Kernel Name\\\": \\\"string\\\",\\n    \\\"Kernel Release\\\": \\\"string\\\",\\n    \\\"Kernel Version\\\": \\\"string\\\",\\n    \\\"Machine Hardware Name\\\": \\\"string\\\",\\n    \\\"Processor Type\\\": \\\"string\\\",\\n    \\\"Operating System\\\": \\\"string\\\"\\n},\\n\\\"depend\\\": \\\"Python's os and platform libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow Bengals fan who always brings delicious homemade chili to pre-game meetups", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-Time Football Game Update Interface\\\",\\n\\\"description\\\": \\\"Interface to provide real-time updates of a football game by team name\\\",\\n\\\"function_name\\\": \\\"get_football_game_update\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"Game details including the home team, away team, home score, away score, current quarter, and time remaining\\\",\\n\\\"depend\\\": \\\"sportsdata.io API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diplomat responsible for negotiating land acquisition agreements on behalf of their country", "synthesized text": "\"{\\n\\\"name\\\": \\\"Land Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface provides the user with prices of nearby lands for comparison. It is useful for diplomats in negotiating land acquisition agreements.\\\",\\n\\\"function_name\\\": \\\"get_nearby_land_prices\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"area\\\"],\\n\\\"return\\\": \\\"A list of prices of nearby lands of the same area\\\",\\n\\\"depend\\\": \\\"Zillow Web Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful patent attorney who attributes their career success to the law professor's mentorship and guidance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patent Analytics Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch details of a patent using its id from the PatentsView API\\\",\\n\\\"function_name\\\": \\\"get_patent_details\\\",\\n\\\"input_args\\\": \\\"patent_id - The id of the patent\\\",\\n\\\"return\\\": \\\"A dictionary of the patent's details including title, abstract, and filing date\\\",\\n\\\"depend\\\": \\\"PatentsView API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Bollywood actor who seeks the coach's guidance to maintain a balanced lifestyle and improve their overall well-being", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health and Fitness Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a trained model to recommend a diet and exercise regimen based on user's age, gender, weight, height, and daily activity level.\\\",\\n\\\"function_name\\\": \\\"get_health_recommendations\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"gender\\\", \\\"weight\\\", \\\"height\\\", \\\"activity_level\\\"],\\n\\\"return\\\": [\\\"daily_caloric_intake\\\", \\\"exercise_regimen\\\"],\\n\\\"depend\\\": [\\\"tensorflow\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A native community member who shares traditional knowledge and folklore related to volcanic activity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Volcano Eruption Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the USGS Earthquake Hazards Program API to get recent earthquake data, which can be an indication of potential volcanic activity. The interface takes as input the coordinates of the volcano, and returns the recent seismic activity in the area.\\\",\\n\\\"function_name\\\": \\\"get_recent_earthquakes_near_volcano\\\",\\n\\\"input_args\\\": {\\n    \\\"lat\\\": \\\"Latitude of the volcano\\\",\\n    \\\"lon\\\": \\\"Longitude of the volcano\\\"\\n},\\n\\\"return\\\": \\\"List of recent earthquakes within 20 kilometers of the volcano\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"requests\\\", \\\"pandas\\\"], \\\"web_APIs\\\": [\\\"USGS Earthquake Hazards Program API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A policy maker responsible for implementing regulations to reduce greenhouse gas emissions in the agricultural sector", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Carbon Footprint Calculation Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the Cool Farm Tool API to calculate the carbon footprint of agricultural activities based on specific farm data.\\\",\\n  \\\"function_name\\\": \\\"calculate_carbon_footprint\\\",\\n  \\\"input_args\\\": {\\\"farm_data\\\": \\\"A dictionary containing information about the farm such as the type of crops, the area of the farm, the type of soil, the type of fertilizers used, etc.\\\"},\\n  \\\"return\\\": \\\"The estimated carbon footprint of the farm or an error message.\\\",\\n  \\\"depend\\\": {\\\"source\\\": \\\"Cool Farm Tool API\\\", \\\"libraries\\\": [\\\"requests\\\", \\\"json\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A head of state who prioritizes economic diplomacy and seeks to strengthen global trade partnerships", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Trade Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that fetches and analyzes trade data from the World Bank's API. It identifies a country's top exported goods and main trade partners which can be useful for economic diplomacy and global trade partnership strengthening.\\\",\\n  \\\"function_name\\\": \\\"analyze_trade_data\\\",\\n  \\\"input_args\\\": [\\\"country\\\"],\\n  \\\"return\\\": \\\"A report containing the top five goods exported by the country, top five import partners, and top five export partners.\\\",\\n  \\\"depend\\\": [\\\"World Bank's API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a British equipment engineer working in manufacturing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Equipment Failure Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the time to failure of a piece of equipment based on historical sensor data.\\\",\\n\\\"function_name\\\": \\\"predict_equipment_failure\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_csv\\\": \\\"The path to a CSV file containing the sensor data.\\\"\\n},\\n\\\"return\\\": \\\"The predicted time to failure of the equipment.\\\",\\n\\\"depend\\\": \\\"Pandas, Sklearn, TensorFlow, HuggingFace Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An agricultural cooperative seeking technological solutions to improve resource efficiency and reduce environmental impact", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crop Health Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to input the path to an image file of plant leaves, and returns the health status and possible disease of the crop.\\\",\\n\\\"function_name\\\": \\\"analyze_crop_health\\\",\\n\\\"input_args\\\": [\\\"path_to_image\\\"],\\n\\\"return\\\": \\\"An integer representing the disease category\\\",\\n\\\"depend\\\": [\\\"TensorFlow\\\", \\\"TensorFlow Hub\\\", \\\"PlantVillage dataset\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a loyal customer who is a big fan of British period dramas and Robin Hood.", "synthesized text": "\"{\\n\\\"name\\\": \\\"British TV Show Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the TMDB API to fetch a list of British period dramas, and then uses Hugging Face's BERT model to recommend shows based on the user's favorite show.\\\",\\n\\\"function_name\\\": \\\"recommend_british_period_dramas\\\",\\n\\\"input_args\\\": [\\\"favorite_show\\\"],\\n\\\"return\\\": \\\"A list of recommended British period dramas.\\\",\\n\\\"depend\\\": [\\\"TMDB API\\\", \\\"Hugging Face's BERT\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A puzzle book publisher seeking unique and engaging sudoku designs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sudoku Puzzle Generator\\\",\\n\\\"description\\\": \\\"This interface generates a unique Sudoku puzzle based on the specified difficulty level. The difficulty levels are 1 for easy, 2 for medium, and 3 for hard.\\\",\\n\\\"function_name\\\": \\\"sudoku_generator\\\",\\n\\\"input_args\\\": [\\\"difficulty\\\"],\\n\\\"return\\\": \\\"A list of lists representing a Sudoku puzzle. Zeros represent empty spaces.\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"random\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A long-time friend of Florence “Cobbie” Cobb and a loyal supporter of the Girl Guides.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Girl Guides Badge Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface for tracking the badges earned by Girl Guides. It updates the information in a CSV file.\\\",\\n\\\"function_name\\\": [\\\"add_badge\\\", \\\"get_badges\\\"],\\n\\\"input_args\\\": [\\\"name\\\", \\\"badge\\\"],\\n\\\"return\\\": \\\"For add_badge: No return value. For get_badges: Return a list of badges earned by the given Girl Guide.\\\",\\n\\\"depend\\\": \\\"Python's csv library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A web design and development company collaborating on creating seamless digital experiences for clients", "synthesized text": "\"{\\n\\\"name\\\": \\\"Web Page Speed Test Interface\\\",\\n\\\"description\\\": \\\"An interface to measure the performance of a webpage. It uses Google's PageSpeed Insights API to provide insights on page performance, such as speed score, first contentful paint, speed index, and more.\\\",\\n\\\"function_name\\\": \\\"get_page_speed\\\",\\n\\\"input_args\\\": \\\"{url: 'https://example.com'}\\\",\\n\\\"return\\\": \\\"{'Speed Score': 0.99, 'First Contentful Paint': '0.7 s', 'Speed Index': '1.1 s', 'Time to Interactive': '0.7 s', 'First Meaningful Paint': '0.7 s', 'First CPU Idle': '0.7 s'}\\\",\\n\\\"depend\\\": \\\"Google's PageSpeed Insights API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A highly-motivated individual who is transitioning careers and sees HVAC as a growing field", "synthesized text": "\"{\\n\\\"name\\\": \\\"HVAC Equipment Efficiency Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface to compare the efficiencies of two HVAC equipments given their model numbers. The efficiency data is fetched from the AHRI API.\\\",\\n\\\"function_name\\\": \\\"compare_hvac_efficiency\\\",\\n\\\"input_args\\\": [\\\"model1\\\", \\\"model2\\\"],\\n\\\"return\\\": \\\"A dictionary with efficiencies of the two models.\\\",\\n\\\"depend\\\": [\\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired IT professional seeking advice on securing their home network and devices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Network Security Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface uses a Python-based network scanner to assess the security of a home network. It identifies open ports and associated services on each device in the network which could potentially be vulnerable to attacks.\\\",\\n\\\"function_name\\\": \\\"assess_network_security\\\",\\n\\\"input_args\\\": \\\"ip_range - the IP range of the home network\\\",\\n\\\"return\\\": \\\"A dictionary with each device's IP address as the key, and a list of open ports and associated services as the value.\\\",\\n\\\"depend\\\": \\\"Python library: nmap\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chemist and researcher studying the effects of fluoride on human health", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fluoride Level Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Chemistry Development Kit (CDK) library in Python to analyze the chemical structure of a compound and calculate the level of fluoride. The user only needs to input the SMILES (Simplified Molecular Input Line Entry System) notation of a compound, and the interface will return the level of fluoride in the compound.\\\",\\n\\\"function_name\\\": \\\"calculate_fluoride_level\\\",\\n\\\"input_args\\\": {\\\"smiles_notation\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"float (fluoride_level)\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"rdkit\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A payroll specialist responsible for accurately processing employee compensation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Employee Payroll Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the net pay for each employee after deductions such as tax, pension, and insurance from a CSV file containing the necessary employee data.\\\",\\n\\\"function_name\\\": \\\"calculate_employee_net_pay\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A DataFrame showing each employee's net pay after deductions.\\\",\\n\\\"depend\\\": \\\"pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A risk management consultant who provides advice on potential operational and market risks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Risk Scoring Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict risk scores for given instances based on various factors. The input should be a pandas DataFrame with necessary factors and the output will be a series of risk scores for each instance.\\\",\\n\\\"function_name\\\": \\\"predict_risk_score\\\",\\n\\\"input_args\\\": \\\"data: pd.DataFrame\\\",\\n\\\"return\\\": \\\"Predicted risk scores for each instance in the DataFrame\\\",\\n\\\"depend\\\": \\\"Python library: PyCaret\\\"\\n}\"", "description": "tool development"}
{"input persona": "A die-hard fan of Kiefer Sutherland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the TMDB API to find TV shows where a specific actor has featured\\\",\\n\\\"function_name\\\": \\\"get_tv_shows\\\",\\n\\\"input_args\\\": {\\\"actor_name\\\": \\\"Name of the actor\\\"},\\n\\\"return\\\": \\\"A list of TV shows the actor has starred in\\\",\\n\\\"depend\\\": \\\"TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mechanical engineering undergraduate conducting research on the fatigue behavior of fasteners under varying loading conditions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Fastener Fatigue Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the FEniCS Project to simulate different loading conditions and analyze the fatigue behavior of fasteners. The user inputs the dimensions of the fastener, the material properties, and the loading conditions, and the interface returns the fatigue life of the fastener.\\\",\\n  \\\"function_name\\\": \\\"get_fatigue_life\\\",\\n  \\\"input_args\\\": {\\n    \\\"mesh_size\\\": \\\"The size of the mesh for the FEniCS simulation.\\\",\\n    \\\"youngs_modulus\\\": \\\"The Young's Modulus of the material.\\\",\\n    \\\"poissons_ratio\\\": \\\"The Poisson's Ratio of the material.\\\",\\n    \\\"load\\\": \\\"The load applied to the fastener.\\\",\\n    \\\"cycles\\\": \\\"The number of loading cycles.\\\"\\n  },\\n  \\\"return\\\": \\\"The fatigue life of the fastener.\\\",\\n  \\\"depend\\\": \\\"FEniCS Project, an open-source platform for solving partial differential equations.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Sports Columnist who is a fan of the Northern Mystics.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Netball Match Stats Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches the latest match statistics of the Northern Mystics netball team from a netball statistics website\\\",\\n  \\\"function_name\\\": \\\"get_latest_match_stats\\\",\\n  \\\"input_args\\\": \\\"None\\\",\\n  \\\"return\\\": \\\"A dictionary with each key-value pair representing a type of statistic and its corresponding value from the latest match\\\",\\n  \\\"depend\\\": \\\"requests, BeautifulSoup (Python Libraries)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A shelter coordinator working to provide safe housing options for families fleeing domestic violence", "synthesized text": "\"{\\n\\\"name\\\": \\\"Safe Housing Options Interface\\\",\\n\\\"description\\\": \\\"An interface that returns nearby safe housing options for families fleeing domestic violence, based on the user's current location.\\\",\\n\\\"function_name\\\": \\\"get_safe_housing_options\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"a list of nearby safe housing options\\\",\\n\\\"depend\\\": \\\"Family Shelter Service API or similar\\\"\\n}\"", "description": "tool development"}
{"input persona": "An envious guy who always wanted to play American football but never had the opportunity.", "synthesized text": "\"{\\n\\\"name\\\": \\\"American Football Player Position Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input a user's physical attributes and skill preferences to recommend the most suitable position for them in American football.\\\",\\n\\\"function_name\\\": \\\"recommend_football_position\\\",\\n\\\"input_args\\\": {\\n    \\\"height\\\": \\\"The height of the user in inches\\\",\\n    \\\"weight\\\": \\\"The weight of the user in pounds\\\",\\n    \\\"speed\\\": \\\"The speed of the user in seconds over 40 yards\\\",\\n    \\\"skill_preference\\\": \\\"The user's preferred skill (e.g., 'throwing', 'catching', 'tackling')\\\"\\n},\\n\\\"return\\\": \\\"The recommended position for the user in American football (e.g., 'Quarterback', 'Wide Receiver', 'Linebacker')\\\",\\n\\\"depend\\\": \\\"A pre-trained machine learning model stored in a pickle file ('trained_model.pkl'), the sklearn and pandas Python libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow rookie officer who is more relaxed about bending the rules for the sake of justice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voice-to-Text Transcription Interface\\\",\\n\\\"description\\\": \\\"Transcribe spoken language into written text from an audio file.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"array of transcribed text\\\",\\n\\\"depend\\\": \\\"Google Speech-to-Text API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged entrepreneur from Xi'an, Shaanxi, interested in infrastructure development and its impact on regional economic growth.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Infrastructure Development Impact Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the economic growth based on the infrastructure development level, GDP, unemployment rate, and population. The model is trained on historical data.\\\", \\n\\\"function_name\\\": \\\"predict_economic_growth\\\", \\n\\\"input_args\\\": {\\n    \\\"infrastructure_level\\\": \\\"The level of infrastructure development in the region\\\",\\n    \\\"gdp\\\": \\\"The GDP of the region\\\",\\n    \\\"unemployment_rate\\\": \\\"The unemployment rate of the region\\\",\\n    \\\"population\\\": \\\"The population of the region\\\"\\n}, \\n\\\"return\\\": \\\"The predicted economic growth of the region\\\", \\n\\\"depend\\\": \\\"Pre-trained machine learning model (Gradient Boosting Regressor from scikit-learn), joblib\\\"\\n}\"", "description": "tool development"}
{"input persona": "An economics major who argues that the gender pay gap is primarily due to systemic discrimination", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gender Pay Gap Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches wage data from the U.S. Bureau of Labor Statistics and calculates the gender pay gap for a given occupation.\\\",\\n\\\"function_name\\\": \\\"get_gender_pay_gap\\\",\\n\\\"input_args\\\": \\\"occupation - a string that represents the name of the occupation\\\",\\n\\\"return\\\": \\\"A string that represents the gender pay gap for the given occupation\\\",\\n\\\"depend\\\": \\\"Web API: U.S. Bureau of Labor Statistics\\\"\\n}\"", "description": "tool development"}
{"input persona": "En karaktär som är en älskare av akvariefiskar och har en speciell förkärlek för ovanliga arter.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fish Species Information Interface\\\",\\n\\\"description\\\": \\\"This interface returns information about a specific fish species when provided with the name of the species. It uses the Fishbase API to gather this information.\\\",\\n\\\"function_name\\\": \\\"get_fish_info\\\",\\n\\\"input_args\\\": \\\"species_name - a string that represents the name of the fish species\\\",\\n\\\"return\\\": \\\"A dictionary containing various information about the fish species (Species, Genus, Family, Order, Class, Max Length, Common Names, Distribution, Environment, Climate, Dangerous) or an error message if the species is not found or if there is a problem retrieving the data.\\\",\\n\\\"depend\\\": \\\"requests library, Fishbase API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chemistry major working on a thesis about organic solar cells", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Cell Efficiency Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the maximum theoretical efficiency of a solar cell using the Shockley-Queisser limit. The user inputs the band gap energy of the material in Joules, and the function returns the efficiency as a fraction.\\\",\\n\\\"function_name\\\": \\\"calculate_shockley_queisser_limit\\\",\\n\\\"input_args\\\": \\\"Eg\\\",\\n\\\"return\\\": \\\"Efficiency of solar cell\\\",\\n\\\"depend\\\": \\\"Scipy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A filmmaker working on a documentary about a little-known legal case in the early 19th century", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Case Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve detailed information about a legal case using the CourtListener API. Users input the case name or citation, and the interface returns the case name, date filed, court, participants, and summary.\\\",\\n\\\"function_name\\\": \\\"get_case_information\\\",\\n\\\"input_args\\\": \\\"case_name_or_citation - The name or citation of the legal case\\\",\\n\\\"return\\\": \\\"A dictionary containing the case name, date filed, court, participants, and summary. Returns a message if the case information could not be retrieved or found.\\\",\\n\\\"depend\\\": \\\"requests, CourtListener API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A peer who values offline experiences and encourages the teenager to explore other interests", "synthesized text": "\"{\\n\\\"name\\\": \\\"Screen Time Limit Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to set a limit on the amount of time they spend on a specific application. After the set limit is reached, the specified application will be automatically closed.\\\",\\n\\\"function_name\\\": \\\"limit_screen_time\\\",\\n\\\"input_args\\\": {\\n    \\\"application_name\\\": \\\"Name of the application to limit screen time on\\\",\\n    \\\"hours\\\": \\\"Number of hours after which the application should be closed\\\"\\n},\\n\\\"return\\\": \\\"None, but the specified application will be closed after the set number of hours.\\\",\\n\\\"depend\\\": \\\"Python libraries: schedule, time, pyautogui\\\"\\n}\"", "description": "tool development"}
{"input persona": "Un professeur d'université spécialiste en études de genre et en histoire féministe.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface de recherche d'articles acad\\u00e9miques\\\",\\n\\\"description\\\": \\\"Permet \\u00e0 un utilisateur d'entrer une requ\\u00eate de recherche et retourne les identifiants des articles pertinents dans la base de donn\\u00e9es PubMed\\\",\\n\\\"function_name\\\": \\\"search_pubmed_articles\\\",\\n\\\"input_args\\\": [\\\"query\\\"],\\n\\\"return\\\": \\\"Liste des identifiants des articles pertinents\\\",\\n\\\"depend\\\": \\\"requests, xml.etree\\\"\\n}\"", "description": "tool development"}
{"input persona": "A climate policy analyst seeking guidance on understanding the relationship between extreme weather events and climate change", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Climate Trend Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that analyzes the trend in extreme weather events and climate change indicators over time, and calculates the correlation between them.\\\",\\n  \\\"function_name\\\": \\\"analyze_trends\\\",\\n  \\\"input_args\\\": {\\n    \\\"weather_file\\\": \\\"Path to CSV file containing historical weather data, with each row representing a year and a column for 'Year' and 'ExtremeWeatherEvents'\\\",\\n    \\\"climate_file\\\": \\\"Path to CSV file containing climate change indicators for the same time period, with each row representing a year and columns for 'Year' and 'ClimateChangeIndicator'\\\"\\n  },\\n  \\\"return\\\": \\\"A plot showing the trend in extreme weather events and climate change indicators over time, as well as the correlation between them\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas\\\", \\\"matplotlib\\\", \\\"scipy\\\"],\\n    \\\"data\\\": [\\\"CSV files with historical weather data and climate change indicators\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a proud resident of Seine Normandie Agglomération", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Information Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch and display the latest air quality data for a specific city using OpenAQ API.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": [\\\"city\\\"],\\n\\\"return\\\": \\\"List of dictionaries containing date, parameter measured, value of measurement, and unit\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"OpenAQ API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A submarine pilot who assists in deep-sea exploration and data collection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Deep Sea Temperature Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the temperature at a specific depth in the ocean for a given date. Useful for deep sea explorers and submarine pilots.\\\",\\n\\\"function_name\\\": \\\"predict_temperature\\\",\\n\\\"input_args\\\": [\\\"depth\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"Predicted temperature at the given depth and date.\\\",\\n\\\"depend\\\": \\\"NOAA Ocean Temperature API, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "a millennial Mexican who works as a business consultant", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface takes the amount, source currency, and target currency as input and returns the converted amount in the target currency. It leverages an exchange rate API to get the conversion rate.\\\",\\n\\\"function_name\\\": \\\"convert_currency\\\",\\n\\\"input_args\\\": {\\n    \\\"amount\\\": \\\"The amount of money that needs to be converted\\\",\\n    \\\"from_currency\\\": \\\"The source currency code (e.g., 'USD')\\\",\\n    \\\"to_currency\\\": \\\"The target currency code (e.g., 'MXN')\\\"\\n},\\n\\\"return\\\": \\\"The converted amount in the target currency or an error message if the conversion cannot be made.\\\",\\n\\\"depend\\\": \\\"requests library, exchangerate-api\\\"\\n}\"", "description": "tool development"}
{"input persona": "An SAF veteran who served before the establishment of PERSCOM", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Document Conversion Interface\\\",\\n    \\\"description\\\": \\\"Converts different types of documents (xlsx, txt, json) into a CSV file.\\\",\\n    \\\"function_name\\\": \\\"document_to_csv\\\",\\n    \\\"input_args\\\": \\\"path_to_document\\\",\\n    \\\"return\\\": \\\"A CSV version of the input document\\\",\\n    \\\"depend\\\": \\\"Pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A freshman cheerleader determined to prove herself and make a positive impression", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cheerleader Dance Moves Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze dance moves of a cheerleader using Pose Estimation models from TensorFlow Hub or OpenPose. It takes a path to a video file as input and returns the key points of the body movements throughout the video.\\\",\\n\\\"function_name\\\": \\\"analyze_dance_moves\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"A list of numpy arrays representing the key points of the body movements in each frame of the video.\\\",\\n\\\"depend\\\": \\\"Python libraries: cv2, numpy, tensorflow_hub; Machine learning model: MoveNet SinglePose Lightning from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wealthy homeowner interested in minimizing his carbon footprint without compromising on style", "synthesized text": "\"{\\n\\\"name\\\": \\\"Energy Efficiency Rating Interface\\\",\\n\\\"description\\\": \\\"Predicts the energy efficiency of a house design based on its parameters.\\\",\\n\\\"function_name\\\": \\\"energy_efficiency_rating\\\",\\n\\\"input_args\\\": [\\\"surface_area\\\", \\\"wall_area\\\", \\\"roof_area\\\", \\\"overall_height\\\", \\\"orientation\\\", \\\"glazing_area\\\", \\\"glazing_area_distribution\\\"],\\n\\\"return\\\": \\\"Predicted energy efficiency rating\\\",\\n\\\"depend\\\": [\\\"sklearn.ensemble.RandomForestRegressor\\\", \\\"pandas\\\", \\\"energy_efficiency_model.pkl\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A philosophy professor who believes that religious education should exclusively focus on theological teachings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verses Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search for specific verses from the Bible. Users input the book, chapter, and verse(s) they want to find, and our interface will return the text of the inputted verse(s).\\\",\\n\\\"function_name\\\": \\\"get_bible_verses\\\",\\n\\\"input_args\\\": {\\n    \\\"book\\\": \\\"the name of the book in the Bible\\\",\\n    \\\"chapter\\\": \\\"the chapter number\\\",\\n    \\\"verse\\\": \\\"the verse number(s)\\\"\\n},\\n\\\"return\\\": \\\"the text of the inputted verse(s)\\\",\\n\\\"depend\\\": \\\"requests, bs4\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aspiring doctor who handles the medical check-ups for her father's fighters and regards her father as her inspiration", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blood Pressure Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a RandomForestRegressor model to predict the risk of hypertension based on a patient's age, sex, body mass index (BMI), and daily sodium intake.\\\",\\n\\\"function_name\\\": \\\"predict_blood_pressure\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"sex\\\", \\\"bmi\\\", \\\"sodium_intake\\\"],\\n\\\"return\\\": \\\"Predicted blood pressure level.\\\",\\n\\\"depend\\\": \\\"Scikit-Learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a comedy connoisseur carefully scrutinizing every detail of his favorite shows' DVD releases", "synthesized text": "\"{\\n  \\\"name\\\": \\\"DVD Metadata Extraction Interface\\\",\\n  \\\"description\\\": \\\"An interface to extract metadata from DVD files using pymediainfo\\\",\\n  \\\"function_name\\\": \\\"extract_dvd_metadata\\\",\\n  \\\"input_args\\\": \\\"dvd_file_path\\\",\\n  \\\"return\\\": \\\"A dictionary of DVD metadata\\\",\\n  \\\"depend\\\": \\\"pymediainfo Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a journal editor who is unnecessarily obsessed with the \"inverted pyramid\" structure.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inverted Pyramid Structure Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained language model to evaluate the relevance of each sentence in a text to the main topic, serving as a proxy for whether the text follows the 'inverted pyramid' structure.\\\",\\n\\\"function_name\\\": \\\"inverted_pyramid_score\\\",\\n\\\"input_args\\\": \\\"text: A string of text that is to be evaluated.\\\",\\n\\\"return\\\": \\\"A list of scores, each representing the relevance of a sentence in the text to the main topic.\\\",\\n\\\"depend\\\": {\\\"python library\\\": [\\\"nltk\\\", \\\"transformers\\\"], \\\"machine learning model\\\": [\\\"bert-base-uncased\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A site administrator who manages and implements security protocols for the wiki platform", "synthesized text": "\"{\\n  \\\"name\\\": \\\"IP Blocking Interface\\\",\\n  \\\"description\\\": \\\"An interface that allows a site administrator to block specific IP addresses from accessing the wiki platform.\\\",\\n  \\\"function_name\\\": \\\"block_ip\\\",\\n  \\\"input_args\\\": {\\n    \\\"ip_address\\\": \\\"The IP address to be blocked.\\\"\\n  },\\n  \\\"return\\\": \\\"A confirmation message indicating that the IP address has been blocked.\\\",\\n  \\\"depend\\\": \\\"Python library: IPy, OS\\\"\\n}\"", "description": "tool development"}
{"input persona": "a member of the Girl Scouts as a teenager and now I serve as an adult volunteer for a local Girl Scouts troop.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Troop Meeting Schedule Interface\\\",\\n  \\\"description\\\": \\\"An interface for managing Girl Scouts troop meeting schedules using Google Calendar API. The user inputs the meeting details like date, time, and description, and the interface creates an event in the Google Calendar.\\\",\\n  \\\"function_name\\\": \\\"create_event\\\",\\n  \\\"input_args\\\": {\\n    \\\"date\\\": \\\"The date of the meeting in format yyyy-mm-dd\\\",\\n    \\\"start_time\\\": \\\"The start time of the meeting in format hh:mm:ss\\\",\\n    \\\"end_time\\\": \\\"The end time of the meeting in format hh:mm:ss\\\",\\n    \\\"description\\\": \\\"The description of the meeting\\\"\\n  },\\n  \\\"return\\\": \\\"The URL of the created event on Google Calendar\\\",\\n  \\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business owner who recognizes the importance of clean code for long-term maintainability", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Formatter Interface\\\",\\n\\\"description\\\": \\\"This interface takes Python code as input and returns a version formatted according to the PEP8 style guide.\\\",\\n\\\"function_name\\\": \\\"format_python_code\\\",\\n\\\"input_args\\\": {\\\"code\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"yapf\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A person recently diagnosed with VTE who is looking into possible treatments.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clinical Trials Search Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about ongoing clinical trials related to a specified medical condition from ClinicalTrials.gov.\\\",\\n\\\"function_name\\\": \\\"get_clinical_trials\\\",\\n\\\"input_args\\\": \\\"condition: A string representing the medical condition\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains information about a clinical trial, including the trial ID, title, condition, and last verified date.\\\",\\n\\\"depend\\\": \\\"requests library, ClinicalTrials.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged woman trying to lose excess weight while battling pre-diabetes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Calorie Count and Meal Planner Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the user's physical attributes and activity level to determine their caloric needs and generate a meal plan that meets these needs.\\\",\\n\\\"function_name\\\": \\\"generate_meal_plan\\\",\\n\\\"input_args\\\": {\\\"age\\\": \\\"int\\\", \\\"weight\\\": \\\"float\\\", \\\"height\\\": \\\"float\\\", \\\"gender\\\": \\\"string\\\", \\\"activity_level\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"A meal plan for the day that meets the user's caloric needs.\\\",\\n\\\"depend\\\": \\\"Uses the Nutritionix API and the Spoonacular API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A die-hard RBD fan who used to watch them on TV during her teenage years", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lyrics Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates song lyrics in the style of the provided artist using a pre-trained GPT-2 model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"generate_lyrics\\\",\\n\\\"input_args\\\": \\\"artist\\\",\\n\\\"return\\\": \\\"Generated song lyrics in the style of the provided artist\\\",\\n\\\"depend\\\": \\\"Hugging Face transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An escrow officer responsible for handling the financial transactions and paperwork involved in real estate transactions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Verification Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to verify the validity of a document. It checks if the document has been tampered with.\\\",\\n\\\"function_name\\\": \\\"verify_document\\\",\\n\\\"input_args\\\": [\\\"model_path\\\", \\\"doc_path\\\"],\\n\\\"return\\\": \\\"Boolean (True if the document is valid, False otherwise)\\\",\\n\\\"depend\\\": \\\"tensorflow, keras, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A country singer-songwriter who draws inspiration from Glen Campbell's music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Lyrics Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates song lyrics based on a provided theme or starting lines. It uses a pre-trained language model (GPT-2) from HuggingFace's Transformers library to produce human-like text.\\\",\\n\\\"function_name\\\": \\\"generate_song_lyrics\\\",\\n\\\"input_args\\\": [\\\"prompt_text\\\"],\\n\\\"return\\\": \\\"Generated song lyrics as a string\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"GPT-2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An interior designer who seeks advice on selecting indoor plants to improve room ambience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface receives an image of a room and returns a list of suitable plants based on the room's style, light condition, and color scheme.\\\",\\n\\\"function_name\\\": \\\"recommend_plants\\\",\\n\\\"input_args\\\": \\\"path_to_img - a string that represents the path to the image file\\\",\\n\\\"return\\\": \\\"A list of suitable indoor plants for the room in the image\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent looking to re-enter the workforce after taking a career break to raise children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Resume Keyword Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface helps users identify the most common keywords that should be included in a resume for a specific job. It scrapes job listings from Indeed, processes the text, and identifies the most common keywords.\\\",\\n\\\"function_name\\\": \\\"get_keywords\\\",\\n\\\"input_args\\\": [\\\"job_title\\\", \\\"location\\\", \\\"max_features\\\"],\\n\\\"return\\\": \\\"A list of the most common keywords that should be included in a resume for the specified job.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"sklearn's CountVectorizer\\\", \\\"nltk\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A history professor who provides in-depth analysis and background information on the historical events mentioned in the memoir", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Events Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Wikipedia API to retrieve a summary of a specified historical event.\\\",\\n\\\"function_name\\\": \\\"get_event_summary\\\",\\n\\\"input_args\\\": {\\n    \\\"event_name\\\": \\\"Name of the historical event\\\"\\n},\\n\\\"return\\\": \\\"If the event is found on Wikipedia, it returns a summary of the event. If not, it returns a message indicating that no information was found.\\\",\\n\\\"depend\\\": \\\"This function depends on the requests library and the Wikipedia API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wealthy collector looking to restore a recently acquired 1960s muscle car to mint condition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car Paint Color Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface suggests the original factory paint colors for classic 1960s muscle cars. The user inputs the make and model of the car, and the interface returns a list of original factory paint colors for that car.\\\",\\n\\\"function_name\\\": \\\"suggest_factory_paint_colors\\\",\\n\\\"input_args\\\": {\\n    \\\"make\\\": \\\"The make of the car. (string)\\\",\\n    \\\"model\\\": \\\"The model of the car. (string)\\\"\\n},\\n\\\"return\\\": \\\"A list of original factory paint colors for the specified car. (string)\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library and a GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young hardcore fan of Castlemartyr hurling team", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hurling Match Result Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to predict the outcome of hurling matches. Inputs needed are match details such as the teams playing, their recent form, player stats, etc. The output is the predicted result of the match.\\\",\\n\\\"function_name\\\": \\\"predict_result\\\",\\n\\\"input_args\\\": \\\"match_details\\\",\\n\\\"return\\\": \\\"predicted result of the match\\\",\\n\\\"depend\\\": \\\"Scikit-learn library, pandas library, match records in CSV format\\\"\\n}\"", "description": "tool development"}
{"input persona": "A family on a camping trip who seeks guidance on how to safely enjoy nature without disturbing the ecosystem", "synthesized text": "\"{\\n\\\"name\\\": \\\"Eco-friendly Camping Tips Interface\\\",\\n\\\"description\\\": \\\"This interface provides a random eco-friendly camping tip from a pre-compiled list, providing valuable guidance to campers who want to enjoy nature responsibly.\\\",\\n\\\"function_name\\\": \\\"get_eco_camping_tip\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A string that contains an eco-friendly camping tip.\\\",\\n\\\"depend\\\": \\\"Python's built-in random module.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior neuroscientist who has made significant contributions to the field of computational neuroscience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brainwave Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to compute the power spectral density of brainwave signals from MEG or EEG data files.\\\",\\n\\\"function_name\\\": \\\"compute_power_spectral_density\\\",\\n\\\"input_args\\\": \\\"path_to_data: The path to the MEG or EEG data file in FIF format.\\\",\\n\\\"return\\\": \\\"A pair of arrays: psd is the power spectral densities (one per channel), and freqs are the frequency points at which the PSD is computed.\\\",\\n\\\"depend\\\": \\\"MNE Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ice hockey player who relies on the manufacturer's sticks to enhance their performance on the ice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hockey Stick Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends the most suitable hockey stick based on the player's personal attributes and playing style.\\\",\\n\\\"function_name\\\": \\\"recommend_hockey_stick\\\",\\n\\\"input_args\\\": {\\\"height\\\": \\\"Player's height in cm\\\", \\\"weight\\\": \\\"Player's weight in kg\\\", \\\"position\\\": \\\"Player's position on the ice (forward, defence)\\\", \\\"style\\\": \\\"Player's playing style (aggressive, defensive)\\\"},\\n\\\"return\\\": \\\"Recommended hockey stick model\\\",\\n\\\"depend\\\": [\\\"Scikit-Learn\\\", \\\"Pandas\\\", \\\"Pickle\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An digital media solution expert in South Africa", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Compression Interface\\\",\\n\\\"description\\\": \\\"This interface uses the moviepy library to compress video files. The user inputs the path to the video file, the desired path for the compressed video and the target size in pixels, and the interface returns the compressed video.\\\",\\n\\\"function_name\\\": \\\"compress_video\\\",\\n\\\"input_args\\\": [\\\"input_video_path\\\", \\\"output_video_path\\\", \\\"target_size\\\"],\\n\\\"return\\\": \\\"The path of the compressed video\\\",\\n\\\"depend\\\": \\\"moviepy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young student who has witnessed the consequences of sectarian violence in their neighborhood", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conflict Zones Safety Rating Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the safety rating of a conflict zone based on Ushahidi reports.\\\",\\n\\\"function_name\\\": \\\"predict_safety_rating\\\",\\n\\\"input_args\\\": [\\\"zone\\\"],\\n\\\"return\\\": \\\"A safety rating for the input conflict zone.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"sklearn.ensemble.RandomForestClassifier\\\", \\\"Ushahidi API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A novice cryptocurrency investor who is new to tracking and converting currency rates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cryptocurrency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface uses CryptoCompare API to get the conversion rate between two types of currency and converts an amount from one type of currency to another.\\\",\\n\\\"function_name\\\": \\\"convert_cryptocurrency\\\",\\n\\\"input_args\\\": {\\n    \\\"from_currency\\\": \\\"The currency code of the currency you want to convert from\\\",\\n    \\\"to_currency\\\": \\\"The currency code of the currency you want to convert to\\\",\\n    \\\"amount\\\": \\\"The amount of from_currency you want to convert to to_currency\\\"\\n},\\n\\\"return\\\": \\\"The amount converted into to_currency\\\",\\n\\\"depend\\\": \\\"requests library, CryptoCompare API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research project manager relying on the biostatistician's expertise to design and analyze clinical trials", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clinical Trial Analysis Interface\\\",\\n\\\"description\\\": \\\"Interface to perform t-test using statsmodels to measure if the means of two groups are statistically different\\\",\\n\\\"function_name\\\": \\\"perform_t_test\\\",\\n\\\"input_args\\\": [\\\"group1\\\", \\\"group2\\\"],\\n\\\"return\\\": \\\"A dictionary with t-statistic and p-value\\\",\\n\\\"depend\\\": \\\"statsmodels library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A customer service representative who provides guidance on setting up parental controls and monitoring software", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parental Control Setup and Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface predicts whether a certain action or website is suitable for children based on historical data.\\\",\\n\\\"function_name\\\": \\\"predict_suitability\\\",\\n\\\"input_args\\\": \\\"action_description\\\",\\n\\\"return\\\": \\\"A prediction on whether the action or website is suitable for children or not\\\",\\n\\\"depend\\\": \\\"PyCaret library\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个在职场上陷入困境的年轻职员", "synthesized text": "\"{\\n\\\"name\\\": \\\"Professional Skill Suggestions Interface\\\",\\n\\\"description\\\": \\\"This interface uses LinkedIn's Skills API to provide users with suggestions on how to improve their professional skills based on their profession and the problem they are facing.\\\",\\n\\\"function_name\\\": \\\"get_professional_skill_suggestions\\\",\\n\\\"input_args\\\": [\\\"profession\\\", \\\"problem\\\"],\\n\\\"return\\\": \\\"A string of suggestions on how to improve professional skills.\\\",\\n\\\"depend\\\": \\\"LinkedIn's Skills API, LLM\\\"\\n}\"", "description": "tool development"}
{"input persona": "An acclaimed author known for her meticulously researched historical biographies, with little patience for fictional interpretations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Verification Interface\\\",\\n\\\"description\\\": \\\"An interface using the Wikipedia API to verify the occurrence of historical events. The user inputs the event and year, and the interface will return a brief summary of the event if it indeed took place in the provided year, or a message stating that no such event was found in the specified year.\\\",\\n\\\"function_name\\\": \\\"get_event_summary\\\",\\n\\\"input_args\\\": {\\n    \\\"event\\\": \\\"A string representing the event to verify.\\\",\\n    \\\"year\\\": \\\"An integer representing the year of the event.\\\"\\n},\\n\\\"return\\\": \\\"A string containing a brief summary of the event if it occurred in the specified year, or a message indicating that no such event was found in the specified year.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a theatrically enthusiastic pre-teen", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendations Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input a user's favorite movie and returns a list of similar movies for recommendation. It uses the TMDb's 'similar movies' endpoint to get the recommendations.\\\",\\n\\\"function_name\\\": \\\"get_similar_movies\\\",\\n\\\"input_args\\\": \\\"favorite_movie - a string representing the user's favorite movie\\\",\\n\\\"return\\\": \\\"A list of strings, each string is the title of a recommended movie\\\",\\n\\\"depend\\\": \\\"requests library, TMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an IT manager who prefers to host my IT infrastructure in-house, disliking cloud-based solutions due to concerns about data security.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Server Health Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface provides real-time health status of in-house servers. The user inputs the desired metric (like 'cpu', 'memory', 'disk', 'network', 'temperature'), and the interface returns the current status of that metric in the server.\\\",\\n\\\"function_name\\\": \\\"get_server_status\\\",\\n\\\"input_args\\\": \\\"metric - 'cpu', 'memory', 'disk', 'network', 'temperature'\\\",\\n\\\"return\\\": \\\"The current status of the input metric in the server.\\\",\\n\\\"depend\\\": \\\"Python's psutil library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturing manager who needs large amounts of steel for product production", "synthesized text": "\"{\\n\\\"name\\\": \\\"Steel Price Trend Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses historical steel prices to forecast future prices, helping users plan their purchases more efficiently.\\\",\\n\\\"function_name\\\": \\\"forecast_steel_prices\\\",\\n\\\"input_args\\\": {\\\"path_to_csv\\\": \\\"Path to the CSV file containing the historical steel prices.\\\"},\\n\\\"return\\\": \\\"A plot of the historical steel prices and a forecast of future prices.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"statsmodels\\\", \\\"matplotlib\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A beginner skier eager to improve their skills and learn about the best après-ski restaurants", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Ski Resort Recommendations Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a user's location, skiing skill level, and food preferences as inputs and provides recommendations for suitable ski resorts and high-rated apr\\u00e8s-ski restaurants. It does so by leveraging weather forecasts and the Yelp API.\\\",\\n  \\\"function_name\\\": \\\"get_recommendations\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"User's current location\\\",\\n    \\\"skill_level\\\": \\\"User's skiing skill level\\\",\\n    \\\"food_preferences\\\": \\\"User's food preferences for apr\\u00e8s-ski restaurants\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary with recommended ski resorts based on the weather forecast and skill level, and top-rated apr\\u00e8s-ski restaurants based on the food preferences.\\\",\\n  \\\"depend\\\": \\\"Python's requests library, OpenWeatherMap API, Yelp API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former fashion designer turned whistleblower, revealing unethical practices within top fashion brands", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ethical Brand Rating Interface\\\",\\n\\\"description\\\": \\\"An interface to evaluate and rate the ethical and sustainability practices of fashion brands using Good On You API.\\\",\\n\\\"function_name\\\": \\\"get_ethical_rating\\\",\\n\\\"input_args\\\": \\\"brand_name - The name of the fashion brand to evaluate\\\",\\n\\\"return\\\": \\\"A rating that reflects the ethical and sustainability practices of the brand. If the brand is not found in the API's database or if the API request fails, it returns 'Brand not found or API request failed.'\\\",\\n\\\"depend\\\": \\\"requests, Good On You API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bride-to-be who dreams of having a destination wedding in Italy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Italian Wedding Venue Search Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input a city in Italy and returns the top-rated wedding venues in that city, according to Yelp.\\\",\\n\\\"function_name\\\": \\\"get_top_wedding_venues\\\",\\n\\\"input_args\\\": [\\\"city\\\"],\\n\\\"return\\\": [\\\"List of top-rated wedding venues\\\"],\\n\\\"depend\\\": \\\"Yelp Fusion API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a freelance financial analyst who used to own shares of Innospec in the past", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price History Interface\\\",\\n\\\"description\\\": \\\"This interface provides historical price data for any given stock within a specific date range.\\\",\\n\\\"function_name\\\": \\\"get_stock_price_history\\\",\\n\\\"input_args\\\": {\\n    \\\"ticker\\\": \\\"The ticker symbol of the stock (as a string)\\\",\\n    \\\"start_date\\\": \\\"The start date of the range (in the format 'YYYY-MM-DD')\\\",\\n    \\\"end_date\\\": \\\"The end date of the range (in the format 'YYYY-MM-DD')\\\"\\n},\\n\\\"return\\\": \\\"A data frame containing the date, open price, high price, low price, close price, adjusted close price, and volume of the stock on each trading day within the date range.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, yfinance; Web API: Yahoo Finance API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a conservative Christian Norwegian", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verse Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get the content of a specified Bible verse in a specific translation. By default, the translation is Norwegian.\\\",\\n\\\"function_name\\\": \\\"get_bible_verse\\\",\\n\\\"input_args\\\": [\\\"book\\\", \\\"chapter\\\", \\\"verse\\\", \\\"version\\\"],\\n\\\"return\\\": \\\"The content of the specified Bible verse in the selected translation.\\\",\\n\\\"depend\\\": \\\"Bible Gateway API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A patient with a chronic illness who relies on medical cannabis for pain management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cannabis Strain Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to recommend a cannabis strain based on the user's symptoms and preferences.\\\",\\n\\\"function_name\\\": \\\"recommend_strain\\\",\\n\\\"input_args\\\": [\\\"symptoms\\\", \\\"preferences\\\"],\\n\\\"return\\\": \\\"A list of recommended cannabis strains.\\\",\\n\\\"depend\\\": \\\"A CSV file 'cannabis_strains.csv' containing information about different cannabis strains, and the sklearn library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a person who doesn't care about car customization and considers these promotions spammy", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Promotion Filter Interface\\\",\\n  \\\"description\\\": \\\"An interface to filter out promotional emails about car customization.\\\",\\n  \\\"function_name\\\": \\\"is_car_promotion\\\",\\n  \\\"input_args\\\": [\\\"email_text\\\"],\\n  \\\"return\\\": \\\"Returns True if the email is a promotion about car customization, else False.\\\",\\n  \\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior cloud engineer who may view the issue as a common configuration problem.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cloud Configuration Debugging Interface\\\",\\n\\\"description\\\": \\\"This interface uses the AWS Boto3 Python SDK to interact with AWS services and automatically check for common configuration errors.\\\",\\n\\\"function_name\\\": \\\"check_common_config_issues\\\",\\n\\\"input_args\\\": {\\n    \\\"service_name\\\": \\\"The name of the AWS service to debug\\\",\\n    \\\"aws_access_key\\\": \\\"The user's AWS access key\\\",\\n    \\\"aws_secret_key\\\": \\\"The user's AWS secret key\\\"\\n},\\n\\\"return\\\": \\\"A list of potential configuration issues\\\",\\n\\\"depend\\\": \\\"AWS Boto3 Python SDK\\\"\\n}\"", "description": "tool development"}
{"input persona": "An established topologist who has made significant contributions to the field and offers guidance to the PhD candidate", "synthesized text": "\"{\\n\\\"name\\\": \\\"Topological Space Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to visualize topological spaces by inputting a set and its topology. The output is a graph where nodes represent sets and edges represent subset relationships.\\\",\\n\\\"function_name\\\": \\\"visualize_topological_space\\\",\\n\\\"input_args\\\": [\\\"set_elements\\\", \\\"topology\\\"],\\n\\\"return\\\": \\\"A graph where each node represents a set in the topology and an edge is drawn from set A to set B if A is a subset of B.\\\",\\n\\\"depend\\\": \\\"Python libraries: Matplotlib, NetworkX\\\"\\n}\"", "description": "tool development"}
{"input persona": "English citizen who has never been to Slovakia or learned Slovak, and has average knowledge about statistics", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Translation and Statistical Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface translates English text to Slovak and performs basic statistical analysis (mean, median, and standard deviation) on a dataset from a CSV file.\\\",\\n  \\\"function_name\\\": \\\"translate_and_analyze\\\",\\n  \\\"input_args\\\": {\\n    \\\"text\\\": \\\"The English text to be translated.\\\",\\n    \\\"csv_file\\\": \\\"The path to the CSV file to be analyzed.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"translated_text\\\": \\\"The translated text in Slovak.\\\",\\n    \\\"data_analysis\\\": \\\"A dictionary containing the mean, median, and standard deviation of each column in the dataset.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"googletrans\\\": \\\"Used for translating English text to Slovak.\\\",\\n    \\\"pandas\\\": \\\"Used for reading the CSV file and performing the data analysis.\\\",\\n    \\\"numpy\\\": \\\"Used for performing the data analysis.\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A retired medical transcriptionist who imparts wisdom about the evolution of medical documentation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Terminology Translation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a medical term as input and returns a simplified explanation of the term.\\\",\\n\\\"function_name\\\": \\\"get_medical_term_explanation\\\",\\n\\\"input_args\\\": \\\"medical_term\\\",\\n\\\"return\\\": \\\"A tuple consisting of the unique identifier (UI) for the term and a simplified explanation, or None and an error message if the term is not found.\\\",\\n\\\"depend\\\": \\\"Uses the Unified Medical Language System (UMLS) API from the U.S. National Library of Medicine.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A public health organization seeking guidance on analyzing population health data", "synthesized text": "\"{\\n\\\"name\\\": \\\"Population Health Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for performing exploratory data analysis, data visualization, and predictive modeling on population health data.\\\",\\n\\\"function_name\\\": [\\\"summarise_data\\\", \\\"visualize_data\\\", \\\"predict_health_outcome\\\"],\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"outcome\\\"],\\n\\\"return\\\": [\\\"Data summary\\\", \\\"Pairplot\\\", \\\"Classification report\\\"],\\n\\\"depend\\\": [\\\"pandas\\\", \\\"seaborn\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow writer who shares prompts and writing exercises to spark creativity", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Writing Prompts Generation Interface\\\",\\n    \\\"description\\\": \\\"An interface to generate writing prompts based on a provided seed phrase using a pre-trained language model from Hugging Face.\\\",\\n    \\\"function_name\\\": \\\"generate_writing_prompts\\\",\\n    \\\"input_args\\\": [\\\"seed_phrase\\\", \\\"num_prompts\\\"],\\n    \\\"return\\\": \\\"A list of generated writing prompts.\\\",\\n    \\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An avid fan of Darius McCrary's works, who also loves to delve deep into the lives of celebrities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Celebrity Fact Finder Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches information about a specific celebrity from their Wikipedia page.\\\",\\n\\\"function_name\\\": \\\"get_celebrity_info\\\",\\n\\\"input_args\\\": {\\\"celebrity_name\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Wikipedia API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A golf prodigy from a rival college known for their strategic decision-making on the course", "synthesized text": "\"{\\n\\\"name\\\": \\\"Golf Shot Recommendation Interface\\\",\\n\\\"description\\\": \\\"Predicts the best golf shot to take given the current status of the game. Returns the recommended club to use and the power level for the shot.\\\",\\n\\\"function_name\\\": \\\"recommend_golf_shot\\\",\\n\\\"input_args\\\": [\\\"distance_to_hole\\\", \\\"wind_speed\\\", \\\"wind_direction\\\", \\\"lie\\\"],\\n\\\"return\\\": [\\\"club\\\", \\\"power\\\"],\\n\\\"depend\\\": [\\\"numpy\\\", \\\"sklearn.ensemble.RandomForestRegressor\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am an aspiring actor who deeply admires Michael Stuhlbarg's work.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Actor Filmography Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of movies that the input actor has starred in. It makes use of The Movie Database (TMDb) API.\\\",\\n\\\"function_name\\\": \\\"get_actor_filmography\\\",\\n\\\"input_args\\\": \\\"actor_name: The name of the actor as a string.\\\",\\n\\\"return\\\": \\\"A list of movie titles as strings.\\\",\\n\\\"depend\\\": \\\"The Movie Database (TMDb) API, Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A policy analyst working on implementing regulations to encourage sustainable sourcing in industries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sustainable Sourcing Score Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the sustainability (ESG) score for a given company, using the ESG Enterprise API.\\\",\\n\\\"function_name\\\": \\\"get_sustainability_score\\\",\\n\\\"input_args\\\": [\\\"company_name\\\"],\\n\\\"return\\\": \\\"The ESG score of the company. A higher score indicates better sustainability practices.\\\",\\n\\\"depend\\\": \\\"ESG Enterprise API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A soprano whose voice compliments the baritone's during duets", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Matching Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spotify API to find songs where a particular type of voice (soprano, alto, tenor, bass, etc.) is prominent.\\\",\\n\\\"function_name\\\": \\\"get_songs_featuring_voice_type\\\",\\n\\\"input_args\\\": \\\"voice_type - a string representing the type of voice (e.g., 'soprano', 'alto', 'tenor', 'bass')\\\",\\n\\\"return\\\": \\\"A list of song names that feature the specified voice type prominently.\\\",\\n\\\"depend\\\": \\\"Spotify API, Spotipy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired neurologist who can share personal experiences and recommendations for the best neurologists", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Neurologist Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface recommends the top 5 neurologists in a given location based on user reviews and ratings.\\\",\\n  \\\"function_name\\\": \\\"get_best_neurologists\\\",\\n  \\\"input_args\\\": {\\\"location\\\": \\\"Type: str. The location where you want to find a neurologist.\\\"},\\n  \\\"return\\\": \\\"Type: List of tuples. Each tuple contains the name and address of a recommended neurologist.\\\",\\n  \\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "一名熱衷於追劇和東亞文化的退休書店老闆。", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a genre as input and returns a list of recommended TV shows in that genre.\\\",\\n\\\"function_name\\\": \\\"get_tv_show_recommendations\\\",\\n\\\"input_args\\\": \\\"genre\\\",\\n\\\"return\\\": \\\"A list of TV show names\\\",\\n\\\"depend\\\": \\\"requests library, The Movie Database (TMDb) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned veterinarian with decades of experience in rural veterinary medicine", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disease Diagnosis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to perform medical entity extraction from a given text. It can help a veterinarian to quickly identify diseases from a description of symptoms.\\\",\\n\\\"function_name\\\": \\\"extract_medical_entities\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"List of possible diseases\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library (AutoTokenizer, AutoModelForTokenClassification)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher studying the contributions of mathematicians to the development of modern geometry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mathematician Contribution Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the DBLP Computer Science Bibliography API to fetch publications of a particular mathematician, and a pre-trained Named Entity Recognition (NER) model from HuggingFace to extract key terms related to geometry from the publication titles.\\\",\\n\\\"function_name\\\": \\\"analyze_contributions\\\",\\n\\\"input_args\\\": \\\"name - The name of the mathematician\\\",\\n\\\"return\\\": \\\"A list of key geometry-related terms from the mathematician's publications.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, transformers; Web APIs: DBLP Computer Science Bibliography API; Machine Learning Models: dbmdz/bert-large-cased-finetuned-conll03-english from HuggingFace\\\"\\n}\"", "description": "tool development"}
{"input persona": "A disciplined student who consistently achieves top grades and disagrees with the student's alternative budget proposals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Budget Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface compares a student's current budget with an alternative budget proposal, highlighting the differences. It expects a CSV file with two columns: 'current_budget' and 'alternate_budget', each containing numerical budget values.\\\",\\n\\\"function_name\\\": \\\"budget_comparison\\\",\\n\\\"input_args\\\": \\\"csv_file_path\\\",\\n\\\"return\\\": \\\"A string describing the difference between the current and alternate budgets\\\",\\n\\\"depend\\\": \\\"pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical executive who acknowledges the need for pricing transparency but highlights the challenges in implementing it", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Pricing Transparency Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the drug pricing information using the U.S. Department of Health & Human Services' API. Users need to input the NDC (National Drug Code) of the drug, and the interface will return the drug's pricing information.\\\",\\n\\\"function_name\\\": \\\"get_drug_price\\\",\\n\\\"input_args\\\": \\\"NDC of the drug\\\",\\n\\\"return\\\": \\\"A dictionary containing various information about the drug such as its proprietary name, non-proprietary name, package description, manufacturer name, pharmaceutical class, route, marketing start date, active ingredients, dosage form, and marketing category.\\\",\\n\\\"depend\\\": \\\"requests, U.S. Department of Health & Human Services' API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A compassionate and knowledgeable doctor specializing in schizophrenia treatment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Schizophrenia Symptom Severity Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the severity of schizophrenia symptoms based on a patient's speech.\\\",\\n\\\"function_name\\\": \\\"predict_symptom_severity\\\",\\n\\\"input_args\\\": \\\"speech_text: a string representing the patient's speech\\\",\\n\\\"return\\\": \\\"severity_score: an integer representing the predicted severity of schizophrenia symptoms (higher numbers indicate greater severity)\\\",\\n\\\"depend\\\": \\\"huggingface/transformers library, PyTorch library, pre-trained BERT model from nlptown\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pediatric ophthalmologist specializing in complex eye conditions in children", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Eye Condition Classifier Interface\\\",\\n  \\\"description\\\": \\\"Classifies eye conditions based on eye images using a pre-trained model from TensorFlow Hub.\\\",\\n  \\\"function_name\\\": \\\"classify_eye_condition\\\",\\n  \\\"input_args\\\": \\\"path_to_img - a string that represents the path to an eye image file\\\",\\n  \\\"return\\\": \\\"an integer that represents the class of the eye condition\\\",\\n  \\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and a pre-trained eye condition classifier model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A doctoral candidate writing a thesis on the role of propaganda in shaping public opinion during the Cold War", "synthesized text": "\"{\\n\\\"name\\\": \\\"Propaganda Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches a webpage, extracts the main text and detects its language.\\\",\\n\\\"function_name\\\": \\\"fetch_and_analyze_webpage\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"{'text': '...', 'language': '...'}\\\",\\n\\\"depend\\\": \\\"BeautifulSoup, requests, langdetect\\\"\\n}\"", "description": "tool development"}
{"input persona": "An older sister working as a sound engineer, interested in composing music for video game soundtracks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Composition Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Magenta's Music Transformer to generate a continuation of a seed melody, effectively composing a new piece of music.\\\",\\n\\\"function_name\\\": \\\"compose_music\\\",\\n\\\"input_args\\\": [\\\"melody_file\\\"],\\n\\\"return\\\": \\\"A MIDI file (as a string) with the generated melody.\\\",\\n\\\"depend\\\": \\\"Magenta's Music Transformer (TensorFlow)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local librarian who provides recommendations for age-appropriate fairytale books and offers reading incentives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that provides age-appropriate book recommendations based on the provided age group and genre.\\\",\\n\\\"function_name\\\": \\\"get_book_recommendations\\\",\\n\\\"input_args\\\": [\\\"age_group\\\", \\\"genre\\\"],\\n\\\"return\\\": \\\"A list of recommended books based on the provided age group and genre\\\",\\n\\\"depend\\\": [\\\"Goodreads API\\\", \\\"Scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a homeowner who recently moved to Litchfield, Connecticut", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Property Value Estimate Interface\\\",\\n\\\"description\\\": \\\"This interface fetches an estimated property value from the Zillow API based on the user's home address.\\\",\\n\\\"function_name\\\": \\\"get_property_estimate\\\",\\n\\\"input_args\\\": {\\n    \\\"address\\\": \\\"The user's home address (string)\\\"\\n},\\n\\\"return\\\": \\\"Estimated property value (integer)\\\",\\n\\\"depend\\\": \\\"requests, xml.etree.ElementTree, Zillow API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A screenwriter who crafts captivating storylines for K-Dramas, drawing inspiration from Gong Yoo's performances", "synthesized text": "\"{\\n\\\"name\\\": \\\"Script Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a script given an initial setting or conversation. It is designed for screenwriters in the K-Drama industry.\\\",\\n\\\"function_name\\\": \\\"generate_script\\\",\\n\\\"input_args\\\": [\\\"prompt\\\"],\\n\\\"return\\\": \\\"A string representing the generated script.\\\",\\n\\\"depend\\\": [\\\"Huggingface library\\\", \\\"GPT-2 transformer model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A European academic proud of the centuries-long scholarly traditions of her continent, especially the United Kingdom.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Weather Data Interface\\\",\\n\\\"description\\\": \\\"This interface fetches historical weather data for a given date and location. It uses the Visual Crossing Weather API to access the data.\\\",\\n\\\"function_name\\\": \\\"get_historical_weather\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"Weather data for the given date and location in JSON format\\\",\\n\\\"depend\\\": \\\"requests library, Visual Crossing Weather API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A spacecraft systems engineer specializing in the propulsion system for the ICON spacecraft", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Orbit Propagation Interface\\\",\\n    \\\"description\\\": \\\"Propagates the orbit of a spacecraft given the initial position, velocity, and the duration of propagation.\\\",\\n    \\\"function_name\\\": \\\"propagate_orbit\\\",\\n    \\\"input_args\\\": {\\n        \\\"initial_position\\\": \\\"A list representing the initial position vector of the spacecraft in meters.\\\",\\n        \\\"initial_velocity\\\": \\\"A list representing the initial velocity vector of the spacecraft in meters per second.\\\",\\n        \\\"duration_in_seconds\\\": \\\"A number representing the duration of propagation in seconds.\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"final_position\\\": \\\"A list representing the final position vector of the spacecraft in meters after the propagation.\\\",\\n        \\\"final_velocity\\\": \\\"A list representing the final velocity vector of the spacecraft in meters per second after the propagation.\\\"\\n    },\\n    \\\"depend\\\": \\\"Orekit Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A civil engineer who designs construction projects with a focus on minimizing the impact on wildlife habitats", "synthesized text": "\"{\\n\\\"name\\\": \\\"Construction Impact Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google's Earth Engine API to access satellite imagery and a TensorFlow model to predict the impact of a construction project on local wildlife habitats. The user inputs the coordinates of the construction site, and the interface returns an impact score.\\\",\\n\\\"function_name\\\": \\\"predict_impact\\\",\\n\\\"input_args\\\": {\\\"coordinates\\\": \\\"The geographical coordinates of the proposed construction site.\\\"},\\n\\\"return\\\": \\\"An impact score indicating the predicted effect of the construction project on local wildlife habitats.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"earthengine-api\\\", \\\"tensorflow\\\", \\\"sklearn\\\"], \\\"Web APIs\\\": [\\\"Google Earth Engine\\\"], \\\"machine learning models\\\": [\\\"A pretrained TensorFlow or Scikit-learn model trained on similar task\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A Vinita, Oklahoma resident concerned about local development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Planning Application Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the recent planning applications in a user's specified city or county.\\\",\\n\\\"function_name\\\": \\\"get_recent_planning_applications\\\",\\n\\\"input_args\\\": \\\"city_or_county: A string representing the name of the city or county the user is interested in.\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each representing a planning application, with the application ID, description, and status.\\\",\\n\\\"depend\\\": \\\"requests library, City or County planning department's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A results-driven team leader who excels at project scheduling and resource allocation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Scheduling and Resource Allocation Interface\\\",\\n\\\"description\\\": \\\"An interface for scheduling project tasks, allocating resources to tasks, and finding the critical path for project completion.\\\",\\n\\\"function_name\\\": \\\"project_scheduling_and_resource_allocation\\\",\\n\\\"input_args\\\": {\\n    \\\"tasks\\\": \\\"A dictionary where the keys are task names and the values are task durations.\\\",\\n    \\\"dependencies\\\": \\\"A dictionary where the keys are task names and the values are lists of tasks that the key task depends on.\\\",\\n    \\\"resources\\\": \\\"A dictionary where the keys are resource names and the values are the tasks to which the resources should be allocated.\\\"\\n},\\n\\\"return\\\": \\\"A list of task names representing the critical path for project completion.\\\",\\n\\\"depend\\\": \\\"Python's CriticalPath library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manager who values employees who are financially responsible and rewards them with incentives to save for retirement", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Retirement Savings Contribution Interface\\\",\\n  \\\"description\\\": \\\"Calculates the amount of financial incentives each employee should receive based on their retirement savings contributions.\\\",\\n  \\\"function_name\\\": \\\"calculate_incentives\\\",\\n  \\\"input_args\\\": [\\\"filepath\\\"],\\n  \\\"return\\\": \\\"DataFrame with two columns: 'Employee Name' and 'Incentives'. 'Employee Name' column contains the names of the employees and 'Incentives' column contains the amount of incentive each employee should receive.\\\",\\n  \\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A club owner who appreciates and recognizes the unique contribution of the VJ in enhancing the overall clubbing experience", "synthesized text": "\"{\\n\\\"name\\\": \\\"VJ Loop Download Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Storyblocks API to search and download VJ loops. Users input the keywords related to the type of VJ loop they want, and the interface returns a list of URLs for VJ loops that match their search criteria.\\\",\\n\\\"function_name\\\": \\\"get_vj_loops\\\",\\n\\\"input_args\\\": \\\"keywords\\\",\\n\\\"return\\\": \\\"List of URLs for downloadable VJ loops\\\",\\n\\\"depend\\\": \\\"Storyblocks API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow artist who stays up late working on their own creative projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Color Palette Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the dominant colors from an artwork. It can help artists understand the color palette used in a specific piece of artwork or inspire them in their own projects.\\\",\\n\\\"function_name\\\": \\\"extract_colors\\\",\\n\\\"input_args\\\": {\\\"path_to_img\\\": \\\"The path to the image file\\\", \\\"num_colors\\\": \\\"The number of dominant colors to extract (default is 5)\\\"},\\n\\\"return\\\": \\\"A list of dominant RGB color values from the given image.\\\",\\n\\\"depend\\\": [\\\"opencv-python\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a politically neutral network engineer from Taiwan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Internet Speed Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks the internet speed and returns the download speed, upload speed, and ping latency.\\\",\\n\\\"function_name\\\": \\\"check_internet_speed\\\",\\n\\\"input_args\\\": \\\"\\\",\\n\\\"return\\\": \\\"{'download': download_speed, 'upload': upload_speed, 'ping': ping}\\\",\\n\\\"depend\\\": \\\"speedtest-cli Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A neuroscientist studying the effects of genetics on behavior and cognition in identical twins", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Similarity Measurement Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to compare genetic data, such as SNP (Single Nucleotide Polymorphism) data, of identical twins.\\\",\\n\\\"function_name\\\": \\\"calculate_genetic_similarity\\\",\\n\\\"input_args\\\": [\\\"file_path1\\\", \\\"file_path2\\\"],\\n\\\"return\\\": \\\"A similarity score between the twins' genetic data\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"sklearn\\\", \\\"pandas\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "一个热衷于保护知识产权的律师", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Copyright Infringement Detector\\\",\\n\\\"description\\\": \\\"An interface to check if an image is being used illegally on the internet by leveraging Google's Reverse Image Search API. The user only needs to input the path of an image file, and the interface will return all the matching webpage links found on the internet.\\\",\\n\\\"function_name\\\": \\\"search_image_copyright_infringement\\\",\\n\\\"input_args\\\": \\\"image_file_path\\\",\\n\\\"return\\\": \\\"List of URLs where the image is found\\\",\\n\\\"depend\\\": \\\"Google's Reverse Image Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A corporate lawyer specializing in shareholder rights and proxy voting", "synthesized text": "\"{\\n\\\"name\\\": \\\"Shareholder Proxy Vote Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to submit their proxy votes using their shareholder account number.\\\",\\n\\\"function_name\\\": \\\"submit_proxy_vote\\\",\\n\\\"input_args\\\": [\\\"account_number\\\", \\\"vote\\\"],\\n\\\"return\\\": \\\"A string indicating whether the vote was submitted successfully or an error message.\\\",\\n\\\"depend\\\": \\\"Broadridge API (hypothetical use)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retired professional basketball player who is a big fan of Evangelia Sarakatsani", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Player Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a basketball player's career statistics. It uses a sports data API to obtain the stats.\\\",\\n\\\"function_name\\\": \\\"get_basketball_player_stats\\\",\\n\\\"input_args\\\": {\\\"player_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"Points\\\": \\\"integer\\\", \\\"Rebounds\\\": \\\"integer\\\", \\\"Assists\\\": \\\"integer\\\", \\\"Steals\\\": \\\"integer\\\", \\\"Blocks\\\": \\\"integer\\\"},\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python library\\\", \\\"Sports Open Data\\\": \\\"Web API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "an event manager based in Hong Kong familiar with the Central Harbourfront Event Space", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Event Weather Forecast Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface that retrieves the weather forecast for a specific day at the Central Harbourfront Event Space in Hong Kong.\\\",\\n  \\\"function_name\\\": \\\"get_event_weather_forecast\\\",\\n  \\\"input_args\\\": {\\n    \\\"event_day\\\": \\\"a unix timestamp representing the event day\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"weather_description\\\": \\\"a string that describes the weather condition\\\",\\n    \\\"temperature\\\": \\\"a dictionary with the daily minimum, maximum, morning, evening, and night temperatures\\\"\\n  },\\n  \\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a football commentator from Ukraine who closely follows every round of Ukrainian Amateur Cup", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n\\\"description\\\": \\\"Fetches match statistics from football-data.org. The user will input the Match ID and the function will return the match statistics including teams, goals, ball possession, and shots on target.\\\",\\n\\\"function_name\\\": \\\"get_match_statistics\\\",\\n\\\"input_args\\\": \\\"match_id\\\",\\n\\\"return\\\": \\\"Dictionary with keys as 'homeTeam', 'awayTeam', 'score', 'ballPossession', and 'shotsOnTarget' with their respective values.\\\",\\n\\\"depend\\\": {\\n    \\\"web_APIs\\\": [\\\"football-data.org API\\\"],\\n    \\\"python_libraries\\\": [\\\"requests\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A sociology major passionate about studying the root causes of terrorism and its impact on marginalized communities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Terrorism Event Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches and analyses data from the Global Terrorism Database (GTD) for a specific country and year. It returns a summary of terrorism events, including total number of incidents, common types of attacks, and common targets.\\\",\\n\\\"function_name\\\": \\\"get_terrorism_data\\\",\\n\\\"input_args\\\": {\\n    \\\"country\\\": \\\"Name of the country\\\",\\n    \\\"year\\\": \\\"Year for which data is required\\\"\\n},\\n\\\"return\\\": {\\n    \\\"total_incidents\\\": \\\"Total number of terrorism incidents\\\",\\n    \\\"common_attack_types\\\": \\\"Most common types of attacks\\\",\\n    \\\"common_targets\\\": \\\"Most common targets of attacks\\\"\\n},\\n\\\"depend\\\": \\\"requests, pandas, collections.Counter, Global Terrorism Database (GTD) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A grammar blogger with a sizable following, known for their witty explanations of grammar rules", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grammar Error Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses the LanguageTool API to detect grammatical errors in a given text and provide suggestions for correction.\\\",\\n\\\"function_name\\\": \\\"grammar_error_detection\\\",\\n\\\"input_args\\\": \\\"text - a string of text that needs to be checked for grammatical errors\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing an error message, the context in which the error was found, and suggestions for correction\\\",\\n\\\"depend\\\": \\\"requests, json, LanguageTool API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst at a large organization who needs assistance with InfluxDB implementation and optimization", "synthesized text": "\"{\\n\\\"name\\\": \\\"InfluxDB Query Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to execute InfluxDB queries by providing the database credentials, database name, and the query. The interface takes care of the connection establishment, query execution, and result fetching.\\\",\\n\\\"function_name\\\": \\\"execute_influxdb_query\\\",\\n\\\"input_args\\\": [\\\"host\\\", \\\"port\\\", \\\"username\\\", \\\"password\\\", \\\"dbname\\\", \\\"query\\\"],\\n\\\"return\\\": \\\"List of dictionaries containing the result of the query execution.\\\",\\n\\\"depend\\\": [\\\"InfluxDB Python client\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A neonatologist specializing in premature infant care", "synthesized text": "\"{\\n\\\"name\\\": \\\"Premature Infants Growth Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the future weight of a premature infant based on gestation period, birth weight, and current weight using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_growth\\\",\\n\\\"input_args\\\": [\\\"gestation_period\\\", \\\"birth_weight\\\", \\\"current_weight\\\", \\\"future_days\\\"],\\n\\\"return\\\": \\\"Predicted weight of the infant at the given future date.\\\",\\n\\\"depend\\\": [\\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Retired Australian War Veteran and RSL delegate", "synthesized text": "\"{\\n\\\"name\\\": \\\"Anzac Day Parade Attendance Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of upcoming Anzac Day parades and events in the specified city using the Eventbrite API.\\\",\\n\\\"function_name\\\": \\\"get_anzac_day_events\\\",\\n\\\"input_args\\\": \\\"city\\\",\\n\\\"return\\\": \\\"A list of dictionaries where each dictionary represents an event. Each dictionary includes the event name, start time, end time, and url.\\\",\\n\\\"depend\\\": \\\"Eventbrite API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An avid Lakers fan who used to love watching Byron Scott as a player, but was frustrated with his run as a coach", "synthesized text": "\"{\\n\\\"name\\\": \\\"NBA Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface for retrieving NBA player or coach statistics for a given season. If the input name corresponds to a player, it returns the player's average points, assists, and rebounds during the input season. If the input name also corresponds to a coach, it additionally returns the coach's team's win-loss record during the input season.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"A string containing the requested statistics.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"balldontlie API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一位中年音樂老師，對當代流行文化略知一二，但對於\"朵芙·卡麥隆\"這類新生代藝人不甚了解。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u85dd\\u4eba\\u8cc7\\u8a0a\\u67e5\\u8a62\\u4ecb\\u9762\\\",\\n\\\"description\\\": \\\"\\u8f38\\u5165\\u85dd\\u4eba\\u7684\\u540d\\u7a31\\uff0c\\u8fd4\\u56de\\u8a72\\u85dd\\u4eba\\u7684\\u57fa\\u672c\\u8cc7\\u8a0a\\u548c\\u4ed6\\u5011\\u7684\\u71b1\\u9580\\u6b4c\\u66f2\\u3002\\\",\\n\\\"function_name\\\": \\\"get_artist_info\\\",\\n\\\"input_args\\\": \\\"\\u85dd\\u4eba\\u540d\\u7a31\\\",\\n\\\"return\\\": \\\"\\u4e00\\u500b\\u5305\\u542b\\u85dd\\u4eba\\u540d\\u7a31\\u3001\\u97f3\\u6a02\\u98a8\\u683c\\u3001\\u4eba\\u6c23\\u7a0b\\u5ea6\\uff0c\\u4ee5\\u53ca\\u71b1\\u9580\\u6b4c\\u66f2\\u7684\\u5b57\\u5178\\\",\\n\\\"depend\\\": \\\"Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A meticulous and detail-oriented player who thoroughly examines every animation in the game", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Frame Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts frames from a game's animation video, allowing users to closely examine each frame.\\\",\\n\\\"function_name\\\": \\\"video_to_frames\\\",\\n\\\"input_args\\\": {\\\"video_path\\\": \\\"The path to the video file\\\"},\\n\\\"return\\\": \\\"A list of frames extracted from the video\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A psychologist specializing in communication strategies and techniques to enhance patient-physician interactions", "synthesized text": "\"{\\n\\\"name\\\":\\\"Emotion Detection Interface\\\",\\n\\\"description\\\":\\\"This interface detects the emotion behind a given text input using a pretrained model from HuggingFace's transformers. It's particularly useful for psychologists, therapists, or medical professionals who need to understand the emotional context of their patients' words.\\\",\\n\\\"function_name\\\":\\\"detect_emotion\\\",\\n\\\"input_args\\\":[\\\"text\\\"],\\n\\\"return\\\":\\\"A string that represents the detected emotion, either 'POSITIVE' or 'NEGATIVE'.\\\",\\n\\\"depend\\\": [\\\"HuggingFace's transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An informed and concerned voter in Texas, passionate about political engagement and fair electoral practices.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voter Information Interface\\\",\\n\\\"description\\\": \\\"An interface to provide users with information about their elected officials and recent disaster declarations based on their ZIP code.\\\",\\n\\\"function_name\\\": \\\"get_voter_information\\\",\\n\\\"input_args\\\": [\\\"zip\\\"],\\n\\\"return\\\": \\\"A tuple containing a list of elected officials and a list of disaster declarations. Each elected official is represented as a tuple of their name, office, and party. Each disaster declaration is represented as a tuple of the declaration title and date.\\\",\\n\\\"depend\\\": \\\"U.S. Department of Labor API, OpenFEMA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a seasoned Australian spelunker (cave explorer)", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Cave Condition Analysis Interface\\\",\\n    \\\"description\\\": \\\"An interface that combines data from various APIs including weather, terrain, and geographical data to provide a comprehensive analysis of cave conditions.\\\",\\n    \\\"function_name\\\": \\\"get_cave_condition\\\",\\n    \\\"input_args\\\": {\\n        \\\"location\\\": \\\"A tuple containing the latitude and longitude coordinates of the cave.\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"condition_report\\\": \\\"A dictionary containing a report of the cave conditions including weather, temperature, humidity, terrain, and elevation.\\\"\\n    },\\n    \\\"depend\\\": {\\n        \\\"resources\\\": \\\"Uses the OpenWeatherMap API for weather data and the Mapbox API for terrain and geographical data.\\\"\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A veteran journalist who seeks legal advice on media-related issues", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Advice Interface\\\",\\n\\\"description\\\": \\\"This interface takes a legal question about media-related issues as input and returns AI-generated advice based on the OpenAI GPT-3 model's training data.\\\",\\n\\\"function_name\\\": \\\"get_legal_advice\\\",\\n\\\"input_args\\\": \\\"question - A string that represents a legal question about media-related issues\\\",\\n\\\"return\\\": \\\"A string that represents the AI's advice based on its training data.\\\",\\n\\\"depend\\\": \\\"OpenAI API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired professional rugby player who was once officiated by Clayton Thomas.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Match Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface provides comprehensive match statistics with a simple match_id input.\\\",\\n\\\"function_name\\\": \\\"get_match_statistics\\\",\\n\\\"input_args\\\": \\\"match_id\\\",\\n\\\"return\\\": \\\"Match statistics in dictionary format\\\",\\n\\\"depend\\\": \\\"Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An envious songwriter stuck in writer's block", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lyrics Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a piece of lyrics. Users only need to input the first line of the lyrics, and the complete lyrics will be returned.\\\",\\n\\\"function_name\\\": \\\"generate_lyrics\\\",\\n\\\"input_args\\\": \\\"first_line, max_length\\\",\\n\\\"return\\\": \\\"Generated lyrics as a string.\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers (GPT-2 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A friendly dog walker who stops by the pub after their daily walks to chat and unwind", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dog Walk Route Optimizer Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the best route for walking the dog and then heading to the pub. It uses the Google Maps API to find the most optimal route.\\\",\\n\\\"function_name\\\": \\\"optimize_dog_walk_route\\\",\\n\\\"input_args\\\": {\\n    \\\"home\\\": \\\"The home location of the user (string)\\\",\\n    \\\"dog_park\\\": \\\"The location of the dog park (string)\\\",\\n    \\\"pub\\\": \\\"The location of the pub (string)\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples, each containing the distance and step-by-step directions for each leg of the journey from home, to the dog park, and then to the pub.\\\",\\n\\\"depend\\\": \\\"Google Maps API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Football enthusiast who dislikes schedule changes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Schedule Update Interface\\\",\\n\\\"description\\\": \\\"This interface returns the upcoming match schedule for a given football team. It also provides a feature to set reminders for the matches.\\\",\\n\\\"function_name\\\": \\\"get_football_match_schedule\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"A list of dictionaries, where each dictionary contains the home team, away team, and match time of an upcoming match.\\\",\\n\\\"depend\\\": \\\"Python's requests and datetime libraries, the pytz library, and the football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an ambitious yet jealous friend of Musab Ahmed", "synthesized text": "\"{\\n\\\"name\\\": \\\"Friend's Social Media Activity Tracker Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to track the recent activities (tweets) of a specific friend on Twitter using the Twitter API. Users only need to provide the friend's Twitter handle, and the interface will return the most recent tweets from the friend.\\\",\\n\\\"function_name\\\": \\\"get_friends_recent_tweets\\\",\\n\\\"input_args\\\": \\\"twitter_handle\\\",\\n\\\"return\\\": \\\"A list of the most recent tweets from the provided Twitter handle.\\\",\\n\\\"depend\\\": \\\"Python library: Tweepy\\\"\\n}\"", "description": "tool development"}
{"input persona": "An economy and labor market research professional specialized in the United States.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Unemployment Rate by State Interface\\\",\\n  \\\"description\\\": \\\"Retrieves the latest unemployment rate for a specific state from the Bureau of Labor Statistics.\\\",\\n  \\\"function_name\\\": \\\"get_latest_unemployment_rate\\\",\\n  \\\"input_args\\\": \\\"state\\\",\\n  \\\"return\\\": \\\"The latest unemployment rate for the input state.\\\",\\n  \\\"depend\\\": \\\"Bureau of Labor Statistics API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biochemist specializing in the molecular properties of herbal infusions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Molecular Property Predictor Interface\\\", \\n\\\"description\\\": \\\"This interface predicts the molecular properties of a compound given its SMILES string. The properties include molecular weight, number of hydrogen donors, number of hydrogen acceptors, number of rotatable bonds, number of aromatic rings, and logP value.\\\", \\n\\\"function_name\\\": \\\"predict_molecular_properties\\\", \\n\\\"input_args\\\": \\\"smiles_string\\\", \\n\\\"return\\\": \\\"A dictionary with keys as property names and values as the respective predicted property values.\\\", \\n\\\"depend\\\": \\\"RDKit library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A field technician experienced in operating and maintaining GPS tracking equipment", "synthesized text": "\"{\\n\\\"name\\\": \\\"GPS Data Parsing Interface\\\",\\n\\\"description\\\": \\\"Parses raw GPS data into a more human-readable format including latitude, longitude, altitude and timestamp.\\\",\\n\\\"function_name\\\": \\\"parse_gps_data\\\",\\n\\\"input_args\\\": [\\\"filepath\\\"],\\n\\\"return\\\": \\\"DataFrame with columns ['Latitude', 'Longitude', 'Altitude', 'Time']\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"geopy\\\", \\\"pandas\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An astrophysicist specializing in celestial mechanics, providing expertise on orbital trajectories", "synthesized text": "\"{\\n\\\"name\\\": \\\"Orbital Trajectory Prediction Interface\\\", \\n\\\"description\\\": \\\"This interface takes the orbital elements of a celestial body and predicts its position and velocity vectors in an Earth Centered Inertial (ECI) coordinate frame.\\\", \\n\\\"function_name\\\": \\\"predict_orbital_trajectory\\\", \\n\\\"input_args\\\": [\\\"semimajor_axis\\\", \\\"eccentricity\\\", \\\"inclination\\\", \\\"raan\\\", \\\"argp\\\", \\\"nu\\\"], \\n\\\"return\\\": \\\"A dictionary containing the position and velocity vectors of the celestial body.\\\", \\n\\\"depend\\\": \\\"The function leverages the poliastro Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pixel artist skilled in creating authentic 8-bit visuals to complement the game's sound effects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pixel Art to Vector Art Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to convert pixel art to vector art. The user needs to provide the path to the pixel art image and the desired path for the vector art image. The output will be the path to the vector art image.\\\",\\n\\\"function_name\\\": \\\"pixel_to_vector_art\\\",\\n\\\"input_args\\\": [\\\"path_to_pixel_img\\\", \\\"path_to_vector_img\\\"],\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": [\\\"opencv-python\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A South African cricket podcaster known for their analysis of international cricket matches", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cricket Match Summary Interface\\\",\\n\\\"description\\\": \\\"This interface fetches summary of a cricket match using CricAPI. User inputs the match ID and gets a summary including details like teams, scores, and leading players.\\\",\\n\\\"function_name\\\": \\\"get_cricket_match_summary\\\",\\n\\\"input_args\\\": [\\\"match_id\\\"],\\n\\\"return\\\": \\\"A string summary of the cricket match.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"CricAPI\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A man struggling with depression, desperately searching for support and understanding", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Mental Health Support Interface\\\",\\n  \\\"description\\\": \\\"An interface that facilitates communication with a trained Crisis Counselor from Crisis Text Line.\\\",\\n  \\\"function_name\\\": \\\"send_message_to_crisis_text_line\\\",\\n  \\\"input_args\\\": [\\\"phone_number\\\", \\\"message\\\"],\\n  \\\"return\\\": \\\"Response from the Crisis Text Line API about the message that was sent.\\\",\\n  \\\"depend\\\": \\\"requests library, Crisis Text Line API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local fisherman from Michigan who has a property on the shore of Lake Huron", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Fish Species Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the species of a fish based on its weight, length, and color using a pre-trained deep learning model\\\",\\n  \\\"function_name\\\": \\\"predict_fish_species\\\",\\n  \\\"input_args\\\": [\\\"weight\\\", \\\"length\\\", \\\"color\\\"],\\n  \\\"return\\\": \\\"The predicted species of the fish as a string\\\",\\n  \\\"depend\\\": [\\\"tensorflow\\\", \\\"sklearn.preprocessing\\\", \\\"pandas\\\", \\\"Machine Learning Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I'm an elderly shop owner who has been running a family-owned hardware store for decades.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inventory Management Interface\\\",\\n\\\"description\\\": \\\"An interface to manage inventory in a CSV file, including checking available stock, adding new stock, or removing sold stock.\\\",\\n\\\"function_name\\\": [\\\"check_stock\\\", \\\"add_stock\\\", \\\"remove_stock\\\"],\\n\\\"input_args\\\": [\\\"item_name\\\", \\\"quantity\\\"],\\n\\\"return\\\": \\\"The updated quantity of the item or an error message if the item is not in the inventory or there is not enough stock to remove.\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dyslexic adult who is actively involved in advancing scientific understanding of dyslexia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text to Speech Conversion Interface\\\",\\n\\\"description\\\": \\\"Converts input text to an audio file using Google Text-to-Speech (gTTS), allowing users to listen to the text instead of reading it.\\\",\\n\\\"function_name\\\": \\\"convert_text_to_speech\\\",\\n\\\"input_args\\\": [\\\"input_text\\\", \\\"filename\\\"],\\n\\\"return\\\": \\\"filename of the generated audio file\\\",\\n\\\"depend\\\": \\\"gTTS library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager who understands the importance of network simulations in decision-making processes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Network Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the degree centrality of a network, given a list of edges. Degree centrality is a measure of the importance of a node in a network.\\\",\\n\\\"function_name\\\": \\\"calculate_degree_centrality\\\",\\n\\\"input_args\\\": \\\"edge_list\\\",\\n\\\"return\\\": \\\"Dictionary where keys are the nodes in the network and values are their corresponding degree centrality.\\\",\\n\\\"depend\\\": \\\"networkx Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A progressive young artist living in the same rural community, constantly challenging the conservative beliefs with their art", "synthesized text": "\"{\\n\\\"name\\\": \\\"Art Style Transfer Interface\\\",\\n\\\"description\\\": \\\"This interface applies the style of one image to another image using a pre-trained model from TensorFlow Hub. The user inputs the paths to their content and style image files, and the interface returns the content image with the style of the style image.\\\",\\n\\\"function_name\\\": \\\"apply_art_style\\\",\\n\\\"input_args\\\": [\\\"content_img_path\\\", \\\"style_img_path\\\"],\\n\\\"return\\\": \\\"A numpy array representing the stylized image\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software developer developing an application that heavily relies on a well-optimized database structure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Structure Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface automates the process of optimizing a database structure. It uses SQLAlchemy to reflect the current database structure, and then iterates over each table and its indexes. If it finds an index that is unique and only contains one column, it alters the table to make that index the primary key.\\\",\\n\\\"function_name\\\": \\\"optimize_database_structure\\\",\\n\\\"input_args\\\": {\\n    \\\"db_url\\\": \\\"The URL to the database that should be optimized.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary where the keys are table names and the values are SQLAlchemy Table objects reflecting the optimized structure of each table.\\\",\\n\\\"depend\\\": \\\"Python SQLAlchemy and Database Server (PostgreSQL, MySQL, SQLite, etc.)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who has an MPH degree and worked at a public health agency.", "synthesized text": "\"{\\n\\\"name\\\": \\\"COVID-19 Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the COVID-19 Data Repository by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University to fetch the latest data and return the total confirmed, death, and recovered cases for the specified country.\\\",\\n\\\"function_name\\\": \\\"get_covid_data\\\",\\n\\\"input_args\\\": [\\\"country\\\"],\\n\\\"return\\\": {\\\"confirmed\\\": \\\"total confirmed cases\\\", \\\"deaths\\\": \\\"total death cases\\\", \\\"recovered\\\": \\\"total recovered cases\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\"], \\\"web APIs\\\": [\\\"COVID-19 Data Repository by CSSE at Johns Hopkins University\\\"], \\\"machine learning models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "A concerned citizen who uncovers a potential drug safety issue and reaches out to the FDA official for investigation", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Drug Adverse Event Reporting Interface\\\",\\n    \\\"description\\\": \\\"An interface to report adverse drug events to FDA using their API. It requires patient's initials, age, gender, drug name, and event details as input.\\\",\\n    \\\"function_name\\\": \\\"report_adverse_drug_event\\\",\\n    \\\"input_args\\\": {\\n        \\\"patient_initial\\\": \\\"String - Patient's initials\\\",\\n        \\\"age\\\": \\\"Number - Patient's age\\\",\\n        \\\"gender\\\": \\\"Number - Patient's gender (1 for male, 2 for female)\\\",\\n        \\\"drug_name\\\": \\\"String - Name of the drug\\\",\\n        \\\"event_details\\\": \\\"String - Details of the adverse event\\\"\\n    },\\n    \\\"return\\\": \\\"String - Message indicating whether the report was successfully sent or not.\\\",\\n    \\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"FDA's API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A play-by-play announcer who vividly describes Daisuke Matsuzaka's pitching exploits to a captivated audience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baseball Pitch Analysis Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that uses machine learning to analyze the pitching style of a baseball player from video footage. It returns a detailed analysis of the pitching style, including pitch speed, pitch type, and release point.\\\",\\n\\\"function_name\\\": \\\"analyze_pitch\\\",\\n\\\"input_args\\\": {\\\"video_path\\\": \\\"The path to a video file of the player's pitching.\\\"},\\n\\\"return\\\": \\\"A detailed analysis of the pitching style, including pitch speed, pitch type, and release point.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"cv2\\\", \\\"numpy\\\", \\\"tensorflow\\\"], \\\"machine learning models\\\": [\\\"A pre-trained model from TensorFlow for pitch analysis\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A reputable contractor with experience in home repairs and renovations, who can assess the damage and provide accurate cost estimates for repairs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Repair Cost Estimator Interface\\\",\\n\\\"description\\\": \\\"This interface takes a user's location and the type of home repair needed, and returns an estimated cost for the repair.\\\",\\n\\\"function_name\\\": \\\"estimate_home_repair_cost\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"repair_type\\\"],\\n\\\"return\\\": \\\"Estimated cost for the specified home repair.\\\",\\n\\\"depend\\\": {\\n        \\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\"],\\n        \\\"Web APIs\\\": [\\\"Zillow Home Value API\\\", \\\"Craftsman's National (U.S.) Repair and Remodeling Estimator Database\\\"],\\n        \\\"machine learning models\\\": []\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A certified Microsoft System Engineer with little experience in Ubuntu and Postgresql", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Backup Interface\\\",\\n\\\"description\\\": \\\"This interface creates a backup of a PostgreSQL database on an Ubuntu server.\\\",\\n\\\"function_name\\\": \\\"backup_postgresql_database\\\",\\n\\\"input_args\\\": [\\\"database_name\\\", \\\"username\\\", \\\"password\\\", \\\"host\\\", \\\"port\\\", \\\"backup_file_path\\\"],\\n\\\"return\\\": \\\"Backup created at {backup_file_path}\\\",\\n\\\"depend\\\": [\\\"Python built-in libraries: os, subprocess\\\", \\\"PostgreSQL command line utility: pg_dump\\\"]\\n}\"", "description": "tool development"}
{"input persona": "我是一位公共卫生研究者，关注全球疾病防控和疫苗开发的新进展。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Vaccine Development Status Tracker\\\",\\n  \\\"description\\\": \\\"This interface uses APIs from ClinicalTrials.gov and web scraping from FDA and EMA websites to provide the latest development and approval status of a specific vaccine.\\\",\\n  \\\"function_name\\\": \\\"get_vaccine_status\\\",\\n  \\\"input_args\\\": {\\\"vaccine_name\\\": \\\"string\\\"},\\n  \\\"return\\\": {\\\"Clinical Trial Status\\\": \\\"string\\\", \\\"FDA Approval\\\": \\\"string\\\", \\\"EMA Approval\\\": \\\"string\\\"},\\n  \\\"depend\\\": [\\\"requests\\\", \\\"bs4\\\", \\\"ClinicalTrials.gov API\\\", \\\"FDA website\\\", \\\"EMA website\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A dedicated high school basketball coach whose team's Cinderella story is often featured in local sports segments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Game Stats Analysis Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that allows a user to input a CSV file path of the game stats, and our interface will return a summary of the stats, including the average, maximum, and minimum of each statistic.\\\",\\n\\\"function_name\\\": \\\"analyze_stats\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"stats_summary\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "an internet-savvy Gen Z meme lord", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meme Generation Interface\\\",\\n\\\"description\\\": \\\"Generates a meme using the Imgflip API. The user inputs text for the top and bottom of the meme, and the function returns a URL to the generated meme.\\\",\\n\\\"function_name\\\": \\\"generate_meme\\\",\\n\\\"input_args\\\": {\\n    \\\"top_text\\\": \\\"string\\\",\\n    \\\"bottom_text\\\": \\\"string\\\"\\n},\\n\\\"return\\\": \\\"string (URL)\\\",\\n\\\"depend\\\": \\\"Imgflip API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A technophobe older gentleman who lives in a rural area and relies on his old analog TV for news.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Digital TV Signal Strength Check Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to check the strength of digital TV signals at a specific location. It uses an API from the Federal Communications Commission (FCC) and a Google API to convert addresses to latitude and longitude.\\\",\\n  \\\"function_name\\\": \\\"check_digital_tv_signal_strength\\\",\\n  \\\"input_args\\\": {\\n    \\\"address\\\": \\\"The user's address.\\\"\\n  },\\n  \\\"return\\\": \\\"The strength of the digital TV signals at the given location.\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"FCC's API\\\", \\\"Google Geocoding API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Jewish community leader in France who encourages building connections between different cultural communities", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Jewish Holidays Date Finder Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Hebcal Jewish Calendar REST API to find dates for Jewish holidays for a given year.\\\",\\n  \\\"function_name\\\": \\\"get_jewish_holidays\\\",\\n  \\\"input_args\\\": \\\"year\\\",\\n  \\\"return\\\": \\\"list of dictionaries with 'date' and 'title' as keys for each Jewish holiday in the specified year\\\",\\n  \\\"depend\\\": \\\"Hebcal Jewish Calendar REST API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nail polish brand representative seeking creative input for new nail art designs", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Nail Art Design Suggestion Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a GAN model from TensorFlow Hub to generate new and unique nail art designs.\\\",\\n  \\\"function_name\\\": \\\"generate_nail_art_design\\\",\\n  \\\"input_args\\\": [],\\n  \\\"return\\\": \\\"A PIL Image object of a new nail art design.\\\",\\n  \\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\", \\\"PIL\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A sibling who runs a small farm and supplies organic, homemade dog treats", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dog Treat Ingredient Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface provides nutritional values of the ingredients used in dog treats. It leverages USDA FoodData Central API to fetch the data.\\\",\\n\\\"function_name\\\": \\\"get_nutritional_values\\\",\\n\\\"input_args\\\": [\\\"ingredients\\\"],\\n\\\"return\\\": \\\"Dictionary of nutrients and their amounts for the provided ingredients.\\\",\\n\\\"depend\\\": \\\"USDA FoodData Central API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A marketing specialist who advises on the best strategies to earn money through InboxDollars promotions", "synthesized text": "\"{\\n\\\"name\\\": \\\"InboxDollars Earnings Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface that uses machine learning to predict and recommend the most profitable tasks for an InboxDollars user.\\\",\\n\\\"function_name\\\": \\\"recommend_tasks\\\",\\n\\\"input_args\\\": \\\"user_id\\\",\\n\\\"return\\\": \\\"A list of recommended tasks that could potentially earn the most money.\\\",\\n\\\"depend\\\": \\\"Scikit-learn library, InboxDollars' database\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced health technology assessment (HTA) investigator", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clinical Trials Data Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to search and extract data from clinical trials based on certain criteria. Returns a list of clinical trials including details like NCT Number, Title, Status, Study Results, Conditions, Interventions, Outcome Measures, Sponsor, and Locations.\\\",\\n\\\"function_name\\\": \\\"extract_clinical_trials_data\\\",\\n\\\"input_args\\\": {\\n    \\\"search_terms\\\": \\\"string, representing the search terms used to filter the clinical trials\\\"\\n},\\n\\\"return\\\": \\\"List of dictionaries, with each dictionary representing a clinical trial and its details\\\",\\n\\\"depend\\\": \\\"requests library, ClinicalTrials.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A loving and protective figure who constantly reminds the player of the importance of self-care and financial security", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Health Check Interface\\\",\\n\\\"description\\\": \\\"This interface connects with users' bank accounts through the Plaid API, processes their transactions, and provides a summary of their spending habits and savings.\\\",\\n\\\"function_name\\\": \\\"financial_health_check\\\",\\n\\\"input_args\\\": {\\n\\\"public_token\\\": \\\"The public token is a string that represents the user's bank account credentials.\\\"\\n},\\n\\\"return\\\": {\\n\\\"total_spent\\\": \\\"The total amount of money the user has spent.\\\",\\n\\\"total_income\\\": \\\"The total income of the user.\\\",\\n\\\"savings\\\": \\\"The amount of money the user has saved.\\\"\\n},\\n\\\"depend\\\": \\\"Plaid API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An office administrative assistant in Iowa who has never experienced workplace injury before", "synthesized text": "\"{\\n\\\"name\\\": \\\"OSHA Recordkeeping Interface\\\",\\n\\\"description\\\": \\\"An interface to access the details of workplace injuries in a particular industry or region using the OSHA API.\\\",\\n\\\"function_name\\\": \\\"get_workplace_injuries\\\",\\n\\\"input_args\\\": {\\n    \\\"industry\\\": \\\"The industry in which the user is interested\\\",\\n    \\\"region\\\": \\\"The region in which the user is interested\\\"\\n},\\n\\\"return\\\": \\\"A JSON object containing the details of workplace injuries in the specified industry and region.\\\",\\n\\\"depend\\\": \\\"OSHA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A black belt martial artist who guides and mentors the teenager in their martial arts journey", "synthesized text": "\"{\\n\\\"name\\\": \\\"Martial Arts Technique Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a video of a student performing a martial arts technique and returns keyframes where the student's pose matches the pose of a perfect execution of the technique.\\\",\\n\\\"function_name\\\": \\\"analyze_technique\\\",\\n\\\"input_args\\\": [\\\"path_to_video\\\", \\\"technique\\\"],\\n\\\"return\\\": \\\"List of keyframes where the student's pose matches the pose of a perfect execution of the technique.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Custom pose matching function\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer developing DRM technologies for digital content protection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Digital Content Watermark Interface\\\",\\n\\\"description\\\": \\\"An interface to embed a hidden watermark into a file to protect intellectual property.\\\",\\n\\\"function_name\\\": \\\"embed_watermark\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"watermark_text\\\"],\\n\\\"return\\\": [\\\"watermarked_file_path\\\", \\\"key\\\", \\\"iv\\\"],\\n\\\"depend\\\": [\\\"Python library: PyCryptoDome\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A real estate agent who can provide insights on potential locations for the bakery's expansion", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Insights Interface\\\",\\n\\\"description\\\": \\\"Provides real estate information for a specific region, including average property values and information for subregions. This can help business owners decide where to expand their business.\\\",\\n\\\"function_name\\\": \\\"get_property_insights\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": {\\\"average_property_value\\\": \\\"string\\\", \\\"subregions\\\": [\\\"string\\\"], \\\"subregion_values\\\": [\\\"string\\\"]},\\n\\\"depend\\\": [\\\"Zillow API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A person who has never heard the name \"Ruti Broudo\"", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Artwork Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained model to classify the genre or style of an artwork.\\\",\\n  \\\"function_name\\\": \\\"analyze_artwork\\\",\\n  \\\"input_args\\\": \\\"path_to_img: The path to the artwork image file.\\\",\\n  \\\"return\\\": \\\"predicted_class: The predicted class of the artwork, represented as an integer.\\\",\\n  \\\"depend\\\": \\\"Python libraries: TensorFlow, TensorFlow Hub. Machine learning model: EfficientNet from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A leader in Material Science, well-known for his research on bio-based polymers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Properties Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from the Hugging Face Model Hub to predict the properties of a material based on its composition. The user only needs to input the composition of the material, and the interface will return the predicted properties of the material.\\\",\\n\\\"function_name\\\": \\\"predict_properties\\\",\\n\\\"input_args\\\": \\\"composition\\\",\\n\\\"return\\\": \\\"predicted properties of the material\\\",\\n\\\"depend\\\": \\\"Hugging Face Model Hub, transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a ringette coach from Finland", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the performance of ringette players using a pre-trained RandomForestRegressor model.\\\",\\n\\\"function_name\\\": \\\"analyze_player_performance\\\",\\n\\\"input_args\\\": \\\"player_stats - A dictionary with keys as the stat names and values as the stat values (e.g., {'Goals': 10, 'Assists': 15, 'Blocks': 5})\\\",\\n\\\"return\\\": \\\"A performance score indicating the player's overall performance.\\\",\\n\\\"depend\\\": \\\"sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "Anaconda3 proficient software engineer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dataframe Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts files of types CSV, JSON, and Excel into pandas dataframes for further data analysis.\\\",\\n\\\"function_name\\\": \\\"convert_to_dataframe\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the file.\\\", \\\"file_type\\\": \\\"The type of the file, can be 'csv', 'json', or 'excel'.\\\"},\\n\\\"return\\\": \\\"A pandas dataframe created from the input file.\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional pianist specializing in creating music for horror films.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horror Theme Music Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Magenta's Music Transformer to generate horror theme music. It takes in a tempo (bpm), key (like 'C', 'D#', etc.), and number of bars and returns a MIDI file with the generated music.\\\",\\n\\\"function_name\\\": \\\"generate_horror_theme\\\",\\n\\\"input_args\\\": [\\\"tempo\\\", \\\"key\\\", \\\"bars\\\"],\\n\\\"return\\\": \\\"MIDI file with the generated music\\\",\\n\\\"depend\\\": \\\"Magenta's Music Transformer Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a local journalist from Málaga with a deep interest in the political history of Andalucía and Spain.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Spanish Political History Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches and analyzes Wikipedia data on Spanish political history for a given time period, returning the most frequently mentioned topics.\\\",\\n\\\"function_name\\\": \\\"analyze_political_history\\\",\\n\\\"input_args\\\": \\\"time_period - The time period of interest, specified in years (e.g. '1960-1970').\\\",\\n\\\"return\\\": \\\"A list of the 10 most frequently mentioned political topics during the specified time period.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, nltk; Web APIs: Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business owner who values transparency and clear communication throughout the project lifecycle", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Project Progress Tracking Interface\\\",\\n  \\\"description\\\": \\\"An interface that allows users to input their Trello board id and API key to get the current status of all tasks in the board.\\\",\\n  \\\"function_name\\\": \\\"get_board_tasks_status\\\",\\n  \\\"input_args\\\": [\\\"board_id\\\", \\\"api_key\\\", \\\"token\\\"],\\n  \\\"return\\\": \\\"A dictionary with list names as keys and lists of tasks under each list as values.\\\",\\n  \\\"depend\\\": [\\\"Trello API\\\", \\\"requests library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired pediatrician who was actively practicing during the times before and after the enactment of the Infant Formula Act of 1980.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Infant Nutrition Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves nutrient information about infant formulas from the USDA's FoodData Central API. The user inputs the name of the infant formula, and the interface returns the nutrient content of that formula.\\\",\\n\\\"function_name\\\": \\\"get_infant_formula_nutrients\\\",\\n\\\"input_args\\\": {\\n    \\\"formula_name\\\": \\\"string\\\"\\n},\\n\\\"return\\\": \\\"dictionary (key: nutrient name, value: nutrient amount)\\\",\\n\\\"depend\\\": \\\"USDA's FoodData Central API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a political scientist who specializes in electoral politics of African countries.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Election Result Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the result of an election based on previous election data and current political climate.\\\",\\n\\\"function_name\\\": \\\"predict_election_result\\\",\\n\\\"input_args\\\": [\\\"country\\\"],\\n\\\"return\\\": \\\"Dictionary with predicted probabilities of each party winning the election.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious explorer competing to discover and claim treasures in remote regions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Treasure Hunt Route Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the user's current location and a list of treasure locations, and returns an optimal route that minimizes travel time using the OpenRouteService API.\\\",\\n\\\"function_name\\\": \\\"optimize_treasure_hunt_route\\\",\\n\\\"input_args\\\": [\\\"current_location\\\", \\\"treasure_locations\\\"],\\n\\\"return\\\": \\\"An optimized route (list of coordinates) for a treasure hunt.\\\",\\n\\\"depend\\\": \\\"OpenRouteService API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a strict Spanish law enforcement officer", "synthesized text": "\"{\\n\\\"name\\\": \\\"License Plate Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that uses OpenALPR library to recognize and return license plate number from an image.\\\",\\n\\\"function_name\\\": \\\"get_license_plate_from_image\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"License plate number (string)\\\",\\n\\\"depend\\\": \\\"OpenALPR library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a machine learning scientist with a special interest in the use of neural networks in approximating and solving differential equations, especially stochastic ones.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stochastic Differential Equation Solver Interface\\\",\\n\\\"description\\\": \\\"An interface to solve stochastic differential equations. The user inputs the drift and diffusion functions that define the SDE, the initial conditions, a time span to solve over, and any arguments for the drift and diffusion functions. The interface returns the solution to the SDE over the given time span.\\\",\\n\\\"function_name\\\": \\\"solve_sde\\\",\\n\\\"input_args\\\": {\\n  \\\"drift_func\\\": \\\"A function that defines the drift term of the SDE.\\\",\\n  \\\"diffusion_func\\\": \\\"A function that defines the diffusion term of the SDE.\\\",\\n  \\\"initial_conditions\\\": \\\"The initial conditions for the SDE.\\\",\\n  \\\"tspan\\\": \\\"An array-like object that defines the time span to solve over.\\\",\\n  \\\"args\\\": \\\"A tuple of any arguments for the drift and diffusion functions.\\\"\\n},\\n\\\"return\\\": \\\"A 2D array in which the rows correspond to different time points and the columns correspond to different variables in the system. The array contains the solution to the SDE over the given time span.\\\",\\n\\\"depend\\\": \\\"sdeint\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retired Japanese sports journalist who has a passion for winter sports and has followed Tomoka Takenouchi's career closely.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Winter Sports Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the name of a winter sports athlete and returns the career statistics for that athlete.\\\",\\n\\\"function_name\\\": \\\"get_athlete_statistics\\\",\\n\\\"input_args\\\": \\\"athlete\\\",\\n\\\"return\\\": \\\"Career statistics of the given athlete in winter sports\\\",\\n\\\"depend\\\": \\\"APIs from sports data providers (e.g., Sportsdata.io)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a personal assistant that is keen on keeping track of national and regional events, with an interest in history.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Events Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch significant historical events that happened on a particular day using the Wikipedia API.\\\",\\n\\\"function_name\\\": \\\"historical_events\\\",\\n\\\"input_args\\\": {\\n  \\\"day\\\": \\\"Day of the month in numerical format\\\",\\n  \\\"month\\\": \\\"Month in word format\\\"\\n},\\n\\\"return\\\": \\\"List of significant historical events that occurred on the input day\\\",\\n\\\"depend\\\": \\\"wikipediaapi Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An oncology nurse who had Dr. Edward T. Creagan as a professor.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Cancer Research Paper Classification Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches abstracts of the latest cancer research papers from PubMed and uses a pre-trained natural language processing model to classify them as either 'Relevant' or 'Not Relevant' to the user's specific field within oncology.\\\",\\n  \\\"function_name\\\": \\\"classify_research_papers\\\",\\n  \\\"input_args\\\": [\\\"terms\\\"],\\n  \\\"return\\\": [\\\"Relevant abstracts\\\"],\\n  \\\"depend\\\": \\\"Hugging Face Transformers library, PubMed API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business owner looking to hire a marketing specialist with a strong understanding of economic principles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Description Generation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a large language model to generate a job description from a few keywords and job titles.\\\",\\n\\\"function_name\\\": \\\"generate_job_description\\\",\\n\\\"input_args\\\": [\\\"job_title\\\", \\\"keywords\\\"],\\n\\\"return\\\": \\\"A string containing a complete job description.\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow AI addict in recovery who shares their struggles and triumphs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Screen Time Monitoring Interface\\\",\\n\\\"description\\\": \\\"An interface to monitor the total active screen time of a user.\\\",\\n\\\"function_name\\\": [\\\"start_monitoring\\\", \\\"stop_monitoring\\\", \\\"calculate_screen_time\\\"],\\n\\\"input_args\\\": {\\\"start_monitoring\\\": [], \\\"stop_monitoring\\\": [], \\\"calculate_screen_time\\\": []},\\n\\\"return\\\": {\\\"start_monitoring\\\": \\\"None\\\", \\\"stop_monitoring\\\": \\\"Total time in hours\\\", \\\"calculate_screen_time\\\": \\\"Total time in hours or Exception\\\"},\\n\\\"depend\\\": [\\\"psutil\\\", \\\"time\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A popular artist looking to use the beat maker's remixes in their upcoming album", "synthesized text": "\"{\\n\\\"name\\\": \\\"Beat Extraction and Remix Interface\\\",\\n\\\"description\\\": \\\"This interface extracts beats from a music file and remixes them in a new style.\\\",\\n\\\"function_name\\\": \\\"remix_beats\\\",\\n\\\"input_args\\\": [\\\"music_file\\\", \\\"style\\\"],\\n\\\"return\\\": \\\"A new music file with the remixed beats.\\\",\\n\\\"depend\\\": \\\"Libraries: librosa, pydub\\\"\\n}\"", "description": "tool development"}
{"input persona": "Программист Python, со средним уровнем владения языком, заинтересованный в автоматизации рутинных задач.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python File Organizer Interface\\\",\\n\\\"description\\\": \\\"This interface organizes files in a specified directory by their type (extension), moving them to subdirectories corresponding to their types.\\\",\\n\\\"function_name\\\": \\\"organize_files_by_type\\\",\\n\\\"input_args\\\": {\\\"directory\\\": \\\"The absolute path of the directory to be organized.\\\"},\\n\\\"return\\\": {\\\"None\\\": \\\"The function prints a message when the organization process is completed.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"os\\\", \\\"shutil\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A graduate student conducting research on artificial intelligence algorithms for Unix systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Unix Log Analysis Interface\\\", \\n\\\"description\\\": \\\"An interface to parse Unix system logs and return a pandas DataFrame for easy data analysis.\\\", \\n\\\"function_name\\\": \\\"parse_unix_log\\\", \\n\\\"input_args\\\": \\\"log_file_path\\\", \\n\\\"return\\\": \\\"Dataframe with columns: 'timestamp', 'pid', 'log_level', and 'message'.\\\", \\n\\\"depend\\\": \\\"Python's built-in libraries: os, re, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high-profile client with specific design requirements and strict deadlines", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vector Image Generation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained DALL-E model from huggingface to generate custom vector images based on textual descriptions.\\\",\\n\\\"function_name\\\": \\\"text_to_image\\\",\\n\\\"input_args\\\": [\\\"description\\\"],\\n\\\"return\\\": \\\"PIL Image Object\\\",\\n\\\"depend\\\": {\\\"python_libraries\\\": [\\\"PIL\\\", \\\"torch\\\", \\\"torchvision\\\", \\\"dall_e\\\"], \\\"machine_learning_models\\\": [\\\"DALL-E from huggingface\\\"], \\\"web_APIs\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "a geologist & researcher who specializes in the history of coal mining.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coal Mining History Data Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve historical data of a specific coal mine from the U.S. Department of Labor's Mine Data Retrieval System.\\\",\\n\\\"function_name\\\": \\\"get_coal_mine_history\\\",\\n\\\"input_args\\\": \\\"mine_id\\\",\\n\\\"return\\\": \\\"Historical data of the specific coal mine in text format.\\\",\\n\\\"depend\\\": \\\"requests library, U.S. Department of Labor's Mine Data Retrieval System API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A prominent physician who has a revolutionary medical invention and needs help bringing it to market", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patent Search Interface\\\",\\n\\\"description\\\": \\\"Searches worldwide patents for similar inventions\\\",\\n\\\"function_name\\\": \\\"search_similar_patents\\\",\\n\\\"input_args\\\": \\\"invention_name\\\",\\n\\\"return\\\": \\\"The number of similar patents already filed\\\",\\n\\\"depend\\\": \\\"Google Patents Public Datasets API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an alumnus of Kabelo Secondary School, now working as a community development officer in Polokwane.", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Alumni Data Interface\\\",\\n\\\"description\\\": \\\"This interface enables querying and updating of alumni data in a database. It returns an alumnus' current occupation and location and allows for updating this information.\\\",\\n\\\"function_name\\\": [\\\"get_alumni_info\\\", \\\"update_alumni_info\\\"],\\n\\\"input_args\\\": [\\\"alumni_name\\\", \\\"new_occupation\\\", \\\"new_location\\\"],\\n\\\"return\\\": \\\"For get_alumni_info, it returns a dictionary with keys 'name', 'occupation', 'location'. For update_alumni_info, there is no return value.\\\",\\n\\\"depend\\\": \\\"This function leverages the SQLAlchemy Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A potential patient looking for a reputable dermatology clinic for a check-up.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clinic Reputation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches detailed reviews and ratings of a specific clinic from Google Places.\\\",\\n\\\"function_name\\\": \\\"get_clinic_reviews\\\",\\n\\\"input_args\\\": \\\"clinic_name - The name of the clinic.\\\",\\n\\\"return\\\": \\\"A dictionary that contains the name, overall rating, and ten latest reviews of the clinic.\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bed and breakfast owner who offers medieval-themed accommodation for festival attendees", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medieval Festival Schedule Search Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves upcoming medieval-themed festivals based on the user's location.\\\",\\n\\\"function_name\\\": \\\"get_medieval_festivals\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"festivals\\\": \\\"list of strings\\\"},\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python Library\\\", \\\"beautifulsoup4\\\": \\\"Python Library\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A tenacious and skilled litigator who always pushes the persona to their limits in court battles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google's Document Understanding AI to analyze and understand a legal document, turning it into structured data\\\",\\n\\\"function_name\\\": \\\"analyze_legal_document\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the legal document to be analyzed\\\"},\\n\\\"return\\\": \\\"Prints out the structured understanding of the document's content, including tables\\\",\\n\\\"depend\\\": \\\"Google Cloud's Document Understanding AI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A database administrator offering suggestions to optimize the script's database queries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Query Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface that accepts a SQL query and a database connection string as input, analyzes the query, and provides suggestions for optimizing the query.\\\",\\n\\\"function_name\\\": \\\"suggest_query_optimization\\\",\\n\\\"input_args\\\": [\\\"query\\\", \\\"db_connection_string\\\"],\\n\\\"return\\\": \\\"Suggestions for optimizing the query or issues in the query that need to be addressed.\\\",\\n\\\"depend\\\": [\\\"sqlparse\\\", \\\"psycopg2\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hematologist with expertise in bone marrow transplantation and extensive knowledge of diverse genetic markers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Marker Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a file containing genetic marker data as input, and returns a list of markers associated with a high likelihood of successful bone marrow transplantation.\\\",\\n\\\"function_name\\\": \\\"analyze_genetic_markers\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A list of important genetic markers.\\\",\\n\\\"depend\\\": \\\"Python library: scikit-learn, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Moroccan historian focusing on the country's royal lineage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Documents Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates historical documents from Ancient Arabic to Modern Standard Arabic or English, making it easy for historians to read and analyze these documents without needing knowledge of Ancient Arabic.\\\",\\n\\\"function_name\\\": \\\"translate_historical_document\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"the text in Ancient Arabic that needs to be translated\\\"\\n},\\n\\\"return\\\": \\\"the translated text in Modern Standard Arabic or English\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local RC plane club member who shares tips and tricks for mastering the hobby", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wind Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface provides a forecast of wind speed and direction using OpenWeatherMap API. Users need to input the latitude and longitude of the location\\\",\\n\\\"function_name\\\": \\\"get_wind_forecast\\\",\\n\\\"input_args\\\": \\\"lat, lon\\\",\\n\\\"return\\\": \\\"A list of dictionaries with each dictionary containing the timestamp of forecast, wind speed and wind direction.\\\",\\n\\\"depend\\\": \\\"requests python library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst providing detailed enrollment projections and trends for program evaluation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Enrollment Projections and Trends Interface\\\",\\n\\\"description\\\": \\\"This interface uses pandas for data manipulation, matplotlib for data visualization, and scikit-learn for machine learning to create a simple pipeline to project enrollments and visualize trends.\\\",\\n\\\"function_name\\\": \\\"project_enrollment\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"program\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"Projected enrollment for the given year and a plot showing the enrollment trend.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A novice debater who relies heavily on statistical data and rarely uses historical context", "synthesized text": "\"{\\n\\\"name\\\": \\\"Statistical Data Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest statistical data for a given type and country from the World Bank API.\\\",\\n\\\"function_name\\\": \\\"get_statistical_data\\\",\\n\\\"input_args\\\": {\\n    \\\"data_type\\\": \\\"A string indicating the type of data to fetch. This should correspond to the indicator codes used by the World Bank API.\\\",\\n    \\\"country\\\": \\\"A string indicating the ISO-2 country code for which to fetch the data.\\\"\\n},\\n\\\"return\\\": \\\"Returns the latest statistical value for the given data type and country. If no data is available, a message indicating this is returned.\\\",\\n\\\"depend\\\": \\\"This interface relies on the 'requests' and 'pandas' Python libraries, and the World Bank API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A psychology major specializing in human-robot interaction and empathy in robotics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emotion Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface takes a text input and predicts the emotion conveyed in the text using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_emotion\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"Printed list of potential emotions and their associated scores.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\", \\\"torch\\\", \\\"numpy\\\", \\\"urllib\\\", \\\"csv\\\"], \\\"machine learning model\\\": \\\"cardiffnlp/twitter-roberta-base-emotion from Hugging Face\\\"}\\n}\"", "description": "tool development"}
{"input persona": "a second-year MSc student at Lucknow University", "synthesized text": "\"{\\n\\\"name\\\": \\\"Research Paper Summarization Interface\\\",\\n\\\"description\\\": \\\"This interface accepts the text of a research paper and returns a summarized version of the paper.\\\",\\n\\\"function_name\\\": \\\"summarize_research_paper\\\",\\n\\\"input_args\\\": \\\"paper_text - a string that represents the text of the research paper\\\",\\n\\\"return\\\": \\\"a string that is the summarized version of the research paper\\\",\\n\\\"depend\\\": \\\"This function relies on the Huggingface transformers library, specifically the BART model for text summarization.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Ski resort promoter in Isola 2000", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get the current weather and the forecast for the next three days for a specific location by leveraging the OpenWeatherMap API. The location is represented as a string in the format of 'City, Country'.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": {\\\"current_weather\\\": {\\\"temp\\\": 280.32, \\\"feels_like\\\": 277.14, \\\"temp_min\\\": 279.15, \\\"temp_max\\\": 281.48, \\\"pressure\\\": 1012, \\\"humidity\\\": 70}, \\\"three_day_forecast\\\": [{\\\"temp\\\": 279.15, \\\"feels_like\\\": 275.14, \\\"temp_min\\\": 278.15, \\\"temp_max\\\": 280.48, \\\"pressure\\\": 1013, \\\"humidity\\\": 72}, {\\\"temp\\\": 278.15, \\\"feels_like\\\": 274.14, \\\"temp_min\\\": 277.15, \\\"temp_max\\\": 279.48, \\\"pressure\\\": 1014, \\\"humidity\\\": 74}, {\\\"temp\\\": 277.15, \\\"feels_like\\\": 273.14, \\\"temp_min\\\": 276.15, \\\"temp_max\\\": 278.48, \\\"pressure\\\": 1015, \\\"humidity\\\": 76}]},\\n\\\"depend\\\": [\\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A professional who offers expert guidance on securing homes and provides insights on insurance requirements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Safety and Insurance Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Crime Data API to get the crime rate for a given location and a pre-trained machine learning model to recommend suitable insurance options based on the crime rate and the type of building.\\\",\\n\\\"function_name\\\": \\\"recommend_insurance\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"The location of the home.\\\",\\n    \\\"building_type\\\": \\\"The type of building (e.g., house, apartment, condo).\\\"\\n},\\n\\\"return\\\": \\\"The recommended insurance option.\\\",\\n\\\"depend\\\": \\\"Python's requests library for API requests, joblib for loading the machine learning model, and the Crime Data API and a pre-trained machine learning model for getting the crime rate and making insurance recommendations, respectively.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A restaurant owner who sources barbecue ingredients from the pitmaster's trusted suppliers", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Food Ingredients Quality Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the IBM Food Trust API to provide information about food products' quality and source based on their Universal Product Code (UPC).\\\",\\n  \\\"function_name\\\": \\\"get_food_quality_and_source\\\",\\n  \\\"input_args\\\": {\\n    \\\"UPC\\\": \\\"The Universal Product Code of the ingredient.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"quality\\\": \\\"Quality of the ingredient.\\\",\\n    \\\"source\\\": \\\"Source of the ingredient.\\\"\\n  },\\n  \\\"depend\\\": \\\"IBM Food Trust API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who suggests alternative ways to find information", "synthesized text": "\"{\\n\\\"name\\\": \\\"Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Elasticsearch to return the most relevant documents based on the user's search term.\\\",\\n\\\"function_name\\\": \\\"retrieve_information\\\",\\n\\\"input_args\\\": \\\"search_term - a string representing the user's search term.\\\",\\n\\\"return\\\": \\\"A list of documents (represented as dictionaries) that are the most relevant to the search term.\\\",\\n\\\"depend\\\": \\\"elasticsearch python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A beginner learning programming along with React and Redux to create more complex JavaScript applications.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Redux State Management Interface\\\", \\n\\\"description\\\": \\\"Generates the basic Redux boilerplate code for a new feature\\\", \\n\\\"function_name\\\": \\\"create_redux_boilerplate\\\", \\n\\\"input_args\\\": {\\\"feature_name\\\": \\\"string\\\"}, \\n\\\"return\\\": \\\"string\\\", \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"subprocess\\\"], \\\"web APIs\\\": [], \\\"machine learning models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "an Italian physics university student who looks up to Emilio Villari as a legend in the field", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Physics Equation Solver Interface\\\",\\n  \\\"description\\\": \\\"This interface uses SymPy library to solve a given physics equation for a specified variable.\\\",\\n  \\\"function_name\\\": \\\"solve_physics_equation\\\",\\n  \\\"input_args\\\": {\\n    \\\"equation\\\": \\\"The physics equation as a string that the user wants to solve.\\\",\\n    \\\"variable_to_solve\\\": \\\"The variable for which the user wants to solve the equation.\\\"\\n  },\\n  \\\"return\\\": \\\"The solution of the equation for the specified variable.\\\",\\n  \\\"depend\\\": \\\"SymPy python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professor specializing in business ethics and entrepreneurship, guiding the business major on how to ethically utilize her friend's artwork for profit", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Artwork Copyright Checker Interface\\\", \\n  \\\"description\\\": \\\"An interface to check if a given artwork image is already copyrighted by searching for its appearances on the internet. This helps business majors to ethically utilize artwork for profit.\\\", \\n  \\\"function_name\\\": \\\"get_image_search_results\\\", \\n  \\\"input_args\\\": {\\n    \\\"image_file\\\": \\\"The path to the artwork image file\\\"\\n  }, \\n  \\\"return\\\": {\\n    \\\"websites\\\": \\\"A list of websites where the artwork image appears\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Library\\\": \\\"requests, base64\\\",\\n    \\\"Web API\\\": \\\"Google Custom Search JSON API\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a British student studying astronomy in Manchester, where William Tobin was born", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sky Object Identification Interface\\\",\\n\\\"description\\\": \\\"An interface that identifies and labels astronomical objects in a given sky image.\\\",\\n\\\"function_name\\\": \\\"identify_sky_objects\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_image\\\": \\\"The path to the image file. The image should be in FITS format and should contain WCS information in its header.\\\"\\n},\\n\\\"return\\\": \\\"A higher resolution image with astronomical objects identified and labeled. The image is saved as 'annotated_image.png'.\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"astropy\\\", \\\"astroquery\\\", \\\"matplotlib\\\"],\\n    \\\"web APIs\\\": [],\\n    \\\"machine learning models\\\": []\\n}\\n}\"", "description": "tool development"}
{"input persona": "Lulu Qian's proud and supportive grandparent, who is mostly interested in her achievements but struggles to comprehend the technicalities of her work.", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA to RNA Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface for converting DNA sequences into RNA sequences using the BioPython library. Users input a DNA sequence, and the interface returns the corresponding RNA sequence.\\\",\\n\\\"function_name\\\": \\\"DNA_to_RNA\\\",\\n\\\"input_args\\\": {\\n    \\\"dna_sequence\\\": \\\"A string of DNA sequence (e.g., 'ATGCG')\\\"\\n},\\n\\\"return\\\": \\\"A string of the corresponding RNA sequence (e.g., 'AUGCG')\\\",\\n\\\"depend\\\": [\\\"BioPython library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A cognitive psychologist interested in understanding the relationship between perception and immersion in virtual reality", "synthesized text": "\"{\\n\\\"name\\\": \\\"Head Movement Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a video of a VR session and returns an analysis of head movements indicating the level of immersion and engagement in VR.\\\",\\n\\\"function_name\\\": \\\"analyze_head_movements\\\",\\n\\\"input_args\\\": {\\\"video_path\\\": \\\"Path to the video file.\\\"},\\n\\\"return\\\": {\\\"average_nod_per_frame\\\": \\\"Average amount of nod per frame.\\\", \\\"average_shake_per_frame\\\": \\\"Average amount of shake per frame.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"cv2\\\", \\\"dlib\\\", \\\"numpy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A fellow artist who has a unique perspective on the use of staging models in their own artwork", "synthesized text": "\"{\\n    \\\"name\\\": \\\"3D Model Visualizer Interface\\\",\\n    \\\"description\\\": \\\"An interface that allows users to visualize their 3D models in a rotatable, zoomable window\\\",\\n    \\\"function_name\\\": \\\"visualize_3d_model\\\",\\n    \\\"input_args\\\": \\\"path_to_model - The path to the 3D model file that the user wants to visualize\\\",\\n    \\\"return\\\": \\\"Displays a window with the 3D model which can be interacted with for better visualization\\\",\\n    \\\"depend\\\": \\\"Pyglet library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former student of Niall Livingstone who pursued a career in archaeology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancient Text Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates ancient text into English using machine translation services. Users only need to input the ancient text in its original language, and the interface will return a translated version of the text in English.\\\",\\n\\\"function_name\\\": \\\"translate_ancient_text\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"The ancient text in its original language\\\",\\n    \\\"source_language\\\": \\\"The language code of the original language\\\"\\n},\\n\\\"return\\\": \\\"The translated text in English\\\",\\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another professional boxer who has had epic battles with the professional boxer, resulting in a fierce rivalry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Boxer Match History Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve a list of boxers who have had epic battles with the input boxer, resulting in a fierce rivalry.\\\",\\n\\\"function_name\\\": \\\"get_boxer_rivals\\\",\\n\\\"input_args\\\": \\\"boxer_name - a string representing the name of the boxer\\\",\\n\\\"return\\\": \\\"a list of strings, each representing a boxer who has had a rivalry with the input boxer\\\",\\n\\\"depend\\\": \\\"API from BoxRec or similar boxing database\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pediatric gastroenterologist who specializes in treating children with celiac disease", "synthesized text": "\"{\\n\\\"name\\\": \\\"Celiac Disease Diagnosis Support Interface\\\", \\n\\\"description\\\": \\\"This interface utilizes a pre-trained model from huggingface to identify the occurrence of celiac disease symptoms from a patient's health report. It returns a likelihood of the patient having celiac disease.\\\", \\n\\\"function_name\\\": \\\"celiac_disease_diagnosis_support\\\",\\n\\\"input_args\\\": {\\\"health_report\\\": \\\"a string containing a patient's health report\\\"},\\n\\\"return\\\": {\\\"likelihood\\\": \\\"a float indicating the likelihood of celiac disease\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"ML models\\\": [\\\"huggingface: microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An oceanographer investigating the connection between ocean currents and magnetic field variations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Magnetic Field Data Interface\\\",\\n  \\\"description\\\": \\\"This interface retrieves magnetic field data for a given location using the USGS Geomagnetism Program's web service.\\\",\\n  \\\"function_name\\\": \\\"get_magnetic_field_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"latitude\\\": \\\"The latitude coordinate of the location where you want to get the magnetic field data.\\\",\\n    \\\"longitude\\\": \\\"The longitude coordinate of the location where you want to get the magnetic field data.\\\"\\n  },\\n  \\\"return\\\": \\\"A JSON object containing comprehensive information about the magnetic field at the specified location.\\\",\\n  \\\"depend\\\": \\\"requests library, USGS Geomagnetism Program Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An unempowered resident of Dudley feeling frustrated about her hometown's development compared to Kent and other prospering regions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Regional Development Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface makes use of UK government's public APIs to compare key development metrics between two regions. Users only need to input the names of two regions, and the interface will return a comparison of these key metrics.\\\",\\n\\\"function_name\\\": \\\"compare_regions\\\",\\n\\\"input_args\\\": [\\\"region1\\\", \\\"region2\\\"],\\n\\\"return\\\": \\\"A dictionary that represents a comparison of key development metrics between the two regions.\\\",\\n\\\"depend\\\": \\\"requests, pandas, UK government's public APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "a longtime admirer of Richard Holbrooke but who is unable to attend this talk", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes a video into text using the Google Speech-to-Text API.\\\",\\n\\\"function_name\\\": \\\"transcribe_video\\\",\\n\\\"input_args\\\": [\\\"video_url\\\"],\\n\\\"return\\\": \\\"Transcript of the video as a string.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"google.cloud.speech_v1p1beta1\\\"]\\n}\"", "description": "tool development"}
{"input persona": "dongbei Physics teacher", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Physics Problem Solver Interface\\\",\\n    \\\"description\\\": \\\"Solve physics problems with sympy\\\",\\n    \\\"function_name\\\": \\\"solve_physics_problem\\\",\\n    \\\"input_args\\\": {\\n        \\\"problem\\\": \\\"A physics problem described in text\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"solution\\\": \\\"The solution to the physics problem\\\"\\n    },\\n    \\\"depend\\\": \\\"Sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A zealous fan of Bill Renwick and admirer of his work in education", "synthesized text": "\"{\\n\\\"name\\\": \\\"Educator's Research Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches scholarly articles, research papers and books authored by a specific person using the Google Scholar API.\\\",\\n\\\"function_name\\\": \\\"fetch_scholarly_works\\\",\\n\\\"input_args\\\": \\\"author_name\\\",\\n\\\"return\\\": \\\"A list of the author's scholarly works.\\\",\\n\\\"depend\\\": \\\"scholarly Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mature high schooler with a lot of responsibility, working part-time in his aunt's beauty salon after school and on weekends.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Appointment Management Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Calendar API to help manage salon appointments. It inputs the service name, customer name, and appointment date and time, then creates an appointment on Google Calendar.\\\",\\n\\\"function_name\\\": \\\"create_event\\\",\\n\\\"input_args\\\": [\\\"service_name\\\", \\\"customer_name\\\", \\\"date_time\\\"],\\n\\\"return\\\": \\\"URL of the created appointment\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A meticulous film director known for their attention to historical accuracy in period dramas", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Movie Character Age Validation Interface\\\",\\n  \\\"description\\\": \\\"An interface that returns the age of a given actor during a specified year. Useful for maintaining historical accuracy in period dramas.\\\",\\n  \\\"function_name\\\": \\\"get_actor_age\\\",\\n  \\\"input_args\\\": {\\n    \\\"actor_name\\\": \\\"Name of the actor\\\",\\n    \\\"movie_year\\\": \\\"The year the movie is set\\\"\\n  },\\n  \\\"return\\\": \\\"The age of the actor during the year the movie is set\\\",\\n  \\\"depend\\\": \\\"IMDb python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A homemaker who doesn't use precision balances", "synthesized text": "\"{\\n\\\"name\\\": \\\"Kitchen Recipe Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface to convert recipe ingredients from weight (grams, ounces) to volume (cups, tablespoons, teaspoons) using the spoonacular API.\\\",\\n\\\"function_name\\\": \\\"convert_recipe_ingredient\\\",\\n\\\"input_args\\\": {\\n    \\\"ingredient\\\": \\\"The name of the ingredient to convert.\\\",\\n    \\\"source_amount\\\": \\\"The amount of the ingredient in the source unit.\\\",\\n    \\\"source_unit\\\": \\\"The unit of the source amount (e.g., grams, ounces).\\\"\\n},\\n\\\"return\\\": \\\"The equivalent amount of the ingredient in cups.\\\",\\n\\\"depend\\\": \\\"spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a researcher in theoretical physics with a particular interest in mathematical physics and the representation theory of Lie algebras and quantum groups.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Lie Algebra Representation Interface\\\",\\n  \\\"description\\\": \\\"This interface provides a way to compute the representation of a Lie algebra given its type and highest weight.\\\",\\n  \\\"function_name\\\": \\\"lie_algebra_representation\\\",\\n  \\\"input_args\\\": {\\n    \\\"algebra_type\\\": \\\"A string that denotes the type of the Lie algebra (e.g., 'A3', 'B2', 'C3', 'D4', etc.)\\\",\\n    \\\"highest_weight\\\": \\\"A list of integers that denotes the highest weight of the representation\\\"\\n  },\\n  \\\"return\\\": \\\"A sympy object that represents the Lie algebra representation. This object has various methods for computing properties of the representation, such as its dimension, character, and weight multiplicity.\\\",\\n  \\\"depend\\\": \\\"This function leverages the sympy Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A financial institution looking to optimize their messaging systems using MQ series technology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Messaging Interface Using IBM MQ\\\",\\n\\\"description\\\": \\\"An interface to send messages to a specified queue in IBM MQ. The user needs to input their queue manager, channel, host, port, queue name, and the message to be sent.\\\",\\n\\\"function_name\\\": \\\"send_message\\\",\\n\\\"input_args\\\": [\\\"queue_manager\\\", \\\"channel\\\", \\\"host\\\", \\\"port\\\", \\\"queue_name\\\", \\\"message\\\"],\\n\\\"return\\\": \\\"No return value. The function sends the message to the specified queue in the IBM MQ.\\\",\\n\\\"depend\\\": [\\\"pymqi\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a sports reporter and huge fan of rugby sevens", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rugby Match Score Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the score of a rugby match between two teams using a pre-trained BERT model.\\\",\\n\\\"function_name\\\": \\\"predict_rugby_score\\\",\\n\\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\"],\\n\\\"return\\\": \\\"tuple of two floats representing the predicted score for team1 and team2 respectively.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library (BertForSequenceClassification, BertTokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A guitarist in a street band in Puerto Rico", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chord Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the next chord sequence in a song using a pre-trained model from HuggingFace's Transformers library.\\\",\\n\\\"function_name\\\": \\\"predict_next_chords\\\",\\n\\\"input_args\\\": \\\"current_chords - A string representing the current chord progression in a song.\\\",\\n\\\"return\\\": \\\"A string representing the predicted next chord progression in the song.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A younger sister who became a fan of BTS after attending their concert with the input persona and now shares their passion for the group", "synthesized text": "\"{\\n\\\"name\\\": \\\"BTS Lyrics Interface\\\", \\n\\\"description\\\": \\\"This interface allows users to retrieve the lyrics of a BTS song by inputting the song title.\\\", \\n\\\"function_name\\\": \\\"get_bts_lyrics\\\", \\n\\\"input_args\\\": {\\\"song_name\\\": \\\"string\\\"}, \\n\\\"return\\\": \\\"string (song lyrics)\\\",\\n\\\"depend\\\": \\\"Python library: requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A certified RV mechanic with years of experience repairing and upgrading various types of RVs", "synthesized text": "\"{\\n\\\"name\\\": \\\"RV Repair Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the cost of repairing an RV based on the type and model of the RV, the specific issue, and the age of the RV.\\\",\\n\\\"function_name\\\": \\\"get_repair_cost_estimate\\\",\\n\\\"input_args\\\": [\\\"rv_type\\\", \\\"rv_model\\\", \\\"issue\\\", \\\"rv_age\\\"],\\n\\\"return\\\": \\\"Estimated repair cost\\\",\\n\\\"depend\\\": \\\"A machine learning model trained on historical RV repair data\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional poker player seeking guidance on developing a winning strategy for tournaments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poker Hand Strength Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the strength of a poker hand in relation to the community cards on the table.\\\",\\n\\\"function_name\\\": \\\"calculate_hand_strength\\\",\\n\\\"input_args\\\": {\\n    \\\"hand\\\": \\\"A list of two cards representing the user's hand. Each card is a two-character string representing the rank and suit.\\\",\\n    \\\"board\\\": \\\"A list of up to five cards representing the community cards on the table. Each card is a two-character string representing the rank and suit.\\\"\\n},\\n\\\"return\\\": \\\"The strength of the hand. A lower number indicates a stronger hand.\\\",\\n\\\"depend\\\": [\\\"deuces\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hot air balloon pilot who relies on the representative's guidance for purchasing and maintaining their balloon", "synthesized text": "\"{\\n\\\"name\\\": \\\"Balloon Maintenance Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts the date for the next maintenance of a hot air balloon based on the date of the last maintenance, the number of flights since the last maintenance, and the average flight duration.\\\",\\n\\\"function_name\\\": \\\"predict_next_maintenance\\\",\\n\\\"input_args\\\": [\\\"last_maintenance_date\\\", \\\"flights_since_last_maintenance\\\", \\\"avg_flight_duration\\\"],\\n\\\"return\\\": \\\"Predicted date for the next maintenance\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn.linear_model.LinearRegression\\\", \\\"datetime.timedelta\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a PhD student studying Terahertz (THz) and millimeter-wave (mmWave) communication technologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Signal Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface is designed to analyse the frequency content of a signal. It takes an input file containing time-domain signal values and returns the frequency spectrum of the signal.\\\",\\n\\\"function_name\\\": \\\"get_frequency_spectrum\\\",\\n\\\"input_args\\\": \\\"file_path - path to the input file\\\",\\n\\\"return\\\": \\\"A numpy array containing the frequency spectrum of the signal\\\",\\n\\\"depend\\\": \\\"SciPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An AI developer who started experiencing migraines due to long hours spent programming", "synthesized text": "\"{\\n \\\"name\\\": \\\"Break Reminder Interface\\\",\\n \\\"description\\\": \\\"This interface helps users manage their screen time. The user enters their preferred work and break durations, and the interface reminds them to take breaks.\\\",\\n \\\"function_name\\\": \\\"break_reminder\\\",\\n \\\"input_args\\\": {\\\"work_duration\\\": \\\"Amount of time (in minutes) the user wants to work before taking a break\\\", \\\"break_duration\\\": \\\"Duration of the break (in minutes)\\\"},\\n \\\"return\\\": \\\"Doesn't return a value, but prints messages to remind the user to work and take breaks\\\",\\n \\\"depend\\\": {\\\"python library\\\": [\\\"time\\\", \\\"os\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A commission-based salesperson who wants to learn how to stabilize their income and secure their financial future", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Planning Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates a monthly budget for a user, given their income, expenses and savings target.\\\",\\n\\\"function_name\\\": \\\"calculate_budget\\\",\\n\\\"input_args\\\": {\\n    \\\"income\\\": \\\"The user's monthly income, including commission.\\\",\\n    \\\"fixed_expenses\\\": \\\"The user's monthly fixed expenses.\\\",\\n    \\\"variable_expenses\\\": \\\"The user's monthly variable expenses.\\\",\\n    \\\"savings_target\\\": \\\"The user's annual savings target.\\\"\\n},\\n\\\"return\\\": \\\"A pandas DataFrame representing the user's monthly budget for a year.\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Swiss expat living in the neighborhood, willing to teach the neighbor Swiss German", "synthesized text": "\"{\\n\\\"name\\\": \\\"Swiss German Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates English text to Swiss German using HuggingFace's transformer models. Please note that as Swiss German is not directly supported, we have used English to German translation as an alternative.\\\",\\n\\\"function_name\\\": \\\"translate_to_swiss_german\\\",\\n\\\"input_args\\\": [\\\"english_text\\\"],\\n\\\"return\\\": \\\"Swiss German translation of the input English text.\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformer models\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cardiologist specializing in hormonal imbalances and women's heart health", "synthesized text": "\"{\\n\\\"name\\\": \\\"Heart Rate Variability Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the heartpy library to analyze heart rate variability data. The user only needs to input the path to a file containing heart rate data, and the interface will return the analysis results, including different heart rate variability metrics.\\\",\\n\\\"function_name\\\": \\\"analyze_heart_rate_variability\\\",\\n\\\"input_args\\\": \\\"data_file - Path to a file containing heart rate data\\\",\\n\\\"return\\\": \\\"A dictionary with the analysis results, including different heart rate variability metrics\\\",\\n\\\"depend\\\": \\\"Python library: heartpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fisherman who catches fresh salmon and other nutritious ingredients for the dog food company", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutritional Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Edamam Food Database API to get the nutritional values of a given ingredient.\\\",\\n\\\"function_name\\\": \\\"get_nutritional_values\\\",\\n\\\"input_args\\\": {\\\"ingredient\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"Dictionary containing nutritional values (caloric content, protein amount, vitamins, minerals, etc.)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"], \\\"Web APIs\\\": [\\\"Edamam Food Database API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A collector of vintage movie posters and memorabilia, with a particular focus on Tuesday Weld films", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Movie Poster Recognition Interface\\\",\\n  \\\"description\\\": \\\"Recognize and classify movie posters to return the movie title and year of release\\\",\\n  \\\"function_name\\\": \\\"recognize_movie_poster\\\",\\n  \\\"input_args\\\": {\\\"path_to_image\\\": \\\"the path to the image file\\\"},\\n  \\\"return\\\": \\\"A string of movie title and year of release\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"PIL\\\", \\\"numpy\\\"], \\\"machine learning model\\\": \\\"https://tfhub.dev/google/bit/m-r50x1/1\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A Roma woman living in one of the participating countries, who has firsthand experience with the program.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translate to Romani Language Interface\\\",\\n\\\"description\\\": \\\"This interface translates English text to Romani language. It can be useful for Roma people living in different countries to communicate or preserve their cultural heritage.\\\",\\n\\\"function_name\\\": \\\"translate_to_romani\\\",\\n\\\"input_args\\\": {\\n    \\\"input_text\\\": \\\"A string of text in English.\\\"\\n},\\n\\\"return\\\": \\\"The translated text in Romani language.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school student seeking advice on how to save money for college tuition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Expense Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to input their daily incomes and expenses, and calculates the net savings to help users save money.\\\",\\n\\\"function_name\\\": [\\\"add_income\\\", \\\"add_expense\\\", \\\"calculate_savings\\\"],\\n\\\"input_args\\\": [[\\\"date\\\", \\\"amount\\\"], [\\\"date\\\", \\\"amount\\\"], []],\\n\\\"return\\\": [\\\"None\\\", \\\"None\\\", \\\"Net savings\\\"],\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A multiplayer gamer who enjoys competing and collaborating with others in online races", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that accepts the path to a CSV file containing game data and returns a comprehensive analysis of the player's performance.\\\",\\n\\\"function_name\\\": \\\"analyze_game_performance\\\",\\n\\\"input_args\\\": [\\\"path_to_csv\\\"],\\n\\\"return\\\": \\\"A dictionary containing the average score, best time, and suggestions for improvement.\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A graduate student conducting research on the use of formal methods in software verification", "synthesized text": "\"{\\n\\\"name\\\": \\\"Formal Method Verification Interface\\\",\\n\\\"description\\\": \\\"An interface for verifying the satisfiability of logical propositions using the Z3 Theorem Prover.\\\",\\n\\\"function_name\\\": \\\"check_satisfiability\\\",\\n\\\"input_args\\\": [\\\"proposition\\\"],\\n\\\"return\\\": \\\"A string indicating whether the proposition is satisfiable or not.\\\",\\n\\\"depend\\\": \\\"Z3 Theorem Prover Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A loyal supporter who runs a crowdfunding campaign to help the musician buy a reliable vehicle", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Crowdfunding Progress Tracker Interface\\\",\\n  \\\"description\\\": \\\"An interface to track the progress of a crowdfunding campaign. It returns the current amount raised, goal amount, and percentage of the goal achieved.\\\",\\n  \\\"function_name\\\": \\\"get_campaign_info\\\",\\n  \\\"input_args\\\": \\\"campaign_url\\\",\\n  \\\"return\\\": \\\"Dictionary with 'raised_amount', 'goal_amount' and 'percent_achieved'\\\",\\n  \\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "The proprietor of a conventional car wash that uses high amounts of water and is facing pressure to change", "synthesized text": "\"{\\n\\\"name\\\": \\\"Water Usage Reduction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses an ML model to predict the optimal amount of water to use for a car wash given the car size and dirtiness level.\\\",\\n\\\"function_name\\\": \\\"predict_water_usage\\\",\\n\\\"input_args\\\": {\\n\\\"car_size\\\": \\\"The size of the car. Options: 'small', 'medium', 'large'.\\\",\\n\\\"dirtiness_level\\\": \\\"The level of dirtiness of the car. Options: 'low', 'medium', 'high'.\\\"\\n},\\n\\\"return\\\": \\\"The optimal amount of water to use for the car wash, rounded to 2 decimal places.\\\",\\n\\\"depend\\\": \\\"This function leverages the pandas, numpy, and scikit-learn Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local San Diego resident who doesn't trust mainstream media", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Verification Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Fakebox API to classify an article as 'Real', 'Satire' or 'Hoax'.\\\",\\n\\\"function_name\\\": \\\"verify_news\\\",\\n\\\"input_args\\\": {\\n    \\\"title\\\": \\\"The title of the article.\\\",\\n    \\\"content\\\": \\\"The body of the article.\\\"\\n},\\n\\\"return\\\": \\\"A tuple containing the classification of the article and a score indicating the confidence of the classification.\\\",\\n\\\"depend\\\": \\\"Fakebox API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tabla player skilled in complex rhythms and improvisation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Generate Complex Rhythm Patterns Interface\\\",\\n\\\"description\\\": \\\"Generates a sequence of rhythm patterns based on the input parameters: time signature, tempo, and complexity.\\\",\\n\\\"function_name\\\": \\\"generate_rhythm\\\",\\n\\\"input_args\\\": [\\\"time_signature\\\", \\\"tempo\\\", \\\"complexity\\\"],\\n\\\"return\\\": \\\"Composition object representing a sequence of rhythm patterns.\\\",\\n\\\"depend\\\": [\\\"mingus library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A group of friends who love challenging themselves with mind-bending puzzles and escaping virtual rooms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Escape Room Puzzle Solver Interface\\\",\\n\\\"description\\\": \\\"An interface that provides hints or solutions to puzzles in virtual escape rooms. Users need to input the puzzle description or an image of the puzzle, and the interface will return a hint or a solution to the puzzle.\\\",\\n\\\"function_name\\\": \\\"solve_escape_room_puzzle\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to the image file of the puzzle.\\\"\\n},\\n\\\"return\\\": \\\"A hint or a solution to the puzzle.\\\",\\n\\\"depend\\\": \\\"PIL, pytesseract, spacy, LLM\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Longhorns football player who seeks advice on improving their performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Performance Analysis Interface\\\", \\n\\\"description\\\": \\\"An interface that takes as input a CSV file with player performance data and outputs a detailed analysis report. This report would include insights such as which areas the player excels in and which areas need improvement.\\\", \\n\\\"function_name\\\": \\\"analyze_performance\\\",\\n\\\"input_args\\\": \\\"file_path - A string representing the path to the CSV file containing player performance data\\\",\\n\\\"return\\\": \\\"report - A dictionary with keys as 'Principal Component n', and values as the top 3 features associated with that principal component.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturing company owner seeking to integrate web technologies with their PLC systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"PLC Data Collection Interface\\\",\\n\\\"description\\\": \\\"This interface allows for reading data from a PLC given its IP address and the tag name.\\\",\\n\\\"function_name\\\": \\\"read_PLC_data\\\",\\n\\\"input_args\\\": {\\n    \\\"plc_ip_address\\\": \\\"The IP address of the PLC\\\",\\n    \\\"tag_name\\\": \\\"The name of the tag to read\\\"\\n    },\\n\\\"return\\\": \\\"The value of the tag read from the PLC\\\",\\n\\\"depend\\\": \\\"pycomm3 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly resident who has lived in the neighborhood for decades and remembers when the air used to be clean and fresh", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Check Interface\\\",\\n\\\"description\\\": \\\"This interface gets the current air quality of a given location using the Breezometer API.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": [\\\"city_name\\\"],\\n\\\"return\\\": \\\"{Air Quality Index: int, Air Quality Description: str}\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Breezometer API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A devoted SNL fan and fanatic of Brad Pitt.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Celebrity Deepfake Video Generation Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses pre-trained models to generate deepfake videos of a certain celebrity saying the provided script.\\\",\\n  \\\"function_name\\\": \\\"generate_deepfake_video\\\",\\n  \\\"input_args\\\": {\\n    \\\"celebrity_name\\\": \\\"The name of the celebrity to generate a deepfake video for.\\\",\\n    \\\"script_text\\\": \\\"The script you want the celebrity to 'say' in the video.\\\"\\n  },\\n  \\\"return\\\": \\\"A deepfake video of the specified celebrity saying the provided script.\\\",\\n  \\\"depend\\\": \\\"DeepFace library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old-fashioned newspaper delivering postman in a small town.", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Topic Classification Interface\\\",\\n\\\"description\\\": \\\"This interface takes a news headline and classifies it into one of six topics: Sports, Business, Politics, Technology, Entertainment, or Health. The result will help the user quickly understand the main topic of the news.\\\",\\n\\\"function_name\\\": \\\"classify_news_topic\\\",\\n\\\"input_args\\\": \\\"news_headline - a string that represents the headline or a snippet of a news article\\\",\\n\\\"return\\\": \\\"The main topic of the news article as a string\\\",\\n\\\"depend\\\": \\\"This function depends on the Hugging Face Transformers library and the 'facebook/bart-large-mnli' pre-trained model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned data scientist who credits their contribution to Python for their successful career", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Data Preprocessing Interface\\\",\\n  \\\"description\\\": \\\"An interface that simplifies common data preprocessing tasks such as handling missing data and encoding categorical variables. It uses the pandas, sklearn.preprocessing, and sklearn.impute Python libraries.\\\",\\n  \\\"function_name\\\": [\\\"__init__\\\", \\\"handle_missing_values\\\", \\\"one_hot_encode\\\", \\\"label_encode\\\", \\\"get_dataframe\\\"],\\n  \\\"input_args\\\": {\\n    \\\"__init__\\\": [\\\"path_to_csv\\\"],\\n    \\\"handle_missing_values\\\": [\\\"columns\\\"],\\n    \\\"one_hot_encode\\\": [\\\"columns\\\"],\\n    \\\"label_encode\\\": [\\\"columns\\\"],\\n    \\\"get_dataframe\\\": []\\n  },\\n  \\\"return\\\": {\\n    \\\"__init__\\\": \\\"None\\\",\\n    \\\"handle_missing_values\\\": \\\"None\\\",\\n    \\\"one_hot_encode\\\": \\\"None\\\",\\n    \\\"label_encode\\\": \\\"None\\\",\\n    \\\"get_dataframe\\\": \\\"DataFrame\\\"\\n  },\\n  \\\"depend\\\": [\\\"pandas\\\", \\\"sklearn.preprocessing\\\", \\\"sklearn.impute\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A telecommunications lawyer providing legal advice on regulatory and compliance issues in broadband networks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Telecommunications Regulatory Compliance Check Interface\\\",\\n\\\"description\\\": \\\"This interface takes the description of a broadband network design or operation and checks for potential regulatory and compliance issues. It returns a list of potential issues if any.\\\",\\n\\\"function_name\\\": \\\"check_compliance\\\",\\n\\\"input_args\\\": [\\\"network_description\\\"],\\n\\\"return\\\": \\\"List of potential regulatory and compliance issues\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\", \\\"requests\\\"], \\\"machine learning models\\\": [\\\"ProsusAI/finbert\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A scientist studying the efficacy of organic prenatal vitamins in reducing pregnancy complications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clinical Trials Data Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches and analyzes clinical trial data related to a specific keyword from the ClinicalTrials.gov API.\\\",\\n\\\"function_name\\\": \\\"analyze_clinical_trials_data\\\",\\n\\\"input_args\\\": \\\"keyword\\\",\\n\\\"return\\\": \\\"A list of dictionaries containing the outcome measure, the title and count of participants for two groups, and the absolute difference between the two groups' counts.\\\",\\n\\\"depend\\\": \\\"requests, pandas, numpy, ClinicalTrials.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An art historian who studies ancient cave paintings and their depiction of prehistoric animals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface identifies and classifies the animals depicted in the cave paintings. The user only needs to input the path to an image file of the cave painting, and the interface will return a list of the animals identified in the image.\\\",\\n\\\"function_name\\\": \\\"identify_animals\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A list of names of the animals identified in the image.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, and a pre-trained model from TensorFlow's image recognition library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An influential arms manufacturer involved in the illegal trade", "synthesized text": "\"{\\n\\\"name\\\": \\\"Firearm Serial Number Verification Interface\\\", \\n\\\"description\\\": \\\"This interface enables users to verify a firearm's serial number. It retrieves the verification status of a firearm using its serial number, which can be used to track illegal firearms and ensure compliance with regulations.\\\", \\n\\\"function_name\\\": \\\"verify_firearm_serial\\\", \\n\\\"input_args\\\": \\\"serial_number - The serial number of the firearm to be verified.\\\", \\n\\\"return\\\": \\\"Returns the verification status of the firearm.\\\", \\n\\\"depend\\\": \\\"Firearms API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film producer who has connections in the Iranian film industry and can provide opportunities for collaboration", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Collaboration Opportunity Finder\\\",\\n\\\"description\\\": \\\"This interface fetches the latest collaboration opportunities in the Iranian film industry from a news website.\\\",\\n\\\"function_name\\\": \\\"fetch_collaboration_opportunities\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary contains the title, description and link of a collaboration opportunity.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries for web scraping\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a passionate Romanian football fan and a dedicated follower of Liga I. For me, the summer transfer period is like a second Christmas, filled with anticipation about how my favorite team might improve and which players we'll bid farewell to.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Transfer News Alert Interface\\\",\\n\\\"description\\\": \\\"This interface provides the latest football transfer news for the user's favorite team. It scrapes the information from the team's page on the Transfermarkt website.\\\",\\n\\\"function_name\\\": \\\"get_transfer_news\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"A dictionary with 'Transfers In' and 'Transfers Out' as keys, and lists of player names as values\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sociology major focusing on the relationship between labor movements and industrialization", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Labor Movement Data Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve key details about historical labor movements from DBpedia.\\\",\\n\\\"function_name\\\": \\\"get_labor_movement_data\\\",\\n\\\"input_args\\\": [\\\"movement_name\\\"],\\n\\\"return\\\": \\\"Key details about the labor movement in JSON format, including the abstract, location, time period, key person, and industry.\\\",\\n\\\"depend\\\": \\\"DBpedia SPARQL API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an old friend of Tre'Shaun Harrison who no longer follows sports", "synthesized text": "\"{\\n\\\"name\\\": \\\"NFL Player Stats Interface\\\",\\n\\\"description\\\": \\\"An interface for retrieving NFL player stats using the NFL API. Users input a player's name and the function returns the player's current stats.\\\",\\n\\\"function_name\\\": \\\"get_nfl_player_stats\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"player_name\\\": \\\"The full name of the NFL player.\\\"\\n    },\\n\\\"return\\\": \\n    {\\n    \\\"name\\\": \\\"Player's name\\\",\\n    \\\"team\\\": \\\"Player's preferred team\\\",\\n    \\\"position\\\": \\\"Player's position\\\",\\n    \\\"arrest_count\\\": \\\"Player's arrest count\\\"\\n    }, \\n\\\"depend\\\": \\\"requests library, NFL API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A reporter investigating the effects of urban segregation on education and employment opportunities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Education and Employment Opportunities Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses U.S. Census Bureau data to compare educational attainment and employment rates in two different locations.\\\",\\n\\\"function_name\\\": \\\"compare_education_employment\\\",\\n\\\"input_args\\\": [\\\"location1\\\", \\\"location2\\\"],\\n\\\"return\\\": \\\"A pandas DataFrame showing the employment rates and proportions of bachelor degree holders in the two locations.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas. Web API: U.S. Census Bureau API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a theologian specializing in New Testament manuscript studies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Greek Text Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze Greek texts using NLTK and CLTK. It tokenizes the text, performs lemmatization, and provides a frequency distribution of the words.\\\",\\n\\\"function_name\\\": \\\"analyze_greek_text\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"A dictionary containing the unique word count, lemmas, and frequency distribution of the words.\\\",\\n\\\"depend\\\": [\\\"nltk\\\", \\\"cltk\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a software engineer with experience in Qt and HTML5 Canvas", "synthesized text": "\"{\\n\\\"name\\\": \\\"HTML5 Canvas to Qt Image Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface for converting a HTML5 Canvas image (provided as a data URL) to a Qt compatible QImage object.\\\",\\n\\\"function_name\\\": \\\"data_url_to_qimage\\\",\\n\\\"input_args\\\": [\\\"data_url\\\"],\\n\\\"return\\\": \\\"QImage object\\\",\\n\\\"depend\\\": [\\\"Python's Pillow library\\\", \\\"PySide2\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Eine Person, die in Deutschland geboren und aufgewachsen ist, aber seit vielen Jahren in Salta, Argentinien lebt und ein tiefes Interesse an lokaler Geschichte und Kultur entwickelt hat.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historical Event Search Interface\\\",\\n  \\\"description\\\": \\\"Search for historical events by year and location using the Wikipedia API.\\\",\\n  \\\"function_name\\\": \\\"get_historical_events\\\",\\n  \\\"input_args\\\": [\\\"year\\\", \\\"location\\\"],\\n  \\\"return\\\": \\\"Historical events that took place at the specified location during the specified year.\\\",\\n  \\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic young British orienteering competitor who idolizes Megan Carter Davies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Orienteering Route Planner Interface\\\",\\n\\\"description\\\": \\\"This interface helps orienteering competitors to plan their routes. Users just need to input their start and end location, and the type of sport (foot, bike, etc.), and this interface will return the optimal route for the orienteering challenge based on the terrain and distance.\\\",\\n\\\"function_name\\\": \\\"get_optimal_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\", \\\"sport\\\"],\\n\\\"return\\\": \\\"This function returns the optimal route coordinates between the start and end location for the specified sport.\\\",\\n\\\"depend\\\": \\\"This function leverages the OpenRouteService API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A finance expert specialized in social security programs in India.", "synthesized text": "\"{\\n    \\\"State1\\\": {\\n        \\\"age\\\": 60,\\n        \\\"base_benefit\\\": 5000,\\n        \\\"income_multiplier\\\": 0.05,\\n        \\\"dependent_multiplier\\\": 1000\\n    },\\n    \\\"State2\\\": {\\n        \\\"age\\\": 65,\\n        \\\"base_benefit\\\": 6000,\\n        \\\"income_multiplier\\\": 0.06,\\n        \\\"dependent_multiplier\\\": 1200\\n    },\\n    ...\\n}\"", "description": "tool development"}
{"input persona": "An entry-level software engineer who has just started learning C++ and has no previous experience with the Godot engine.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Godot Engine Code Snippet Generator Interface\\\",\\n\\\"description\\\": \\\"This interface translates C++ code snippets into GDScript for the Godot Engine. The user inputs their C++ code, and the interface returns the corresponding GDScript code.\\\",\\n\\\"function_name\\\": \\\"cplusplus_to_gdscript\\\",\\n\\\"input_args\\\": [\\\"cplusplus_code\\\"],\\n\\\"return\\\": \\\"GDScript code snippet\\\",\\n\\\"depend\\\": \\\"LLM\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a mechanic and small auto shop owner in Missouri, distrustful of career politicians but hopeful for real representation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Health Diagnosis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to diagnose potential issues with a vehicle based on inputted symptoms.\\\",\\n\\\"function_name\\\": \\\"diagnose_vehicle\\\",\\n\\\"input_args\\\": [\\\"symptoms\\\"],\\n\\\"return\\\": \\\"The function returns a string representing the predicted issue with the vehicle based on the inputted symptoms.\\\",\\n\\\"depend\\\": \\\"This function depends on a pre-trained machine learning model, which is not included in this code snippet. The model should be saved as a pickle (.pkl) file and loaded in the load_model() function.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of the Northfork Rancheria of Mono Indians", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates text from one language to another using Google Cloud's Translation API.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"string\\\", \\\"target\\\": \\\"string (optional, default is 'en')\\\"},\\n\\\"return\\\": \\\"string (translated text)\\\",\\n\\\"depend\\\": \\\"Google Cloud's Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged man managing multiple chronic conditions, appreciating healthcare professionals who explain matters clearly", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Medication Interaction Check Interface\\\",\\n  \\\"description\\\": \\\"Provide a list of medications, and the interface will return potential interactions between these medications.\\\",\\n  \\\"function_name\\\": \\\"check_medication_interactions\\\",\\n  \\\"input_args\\\": [\\\"medication_list\\\"],\\n  \\\"return\\\": \\\"List of pairs of medication identifiers that have potential interactions\\\",\\n  \\\"depend\\\": \\\"RxNorm API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retail store manager seeking guidance on improving store layout and merchandising strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Customer Behaviour Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes the in-store behavior of the customers to provide actionable insights for improving store layout and merchandising strategies\\\",\\n\\\"function_name\\\": \\\"analyze_customer_behavior\\\",\\n\\\"input_args\\\": \\\"data_file - a csv file containing customer behavior data\\\",\\n\\\"return\\\": \\\"A dataframe showing the average behavior of each customer cluster\\\",\\n\\\"depend\\\": \\\"pandas, sklearn.cluster\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer who specializes in DirectX and graphics programming.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"3D Model File Conversion Interface\\\",\\n  \\\"description\\\": \\\"Converts a 3D model file from one format to another using Open3D.\\\",\\n  \\\"function_name\\\": \\\"convert_3d_model_file\\\",\\n  \\\"input_args\\\": {\\n    \\\"source_file_path\\\": \\\"Path to the source 3D model file to be converted\\\",\\n    \\\"target_format\\\": \\\"Desired output format for the 3D model file\\\"\\n  },\\n  \\\"return\\\": \\\"Path to the converted 3D model file\\\",\\n  \\\"depend\\\": \\\"Open3D library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A game designer who incorporates the latest machine learning algorithms into their game mechanics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Difficulty Adjustment Interface\\\",\\n\\\"description\\\": \\\"This interface uses a reinforcement learning model to train an agent that can play a game at a specified level of difficulty. The game designer only needs to input the game environment and the desired level of difficulty, and the interface returns a trained agent that can play the game at that level.\\\",\\n\\\"function_name\\\": \\\"create_difficulty_adjusted_agent\\\",\\n\\\"input_args\\\": {\\n    \\\"game_environment\\\": \\\"This is the game environment that the agent will be trained to play in. It should be an instance of a class that inherits from gym.Env.\\\",\\n    \\\"difficulty\\\": \\\"This is the desired level of difficulty, on a scale from 1 to 10. A higher number corresponds to a higher level of difficulty.\\\"\\n},\\n\\\"return\\\": \\\"This function returns a trained agent that can play the game at the specified level of difficulty. The agent will be an instance of a class that inherits from stable_baselines3.PPO.\\\",\\n\\\"depend\\\": \\\"This function relies on the Stable Baselines3 library, which provides implementations of various reinforcement learning algorithms.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a culinary arts teacher in a Pennsylvania high school", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Substitution Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to find possible substitutes for a specific ingredient by leveraging Spoonacular's API.\\\",\\n\\\"function_name\\\": \\\"get_ingredient_substitutes\\\",\\n\\\"input_args\\\": {\\n    \\\"ingredient\\\": \\\"The name of the ingredient you want to find substitutes for.\\\"\\n},\\n\\\"return\\\": \\\"A list of possible substitutes for the input ingredient.\\\",\\n\\\"depend\\\": \\\"Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Senior Java developer specialized in options management with Bazel build system.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bazel Dependency Graph Interface\\\",\\n\\\"description\\\": \\\"This interface takes the location of a Bazel BUILD file, and returns a visual representation of the dependency graph. It uses Bazel commands to retrieve dependencies, and NetworkX and Matplotlib to visualize the graph.\\\",\\n\\\"function_name\\\": \\\"create_dependency_graph\\\",\\n\\\"input_args\\\": {\\n    \\\"bazel_build_file\\\": \\\"The path to the Bazel BUILD file.\\\"\\n},\\n\\\"return\\\": \\\"A visual representation of the dependency graph.\\\",\\n\\\"depend\\\": [\\\"subprocess (Python Library)\\\", \\\"networkx (Python Library)\\\", \\\"matplotlib (Python Library)\\\", \\\"Bazel (Build System)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "建筑工程师，对大型基础设施项目感兴趣", "synthesized text": "\"{\\n\\\"name\\\": \\\"Infrastructure Project Data Interface\\\",\\n\\\"description\\\": \\\"An interface that returns details of all large infrastructure projects in a specified country by making use of the Global Infrastructure Project dataset API.\\\",\\n\\\"function_name\\\": \\\"get_infrastructure_projects\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"A list of all large infrastructure projects in the specified country, each represented as a dictionary with details about the project.\\\",\\n\\\"depend\\\": \\\"requests library, Global Infrastructure Project dataset API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A war survivor starting an organization to support other victims of the conflict", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Cloud's Translation API to translate text from one language to another. It aids in communication with people from different regions and language backgrounds.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"target_language\\\"],\\n\\\"return\\\": \\\"Translated text in the target language.\\\",\\n\\\"depend\\\": [\\\"Google Cloud Translation API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A representative from the Ministry of Finance providing insights on the economic aspects of indigenous policies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Indicator Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the World Bank Data API to retrieve economic indicator data for a specific country over a given time period and then visualizes the trend with matplotlib.\\\",\\n\\\"function_name\\\": \\\"plot_economic_indicator\\\",\\n\\\"input_args\\\": {\\n    \\\"country\\\": \\\"The country for which to retrieve economic data\\\",\\n    \\\"indicator\\\": \\\"The economic indicator to retrieve and visualize\\\",\\n    \\\"start_year\\\": \\\"The start of the time period for which to retrieve data\\\",\\n    \\\"end_year\\\": \\\"The end of the time period for which to retrieve data\\\"\\n},\\n\\\"return\\\": \\\"A graph showing the trend of the given economic indicator for the given country over the given time period\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas, matplotlib; Web API: World Bank Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer working on open-source bioinformatics projects, offering support and sharing code for simulation development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bioinformatics Sequence Alignment Interface\\\",\\n\\\"description\\\": \\\"This interface performs a global sequence alignment of two sequences from the input fasta files. It uses BioPython's PairwiseAligner for the alignment.\\\",\\n\\\"function_name\\\": \\\"global_sequence_alignment\\\",\\n\\\"input_args\\\": [\\\"fasta_file_path1\\\", \\\"fasta_file_path2\\\"],\\n\\\"return\\\": \\\"A single optimal global alignment object, which can be iterated over to get the aligned sequences.\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a hard-core fan of South Korean supergroup Got the Beat", "synthesized text": "\"{\\n\\\"name\\\": \\\"K-pop Lyrics Translation Interface\\\",\\n\\\"description\\\": \\\"An interface that takes Korean lyrics as input and outputs the English translation.\\\",\\n\\\"function_name\\\": \\\"translate_lyrics\\\",\\n\\\"input_args\\\": {\\\"korean_lyrics\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (translated English lyrics)\\\",\\n\\\"depend\\\": \\\"DeepL Translate API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A regulatory affairs officer responsible for reviewing and approving new liver disease treatments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Approval Decision Interface\\\",\\n\\\"description\\\": \\\"This interface predicts whether a new liver disease treatment is likely to be approved based on its clinical trial results.\\\",\\n\\\"function_name\\\": \\\"predict_drug_approval\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"Path to the CSV file containing the clinical trial results.\\\"},\\n\\\"return\\\": \\\"A string indicating whether the treatment is 'Approved' or 'Not Approved'.\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library, pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research institute specializing in AI ethics and responsible technology development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fairness Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface evaluates the fairness of a trained machine learning model using various fairness metrics. It uses the 'aif360' library from IBM.\\\",\\n\\\"function_name\\\": \\\"evaluate_fairness\\\",\\n\\\"input_args\\\": {\\n  \\\"model\\\": \\\"The trained machine learning model\\\",\\n  \\\"X_test\\\": \\\"The test dataset (excluding labels)\\\",\\n  \\\"y_test\\\": \\\"The labels for the test dataset\\\",\\n  \\\"protected_attribute\\\": \\\"The attribute to be considered for fairness evaluation (e.g. 'sex', 'race')\\\"\\n},\\n\\\"return\\\": \\\"A dictionary of fairness metrics\\\",\\n\\\"depend\\\": \\\"aif360 Library (IBM)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A twin brother who has always felt overshadowed by their successful writer sibling, and struggles to find their own identity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the similarity between two documents using Gensim's Doc2Vec model.\\\",\\n\\\"function_name\\\": \\\"calculate_similarity\\\",\\n\\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n\\\"return\\\": \\\"Similarity score between 0 and 1\\\",\\n\\\"depend\\\": \\\"Gensim library, NLTK library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research scientist working for a pharmaceutical company, utilizing graph databases for drug discovery and development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Graph Database Query Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to run Cypher queries against a Neo4j database and receive the results.\\\",\\n\\\"function_name\\\": \\\"run_query\\\",\\n\\\"input_args\\\": {\\n    \\\"uri\\\": \\\"The URI of the Neo4j database.\\\",\\n    \\\"user\\\": \\\"The username for the Neo4j database.\\\",\\n    \\\"password\\\": \\\"The password for the Neo4j database.\\\",\\n    \\\"query\\\": \\\"The Cypher query to be executed.\\\"\\n},\\n\\\"return\\\": \\\"A list of records returned by the query.\\\",\\n\\\"depend\\\": [\\\"Neo4j Python driver\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software development company seeking assistance in deploying their application on Kubernetes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Kubernetes Deployment Interface\\\",\\n  \\\"description\\\": \\\"This interface simplifies the process of deploying an application on a Kubernetes cluster. It takes in the path to a deployment configuration file and deploys the specified application on the Kubernetes cluster.\\\",\\n  \\\"function_name\\\": \\\"deploy_to_kubernetes\\\",\\n  \\\"input_args\\\": {\\n    \\\"config_file_path\\\": \\\"The path to the deployment configuration file. This file should be a YAML file that specifies the deployment configuration for the application.\\\"\\n  },\\n  \\\"return\\\": \\\"The API response from the Kubernetes API server indicating the result of the deployment operation.\\\",\\n  \\\"depend\\\": \\\"This function depends on the Kubernetes Python client library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Former Canadian Baseball Player", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Sports Open Data API to retrieve the career statistics of a specified baseball player.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": \\\"player_name\\\",\\n\\\"return\\\": \\\"List of dictionaries where each dictionary contains the statistics for one year of the player's career.\\\",\\n\\\"depend\\\": \\\"requests, pandas, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a university's job placement advisor based in New York University", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Posting Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for job postings based on the user's field of interest and location. The function leverages the Indeed Job Search API.\\\",\\n\\\"function_name\\\": \\\"get_job_postings\\\",\\n\\\"input_args\\\": {\\n    \\\"field_of_interest\\\": \\\"Software Engineer\\\",\\n    \\\"location\\\": \\\"New York\\\"\\n},\\n\\\"return\\\": [\\n    {\\n        \\\"title\\\": \\\"Software Engineer\\\",\\n        \\\"company\\\": \\\"Google\\\",\\n        \\\"location\\\": \\\"New York, NY\\\",\\n        \\\"description\\\": \\\"Google's software engineers develop the next-generation technologies that change how billions of users connect, explore, and interact with information and one another. Our products need to handle information at massive scale, and extend well beyond web search.\\\"\\n    },\\n    ...\\n],\\n\\\"depend\\\": \\\"requests library, Indeed Job Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A motivated student pursuing a master's degree in urban planning, eager to learn from the professor's expertise", "synthesized text": "\"{\\n\\\"name\\\": \\\"Urban Area Population Density Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Census Bureau API to calculate the population density of a given urban area.\\\",\\n\\\"function_name\\\": \\\"get_urban_area_population_density\\\",\\n\\\"input_args\\\": [\\\"urban_area\\\"],\\n\\\"return\\\": \\\"Population density (people per square mile) or None if the urban area was not found\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Census Bureau API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a software development instructor with expertise in Pharo programming.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pharo Code Execution Interface\\\",\\n\\\"description\\\": \\\"This interface executes Pharo code from Python using the subprocess library. The user inputs a string of Pharo code, and the interface returns the output of the executed code.\\\",\\n\\\"function_name\\\": \\\"execute_pharo_code\\\",\\n\\\"input_args\\\": \\\"code - A string of Pharo code.\\\",\\n\\\"return\\\": \\\"The output of the executed Pharo code. If an error occurred during execution, it returns the error message.\\\",\\n\\\"depend\\\": \\\"Python subprocess library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a supporter of increasing the minimum wage who challenges oversimplified arguments.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Argument Validation Interface\\\",\\n\\\"description\\\": \\\"Compare the semantic similarity between a user's argument and a counter-argument using a pre-trained model from Hugging Face. Returns a similarity score indicating how similar in meaning the two arguments are.\\\",\\n\\\"function_name\\\": \\\"calculate_argument_similarity\\\",\\n\\\"input_args\\\": [\\\"user_argument\\\", \\\"counter_argument\\\"],\\n\\\"return\\\": \\\"A float between 0 and 1 indicating the semantic similarity between the two arguments. A lower score indicates less similarity in meaning.\\\",\\n\\\"depend\\\": [\\\"Hugging Face's SentenceTransformer model - 'distilbert-base-nli-mean-tokens'\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an Ethiopian local farmer who loves watching Ethiopian cultural TV shows.", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface uses web scraping to fetch the date and time of a specified Ethiopian cultural TV show from a schedule website.\\\",\\n\\\"function_name\\\": \\\"get_show_schedule\\\",\\n\\\"input_args\\\": \\\"show_name - the name of the TV show\\\",\\n\\\"return\\\": \\\"The date and time of the next episode of the specified show, or a message stating that the show was not found in the schedule\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个对历史字符感兴趣的古代书法爱好者。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Ancient Text Recognition Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to recognize ancient characters from an image using OCR technology.\\\",\\n  \\\"function_name\\\": \\\"ancient_text_recognition\\\",\\n  \\\"input_args\\\": {\\n    \\\"image_path\\\": \\\"The path to the image file to be recognized.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"type\\\": \\\"string\\\",\\n    \\\"description\\\": \\\"The text recognized from the image.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"pytesseract\\\", \\\"PIL\\\"],\\n    \\\"other\\\": [\\\"Tesseract OCR\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An insightful and strategic leader who relies on the classmate's thorough research for making informed decisions", "synthesized text": "\"{\\n    \\\"title\\\": \\\"Competitor - Tools for Growth and Success\\\",\\n    \\\"meta_description\\\": \\\"Discover the best tools and strategies for business growth at Competitor.com.\\\",\\n    \\\"h1\\\": [\\\"Welcome to Competitor\\\"],\\n    \\\"h2\\\": [\\\"Our Products\\\", \\\"Our Services\\\"],\\n    \\\"links\\\": [\\\"/products\\\", \\\"/services\\\", \\\"/contact\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged New Yorker living in Hell's Kitchen who is passionate about urban planning and hates traffic.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traffic Congestion Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that leverages the TomTom Traffic API to analyze traffic congestion in a given area. The user inputs their current location (latitude and longitude), and the interface returns a summary of the traffic congestion.\\\",\\n\\\"function_name\\\": \\\"get_traffic_congestion\\\",\\n\\\"input_args\\\": {\\n    \\\"latitude\\\": \\\"The latitude of the current location\\\",\\n    \\\"longitude\\\": \\\"The longitude of the current location\\\"\\n},\\n\\\"return\\\": \\\"A string summarizing the level of traffic congestion in the given location.\\\",\\n\\\"depend\\\": \\\"TomTom Traffic API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Handball fan from Norway", "synthesized text": "\"{\\n\\\"name\\\": \\\"Handball Match Result Interface\\\",\\n\\\"description\\\": \\\"This interface takes the names of two handball teams as input and returns the result of their last match.\\\",\\n\\\"function_name\\\": \\\"get_handball_match_result\\\",\\n\\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\"],\\n\\\"return\\\": \\\"A string indicating the result of the last match between the two teams.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Sports Data IO API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a senior cardiologist, who is a colleague of Michelle Claire Williams", "synthesized text": "\"{\\n\\\"name\\\": \\\"Heart Rate Variability Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the Heart Rate Variability (HRV) from RR intervals of an ECG record. It returns the HRV parameters which can be used to assess the physiological state or health condition of a patient.\\\",\\n\\\"function_name\\\": \\\"hrv_analysis\\\",\\n\\\"input_args\\\": {\\n    \\\"rr_intervals\\\": \\\"A list of RR intervals (in milliseconds) from an ECG record\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing the HRV parameters.\\\",\\n\\\"depend\\\": \\\"neurokit2 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A father whose daughter recently had to undergo a full body MRI scan.", "synthesized text": "\"{\\n\\\"name\\\": \\\"MRI Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes MRI scans and returns potential medical conditions the scan might suggest.\\\",\\n\\\"function_name\\\": \\\"analyze_mri_scan\\\",\\n\\\"input_args\\\": \\\"path_to_img - string, path to the MRI scan image file\\\",\\n\\\"return\\\": \\\"medical_condition - numpy array, potential medical conditions the scan might suggest\\\",\\n\\\"depend\\\": \\\"Python libraries: tensorflow, tensorflow_hub; Machine learning model: 'https://tfhub.dev/google/med_image_analyzer/1'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned Colombian novelist known for their mastery of magical realism", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Translation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google's Translation API to translate a given text into a specified language.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"string\\\",\\n    \\\"target_language\\\": \\\"string\\\"\\n},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": \\\"Google's Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A large financial institution seeking vulnerability assessments and remediation strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vulnerability Scan Interface\\\",\\n\\\"description\\\": \\\"This interface scans a given IP address for vulnerabilities, provides a risk rating for each, and suggests remediation strategies.\\\",\\n\\\"function_name\\\": \\\"get_vulnerabilities\\\",\\n\\\"input_args\\\": [\\\"ip_address\\\"],\\n\\\"return\\\": \\\"[{'name': 'vulnerability_name', 'description': 'vulnerability_description', 'risk': 'risk_rating', 'remediation': 'recommended_remediation'}, ...]\\\",\\n\\\"depend\\\": {\\\"python library\\\": [\\\"openvas_lib\\\", \\\"cvss\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A talented computer programmer who develops software for rocket simulation and optimization", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Rocket Trajectory Optimization Interface\\\",\\n  \\\"description\\\": \\\"An interface for optimizing rocket trajectories based on initial and final conditions. It uses the Scipy library to solve the optimization problem.\\\",\\n  \\\"function_name\\\": \\\"trajectory_optimization\\\",\\n  \\\"input_args\\\": {\\n    \\\"init_pos\\\": \\\"Initial position of the rocket\\\",\\n    \\\"init_vel\\\": \\\"Initial velocity of the rocket\\\",\\n    \\\"final_pos\\\": \\\"Final position of the rocket\\\",\\n    \\\"final_vel\\\": \\\"Final velocity of the rocket\\\"\\n  },\\n  \\\"return\\\": \\\"Optimized rocket trajectory as a function of time\\\",\\n  \\\"depend\\\": \\\"Python Scipy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passive listener of Nigerian music who isn't interested in Hip Hop", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Genre Filtering Interface\\\",\\n\\\"description\\\": \\\"This interface filters out specified genre(s) from a Spotify playlist and returns a new playlist.\\\",\\n\\\"function_name\\\": \\\"filter_out_genre\\\",\\n\\\"input_args\\\": [\\\"playlist_id\\\", \\\"genre_to_exclude\\\"],\\n\\\"return\\\": \\\"A new Spotify playlist ID excluding the specified genres.\\\",\\n\\\"depend\\\": [\\\"Spotify Web API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a devoted follower of Jon Ferguson's teachings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Daily Inspiration Interface\\\",\\n\\\"description\\\": \\\"This interface extracts a daily inspirational quote from Jon Ferguson's teachings from a hypothetical website.\\\",\\n\\\"function_name\\\": \\\"get_daily_inspiration\\\",\\n\\\"input_args\\\": \\\"\\\",\\n\\\"return\\\": \\\"A daily inspirational quote as a string\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school student in a Russian lower-tier city who is not very good at biology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Biology Concept Explanation Interface\\\", \\n\\\"description\\\": \\\"This interface helps students understand complex biology concepts by providing easy-to-understand explanations. Users only need to input a biology term or concept, and our interface will return an easy-to-understand explanation.\\\", \\n\\\"function_name\\\": \\\"explain_biology_concept\\\", \\n\\\"input_args\\\": {\\\"concept\\\": \\\"a biology term or concept\\\"}, \\n\\\"return\\\": {\\\"explanation\\\": \\\"an easy-to-understand explanation of the input concept\\\"}, \\n\\\"depend\\\": {\\\"resources\\\": \\\"Large Language Model\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A successful real estate agent with years of experience, sharing valuable tips and tricks for effective property presentations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Valuation Interface\\\",\\n\\\"description\\\": \\\"This interface predicts a property's market value based on its features using a pre-trained RandomForestRegressor model.\\\",\\n\\\"function_name\\\": \\\"predict_property_value\\\",\\n\\\"input_args\\\": [\\\"features - a list of property features in the following order: Area (square feet), Bedrooms, Bathrooms, Age (years), Location\\\"],\\n\\\"return\\\": \\\"Estimated value of the property.\\\",\\n\\\"depend\\\": \\\"scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent who wants their child to pursue a college education but recognizes the practicality of learning a trade as well", "synthesized text": "\"{\\n   \\\"name\\\": \\\"Trade School and College Information Interface\\\",\\n   \\\"description\\\": \\\"An interface that returns a list of trade schools and colleges offering programs in a given field of study, along with relevant information like average tuition and graduation rates.\\\",\\n   \\\"function_name\\\": \\\"get_education_info\\\",\\n   \\\"input_args\\\": [\\\"field_of_study\\\"],\\n   \\\"return\\\": \\\"A dictionary containing a list of colleges and trade schools offering programs in the input field of study, along with relevant information.\\\",\\n   \\\"depend\\\": [\\\"requests library\\\", \\\"U.S. Department of Education's College Scorecard API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A business owner of a traditional bedding company that is slow to adapt to new market trends", "synthesized text": "\"{\\n\\\"name\\\": \\\"Market Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the ticker symbol of a competing company and returns a trend analysis of the company's stock, helping users understand market trends.\\\",\\n\\\"function_name\\\": \\\"get_market_trends\\\",\\n\\\"input_args\\\": {\\n    \\\"ticker\\\": \\\"The ticker symbol of the company to analyze.\\\"\\n},\\n\\\"return\\\": \\\"The market trend of the specified company's stock ('Up', 'Down', or 'Neutral').\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"yfinance\\\", \\\"pandas\\\", \\\"numpy\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A black sheep of the family who resents the military officer's legacy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Officer Legacy Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses an open source military records data API to return the service record and award history of a military officer.\\\",\\n\\\"function_name\\\": \\\"get_military_officer_legacy\\\",\\n\\\"input_args\\\": \\\"officer_name - the name of the military officer\\\",\\n\\\"return\\\": \\\"A dictionary containing the service record and award history of the officer\\\",\\n\\\"depend\\\": \\\"requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "a learner who is about to enroll in one of Melissa's classes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Course Topic Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input the course description and returns the main topics that the course will cover. It uses a pre-trained model from Hugging Face to classify text into different categories.\\\",\\n\\\"function_name\\\": \\\"analyze_course_topic\\\",\\n\\\"input_args\\\": \\\"course_description\\\",\\n\\\"return\\\": \\\"main_topics\\\",\\n\\\"depend\\\": \\\"Hugging Face\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fictional character from a novel who embodies the spirit and themes of the Divine Comedy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface uses Gensim's Word2Vec model to analyze a character's traits, actions, and dialogues from a novel. It then compares the character's vector representation with that of the Divine Comedy's themes and returns a similarity score.\\\",\\n\\\"function_name\\\": \\\"analyze_character\\\",\\n\\\"input_args\\\": [\\\"character_dialogues\\\", \\\"divine_comedy_themes\\\"],\\n\\\"return\\\": \\\"similarity between the character and the Divine Comedy's themes\\\",\\n\\\"depend\\\": \\\"Gensim library, Word2Vec model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chatty and friendly local guide who is knowledgeable about the history and culture of Sindh, Pakistan.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Sindh Cultural Insights Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches information about the history and culture of Sindh from Wikipedia. Users simply input a keyword or topic related to Sindh's history or culture, and our interface will return a summary of the topic from Wikipedia.\\\",\\n  \\\"function_name\\\": \\\"get_sindh_cultural_insights\\\",\\n  \\\"input_args\\\": \\\"topic\\\",\\n  \\\"return\\\": \\\"A summary of the input topic from Wikipedia, or a message stating no information was found on the topic\\\",\\n  \\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who sees coding as a purely technical skill and fails to appreciate its artistic potential", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artistic Code Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface visualizes the structure of Python code in a graph format, highlighting the interdependencies between functions. It can help to appreciate the artistic potential of coding.\\\",\\n\\\"function_name\\\": \\\"visualize_code_structure\\\",\\n\\\"input_args\\\": \\\"path_to_file: str\\\",\\n\\\"return\\\": \\\"A matplotlib figure showing the structure of the code.\\\",\\n\\\"depend\\\": \\\"Python's ast module, NetworkX, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Bitcoin and Ethereum fan who disliked other blockchain systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cryptocurrency Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check the current price of Bitcoin and Ethereum. Users simply need to specify the type of currency they want the prices in, and the interface will return the current price of Bitcoin and Ethereum in the specified currency.\\\",\\n\\\"function_name\\\": \\\"get_crypto_prices_in_currency\\\",\\n\\\"input_args\\\": \\\"currency - The type of currency to convert the prices into\\\",\\n\\\"return\\\": \\\"Returns a JSON object containing the current prices of Bitcoin and Ethereum in the specified currency\\\",\\n\\\"depend\\\": \\\"This function uses the CoinGecko API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A welfare officer working on the front lines to provide resources for newly arrived immigrants", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to translate text from one language to another using the Google Cloud Translation API.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"The text you want to translate, as a string.\\\",\\n    \\\"target_language\\\": \\\"The language to translate the text into, as a string.\\\"\\n},\\n\\\"return\\\": \\\"A tuple containing the original text, the translated text, and the detected source language.\\\",\\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A career-focused female who is passionate about classical music and holds a great admiration for artists, such as Biss, who delve deep into the musicality and philosophies of composers.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Classical Music Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Spotify's Web API to fetch and analyze the acoustic features of a classical music track. It takes in a Spotify track ID and returns a dictionary of the track's acoustic features.\\\",\\n\\\"function_name\\\": \\\"get_track_features\\\",\\n\\\"input_args\\\": {\\\"track_id\\\": \\\"A Spotify track ID\\\", \\\"client_id\\\": \\\"The client ID of your Spotify app\\\", \\\"client_secret\\\": \\\"The client secret of your Spotify app\\\"},\\n\\\"return\\\": \\\"A dictionary of the track's acoustic features, or None if an error occurs.\\\",\\n\\\"depend\\\": \\\"requests library, Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservative, Brazilian Catholic nun, who considers movies a form of decadence.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Content Filter Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Movie Database (TMDb) API to check the content and ratings of movies. Users input the name of a movie and receive a brief content description and associated ratings.\\\",\\n\\\"function_name\\\": \\\"get_movie_details\\\",\\n\\\"input_args\\\": \\\"movie_name\\\",\\n\\\"return\\\": \\\"A dictionary with keys: 'title' (title of the movie), 'overview' (short description of the movie), 'adult' (boolean indicating if the movie contains adult content), 'rating' (average audience rating of the movie)\\\",\\n\\\"depend\\\": \\\"requests library, TMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Bolivian environmental activist concerned about the ecological impact of industrial development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Data Interface\\\",\\n\\\"description\\\": \\\"Provides real-time air quality data for a given city, including Air Quality Index (AQI) and main pollutant.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": \\\"city\\\",\\n\\\"return\\\": \\\"String with current AQI and main pollutant in the specified city\\\",\\n\\\"depend\\\": \\\"World Air Quality Index API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A native Novosibirskian who is passionate about public transport systems.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Public Transport Route Planner Interface\\\",\\n\\\"description\\\": \\\"This interface takes a start location and end location as input, and returns the best public transport route between the two locations.\\\",\\n\\\"function_name\\\": \\\"get_public_transport_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"A list of dictionaries, each representing a route. Each route dictionary contains a 'duration', 'departure_time', 'arrival_time', and a list of 'parts' (each part being a dictionary with 'mode', 'from', 'to', 'departure_time', and 'arrival_time').\\\",\\n\\\"depend\\\": {\\\"python library\\\": [\\\"requests\\\", \\\"json\\\"], \\\"web API\\\": [\\\"TransportAPI\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A viewer who has become obsessed with the streamer's settings and follows their every recommendation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitch Streamer Settings Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to get the broadcasting settings of a specific Twitch streamer.\\\",\\n\\\"function_name\\\": \\\"get_streamer_settings\\\",\\n\\\"input_args\\\": [\\\"streamer_name\\\"],\\n\\\"return\\\": \\\"A dictionary with the video resolution, average frame rate, and bitrate of the streamer. If the streamer is offline or not found, a corresponding message is returned.\\\",\\n\\\"depend\\\": \\\"Twitch API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A climate modeler investigating the role of aerosols in global climate change", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aerosol Optical Depth Data Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve Aerosol Optical Depth (AOD) data from NASA's Atmospheric Science Data Center (ASDC) using the OpenDAP protocol.\\\",\\n\\\"function_name\\\": \\\"get_aod_data\\\",\\n\\\"input_args\\\": {\\\"date\\\": \\\"string in 'yyyymmdd' format\\\", \\\"lat\\\": \\\"float\\\", \\\"lon\\\": \\\"float\\\"},\\n\\\"return\\\": \\\"AOD value at the specified location and date\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"netCDF4\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A retired Malaysian historian and author, specializing in the political and administrative history of Malaysia.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface compares two documents and outputs a similarity score.\\\",\\n\\\"function_name\\\": \\\"document_similarity\\\",\\n\\\"input_args\\\": [\\\"path_to_doc1\\\", \\\"path_to_doc2\\\"],\\n\\\"return\\\": \\\"A similarity score between the two documents\\\",\\n\\\"depend\\\": \\\"Gensim and nltk Python libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned network architect with years of experience and a deep understanding of network protocols", "synthesized text": "\"{\\n\\\"name\\\": \\\"Network Traffic Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyzes network traffic from a pcap file and returns a summary of packets of a specific protocol, including source and destination IPs and ports.\\\",\\n\\\"function_name\\\": \\\"analyze_network_traffic\\\",\\n\\\"input_args\\\": [\\\"pcap_file\\\", \\\"protocol\\\"],\\n\\\"return\\\": \\\"List of dictionaries representing packets. Each dictionary includes source and destination IPs and ports of the packet.\\\",\\n\\\"depend\\\": \\\"scapy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A 60-year-old long-time friend of Steven Zaillian who has been working in the film industry for many years and is very familiar with the industry etiquette.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Script Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes in a film script and outputs a list of unique character names mentioned in the script using named entity recognition.\\\",\\n\\\"function_name\\\": \\\"extract_character_names_from_script\\\",\\n\\\"input_args\\\": \\\"script_text - a string representing the film script\\\",\\n\\\"return\\\": \\\"A list of unique character names in the script\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned open-source contributor who provides guidance on best practices for coroutine implementation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coroutine Code Review Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes Python code and provides suggestions for improving coroutine usage, based on a set of best practices.\\\",\\n\\\"function_name\\\": \\\"coroutine_best_practices_review\\\",\\n\\\"input_args\\\": [\\\"code\\\"],\\n\\\"return\\\": \\\"List of suggestions for improving the code's use of coroutines.\\\",\\n\\\"depend\\\": \\\"pylint Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a 60-year-old Russian local who has lived near the Shinosaur for my entire life.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Weather Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides real-time weather information for a specified location using the OpenWeatherMap API\\\",\\n\\\"function_name\\\": \\\"get_local_weather\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"The name of the location for which to retrieve weather information\\\"},\\n\\\"return\\\": {\\\"Main Weather\\\": \\\"The overall type of weather (e.g., 'Clear', 'Clouds')\\\", \\\"Description\\\": \\\"A more detailed description of the weather\\\", \\\"Temperature\\\": \\\"The current temperature in degrees Celsius\\\", \\\"Humidity\\\": \\\"The current humidity percentage\\\", \\\"Wind Speed\\\": \\\"The speed of the wind in meters per second\\\"},\\n\\\"depend\\\": \\\"requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A TV show recapper who also enjoys speculating on award show outcomes", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Recaps and Awards Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that provides TV show recaps and predicts award show outcomes. The TV show recaps are sourced from TVMaze's API, and the award show predictions are based on IMDb ratings and reviews.\\\",\\n\\\"function_name\\\": [\\\"get_tv_show_recap\\\", \\\"predict_award_winner\\\"],\\n\\\"input_args\\\": [[\\\"tv_show\\\", \\\"season\\\", \\\"episode\\\"], [\\\"award_show\\\", \\\"category\\\"]],\\n\\\"return\\\": [\\\"Recap of the specified TV show episode\\\", \\\"Predicted winner of the specified award show category\\\"],\\n\\\"depend\\\": [\\\"requests\\\", \\\"TVMaze API\\\", \\\"IMDb API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An author and proponent of alternative history theories claiming ancient alien interventions in human affairs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alien Theory Text Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates text related to alternative history theories claiming ancient alien interventions in human affairs. The user inputs a seed phrase and the interface returns a paragraph built upon that seed phrase.\\\",\\n\\\"function_name\\\": \\\"generate_alien_theory\\\",\\n\\\"input_args\\\": {\\\"seed_phrase\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"generated_text\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"GPT-2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A biochemist working on developing new drug compounds that can be produced at a lower cost", "synthesized text": "\"{\\n\\\"name\\\": \\\"Molecular Similarity Search Interface\\\",\\n\\\"description\\\": \\\"This interface takes a SMILES string of a compound and returns a list of similar compounds from a predefined database. This can help users find similar compounds that might be cheaper to produce.\\\",\\n\\\"function_name\\\": \\\"get_similar_molecules\\\",\\n\\\"input_args\\\": [\\\"smiles_string\\\", \\\"database_smiles\\\", \\\"n\\\"],\\n\\\"return\\\": \\\"A list of n SMILES strings from the database that are most similar to the input compound.\\\",\\n\\\"depend\\\": \\\"RDKit library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A first-time candidate running for a local government position seeking guidance on campaign strategy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Campaign Strategy Guidance Interface\\\",\\n\\\"description\\\": \\\"This interface uses the HuggingFace library to analyze previous successful local government campaigns and provide insights into the most effective strategies.\\\",\\n\\\"function_name\\\": \\\"get_campaign_strategy\\\",\\n\\\"input_args\\\": {\\n    \\\"position\\\": \\\"The type of position the user is running for (e.g., 'mayor', 'city council', etc.)\\\"\\n},\\n\\\"return\\\": {\\n    \\\"strategies\\\": \\\"A list of recommended strategies for the campaign.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"libraries\\\": [\\\"HuggingFace's transformers\\\", \\\"torch\\\"],\\n    \\\"models\\\": [\\\"bert-base-uncased\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A former government official who provides insights into the Syrian government's tactics and strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Syria Conflict Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that provides insights into the Syrian government's tactics and strategies by retrieving and analyzing data from the GDELT Project's global database of events.\\\",\\n\\\"function_name\\\": \\\"get_syria_conflict_analysis\\\",\\n\\\"input_args\\\": \\n{\\n    \\\"start_date\\\": \\\"The start date of the time frame to analyze (in the format YYYY-MM-DD).\\\",\\n    \\\"end_date\\\": \\\"The end date of the time frame to analyze (in the format YYYY-MM-DD).\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, each containing a date and a string of titles of articles related to the Syrian government on that date.\\\",\\n\\\"depend\\\": \\\"Python's built-in requests and pandas libraries, as well as the GDELT Project's API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curator working on a special exhibition that highlights the contributions of indigenous peoples in shaping national history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cultural Artifact Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to identify and catalogue cultural artifacts in an image.\\\",\\n\\\"function_name\\\": \\\"identify_artifacts\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The file path to the image to be analyzed.\\\"\\n},\\n\\\"return\\\": \\\"A list of potential artifacts identified in the image.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and a pre-trained object detection model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A security AI which likes to generate questions after reading something.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Question Generation Interface\\\",\\n\\\"description\\\": \\\"Generates a list of questions based on the given context using a T5 model from Hugging Face\\\",\\n\\\"function_name\\\": \\\"generate_questions\\\",\\n\\\"input_args\\\": \\\"context - text from which questions should be generated\\\",\\n\\\"return\\\": \\\"a list of questions based on the context\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Tanzanian public health officer who focuses heavily on malaria prevention and treatment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Malaria Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the likelihood of a patient having Malaria based on a list of symptoms. Uses a pre-trained model from Huggingface.\\\",\\n\\\"function_name\\\": \\\"predict_malaria\\\",\\n\\\"input_args\\\": [\\\"symptoms\\\"],\\n\\\"return\\\": \\\"String indicating the likelihood of the patient having Malaria.\\\",\\n\\\"depend\\\": \\\"Huggingface (model: malaria_prediction_model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A language professor with profound respect for his family member's association with diverse cultures during covert missions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Translate API to translate text from one language to another.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"src\\\", \\\"dest\\\"],\\n\\\"return\\\": \\\"Translated text\\\",\\n\\\"depend\\\": \\\"googletrans Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A busy working mom who knows very little about dietary supplements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Supplement Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and summarises information about a dietary supplement, including its uses, side effects, and recommended dosage. Users only need to input the name of a dietary supplement.\\\",\\n\\\"function_name\\\": \\\"get_supplement_info\\\",\\n\\\"input_args\\\": \\\"supplement_name\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'uses', 'side_effects', 'recommended_dosage'. Each key corresponds to a list of respective information about the dietary supplement.\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup, NIH Dietary Supplement Label Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a regular customer of The Shimmy Club who loved its atmosphere and music but was disappointed by its ethical misconduct.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Playlist Generation Interface\\\",\\n\\\"description\\\": \\\"Generate a playlist that matches the atmosphere and music of The Shimmy Club\\\",\\n\\\"function_name\\\": \\\"get_shimmy_club_style_songs\\\",\\n\\\"input_args\\\": {\\n    \\\"account_credentials\\\": \\\"Your Spotify account credentials\\\",\\n    \\\"playlist_length\\\": \\\"The number of songs you want in the playlist\\\"\\n},\\n\\\"return\\\": \\\"A link to the generated Spotify playlist\\\",\\n\\\"depend\\\": \\\"Spotify Web API, TensorFlow Keras model\\\"\\n}\"", "description": "tool development"}
{"input persona": "Rebecca Lynn, a top woman investor and venture capitalist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface leveraging the Alpha Vantage API to fetch real-time and historical stock market data. Users only need to input a stock symbol, and the interface will return the historical data of the stock.\\\",\\n\\\"function_name\\\": \\\"get_historical_stock_data\\\",\\n\\\"input_args\\\": {\\\"symbol\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"DataFrame\\\",\\n\\\"depend\\\": \\\"Alpha Vantage API, requests, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data science professor who emphasizes importance of understanding bugs and mistakes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Error Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes Python code as input, executes it, and returns a detailed analysis of any errors that occur. It's useful for learning Python or debugging code.\\\",\\n\\\"function_name\\\": \\\"analyze_python_error\\\",\\n\\\"input_args\\\": \\\"code - A string containing Python code\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'output' and 'error'. 'output' contains any output from the code execution, and 'error' contains details of any errors that occurred.\\\",\\n\\\"depend\\\": \\\"Python traceback library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A beverage industry analyst who provides insights on consumer trends and market potential for bottled water", "synthesized text": "\"{\\n\\\"name\\\": \\\"Beverage Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches Google Trends data for the keyword 'Bottled Water' over a specified time range.\\\",\\n\\\"function_name\\\": \\\"get_bottled_water_trends\\\",\\n\\\"input_args\\\": [\\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"Dictionary with dates as keys and trend scores as values\\\",\\n\\\"depend\\\": \\\"pytrends library (Google Trends API)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow Chinese citizen who is familiar with Zhang Bencai through media", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chinese Name to Pinyin Conversion Interface\\\",\\n\\\"description\\\": \\\"Converts a Chinese name to its Pinyin phonetic transcription.\\\",\\n\\\"function_name\\\": \\\"chinese_to_pinyin\\\",\\n\\\"input_args\\\": {\\n    \\\"chinese_name\\\": \\\"The Chinese name to be converted to Pinyin.\\\"\\n},\\n\\\"return\\\": \\\"A string of the Pinyin transcription of the input Chinese name. Each syllable is separated by a space, and the first letter of each syllable is capitalized.\\\",\\n\\\"depend\\\": \\\"Python library: pypinyin\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biochemical engineer developing synthetic pesticides targeting the same pests", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pesticide Efficacy Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the efficacy of a synthetic pesticide based on its chemical structure\\\",\\n\\\"function_name\\\": \\\"predict_efficacy\\\",\\n\\\"input_args\\\": [\\\"smiles\\\"],\\n\\\"return\\\": \\\"The predicted efficacy of the pesticide\\\",\\n\\\"depend\\\": [\\\"rdkit\\\", \\\"numpy\\\", \\\"pickle\\\", \\\"pre-trained pesticide efficacy prediction model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Shakespeare scholar who believes that the complexity of Shakespeare's language cannot be fully captured in cinematic adaptations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Shakespearean Language Complexity Analyzer\\\",\\n\\\"description\\\": \\\"An interface that takes a Shakespearean dialogue as input and returns a complexity score based on lexical diversity, average sentence length, and syntactic complexity.\\\",\\n\\\"function_name\\\": \\\"analyze_shakespearean_complexity\\\",\\n\\\"input_args\\\": \\\"dialogue\\\",\\n\\\"return\\\": \\\"complexity_score\\\",\\n\\\"depend\\\": \\\"NLTK library for tokenizing and frequency distribution, Hugging Face's transformers for syntactic complexity analysis\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud colleague of Michael Limoli who used to work together at NeuroLogica", "synthesized text": "\"{\\n\\\"name\\\": \\\"DICOM to NIfTI Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts a DICOM file into a NIfTI file. The user only needs to input the path to the DICOM file and the output path for the NIfTI file.\\\",\\n\\\"function_name\\\": \\\"dicom_to_nifti\\\",\\n\\\"input_args\\\": [\\\"dicom_path\\\", \\\"nifti_path\\\"],\\n\\\"return\\\": \\\"Nothing is returned, but a NIfTI file is saved at the specified path.\\\",\\n\\\"depend\\\": \\\"This function depends on the pydicom and nibabel Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned songwriter who is known for their ability to capture the essence of the golden era in their compositions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lyrics Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates song lyrics based on a user's input. The input can be a song theme or a few starting words, and the interface will return a song or lyrics based on this input.\\\",\\n\\\"function_name\\\": \\\"generate_lyrics\\\",\\n\\\"input_args\\\": \\\"prompt_text\\\",\\n\\\"return\\\": \\\"Generated song lyrics\\\",\\n\\\"depend\\\": \\\"Hugging Face's GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a college student who doesn't have any family tradition of attending a particular university", "synthesized text": "\"{\\n\\\"name\\\": \\\"University Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends universities to students based on their preferences.\\\",\\n\\\"function_name\\\": \\\"recommend_universities\\\",\\n\\\"input_args\\\": [\\\"program\\\", \\\"location\\\", \\\"acceptance_rate\\\"],\\n\\\"return\\\": \\\"A list of recommended universities.\\\",\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local business owner interested in providing life insurance benefits to their employees", "synthesized text": "\"{\\n\\\"name\\\": \\\"Life Insurance Premium Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to estimate the life insurance premium based on age, gender, and smoking habits.\\\",\\n\\\"function_name\\\": \\\"estimate_life_insurance_premium\\\",\\n\\\"input_args\\\": {\\\"age\\\": \\\"Age of the person\\\", \\\"gender\\\": \\\"Gender of the person\\\", \\\"smoker\\\": \\\"Smoking habits of the person\\\"},\\n\\\"return\\\": \\\"Estimated life insurance premium\\\",\\n\\\"depend\\\": \\\"A pre-trained machine learning model (RandomForestRegressor from sklearn), pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A particle physicist who often provides detailed scientific explanations to ground their partner's creative ideas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Particle Acceleration Simulation Interface\\\",\\n\\\"description\\\": \\\"Simulates the behavior of a particle in an electric and magnetic field, returning the particle's trajectory over a specified time interval.\\\",\\n\\\"function_name\\\": \\\"simulate_particle_motion\\\",\\n\\\"input_args\\\": {\\n    \\\"initial_position\\\": \\\"Initial position of the particle (3D vector)\\\",\\n    \\\"initial_velocity\\\": \\\"Initial velocity of the particle (3D vector)\\\",\\n    \\\"charge\\\": \\\"Charge of the particle\\\",\\n    \\\"electric_field\\\": \\\"Electric field vector\\\",\\n    \\\"magnetic_field\\\": \\\"Magnetic field vector\\\",\\n    \\\"time_interval\\\": \\\"Time interval for the simulation ([start_time, end_time])\\\"\\n},\\n\\\"return\\\": \\\"3D array of the particle's position over time\\\",\\n\\\"depend\\\": \\\"numpy, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A politician advocating for increased funding for NASA's space exploration initiatives", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Space Mission Data Interface\\\",\\n  \\\"description\\\": \\\"Fetches data for a specific NASA mission using NASA's Open APIs\\\",\\n  \\\"function_name\\\": \\\"get_mission_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"mission_name\\\": \\\"Name of the NASA mission\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"Mission Name\\\": \\\"Name of the mission\\\",\\n    \\\"Mission Description\\\": \\\"Description of the mission\\\",\\n    \\\"Media Type\\\": \\\"Type of the mission media (image or video)\\\",\\n    \\\"Mission URL\\\": \\\"URL pointing to more resources about the mission\\\"\\n  },\\n  \\\"depend\\\": \\\"NASA's Open APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casual music listener who questions the audible differences between lossless and lossy formats", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Quality Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface takes two audio file paths (one lossless format and one lossy format) and returns a comparison of their spectrograms to visually represent the differences in audio quality.\\\",\\n\\\"function_name\\\": \\\"compare_audio_quality\\\",\\n\\\"input_args\\\": [\\\"lossless_path\\\", \\\"lossy_path\\\"],\\n\\\"return\\\": \\\"A plot of the spectrograms of the two audio files.\\\",\\n\\\"depend\\\": [\\\"librosa\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a mildly hesitant consumer who values the safety of products but remains undecided about the level of concern raised by this article.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Safety Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes the safety concern level of a product by taking the URL of an article about the product.\\\",\\n\\\"function_name\\\": \\\"analyze_safety_concern\\\",\\n\\\"input_args\\\": \\\"article_url\\\",\\n\\\"return\\\": \\\"A score from 0 to 1 indicating the level of safety concern. Closer to 1 indicates higher concern, closer to 0 indicates lower concern.\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests, transformers from HuggingFace\\\"\\n}\"", "description": "tool development"}
{"input persona": "A very private person who avoids sharing personal information, especially financial issues, with others.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Personal Finance Management Interface\\\",\\n\\\"description\\\": \\\"An interface to connect with user's bank account and retrieve transactions, account balance, and other account information without sharing information with others.\\\",\\n\\\"function_name\\\": \\\"get_financial_summary\\\",\\n\\\"input_args\\\": \\\"public_token\\\",\\n\\\"return\\\": \\\"A summary of the user's financial status, including total balance and recent transactions.\\\",\\n\\\"depend\\\": \\\"Python library - Plaid API\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一位独来独往的赏月者，平日不热衷体育竞技，对明尼苏达森林狼队或者篮球赛季知之甚少。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u7bee\\u7403\\u6bd4\\u8d5b\\u7edf\\u8ba1\\u67e5\\u8be2\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u8fd9\\u4e2a\\u63a5\\u53e3\\u53ef\\u4ee5\\u67e5\\u8be2\\u4e00\\u6bb5\\u65f6\\u95f4\\u5185\\u660e\\u5c3c\\u82cf\\u8fbe\\u68ee\\u6797\\u72fc\\u961f\\u7684\\u6bd4\\u8d5b\\u7edf\\u8ba1\\u6570\\u636e\\u3002\\\",\\n\\\"function_name\\\": \\\"get_game_statistics\\\",\\n\\\"input_args\\\": [\\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"\\u8fd4\\u56de\\u4e00\\u4e2a\\u5217\\u8868\\uff0c\\u6bcf\\u4e2a\\u5143\\u7d20\\u662f\\u4e00\\u4e2a\\u5b57\\u5178\\uff0c\\u5305\\u542b\\u4e86\\u6bd4\\u8d5b\\u7684\\u65e5\\u671f\\u3001\\u4e3b\\u961f\\u3001\\u5ba2\\u961f\\u4ee5\\u53ca\\u5404\\u81ea\\u7684\\u5f97\\u5206\\u3002\\\",\\n\\\"depend\\\": \\\"\\u4f7f\\u7528\\u4e86requests\\u5e93\\u4ee5\\u53caNBA\\u7684API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A German citizen who votes for the Social Democratic Party (SPD)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Election Result Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides the percentage of votes a specific party received in a specified year.\\\",\\n\\\"function_name\\\": \\\"get_election_results\\\",\\n\\\"input_args\\\": {\\\"year\\\": \\\"int\\\", \\\"party\\\": \\\"str\\\"},\\n\\\"return\\\": \\\"float or str\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A recent college graduate determined to pass the civil service exam on their first attempt", "synthesized text": "\"{\\n\\\"name\\\": \\\"Civil Service Exam Study Interface\\\",\\n\\\"description\\\": \\\"This interface generates a comprehensive study guide on a given topic using a GPT-3 model from OpenAI.\\\",\\n\\\"function_name\\\": \\\"generate_study_guide\\\",\\n\\\"input_args\\\": {\\n    \\\"topic\\\": \\\"A string representing the topic the user wants to study.\\\"\\n},\\n\\\"return\\\": \\\"A string representing the comprehensive study guide generated by the model.\\\",\\n\\\"depend\\\": \\\"GPT-3 model from OpenAI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A urban planner who discusses the mathematician's research on traffic flow optimization and its potential impact on city infrastructure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traffic Flow Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface to optimize traffic flow in a city's road network. Minimizes congestion by adjusting the traffic volumes on each road.\\\",\\n\\\"function_name\\\": \\\"optimize_traffic_flow\\\",\\n\\\"input_args\\\": {\\n    \\\"road_network\\\": \\\"An adjacency matrix representing the city's road network. Nodes represent intersections and edges represent roads.\\\",\\n    \\\"traffic_volumes\\\": \\\"A list of traffic volumes for each road.\\\"\\n},\\n\\\"return\\\": \\\"An optimal traffic flow scheme that minimizes congestion. Each value represents the adjusted traffic volume on each road.\\\",\\n\\\"depend\\\": \\\"SciPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A social activist working to preserve Mossville's cultural heritage and supports the artist's work", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Artwork Recognition Interface\\\",\\n  \\\"description\\\": \\\"Recognizes artwork from an image and provides information about the artwork.\\\",\\n  \\\"function_name\\\": \\\"recognize_artwork\\\",\\n  \\\"input_args\\\": \\\"image_path\\\",\\n  \\\"return\\\": \\\"Object with 'name', 'artist', and 'description' of the recognized artwork or a message indicating no artwork was recognized\\\",\\n  \\\"depend\\\": \\\"Google Cloud Vision API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Linux system administrator who is proficient in XKB configuration and can provide guidance on keyboard layouts", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Keyboard Layout Configuration Interface\\\",\\n  \\\"description\\\": \\\"An interface to modify or customize the keyboard layout on Linux systems using XKB configuration.\\\",\\n  \\\"function_name\\\": \\\"configure_keyboard_layout\\\",\\n  \\\"input_args\\\": {\\n    \\\"language\\\": \\\"The language of the keyboard layout. Default is 'us'.\\\",\\n    \\\"model\\\": \\\"The model of the keyboard. Default is 'pc105'.\\\",\\n    \\\"variant\\\": \\\"The variant of the keyboard layout. Default is an empty string.\\\"\\n  },\\n  \\\"return\\\": \\\"A message indicating that the keyboard layout has been updated.\\\",\\n  \\\"depend\\\": \\\"Python's built-in os library, Linux system's setxkbmap utility\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow student specializing in environmental science, collaborating on the assessment of the alloys' sustainability impact", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Sustainability Impact Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a material (alloy) as input and returns a sustainability score that quantifies the environmental impact of the material. It fetches data from the Material Sustainability Index (MSI) database.\\\",\\n\\\"function_name\\\": \\\"get_material_sustainability_score\\\",\\n\\\"input_args\\\": \\\"material - name of the material\\\",\\n\\\"return\\\": \\\"Sustainability score of the material or 'Material not found in the database.' message.\\\",\\n\\\"depend\\\": \\\"requests library, Material Sustainability Index (MSI) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer working on a project that requires implementing a bookmark feature and seeks expert advice on using the Bookmark interface", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bookmark Interface\\\",\\n  \\\"description\\\": \\\"A simple interface to add, view, edit, and delete bookmarks using SQLite database.\\\",\\n  \\\"function_name\\\": [\\\"__init__\\\", \\\"add_bookmark\\\", \\\"view_bookmarks\\\", \\\"edit_bookmark\\\", \\\"delete_bookmark\\\", \\\"close\\\"],\\n  \\\"input_args\\\": [\\n    {\\\"__init__\\\": [\\\"db_name\\\"]},\\n    {\\\"add_bookmark\\\": [\\\"name\\\", \\\"url\\\"]},\\n    {\\\"view_bookmarks\\\": []},\\n    {\\\"edit_bookmark\\\": [\\\"name\\\", \\\"new_url\\\"]},\\n    {\\\"delete_bookmark\\\": [\\\"name\\\"]},\\n    {\\\"close\\\": []}\\n  ],\\n  \\\"return\\\": [\\n    {\\\"__init__\\\": \\\"None\\\"},\\n    {\\\"add_bookmark\\\": \\\"None\\\"},\\n    {\\\"view_bookmarks\\\": \\\"List of tuples that represents bookmarks\\\"},\\n    {\\\"edit_bookmark\\\": \\\"None\\\"},\\n    {\\\"delete_bookmark\\\": \\\"None\\\"},\\n    {\\\"close\\\": \\\"None\\\"}\\n  ],\\n  \\\"depend\\\": \\\"SQLite library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pediatrician balancing a busy practice while raising their two children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vaccination Record Interface\\\",\\n\\\"description\\\": \\\"This interface organizes and tracks a patient's vaccination records. It allows users to input the patient's ID, the vaccine name, and the date of the vaccination, and retrieve the vaccination record of any patient.\\\",\\n\\\"function_name\\\": [\\\"__init__\\\", \\\"add_record\\\", \\\"get_record\\\"],\\n\\\"input_args\\\": {\\\"__init__\\\": [], \\\"add_record\\\": [\\\"patient_id\\\", \\\"vaccine\\\", \\\"date\\\"], \\\"get_record\\\": [\\\"patient_id\\\"]},\\n\\\"return\\\": {\\\"__init__\\\": \\\"None\\\", \\\"add_record\\\": \\\"None\\\", \\\"get_record\\\": \\\"DataFrame\\\"},\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一位在海岛度假的游客，对天气特别敏感，尤其是对台风。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Typhoon Forecast Interface\\\",\\n\\\"description\\\": \\\"\\u83b7\\u53d6\\u672a\\u6765\\u4e03\\u5929\\u5185\\u53ef\\u80fd\\u7684\\u53f0\\u98ce\\u9884\\u62a5\\\",\\n\\\"function_name\\\": \\\"get_typhoon_forecast\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"\\u7528\\u6237\\u7684\\u5f53\\u524d\\u5750\\u6807\\uff0c\\u4f8b\\u5982[22.3964, 114.1095]\\u8868\\u793a\\u9999\\u6e2f\\\"\\n},\\n\\\"return\\\": \\\"\\u672a\\u6765\\u4e03\\u5929\\u5185\\u53ef\\u80fd\\u7684\\u53f0\\u98ce\\u9884\\u62a5\\\",\\n\\\"depend\\\": \\\"\\u4f7f\\u7528\\u4e86OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a huge fan of Rob Lowe", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Deepfake Video Creation Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses deep learning to map a celebrity's face onto a target video. In this case, we map Rob Lowe's face onto the video specified by the user. The user inputs the path to the target video file, and our interface returns a new video with Rob Lowe's face replacing the original person's.\\\",\\n  \\\"function_name\\\": \\\"create_deepfake\\\",\\n  \\\"input_args\\\": [\\\"video_path\\\", \\\"target_face\\\"],\\n  \\\"return\\\": \\\"A new video file ('deepfake_output.mp4') with Rob Lowe's face replacing the original person's in the target video.\\\",\\n  \\\"depend\\\": [\\\"Python Libraries: imageio, numpy, moviepy.editor, deepface\\\"]\\n}\"", "description": "tool development"}
{"input persona": "die-hard fan of roguelike video games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Procedurally Generated Dungeon Map Interface\\\",\\n\\\"description\\\": \\\"Generate a random dungeon map using cellular automata.\\\",\\n\\\"function_name\\\": \\\"generate_dungeon_map\\\",\\n\\\"input_args\\\": [\\\"width\\\", \\\"height\\\"],\\n\\\"return\\\": \\\"A string representation of a randomly generated dungeon map. Open spaces are represented by '.' characters and walls are represented by '#' characters.\\\",\\n\\\"depend\\\": [\\\"python library: tcod\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A charismatic television personality who thrives on delivering exclusive entertainment news to their audience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Celebrity News Fetch Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to fetch the latest news about a specific celebrity using the NewsAPI.\\\",\\n\\\"function_name\\\": \\\"get_celebrity_news\\\",\\n\\\"input_args\\\": \\\"celebrity_name: The name of the celebrity to fetch the news about.\\\",\\n\\\"return\\\": \\\"A list of titles of the latest news articles about the specified celebrity.\\\",\\n\\\"depend\\\": \\\"NewsAPI, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A New Yorker who's never been to Maine but always confuses it with Vermont.", "synthesized text": "\"{\\n\\\"name\\\": \\\"State Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface compares two U.S. states in terms of their population, area, GDP, and other key statistics. It helps users understand the similarities and differences between two states.\\\",\\n\\\"function_name\\\": \\\"compare_states\\\",\\n\\\"input_args\\\": \\\"state1, state2\\\",\\n\\\"return\\\": \\n    {\\n    \\\"state1\\\": {\\n        \\\"Population\\\": \\\"Population of state1\\\"\\n    },\\n    \\\"state2\\\": {\\n        \\\"Population\\\": \\\"Population of state2\\\"\\n    }\\n    },\\n\\\"depend\\\": \\\"Python library: requests, Web API: U.S. Census Bureau API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An apprentice political analyst who hasn't perfected their craft yet and has an addictive habit to snacks while studying.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Healthy Snack Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spoonacular API to recommend healthy snacks based on user preferences, dietary restrictions, and maximum calorie intake.\\\",\\n\\\"function_name\\\": \\\"get_healthy_snack\\\",\\n\\\"input_args\\\": {\\n    \\\"snack_preference\\\": \\\"Type of snack (sweet, savory, etc.)\\\",\\n    \\\"dietary_restriction\\\": \\\"Dietary restrictions (vegan, gluten-free, etc.)\\\",\\n    \\\"max_calories\\\": \\\"Maximum amount of calories for the snack\\\"\\n},\\n\\\"return\\\": \\\"List of recommended snacks\\\",\\n\\\"depend\\\": \\\"Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A piano distributor who values the piano technician's ability to ensure the quality and functionality of the instruments they sell", "synthesized text": "\"{\\n\\\"name\\\": \\\"Piano Tuning Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the tuning stability of a piano based on the humidity, temperature, and age of the piano.\\\",\\n\\\"function_name\\\": \\\"predict_tuning_stability\\\",\\n\\\"input_args\\\": [\\\"humidity\\\", \\\"temperature\\\", \\\"age\\\"],\\n\\\"return\\\": \\\"A stability score between 0 and 1, indicating the expected tuning stability of the piano.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"numpy\\\", \\\"piano_tuning_model.h5\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A disciplined manager who meticulously plans her monthly expenses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Expense Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to track and categorize their expenses. It includes functions to add individual expenses and to summarize total expenses by category for each month.\\\",\\n\\\"function_name\\\": [\\\"add_expense\\\", \\\"summarize_expenses\\\"],\\n\\\"input_args\\\": [\\\"date\\\", \\\"category\\\", \\\"amount\\\", \\\"df\\\"],\\n\\\"return\\\": [\\\"DataFrame after adding new expense\\\", \\\"Summary of total expenses by category for each month\\\"],\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A highly experienced local real estate agent with extensive knowledge of luxury properties in Cyprus", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Price Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to estimate property prices based on input features\\\",\\n\\\"function_name\\\": \\\"estimate_property_price\\\",\\n\\\"input_args\\\": [\\\"path_to_model\\\", \\\"property_features\\\"],\\n\\\"return\\\": \\\"estimated property price\\\",\\n\\\"depend\\\": [\\\"Scikit-learn, joblib, pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A vocal coach who has trained Christine Rauh since her early years in music", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Pitch Correction Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained model from TensorFlow to correct the pitch of audio files. The user inputs the path to an audio file, and the interface returns the pitch-corrected version of the audio as a numpy array and the sample rate of the audio.\\\",\\n  \\\"function_name\\\": \\\"correct_pitch\\\",\\n  \\\"input_args\\\": [\\\"path_to_audio\\\"],\\n  \\\"return\\\": [\\\"corrected_audio\\\", \\\"sample_rate\\\"],\\n  \\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\", \\\"soundfile\\\"]\\n}\"", "description": "tool development"}
{"input persona": "One of Taylor Viza's devoted baseball fans who keeps detailed statistics on favorite players.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Statistics Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts detailed player statistics from Baseball-Reference.com. The user only needs to input the player's name, and the interface will return a structured dictionary of the player's statistics by year.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": {\\n    \\\"player_name\\\": \\\"The name of the player whose statistics should be extracted. For example, 'Babe Ruth'.\\\"\\n},\\n\\\"return\\\": \\\"A structured dictionary with keys as the years and values as another dictionary containing various statistics for the player in that year.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries are used to send a GET request to Baseball-Reference.com and parse the HTML response.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A layman without any knowledge about fireplace surrounds but loves to learn", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fireplace Surround Information Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Wikipedia API to fetch a summary of the information about a given search term. It's specifically designed for users who want to learn about 'fireplace surround' but can be used for any term.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_summary\\\",\\n\\\"input_args\\\": \\\"search_term - a string representing the term to search for\\\",\\n\\\"return\\\": \\\"A string containing a summary of the information about the search term from Wikipedia.\\\",\\n\\\"depend\\\": \\\"requests library, Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Korean Uber sports fan who is also a homeland patriot", "synthesized text": "\"{\\n\\\"name\\\": \\\"Korean Baseball Game Score Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get the scores of Korean baseball games from a specific date. The user needs to input the date in the format 'YYYYMMDD', and the function will return a list of strings, each string containing the teams that played and the score.\\\",\\n\\\"function_name\\\": \\\"get_korean_baseball_scores\\\",\\n\\\"input_args\\\": {\\\"date\\\": \\\"string in 'YYYYMMDD' format\\\"},\\n\\\"return\\\": \\\"list of strings each containing the teams that played and the score\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "a big fan from Zrinjski Mostar", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Live Soccer Match Statistics Interface\\\",\\n  \\\"description\\\": \\\"An interface to get live match statistics for a specified soccer team using RapidAPI Football API.\\\",\\n  \\\"function_name\\\": \\\"get_live_match_stats\\\",\\n  \\\"input_args\\\": {\\n    \\\"team\\\": \\\"The name of the soccer team.\\\"\\n  },\\n  \\\"return\\\": \\\"A JSON object containing live match statistics for the specified team.\\\",\\n  \\\"depend\\\": {\\\"Web APIs\\\": [\\\"RapidAPI Football API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An epidemiologist analyzing population data to identify areas with the greatest need for new health clinics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Population Health Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze population data and identify areas with greatest need for new health clinics. It uses clustering analysis to identify high-need clusters based on features like population size and number of existing health clinics, then prioritizes areas within that cluster based on population-to-clinic ratio.\\\",\\n\\\"function_name\\\": \\\"analyze_population_health\\\",\\n\\\"input_args\\\": \\\"data_path: The path to a CSV file containing population data. Each row should represent a geographical area, with columns for variables like population size, average age, number of existing health clinics, etc.\\\",\\n\\\"return\\\": \\\"A list of areas in need of new health clinics, sorted by priority.\\\",\\n\\\"depend\\\": \\\"Python libraries: Pandas for data manipulation, Matplotlib for visualization, Scikit-learn for clustering analysis.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Portuguese defender who grew up playing street football with the Dutch midfielder", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Football Match Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to enter the names of two football players and get a detailed comparison of their performance statistics, which includes data on the number of goals, assists, passes, tackles, etc.\\\",\\n  \\\"function_name\\\": \\\"compare_player_performance\\\",\\n  \\\"input_args\\\": [\\\"player1\\\", \\\"player2\\\"],\\n  \\\"return\\\": \\\"A dictionary with the performance statistics for each player, grouped by attribute.\\\",\\n  \\\"depend\\\": [\\\"statsbombpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A couple seeking an amicable and fair divorce settlement without litigation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Divorce Settlement Agreements Generator Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that generates a comprehensive and fair divorce settlement agreement based on user's specific requirements.\\\",\\n\\\"function_name\\\": \\\"generate_divorce_settlement_agreement\\\",\\n\\\"input_args\\\": {\\\"requirements\\\": \\\"A string that contains the specific requirements or conditions for the divorce settlement.\\\"},\\n\\\"return\\\": \\\"A string that represents a comprehensive and fair divorce settlement agreement.\\\",\\n\\\"depend\\\": \\\"The function leverages Huggingface's transformer library, specifically the GPT-2 model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local interior designer who often recommends the picture frame shop's services to clients", "synthesized text": "\"{\\n\\\"name\\\": \\\"Picture Frame Recommendation Interface\\\",\\n\\\"description\\\": \\\"A machine learning model that assesses the style of a provided image and suggests the most suitable frame from the shop's catalog.\\\",\\n\\\"function_name\\\": \\\"recommend_frame\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\", \\\"frame_catalog\\\"],\\n\\\"return\\\": \\\"best_frame\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\", \\\"MobileNetV2\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I'm an old-fashioned football fanatic originally from Slamannan, a small village in Scotland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a football team name as input and returns the results of the team's recent matches by using the football-data.org API.\\\",\\n\\\"function_name\\\": \\\"get_team_results\\\",\\n\\\"input_args\\\": \\\"team_name - The name of the football team\\\",\\n\\\"return\\\": \\\"A list of results of the team's recent matches, 'W' for win, 'L' for loss.\\\",\\n\\\"depend\\\": \\\"requests library, football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired professional golfer who challenges the developer's skills and keeps them on their toes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Golf Swing Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to analyze a golfer's swing and provide feedback. The user only needs to provide the path to a video file of their golf swing. The analyze_golf_swing function will load the video, predict the pose for each frame using the model, extract keypoints from the results, analyze the swing based on these keypoints, and return feedback to the user.\\\",\\n  \\\"function_name\\\": \\\"analyze_golf_swing\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_video\\\": \\\"string - the path to the video file of a golf swing\\\"\\n  },\\n  \\\"return\\\": \\\"string - feedback on the golf swing\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"tensorflow.keras.preprocessing\\\"],\\n    \\\"machine_learning_models\\\": [\\\"https://tfhub.dev/google/movenet/singlepose/lightning/1\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A senior software architect at Microsoft who provides guidance on best practices for using Microsoft Graph API", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Microsoft Graph API Query Interface\\\",\\n  \\\"description\\\": \\\"An interface to simplify the process of sending requests to the Microsoft Graph API. Users only need to provide their access token, the HTTP method, the API endpoint, and optionally a data payload for 'POST' or 'PUT' requests. The interface will then send the request and return the response from the API.\\\",\\n  \\\"function_name\\\": \\\"send_graph_api_request\\\",\\n  \\\"input_args\\\": {\\n    \\\"access_token\\\": \\\"The access token for the Microsoft Graph API\\\",\\n    \\\"method\\\": \\\"The HTTP method (e.g., 'GET', 'POST', 'PUT', etc.)\\\",\\n    \\\"endpoint\\\": \\\"The API endpoint (e.g., 'me/messages', 'users', etc.)\\\",\\n    \\\"data\\\": \\\"An optional data payload for 'POST' or 'PUT' requests\\\"\\n  },\\n  \\\"return\\\": \\\"The response from the Microsoft Graph API as a JSON object\\\",\\n  \\\"depend\\\": \\\"Python's requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud alumna of GT (Ellen Yeung) College", "synthesized text": "\"{\\n  \\\"name\\\": \\\"College Admission Statistic Interface\\\",\\n  \\\"description\\\": \\\"This interface provides the admission statistic of a given college using the CollegeScorecard API from the U.S. Department of Education.\\\",\\n  \\\"function_name\\\": \\\"get_college_admission_statistic\\\",\\n  \\\"input_args\\\": \\\"college_name\\\",\\n  \\\"return\\\": \\\"A dictionary containing the admission rate, SAT scores, and ACT scores of the college if available, else a message indicating no data was found.\\\",\\n  \\\"depend\\\": \\\"requests library, CollegeScorecard API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired history teacher and avid cyclist living in Lima, Peru", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to find the most efficient cycle route for a given start and end point using OpenRouteService API.\\\",\\n\\\"function_name\\\": \\\"get_optimized_cycle_route\\\",\\n\\\"input_args\\\": {\\n    \\\"start\\\": \\\"list of two floats representing the longitude and latitude of the start point\\\",\\n    \\\"end\\\": \\\"list of two floats representing the longitude and latitude of the end point\\\"\\n},\\n\\\"return\\\": \\\"A list of steps for the route. Each step is a dictionary containing detailed information about that segment of the route, such as the distance, duration, type of road, direction to turn, and a detailed description of the step.\\\",\\n\\\"depend\\\": \\\"requests, OpenRouteService API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old retired trader living in Mar'ivka", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price Prediction Interface\\\", \\n\\\"description\\\": \\\"Predicts the future stock prices based on historical data from Yahoo Finance and LSTM model from TensorFlow.\\\", \\n\\\"function_name\\\": \\\"predict_stock_price\\\", \\n\\\"input_args\\\": [\\\"ticker\\\", \\\"future_days\\\"], \\n\\\"return\\\": \\\"A list of predicted future closing stock prices.\\\", \\n\\\"depend\\\": [\\\"pandas_datareader\\\", \\\"numpy\\\", \\\"tensorflow\\\", \\\"sklearn.preprocessing\\\", \\\"Yahoo Finance API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A restaurant owner struggling with the impact of DUI laws on late-night business operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Safe Driver Discount Interface\\\",\\n\\\"description\\\": \\\"This interface calculates a discount on a customer's Uber ride fare to encourage safe transportation after dining. It takes as input the restaurant's location, the customer's home location, and the total bill. If the bill exceeds a certain amount, the interface offers to cover a portion of the ride fare.\\\",\\n\\\"function_name\\\": \\\"calculate_discount\\\",\\n\\\"input_args\\\": {\\n    \\\"restaurant_location\\\": \\\"A tuple (latitude, longitude) representing the restaurant's location.\\\",\\n    \\\"customer_home\\\": \\\"A tuple (latitude, longitude) representing the customer's home location.\\\",\\n    \\\"total_bill\\\": \\\"The total amount of the customer's bill.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"discount\\\": \\\"The amount of discount on the ride fare.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"Web API\\\": \\\"Uber API\\\"\\n}\\n}\"", "description": "tool development"}
{"input persona": "A conventional farmer who criticizes organic farming due to its lower yield", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crop Yield Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to predict the yield of a crop based on various factors like weather conditions, soil type, crop variety etc.\\\",\\n\\\"function_name\\\": \\\"predict_crop_yield\\\",\\n\\\"input_args\\\": [\\\"weather_conditions\\\", \\\"soil_type\\\", \\\"crop_variety\\\"],\\n\\\"return\\\": \\\"The predicted yield of the crop.\\\",\\n\\\"depend\\\": \\\"Pandas, Sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer scientist specializing in bioacoustics, developing algorithms to analyze marine mammal vocalizations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the librosa library to analyze audio files and generate their spectrograms. It's designed for bioacoustics specialists who need to analyze marine mammal vocalizations.\\\",\\n\\\"function_name\\\": \\\"generate_spectrogram\\\",\\n\\\"input_args\\\": [\\\"audio_path\\\"],\\n\\\"return\\\": \\\"A spectrogram of the audio file.\\\",\\n\\\"depend\\\": [\\\"librosa library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an English-speaking immigrant in Delaware who doesn't receive any government assistance", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Public Assistance Eligibility Interface\\\",\\n  \\\"description\\\": \\\"This interface predicts the types of public assistance an individual may be eligible for, based on their income, employment status, family size, immigrant status, and English language proficiency.\\\",\\n  \\\"function_name\\\": \\\"predict_public_assistance_eligibility\\\",\\n  \\\"input_args\\\": [\\\"features\\\"],\\n  \\\"return\\\": [\\\"Eligible public assistance types\\\"],\\n  \\\"depend\\\": [\\\"tensorflow\\\", \\\"pandas\\\", \\\"public_assistance_prediction_model.h5 (a hypothetical machine learning model)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A project manager at a multinational food delivery service, constantly keeping an eye on emerging players in the market", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitor Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes a given website to find emerging food delivery services. It then returns a list of these services.\\\",\\n\\\"function_name\\\": \\\"get_emerging_food_delivery_services\\\",\\n\\\"input_args\\\": \\\"url: A string representing the URL of the website to scrape\\\",\\n\\\"return\\\": \\\"A list of strings where each string is the name of an emerging food delivery service\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "a feminist who advocates women's contribution in science", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Paper Analysis Interface\\\",\\n\\\"description\\\": \\\"Extracts and identifies the names of female scientists and their contributions from the text of a scientific paper.\\\",\\n\\\"function_name\\\": \\\"extract_women_contributions\\\",\\n\\\"input_args\\\": \\\"paper_text\\\",\\n\\\"return\\\": \\\"List of female scientists' names and their contributions\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library and a large language model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A provider network coordinator who approves or denies coverage for psychiatric medications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Psychiatric Medication Approval Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to understand the therapeutic indications, contra-indications, side effects, and potential drug-drug interactions of psychiatric medications. Users only need to input the medication name and the patient's medical history, and the interface will return a decision of whether to approve or deny the coverage based on the patient's information and the medication.\\\",\\n\\\"function_name\\\": \\\"approve_or_deny\\\",\\n\\\"input_args\\\": [\\\"medication\\\", \\\"medical_history\\\"],\\n\\\"return\\\": \\\"A dictionary containing the medication name and the decision ('Approved' or 'Denied')\\\",\\n\\\"depend\\\": \\\"Machine learning model: microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract-fulltext from Hugging Face\\\"\\n}\"", "description": "tool development"}
{"input persona": "Um influenciador digital com uma grande base de seguidores que pode promover a empresa nas redes sociais", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interface de An\\u00e1lise de Engajamento de Influenciador\\\",\\n  \\\"description\\\": \\\"Analisa o engajamento de um influenciador no Instagram, incluindo seguidores totais, curtidas m\\u00e9dias por postagem e coment\\u00e1rios m\\u00e9dios por postagem.\\\",\\n  \\\"function_name\\\": \\\"analyze_engagement\\\",\\n  \\\"input_args\\\": [\\\"username\\\"],\\n  \\\"return\\\": \\\"Um dicion\\u00e1rio contendo 'seguidores', 'curtidas_m\\u00e9dias_por_postagem', 'coment\\u00e1rios_m\\u00e9dios_por_postagem'.\\\",\\n  \\\"depend\\\": \\\"biblioteca requests do Python, API do Instagram\\\"\\n}\"", "description": "tool development"}
{"input persona": "A recruitment agency owner seeking data-driven recommendations on candidate sourcing and selection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Candidate Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze a candidate's resume and cover letter using a pre-trained model from Hugging Face, returning a score representing the candidate's suitability for a particular job role.\\\",\\n\\\"function_name\\\": \\\"analyze_resume_cover_letter\\\",\\n\\\"input_args\\\": [\\\"resume_text\\\", \\\"cover_letter_text\\\"],\\n\\\"return\\\": \\\"A score between 0 and 1 representing the candidate's suitability for a particular job role.\\\",\\n\\\"depend\\\": [\\\"Hugging Face Transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A populist politician known for advocating healthcare deregulation", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Healthcare Regulation Search Interface\\\",\\n    \\\"description\\\": \\\"An interface to search for and simplify the summary of the latest healthcare regulation related to a specific term.\\\",\\n    \\\"function_name\\\": \\\"get_regulation_summary\\\",\\n    \\\"input_args\\\": [\\\"search_term\\\"],\\n    \\\"return\\\": {\\n        \\\"title\\\": \\\"The title of the latest regulation\\\",\\n        \\\"publication_date\\\": \\\"The publication date of the latest regulation\\\",\\n        \\\"summary\\\": \\\"A simplified summary of the latest regulation\\\"\\n    },\\n    \\\"depend\\\": {\\n        \\\"python_libraries\\\": [\\\"requests\\\", \\\"bs4\\\", \\\"re\\\"],\\n        \\\"web_APIs\\\": [\\\"Federal Register API\\\"],\\n        \\\"machine_learning_models\\\": [\\\"LLM\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A kiteboarding equipment manufacturer who provides insights and recommendations on the latest gear", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wind Speed and Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface returns the wind speed and weather forecast of the user's current location. It is useful for kiteboarders who need to know these conditions to decide on their gear and whether it's a good day for kiteboarding.\\\",\\n\\\"function_name\\\": \\\"get_wind_weather_forecast\\\",\\n\\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\"],\\n\\\"return\\\": [\\\"wind_speed\\\", \\\"weather_forecast\\\"],\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"OpenWeatherMap API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow user on a developer community platform who shared their own workaround for the problem", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Stack Overflow Solution Finder\\\",\\n\\\"description\\\": \\\"This interface uses the Stack Exchange API to search and return the accepted answers to user queries related to coding problems.\\\",\\n\\\"function_name\\\": \\\"stack_overflow_solution_finder\\\",\\n\\\"input_args\\\": \\\"problem_description - A string that describes the programming problem or error message\\\",\\n\\\"return\\\": \\\"The top-rated accepted answer from Stack Overflow or a message indicating no solution was found.\\\",\\n\\\"depend\\\": \\\"Leverages the Stack Exchange API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A doctoral candidate searching for an unexplored area in the history of African tribes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Research Gap Identification Interface\\\",\\n\\\"description\\\": \\\"Identify potential research gaps in a specific field by analyzing the frequency of key phrases and terms within scientific literature.\\\",\\n\\\"function_name\\\": \\\"identify_research_gap\\\",\\n\\\"input_args\\\": [\\\"topic\\\"],\\n\\\"return\\\": \\\"Prints 10 most common and 10 least common phrases, suggesting potential research gaps.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"collections.Counter\\\", \\\"sklearn.feature_extraction.text.CountVectorizer\\\", \\\"Europe PMC API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A professional responsible for coordinating necessary treatments and providing guidance on the worker's compensation process", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Treatment and Compensation Guidance Interface\\\",\\n\\\"description\\\": \\\"This interface uses the NLM Medical Text Indexer API to extract medical concepts from the injury description and match these concepts with a treatments database. It also uses a machine learning model to predict the compensation based on factors like injury type, severity, and the patient's job type.\\\",\\n\\\"function_name\\\": \\\"get_treatment_and_compensation\\\",\\n\\\"input_args\\\": {\\\"injury_description\\\": \\\"text\\\", \\\"job_type\\\": \\\"text\\\"},\\n\\\"return\\\": {\\\"treatments\\\": \\\"list\\\", \\\"compensation\\\": \\\"float\\\"},\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"sklearn\\\"], \\\"Web APIs\\\": [\\\"NLM Medical Text Indexer API\\\"], \\\"Machine Learning Models\\\": [\\\"compensation_model.pkl\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A neuroscience researcher who argues that athlete performance is primarily influenced by physical factors, not psychological ones", "synthesized text": "\"{\\n\\\"name\\\": \\\"Performance Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts an athlete's performance based on physical factors.\\\",\\n\\\"function_name\\\": \\\"predict_athlete_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"physical_factors\\\": \\\"A list of physical factors such as height, weight, speed, agility, strength, etc.\\\"\\n},\\n\\\"return\\\": \\\"A predicted performance score.\\\",\\n\\\"depend\\\": \\\"This function leverages a pre-trained Random Forest Regressor model from the sklearn library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a business lawyer in Tehran, Iran", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Contract Analysis Interface\\\", \\n  \\\"description\\\": \\\"An interface that allows users to input a contract text, and the model will extract key details from the contract, such as the parties involved, the effective date, and the obligations.\\\", \\n  \\\"function_name\\\": \\\"extract_contract_details\\\", \\n  \\\"input_args\\\": [\\\"contract_text\\\"], \\n  \\\"return\\\": {\\\"parties\\\": [\\\"list of parties involved\\\"], \\n              \\\"effective_dates\\\": [\\\"list of effective dates\\\"], \\n              \\\"obligations\\\": [\\\"list of obligations in the contract\\\"]}, \\n  \\\"depend\\\": {\\\"python library\\\": [\\\"transformers\\\"], \\n             \\\"machine learning model\\\": [\\\"dslim/bert-base-NER\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A talented wide receiver who relied on the retired player's strategic brilliance to execute perfectly timed plays", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Analytics Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from huggingface to predict the potential success of a sports play based on various factors. The user inputs the relevant play data, and the interface returns the probability of success for the play.\\\",\\n\\\"function_name\\\": \\\"predict_play_success\\\",\\n\\\"input_args\\\": \\\"play_data\\\",\\n\\\"return\\\": \\\"probability of success\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers, PyTorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A spokesperson for an oil and gas company promoting the economic benefits of hydraulic fracturing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fracking Economic Benefits Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the economic benefits of hydraulic fracturing (fracking) based on input data of gas production, gas prices, and operating costs.\\\",\\n\\\"function_name\\\": \\\"calculate_economic_benefits\\\",\\n\\\"input_args\\\": {\\\"data_file\\\": \\\"A CSV file containing three columns: 'gas_production', 'gas_price', and 'operating_costs'.\\\"},\\n\\\"return\\\": \\\"The economic benefits of fracking, computed as the difference between the total revenue and the total costs.\\\",\\n\\\"depend\\\": \\\"Pandas, Numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A screenwriter and parent who has a child enrolled at Wonderland Avenue Elementary School", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Lunch Menu Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the school lunch menu for a specific date from the Wonderland Avenue Elementary School website.\\\",\\n\\\"function_name\\\": \\\"get_school_lunch_menu\\\",\\n\\\"input_args\\\": \\\"date - A string representing the date for which the user wants to fetch the school lunch menu. The format should match the date format used on the school's website.\\\",\\n\\\"return\\\": \\\"A list of menu items for the specified date, or a string indicating that no menu is available for this date.\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "a small business owner in UK with limited knowledge in taxation", "synthesized text": "\"{\\n\\\"name\\\": \\\"UK VAT Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of calculating VAT for a given amount. The user only needs to input the original amount and the VAT rate, and it will return the VAT amount.\\\",\\n\\\"function_name\\\": \\\"calculate_vat_amount\\\",\\n\\\"input_args\\\": [\\\"original_amount\\\", \\\"vat_rate\\\"],\\n\\\"return\\\": \\\"vat_amount\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cancer patient undergoing regular PET-CT scans with radiopharmaceutical tracers", "synthesized text": "\"{\\n\\\"name\\\": \\\"PET-CT Image Analysis Interface\\\",\\n\\\"description\\\": \\\"Uses a pre-trained model from TensorFlow Hub to identify tumor regions in PET-CT scans\\\",\\n\\\"function_name\\\": \\\"analyze_pet_ct_image\\\",\\n\\\"input_args\\\": \\\"path_to_image - a string representing the file path to the PET-CT image\\\",\\n\\\"return\\\": \\\"Displays the original PET-CT image with a heatmap overlay highlighting potential tumor regions\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A digital media consultant who stays up-to-date with the latest trends and can recommend parental control software and apps", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parental Control Software Recommender\\\",\\n\\\"description\\\": \\\"An interface to recommend top-rated parental control software from the Google Play Store. Users only need to specify the number of top apps they want to consider.\\\",\\n\\\"function_name\\\": \\\"get_top_parental_control_apps\\\",\\n\\\"input_args\\\": \\\"num_apps: The number of top apps to consider\\\",\\n\\\"return\\\": \\\"A list of tuples, where each tuple contains the name and brief description of a top-rated parental control app\\\",\\n\\\"depend\\\": \\\"Google Play Store API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An industrial automation company looking to implement TwinCAT in their systems and seeking expert software engineering services", "synthesized text": "\"{\\n\\\"name\\\": \\\"TwinCAT PLC Automation Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to compile and run their PLC code written in Structured Text (ST) using the TwinCAT XAR (eXtended Automation Runtime).\\\",\\n\\\"function_name\\\": \\\"run_plc_code\\\",\\n\\\"input_args\\\": [\\\"path_to_st_file\\\"],\\n\\\"return\\\": \\\"The state of the PLC, either 'Running' or 'Stopped'.\\\",\\n\\\"depend\\\": [\\\"TwinCAT automation interface for Python (tc3py)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A professor of theology who specializes in the history of religious orders", "synthesized text": "\"{\\n\\\"name\\\": \\\"Religious Order Information Interface\\\",\\n\\\"description\\\": \\\"This interface returns detailed information about a specified religious order by scraping data from an online theology encyclopedia.\\\",\\n\\\"function_name\\\": \\\"get_order_info\\\",\\n\\\"input_args\\\": [\\\"order_name\\\"],\\n\\\"return\\\": \\\"Information about the specified religious order in string format\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\", \\\"https://www.theologyencyclopedia.com\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A restaurant manager impressed by the student's work ethic and ability to handle multiple responsibilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Employee Scheduling Interface\\\",\\n\\\"description\\\": \\\"This interface generates an optimal employee schedule based on the list of employees, their availability, and the number of shifts to be covered each day.\\\",\\n\\\"function_name\\\": \\\"create_employee_schedule\\\",\\n\\\"input_args\\\": [\\\"employees\\\", \\\"availability\\\", \\\"num_shifts\\\"],\\n\\\"return\\\": \\\"A list of lists representing the schedule, where the row represents the employee and the column represents the shift (1 means the employee is scheduled for the shift, while 0 means they're not).\\\",\\n\\\"depend\\\": \\\"ortools\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professor specializing in multilevel modeling who can provide guidance and mentorship in conducting research using these models", "synthesized text": "\"{\\n\\\"name\\\": \\\"Multilevel Model Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that fits a multilevel model to data and returns the model's predictions. The user provides a CSV file containing the data, the dependent variable, and the independent variables.\\\",\\n\\\"function_name\\\": \\\"fit_multilevel_model\\\",\\n\\\"input_args\\\": [\\\"data_path\\\", \\\"dependent_var\\\", \\\"independent_vars\\\"],\\n\\\"return\\\": \\\"A list of predictions from the fitted multilevel model.\\\",\\n\\\"depend\\\": \\\"Statsmodels, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aspiring children's book author who seeks feedback and inspiration from the retired engineer's grandkids", "synthesized text": "\"{\\n\\\"name\\\": \\\"Story Suggestion Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a large language model (LLM) to provide story suggestions and ideas based on the input text. The user inputs a brief summary or idea for a children's story, and our interface returns a more detailed story suggestion or enhancement.\\\",\\n\\\"function_name\\\": \\\"generate_story_suggestion\\\",\\n\\\"input_args\\\": \\\"summary - a brief summary or idea for a children's story\\\",\\n\\\"return\\\": \\\"A more detailed story suggestion or enhancement based on the input summary.\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young viewer who appreciates quick and entertaining news updates to stay informed", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Summary Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest news articles in a given category and returns a summary of each article.\\\",\\n\\\"function_name\\\": \\\"get_news_summary\\\",\\n\\\"input_args\\\": \\\"category - The category of news the user is interested in (e.g., 'technology', 'business', 'sports')\\\",\\n\\\"return\\\": \\\"A list of summaries of the latest news articles in the specified category.\\\",\\n\\\"depend\\\": \\\"This interface leverages the NewsAPI to fetch the latest news articles and a summarization model from HuggingFace to summarize the articles.\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一位对体育历史感兴趣的澳大利亚本地篮球教练。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Basketball History Search Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to search for historical data and information about a basketball team or player by name\\\",\\n  \\\"function_name\\\": \\\"get_basketball_history\\\",\\n  \\\"input_args\\\": \\\"name\\\",\\n  \\\"return\\\": \\\"JSON object containing historical data and information about the specified basketball team or player\\\",\\n  \\\"depend\\\": \\\"requests library, ESPN API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Kansan who doesn't care about sports at all", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"Provides a simple text-based weather forecast for a given location.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": \\\"location - The city or town for which to get the forecast\\\",\\n\\\"return\\\": \\\"A brief text-based weather forecast for the given location\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned ecologist who has pioneered the field of ecosystem services valuation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ecosystem Services Valuation Interface\\\", \\n\\\"description\\\": \\\"An interface to calculate the ecosystem services valuation for a given geographical region using the ARIES for SEEA API.\\\", \\n\\\"function_name\\\": \\\"get_ecosystem_services_valuation\\\", \\n\\\"input_args\\\": \\\"region\\\", \\n\\\"return\\\": \\\"Dictionary with the ecosystem services valuation for the given region.\\\", \\n\\\"depend\\\": \\\"ARIES for SEEA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Chinese consumer who always shop from AliExpress and Xiaomi", "synthesized text": "\"{\\n\\\"name\\\": \\\"Price Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes the product prices from AliExpress and Xiaomi store. The user needs to provide the product URL, and the interface will return the current price of the product.\\\",\\n\\\"function_name\\\": \\\"get_product_price\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"price\\\",\\n\\\"depend\\\": [\\\"beautifulsoup\\\", \\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A die-hard fan of Mito HollyHock, the Japanese football team based in Mito, Ibaraki, with an encyclopedic knowledge of the team's history and a penchant for reminiscing about past seasons.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n  \\\"description\\\": \\\"An interface that returns detailed statistics about football matches of a specific team in a specific season. It uses Sports Open Data API to fetch the data.\\\",\\n  \\\"function_name\\\": \\\"get_match_statistics\\\",\\n  \\\"input_args\\\": {\\n    \\\"team_name\\\": \\\"The name of the football team\\\",\\n    \\\"season\\\": \\\"The season for which the statistics are to be fetched\\\"\\n  },\\n  \\\"return\\\": \\\"Detailed statistics about the football matches played by the team in the specified season.\\\",\\n  \\\"depend\\\": \\\"RapidAPI's Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud Wheeling Park High School speech and debate team alumnus who graduated in the late 1980s.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Detection Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes speech from audio files.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio - The path to the audio file.\\\",\\n\\\"return\\\": \\\"A transcription of the speech in the audio file.\\\",\\n\\\"depend\\\": \\\"SpeechRecognition Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An economist who is also a gay rights activist in the Caribbean.", "synthesized text": "\"{\\n\\\"name\\\": \\\"LGBTQ Rights and Economic Indicators Correlation Interface\\\",\\n\\\"description\\\": \\\"This interface returns a correlation score between a chosen economic indicator and the level of LGBTQ rights in a specific country.\\\",\\n\\\"function_name\\\": \\\"get_correlation\\\",\\n\\\"input_args\\\": [\\\"country\\\", \\\"indicator\\\"],\\n\\\"return\\\": \\\"Correlation score\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"scipy\\\", \\\"World Bank Data API\\\", \\\"ILGA's State-Sponsored Homophobia report\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A bystander in Ikast, Denmark, with a casual interest in local businesses and their impact on the community", "synthesized text": "\"{\\n\\\"name\\\": \\\"Business Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface returns a brief analysis of a local business's impact on the community. The analysis includes information such as the number of employees, years in operation, community projects involvement, and customer reviews.\\\",\\n\\\"function_name\\\": \\\"analyze_business_impact\\\",\\n\\\"input_args\\\": \\\"business_name\\\",\\n\\\"return\\\": \\\"A dictionary containing the business's name, years in operation, estimated employee count, involvement in community projects, average rating, and review count.\\\",\\n\\\"depend\\\": \\\"requests library, Yelp API, large language model\\\"\\n}\"", "description": "tool development"}
{"input persona": "an international player in the domain industry with strong distrust on government control.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Domain Availability Checker Interface\\\",\\n\\\"description\\\": \\\"This interface uses the WHOIS XML API to check the availability of a domain name.\\\",\\n\\\"function_name\\\": \\\"check_domain_availability\\\",\\n\\\"input_args\\\": {\\n    \\\"domain_name\\\": \\\"The domain name to check the availability of.\\\"\\n},\\n\\\"return\\\": \\\"The availability status of the domain.\\\",\\n\\\"depend\\\": \\\"WHOIS XML API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A record label owner who has supported and released their music from the beginning", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Music Genre Classification Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface to predict the genre of a music track using a pre-trained deep learning model from TensorFlow Hub.\\\",\\n  \\\"function_name\\\": \\\"predict_music_genre\\\",\\n  \\\"input_args\\\": \\\"path_to_audio - The path to the audio file.\\\",\\n  \\\"return\\\": \\\"Predicted music genre of the input audio track.\\\",\\n  \\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, PyDub, and the YAMNet model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A naval officer who once dreamed of becoming a pilot but chose a different path", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Path Simulation Interface\\\",\\n\\\"description\\\": \\\"An interface to get a simulated flight path between two airports using the OpenSky Network's API.\\\",\\n\\\"function_name\\\": \\\"get_flight_path\\\",\\n\\\"input_args\\\": [\\\"origin\\\", \\\"destination\\\"],\\n\\\"return\\\": \\\"A simulated flight path as a list of geographic coordinates, or an error message.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"OpenSky Network API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A community member who documents and celebrates the team's historic achievements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historic Achievements Documentation Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch historical data related to a specific team from Wikipedia.\\\",\\n\\\"function_name\\\": \\\"get_team_history\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"A string of HTML containing the first section of the team's Wikipedia page, or a 'No data found' message if no such page exists.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fascinating historical figure with a life filled with captivating stories and experiences", "synthesized text": "\"{\\n \\\"name\\\": \\\"Historical Figure Information Interface\\\",\\n \\\"description\\\": \\\"An interface to fetch information about a historical figure from Wikipedia. It uses Wikipedia's API to extract a summary of the figure's life and contributions.\\\",\\n \\\"function_name\\\": \\\"get_historical_figure_summary\\\",\\n \\\"input_args\\\": [\\\"figure_name\\\"],\\n \\\"return\\\": \\\"A string summary of the historical figure's life and contributions. If no information is found, returns a message saying no information was found.\\\",\\n \\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A novelist who has been avoiding Ulysses for years due to its reputation for difficulty.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Readability Score Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to a text file and returns the Flesch Reading Ease score, indicating the readability of the text. Lower scores correspond to more difficult texts.\\\",\\n\\\"function_name\\\": \\\"calculate_readability_score\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"Flesch Reading Ease score (float)\\\",\\n\\\"depend\\\": [\\\"textstat library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a sommelier who has extensive knowledge of wineries and wine production.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wine Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends wines based on user's preferences in sweetness, acidity, alcohol content and tannins. It uses a K-Nearest Neighbors model trained on a dataset of wine characteristics.\\\",\\n\\\"function_name\\\": \\\"recommend_wines\\\",\\n\\\"input_args\\\": {\\n    \\\"sweetness\\\": \\\"The user's preferred level of sweetness in the wine\\\",\\n    \\\"acidity\\\": \\\"The user's preferred level of acidity in the wine\\\",\\n    \\\"alcohol\\\": \\\"The user's preferred level of alcohol content in the wine\\\",\\n    \\\"tannins\\\": \\\"The user's preferred level of tannins in the wine\\\"\\n},\\n\\\"return\\\": \\\"A list of wine names that suit the user's preferences\\\",\\n\\\"depend\\\": \\\"Python's sklearn and pandas libraries, and a pre-existing dataset of wine characteristics and reviews\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old Italian man who was a film extra in La donna del peccato", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Information Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface takes a movie title as input and returns information about the movie, including its director, main cast, release year, and plot summary.\\\",\\n\\\"function_name\\\": \\\"get_movie_info\\\",\\n\\\"input_args\\\": \\\"title\\\",\\n\\\"return\\\": \\\"A dictionary containing the movie's title, release year, director, main actors, and plot summary.\\\",\\n\\\"depend\\\": \\\"OMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A determined, young author feverishly working on a debut novel in the wee hours of the night", "synthesized text": "\"{\\n\\\"name\\\": \\\"Novel Writing Assistance Interface\\\",\\n\\\"description\\\": \\\"This interface generates a continuation of a piece of text using the GPT-2 model from huggingface.\\\",\\n\\\"function_name\\\": \\\"generate_novel_text\\\",\\n\\\"input_args\\\": {\\n    \\\"start_text\\\": \\\"A string of text that the generated text should continue from.\\\",\\n    \\\"max_length\\\": \\\"The maximum length of the generated text. Optional, default value is 50.\\\"\\n},\\n\\\"return\\\": \\\"A string of text that continues from the input text.\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library (GPT2LMHeadModel, GPT2Tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious call center agent aiming to climb the corporate ladder", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech to Text Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google Speech to Text API to convert audio files into text. Useful for call center agents to analyze their conversations and improve their communication skills.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": [\\\"path_to_audio\\\"],\\n\\\"return\\\": \\\"Transcribed text\\\",\\n\\\"depend\\\": [\\\"Google Speech to Text API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired professional tennis player who idolized Ilie Năstase", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Statistics Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses PyCaret to create a predictive model based on game statistics. It can predict the outcome of future games and the model can be saved and loaded for later use.\\\",\\n\\\"function_name\\\": [\\\"create_predictive_model\\\", \\\"predict_game_outcome\\\", \\\"save_and_load_model\\\"],\\n\\\"input_args\\\": [\\\"csv_file\\\", \\\"model\\\", \\\"model_name\\\"],\\n\\\"return\\\": [\\\"best_model\\\", \\\"predictions['Label']\\\", \\\"loaded_model\\\"],\\n\\\"depend\\\": [\\\"PyCaret\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A prom attendee in 2021", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dress Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to recommend dresses based on user preferences.\\\",\\n\\\"function_name\\\": \\\"recommend_dresses\\\",\\n\\\"input_args\\\": \\\"A DressPreference object that includes color, length, and style preferences.\\\",\\n\\\"return\\\": \\\"A list of recommended dresses.\\\",\\n\\\"depend\\\": \\\"tensorflow, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local community leader in Hicksville", "synthesized text": "\"{\\n\\\"name\\\": \\\"Community Event Organizing Interface\\\", \\n\\\"description\\\": \\\"This interface helps users to create community events on Eventbrite by inputting event details.\\\", \\n\\\"function_name\\\": \\\"create_event\\\", \\n\\\"input_args\\\": [\\\"event_name\\\", \\\"event_description\\\", \\\"start_date_time\\\", \\\"end_date_time\\\", \\\"ticket_price\\\"], \\n\\\"return\\\": \\\"Eventbrite event ID\\\",\\n\\\"depend\\\": [\\\"Eventbrite API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Un profesor de educación física interesado en el desarrollo deportivo y las políticas de gestión del fútbol.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interfaz para obtener informaci\\u00f3n sobre las ligas de f\\u00fatbol\\\",\\n\\\"description\\\": \\\"Esta interfaz permite a los usuarios obtener informaci\\u00f3n sobre cualquier liga de f\\u00fatbol utilizando la API de Football-Data.org. Los usuarios solo necesitan proporcionar el nombre de la liga.\\\",\\n\\\"function_name\\\": \\\"obtener_informacion_liga\\\",\\n\\\"input_args\\\": \\\"nombre_liga\\\",\\n\\\"return\\\": \\\"Informaci\\u00f3n de la liga de f\\u00fatbol en formato JSON.\\\",\\n\\\"depend\\\": \\\"Python library: requests, Web API: Football-Data.org\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business owner often interacting with the regulatory body to ensure her company adheres to standards", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Regulatory Document Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Google Cloud's Document Understanding AI to extract key information from regulatory documents. It helps businesses in understanding and adhering to regulatory standards.\\\",\\n  \\\"function_name\\\": \\\"analyze_regulatory_document\\\",\\n  \\\"input_args\\\": {\\n    \\\"project_id\\\": \\\"ID of the Google Cloud project\\\",\\n    \\\"input_uri\\\": \\\"Path to the regulatory document file on Google Cloud Storage\\\"\\n  },\\n  \\\"return\\\": \\\"List of key entities extracted from the regulatory document\\\",\\n  \\\"depend\\\": \\\"Google Cloud's Document Understanding AI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A theater director who commissions custom backdrops for their stage productions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Backdrop Design Analysis Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that uses a pre-trained model from TensorFlow Hub to classify the mood and setting of a theater backdrop design, providing a list of categories the design falls under.\\\",\\n\\\"function_name\\\": \\\"analyze_backdrop_design\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A number that corresponds to the predicted class of the image, which can be mapped to a specific category.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and the Inception V3 model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local villager living in Arunachal Pradesh", "synthesized text": "\"{\\n\\\"name\\\": \\\"Internet Connectivity Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks if the device is currently connected to the internet. It is particularly useful for users living in remote locations or with unreliable internet connections.\\\",\\n\\\"function_name\\\": \\\"check_internet_connectivity\\\",\\n\\\"input_args\\\": {},\\n\\\"return\\\": \\\"A string message indicating whether the device is connected to the internet.\\\",\\n\\\"depend\\\": \\\"Python's built-in library 'socket'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tech-savvy PowerPoint presentation designer who doesn't usually use Word, especially not for mail merge.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mail Merge Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to perform mail merge operations in Microsoft Word without having to manually edit each document. It takes in a Word document template and a dictionary of data, and outputs a personalized Word document.\\\",\\n\\\"function_name\\\": \\\"mail_merge\\\",\\n\\\"input_args\\\": {\\\"template\\\": \\\"The file path to the Word document template.\\\", \\\"data\\\": \\\"A dictionary where each key-value pair represents a field to be replaced and the corresponding value.\\\"},\\n\\\"return\\\": \\\"The file path to the output Word document.\\\",\\n\\\"depend\\\": \\\"Python libraries: mailmerge, python-docx\\\"\\n}\"", "description": "tool development"}
{"input persona": "a resident of Gibraltar who advocates for renewable energy solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Panel Efficiency Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the efficiency of a solar panel based on current temperature and sunlight intensity (in watts per square meter).\\\",\\n\\\"function_name\\\": \\\"predict_solar_panel_efficiency\\\",\\n\\\"input_args\\\": {\\n    \\\"temperature\\\": \\\"The current temperature (in Celsius).\\\",\\n    \\\"sunlight\\\": \\\"The current amount of sunlight (in watts per square meter).\\\"\\n},\\n\\\"return\\\": \\\"The predicted efficiency of a solar panel under the given conditions.\\\",\\n\\\"depend\\\": \\\"scikit-learn library and a pretrained machine learning model 'solar_panel_efficiency_model.joblib'.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A younger cousin who is fascinated by their RC helicopter skills and looks up to them as a mentor", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drone Flight Path Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Maps API to plot the RC helicopter's flight path using GPS data. It returns a URL to a Google Maps page with the flight path plotted.\\\",\\n\\\"function_name\\\": \\\"get_flight_path_map_url\\\",\\n\\\"input_args\\\": {\\n    \\\"gps_coordinates\\\": \\\"A list of GPS coordinates (latitude, longitude) in the order of the flight path.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"map_url\\\": \\\"A URL to a Google Maps page with the flight path plotted.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"polyline\\\"],\\n    \\\"Web APIs\\\": [\\\"Google Maps API\\\"],\\n    \\\"machine learning models\\\": []\\n}\\n}\"", "description": "tool development"}
{"input persona": "A longtime fan of Oprah Winfrey who had always admired her for breaking barriers in the media industry as an African-American woman", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of books recommended by Oprah Winfrey. The user inputs the number of books they want to receive, and the interface returns the titles and authors of the corresponding number of recommended books.\\\",\\n\\\"function_name\\\": \\\"get_oprah_recommended_books\\\",\\n\\\"input_args\\\": [\\\"number_of_books\\\"],\\n\\\"return\\\": \\\"List of dictionaries with 'title' and 'author' as keys\\\",\\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A painter who also draws inspiration from history, but focuses on different time periods and artistic styles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Art Style Transfer Interface\\\",\\n\\\"description\\\": \\\"This interface transfers the style of a famous painting to any given image.\\\",\\n\\\"function_name\\\": \\\"transfer_art_style\\\",\\n\\\"input_args\\\": {\\n    \\\"style_path\\\": \\\"The path to the style image file\\\",\\n    \\\"target_path\\\": \\\"The path to the target image file\\\"\\n},\\n\\\"return\\\": \\\"The target image with the artistic style of the style image applied\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, numpy, PIL\\\"\\n}\"", "description": "tool development"}
{"input persona": "A race timing specialist responsible for accurately recording the participants' finishing times", "synthesized text": "\"{\\n\\\"name\\\": \\\"Participant Timing Interface\\\",\\n\\\"description\\\": \\\"This interface processes a video file of a race finish line and returns the finishing times of all identified participants.\\\",\\n\\\"function_name\\\": \\\"process_video\\\",\\n\\\"input_args\\\": [\\\"path_to_video\\\"],\\n\\\"return\\\": \\\"Void (Prints the participant number and their corresponding finish time)\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\", \\\"imutils\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A project manager at a space agency who respects the older cousin's knowledge and expertise in the field", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Spacecraft Trajectory Calculation Interface\\\",\\n    \\\"description\\\": \\\"Calculates the trajectory needed for a spacecraft to travel between two celestial bodies on a given date\\\",\\n    \\\"function_name\\\": \\\"calculate_spacecraft_trajectory\\\",\\n    \\\"input_args\\\": {\\n        \\\"body1\\\": \\\"Name of the departure celestial body\\\",\\n        \\\"body2\\\": \\\"Name of the destination celestial body\\\",\\n        \\\"date\\\": \\\"Departure date (YYYY-MM-DD)\\\"\\n    },\\n    \\\"return\\\": \\\"Departure and arrival velocities\\\",\\n    \\\"depend\\\": \\\"Pykep library\\\"\\n}\"", "description": "tool development"}
{"input persona": "The owner of a pharmacy who provides discounted medications to patients of the free clinic", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Discount Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the discounted price of a medication using the openFDA API and a local database containing original prices of medications.\\\",\\n\\\"function_name\\\": \\\"calculate_discounted_price\\\",\\n\\\"input_args\\\": [\\\"medication_name\\\", \\\"discount_percentage\\\"],\\n\\\"return\\\": \\\"The discounted price of the medication.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"sqlite3 library\\\", \\\"openFDA API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mortician who works closely with the forensic pathologist to prepare bodies for funerals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Facial Reconstruction Interface\\\",\\n\\\"description\\\": \\\"Reconstructs the likely facial features from a 3D scan of a skull using a deep learning model from TensorFlow Hub. Useful for morticians working on bodies that are difficult to recognize due to decomposition or damage.\\\",\\n\\\"function_name\\\": \\\"reconstruct_face\\\",\\n\\\"input_args\\\": \\\"path_to_scan - a string that represents the path to the 3D scan file\\\",\\n\\\"return\\\": \\\"A 3D numpy array that represents the possible facial features\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, a pre-trained 3D image reconstruction model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A foodie and technology enthusiast interested in blockchain technology.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain-Based Recipe Authenticity Verification Interface\\\",\\n\\\"description\\\": \\\"An interface to verify the authenticity and originality of a recipe using blockchain technology. It checks whether a recipe has been altered or not since its initial recording in the blockchain.\\\",\\n\\\"function_name\\\": \\\"verify_recipe_authenticity\\\",\\n\\\"input_args\\\": {\\n    \\\"recipe_id\\\": \\\"The unique identifier of the recipe.\\\",\\n    \\\"blockchain_url\\\": \\\"The URL of the blockchain API.\\\"\\n},\\n\\\"return\\\": \\\"A statement about the recipe's authenticity.\\\",\\n\\\"depend\\\": \\\"Python's requests library, Blockchain API\\\"\\n}\"", "description": "tool development"}
{"input persona": "一位军工企业的研发经理，寻求与教授合作开展军事电子技术研究", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Scientific Paper Finder Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface for finding scientific papers related to a specific subject from the arXiv API.\\\",\\n  \\\"function_name\\\": \\\"find_scientific_papers\\\",\\n  \\\"input_args\\\": {\\n    \\\"subject\\\": \\\"The research subject to look for in scientific papers.\\\",\\n    \\\"sort_by\\\": \\\"The criterion to sort the papers by. Default is 'submittedDate'.\\\",\\n    \\\"start\\\": \\\"The starting index in the results. Default is 0.\\\",\\n    \\\"max_results\\\": \\\"The maximum number of results to return. Default is 10.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of dictionaries, each containing the title, summary, date of publication, and authors of a scientific paper.\\\",\\n  \\\"depend\\\": \\\"requests, feedparser, arXiv API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A school district that relies on the telecommunications company's services to enhance digital learning opportunities for students", "synthesized text": "\"{\\n\\\"name\\\": \\\"Internet Speed Test Interface\\\",\\n\\\"description\\\": \\\"This interface tests the internet speed and returns the upload and download speeds in Mbps. It uses the Speedtest API to measure the speeds.\\\",\\n\\\"function_name\\\": \\\"run_speedtest\\\",\\n\\\"input_args\\\": \\\"{}\\\",\\n\\\"return\\\": \\\"{'Download Speed (Mbps)': float, 'Upload Speed (Mbps)': float}\\\",\\n\\\"depend\\\": \\\"Speedtest API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sibling who is skeptical about the connection between diet and mental health", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutritional Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface uses the USDA FoodData Central API to get the nutritional value of different foods, and applies a machine learning model to predict the potential impact of these nutrients on mental health.\\\",\\n\\\"function_name\\\": \\\"predict_mental_health_impact\\\",\\n\\\"input_args\\\": \\\"food_list - a list of foods the user eats regularly\\\",\\n\\\"return\\\": \\\"mental_health_score - a score representing the potential influence of the diet on mental health\\\",\\n\\\"depend\\\": \\\"requests, pandas, sklearn, tensorflow, USDA FoodData Central API, pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An American citizen who resides in Minnesota and has minimal understanding of how health insurances work.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health Insurance Plan Comparison Interface\\\",\\n\\\"description\\\": \\\"Interface to fetch and compare health insurance plans available for a user based on their zip code, age, income and household size\\\",\\n\\\"function_name\\\": \\\"get_health_insurance_plans\\\",\\n\\\"input_args\\\": {\\n    \\\"zip_code\\\": \\\"Zip code of the user\\\",\\n    \\\"age\\\": \\\"Age of the user\\\",\\n    \\\"income\\\": \\\"Annual income of the user\\\",\\n    \\\"household_size\\\": \\\"Number of people in the user's household\\\"\\n    },\\n\\\"return\\\": \\\"A comparison of different health insurance plans available for the user\\\",\\n\\\"depend\\\": \\\"Healthcare.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mining company specializing in extracting iron ore, the main raw material for steel production", "synthesized text": "\"{\\n\\\"name\\\": \\\"Iron Ore Price Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface forecasts the price of iron ore for the next 5 days based on historical data using ARIMA model\\\",\\n\\\"function_name\\\": \\\"forecast_ironore_prices\\\",\\n\\\"input_args\\\": \\\"symbol\\\",\\n\\\"return\\\": \\\"An array of forecasted prices for the next 5 days\\\",\\n\\\"depend\\\": \\\"requests, pandas, numpy, statsmodels, Alpha Vantage API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a social worker who puts a premium on human lives, believing violence doesn't solve anything.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Violence Potential Prediction Interface\\\",\\n    \\\"description\\\": \\\"An interface to predict the potential for violent behavior based on a given text string.\\\",\\n    \\\"function_name\\\": \\\"predict_violence_potential\\\",\\n    \\\"input_args\\\": [\\\"text\\\"],\\n    \\\"return\\\": \\\"A boolean indicating whether the text suggests a potential for violent behavior.\\\",\\n    \\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"distilbert-base-uncased-finetuned-sst-2-english from Hugging Face\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A human resources manager seeking advice on implementing career development programs in their organization", "synthesized text": "\"{\\n\\\"name\\\": \\\"Employee Skill Gap Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that identifies the skill gaps for each employee in the organization based on their current or desired roles. This information can be used to tailor career development programs. Users must provide two CSV files: one containing employee details and their current skills, and another containing role requirements in the company.\\\",\\n\\\"function_name\\\": \\\"identify_skill_gaps\\\",\\n\\\"input_args\\\": [\\\"employees_csv\\\", \\\"roles_csv\\\"],\\n\\\"return\\\": \\\"A dictionary with employee names as keys and a list of skills they need to develop as values.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn.feature_extraction.text.CountVectorizer\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Labhesh, a 45-year-old electrical engineer who has been working with a leading telecom company in India for the past 20 years and has a passion for understanding the tech advancements in his field.", "synthesized text": "\"{\\n\\\"name\\\": \\\"5G Network Visualization Interface\\\",\\n\\\"description\\\": \\\"An interface to visualize the 5G network coverage in a given city in India. It fetches the 5G network coverage data from Ookla's Speedtest API and plots the data using matplotlib, showing the locations of coverage points on a latitude-longitude grid, with color indicating signal strength.\\\",\\n\\\"function_name\\\": \\\"get_5g_coverage\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"Name of the city in India\\\"},\\n\\\"return\\\": \\\"A visual plot showing the 5G network coverage in the city. No physical return from the function, the plot is directly displayed.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"matplotlib\\\"], \\\"web APIs\\\": [\\\"Ookla's Speedtest API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A fellow drag racer who is always there to celebrate victories and provide a listening ear during defeats", "synthesized text": "\"{\\n\\\"name\\\": \\\"Top Speed Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the top speed of a car based on its features like horsepower, engine size and weight by leveraging a pre-trained machine learning model from scikit-learn library.\\\",\\n\\\"function_name\\\": \\\"predict_top_speed\\\",\\n\\\"input_args\\\": [\\\"horsepower\\\", \\\"engine_size\\\", \\\"weight\\\"],\\n\\\"return\\\": \\\"Predicted top speed of the car\\\",\\n\\\"depend\\\": [\\\"scikit-learn\\\", \\\"pandas\\\", \\\"pre-trained machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An IT specialist who can assess the business's existing infrastructure and recommend suitable online platforms and tools", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cloud Service Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the business's existing infrastructure details and requirements as inputs and outputs a list of suitable online platforms and tools.\\\",\\n\\\"function_name\\\": \\\"recommend_cloud_services\\\",\\n\\\"input_args\\\": [\\\"infrastructure_details\\\", \\\"requirements\\\"],\\n\\\"return\\\": \\\"A list of suitable online platforms and tools\\\",\\n\\\"depend\\\": \\\"Python library: scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "an executive officer from a utility company who is concerned with customer debt management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Debt Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes a file path to a CSV file with customer data and returns a list of customers who are likely to have debt issues.\\\",\\n\\\"function_name\\\": \\\"predict_debt\\\",\\n\\\"input_args\\\": \\\"file_path - A string that represents the path to the CSV file with customer data.\\\",\\n\\\"return\\\": \\\"A list of dictionaries with each dictionary containing a customer id and the probability of that customer having debt issues.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lifelong resident of South Kalgoorlie, Western Australia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface returns the current weather data for a specified city. The data includes the current temperature (in kelvin), the current humidity (in percentage), and a brief weather description.\\\",\\n\\\"function_name\\\": \\\"get_weather\\\",\\n\\\"input_args\\\": [\\\"city_name\\\"],\\n\\\"return\\\": {\\\"Temperature (in kelvin unit)\\\": \\\"current_temperature\\\", \\\"Humidity (in percentage)\\\": \\\"current_humidity\\\", \\\"Description\\\": \\\"weather_description\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"OpenWeatherMap API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an old man who was once a close neighbor and friend of Edward Margetson", "synthesized text": "\"{\\n\\\"name\\\": \\\"Celebrity News Interface\\\",\\n\\\"description\\\": \\\"This interface fetches recent news articles about a specific person using the News API.\\\",\\n\\\"function_name\\\": \\\"get_recent_news_about_person\\\",\\n\\\"input_args\\\": \\\"a string of the person's name\\\",\\n\\\"return\\\": \\\"a list of titles of the most recent news articles about the person\\\",\\n\\\"depend\\\": \\\"News API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A health coach who provides practical tips and strategies for implementing healthy habits in daily life", "synthesized text": "\"{\\n\\\"name\\\": \\\"Calorie Counter Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to input food items they've consumed, and it will return the total calorie count for these items.\\\",\\n\\\"function_name\\\": \\\"get_calorie_count\\\",\\n\\\"input_args\\\": [\\\"food_items\\\"],\\n\\\"return\\\": \\\"total_calories\\\",\\n\\\"depend\\\": \\\"Nutritionix API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A star pitcher on the baseball team who struggles with writing and seeks help from the persona", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baseball Stats Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface loads a player's baseball statistics from a CSV file and performs an analysis, returning a summary of the player's performance.\\\",\\n\\\"function_name\\\": \\\"analyze_performance\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'Total Games', 'Total Wins', 'Total Losses', 'Win Rate', 'Win Rate Std'\\\",\\n\\\"depend\\\": \\\"pandas, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A daily train passenger frustrated with the delays and overcrowding", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-Time Train Status Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input their origin and destination train stations and it will return the real-time status of trains between those stations.\\\",\\n\\\"function_name\\\": \\\"get_train_status\\\",\\n\\\"input_args\\\": [\\\"origin\\\", \\\"destination\\\"],\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary contains the train operator name, destination, scheduled departure time, expected departure time, and the current status of the train.\\\",\\n\\\"depend\\\": \\\"Uses the UK transport API to fetch live train status\\\"\\n}\"", "description": "tool development"}
{"input persona": "A factory worker who is less worried about environmental pollutants due to lack of awareness", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Information Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the current air quality index and associated health advice for a given location.\\\",\\n\\\"function_name\\\": \\\"get_air_quality_and_advice\\\",\\n\\\"input_args\\\": \\\"location - a tuple of latitude and longitude (e.g. (51.5074, 0.1278))\\\",\\n\\\"return\\\": \\\"A tuple of air quality index and associated health advice (e.g. (67, 'Avoid prolonged or heavy exertion. Consider moving activities indoors or rescheduling.'))\\\",\\n\\\"depend\\\": \\\"Breezometer API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A deaf entrepreneur who is excited to have equal access to the conference sessions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech to Text Transcription Interface\\\",\\n\\\"description\\\": \\\"An interface that transcribes audio files into text, using Google's Speech-to-Text API. Helpful for individuals who are hard of hearing to have access to spoken content in written form.\\\",\\n\\\"function_name\\\": \\\"transcribe_speech\\\",\\n\\\"input_args\\\": \\\"audio_file_path: The path to the audio file that needs to be transcribed\\\",\\n\\\"return\\\": \\\"A list of transcriptions of the speech from the audio file\\\",\\n\\\"depend\\\": \\\"Google's Speech-to-Text API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A musician who is inspired by Adam Lambert's vocal range and stage presence", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vocal Range Classification Interface\\\",\\n\\\"description\\\": \\\"This interface classifies the vocal range of a singer from an audio sample. The user inputs the path to an audio file, and the interface returns the classified vocal range.\\\",\\n\\\"function_name\\\": \\\"classify_vocal_range\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"vocal_range\\\",\\n\\\"depend\\\": \\\"Pytorch, torchaudio, pydub\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced backend developer who has extensive knowledge of Python web frameworks and can guide them in upgrading to the latest version of Authomatic", "synthesized text": "\"{\\n\\\"name\\\": \\\"Django Upgrade Interface\\\",\\n\\\"description\\\": \\\"An interface that upgrades Django in a specified project path to the target version and runs Django's built-in checks to identify any potential problems.\\\",\\n\\\"function_name\\\": \\\"upgrade_django_project\\\",\\n\\\"input_args\\\": {\\n    \\\"project_path\\\": \\\"Path to your Django project\\\",\\n    \\\"target_version\\\": \\\"Target version to upgrade Django to\\\"\\n},\\n\\\"return\\\": \\\"Output from Django's built-in checks or error message\\\",\\n\\\"depend\\\": [\\\"os\\\", \\\"subprocess\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow refugee with a background in marketing, helping to promote and expand the business", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sales Forecasting Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Facebook's Prophet library to predict future sales based on past sales data.\\\",\\n\\\"function_name\\\": \\\"future_sales_prediction\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"periods\\\"],\\n\\\"return\\\": \\\"A dataframe with columns 'ds' (date), 'yhat' (predicted sales), 'yhat_lower' and 'yhat_upper' (uncertainty intervals).\\\",\\n\\\"depend\\\": \\\"Pandas library, fbprophet library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly widower in need of help with estate planning and creating a will", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Generation Interface\\\",\\n\\\"description\\\": \\\"Generate a simple will or estate planning document based on the user's input\\\",\\n\\\"function_name\\\": \\\"generate_will\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"spouse_name\\\", \\\"children_names\\\", \\\"assets\\\"],\\n\\\"return\\\": \\\"A string representing the content of the legal document\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The head of IT department who enforces the use of Windows systems for uniformity across the company", "synthesized text": "\"{\\n\\\"name\\\": \\\"Active Directory User Creation Interface\\\",\\n\\\"description\\\": \\\"This interface creates a new user in a specified Organizational Unit (OU) location in Active Directory.\\\",\\n\\\"function_name\\\": \\\"create_ad_user\\\",\\n\\\"input_args\\\": [\\\"user_name\\\", \\\"password\\\", \\\"ou_location\\\"],\\n\\\"return\\\": \\\"The distinguished name of the newly created user.\\\",\\n\\\"depend\\\": [\\\"pyad library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A junior faculty member interested in incorporating interdisciplinary perspectives into legal education", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Case Summarization Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input the text of a legal case or the path to a case file, and returns a summarized version of the case using a pre-trained BERT model from huggingface for text summarization.\\\",\\n\\\"function_name\\\": [\\\"summarize_case\\\", \\\"summarize_case_from_file\\\"],\\n\\\"input_args\\\": [\\\"case_text\\\", \\\"file_path\\\"],\\n\\\"return\\\": \\\"summary_text\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"],\\\"machine learning models\\\": [\\\"Huggingface's pre-trained BERT model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Cawthon's close family friend, a retired police officer, with admiration for his military and public service", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Military Service Record Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch military service records using the U.S. National Archives' API. It returns the basic details of a person's military service.\\\",\\n  \\\"function_name\\\": \\\"get_military_service_record\\\",\\n  \\\"input_args\\\": [\\\"name\\\"],\\n  \\\"return\\\": \\\"A dictionary with details of the person's military service or a string message if no record is found.\\\",\\n  \\\"depend\\\": [\\\"requests library\\\", \\\"U.S. National Archives' API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "31-year-old software engineer born and raised in Germany, enjoys listening to loud, aggressive music while coding", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that leverages the Spotify Web API to recommend tracks based on the user's preferred music genre and energy level.\\\",\\n\\\"function_name\\\": \\\"get_music_recommendations\\\",\\n\\\"input_args\\\": {\\\"genre\\\": \\\"string\\\", \\\"energy_level\\\": \\\"float\\\"},\\n\\\"return\\\": \\\"List of recommended track names (List of strings)\\\",\\n\\\"depend\\\": \\\"spotipy, Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local travel agent in Sooke", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Flight Price Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the price of a flight given the departure city, destination city, and travel dates.\\\",\\n  \\\"function_name\\\": \\\"predict_flight_price\\\",\\n  \\\"input_args\\\": [\\\"departure_city\\\", \\\"destination_city\\\", \\\"departure_date\\\", \\\"return_date\\\"],\\n  \\\"return\\\": \\\"Predicted flight price\\\",\\n  \\\"depend\\\": [\\\"Python libraries: sklearn, pandas\\\", \\\"Machine learning model: Flight price prediction model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mathematically curious student who has just learned about hypothesis testing and wants to understand every step of the process.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Hypothesis Testing Step-by-step Interface\\\",\\n  \\\"description\\\": \\\"An interface that enables students to perform a hypothesis test step-by-step. They can input an array of data and the null hypothesis mean, and the interface will return the sample mean, sample standard deviation, test statistic, and p-value.\\\",\\n  \\\"function_name\\\": \\\"hypothesis_testing_steps\\\",\\n  \\\"input_args\\\": [\\\"data\\\", \\\"null_hypothesis_mean\\\"],\\n  \\\"return\\\": \\\"A dictionary with keys ['Sample Mean', 'Sample Standard Deviation', 'Test Statistic', 'p-value']\\\",\\n  \\\"depend\\\": [\\\"numpy\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A biophysicist experimenting on flow characteristics of fluids within organic systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flow Characteristics Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for calculating flow characteristics such as Reynolds number, Mach number, Froude number, etc. of fluids within organic systems.\\\",\\n\\\"function_name\\\": \\\"calculate_flow_characteristics\\\",\\n\\\"input_args\\\": {\\n    \\\"velocity\\\": \\\"The velocity of the fluid\\\",\\n    \\\"pressure\\\": \\\"The pressure of the fluid\\\",\\n    \\\"density\\\": \\\"The density of the fluid\\\",\\n    \\\"area\\\": \\\"The cross-sectional area of the flow\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Reynolds number\\\": \\\"The Reynolds number of the flow\\\",\\n    \\\"Mach number\\\": \\\"The Mach number of the flow\\\",\\n    \\\"Froude number\\\": \\\"The Froude number of the flow\\\"\\n},\\n\\\"depend\\\": \\\"SciPy, NumPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a computer science professor who focuses on symbolic computation and automatic differentiation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automatic Differentiation Interface\\\",\\n\\\"description\\\": \\\"This interface provides a simple way to compute the derivative of any mathematical function at any given point. The underlying implementation uses the Python library autograd.\\\",\\n\\\"function_name\\\": \\\"compute_derivative\\\",\\n\\\"input_args\\\": {\\n    \\\"function\\\": \\\"A mathematical function defined using autograd.numpy\\\",\\n    \\\"point\\\": \\\"The point at which to compute the derivative\\\"\\n},\\n\\\"return\\\": \\\"The derivative of the function at the given point\\\",\\n\\\"depend\\\": \\\"Python library: autograd\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个对中东文化及体育感到好奇的巴西足球教练", "synthesized text": "\"{\\n\\\"name\\\": \\\"Arabic to Portuguese Translation Interface\\\",\\n\\\"description\\\": \\\"An interface that takes Arabic text as input and returns a Portuguese translation using a pre-trained model from the HuggingFace transformers library.\\\",\\n\\\"function_name\\\": \\\"arabic_to_portuguese_translation\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"The translated Portuguese text\\\",\\n\\\"depend\\\": \\\"HuggingFace Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A struggling math student who dropped out of his math class in high school and has never touched complex math again", "synthesized text": "\"{\\n\\\"name\\\": \\\"Math Problem Solver Interface\\\",\\n\\\"description\\\": \\\"This interface takes a math problem as input and returns the solution using symbolic computation. It can handle algebraic equations, calculus problems, complex numbers, and more.\\\",\\n\\\"function_name\\\": \\\"solve_math_problem\\\",\\n\\\"input_args\\\": \\\"problem - a string representing the math problem\\\",\\n\\\"return\\\": \\\"The solution to the problem or an error message if the problem cannot be solved\\\",\\n\\\"depend\\\": \\\"Sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a concert goer who loves rock music and dislikes children's music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spotify API to recommend music based on the user's preferred and disliked genres.\\\",\\n\\\"function_name\\\": \\\"recommend_music\\\",\\n\\\"input_args\\\": {\\n    \\\"preferred_genre\\\": \\\"The genre of music the user prefers (e.g., 'rock')\\\",\\n    \\\"disliked_genre\\\": \\\"The genre of music the user dislikes (e.g., 'children's music')\\\",\\n    \\\"client_id\\\": \\\"The client ID for the user's Spotify API account\\\",\\n    \\\"client_secret\\\": \\\"The client secret for the user's Spotify API account\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, each containing an 'artist' and a 'song' that aligns with the user's music preferences.\\\",\\n\\\"depend\\\": \\\"Python's requests library, Spotify API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow collector who specializes in rare and limited edition Harry Potter merchandise", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rare Harry Potter Merchandise Price Prediction Interface\\\", \\n\\\"description\\\": \\\"This interface predicts the price of a rare Harry Potter merchandise item based on its name and rarity level.\\\", \\n\\\"function_name\\\": \\\"predict_hp_merchandise_price\\\", \\n\\\"input_args\\\": [\\\"item_name\\\", \\\"rarity_level\\\"], \\n\\\"return\\\": \\\"The predicted price of the item.\\\", \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"joblib\\\"], \\\"machine learning models\\\": [\\\"RandomForestRegressor trained on Harry Potter merchandise price data\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a descendant of the Maratha Confederacy", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historical Lineage Tracing Interface\\\",\\n  \\\"description\\\": \\\"An interface to obtain known descendants of a historical figure by leveraging genealogy database APIs. The user only needs to provide the name of the historical figure.\\\",\\n  \\\"function_name\\\": \\\"get_known_descendants\\\",\\n  \\\"input_args\\\": {\\n    \\\"historical_figure\\\": \\\"Name of the historical figure\\\"\\n  },\\n  \\\"return\\\": \\\"A list of known descendants of the provided historical figure\\\",\\n  \\\"depend\\\": \\\"Genealogy Database Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A strength and conditioning coach who believes that a combination of manual therapy and physical therapy is the most effective approach for athletes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Injury Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the likelihood of a sports injury given the athlete's training history, physical measurements, and performance metrics using a pre-trained BERT model.\\\",\\n\\\"function_name\\\": \\\"predict_injury_risk\\\",\\n\\\"input_args\\\": [\\\"training_history\\\", \\\"physical_measurements\\\", \\\"performance_metrics\\\"],\\n\\\"return\\\": \\\"The probability of the athlete being at risk of injury.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library (BERT model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer science major who brings a futuristic and minimalistic vibe to the apartment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Augmented Reality Furniture Placement Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to visualize how furniture would look in their apartment using Augmented Reality\\\",\\n\\\"function_name\\\": \\\"place_furniture_in_apartment\\\",\\n\\\"input_args\\\": [\\\"furniture_img_path\\\", \\\"apartment_img_path\\\"],\\n\\\"return\\\": \\\"An image of the apartment with the furniture in it\\\",\\n\\\"depend\\\": \\\"OpenCV, ARKit/ARCore\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local business owner who initially opposed the car-free zones but eventually became an advocate after seeing the positive impact on foot traffic", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Pedestrian Traffic Increase Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface to calculate the percentage increase in pedestrian traffic for a given location and date range, using pedestrian count data from the local transportation department. The user inputs a location and two date ranges: before and after the car-free zone implementation. The interface returns the percentage increase in pedestrian traffic.\\\",\\n  \\\"function_name\\\": \\\"calculate_pedestrian_increase\\\",\\n  \\\"input_args\\\": [\\\"location\\\", \\\"before_start_date\\\", \\\"before_end_date\\\", \\\"after_start_date\\\", \\\"after_end_date\\\"],\\n  \\\"return\\\": \\\"Percentage increase in pedestrian traffic\\\",\\n  \\\"depend\\\": \\\"Python's requests and pandas libraries, Local transportation department API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a psychoanalyst based in Canada with interests in cultural variations of grief and trauma processing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cultural Insights Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves news articles from different cultures discussing a specific cultural phenomenon provided as a keyword. It is designed to provide cultural insights for psychoanalysts.\\\",\\n\\\"function_name\\\": \\\"get_news_by_keyword\\\",\\n\\\"input_args\\\": [\\\"keyword\\\", \\\"num_articles\\\"],\\n\\\"return\\\": \\\"List of dictionaries each containing title, link and source of a news article.\\\",\\n\\\"depend\\\": \\\"GDELT Project API, requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "An innovative software developer creating an intuitive interface to control the electrical components in the machinery", "synthesized text": "\"{\\n\\\"name\\\": \\\"Machinery Control Interface\\\",\\n\\\"description\\\": \\\"An interface to control the electrical components in the machinery using serial communication. Users can specify the component they want to control and the action they want to execute.\\\",\\n\\\"function_name\\\": \\\"control_machinery\\\",\\n\\\"input_args\\\": [\\\"component\\\", \\\"action\\\"],\\n\\\"return\\\": \\\"Confirmation message that the command was sent\\\",\\n\\\"depend\\\": [\\\"pySerial\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a former student who was mentored by Hakeem", "synthesized text": "\"{\\n\\\"name\\\": \\\"Research Publication Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve the latest research publications of a given researcher using Semantic Scholar API.\\\",\\n\\\"function_name\\\": \\\"get_latest_publications\\\",\\n\\\"input_args\\\": [\\\"researcher_name\\\"],\\n\\\"return\\\": \\\"List of tuples containing the title, year, and URL of the latest five research publications.\\\",\\n\\\"depend\\\": \\\"requests library, Semantic Scholar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film critic specializing in live-action movies, unaware of the nuances and intricacies of animation", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Animation Feature Extraction Interface\\\",\\n  \\\"description\\\": \\\"Extracts various features from animation frames such as face recognition, object detection, motion tracking etc. The user only needs to input the path to an animation video file, and our interface will return a video with detected features outlined.\\\",\\n  \\\"function_name\\\": \\\"detect_features_in_animation\\\",\\n  \\\"input_args\\\": \\\"video_path\\\",\\n  \\\"return\\\": \\\"Displays the video with detected features outlined\\\",\\n  \\\"depend\\\": [\\\"OpenCV\\\", \\\"dlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hepatocellular carcinoma patient who has a strong scientific literacy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gene Mutation Search Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the MyGene.info API to return the mutations associated with a given gene symbol.\\\",\\n\\\"function_name\\\": \\\"get_gene_mutations\\\",\\n\\\"input_args\\\": {\\\"gene_symbol\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"mutations\\\": \\\"list of string\\\"},\\n\\\"depend\\\": {\\\"Web APIs\\\": [\\\"MyGene.info API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Un arquitecto que valora la belleza estética y la eficiencia espacial en sus diseños", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Generador de Planos Interface\\\",\\n  \\\"description\\\": \\\"Interface que genera un plano en base a las dimensiones del espacio y el n\\u00famero de habitaciones y ba\\u00f1os requeridos. La interfaz utiliza la API de Floorplanner para crear un dise\\u00f1o de plano eficiente y est\\u00e9ticamente agradable.\\\",\\n  \\\"function_name\\\": \\\"generate_floorplan\\\",\\n  \\\"input_args\\\": [\\\"length\\\", \\\"width\\\", \\\"num_rooms\\\", \\\"num_bathrooms\\\"],\\n  \\\"return\\\": \\\"Devuelve el ID del plano creado si la solicitud fue exitosa, de lo contrario devuelve un mensaje de error.\\\",\\n  \\\"depend\\\": \\\"Esta funci\\u00f3n utiliza la biblioteca 'requests' de Python y la API de Floorplanner.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A handball coach from Croatia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Statistic Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface extracts player names from a match report using Named Entity Recognition (NER) and retrieves player statistics using a sports API.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": {\\n    \\\"match_report\\\": \\\"Type: String, Description: The text of the match report.\\\"\\n},\\n\\\"return\\\": \\\"Type: Dictionary, Description: A dictionary containing the names of the players mentioned in the report as keys, and their statistics as values.\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n    \\\"web_APIs\\\": [\\\"SportsData.io\\\"],\\n    \\\"machine_learning_models\\\": [\\\"dbmdz/bert-large-cased-finetuned-conll03-english\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A passionate 10m air rifle shooter from Poland", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wind Speed and Direction Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the current wind speed and direction according to a given location. It can be used by air rifle shooters to adjust their aim.\\\",\\n\\\"function_name\\\": \\\"get_wind_info\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"A dictionary with 'speed' and 'deg' as keys. 'speed' represents the wind speed in meter/sec and 'deg' represents the wind direction in meteorological degrees.\\\",\\n\\\"depend\\\": \\\"Python library - requests, Web API - OpenWeatherMap\\\"\\n}\"", "description": "tool development"}
{"input persona": "a blogger who loves rap and puzzle-solving", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lyrics Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the next line of a rap song given the previous lines.\\\",\\n\\\"function_name\\\": \\\"predict_next_line\\\",\\n\\\"input_args\\\": \\\"lyrics - The lyrics of the song so far.\\\",\\n\\\"return\\\": \\\"The next line of the rap song.\\\",\\n\\\"depend\\\": \\\"Hugging Face's GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a huge fan of Mac Walters and the Mass Effect series", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Dialogue Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a line of dialogue for a specified character from the Mass Effect series, using a pre-trained language model.\\\",\\n\\\"function_name\\\": \\\"generate_game_dialogue\\\",\\n\\\"input_args\\\": {\\n    \\\"character_name\\\": \\\"A string representing the name of a character from the Mass Effect series.\\\"\\n    },\\n\\\"return\\\": \\\"A string representing a line of dialogue for the specified character.\\\",\\n\\\"depend\\\": \\\"Python libraries: transformers (Hugging Face).\\\"\\n}\"", "description": "tool development"}
{"input persona": "An occupational therapist who helps children develop skills for daily routines and time management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Activity Recommendation Interface\\\",\\n\\\"description\\\": \\\"A machine learning-based function that suggests age and skill-appropriate activities for children. It uses a TF-IDF vectorizer and cosine similarity to find activities that match a given age and skill.\\\",\\n\\\"function_name\\\": \\\"find_recommended_activities\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"skill\\\"],\\n\\\"return\\\": \\\"A list of recommended activities.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn.feature_extraction.text.TfidfVectorizer\\\", \\\"sklearn.metrics.pairwise.linear_kernel\\\", \\\"dataset of age-appropriate activities\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young wealthy heiress who loves to discover abandoned cities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Abandoned City Info Interface\\\",\\n\\\"description\\\": \\\"Fetches and returns information about an abandoned city using the Wikipedia API.\\\",\\n\\\"function_name\\\": \\\"get_abandoned_city_info\\\",\\n\\\"input_args\\\": {\\n    \\\"city_name\\\": \\\"Name of the abandoned city\\\"\\n},\\n\\\"return\\\": \\\"A string containing information about the abandoned city.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A district bureaucrat who is often skeptical about the efficiency of special education programs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Education Program Efficacy Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses machine learning to analyze the efficiency of special education programs based on a variety of factors, including student grades, attendance, engagement, and program costs.\\\",\\n\\\"function_name\\\": \\\"analyze_program_efficiency\\\",\\n\\\"input_args\\\": \\\"data_path - The path to a csv file containing data about the education program.\\\",\\n\\\"return\\\": \\\"A string indicating whether the program is efficient or not, along with the Mean Absolute Error (MAE) of the model's predictions.\\\",\\n\\\"depend\\\": \\\"Python's sklearn and pandas libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired military officer who served in the People's Liberation Army during the same period as General Pei Huailiang", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chinese Military Service Record Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the service record of a specified military officer from a hypothetical military database.\\\",\\n\\\"function_name\\\": \\\"get_military_service_record\\\",\\n\\\"input_args\\\": {\\\"officer_name\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"A dictionary containing the service record of the specified officer.\\\",\\n\\\"depend\\\": \\\"requests (Python library)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Hollywood producer who recognizes the value of method acting and hires the coach to train actors in their upcoming film", "synthesized text": "\"{\\n\\\"name\\\": \\\"Method Acting Training Time Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses machine learning to predict the amount of time needed to train an actor in method acting for a specific role. The user inputs the complexity of the character and the actor's previous acting experience, and the interface returns the estimated training time.\\\",\\n\\\"function_name\\\": \\\"predict_training_time\\\",\\n\\\"input_args\\\": {\\n  \\\"character_complexity\\\": \\\"The complexity of the character to be played, on a scale of 1-10\\\",\\n  \\\"actor_experience\\\": \\\"The number of years of acting experience the actor has\\\"\\n},\\n\\\"return\\\": \\\"Estimated training time in hours\\\",\\n\\\"depend\\\": \\\"Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A policymaker seeking expert advice on the potential consequences of altering ocean currents for climate mitigation strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ocean Currents Impact Prediction Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that uses a machine learning model to predict the potential impacts of altering ocean currents on global climate.\\\",\\n\\\"function_name\\\": \\\"predict_climate_changes\\\",\\n\\\"input_args\\\": \\\"ocean_current_changes - A list or 2D array of parameters representing the proposed changes to the ocean currents.\\\",\\n\\\"return\\\": \\\"A 2D array, with each row representing the predicted climate changes for the corresponding input scenario.\\\",\\n\\\"depend\\\": \\\"tensorflow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A publishing company looking for a distinct and visually appealing font for their book covers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Font Style Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Fonts API to fetch thousands of font styles. Users can specify their preferences such as font category and language, and the interface will return a set of font styles that match the user's preferences.\\\",\\n\\\"function_name\\\": \\\"get_font_styles\\\",\\n\\\"input_args\\\": [\\\"category\\\", \\\"language\\\"],\\n\\\"return\\\": \\\"A list of font style names that match the specified category and language.\\\",\\n\\\"depend\\\": \\\"Google Fonts API, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history professor specializing in the Warsaw Pact invasion of Czechoslovakia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a historical event and a timeframe as input, and returns a summary of news articles related to the event during that time.\\\",\\n\\\"function_name\\\": \\\"get_event_news_summary\\\",\\n\\\"input_args\\\": [\\\"event\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"List of summaries of news articles related to the event during the specified timeframe.\\\",\\n\\\"depend\\\": \\\"EventRegistry API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a conscientious objector and a peace activist in the United States", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nonviolent Protest Event Finder Interface\\\",\\n\\\"description\\\": \\\"This interface is used to find upcoming nonviolent protest events nearby a given location. It leverages the Eventbrite API to search for events.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_nonviolent_protests\\\",\\n\\\"input_args\\\": \\\"location - a string representing the location where you want to find nonviolent protest events.\\\",\\n\\\"return\\\": \\\"A list of event names that are happening near the given location.\\\",\\n\\\"depend\\\": \\\"Eventbrite API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A weapons regulations advocate and blogger", "synthesized text": "\"{\\n\\\"name\\\": \\\"Firearm Laws By Country Interface\\\",\\n\\\"description\\\": \\\"This interface takes a country name as input and returns a summary of the gun laws in that country by leveraging the Wikipedia API.\\\",\\n\\\"function_name\\\": \\\"get_firearm_laws_by_country\\\",\\n\\\"input_args\\\": \\\"country - a string representing the name of a country\\\",\\n\\\"return\\\": \\\"A string containing a summary of the firearm laws in the input country\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A quality control analyst responsible for verifying the purity and safety of the raw materials", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Purity Verification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the purity of a given material based on spectroscopy data.\\\",\\n\\\"function_name\\\": \\\"predict_material_purity\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"The mean predicted purity level.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"joblib\\\", \\\"sklearn\\\", \\\"pre-trained machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A meticulous financial expert proficient in tracing financial trails and uncovering hidden assets", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Transaction Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze financial transactions from a CSV file. It calculates the total income, total expenses, and balance.\\\",\\n\\\"function_name\\\": \\\"analyze_financial_transactions\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": {\\\"Total Income\\\": \\\"numeric\\\", \\\"Total Expenses\\\": \\\"numeric\\\", \\\"Balance\\\": \\\"numeric\\\"},\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A legendary race car driver who competed against them in their prime", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lap Time Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes weather conditions, tire pressure, and fuel level as input and predicts the lap time using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_lap_time\\\",\\n\\\"input_args\\\": [\\\"weather_conditions\\\", \\\"tire_pressure\\\", \\\"fuel_level\\\"],\\n\\\"return\\\": \\\"Predicted lap time (seconds)\\\",\\n\\\"depend\\\": [\\\"TensorFlow\\\", \\\"Pandas\\\", \\\"Pre-trained TensorFlow model (lap_time_model.h5)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a new law school graduate who is highly interested in tax law and wants to follow in Jack Townsend's footsteps", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tax Law Case Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to find tax law cases relevant to a specific keyword. It returns a list of tax law cases with their names, decision dates, and URLs.\\\",\\n\\\"function_name\\\": \\\"find_tax_law_cases\\\",\\n\\\"input_args\\\": [\\\"keyword\\\"],\\n\\\"return\\\": [{\\\"name\\\": \\\"string\\\", \\\"decision_date\\\": \\\"string\\\", \\\"url\\\": \\\"string\\\"}],\\n\\\"depend\\\": [\\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Un productor de cine español involucrado en co-producciones internacionales.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Subtitulado Autom\\u00e1tico de V\\u00eddeos Interfaz\\\",\\n\\\"description\\\": \\\"Esta interfaz utiliza la API de Google Cloud Speech-to-Text para transcribir el di\\u00e1logo de un video, y luego un modelo de traducci\\u00f3n de HuggingFace para traducir la transcripci\\u00f3n al idioma deseado.\\\",\\n\\\"function_name\\\": \\\"auto_subtitle_video\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_video\\\": \\\"La ruta al archivo de video que se va a subtitular.\\\",\\n    \\\"target_language\\\": \\\"El c\\u00f3digo del idioma al que se traducir\\u00e1 la transcripci\\u00f3n (por ejemplo, 'en' para ingl\\u00e9s, 'fr' para franc\\u00e9s, etc.).\\\"\\n},\\n\\\"return\\\": \\\"Una transcripci\\u00f3n traducida del video.\\\",\\n\\\"depend\\\": \\\"Esta funci\\u00f3n depende de las bibliotecas Python 'google-cloud-speech', 'transformers' y 'ffmpeg-python', as\\u00ed como de la API de Google Cloud Speech-to-Text y los modelos de traducci\\u00f3n de HuggingFace.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am the childhood best friend of Gabriel Antonio Mestre, and a non-practicing Catholic who has followed his career closely.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts provided text into a natural sounding audio clip using the Google Text-to-Speech (gTTS) library.\\\", \\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"The text that needs to be converted into speech.\\\",\\n    \\\"filename\\\": \\\"The desired name for the output audio file.\\\"\\n},\\n\\\"return\\\": \\\"A success message indicating that the audio file has been created successfully.\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS) library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Sales manager who values peace and is passionate about historical women figures", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Sales Forecasting Interface\\\",\\n  \\\"description\\\": \\\"This interface allows a user to forecast future sales based on historical sales data. It uses the Facebook Prophet library to perform the forecasting. The user needs to provide a CSV file with the historical data, and the interface will return a forecast for the specified number of future periods.\\\",\\n  \\\"function_name\\\": \\\"sales_forecast\\\",\\n  \\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the CSV file with the historical sales data. The file should have at least two columns: 'ds' (date) and 'y' (sales).\\\",\\n    \\\"periods\\\": \\\"The number of future periods to forecast. Default value is 365.\\\"\\n  },\\n  \\\"return\\\": \\\"A DataFrame containing the forecast. The DataFrame has four columns: 'ds' (date), 'yhat' (predicted sales), 'yhat_lower' (lower confidence interval), and 'yhat_upper' (upper confidence interval).\\\",\\n  \\\"depend\\\": \\\"This function uses the pandas library for data manipulation, and the Facebook Prophet library for time series forecasting.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An animal shelter manager who can provide opportunities for hands-on experience and exposure to different animals", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Animal Adoption Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that recommends animals for adoption based on the user's preferences using machine learning models.\\\",\\n  \\\"function_name\\\": \\\"get_animal_recommendations\\\",\\n  \\\"input_args\\\": {\\n    \\\"user_preferences\\\": \\\"A list of user's preferences for the animal's attributes (size, breed, age, etc.)\\\",\\n    \\\"n_recommendations\\\": \\\"Number of recommendations to return (default is 5)\\\"\\n  },\\n  \\\"return\\\": \\\"A list of animal IDs that match the user's preferences.\\\",\\n  \\\"depend\\\": \\\"Python's scikit-learn library for the NearestNeighbors model, pandas for handling data\\\"\\n}\"", "description": "tool development"}
{"input persona": "an average cricket fan learning about match statistics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cricket Match Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed statistics of a cricket match using the CricAPI. User inputs the match id, and the interface returns the match statistics.\\\",\\n\\\"function_name\\\": \\\"get_match_statistics\\\",\\n\\\"input_args\\\": [\\\"match_id\\\"],\\n\\\"return\\\": \\\"Match statistics including match title, score, teams, man of the match, batting statistics, and bowling statistics.\\\",\\n\\\"depend\\\": \\\"CricAPI, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "An intern trying to adapt to the new work environment and learn the job requirements, often needing translation assistance.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates a given text into a specified language using Google Translate. It's extremely helpful for users who are working in a multi-lingual environment and need quick translation services.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"text\\\": \\\"String - the text to be translated\\\",\\n    \\\"lang\\\": \\\"String - the language code to translate the text into (e.g., 'en' for English, 'fr' for French)\\\"\\n    },\\n\\\"return\\\": \\\"String - the translated text\\\",\\n\\\"depend\\\": \\\"Python 'translate' library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An environmental engineer investigating the impact of climate change through the lens of physics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Climate Change Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes climate change data and returns a model trained on this data that can be used for prediction and analysis.\\\",\\n\\\"function_name\\\": \\\"train_climate_change_model\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"sklearn.ensemble.RandomForestRegressor\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"sklearn\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A software engineer working on developing a new framework for data binding in Android", "synthesized text": "\"{\\n\\\"name\\\": \\\"Android Data Binding Library Interface\\\",\\n\\\"description\\\": \\\"A high-level interface for binding data to UI layouts in Android. The user only needs to input the ViewModel class, layout resource ID, and an instance of an Activity. The interface returns a binding with the data from the ViewModel already set.\\\",\\n\\\"function_name\\\": \\\"bind_data_to_layout\\\",\\n\\\"input_args\\\": {\\n    \\\"activity\\\": \\\"An instance of an Activity\\\",\\n    \\\"viewModelClass\\\": \\\"The ViewModel class\\\",\\n    \\\"layoutResourceId\\\": \\\"The resource ID of the layout\\\"\\n},\\n\\\"return\\\": \\\"A binding with the ViewModel's data already set to the UI components\\\",\\n\\\"depend\\\": \\\"Android Data Binding Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A coastal zone management specialist responsible for regulating industrial development in oceanic areas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ocean Zone Classification Interface\\\",\\n\\\"description\\\": \\\"An interface to classify ocean zones based on given latitude and longitude. Helps in identifying the zones where industrial development is permissible or prohibited.\\\",\\n\\\"function_name\\\": \\\"classify_ocean_zone\\\",\\n\\\"input_args\\\": {\\\"lat\\\": \\\"latitude of the location\\\", \\\"long\\\": \\\"longitude of the location\\\"},\\n\\\"return\\\": \\\"The classification of the ocean zone or 'Land' if the location is on land or 'Unknown' if the zone is not classified\\\",\\n\\\"depend\\\": \\\"This function depends on the geopandas library for geospatial analysis and a geojson file that classifies ocean zones.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A minimum wage worker in Illinois struggling to make ends meet", "synthesized text": "\"{\\n\\\"name\\\": \\\"Budget Planner Interface\\\",\\n\\\"description\\\": \\\"This interface takes user's income and expenses as input and calculates a detailed budget showing how much they spend on each category as a percentage of their income. It also shows the remaining budget after all expenses.\\\",\\n\\\"function_name\\\": \\\"calculate_budget\\\",\\n\\\"input_args\\\": {\\\"income\\\": \\\"Number\\\", \\\"expenses\\\": \\\"Dictionary\\\"},\\n\\\"return\\\": \\\"Pandas DataFrame\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"pandas\\\"] }\\n}\"", "description": "tool development"}
{"input persona": "A parent who serves or has served in the navy and can provide first-hand insights and advice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Age-Guided Navy Experience Sharing Interface\\\",\\n\\\"description\\\": \\\"This interface uses the age of the child as an input to tailor a Navy parent's sharing of their naval experiences. The sharing is categorized into three broad age groups: under 10 years, 10 to 18 years, and over 18 years.\\\",\\n\\\"function_name\\\": \\\"age_guided_navy_experience_sharing\\\",\\n\\\"input_args\\\": {\\n    \\\"child_age\\\": \\\"The age of the child to whom the navy experiences are being shared\\\",\\n    \\\"navy_experience\\\": \\\"The navy experience that the parent wants to share\\\"\\n},\\n\\\"return\\\": \\\"The navy experience shared in a format that is understandable and appropriate for the child's age\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "In my forties, a Maruti 800 owner living in Delhi who enjoys watching well-depicted romantic comedy films in the Malayalam language.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Recommendation Interface\\\", \\n\\\"description\\\": \\\"This interface takes user preferences such as age, car model, city of residence, and preferred movie genre and language, to recommend a list of films that the user might enjoy.\\\", \\n\\\"function_name\\\": \\\"recommend_movies\\\", \\n\\\"input_args\\\": [\\\"age\\\", \\\"car_model\\\", \\\"city\\\", \\\"preferred_genre\\\", \\\"preferred_language\\\"], \\n\\\"return\\\": \\\"List of recommended movies\\\", \\n\\\"depend\\\": [\\\"Tensorflow\\\", \\\"Tensorflow Recommenders\\\", \\\"MovieLens dataset\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A pragmatic statistician who respects but skeptically indulges their partner's superstitions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lucky Number Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a lucky number within a given range. User needs to input the minimum and maximum of the range, and the interface will return a random number within this range.\\\",\\n\\\"function_name\\\": \\\"generate_lucky_number\\\",\\n\\\"input_args\\\": [\\\"minimum\\\", \\\"maximum\\\"],\\n\\\"return\\\": \\\"A string with the lucky number\\\",\\n\\\"depend\\\": \\\"Python's built-in random library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A market research firm that depends on accurate data for their statistical reports", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Cleaning Interface\\\",\\n\\\"description\\\": \\\"An interface for cleaning data. Input is a path to a CSV file, and the output is a cleaned DataFrame.\\\",\\n\\\"function_name\\\": \\\"clean_data\\\",\\n\\\"input_args\\\": [\\\"csv_file_path\\\"],\\n\\\"return\\\": \\\"Cleaned pandas DataFrame\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired military officer with vast experience in combat and strategic planning, providing guidance and expertise to the developer", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Battlefield Simulation Interface\\\",\\n  \\\"description\\\": \\\"Simulates a battlefield situation and returns the best tactical move based on the input parameters.\\\",\\n  \\\"function_name\\\": \\\"simulate_battlefield\\\",\\n  \\\"input_args\\\": [\\\"troops\\\", \\\"our_position\\\", \\\"enemy_position\\\"],\\n  \\\"return\\\": \\\"A dictionary containing the next state, reward, done status, and additional info.\\\",\\n  \\\"depend\\\": \\\"OpenAI Gym, NumPy, TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "a licensed Swedish online pharmacy clerk", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medicine Information Interface\\\",\\n\\\"description\\\": \\\"An interface that provides information about a specified medicine. The information includes the medicine's description, its uses, side effects, and precautions.\\\",\\n\\\"function_name\\\": \\\"get_medicine_info\\\",\\n\\\"input_args\\\": {\\\"medicine_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"name\\\": \\\"string\\\", \\\"description\\\": \\\"string\\\", \\\"uses\\\": \\\"string\\\", \\\"side_effects\\\": \\\"string\\\", \\\"precautions\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python library\\\", \\\"OpenFDA API\\\": \\\"Web API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A psychologist sister who offers insights on mental strategies and opponent's mind games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chess Game Analyzer Interface\\\",\\n\\\"description\\\": \\\"Retrieves a chess player's game data and provides insights on the mental strategies and mind games employed by the opponent\\\",\\n\\\"function_name\\\": \\\"analyze_opponent_strategy\\\",\\n\\\"input_args\\\": [\\\"username\\\"],\\n\\\"return\\\": \\\"A summary of the opponent's strategies\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"torch\\\", \\\"transformers\\\"], \\\"web APIs\\\": [\\\"Chess.com API\\\"], \\\"machine learning models\\\": [\\\"Hugging Face\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A therapist incorporating yoga into their practice to help clients with trauma and anxiety", "synthesized text": "\"{\\n\\\"name\\\": \\\"Yoga Pose Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends yoga poses based on the client's age, gender, physical condition, and mental state. It is designed for therapists incorporating yoga into their practice to help clients with trauma and anxiety.\\\",\\n\\\"function_name\\\": \\\"get_yoga_poses\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"The client's age.\\\",\\n    \\\"gender\\\": \\\"The client's gender.\\\",\\n    \\\"physical_condition\\\": \\\"Any physical restrictions or conditions the client has.\\\",\\n    \\\"mental_state\\\": \\\"The level of the client's trauma or anxiety on a scale of 1-10.\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended yoga poses.\\\",\\n\\\"depend\\\": \\\"This function leverages a hypothetical health/fitness data provider API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A flight instructor who guides new pilots through the complexities of combat flying", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to simulate the effects of various flight maneuvers. Users input a maneuver, and the interface returns the expected state of the aircraft.\\\",\\n\\\"function_name\\\": \\\"simulate_flight\\\",\\n\\\"input_args\\\": \\\"maneuver - A description of the maneuver to simulate.\\\",\\n\\\"return\\\": \\\"A dictionary describing the expected state of the aircraft, including altitude, speed, and heading.\\\",\\n\\\"depend\\\": \\\"TensorFlow library and a pre-trained flight simulator model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long time fan of John Dunsworth and his work on \"Trailer Park Boys\"", "synthesized text": "\"{\\n\\\"name\\\": \\\"Subtitle Synchronization Interface\\\",\\n\\\"description\\\": \\\"This interface adjusts the timing of a subtitle file. It takes in the path to the subtitle file, the time by which the subtitles are out of sync (in seconds), and a boolean indicating whether the subtitles are showing up too early. It outputs a new subtitle file with corrected timing.\\\",\\n\\\"function_name\\\": \\\"adjust_subtitle_timing\\\",\\n\\\"input_args\\\": {\\n    \\\"subtitle_filepath\\\": \\\"path to the subtitle file\\\",\\n    \\\"time_shift\\\": \\\"time by which the subtitles are out of sync (in seconds)\\\",\\n    \\\"subtitles_are_early\\\": \\\"boolean indicating whether the subtitles are showing up too early\\\"\\n},\\n\\\"return\\\": {\\n    \\\"new_filepath\\\": \\\"path to the new subtitle file with corrected timing\\\"\\n},\\n\\\"depend\\\": \\\"pysubs2 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A courageous woman who has experienced gender-based violence in a conflict zone and now shares her story to raise awareness", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech to Text Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface accepts the path to an audio file and returns the transcribed text using Google Speech-to-Text API.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"Transcribed text from the input audio file.\\\",\\n\\\"depend\\\": \\\"Google Speech-to-Text API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ex-rodeo performer who transformed their life after witnessing the mistreatment of animals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Animal Rights Violation Report Interface\\\",\\n\\\"description\\\": \\\"This interface uses Twitter API to track and report any relevant animal rights violations happening in real time. Users need to input their Twitter API credentials and a list of specific keywords related to animal rights violations. The interface returns a list of recent tweets using these keywords.\\\",\\n\\\"function_name\\\": \\\"get_animal_rights_violation_tweets\\\",\\n\\\"input_args\\\": {\\n    \\\"api_key\\\": \\\"Your Twitter API key\\\",\\n    \\\"api_key_secret\\\": \\\"Your Twitter API secret key\\\",\\n    \\\"access_token\\\": \\\"Your Twitter Access Token\\\",\\n    \\\"access_token_secret\\\": \\\"Your Twitter Access Token Secret\\\",\\n    \\\"keywords\\\": \\\"List of keywords related to animal rights violation\\\"\\n},\\n\\\"return\\\": \\\"A list of recent tweets (up to 10) using the input keywords, each tweet includes the username, tweet text, and date of creation.\\\",\\n\\\"depend\\\": \\\"Python library: tweepy\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Egyptian worker in the aviation sector", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Flight Status Check Interface\\\",\\n  \\\"description\\\": \\\"Interface to check the real-time status of a specific flight using the AviationStack API.\\\",\\n  \\\"function_name\\\": \\\"get_flight_status\\\",\\n  \\\"input_args\\\": [\\n    {\\n      \\\"name\\\": \\\"flight_number\\\",\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"The flight number of the flight to check the status for.\\\"\\n    }\\n  ],\\n  \\\"return\\\": {\\n    \\\"type\\\": \\\"dictionary\\\",\\n    \\\"description\\\": \\\"A dictionary containing the airline name, departure and arrival information, and the current flight status.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python\\\": [\\\"requests\\\"],\\n    \\\"web_APIs\\\": [\\\"AviationStack API\\\"],\\n    \\\"ML_models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A college football player looking to make it to the NFL and seeking advice on training and preparation", "synthesized text": "\"{\\n\\\"name\\\": \\\"NFL Training Plan Generator Interface\\\",\\n\\\"description\\\": \\\"An interface that generates detailed training plans for aspiring NFL players based on their position, current stats, and improvement goals.\\\",\\n\\\"function_name\\\": \\\"generate_training_plan\\\",\\n\\\"input_args\\\": {\\\"position\\\": \\\"The position the player plays in.\\\", \\\"current_stats\\\": \\\"The player's current stats.\\\", \\\"improvement_goals\\\": \\\"The areas the player wants to improve on.\\\"},\\n\\\"return\\\": \\\"A detailed training plan to help the player reach their goals.\\\",\\n\\\"depend\\\": \\\"Hugging Face's GPT2 Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diligent clinical researcher who collaborated with Christopher A. Viehbacher on groundbreaking drug trials", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clinical Trial Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that provides functions for loading, cleaning, visualizing, and analyzing clinical trial data. Includes predictive modeling capability.\\\",\\n\\\"function_name\\\": [\\\"load_and_clean_data\\\", \\\"visualize_data\\\", \\\"predict_outcome\\\"],\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"df, x, y\\\", \\\"df, features, target\\\"],\\n\\\"return\\\": [\\\"Cleaned DataFrame\\\", \\\"Scatter plot\\\", \\\"Predictions\\\"],\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\", \\\"seaborn\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A homesick Texan who grew up in Wise, now working as a software engineer in Seattle.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Weather Comparison Interface\\\",\\n    \\\"description\\\": \\\"An interface that fetches and compares the weather data of two given locations. The comparison includes temperature and a basic weather description.\\\",\\n    \\\"function_name\\\": \\\"compare_weather\\\",\\n    \\\"input_args\\\": {\\n        \\\"location1\\\": \\\"First location to compare (e.g., 'Seattle')\\\",\\n        \\\"location2\\\": \\\"Second location to compare (e.g., 'Wise')\\\",\\n        \\\"api_key\\\": \\\"Your OpenWeatherMap API key\\\"\\n    },\\n    \\\"return\\\": \\\"A dictionary with weather comparison data for the two locations\\\",\\n    \\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a computer science professor who is an expert in Prolog", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prolog-to-Python Code Translation Interface\\\",\\n\\\"description\\\": \\\"An interface that translates Prolog code to Python code.\\\",\\n\\\"function_name\\\": \\\"translate_prolog_to_python\\\",\\n\\\"input_args\\\": {\\n    \\\"prolog_code\\\": \\\"string\\\"\\n},\\n\\\"return\\\": {\\n    \\\"python_code\\\": \\\"string\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"transformers\\\"],\\n    \\\"machine_learning_models\\\": [\\\"T5ForConditionalGeneration\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A graphic designer looking for a minimalist and efficient workflow on their i3 WM setup", "synthesized text": "\"{\\n\\\"name\\\": \\\"Window Management Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to easily move and resize windows, and switch workspaces in the i3 window manager using the i3ipc Python module.\\\",\\n\\\"function_name\\\": [\\\"move_window\\\", \\\"resize_window\\\", \\\"switch_workspace\\\"],\\n\\\"input_args\\\": {\\n  \\\"move_window\\\": [\\\"window_id\\\", \\\"direction\\\"],\\n  \\\"resize_window\\\": [\\\"window_id\\\", \\\"direction\\\", \\\"pixels\\\"],\\n  \\\"switch_workspace\\\": [\\\"workspace_number\\\"]\\n},\\n\\\"return\\\": {\\n  \\\"move_window\\\": \\\"None or 'Invalid window id'\\\",\\n  \\\"resize_window\\\": \\\"None or 'Invalid window id'\\\",\\n  \\\"switch_workspace\\\": \\\"None\\\"\\n},\\n\\\"depend\\\": \\\"Python library: i3ipc\\\"\\n}\"", "description": "tool development"}
{"input persona": "A 65-year-old man who was born and raised in Dhaka, Bangladesh and has been frequenting the Azad movie theater since his youth.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Showtimes Interface\\\",\\n\\\"description\\\": \\\"This interface returns the list of current movies playing in a specific cinema along with their showtimes.\\\",\\n\\\"function_name\\\": \\\"get_cinema_showtimes\\\",\\n\\\"input_args\\\": \\\"cinema_name\\\",\\n\\\"return\\\": \\\"A dictionary where each key is a movie title and each value is the corresponding showtimes\\\",\\n\\\"depend\\\": \\\"requests library, TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a longtime New Yorker who loves Thanksgiving Day Parade", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parade Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface provides the route of a specific event, such as the Thanksgiving Day Parade, on a map. Leveraging New York City's Event API and Google Maps API to fetch and display the parade route.\\\",\\n\\\"function_name\\\": \\\"track_parade\\\",\\n\\\"input_args\\\": \\\"event_name\\\",\\n\\\"return\\\": \\\"A map with the parade route\\\",\\n\\\"depend\\\": \\\"requests, folium, New York City's Event API, Google Maps API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An individual who is new to fitness and relies on the personal trainer's guidance and expertise", "synthesized text": "\"{\\n\\\"name\\\": \\\"Workout Plan Generator Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to generate a customized workout plan based on the user's fitness level, goal, and available equipment.\\\",\\n\\\"function_name\\\": \\\"generate_workout_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"fitness_level\\\": \\\"The user's fitness level (beginner, intermediate, advanced)\\\",\\n    \\\"goal\\\": \\\"The user's goal (e.g., weight loss, muscle gain)\\\",\\n    \\\"available_equipment\\\": \\\"The equipment the user has available\\\"\\n},\\n\\\"return\\\": \\\"A customized workout plan\\\",\\n\\\"depend\\\": \\\"tensorflow.keras, workout_plan_generator.h5 (a pre-trained machine learning model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old retired man planning a basement remodeling.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basement Area Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the total area of a basement given its length and width. Useful for planning a remodeling project.\\\",\\n\\\"function_name\\\": \\\"calculate_basement_area\\\",\\n\\\"input_args\\\": [\\\"length\\\", \\\"width\\\"],\\n\\\"return\\\": \\\"The total area of the basement in square meters.\\\",\\n\\\"depend\\\": \\\"Python's built-in functionality\\\"\\n}\"", "description": "tool development"}
{"input persona": "I’m a graphic designer with a knack for balancing creative flair and functionality in print publications.", "synthesized text": "\"{\\n\\\"name\\\": \\\"PDF Extraction and Analysis Interface\\\",\\n\\\"description\\\": \\\"The interface provides functionalities to extract text from a PDF document and convert its pages into images. It enables a graphic designer to easily analyze and repurpose contents of a PDF file.\\\",\\n\\\"function_name\\\": [\\\"extract_text_from_pdf\\\", \\\"convert_pdf_to_images\\\"],\\n\\\"input_args\\\": [\\\"pdf_path\\\"],\\n\\\"return\\\": [\\\"String of extracted text\\\", \\\"List of paths to the extracted images\\\"],\\n\\\"depend\\\": [\\\"Python libraries: PyPDF2, pdf2image\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A professional race car driver who competes in the same league as Denny Hamlin", "synthesized text": "\"{\\n\\\"name\\\": \\\"Live Race Position Tracker\\\",\\n\\\"description\\\": \\\"This interface fetches the real-time position of a specific car in a race.\\\",\\n\\\"function_name\\\": \\\"get_race_position\\\",\\n\\\"input_args\\\": [\\\"race_name\\\", \\\"car_number\\\"],\\n\\\"return\\\": \\\"The current position of the car in the race.\\\",\\n\\\"depend\\\": \\\"Ergast Developer API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A landscape architect who can help design and implement natural barriers, such as trees and shrubs, to absorb sound", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Absorption Barrier Design Interface\\\",\\n\\\"description\\\": \\\"Predicts the effectiveness of different types of natural barriers for sound absorption\\\",\\n\\\"function_name\\\": \\\"predict_sound_absorption\\\",\\n\\\"input_args\\\": {\\n    \\\"area_size\\\": \\\"The size of the area where the barrier will be placed\\\",\\n    \\\"noise_type\\\": \\\"The type of noise to protect against\\\",\\n    \\\"plant_preferences\\\": \\\"The user's preferences for different types of plants\\\"\\n},\\n\\\"return\\\": \\\"A suggested design using specific types of plants and their arrangement for optimal sound absorption\\\",\\n\\\"depend\\\": \\\"Machine Learning Model (RandomForestRegressor from sklearn library)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A policy maker who supports self-regulation but seeks to establish guidelines to ensure consumer protection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Policy Compliance Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks if a policy text is compliant with the guidelines for consumer protection.\\\",\\n\\\"function_name\\\": \\\"check_policy_compliance\\\",\\n\\\"input_args\\\": \\\"policy_text\\\",\\n\\\"return\\\": \\\"A statement of whether the policy is compliant or not and what elements it lacks if it is not compliant.\\\",\\n\\\"depend\\\": \\\"SpaCy, NLTK, WordNet\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local government officer in Walsall, specialized in electoral services.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voter Registration Verification Interface\\\",\\n\\\"description\\\": \\\"This interface takes a person's name and address as input and returns the voter registration status of that person by using the electoral roll API\\\",\\n\\\"function_name\\\": \\\"verify_voter_registration\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"address\\\"],\\n\\\"return\\\": \\\"Registration status of the person ('Registered' or 'Not Registered')\\\",\\n\\\"depend\\\": \\\"requests library, electoral roll API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a first-year student just admitted to the ELTE School of English and American Studies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Checker Interface\\\",\\n\\\"description\\\": \\\"Checks the originality of a given text using the Unicheck API.\\\",\\n\\\"function_name\\\": \\\"check_plagiarism_text\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"Plagiarism score as a float between 0 and 100.\\\",\\n\\\"depend\\\": \\\"Unicheck API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local friend of Mike who is familiar with No-IP but doesn't understand much about the technical aspect", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dynamic DNS Update Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to simplify the process of updating a No-IP hostname with a new IP address. Users only need to provide their No-IP username, password, hostname, and the new IP address.\\\",\\n\\\"function_name\\\": \\\"update_noip_ddns\\\",\\n\\\"input_args\\\": {\\n    \\\"username\\\": \\\"The user's No-IP username\\\",\\n    \\\"password\\\": \\\"The user's No-IP password\\\",\\n    \\\"hostname\\\": \\\"The hostname to update\\\",\\n    \\\"myip\\\": \\\"The new IP address to associate with the hostname\\\"\\n},\\n\\\"return\\\": \\\"The response from the No-IP API, indicating whether the update was successful.\\\",\\n\\\"depend\\\": \\\"Python requests library, No-IP API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local Brussels café owner whose business is near the planned Verboekhoven metro station site", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-Time Metro Status Interface\\\",\\n\\\"description\\\": \\\"This interface fetches real-time metro status for a particular station using the Brussels Public Transport API.\\\",\\n\\\"function_name\\\": \\\"get_metro_status\\\",\\n\\\"input_args\\\": {\\n    \\\"station\\\": \\\"string\\\"\\n},\\n\\\"return\\\": \\\"List of departures with details such as the destination, expected departure time, platform, etc.\\\",\\n\\\"depend\\\": \\\"Brussels Public Transport API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A private equity investor targeting the same hotel chains for acquisitions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hotel Valuation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Discounted Cash Flow (DCF) method to estimate the intrinsic value of a hotel chain's stock.\\\",\\n\\\"function_name\\\": \\\"discounted_cash_flow\\\",\\n\\\"input_args\\\": [\\\"ticker\\\"],\\n\\\"return\\\": \\\"Estimated intrinsic value of the stock per share.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\":[\\\"yfinance\\\", \\\"scipy.stats\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a teenager from Metilji who is proud of his small community", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Event Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search for upcoming local events in their specified location or community. It's particularly useful for people who want to stay updated with events happening around them.\\\",\\n\\\"function_name\\\": \\\"get_local_events\\\",\\n\\\"input_args\\\": {\\n  \\\"location\\\": \\\"The location or community where the user wants to find events. This should be a string.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, each containing the name, start time, and end time of an event.\\\",\\n\\\"depend\\\": \\\"Eventbrite API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An electrical engineer who worked on designing the hardware for the first personal computers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Capacitor Value Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the value of a capacitor needed for a certain frequency in a RC circuit. The user inputs the resistance value and the desired frequency, and the interface returns the required capacitor value in Farads.\\\",\\n\\\"function_name\\\": \\\"calculate_capacitor_value\\\",\\n\\\"input_args\\\": [\\\"resistance\\\", \\\"frequency\\\"],\\n\\\"return\\\": \\\"Capacitor value in Farads\\\",\\n\\\"depend\\\": \\\"scipy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nutritionist who recommends their clients shop from the farmer's market for healthy eating", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of ingredients as input and returns detailed nutritional information about those ingredients. The ingredients should be passed in as a string, with individual ingredients separated by commas.\\\",\\n\\\"function_name\\\": \\\"analyze_recipe_ingredients\\\",\\n\\\"input_args\\\": \\\"ingredients - a string of ingredients separated by commas\\\",\\n\\\"return\\\": \\\"A dictionary with detailed nutritional information about the ingredients\\\",\\n\\\"depend\\\": \\\"Python's requests and json libraries, Edamam's Nutrition Analysis API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gifted storyteller who creates compelling narratives in virtual reality despite living in a socio-economically disadvantaged area", "synthesized text": "\"{\\n\\\"name\\\": \\\"Virtual Reality Storytelling Interface\\\",\\n\\\"description\\\": \\\"Generates a basic structure for a virtual reality scene based on the user's input of storyline, characters, setting, and plot.\\\",\\n\\\"function_name\\\": \\\"generate_vr_scene\\\",\\n\\\"input_args\\\": [\\\"storyline\\\", \\\"characters\\\", \\\"setting\\\", \\\"plot\\\"],\\n\\\"return\\\": \\\"Rendered HTML code for a basic virtual reality scene.\\\",\\n\\\"depend\\\": [\\\"Jinja2 library for rendering HTML templates\\\", \\\"A-Frame library for creating VR scenes\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An Indian woman in her 60s who grew up watching Tabassum's shows", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bollywood Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to recommend Bollywood movies based on the user's favourite actors and genres.\\\",\\n\\\"function_name\\\": \\\"recommend_bollywood_movies\\\",\\n\\\"input_args\\\": {\\n    \\\"favorite_actors\\\": \\\"A string of favorite actors separated by commas\\\",\\n    \\\"favorite_genres\\\": \\\"A string of favorite genres separated by commas\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended Bollywood movies\\\",\\n\\\"depend\\\": [\\\"Hugging Face\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired chemistry teacher with a wealth of knowledge about the chemical processes in film development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Development Process Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface takes the parameters for the film development process (developer time, stop bath time, fixer time), and returns the simulated process timeline.\\\",\\n\\\"function_name\\\": \\\"simulate_film_development\\\",\\n\\\"input_args\\\": [\\\"developer_time\\\", \\\"stop_bath_time\\\", \\\"fixer_time\\\"],\\n\\\"return\\\": \\\"A string indicating the completion of the simulation\\\",\\n\\\"depend\\\": \\\"SimPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a middle-aged Kyrgyz woman who was born and grew up in It-Agar village", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenWeatherMap API to provide current weather forecast for a given location.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"Current weather forecast for the given location in text form\\\",\\n\\\"depend\\\": \\\"requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An owner of a Kentucky horse farm focused on breeding and racing thoroughbreds", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horse Breed Compatibility Interface\\\",\\n\\\"description\\\": \\\"This interface suggests the most compatible horse breeds for breeding based on the attributes of a given horse.\\\",\\n\\\"function_name\\\": \\\"get_compatible_breeds\\\",\\n\\\"input_args\\\": [\\\"height\\\", \\\"weight\\\", \\\"speed\\\", \\\"endurance\\\"],\\n\\\"return\\\": \\\"A list of compatible horse breeds for breeding\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, sklearn, pandas; Web API: HorseDB\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner who needs assistance in understanding and complying with hazardous waste regulations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hazardous Waste Information Interface\\\",\\n\\\"description\\\": \\\"This interface uses the EPA's (Environmental Protection Agency) RCRAInfo Web public API to get information about hazardous waste. The user inputs their business's EPA ID, and it returns the hazardous waste handling and compliance information related to the business.\\\",\\n\\\"function_name\\\": \\\"get_hazardous_waste_info\\\",\\n\\\"input_args\\\": {\\n\\\"epa_id\\\": \\\"The EPA ID of the business\\\"\\n},\\n\\\"return\\\": \\\"A json object containing the hazardous waste handling and compliance information of the business.\\\",\\n\\\"depend\\\": \\\"EPA's RCRAInfo Web public API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concerned parent who wants to learn more about addiction prevention for their children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Substance Abuse Risk Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained logistic regression model to predict the likelihood of substance abuse based on a list of risk factors.\\\",\\n\\\"function_name\\\": \\\"predict_substance_abuse_risk\\\",\\n\\\"input_args\\\": \\\"risk_factors - a list of quantified risk factors\\\",\\n\\\"return\\\": \\\"A float representing the predicted probability of substance abuse.\\\",\\n\\\"depend\\\": \\\"sklearn.linear_model.LogisticRegression, pickle\\\"\\n}\"", "description": "tool development"}
{"input persona": "A literature professor who finds parallels between poker strategy and narrative structure in novels", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poker Hand Strength Analyzer\\\",\\n\\\"description\\\": \\\"Analyzes the strength of a poker hand based on card values and suits\\\",\\n\\\"function_name\\\": \\\"evaluate_poker_hand\\\",\\n\\\"input_args\\\": [\\\"hand\\\"],\\n\\\"return\\\": \\\"Hand rank (lower is stronger)\\\",\\n\\\"depend\\\": \\\"Python library: deuces\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physics student preparing for a research presentation on bottomonium", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bottomonium Spectrum Plot Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to create a plot of the energy levels of the bottomonium spectrum. The user inputs the energy levels and names of the states, and the interface returns a plot.\\\",\\n\\\"function_name\\\": \\\"plot_bottomonium_spectrum\\\",\\n\\\"input_args\\\": [\\\"energy_levels\\\", \\\"state_names\\\"],\\n\\\"return\\\": \\\"A plot showing the energy levels of the bottomonium spectrum.\\\",\\n\\\"depend\\\": [\\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A father who is considering whether to sign his child up for baseball", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baseball Skill Level Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to analyze a description of a child's physical abilities and return an assessment of whether the child might be good at playing baseball.\\\",\\n\\\"function_name\\\": \\\"assess_baseball_skills\\\",\\n\\\"input_args\\\": \\\"a string that describes the child's physical abilities\\\",\\n\\\"return\\\": \\\"a string that provides an assessment of the child's potential ability to play baseball\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A privacy-sensitive WordPress site owner.", "synthesized text": "\"{\\n\\\"name\\\": \\\"WordPress Site Security Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks if a WordPress site has exposed some sensitive information like WordPress version, readme.html, license.txt, etc.\\\",\\n\\\"function_name\\\": \\\"check_wordpress_security\\\",\\n\\\"input_args\\\": {\\\"url\\\": \\\"the URL of the WordPress site\\\"},\\n\\\"return\\\": \\\"a dictionary where each key is a potential vulnerability and the value is either 'Vulnerable', 'Safe', 'Exposed', or 'Not Exposed'\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "一位对自动驾驶颇有见解的经济学者", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u81ea\\u52a8\\u9a7e\\u9a76\\u8f66\\u8f86\\u884c\\u9a76\\u901f\\u5ea6\\u9884\\u6d4b\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u7ed3\\u5408\\u4ea4\\u901a\\u73af\\u5883\\u548c\\u5929\\u6c14\\u72b6\\u51b5\\uff0c\\u9884\\u6d4b\\u81ea\\u52a8\\u9a7e\\u9a76\\u8f66\\u8f86\\u7684\\u9884\\u671f\\u884c\\u9a76\\u901f\\u5ea6\\\",\\n\\\"function_name\\\": \\\"predict_driving_speed\\\",\\n\\\"input_args\\\": [\\\"traffic_condition\\\", \\\"weather_condition\\\"],\\n\\\"return\\\": \\\"\\u9884\\u671f\\u7684\\u884c\\u9a76\\u901f\\u5ea6\\uff08\\u516c\\u91cc/\\u5c0f\\u65f6\\uff09\\\",\\n\\\"depend\\\": \\\"TensorFlow\\u5e93\\uff0c\\u9884\\u8bad\\u7ec3\\u7684\\u673a\\u5668\\u5b66\\u4e60\\u6a21\\u578b\\\"\\n}\"", "description": "tool development"}
{"input persona": "a sense of justice ultra-strong citizen", "synthesized text": "\"{\\n\\\"name\\\": \\\"Incident Reporting Interface\\\",\\n\\\"description\\\": \\\"This interface uses Twilio's Messaging API to send incident details from a user to the local police department.\\\",\\n\\\"function_name\\\": \\\"report_incident\\\",\\n\\\"input_args\\\": {\\\"user_name\\\": \\\"string\\\", \\\"user_contact\\\": \\\"string\\\", \\\"incident_details\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string indicating the success of the incident report along with the report ID\\\",\\n\\\"depend\\\": \\\"Twilio's Messaging API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aspiring glass artist from United States", "synthesized text": "\"{\\n\\\"name\\\": \\\"Glass Color Estimation Interface\\\",\\n\\\"description\\\": \\\"Estimates the dominant color of a glass object from an image\\\",\\n\\\"function_name\\\": \\\"get_dominant_color\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"dominant_color\\\",\\n\\\"depend\\\": \\\"Keras, OpenCV, VGG16 pre-trained model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a patient who dreads medical procedures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Procedure Preparation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face which has been trained on medical documents to understand and simplify explanations of medical procedures. It takes as input the name of a medical procedure, and returns a simplified explanation of the procedure.\\\",\\n\\\"function_name\\\": \\\"explain_medical_procedure\\\",\\n\\\"input_args\\\": [\\\"procedure\\\"],\\n\\\"return\\\": \\\"A simplified explanation of the medical procedure.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"mrm8488/t5-base-finetune-medical-summarize\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A competitive Futsal player from New Zealand with an ambition to reclaim the championship for my country.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Futsal Match Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to analyze sports performance in Futsal matches. It takes as input the path to a match video file and returns a detailed analysis of the match.\\\",\\n\\\"function_name\\\": \\\"analyze_match_performance\\\",\\n\\\"input_args\\\": \\\"path_to_video: The path to the video file of the Futsal match.\\\",\\n\\\"return\\\": \\\"A detailed analysis of the Futsal match, including player's performance, ball possession, scoring opportunities, etc.\\\",\\n\\\"depend\\\": \\\"huggingface_hub, pytorch_video, torchvision\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional photographer specializing in architectural and interior photography to enhance property listings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interior Enhancement Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the OpenCV library to enhance interior photographs by performing operations like rotation, translation, resizing, cropping and flipping.\\\",\\n\\\"function_name\\\": \\\"enhance_image\\\",\\n\\\"input_args\\\": {\\\"path_to_image\\\": \\\"string\\\", \\\"operation\\\": \\\"string\\\", \\\"params\\\": \\\"dict\\\"},\\n\\\"return\\\": \\\"A numpy array representing the enhanced image.\\\",\\n\\\"depend\\\": \\\"OpenCV library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research scientist who requires the engineer's platforms to process and visualize experimental data", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Processing and Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface processes a CSV file and visualizes the relationship between two specified columns.\\\",\\n\\\"function_name\\\": \\\"process_and_visualize_data\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_csv\\\": \\\"The path to the csv file\\\",\\n    \\\"x_column\\\": \\\"The name of the column to be plotted on the x-axis\\\",\\n    \\\"y_column\\\": \\\"The name of the column to be plotted on the y-axis\\\"\\n    },\\n\\\"return\\\": \\\"A line plot showing the relationship between the two variables.\\\",\\n\\\"depend\\\": \\\"pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A social media platform looking to integrate blockchain technology for data security and privacy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Transaction Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to send Ethereum transactions. Users need to input their private key, the recipient's address, and the amount to send, and the interface will handle the transaction.\\\",\\n\\\"function_name\\\": \\\"send_eth_transaction\\\",\\n\\\"input_args\\\": [\\\"private_key\\\", \\\"recipient_address\\\", \\\"amount\\\"],\\n\\\"return\\\": \\\"transaction_hash\\\",\\n\\\"depend\\\": \\\"Web3 Python library, Ethereum Blockchain\\\"\\n}\"", "description": "tool development"}
{"input persona": "A procurement specialist who coordinates the procurement of materials and services for infrastructure projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Supplier Bid Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes supplier bid data and returns a summary with the lowest bid for each material or service.\\\",\\n\\\"function_name\\\": \\\"analyze_bids\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A pandas DataFrame with the names of the materials or services and the lowest bid amount for each.\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A dedicated officer striving to become the youngest prison warden in history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inmate Record Search Interface\\\",\\n\\\"description\\\": \\\"Interface to search for inmate's full record using their identification number.\\\",\\n\\\"function_name\\\": \\\"get_inmate_record\\\",\\n\\\"input_args\\\": \\\"inmate_id\\\",\\n\\\"return\\\": \\\"Inmate's full record as a json object\\\",\\n\\\"depend\\\": \\\"requests library, Law enforcement or Justice department API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A political activist who argues that investing in space exploration is a waste of resources that could be better utilized to address social issues", "synthesized text": "\"{\\n\\\"name\\\": \\\"Spending Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to obtain a breakdown of government spending in the areas of user's interest.\\\",\\n\\\"function_name\\\": \\\"get_federal_spending\\\",\\n\\\"input_args\\\": \\\"sector\\\",\\n\\\"return\\\": \\\"Amount of spending in the input sector\\\",\\n\\\"depend\\\": \\\"Federal Spending API\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一名曾经对国际象棋毫无兴趣的普通上班族，但因为偶然的机会观看了一场精彩赛事后，对棋艺产生了浓厚兴趣。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chess Move Recommendation Interface\\\",\\n\\\"description\\\": \\\"\\u4f7f\\u7528\\u5f00\\u6e90\\u7684\\u56fd\\u9645\\u8c61\\u68cb\\u5f15\\u64ce\\uff0c\\u6839\\u636e\\u5f53\\u524d\\u7684\\u68cb\\u76d8\\u5c40\\u9762\\uff0c\\u63a8\\u8350\\u4e0b\\u4e00\\u6b65\\u7684\\u6700\\u4f73\\u68cb\\u6b65\\u3002\\\",\\n\\\"function_name\\\": \\\"get_best_move\\\",\\n\\\"input_args\\\": {\\n    \\\"fen\\\": \\\"\\u4e00\\u4e2a\\u63cf\\u8ff0\\u68cb\\u76d8\\u5f53\\u524d\\u72b6\\u6001\\u7684FEN\\u5b57\\u7b26\\u4e32\\\"\\n},\\n\\\"return\\\": \\\"\\u4e00\\u4e2a\\u63cf\\u8ff0\\u6700\\u4f73\\u4e0b\\u4e00\\u6b65\\u68cb\\u6b65\\u7684\\u5b57\\u7b26\\u4e32\\\",\\n\\\"depend\\\": \\\"Python\\u7684chess\\u5e93\\u548cStockfish\\u68cb\\u76d8\\u5f15\\u64ce\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single parent who lost their child in a drunk driving accident and now advocates for stricter laws and penalties", "synthesized text": "\"{\\n\\\"name\\\": \\\"Petition Signature Collection Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Change.org API to create a petition, add a detailed description, and then share it for signatures.\\\",\\n\\\"function_name\\\": \\\"create_petition\\\",\\n\\\"input_args\\\": {\\n    \\\"title\\\": \\\"The title of the petition\\\",\\n    \\\"description\\\": \\\"A detailed description of the petition\\\",\\n    \\\"target\\\": \\\"Who the petition is aimed at\\\"\\n},\\n\\\"return\\\": \\\"The URL of the newly created petition\\\",\\n\\\"depend\\\": \\\"Change.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Australian wine producer who exports the majority of his products to China", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wine Quality Prediction Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to predict the quality of wine based on its chemical properties using a pre-trained model from HuggingFace.\\\",\\n\\\"function_name\\\": \\\"predict_wine_quality\\\",\\n\\\"input_args\\\": {\\n    \\\"properties\\\": \\\"A dictionary of chemical properties of the wine. Example: {'fixed acidity': 7.4, 'volatile acidity': 0.7, 'citric acid': 0, 'residual sugar': 1.9, 'chlorides': 0.076, 'free sulfur dioxide': 11, 'total sulfur dioxide': 34, 'density': 0.9978, 'pH': 3.51, 'sulphates': 0.56, 'alcohol': 9.4}\\\"\\n},\\n\\\"return\\\": \\\"A prediction of the wine's quality. The output is an integer with a higher number indicating better quality.\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers, torch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher studying the impact of different training methods on muscle growth", "synthesized text": "\"{\\n\\\"name\\\": \\\"Muscle Growth Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to predict muscle growth based on the training method, duration, frequency, and intensity.\\\",\\n\\\"function_name\\\": \\\"predict_muscle_growth\\\",\\n\\\"input_args\\\": [\\\"training_type\\\", \\\"duration\\\", \\\"frequency\\\", \\\"intensity\\\"],\\n\\\"return\\\": \\\"Predicted muscle growth\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\", \\\"Machine Learning Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a long-time student of Patrick Harries at CORE Health clubs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Workout Routine Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to recommend workout routines based on user's personal details and fitness goals.\\\",\\n\\\"function_name\\\": \\\"recommend_workout_routine\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"weight\\\", \\\"height\\\", \\\"gender\\\", \\\"fitness_level\\\", \\\"goal\\\"],\\n\\\"return\\\": \\\"A recommended workout routine based on user's input details.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\", \\\"Machine Learning model (RandomForestClassifier)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a software developer familiar with the Osmium library", "synthesized text": "\"{\\n\\\"name\\\": \\\"OpenStreetMap Data Extraction\\\",\\n\\\"description\\\": \\\"This interface extracts specific information (in this case, restaurant names) from OpenStreetMap data for a given city.\\\",\\n\\\"function_name\\\": \\\"get_restaurant_names\\\",\\n\\\"input_args\\\": \\\"city_osm_file - The path to an OSM file for a specific city.\\\",\\n\\\"return\\\": \\\"A list of all the restaurant names in the specified city according to the OSM data.\\\",\\n\\\"depend\\\": \\\"This interface uses the PyOsmium library (Python bindings for the Osmium library) to process OpenStreetMap data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A potential home buyer who is considering relocating Westplex town in Missouri", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Price Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the estimated price of a home based on certain features (such as number of bedrooms, bathrooms, square footage, etc.).\\\",\\n\\\"function_name\\\": \\\"predict_home_price\\\",\\n\\\"input_args\\\": [\\\"model\\\", \\\"bedrooms\\\", \\\"bathrooms\\\", \\\"sqft\\\", \\\"age\\\", \\\"has_pool\\\"],\\n\\\"return\\\": \\\"Estimated price of the home.\\\",\\n\\\"depend\\\": [\\\"torch\\\", \\\"Real Estate Web APIs\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a millennial who can't resist avocado toast", "synthesized text": "\"{\\n\\\"name\\\": \\\"Avocado Ripeness Detection Interface\\\",\\n\\\"description\\\": \\\"An interface to classify the ripeness of an avocado from an image.\\\",\\n\\\"function_name\\\": \\\"detect_avocado_ripeness\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to the image file of the avocado\\\"\\n},\\n\\\"return\\\": \\\"A string indicating the ripeness of the avocado: 'Unripe', 'Ripe', or 'Overripe'\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and a specific TensorFlow model for avocado ripeness classification\\\"\\n}\"", "description": "tool development"}
{"input persona": "a computer scientist who is a huge advocate for the C++ programming language.", "synthesized text": "\"{\\n\\\"name\\\": \\\"C++ Code Compilation Interface\\\",\\n\\\"description\\\": \\\"This interface compiles and runs C++ code. It takes a single string of C++ code as input, and returns a dictionary. If there is a compilation error or a runtime error, the dictionary will contain 'compile_error' or 'run_error' respectively as keys, with the associated error messages as values. If the code runs successfully, the dictionary will contain 'output' as a key, with the output of the code as the value.\\\",\\n\\\"function_name\\\": \\\"run_cpp_code\\\",\\n\\\"input_args\\\": {\\\"cpp_code\\\": \\\"a string of C++ code\\\"},\\n\\\"return\\\": \\\"a dictionary containing either the output of the code, or any errors that occurred\\\",\\n\\\"depend\\\": \\\"Python's subprocess library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A school teacher from a small village in Kazakhstan who experienced the horror of nuclear tests close to her home when she was a child.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Radiation Level Check Interface\\\",\\n  \\\"description\\\": \\\"An interface to check the current UV index (radiation level) at a specific location. The user needs to input their latitude and longitude, and the interface will return the UV index.\\\",\\n  \\\"function_name\\\": \\\"get_uv_index\\\",\\n  \\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\"],\\n  \\\"return\\\": \\\"UV index at the specified location\\\",\\n  \\\"depend\\\": \\\"OpenWeatherMap's One Call API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A playful elementary school student who loves outdoor activities but often forgets to wash his hands", "synthesized text": "\"{\\n\\\"name\\\": \\\"Handwashing Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface sends reminders to the user to wash hands at specified intervals. The user inputs the start time and the interval in minutes.\\\",\\n\\\"function_name\\\": \\\"handwashing_reminder\\\",\\n\\\"input_args\\\": {\\\"start_time\\\": \\\"The time to start sending reminders, in minutes from now.\\\", \\\"interval_minutes\\\": \\\"The interval to wait between reminders, in minutes.\\\"},\\n\\\"return\\\": \\\"This function does not return a value. It prints a reminder message to the console every interval minutes, starting at the start time.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"time\\\", \\\"threading\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A motorcycle gear retailer who supplies the Leicester Lions team with their racing equipment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Motorcycle Gear Inventory Management Interface\\\",\\n\\\"description\\\": \\\"This interface provides functions to manage the inventory of a motorcycle gear retailer. It uses pandas library to add, remove, or update items in the inventory, and to check the current state of the inventory.\\\",\\n\\\"function_name\\\": [\\\"__init__\\\", \\\"add_item\\\", \\\"remove_item\\\", \\\"update_item\\\", \\\"check_inventory\\\"],\\n\\\"input_args\\\": {\\n    \\\"__init__\\\": [\\\"csv_file_path\\\"],\\n    \\\"add_item\\\": [\\\"item_name\\\", \\\"quantity\\\", \\\"price\\\"],\\n    \\\"remove_item\\\": [\\\"item_name\\\"],\\n    \\\"update_item\\\": [\\\"item_name\\\", \\\"quantity\\\", \\\"price\\\"],\\n    \\\"check_inventory\\\": []\\n},\\n\\\"return\\\": {\\n    \\\"__init__\\\": \\\"None\\\",\\n    \\\"add_item\\\": \\\"None\\\",\\n    \\\"remove_item\\\": \\\"None\\\",\\n    \\\"update_item\\\": \\\"None\\\",\\n    \\\"check_inventory\\\": \\\"DataFrame: Inventory\\\"\\n},\\n\\\"depend\\\": \\\"Python Library: pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A calculating and strategic poker player who always seems to be one step ahead", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poker Hand Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Python library pypokerengine to evaluate the strength of a poker hand based on the hole cards and community cards. It returns the win rate of the hand, which can be used to compare against other hands.\\\",\\n\\\"function_name\\\": \\\"evaluate_poker_hand\\\",\\n\\\"input_args\\\": {\\n    \\\"hole\\\": \\\"A list of strings representing the hole cards. Each string is composed of the card rank followed by its suit. For example, ['H4', 'D9'] represents a hand with the 4 of Hearts and the 9 of Diamonds.\\\",\\n    \\\"community\\\": \\\"A list of strings representing the community cards. Each string is composed of the card rank followed by its suit. For example, ['H10', 'DJ', 'DK', 'DA', 'DQ'] represents a community of 10 of Hearts, Jack of Diamonds, King of Diamonds, Ace of Diamonds, and Queen of Diamonds.\\\"\\n},\\n\\\"return\\\": \\\"A float representing the win rate of the hand. A higher value indicates a stronger hand.\\\",\\n\\\"depend\\\": [\\\"pypokerengine\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A tabletop role-playing game enthusiast who wants a campaign tracker app with innovative features", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tabletop RPG Campaign Tracker\\\",\\n\\\"description\\\": \\\"A high-level interface for managing tabletop role-playing game campaigns. It allows you to add and retrieve characters from a specific campaign.\\\",\\n\\\"function_name\\\": [\\\"connect_db\\\", \\\"add_character\\\", \\\"get_characters\\\"],\\n\\\"input_args\\\": {\\\"connect_db\\\": [\\\"db_name\\\"], \\\"add_character\\\": [\\\"campaign_name\\\", \\\"character_name\\\", \\\"character_class\\\", \\\"level\\\"], \\\"get_characters\\\": [\\\"campaign_name\\\"]},\\n\\\"return\\\": {\\\"connect_db\\\": \\\"SQLite connection object\\\", \\\"add_character\\\": \\\"None\\\", \\\"get_characters\\\": \\\"List of characters in the campaign\\\"},\\n\\\"depend\\\": \\\"SQLite3 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer specializing in developing privacy-focused applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"User Data Anonymization Interface\\\",\\n\\\"description\\\": \\\"An interface to anonymize user data for privacy protection. It supports anonymizing names, addresses and emails.\\\",\\n\\\"function_name\\\": \\\"anonymize_user_data\\\",\\n\\\"input_args\\\": \\\"data_type - A string indicating the type of data to anonymize. Options include 'name', 'address', 'email'.\\\",\\n\\\"return\\\": \\\"A string containing the anonymized (fake) data.\\\",\\n\\\"depend\\\": \\\"Python library Faker\\\"\\n}\"", "description": "tool development"}
{"input persona": "a skeptical scientist specialized in mammalian biology.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gene Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyze a DNA sequence to calculate its GC content, count each nucleotide, and transcribe and translate the sequence.\\\",\\n\\\"function_name\\\": \\\"analyze_dna_sequence\\\",\\n\\\"input_args\\\": {\\n    \\\"dna_sequence\\\": \\\"A string representing a DNA sequence\\\"\\n},\\n\\\"return\\\": {\\n    \\\"gc_content\\\": \\\"The GC content of the DNA sequence\\\",\\n    \\\"nucleotide_count\\\": \\\"A dictionary counting each nucleotide in the sequence\\\",\\n    \\\"mRNA\\\": \\\"The mRNA transcription of the DNA sequence\\\",\\n    \\\"protein\\\": \\\"The protein translation of the DNA sequence\\\"\\n},\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Spanish citizen who cannot help envying their neighbors in Scandinavia for their peaceful and democratic traditions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Social Democracy Index Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to compare the democracy index and happiness rank of their country to the average of Scandinavian countries.\\\",\\n\\\"function_name\\\": \\\"compare_to_scandinavia\\\",\\n\\\"input_args\\\": [\\\"user_country\\\"],\\n\\\"return\\\": \\\"A string providing a comparison of the user's country's democracy index and happiness rank to the averages of Scandinavian countries.\\\",\\n\\\"depend\\\": \\\"pandas, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wind farm operator looking to upgrade their turbines with high-performance blades to maximize energy output", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wind Turbine Performance Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the performance (i.e., energy output) of a wind turbine based on the properties of its blades. It uses a machine learning model trained on a large dataset of wind turbines.\\\",\\n\\\"function_name\\\": \\\"predict_turbine_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"blade_length\\\": \\\"Length of the turbine blade (in meters)\\\",\\n    \\\"blade_width\\\": \\\"Width of the turbine blade (in meters)\\\",\\n    \\\"blade_material\\\": \\\"Material of the turbine blade (as a string, e.g., 'Aluminium')\\\"\\n},\\n\\\"return\\\": \\\"Predicted energy output of the wind turbine (in KWh)\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "An author who includes intricate codes and ciphers in their novels", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Cipher Interface\\\",\\n\\\"description\\\": \\\"This interface provides functions to cipher and decipher texts using a key. It's useful for authors who want to include intricate codes and ciphers in their novels.\\\",\\n\\\"function_name\\\": [\\\"generate_key\\\", \\\"cipher_text\\\", \\\"decipher_text\\\"],\\n\\\"input_args\\\": {\\\"generate_key\\\": [], \\\"cipher_text\\\": [\\\"key\\\", \\\"text\\\"], \\\"decipher_text\\\": [\\\"key\\\", \\\"ciphered_text\\\"]},\\n\\\"return\\\": {\\\"generate_key\\\": \\\"key\\\", \\\"cipher_text\\\": \\\"ciphered_text\\\", \\\"decipher_text\\\": \\\"deciphered_text\\\"},\\n\\\"depend\\\": {\\\"python\\\": [\\\"cryptography\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A pottery artist who creates intricately designed ceramic pieces inspired by the natural beauty of Leyburn and Wensleydale", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Generation Interface\\\",\\n\\\"description\\\": \\\"An interface that generates a 3D model from 2D images of a ceramic piece. Requires two or more images of the piece taken from different angles.\\\",\\n\\\"function_name\\\": \\\"generate_3D_model\\\",\\n\\\"input_args\\\": \\\"paths_to_images - List of paths to image files\\\",\\n\\\"return\\\": \\\"3D model data in numpy array format\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, tensorflow_graphics\\\"\\n}\"", "description": "tool development"}
{"input persona": "A media analyst who predicts the future trends and challenges of the streaming industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Streaming Service Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the TMDb API to get detailed information about movies and TV shows on various streaming platforms. This information can be used by a media analyst to predict future trends and challenges of the streaming industry.\\\",\\n\\\"function_name\\\": \\\"get_streaming_info\\\",\\n\\\"input_args\\\": \\\"tmdb_id - The ID of the movie or TV show\\\",\\n\\\"return\\\": \\\"A dictionary containing detailed information about the movie or TV show including popularity, vote average, genres, and platforms available.\\\",\\n\\\"depend\\\": \\\"requests library, TMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A experimental physicist conducting experiments that can provide empirical evidence for the theoretical physicist's quantum field theory predictions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum Field Theory Predictions Processing Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of comparing raw experimental data with quantum field theory predictions. It calculates the correlation coefficient and the p-value between the raw data and the predictions.\\\",\\n\\\"function_name\\\": \\\"process_qft_predictions\\\",\\n\\\"input_args\\\": [\\\"raw_data\\\", \\\"qft_predictions\\\"],\\n\\\"return\\\": {\\\"correlation_coefficient\\\": \\\"float\\\", \\\"p_value\\\": \\\"float\\\"},\\n\\\"depend\\\": [\\\"SciPy\\\", \\\"NumPy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A client representative who is interested in implementing Identity Server 4 and seeks guidance from the recent graduate on best practices and implementation strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Identity Server OAuth2 Token Validation Interface\\\",\\n\\\"description\\\": \\\"This interface validates the tokens issued by Identity Server 4 using the public key and checks for the correct audience and issuer.\\\",\\n\\\"function_name\\\": \\\"validate_identity_server_token\\\",\\n\\\"input_args\\\": {\\n    \\\"token\\\": \\\"The token issued by Identity Server 4\\\",\\n    \\\"public_key\\\": \\\"The public key to decode the token\\\",\\n    \\\"audience\\\": \\\"The expected audience of the token\\\",\\n    \\\"issuer\\\": \\\"The expected issuer of the token\\\"\\n},\\n\\\"return\\\": \\\"A boolean value indicating whether the token is valid or not.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, jwt\\\"\\n}\"", "description": "tool development"}
{"input persona": "A driver who received a traffic violation ticket and disagrees with the officer's judgment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traffic Violation Appeal Drafting Interface\\\",\\n\\\"description\\\": \\\"This interface helps users draft an appeal letter against a traffic violation ticket. The user needs to provide the violation details, their argument against it, and the desired recipient of the appeal. The interface will return a professionally drafted appeal letter.\\\",\\n\\\"function_name\\\": \\\"draft_appeal_letter\\\",\\n\\\"input_args\\\": \\\"violation_details, argument, recipient\\\",\\n\\\"return\\\": \\\"A professionally drafted appeal letter\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A roller derby enthusiast and historian", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historical Roller Derby Score Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches score data for a historical roller derby match between two specified teams on a specified date. The data is sourced from a hypothetical API (to be replaced with a real one).\\\",\\n  \\\"function_name\\\": \\\"get_derby_score\\\",\\n  \\\"input_args\\\": {\\n      \\\"team1\\\": \\\"Name of the first team\\\",\\n      \\\"team2\\\": \\\"Name of the second team\\\",\\n      \\\"date\\\": \\\"Date of the match in format YYYY-MM-DD\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary with team names and their respective scores from the match, or an error message if match is not found or API request fails.\\\",\\n  \\\"depend\\\": \\\"Web API (Hypothetical Roller Derby Stats API), Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biology major who sees the potential benefits of genetic cloning in advancing medical research", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequence Alignment Interface\\\",\\n\\\"description\\\": \\\"This interface receives two DNA sequences, performs a pairwise sequence alignment and returns the alignment score and the aligned sequences.\\\",\\n\\\"function_name\\\": \\\"align_sequences\\\",\\n\\\"input_args\\\": [\\\"seq1\\\", \\\"seq2\\\"],\\n\\\"return\\\": \\\"A tuple containing: the first aligned sequence, the second aligned sequence, the alignment score, and the start and end positions of the alignment in the input sequences.\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A romantic boyfriend who lives in Philadelphia and enjoys planning surprises.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Romantic Surprise Event Planning Interface\\\",\\n\\\"description\\\": \\\"This interface uses Ticketmaster API to find upcoming events and Google Maps API to find romantic restaurants in the specified city for a specified date. This can help users plan a romantic surprise for their partner.\\\",\\n\\\"function_name\\\": \\\"plan_romantic_surprise\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"The city where the user wants to plan the surprise\\\", \\\"date\\\": \\\"The date when the user wants to plan the surprise\\\"},\\n\\\"return\\\": {\\\"events\\\": \\\"A list of upcoming events in the specified city on the specified date.\\\", \\\"restaurants\\\": \\\"A list of romantic restaurants in the specified city.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"datetime\\\", \\\"json\\\"], \\\"Web APIs\\\": [\\\"Ticketmaster API\\\", \\\"Google Maps API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A farm-to-table chef who creates a custom menu using organic ingredients from the couple's own garden", "synthesized text": "\"{\\n\\\"name\\\": \\\"Seasonal Recipe Suggestions Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spoonacular API to get recipe suggestions based on the ingredients available to the user. The user inputs a list of ingredients, and the interface returns a list of potential recipes that can be made with those ingredients.\\\",\\n\\\"function_name\\\": \\\"get_seasonal_recipes\\\",\\n\\\"input_args\\\": \\\"ingredients - a list of ingredients available to the user\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing the title and id of a potential recipe\\\",\\n\\\"depend\\\": \\\"requests library, Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A garbage collector from Elko, Georgia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Garbage Route Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Maps' Directions API to create an optimized route for garbage collection. Users only need to input a list of addresses (as strings) and the starting point, and the interface will return the optimized route.\\\",\\n\\\"function_name\\\": \\\"optimize_garbage_collection_route\\\",\\n\\\"input_args\\\": {\\n  \\\"starting_point\\\": \\\"The address where the garbage collection route starts and ends.\\\",\\n  \\\"addresses\\\": \\\"A list of addresses where garbage needs to be collected.\\\"\\n},\\n\\\"return\\\": \\\"A list of directions that represents the optimized route for garbage collection.\\\",\\n\\\"depend\\\": \\\"Google Maps' Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old colleague and friend of Abi Hyslop, who has also worked in the travel industry for many years", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Flight Price Tracker\\\",\\n  \\\"description\\\": \\\"This interface is designed to track the latest flight prices from a given departure airport to an arrival airport. It makes use of the Skyscanner API, a global travel search site API.\\\",\\n  \\\"function_name\\\": \\\"get_flight_prices\\\",\\n  \\\"input_args\\\": {\\n    \\\"departure_airport\\\": \\\"The IATA code of the departure airport (e.g., 'LAX' for Los Angeles International Airport).\\\",\\n    \\\"arrival_airport\\\": \\\"The IATA code of the arrival airport (e.g., 'JFK' for John F. Kennedy International Airport).\\\"\\n  },\\n  \\\"return\\\": \\\"A list of the minimum prices for the flights from the departure airport to the arrival airport.\\\",\\n  \\\"depend\\\": \\\"Skyscanner API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A customer service representative relying on accurate speech recognition technology to improve call center efficiency", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes spoken words from a .wav audio file into written text using Google's speech recognition engine.\\\",\\n\\\"function_name\\\": \\\"audio_to_text\\\",\\n\\\"input_args\\\": \\\"audio_file_path: The path to the .wav audio file to be transcribed.\\\",\\n\\\"return\\\": \\\"String of transcribed text from the audio file.\\\",\\n\\\"depend\\\": \\\"SpeechRecognition library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A superstitious poet who believes strongly in signs and fate.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Astrological Sign Interpretation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the astrological interpretation of the current day for a given zodiac sign from the horoscope API.\\\",\\n\\\"function_name\\\": \\\"get_daily_horoscope\\\",\\n\\\"input_args\\\": \\\"sign - The user's zodiac sign\\\",\\n\\\"return\\\": \\\"A string containing the horoscope of the day for the provided zodiac sign\\\",\\n\\\"depend\\\": \\\"requests library, Horoscope API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a picky bride-to-be who is looking for the best wedding DJ service", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wedding DJ Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses Yelp's Fusion API to find top-rated wedding DJ services in a specific city. It returns a list of DJs with their rating and contact information.\\\",\\n\\\"function_name\\\": \\\"get_best_wedding_djs\\\",\\n\\\"input_args\\\": \\\"city\\\",\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary contains the 'name', 'rating', 'phone', and 'address' of a wedding DJ.\\\",\\n\\\"depend\\\": \\\"Yelp's Fusion API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An epidemiologist studying the correlation between pollution and specific health conditions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Air Quality Health Impact Interface\\\",\\n  \\\"description\\\": \\\"Uses APIs from OpenAQ and WHO to correlate air quality in a location with a specific health condition\\\",\\n  \\\"function_name\\\": \\\"correlate_air_quality_health\\\",\\n  \\\"input_args\\\": {\\n    \\\"lat\\\": \\\"Latitude of the location\\\",\\n    \\\"lon\\\": \\\"Longitude of the location\\\",\\n    \\\"condition\\\": \\\"Specific health condition\\\"\\n  },\\n  \\\"return\\\": \\\"Correlation score between the air quality and the health condition\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"scipy.stats\\\"],\\n    \\\"web_apis\\\": [\\\"OpenAQ API\\\", \\\"WHO API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a high school debate club coach who is interested in legal cases and concerned with crime prevention", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Case Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for legal cases based on a keyword or case name. It returns related legal case information such as case name, court, and date filed.\\\",\\n\\\"function_name\\\": \\\"search_legal_cases\\\",\\n\\\"input_args\\\": \\\"keyword\\\",\\n\\\"return\\\": \\\"list of dictionaries containing case name, court, and date filed\\\",\\n\\\"depend\\\": \\\"CourtListener's Free Law Project API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A public health agency collaborating on implementing new testing methods", "synthesized text": "\"{\\n\\\"name\\\": \\\"COVID-19 Test Result Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the probability of a COVID-19 test being positive based on symptoms, demographic info, and travel history.\\\",\\n\\\"function_name\\\": \\\"predict_covid_test_result\\\",\\n\\\"input_args\\\": [\\\"symptoms\\\", \\\"demographics\\\", \\\"travel_history\\\"],\\n\\\"return\\\": \\\"Probability of COVID-19 test being positive (range from 0 to 1)\\\",\\n\\\"depend\\\": {\\n            \\\"python libraries\\\": [\\\"transformers\\\", \\\"tensorflow\\\"],\\n            \\\"machine learning models\\\": [\\\"bert-based-covid-test-prediction from Hugging Face's Model Hub\\\"]\\n           }\\n}\"", "description": "tool development"}
{"input persona": "A classical pianist who believes that metal music lacks the complexity and depth of classical compositions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Complexity Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the complexity of a piece of music given its MIDI file. It returns the total number of unique chords and the average note-to-note interval in semitones.\\\",\\n\\\"function_name\\\": \\\"analyze_music_complexity\\\",\\n\\\"input_args\\\": \\\"path_to_midi: The path to the MIDI file\\\",\\n\\\"return\\\": \\\"A dictionary with the total number of unique chords ('unique_chords') and the average note-to-note interval in semitones ('average_note_interval')\\\",\\n\\\"depend\\\": \\\"music21 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a tour guide of Alejandro Selkirk Island", "synthesized text": "\"{\\n\\\"name\\\": \\\"Island Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface to get the current weather forecast for the Alejandro Selkirk Island. It returns the temperature, humidity, and weather description.\\\",\\n\\\"function_name\\\": \\\"get_island_weather\\\",\\n\\\"input_args\\\": {\\n    \\\"lat\\\": \\\"The latitude of the location as a float.\\\",\\n    \\\"lon\\\": \\\"The longitude of the location as a float.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Temperature\\\": \\\"The current temperature at the location in Kelvin.\\\",\\n    \\\"Humidity\\\": \\\"The current humidity at the location in percentage.\\\",\\n    \\\"Weather\\\": \\\"A brief description of the current weather at the location.\\\"\\n},\\n\\\"depend\\\": \\\"Python's requests library and the OpenWeatherMap API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lifelong friend and neighbor of Charles \"Chuck\" Daeges who shares his love for fishing and hunting.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fishing and Hunting Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the OpenWeatherMap API to get a 5-day weather forecast for a specific location, aiding in planning fishing and hunting activities.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\\"latitude\\\": \\\"float\\\", \\\"longitude\\\": \\\"float\\\"},\\n\\\"return\\\": {\\\"weather_forecast\\\": \\\"list of dictionaries each containing date and time, temperature and weather description\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"], \\\"Web APIs\\\": [\\\"OpenWeatherMap API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a mid-life woman who is currently facing early menopause and has been experiencing unexplainable chronic fatigue of late", "synthesized text": "\"{\\n\\\"name\\\": \\\"Menopause Symptom Tracker and Advice\\\",\\n\\\"description\\\": \\\"This interface takes a string of symptoms as input and returns potential causes and advice.\\\",\\n\\\"function_name\\\": \\\"get_health_advice\\\",\\n\\\"input_args\\\": \\\"symptoms\\\",\\n\\\"return\\\": \\\"Potential causes and advice\\\",\\n\\\"depend\\\": \\\"huggingface: EleutherAI/gpt-neo-1.3-125\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful music producer who discovered Rozzi and helped launch her career", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Feature Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts various features from a song such as tempo, beat, melody, and harmony.\\\", \\n\\\"function_name\\\": \\\"extract_song_features\\\", \\n\\\"input_args\\\": [\\\"song_path\\\"], \\n\\\"return\\\": \\\"A dictionary containing the extracted song features.\\\", \\n\\\"depend\\\": [\\\"librosa\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fisherman who supports the NGO's efforts and actively participates in clean-up activities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Marine Debris Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to record the location and type of marine debris they've cleaned up. The data is sent to the global marine debris database.\\\",\\n\\\"function_name\\\": \\\"record_marine_debris\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"debris_type\\\"],\\n\\\"return\\\": \\\"Response from the Marine Debris Tracker API\\\",\\n\\\"depend\\\": \\\"requests, Marine Debris Tracker API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Catholic nun who loves reading spiritual biographies.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"Fetch recommended books related to spiritual biographies from Goodreads\\\",\\n\\\"function_name\\\": \\\"get_book_recommendations\\\",\\n\\\"input_args\\\": \\\"keyword\\\",\\n\\\"return\\\": \\\"List of recommended spiritual biography books\\\",\\n\\\"depend\\\": \\\"Goodreads API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An IT project manager who needs to weigh the risks and benefits of implementing the researcher's alternative solutions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Project Risk-Benefit Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Monte Carlo simulation to perform a risk-benefit analysis for project solutions. It outputs a plot of the probable outcomes and a summary of the simulation results.\\\",\\n  \\\"function_name\\\": \\\"perform_monte_carlo_simulation\\\",\\n  \\\"input_args\\\": {\\n    \\\"risks\\\": \\\"A dictionary where keys are the potential risks (in monetary terms) and values are the respective probabilities.\\\",\\n    \\\"benefits\\\": \\\"A dictionary where keys are the potential benefits (in monetary terms) and values are the respective probabilities.\\\",\\n    \\\"num_simulations\\\": \\\"The number of simulations to run (default is 1000).\\\"\\n  },\\n  \\\"return\\\": \\\"A summary of the simulation results and a plot of the probable outcomes.\\\",\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"numpy\\\", \\\"pandas\\\", \\\"matplotlib\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A dedicated Japanese drama fan who meticulously records drama series details in a personal database.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Japanese Drama Information Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Jikan API to extract detailed information about a specific Japanese drama series. The user inputs the name of the drama series and the interface returns a dictionary containing details about the series such as episodes, duration, rating, and more.\\\",\\n\\\"function_name\\\": \\\"get_drama_details\\\",\\n\\\"input_args\\\": {\\n    \\\"drama_name\\\": \\\"string\\\"\\n},\\n\\\"return\\\": \\\"dictionary\\\",\\n\\\"depend\\\": \\\"Jikan API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A full-stack developer who relies on the Managed Databases service at this company for her projects.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Backup Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to backup their PostgreSQL databases by providing the database credentials and a location to save the backup file. It uses the psycopg2 library for connecting with the database and the os library for executing the shell command to create the backup.\\\",\\n\\\"function_name\\\": \\\"backup_database\\\",\\n\\\"input_args\\\": {\\n    \\\"host\\\": \\\"The host address of the database.\\\",\\n    \\\"database\\\": \\\"The name of the database.\\\",\\n    \\\"user\\\": \\\"The username for the database.\\\",\\n    \\\"password\\\": \\\"The password for the database.\\\",\\n    \\\"backup_file_path\\\": \\\"The path to save the backup file.\\\"\\n},\\n\\\"return\\\": \\\"The function doesn't return a value. It creates a backup file in the specified location if it executes without any error.\\\",\\n\\\"depend\\\": [\\\"psycopg2\\\", \\\"os\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young Peruvian woman who grew up watching Mariella Trejos in various telenovelas.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Telenovela Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a user's favorite actor or actress as input and returns a list of telenovelas featuring the given actor or actress.\\\",\\n\\\"function_name\\\": \\\"get_telenovela_recommendations\\\",\\n\\\"input_args\\\": \\\"favorite_actor\\\",\\n\\\"return\\\": \\\"List of telenovela names\\\",\\n\\\"depend\\\": \\\"Movie Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a public defender who works in the Middle District of Tennessee.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface uses a Named Entity Recognition (NER) model to extract entities (people, organizations, locations) from a legal document.\\\",\\n\\\"function_name\\\": \\\"extract_entities_from_legal_doc\\\",\\n\\\"input_args\\\": [\\\"document_text\\\"],\\n\\\"return\\\": \\\"A list of unique entities found in the document, each represented as a dictionary with the entity's text and its type (e.g., 'person', 'organization', 'location').\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library, pre-trained model: dbmdz/bert-large-cased-finetuned-conll03-english\\\"\\n}\"", "description": "tool development"}
{"input persona": "A puzzled newcomer to the field of nutrition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutrient Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the USDA FoodData Central API to obtain nutrient composition for a specified food item.\\\",\\n\\\"function_name\\\": \\\"get_nutrient_composition\\\",\\n\\\"input_args\\\": {\\n    \\\"food_name\\\": \\\"The name of the food item to get its nutrient composition\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with nutrient names as keys and corresponding quantities as values, or a message indicating no data available.\\\",\\n\\\"depend\\\": \\\"USDA FoodData Central API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A female professional wrestler from Brazil who has never competed in a global tournament before.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wrestler Match Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface returns the match statistics of a wrestler. It uses an API from a wrestling statistics provider.\\\",\\n\\\"function_name\\\": \\\"get_wrestler_statistics\\\",\\n\\\"input_args\\\": \\\"wrestler_name: The name of the wrestler\\\",\\n\\\"return\\\": \\\"A JSON object that contains the wrestler's match statistics, such as the number of matches won, lost, and drawn, as well as the total number of matches played.\\\",\\n\\\"depend\\\": \\\"requests library, Wrestling Statistics API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Criador de ovejas con experiencia y defensor de la conservación de razas raras", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sheep Wool Production Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the amount of wool a sheep will produce based on its race, age and weight. The interface uses a machine learning model trained on a dataset of sheep characteristics and wool production.\\\",\\n\\\"function_name\\\": \\\"predict_wool_production\\\",\\n\\\"input_args\\\": {\\\"race\\\": \\\"String representing the race of the sheep\\\", \\\"age\\\": \\\"Integer representing the age of the sheep in months\\\", \\\"weight\\\": \\\"Float representing the weight of the sheep in kilograms\\\"},\\n\\\"return\\\": \\\"Float representing the predicted amount of wool the sheep will produce in kilograms\\\",\\n\\\"depend\\\": \\\"tensorflow, numpy and a TensorFlow machine learning model trained to predict wool production from sheep characteristics\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mother of a recent college graduate who knows nothing about cars", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Car Maintenance Reminder\\\",\\n  \\\"description\\\": \\\"A tool to calculate the next date for a specific type of car maintenance based on the last maintenance date\\\",\\n  \\\"function_name\\\": \\\"calculate_next_maintenance\\\",\\n  \\\"input_args\\\": [\\\"last_maintenance_date\\\", \\\"maintenance_type\\\"],\\n  \\\"return\\\": \\\"The next date (in 'YYYY-MM-DD' format) when the specified maintenance should be performed, or an error message for an invalid maintenance type\\\",\\n  \\\"depend\\\": [\\\"datetime\\\"]\\n}\"", "description": "tool development"}
{"input persona": "我是一位西藏佛教文化的爱好者。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tibetan Mantras to Speech Interface\\\",\\n\\\"description\\\": \\\"An interface that converts Tibetan mantras text to speech using Google's Text-to-Speech API. It is helpful for those who are interested in Tibetan Buddhism and want to listen and learn Tibetan mantras.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"language_code\\\", \\\"gender\\\"],\\n\\\"return\\\": \\\"An audio content of the Tibetan mantra which can be saved as an MP3 file.\\\",\\n\\\"depend\\\": \\\"Google's Text-to-Speech API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former classmate, who was a non-expert at biology, but admired Rebecca's passion for her work and appreciated her friendship.", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides basic DNA sequence analysis including calculating GC content, finding complement and reverse complement of the sequence, and transcribing and translating the DNA sequence.\\\",\\n\\\"function_name\\\": \\\"dna_analysis\\\",\\n\\\"input_args\\\": {\\\"dna_sequence\\\": \\\"A string representing the DNA sequence.\\\"},\\n\\\"return\\\": {\\\"GC Content\\\": \\\"Number of G and C in the DNA sequence.\\\", \\\"Complement\\\": \\\"String representing the complement sequence of the input DNA.\\\", \\\"Reverse Complement\\\": \\\"String representing the reverse complement sequence of the input DNA.\\\", \\\"RNA Sequence\\\": \\\"String representing the transcribed RNA from the input DNA.\\\", \\\"Protein Sequence\\\": \\\"String representing the translated protein from the input DNA.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"Bio.Seq\\\", \\\"Bio.Alphabet\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a software engineer who prefers sequential task execution due to concerns of race conditions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Task Scheduler\\\",\\n\\\"description\\\": \\\"An interface that takes a list of tasks (functions) and runs them sequentially to prevent potential race conditions.\\\",\\n\\\"function_name\\\": \\\"run_in_sequence\\\",\\n\\\"input_args\\\": {\\n    \\\"task_list\\\": \\\"A list of functions (tasks) to execute in sequence.\\\"\\n},\\n\\\"return\\\": \\\"No return, functions in the task_list are executed in sequence.\\\",\\n\\\"depend\\\": \\\"Python's built-in multiprocessing library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fellow footballer who played together with Fabrice Guzel at FC Stade Nyonnais", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Player Career Statistic Interface\\\",\\n\\\"description\\\": \\\"This interface returns the career statistics of a given football player, including teams played for, matches, goals, and assists.\\\",\\n\\\"function_name\\\": \\\"get_player_career_stats\\\",\\n\\\"input_args\\\": \\\"player_name\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'teams', 'matches', 'goals', and 'assists', and their corresponding values\\\",\\n\\\"depend\\\": \\\"requests library, football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a non-profit organization director in Pascagoula", "synthesized text": "\"{\\n\\\"name\\\": \\\"Charity Donation Tracker\\\",\\n\\\"description\\\": \\\"This interface returns the total amount of donations received by a charity when given the charity's EIN.\\\",\\n\\\"function_name\\\": \\\"get_charity_donations\\\",\\n\\\"input_args\\\": {\\n    \\\"ein\\\": \\\"The Employer Identification Number of the charity.\\\"\\n    },\\n\\\"return\\\": \\\"The total amount of donations received by the charity.\\\",\\n\\\"depend\\\": \\\"Charity Navigator API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an experienced Spring Boot developer familiar with integrating Swagger", "synthesized text": "\"{\\n\\\"name\\\": \\\"Swagger Integration Interface\\\",\\n\\\"description\\\": \\\"This function automatically integrates Swagger into a Spring Boot project by adding the necessary dependencies and configuration files.\\\",\\n\\\"function_name\\\": \\\"integrate_swagger\\\",\\n\\\"input_args\\\": [\\\"project_path\\\"],\\n\\\"return\\\": \\\"A success message indicating that Swagger has been integrated into the project. You can then access the Swagger UI at http://localhost:8080/swagger-ui.html.\\\",\\n\\\"depend\\\": \\\"Python's built-in os library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A demographer who analyzes data to study the correlation between socioeconomic status and educational opportunities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Education and Socioeconomic Correlation Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a regression model to analyze the correlation between socioeconomic status and educational opportunities based on input CSV data.\\\",\\n\\\"function_name\\\": \\\"correlation_analysis\\\",\\n\\\"input_args\\\": {\\\"csv_file\\\": \\\"Path to the CSV file containing the data\\\"},\\n\\\"return\\\": \\\"Correlation coefficient indicating the relationship between income and education level\\\",\\n\\\"depend\\\": \\\"pandas, sklearn.linear_model.LinearRegression\\\"\\n}\"", "description": "tool development"}
{"input persona": "A straightforward and transparent salesperson who provides honest product information", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Details Fetching Interface\\\",\\n\\\"description\\\": \\\"Fetches and returns all relevant information about a product from a given product ID.\\\",\\n\\\"function_name\\\": \\\"get_product_details\\\",\\n\\\"input_args\\\": \\\"product_id\\\",\\n\\\"return\\\": \\\"A dictionary containing product information like Title, Price, Currency, Condition, Seller, and Location\\\",\\n\\\"depend\\\": \\\"requests, json, eBay API\\\"\\n}\"", "description": "tool development"}
{"input persona": "《ONE PIECE》的铁粉", "synthesized text": "\"{\\n\\\"name\\\": \\\"Anime Episode Summary Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Jikan API to fetch the summary of a specified episode of the anime 'One Piece'.\\\",\\n\\\"function_name\\\": \\\"get_one_piece_episode_summary\\\",\\n\\\"input_args\\\": \\\"episode_number - The number of the episode.\\\",\\n\\\"return\\\": \\\"A tuple representing the episode's English title, Japanese title, air date, whether it's a filler episode, whether it's a recap episode, the URL of the episode video, and the URL of the episode discussion forum.\\\",\\n\\\"depend\\\": \\\"Jikan API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Curioso aficionado pela ciência da propulsão", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Rocket Propulsion Simulation Interface\\\",\\n  \\\"description\\\": \\\"Computes propulsion characteristics for a given fuel and oxidizer using the pypropep library.\\\",\\n  \\\"function_name\\\": \\\"propulsion_characteristics\\\",\\n  \\\"input_args\\\": [\\\"fuel\\\", \\\"oxidizer\\\"],\\n  \\\"return\\\": \\\"A dictionary with the propulsion characteristics. This includes specific impulse (Isp), temperature (Tc), molecular weight (M), and composition (molecular_composition).\\\",\\n  \\\"depend\\\": [\\\"pypropep\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a local journalist in Odisha who used to write about the Odia television industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Rating Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a TV show as input and returns the average rating of the show from the TVMaze API.\\\",\\n\\\"function_name\\\": \\\"get_tv_show_rating\\\",\\n\\\"input_args\\\": \\\"show_name - string representing the name of the TV show\\\",\\n\\\"return\\\": \\\"float representing the average rating of the TV show\\\",\\n\\\"depend\\\": \\\"requests library, TVMaze API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a casual hitchhiker", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenRouteService's Directions API to calculate the most efficient route between multiple locations. The user inputs their current location and a list of locations they intend to visit, and the interface returns the most efficient route to visit all these locations.\\\",\\n\\\"function_name\\\": \\\"optimize_route\\\",\\n\\\"input_args\\\": [\\\"current_location\\\", \\\"locations\\\"],\\n\\\"return\\\": \\\"GeoJSON object representing the route\\\",\\n\\\"depend\\\": \\\"requests, geopy, OpenRouteService's Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A vendor representative who provides cost quotes and negotiates pricing for necessary resources", "synthesized text": "\"{\\n\\\"name\\\": \\\"Price Comparison and Negotiation Interface\\\",\\n\\\"description\\\": \\\"This interface uses web scraping to fetch prices of a given product from various e-commerce websites and uses the data to provide cost quotes and negotiate pricing.\\\",\\n\\\"function_name\\\": [\\\"get_product_prices\\\", \\\"negotiate_price\\\"],\\n\\\"input_args\\\": {\\n  \\\"get_product_prices\\\": [\\\"product_name\\\"],\\n  \\\"negotiate_price\\\": [\\\"product_name\\\", \\\"proposed_price\\\"]\\n},\\n\\\"return\\\": {\\n  \\\"get_product_prices\\\": \\\"Dictionary with website names as keys and respective prices as values.\\\",\\n  \\\"negotiate_price\\\": \\\"String suggesting whether the proposed price is good or if negotiation is required.\\\"\\n},\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries are used for web scraping.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Filipino consumer who regularly shops at Robinsons Retail stores", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to check the price of a product from the online store of Robinsons Retail.\\\",\\n\\\"function_name\\\": \\\"get_product_price\\\",\\n\\\"input_args\\\": [\\\"product_name\\\"],\\n\\\"return\\\": \\\"Price of the product or 'Product not found.' if the product does not exist.\\\",\\n\\\"depend\\\": [\\\"BeautifulSoup\\\", \\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Girl Scout Leader who cherishes each activity and experience.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Badge Earning Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface to keep track of the badges each Girl Scout has earned. Users can add new badges for a Girl Scout and retrieve all badges earned by a Girl Scout.\\\",\\n\\\"function_name\\\": [\\\"add_badge\\\", \\\"get_badges\\\"],\\n\\\"input_args\\\": [\\\"name\\\", \\\"badge\\\", \\\"date\\\"],\\n\\\"return\\\": [\\\"None (updates internal state)\\\", \\\"List of dictionaries representing each badge earned by a Girl Scout\\\"],\\n\\\"depend\\\": [\\\"Pandas library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A project manager who emphasizes the importance of well-documented code for a seamless collaborative development process", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Documentation Interface\\\",\\n\\\"description\\\": \\\"An interface that generates documentation for Python code using the 'pydoc' module. It takes as input the path to a Python script, and returns a formatted string of the documentation for all the classes, methods, and functions defined in that script.\\\",\\n\\\"function_name\\\": \\\"generate_code_documentation\\\",\\n\\\"input_args\\\": {\\n    \\\"script_path\\\": \\\"The path to the Python script to generate documentation for.\\\"\\n},\\n\\\"return\\\": \\\"A formatted string of the documentation for the provided Python script.\\\",\\n\\\"depend\\\": \\\"Python 'pydoc' module\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a Formula One enthusiast and have been following the championships for the last two decades.", "synthesized text": "\"{\\n\\\"name\\\": \\\"F1 Race Data Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface that provides specific data about a Formula One race, such as winning driver, fastest lap, total race time, etc. Users simply need to input the season and round number, and the interface will return the detailed race results.\\\",\\n\\\"function_name\\\": \\\"get_f1_race_data\\\",\\n\\\"input_args\\\": {\\\"season\\\": \\\"int\\\", \\\"round\\\": \\\"int\\\"},\\n\\\"return\\\": {\\\"race_name\\\": \\\"str\\\", \\\"circuit_name\\\": \\\"str\\\", \\\"date\\\": \\\"str\\\", \\\"winner\\\": \\\"str\\\", \\\"fastest_lap_time\\\": \\\"str\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Ergast Developer API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical representative who often does not see a need for large-scale public health measures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Interaction Checker Interface\\\",\\n\\\"description\\\": \\\"This interface uses the DrugBank API to check for interactions between two drugs. Users input the names of two drugs, and the interface returns the potential interactions between them.\\\",\\n\\\"function_name\\\": \\\"check_drug_interaction\\\",\\n\\\"input_args\\\": [\\\"drug1\\\", \\\"drug2\\\"],\\n\\\"return\\\": \\\"A list of potential interactions between the input drugs.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"DrugBank API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A dedicated Taylor Hicks fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Lyric Generation Interface\\\",\\n\\\"description\\\": \\\"Generate song lyrics based on a given theme using the GPT-3 model from HuggingFace.\\\",\\n\\\"function_name\\\": \\\"generate_song_lyrics\\\",\\n\\\"input_args\\\": \\\"theme\\\",\\n\\\"return\\\": \\\"A list of song lyrics inspired by the given theme.\\\",\\n\\\"depend\\\": \\\"Transformers library from HuggingFace\\\"\\n}\"", "description": "tool development"}
{"input persona": "A game modder who creates custom tracks and vehicles for racing simulations", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Custom Track Geometry Analyzer Interface\\\",\\n    \\\"description\\\": \\\"Analyzes the geometry of a custom track by loading an STL file and returning statistics about the model, including the number of vertices, the number of faces, and the overall size of the model.\\\",\\n    \\\"function_name\\\": \\\"analyze_track_geometry\\\",\\n    \\\"input_args\\\": {\\\"stl_path\\\": \\\"The path to the STL file for the custom track.\\\"},\\n    \\\"return\\\": {\\\"vertices\\\": \\\"The number of vertices in the model.\\\", \\\"faces\\\": \\\"The number of faces in the model.\\\", \\\"size\\\": \\\"The overall size of the model.\\\"},\\n    \\\"depend\\\": {\\\"python libraries\\\": [\\\"numpy-stl\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A hospitable Airbnb host who not only provides accommodation but also shares insider tips and recommendations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Restaurant Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get a list of local restaurants based on location and preferred cuisine. It uses the Yelp Fusion API to access information about restaurants.\\\",\\n\\\"function_name\\\": \\\"get_local_restaurants\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"cuisine\\\"],\\n\\\"return\\\": \\\"A list of top-rated local restaurants in the specified cuisine.\\\",\\n\\\"depend\\\": \\\"Yelp Fusion API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A financial planner who helps the mayor make strategic decisions to attract and retain snow equipment businesses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Snow Equipment Market Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes data from online marketplaces that sell snow equipment and analyzes the market by showing the average price of each item and a bar chart showing the distribution of prices.\\\",\\n\\\"function_name\\\": \\\"analyze_market\\\",\\n\\\"input_args\\\": \\\"urls - list of URLs from online marketplaces\\\",\\n\\\"return\\\": \\\"A pandas Series with the average price of each item, and a bar chart showing the distribution of prices.\\\",\\n\\\"depend\\\": \\\"BeautifulSoup, requests, pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A newly licensed pilot seeking guidance on navigating the aviation industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface that provides real-time weather data for a specified airport. Users only need to input the airport's ICAO code, and the interface will return the METAR weather report for the given airport.\\\",\\n\\\"function_name\\\": \\\"get_airport_weather\\\",\\n\\\"input_args\\\": \\\"icao_code: The four-letter ICAO code for the airport you want to fetch weather data for.\\\",\\n\\\"return\\\": \\\"Returns the METAR weather report for the specified airport, or an error message if the weather data could not be fetched.\\\",\\n\\\"depend\\\": \\\"This function leverages the AVWX (Aviation Weather) API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An author who brings the fascinating stories of Roman emperors to life through vibrant historical fiction", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface that converts input text into spoken text (speech), effectively creating an audiobook. The speech is saved as an mp3 file.\\\",\\n\\\"function_name\\\": \\\"convert_text_to_speech\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"string\\\", \\\"save_as\\\": \\\"string\\\", \\\"lang\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"gtts\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A pure-hearted teenager who dreams of dancing on Broadway", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dance Move Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface returns a sequence of dance moves that can be performed with a given piece of music.\\\",\\n\\\"function_name\\\": \\\"suggest_dance_moves\\\",\\n\\\"input_args\\\": \\\"path_to_music - Path to the music file for which the dance moves sequence is required\\\",\\n\\\"return\\\": \\\"A sequence of dance moves that can be performed with the music\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, dance-move-suggestion-model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A spokeswoman for the \"Don't Screen Us Out\" campaign", "synthesized text": "\"{\\n\\\"name\\\": \\\"Down Syndrome Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a trained RandomForestClassifier model to predict the probability of Down Syndrome in an unborn baby given certain medical measurements and blood test results.\\\",\\n\\\"function_name\\\": \\\"predict_down_syndrome\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_model\\\": \\\"The path to the trained RandomForestClassifier model.\\\",\\n    \\\"maternal_age\\\": \\\"The age of the mother.\\\",\\n    \\\"NT\\\": \\\"The Nuchal Translucency measurement.\\\",\\n    \\\"CRL\\\": \\\"The Crown Rump Length measurement.\\\",\\n    \\\"blood_test_results\\\": \\\"The results of the mother's blood test.\\\"\\n},\\n\\\"return\\\": \\\"The probability of the unborn baby having Down Syndrome.\\\",\\n\\\"depend\\\": \\\"This function depends on the sklearn.ensemble.RandomForestClassifier library and a trained RandomForestClassifier model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned JavaScript developer slightly skeptical of Dart's interoperation features", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dart to JavaScript Transpiler Interface\\\",\\n\\\"description\\\": \\\"This interface receives Dart code as input and returns the corresponding JavaScript code. It uses the dart2js tool from Dart SDK to transpile the Dart code.\\\",\\n\\\"function_name\\\": \\\"transpile_dart_to_js\\\",\\n\\\"input_args\\\": {\\n    \\\"dart_code\\\": \\\"A string containing Dart code\\\"\\n},\\n\\\"return\\\": \\\"A string of the corresponding JavaScript code\\\",\\n\\\"depend\\\": \\\"Dart SDK\\\"\\n}\"", "description": "tool development"}
{"input persona": "A well-respected sound therapist who has dedicated her life to studying the healing power of sound", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Frequency Analysis Interface\\\",\\n\\\"description\\\": \\\"Allows users to analyze the frequencies in a sound file. This could allow the sound therapist to understand the frequencies being used in a piece of music or a specific sound.\\\",\\n\\\"function_name\\\": \\\"get_sound_frequencies\\\",\\n\\\"input_args\\\": {\\\"sound_file_path\\\": \\\"The path to the sound file\\\"},\\n\\\"return\\\": \\\"A list of frequencies detected in the sound file\\\",\\n\\\"depend\\\": \\\"librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An engineer father, who believes in structured and disciplined upbringing, has a hard time understanding his child's behavioral issues", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Behavior Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Huggingface to predict and understand child behavior based on their activities, emotions, and interactions.\\\",\\n\\\"function_name\\\": \\\"analyze_child_behavior\\\",\\n\\\"input_args\\\": [\\\"activities\\\", \\\"emotions\\\", \\\"interactions\\\"],\\n\\\"return\\\": \\\"Child behavior analysis\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"transformers\\\"], \\\"models\\\": [\\\"cardiffnlp/twitter-roberta-base-behavior\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "The mother of Jaxon Thibeault", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Data Fetch Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and displays weather data for a given city using the OpenWeatherMap's API.\\\",\\n\\\"function_name\\\": \\\"get_weather\\\",\\n\\\"input_args\\\": [\\\"city\\\"],\\n\\\"return\\\": \\\"(main_weather, description, temp)\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"OpenWeatherMap's API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A chief investment officer who identifies investment strategies through analysis of financial trends and market activities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the symbol of a stock and returns the current trend of the stock based on its 50-day moving average.\\\",\\n\\\"function_name\\\": \\\"calculate_moving_average\\\",\\n\\\"input_args\\\": [\\\"symbol\\\"],\\n\\\"return\\\": \\\"A string indicating the trend of the stock ('Uptrend', 'Downtrend', or 'Sideways').\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"yfinance\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Ein Geschichtslehrer, der sich besonders für die Kolonialgeschichte interessiert.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historische Ereignisdaten-Schnittstelle\\\",\\n  \\\"description\\\": \\\"Eine Schnittstelle, die es Benutzern erm\\u00f6glicht, historische Ereignisse basierend auf einem bestimmten Jahr und/oder Ort abzurufen. Besonders n\\u00fctzlich f\\u00fcr Geschichtslehrer, die spezifische Ereignisse in bestimmten Jahren und Standorten untersuchen m\\u00f6chten.\\\",\\n  \\\"function_name\\\": \\\"get_historical_events\\\",\\n  \\\"input_args\\\": {\\n    \\\"year\\\": \\\"Das Jahr, in dem die Ereignisse stattgefunden haben.\\\",\\n    \\\"location\\\": \\\"Der Ort, an dem die Ereignisse stattgefunden haben.\\\"\\n  },\\n  \\\"return\\\": \\\"Eine Liste der Beschreibungen von Ereignissen, die in dem angegebenen Jahr und an dem angegebenen Ort stattgefunden haben.\\\",\\n  \\\"depend\\\": \\\"Nutzt die Web-API von datahub.io\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate theater actor from Vermont, familiar with the stories of Shakespeare's \"The Tempest\", fond of Native American culture, and longing to perform on the stage in New York City.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Shakespearean Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates modern English text into Shakespearean English, which could help users to better understand Shakespeare's plays and improve their performances.\\\",\\n\\\"function_name\\\": \\\"translate_to_shakespearean\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"The translated text in Shakespearean English.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A socialist historian from Oxford, England", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input a historical event, and it returns a summary of the event, key figures involved, and its impact on society.\\\",\\n\\\"function_name\\\": \\\"analyze_event\\\",\\n\\\"input_args\\\": {\\\"event\\\": \\\"type: str. A historical event.\\\"},\\n\\\"return\\\": \\\"type: dict. A dictionary containing a summary of the event, key figures involved, and a note on impact.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, nltk. Web APIs: Wikipedia API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mathematician and computer scientist with a particular interest in algorithmic bioinformatics and combinatorial enumeration.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Protein Sequence Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface takes a protein sequence as input, and returns a dictionary with the frequency of each amino acid in the sequence, the molecular weight of the protein, and the isoelectric point (pI).\\\",\\n\\\"function_name\\\": \\\"protein_analysis\\\",\\n\\\"input_args\\\": \\\"protein_sequence - a string representing a protein sequence\\\",\\n\\\"return\\\": \\\"a dictionary with keys 'amino_acid_frequency' (a dictionary with the frequency of each amino acid), 'molecular_weight' (a float representing the molecular weight of the protein), and 'isoelectric_point' (a float representing the isoelectric point of the protein).\\\",\\n\\\"depend\\\": \\\"Bio.SeqUtils.ProtParam from Biopython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Hollywood insider who doesn't believe in public apologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"DeepFake Video Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a deepfake video where a source image mimics the expressions and movements in a driving video.\\\",\\n\\\"function_name\\\": \\\"generate_deepfake\\\",\\n\\\"input_args\\\": [\\\"source_image_path\\\", \\\"driving_video_path\\\"],\\n\\\"return\\\": \\\"Path to the generated deepfake video.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"huggingface\\\", \\\"First Order Motion Model for Image Animation\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a Milanese dialect enthusiast", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Dialect Translation Interface\\\",\\n  \\\"description\\\": \\\"Translate standard Italian text into Milanese dialect using MarianMT model from Hugging Face\\\",\\n  \\\"function_name\\\": \\\"translate_to_milanese\\\",\\n  \\\"input_args\\\": \\\"text - a string in standard Italian\\\",\\n  \\\"return\\\": \\\"translated_text - a string translated into Milanese dialect\\\",\\n  \\\"depend\\\": \\\"Hugging Face's MarianMTModel, MarianTokenizer\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nuclear engineer fascinated by the intersections of science and public policy, particularly with LGBTQ+ rights activism.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Nuclear Power Plant Proximity Interface\\\",\\n  \\\"description\\\": \\\"Given the location of an LGBTQ+ rights activism event, return the nearby nuclear power plants. This could be relevant for public policy discussions involving the intersection of LGBTQ+ rights and nuclear energy.\\\",\\n  \\\"function_name\\\": \\\"get_nearby_nuclear_plants\\\",\\n  \\\"input_args\\\": [\\\"location\\\"],\\n  \\\"return\\\": [\\\"list of nearby nuclear power plants\\\"],\\n  \\\"depend\\\": [\\\"Google Places API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An electric user who is not familiar with the technical aspects of electrical regulation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Power Consumption Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates and visualizes the daily and monthly average power consumption from a CSV file containing records of daily power usage.\\\",\\n\\\"function_name\\\": \\\"calculate_power_consumption\\\",\\n\\\"input_args\\\": \\\"csv_file_path : A string representing the path to the CSV file\\\",\\n\\\"return\\\": \\\"A dictionary containing the average daily and monthly power consumption and a plot showing the power consumption trends over time\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A systems engineer constantly testing and improving the resilience of the company's network", "synthesized text": "\"{\\n\\\"name\\\": \\\"Network Latency Test Interface\\\",\\n\\\"description\\\": \\\"This interface measures the network latency by pinging a server and returning the delay in milliseconds.\\\",\\n\\\"function_name\\\": \\\"measure_network_latency\\\",\\n\\\"input_args\\\": [\\\"server\\\"],\\n\\\"return\\\": \\\"Latency in milliseconds or a message indicating that the server is unreachable or the request timed out.\\\",\\n\\\"depend\\\": \\\"ping3 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Anthropologie employee who helps customers find the perfect outfit based on the blogger's recommendations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Fashion Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface takes the path to a blogger's recommendation (image file), and returns a list of similar clothing items available in the store.\\\",\\n  \\\"function_name\\\": \\\"get_fashion_recommendation\\\",\\n  \\\"input_args\\\": {\\n    \\\"blogger_image_path\\\": \\\"The path to the image file of the blogger's recommended outfit\\\"\\n  },\\n  \\\"return\\\": \\\"A list of similar clothing items available in the store\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"keras\\\", \\\"cv2\\\", \\\"numpy\\\"],\\n    \\\"machine learning models\\\": [\\\"A pre-trained model for clothing attribute prediction and category prediction\\\"],\\n    \\\"other\\\": [\\\"The store's database and inventory system\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A materials scientist exploring new refining techniques to enhance the purity of silicon for photovoltaic applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Property Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to predict the properties of silicon based on the chemical composition and processing parameters. The input is a list of chemical compositions and processing parameters, and the output is a list of predicted properties.\\\",\\n\\\"function_name\\\": \\\"predict_silicon_properties\\\",\\n\\\"input_args\\\": {\\n    \\\"chemical_composition\\\": \\\"A list of chemical compositions. For example, [0.1, 0.2, 0.7] for a silicon sample containing 0.1% element A, 0.2% element B, and 0.7% silicon.\\\",\\n    \\\"processing_parameters\\\": \\\"A list of processing parameters. For example, [1200, 2] for a silicon sample processed at 1200 degrees Celsius for 2 hours.\\\"\\n},\\n\\\"return\\\": \\\"A list of predicted properties. For example, [100, 5000] for a silicon sample with a predicted hardness of 100 and a predicted tensile strength of 5000.\\\",\\n\\\"depend\\\": \\\"Python library: Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A video game developer seeking advice on how to optimize their game for different hardware platforms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hardware Profiling Interface\\\", \\n\\\"description\\\": \\\"An interface that profiles a video game's performance on different hardware configurations. It returns a report detailing the game's performance and areas for optimization.\\\", \\n\\\"function_name\\\": \\\"profile_game_performance\\\", \\n\\\"input_args\\\": [\\\"executable_path (string)\\\", \\\"hardware_info (dictionary)\\\"], \\n\\\"return\\\": \\\"DataFrame with game performance details and hardware info\\\", \\n\\\"depend\\\": [\\\"Python: os, subprocess, pandas, py-spy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A senior at Impinj HR department", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Scheduling Interview Interface\\\",\\n  \\\"description\\\": \\\"Interface to schedule interviews using Google Calendar API. It creates a calendar event and sends an invitation to the interviewee.\\\",\\n  \\\"function_name\\\": \\\"schedule_interview\\\",\\n  \\\"input_args\\\": {\\n    \\\"interviewee_name\\\": \\\"Name of the interviewee\\\",\\n    \\\"interviewee_email\\\": \\\"Email of the interviewee\\\",\\n    \\\"interview_date\\\": \\\"Date of the interview in 'yyyy-mm-dd' format\\\",\\n    \\\"interview_time\\\": \\\"Time of the interview in 'hh:mm:ss' format\\\"\\n  },\\n  \\\"return\\\": \\\"A string message confirming event creation with a link to the event\\\",\\n  \\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Um programador experiente especializado em aplicativos móveis com habilidades avançadas em notificações push", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Push Notification Interface\\\",\\n  \\\"description\\\": \\\"Interface para enviar notifica\\u00e7\\u00f5es push para um dispositivo espec\\u00edfico usando FCM\\\",\\n  \\\"function_name\\\": \\\"send_push_notification\\\",\\n  \\\"input_args\\\": [\\\"server_key\\\", \\\"device_token\\\", \\\"message_title\\\", \\\"message_body\\\"],\\n  \\\"return\\\": \\\"FCM response\\\",\\n  \\\"depend\\\": [\\\"PyFCM\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Another shop owner in the neighborhood who blames the rise in crime on the lack of opportunities for the youth", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Job Opportunities Search Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to search for job opportunities given a job title and location. It returns a list of job opportunities with details like company name, job type, description, application method, and company website.\\\",\\n  \\\"function_name\\\": \\\"get_job_opportunities\\\",\\n  \\\"input_args\\\": [\\\"job_title\\\", \\\"location\\\"],\\n  \\\"return\\\": \\\"List of job opportunities with details\\\",\\n  \\\"depend\\\": \\\"requests library, GitHub Jobs API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young daughter who eagerly awaits her father's return from each long-haul trip", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Tracking Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to input a flight number and receive real-time information about the flight, such as current status, departure time, arrival time, and delay status.\\\",\\n\\\"function_name\\\": \\\"get_flight_info\\\",\\n\\\"input_args\\\": \\\"flight_number\\\",\\n\\\"return\\\": \\\"A dictionary with real-time information about the flight, including current status, departure time, arrival time, and delay status.\\\",\\n\\\"depend\\\": \\\"Aviationstack API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former sniper who can navigate complex terrains with ease and precision", "synthesized text": "\"{\\n\\\"name\\\": \\\"Optimal Path Finding Interface\\\",\\n\\\"description\\\": \\\"An interface that finds the shortest path in a complex terrain. Users input their current location and destination, and the interface will return the optimal path to get there.\\\",\\n\\\"function_name\\\": \\\"find_optimal_path\\\",\\n\\\"input_args\\\": {\\n    \\\"terrain_matrix\\\": \\\"A 2D list of integers representing the elevation of each point in the terrain\\\",\\n    \\\"current_location\\\": \\\"A tuple representing the coordinates of the current location\\\",\\n    \\\"destination\\\": \\\"A tuple representing the coordinates of the destination\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples representing the coordinates of the optimal path\\\",\\n\\\"depend\\\": \\\"Leverages the Python NetworkX library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a French veterinarian who is an alumnus of the École nationale vétérinaire de Lyon.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Symptom Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to predict potential health issues in pets based on the symptoms described.\\\",\\n\\\"function_name\\\": \\\"analyze_pet_symptoms\\\",\\n\\\"input_args\\\": {\\n    \\\"symptoms\\\": \\\"A string describing the observed symptoms in the pet.\\\"\\n},\\n\\\"return\\\": \\\"A list of the most likely health issues based on the input symptoms.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library and the 'm3hrdadfi/bert-vet-predict' model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a devoted home brewer and proud Vienna native", "synthesized text": "\"{\\n\\\"name\\\": \\\"Beer Recipe Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a detailed beer recipe based on the input parameters such as desired beer style, target ABV (Alcohol By Volume), bitterness, and color.\\\",\\n\\\"function_name\\\": \\\"generate_beer_recipe\\\",\\n\\\"input_args\\\": \\\"style, target_abv, bitterness, color\\\",\\n\\\"return\\\": \\\"A detailed beer recipe.\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A YouTube content creator who shares their journey of sustainable agriculture and promotes the organic seed supplier's products", "synthesized text": "\"{\\n\\\"name\\\": \\\"YouTube Video Analytics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and returns the analytics details (views, likes, dislikes, comments) of a specific YouTube video.\\\",\\n\\\"function_name\\\": \\\"youtube_video_analytics\\\",\\n\\\"input_args\\\": \\\"video_id\\\",\\n\\\"return\\\": \\\"views, likes, dislikes, comments\\\",\\n\\\"depend\\\": \\\"YouTube Data API v3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data engineer who advocates for database redundancy as a necessary safeguard against data loss", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Redundancy Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks if two redundant databases are in sync by comparing the total number of rows in a specified table.\\\",\\n\\\"function_name\\\": \\\"check_database_redundancy\\\",\\n\\\"input_args\\\": [\\\"db1_conn_details\\\", \\\"db2_conn_details\\\", \\\"table_name\\\"],\\n\\\"return\\\": \\\"True if the databases are in sync, False otherwise.\\\",\\n\\\"depend\\\": \\\"psycopg2 library, PostgreSQL databases\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher developing secure communication protocols for transmitting sensitive medical data", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure File Transfer Interface\\\",\\n\\\"description\\\": \\\"This interface helps to securely transfer files from one location to another using encryption.\\\",\\n\\\"function_name\\\": \\\"secure_file_transfer\\\",\\n\\\"input_args\\\": [\\\"path_to_file\\\", \\\"dest_path\\\", \\\"key\\\"],\\n\\\"return\\\": \\\"None, but securely transfers and encrypts a file from the source to the destination\\\",\\n\\\"depend\\\": [\\\"Python's built-in os, cryptography.fernet, shutil libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired French pediatrician who was inspired by the work of colleagues in overseas territories", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disease Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from Hugging Face's Model Hub to predict diseases based on patient symptoms. The user inputs the symptoms in text format and the interface returns the top 3 predicted diseases.\\\",\\n\\\"function_name\\\": \\\"predict_disease\\\",\\n\\\"input_args\\\": {\\n    \\\"symptoms\\\": \\\"A string of text describing the patient's symptoms.\\\"\\n},\\n\\\"return\\\": \\\"A list of the top 3 predicted diseases.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Model Hub (microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a football commentator who idolizes AJ Swann", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Player Stats Interface\\\",\\n\\\"description\\\": \\\"This interface uses the 'API-FOOTBALL' API to fetch and return a football player's statistics. The user only needs to input the player's name.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": \\\"player_name\\\",\\n\\\"return\\\": \\\"A json object that contains the player's statistics.\\\",\\n\\\"depend\\\": \\\"requests library, RapidAPI's 'API-FOOTBALL' API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A community moderator who provides guidance and resources for beginners in distributed computing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Distributed Computing Simulator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the SimPy library to simulate a distributed computing environment and estimate the time to complete a task.\\\",\\n\\\"function_name\\\": \\\"distributed_computing_simulator\\\",\\n\\\"input_args\\\": {\\n    \\\"num_nodes\\\": \\\"The number of nodes in the distributed computing environment.\\\",\\n    \\\"proc_power\\\": \\\"The processing power of each node.\\\",\\n    \\\"task_size\\\": \\\"The size of the task to be completed.\\\"\\n},\\n\\\"return\\\": \\\"The estimated time to complete the task.\\\",\\n\\\"depend\\\": [\\\"SimPy library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A first-time voter excited about using the platform to learn about candidates and participate in the democratic process", "synthesized text": "\"{\\n\\\"name\\\": \\\"Candidate Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface uses the ProPublica Congress API to return relevant information about a candidate's voting records, bills sponsored, and committees.\\\",\\n\\\"function_name\\\": \\\"get_candidate_info\\\",\\n\\\"input_args\\\": {\\n    \\\"candidate_name\\\": \\\"The name or ID of the candidate (as recognized by the ProPublica Congress API).\\\"\\n},\\n\\\"return\\\": {\\n    \\\"name\\\": \\\"The full name of the candidate.\\\",\\n    \\\"party\\\": \\\"The candidate's party affiliation.\\\",\\n    \\\"state\\\": \\\"The state the candidate represents.\\\",\\n    \\\"district\\\": \\\"The district the candidate represents.\\\",\\n    \\\"seniority\\\": \\\"The candidate's seniority in Congress.\\\",\\n    \\\"votes_with_party_pct\\\": \\\"The percentage of times the candidate votes with their party.\\\",\\n    \\\"committees\\\": \\\"A list of committees that the candidate is a part of.\\\",\\n    \\\"bills_sponsored\\\": \\\"The number of bills the candidate has sponsored.\\\",\\n    \\\"bills_cosponsored\\\": \\\"The number of bills the candidate has cosponsored.\\\"\\n},\\n\\\"depend\\\": \\\"ProPublica Congress API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Texan father with a speech impediment, and his young child is benefiting from the Medicaid services.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medicaid Eligibility Check Interface\\\", \\n\\\"description\\\": \\\"This interface is designed to check the eligibility for Medicaid of a user by taking in their age, income and state of residence as inputs and returning their eligibility status.\\\", \\n\\\"function_name\\\": \\\"check_medicaid_eligibility\\\", \\n\\\"input_args\\\": {\\\"age\\\": \\\"Age of the user\\\", \\\"income\\\": \\\"Annual income of the user\\\", \\\"state\\\": \\\"State of residence of the user\\\"}, \\n\\\"return\\\": \\\"Returns either 'True' or 'False', indicating whether the user is eligible for Medicaid or not.\\\", \\n\\\"depend\\\": \\\"This relies on the Healthcare API from the federal database\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local paint shop owner who provides a wide range of high-quality paint options", "synthesized text": "\"{\\n\\\"name\\\": \\\"Paint Color Matching Interface\\\",\\n\\\"description\\\": \\\"This interface matches the paint color with the customer's sample. It takes in the image file paths of the paint sample and the customer's sample, compares them and returns the difference in color.\\\",\\n\\\"function_name\\\": \\\"calculate_color_difference\\\",\\n\\\"input_args\\\": [\\\"img1_path\\\", \\\"img2_path\\\"],\\n\\\"return\\\": \\\"A floating point number representing the color difference between the two images. The smaller the value, the closer the two images' colors are.\\\",\\n\\\"depend\\\": \\\"OpenCV library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer scientist specializing in data security who helps ensure the privacy and anonymity of research participants", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Pseudonymization Interface\\\",\\n  \\\"description\\\": \\\"An interface to pseudonymize personally identifiable information (PII) in a dataframe. All PII are replaced by fake but realistic data, maintaining the structure of the original data while ensuring privacy and anonymity.\\\",\\n  \\\"function_name\\\": \\\"pseudonymize_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"df\\\": \\\"A pandas DataFrame where each column represents a different type of PII.\\\"\\n  },\\n  \\\"return\\\": \\\"A pandas DataFrame with the same structure as the input, but all PII replaced by pseudonyms.\\\",\\n  \\\"depend\\\": \\\"Python library: faker, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A historian focusing on the impact of Celtic cultures in England's history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts text to speech. It's useful for users who want to listen to the contents of a document or book while they are busy doing other tasks.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": [\\\"input_text\\\", \\\"language\\\"],\\n\\\"return\\\": \\\"The name of the audio file that contains the spoken text.\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS) library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired member of the Maritime Security Response Team (MSRT)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Maritime Ship Tracking Interface\\\",\\n\\\"description\\\": \\\"An interface using the MarineTraffic API to track the current position of a ship based on its MMSI.\\\",\\n\\\"function_name\\\": \\\"get_ship_position\\\",\\n\\\"input_args\\\": {\\\"mmsi\\\": \\\"Unique identification number of the ship\\\"},\\n\\\"return\\\": {\\\"latitude\\\": \\\"Current latitude of the ship\\\", \\\"longitude\\\": \\\"Current longitude of the ship\\\"},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"MarineTraffic API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Bruce Miller's colleague and friend, also a soil scientist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Soil Type Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the soil type based on various environmental parameters using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_soil_type\\\",\\n\\\"input_args\\\": [\\\"temperature\\\", \\\"humidity\\\", \\\"pH\\\", \\\"rainfall\\\"],\\n\\\"return\\\": \\\"Predicted soil type ('Clay', 'Sandy', 'Silty', 'Peaty', 'Chalky', 'Loamy')\\\",\\n\\\"depend\\\": \\\"Pre-trained machine learning model (soil_type_prediction_model.pkl), Python libraries (pandas, numpy, sklearn)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An advertising executive experiencing stress from multitasking across different digital platforms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cross-Platform Task Automation Interface\\\",\\n\\\"description\\\": \\\"An interface to automate tasks across different digital platforms to reduce the stress from multitasking.\\\",\\n\\\"function_name\\\": \\\"automate_tasks\\\",\\n\\\"input_args\\\": {\\\"actions\\\": [{\\\"platform\\\": \\\"Google\\\", \\\"task\\\": \\\"Search 'Python'\\\", \\\"inputs\\\": []}, {\\\"platform\\\": \\\"Email\\\", \\\"task\\\": \\\"Send an update\\\", \\\"inputs\\\": [\\\"team@example.com\\\", \\\"The meeting is scheduled for tomorrow.\\\"] }]},\\n\\\"return\\\": \\\"The function has no return value. It performs the tasks as specified in the input.\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"selenium\\\", \\\"pyautogui\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A computer network specialist who can guide you through the setup process.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Network Configuration Interface\\\",\\n\\\"description\\\": \\\"This interface sets up a server socket that listens for incoming connections on the specified port.\\\",\\n\\\"function_name\\\": \\\"set_up_server\\\",\\n\\\"input_args\\\": {\\\"port\\\": \\\"The port on which to set up the server.\\\"},\\n\\\"return\\\": \\\"No return value; function runs indefinitely until manually stopped.\\\",\\n\\\"depend\\\": \\\"Python's built-in 'socket' library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a grumpy old man who moved from Eldon to Ottumwa, Iowa", "synthesized text": "\"{\\n \\\"name\\\": \\\"Weather Forecast Interface\\\",\\n \\\"description\\\": \\\"This interface provides current weather information for a given city. It uses the OpenWeatherMap API to retrieve the weather data.\\\",\\n \\\"function_name\\\": \\\"get_weather\\\",\\n \\\"input_args\\\": \\\"city - The name of the city for which to get the current weather information.\\\",\\n \\\"return\\\": \\\"A dictionary with keys 'main', 'description', and 'temperature' with corresponding weather information.\\\",\\n \\\"depend\\\": \\\"requests, json, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Father shares a spiritual journey with his children.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verse Suggestions Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of Bible verses related to a given topic, using the Bible API.\\\",\\n\\\"function_name\\\": \\\"get_bible_verses\\\",\\n\\\"input_args\\\": [\\\"topic\\\"],\\n\\\"return\\\": \\\"List of strings, each representing a Bible verse reference related to the topic\\\",\\n\\\"depend\\\": \\\"Python requests library, Bible API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An improv comedian who believes scripted comedy is less authentic", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Jokes Generation Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to generate a random programming joke.\\\",\\n  \\\"function_name\\\": \\\"generate_joke\\\",\\n  \\\"input_args\\\": [],\\n  \\\"return\\\": \\\"A string that contains a joke.\\\",\\n  \\\"depend\\\": \\\"Python library: PyJokes\\\"\\n}\"", "description": "tool development"}
{"input persona": "a next-door Iranian girl who has a curiosity about everything happening around", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Earthquake Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides real-time earthquake data. Users input the minimum magnitude of interest, and the interface returns the recent earthquakes above that magnitude.\\\",\\n\\\"function_name\\\": \\\"get_earthquake_info\\\",\\n\\\"input_args\\\": \\\"min_magnitude - a float representing the minimum magnitude of earthquakes of interest\\\",\\n\\\"return\\\": \\\"a list of dictionaries, each containing the location ('place') and magnitude ('magnitude') of an earthquake\\\",\\n\\\"depend\\\": \\\"requests library, USGS Earthquake Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young medical student awarded a research grant to further their studies in a specific area of medicine", "synthesized text": "\"{\\n\\\"name\\\": \\\"PubMed Article Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search for articles on PubMed by inputting keywords. It returns a list of article titles related to the search term.\\\",\\n\\\"function_name\\\": \\\"search_pubmed_articles\\\",\\n\\\"input_args\\\": {\\n    \\\"keyword\\\": \\\"string - the keyword to search for in the article titles\\\",\\n    \\\"max_results\\\": \\\"integer (optional) - the maximum number of results to return (default is 10)\\\"\\n},\\n\\\"return\\\": \\\"list - a list of article titles related to the search term\\\",\\n\\\"depend\\\": \\\"requests, xml.etree.ElementTree, PubMed API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a recently graduated job-seeker from the Czech Republic", "synthesized text": "\"{\\n\\\"name\\\": \\\"Resume Keyword Matcher Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a job description and a resume. It returns the matching keywords between the two.\\\",\\n\\\"function_name\\\": \\\"get_matching_keywords\\\",\\n\\\"input_args\\\": [\\\"job_description\\\", \\\"resume\\\"],\\n\\\"return\\\": \\\"List of matching keywords\\\",\\n\\\"depend\\\": \\\"Python's NLTK library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer developing an AI-powered platform to automate data analysis and forecasting for the mayor's office", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Data Forecasting Interface\\\",\\n  \\\"description\\\": \\\"Use Facebook's Prophet library to automate data analysis and forecasting. Users only need to input a CSV file containing the historical data, and our interface will return a forecast for the specified period.\\\",\\n  \\\"function_name\\\": \\\"generate_forecast\\\",\\n  \\\"input_args\\\": [\\\"file_path\\\", \\\"period\\\"],\\n  \\\"return\\\": \\\"DataFrame - forecasted value ('yhat'), as well as the lower and upper bounds of the forecast ('yhat_lower' and 'yhat_upper') for each period in the future.\\\",\\n  \\\"depend\\\": [\\\"pandas\\\", \\\"fbprophet\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An aspiring veterinarian shadowing the accomplished veterinarian to learn from their vast knowledge", "synthesized text": "\"{\\n\\\"name\\\": \\\"Veterinary Drug Dosage Calculator Interface\\\",\\n\\\"description\\\": \\\"Calculates the appropriate drug dosage based on the weight of an animal.\\\",\\n\\\"function_name\\\": \\\"calculate_drug_dosage\\\",\\n\\\"input_args\\\": [\\\"weight\\\", \\\"drug\\\"],\\n\\\"return\\\": \\\"Dosage of the drug for the given weight\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A brilliant mathematician who develops complex equations to explain celestial phenomena", "synthesized text": "\"{\\n\\\"name\\\": \\\"Equations to LaTeX Interface\\\",\\n\\\"description\\\": \\\"This interface takes a mathematical equation in python-friendly format as input and returns the LaTeX equivalent of the equation.\\\",\\n\\\"function_name\\\": \\\"equation_to_latex\\\",\\n\\\"input_args\\\": {\\\"equation\\\": \\\"a string representation of a mathematical equation\\\"},\\n\\\"return\\\": \\\"a string representing the LaTeX equivalent of the input equation\\\",\\n\\\"depend\\\": \\\"sympy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A homesteading blogger who teaches online courses on composting, canning, and other self-sufficiency skills", "synthesized text": "\"{\\n\\\"name\\\": \\\"Composting Guide Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search for information related to composting, such as 'composting for beginners', 'composting methods', etc. The interface uses Google Custom Search JSON API to return the top 5 results related to the keyword.\\\",\\n\\\"function_name\\\": \\\"get_composting_guides\\\",\\n\\\"input_args\\\": \\\"keyword\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing the title, description, and link of the top 5 search results.\\\",\\n\\\"depend\\\": \\\"python libraries: requests, beautifulsoup4; Web APIs: Google Custom Search JSON API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An amateur aquarist who owns a couple of tanks and enjoys having rare and exotic species", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fish Species Information Interface\\\",\\n\\\"description\\\": \\\"This interface returns detailed information about a fish species, including its taxonomy, habitat, diet, and more. The user inputs the species name of a fish.\\\",\\n\\\"function_name\\\": \\\"get_fish_info\\\",\\n\\\"input_args\\\": {\\\"species_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\n            \\\"Common name\\\": \\\"string\\\",\\n            \\\"Species\\\": \\\"string\\\",\\n            \\\"Genus\\\": \\\"string\\\",\\n            \\\"Family\\\": \\\"string\\\",\\n            \\\"Order\\\": \\\"string\\\",\\n            \\\"Class\\\": \\\"string\\\",\\n            \\\"Diet\\\": \\\"string\\\",\\n            \\\"Habitat\\\": \\\"string\\\",\\n            \\\"Max Length (cm)\\\": \\\"float\\\",\\n            \\\"Climate\\\": \\\"string\\\",\\n            \\\"Dangerous\\\": \\\"string\\\",\\n            \\\"Aquarium Fish\\\": \\\"string\\\"\\n        },\\n\\\"depend\\\": \\\"Fishbase API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer science student seeking guidance on .NET development and COM interop", "synthesized text": "\"{\\n  \\\"name\\\": \\\".NET COM Interop Interface\\\", \\n  \\\"description\\\": \\\"This interface provides functions to load .NET assemblies and call .NET methods from Python using Pythonnet.\\\", \\n  \\\"function_name\\\": [\\\"load_dotnet_assembly\\\", \\\"call_dotnet_method\\\", \\\"call_dotnet_instance_method\\\"], \\n  \\\"input_args\\\": [\\\"assembly_path\\\", \\\"method_name\\\", \\\"*args\\\", \\\"class_name\\\"], \\n  \\\"return\\\": \\\"Return value of the .NET method.\\\", \\n  \\\"depend\\\": \\\"Pythonnet\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a young woman who is aspiring to get into the film industry as a producer.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Film Budget Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the budget of a film given its genre, cast, and director.\\\",\\n  \\\"function_name\\\": \\\"predict_film_budget\\\",\\n  \\\"input_args\\\": [\\\"model\\\", \\\"genre\\\", \\\"cast\\\", \\\"director\\\"],\\n  \\\"return\\\": \\\"Estimated budget of the film.\\\",\\n  \\\"depend\\\": [\\\"Pandas\\\", \\\"Scikit-learn\\\", \\\"Pre-trained regression model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an overprotective parent", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Child Safe Content Filter Interface\\\",\\n  \\\"description\\\": \\\"This interface can filter out inappropriate content from a text using a list of filter words and a machine learning model to detect offensive language.\\\",\\n  \\\"function_name\\\": \\\"safe_content_filter\\\",\\n  \\\"input_args\\\": {\\n    \\\"text\\\": \\\"string - the text to be filtered\\\",\\n    \\\"file_path_to_filter_words\\\": \\\"string - the path to a file that contains a list of filter words\\\"\\n  },\\n  \\\"return\\\": \\\"string - the filtered text if it's not offensive, otherwise a warning message\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"nltk\\\", \\\"transformers\\\"],\\n    \\\"machine learning models\\\": [\\\"cardiffnlp/twitter-roberta-base-offensive\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a sergeant who worked at the same university police department with Michael S. Dorn", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Emergency Response Plan Interface\\\",\\n    \\\"description\\\": \\\"This interface helps users to summarize lengthy emergency response plans. Users only need to input the path to a text file, and our interface will return a summarized version of the text.\\\",\\n    \\\"function_name\\\": \\\"summarize_emergency_plan\\\",\\n    \\\"input_args\\\": \\\"path_to_text\\\",\\n    \\\"return\\\": \\\"summarized_plan\\\",\\n    \\\"depend\\\": \\\"Hugging Face Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former women's league player who successfully fought for equal pay during her career", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Gender Pay Gap Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface analyzes and visualizes the gender pay gap from a given dataset. The input is a CSV file containing 'gender' and 'pay' columns, and the output is a bar graph showing the average pay for each gender, along with a dictionary containing the average pay for each gender.\\\",\\n  \\\"function_name\\\": \\\"analyze_gender_pay_gap\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_csv\\\": \\\"Path to the CSV file\\\"\\n  },\\n  \\\"return\\\": \\\"A bar graph and a dictionary containing the average pay for each gender\\\",\\n  \\\"depend\\\": \\\"Pandas, Matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A philosopher pondering the philosophical implications of quantum mechanics on determinism and free will", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum State Vector Evolution Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to simulate the evolution of quantum state vectors, which can be helpful for understanding quantum mechanics and its implications on philosophical concepts like determinism and free will. It uses the QuTiP Python library to perform the simulations.\\\",\\n\\\"function_name\\\": \\\"evolve_quantum_state\\\",\\n\\\"input_args\\\": [\\\"t_initial\\\", \\\"t_final\\\", \\\"n_steps\\\", \\\"initial_state\\\", \\\"H\\\"],\\n\\\"return\\\": \\\"A list of QuTiP Qobj objects, each representing the state vector of the system at a particular time step.\\\",\\n\\\"depend\\\": [\\\"QuTiP (Quantum Toolbox in Python)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mining executive seeking advice on optimizing mineral extraction methods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mineral Extraction Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model to predict the most efficient mineral extraction method based on the input geological and mineralogical data.\\\",\\n\\\"function_name\\\": \\\"predict_extraction_method\\\",\\n\\\"input_args\\\": \\\"file_path (str): The path to a CSV file containing geological and mineralogical data of the mine.\\\",\\n\\\"return\\\": \\\"str: The predicted optimal mineral extraction method.\\\",\\n\\\"depend\\\": \\\"HuggingFace Transformers, Pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A walking encyclopedia of world geography who's working as a university library clerk", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Country Information Interface\\\",\\n  \\\"description\\\": \\\"This interface provides information about a country, including population, area, capital, region, flag, and languages spoken. The user only needs to provide the country's name.\\\",\\n  \\\"function_name\\\": \\\"get_country_info\\\",\\n  \\\"input_args\\\": [\\\"country_name\\\"],\\n  \\\"return\\\": \\\"A dictionary with keys 'name', 'population', 'area', 'capital', 'region', 'flag', 'languages', and their corresponding values.\\\",\\n  \\\"depend\\\": \\\"REST Countries API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm an artist and musician who was deeply influenced by the works and life of XXXTentacion. His music and personality spoke to me on very personal levels, so the entire case around his murder has been a point of deep sadness and reflection for me.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Feature Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the librosa library to extract various audio features from a given audio file. The extracted features include tempo, beat frames, Mel-frequency cepstral coefficients (mfccs), chroma_stft, and spectral contrast.\\\",\\n\\\"function_name\\\": \\\"extract_audio_features\\\",\\n\\\"input_args\\\": [\\\"audio_file_path\\\"],\\n\\\"return\\\": \\\"A dictionary of the extracted audio features. Each key in the dictionary represents a feature, and the corresponding value is the extracted feature from the audio file.\\\",\\n\\\"depend\\\": \\\"Librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a safety officer at a heavy manufacturing site in Canada", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Workplace Incident Report Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Natural Language Processing to simplify the process of categorizing and prioritizing incident reports in a workplace, specifically in a heavy manufacturing setting.\\\",\\n  \\\"function_name\\\": \\\"categorize_and_prioritize_incident\\\",\\n  \\\"input_args\\\": {\\n    \\\"report\\\": \\\"The text of the incident report\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"severity_level\\\": \\\"The severity level of the incident (High/Low)\\\",\\n    \\\"incident_category\\\": \\\"The category of the incident (Maintenance/Production/Quality Assurance/Safety/Security/Environment)\\\"\\n  },\\n  \\\"depend\\\": \\\"HuggingFace's transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A master of suspense who expertly crafts the pacing and timing of terrifying scenes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horror Scene Text Generation Interface\\\",\\n\\\"description\\\": \\\"This interface takes an initial scene setup as input and generates a suspenseful continuation of the scenario.\\\",\\n\\\"function_name\\\": \\\"generate_horror_scene\\\",\\n\\\"input_args\\\": {\\n    \\\"scene_setup\\\": \\\"A string containing the initial setup of the scene.\\\"\\n},\\n\\\"return\\\": \\\"A string containing the continuation of the scene with suspenseful elements.\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"transformers\\\"],\\n    \\\"machine learning models\\\": [\\\"GPT2LMHeadModel, GPT2Tokenizer from Huggingface\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A retired dentist from Muscatine, Iowa, who was Richard Burke's senior colleague before he joined the University of Iowa College of Dentistry.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dental Research Publication Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses PubMed API to fetch the list of publications for a given researcher and optional topic.\\\",\\n\\\"function_name\\\": \\\"get_publications_of_researcher\\\",\\n\\\"input_args\\\": [\\\"researcher_name\\\", \\\"topic\\\"],\\n\\\"return\\\": \\\"List of titles of the researcher's published works on the given topic\\\",\\n\\\"depend\\\": \\\"requests, xml.etree.ElementTree, PubMed API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A delivery driver who faces challenges navigating the neighborhood due to the poor infrastructure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Maps Directions API to find the shortest path from a starting location to an ending location, potentially with waypoints in between. The waypoints are optimized to provide the shortest overall path.\\\",\\n\\\"function_name\\\": \\\"optimize_route\\\",\\n\\\"input_args\\\": {\\\"start_location\\\": \\\"Start location as a string\\\", \\\"end_location\\\": \\\"End location as a string\\\", \\\"waypoints\\\": \\\"List of waypoints as strings (optional)\\\"},\\n\\\"return\\\": \\\"List of addresses in the order to be visited for shortest path\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned composer and lyricist who has won multiple Tony Awards", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Inspiration Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenAI's MuseNet to generate a complete composition based on a few bars of input melody. It's perfect for composers and lyricists looking for inspiration.\\\",\\n\\\"function_name\\\": \\\"generate_music\\\",\\n\\\"input_args\\\": [\\\"input_melody\\\"],\\n\\\"return\\\": \\\"A complete musical composition in text form.\\\",\\n\\\"depend\\\": [\\\"openai\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local astronomer organizing stargazing events for science enthusiasts", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Star Visibility Forecast Interface\\\",\\n  \\\"description\\\": \\\"An interface to forecast the visibility of stars, planets, and other celestial bodies on a given date and location.\\\",\\n  \\\"function_name\\\": \\\"get_star_visibility_forecast\\\",\\n  \\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\", \\\"date\\\"],\\n  \\\"return\\\": \\\"A dictionary where the keys are the names of the celestial bodies and the values are another dictionary with the magnitude of the body and the times of rise, transit, and set.\\\",\\n  \\\"depend\\\": \\\"Web API from the International Astronomical Union's Minor Planet Center\\\"\\n}\"", "description": "tool development"}
{"input persona": "A team of medical practitioners who are advocating for the use of renewable energy in healthcare", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Power Capacity Calculator\\\",\\n\\\"description\\\": \\\"This interface uses the pvlib python library to calculate the estimated power output of a solar panel in a specific location for the next 24 hours.\\\",\\n\\\"function_name\\\": \\\"calculate_solar_output\\\",\\n\\\"input_args\\\": {\\n    \\\"latitude\\\": \\\"The latitude of the location\\\",\\n    \\\"longitude\\\": \\\"The longitude of the location\\\",\\n    \\\"tilt\\\": \\\"The tilt of the solar panel\\\",\\n    \\\"azimuth\\\": \\\"The azimuth of the solar panel\\\"\\n    },\\n\\\"return\\\": \\\"The estimated power output of the solar panel in Wh\\\",\\n\\\"depend\\\": \\\"pvlib python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate social media activist who closely monitors and scrutinizes President Bush's every move", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitter Search Interface\\\",\\n\\\"description\\\": \\\"Fetches the latest tweets from a specific user.\\\",\\n\\\"function_name\\\": \\\"fetch_latest_tweets\\\",\\n\\\"input_args\\\": \\\"twitter_handle, count\\\",\\n\\\"return\\\": \\\"list of tweet texts\\\",\\n\\\"depend\\\": \\\"Tweepy library, Twitter API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An obstetrician who values data-driven improvements to patient care", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Pregnancy Progression Prediction Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to predict the progression of pregnancy and potential risks based on parameters such as patient's age, weight, health conditions.\\\",\\n  \\\"function_name\\\": \\\"predict_pregnancy_progression\\\",\\n  \\\"input_args\\\": [\\\"age\\\", \\\"weight\\\", \\\"health_conditions\\\"],\\n  \\\"return\\\": [\\\"progression\\\", \\\"risks\\\"],\\n  \\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"pre-trained model from TensorFlow Hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a junior staff member at Sarda Group", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sales Forecast Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that uses a Linear Regression model from the scikit-learn library to forecast future sales based on historical data.\\\",\\n\\\"function_name\\\": \\\"sales_forecast\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to a CSV file containing historical sales data. The file should contain at least two columns: 'date' and 'sales'.\\\"},\\n\\\"return\\\": \\\"A float value representing the forecasted sales for the next period.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"scikit-learn\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A local government official in Xi'an, responsible for international relations and foreign affairs.", "synthesized text": "\"{\\n\\\"name\\\": \\\"International Event Time Conversion Interface\\\",\\n\\\"description\\\": \\\"Converts the time of an international event to the local time in Xi'an\\\",\\n\\\"function_name\\\": \\\"convert_event_time\\\",\\n\\\"input_args\\\": [\\\"original_timezone\\\", \\\"original_time\\\", \\\"target_timezone\\\"],\\n\\\"return\\\": \\\"The local time in Xi'an when the event occurs\\\",\\n\\\"depend\\\": \\\"pytz library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A creative writing major fascinated by the potential of immersive storytelling through virtual reality", "synthesized text": "\"{\\n\\\"name\\\": \\\"VR Scene Creator Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to create simple 3D scenes by specifying objects and their positions in a 3D space.\\\",\\n\\\"function_name\\\": \\\"create_3d_scene\\\",\\n\\\"input_args\\\": [\\\"objects\\\"],\\n\\\"return\\\": \\\"A 3D scene displayed in a new window\\\",\\n\\\"depend\\\": [\\\"pygame\\\", \\\"OpenGL\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A PhD candidate researching the use of CRISPR technology for gene editing in agriculture", "synthesized text": "\"{\\n\\\"name\\\": \\\"CRISPR Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface finds the Protospacer Adjacent Motif (PAM) sequences in a given DNA sequence. PAM sequences are the target of the CRISPR-Cas9 system for gene editing.\\\",\\n\\\"function_name\\\": \\\"find_pam_sites\\\",\\n\\\"input_args\\\": {\\n    \\\"dna_sequence\\\": \\\"A string representing a DNA sequence. For example, 'ATGCGTAGCTAGG'.\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples where each tuple represents a PAM site. The first element of the tuple is the position of the PAM site and the second element is the PAM sequence. For example, [(3, 'NGG'), (8, 'CCN')].\\\",\\n\\\"depend\\\": \\\"This function depends on the Biopython library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A train driver who relies on the engineer's signaling system for safe navigation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Train Signal Alert Interface\\\",\\n\\\"description\\\": \\\"Interface to get the color and distance of the next train signal based on the current location (longitude and latitude).\\\",\\n\\\"function_name\\\": \\\"get_next_train_signal\\\",\\n\\\"input_args\\\": {\\n    \\\"current_location\\\": \\\"The current location of the train in the format 'longitude,latitude'\\\"\\n},\\n\\\"return\\\": {\\n    \\\"color\\\": \\\"The color of the next train signal.\\\",\\n    \\\"distance\\\": \\\"The distance to the next train signal in meters.\\\"\\n},\\n\\\"depend\\\": \\\"Web API that provides train signal information based on location\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local Monroe resident who took part in the fundraising efforts for the Stepney Heritage Trail", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trail Distance Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface to use Google Maps Distance Matrix API to calculate the distance between two points on a trail. Useful for informing potential donors about the length of the trail.\\\",\\n\\\"function_name\\\": \\\"calculate_trail_distance\\\",\\n\\\"input_args\\\": {\\\"start_location\\\": \\\"string\\\", \\\"end_location\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (distance in miles)\\\",\\n\\\"depend\\\": \\\"Google Maps Distance Matrix API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A travel blogging couple who have been to Saint Lucia before, and keep an eye on news from there.", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves top news headlines from a given country using the News API.\\\",\\n\\\"function_name\\\": \\\"get_top_headlines_from_country\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"list of top news headlines\\\",\\n\\\"depend\\\": \\\"News API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A master welder and metalworker who taught them the techniques of working with metal", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Metal Hardness Testing Interface\\\",\\n  \\\"description\\\": \\\"Predict the hardness of a metal based on its composition and treatment\\\",\\n  \\\"function_name\\\": \\\"predict_hardness\\\",\\n  \\\"input_args\\\": {\\n    \\\"metal_type\\\": \\\"string\\\",\\n    \\\"heat_treatment\\\": \\\"string\\\",\\n    \\\"cooling_rate\\\": \\\"float\\\"\\n  },\\n  \\\"return\\\": \\\"float (predicted hardness)\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pickle\\\", \\\"pandas\\\", \\\"sklearn.preprocessing.LabelEncoder\\\"],\\n    \\\"machine learning model\\\": [\\\"hardness_model.pkl (DecisionTreeRegressor)\\\"],\\n    \\\"label encoder\\\": [\\\"encoder.pkl (LabelEncoder)\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A senior engineer with years of experience in using differential equations for process optimization", "synthesized text": "\"{\\n\\\"name\\\": \\\"Numerical Differential Equation Solver Interface\\\",\\n\\\"description\\\": \\\"An interface to solve differential equations numerically. The user inputs the differential equation function, the time span and the initial conditions, and the interface returns the solution at each time step.\\\",\\n\\\"function_name\\\": \\\"differential_solver\\\",\\n\\\"input_args\\\": {\\n    \\\"dydt\\\": \\\"Function that represents the differential equation to solve\\\",\\n    \\\"t_span\\\": \\\"Two-element list or tuple that specifies the start and end time points for the integration\\\",\\n    \\\"y0\\\": \\\"List or numpy array that specifies the initial state\\\"\\n},\\n\\\"return\\\": \\\"Numpy array that represents the solution at each time step\\\",\\n\\\"depend\\\": \\\"Scipy's solve_ivp function\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer scientist specializing in numerical computations and offering insights on optimizing numerical precision in TensorFlow", "synthesized text": "\"{\\n\\\"name\\\": \\\"Floating Point Precision Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to set the global TensorFlow precision to optimize numerical computations.\\\",\\n\\\"function_name\\\": \\\"set_tf_precision\\\",\\n\\\"input_args\\\": {\\n    \\\"precision\\\": \\\"The desired precision for TensorFlow computations. Must be either 'float16', 'float32', or 'float64'.\\\"\\n},\\n\\\"return\\\": \\\"No return value. The function sets the global TensorFlow precision.\\\",\\n\\\"depend\\\": \\\"Python library: TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tax policy expert who believes that tax cuts disproportionately benefit the wealthy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tax Bracket Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to estimate the impact of specific tax policy changes on taxpayers in different income brackets.\\\",\\n\\\"function_name\\\": \\\"simulate_tax_policy\\\",\\n\\\"input_args\\\": {\\n    \\\"tax_policy\\\": \\\"A dictionary describing a specific tax policy change, in the format described in the taxcalc documentation.\\\"\\n},\\n\\\"return\\\": \\\"A table comparing the tax liabilities of taxpayers in different income brackets under the current and new tax policies.\\\",\\n\\\"depend\\\": \\\"taxcalc Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A police officer patrolling the area where the ex-convicts reside, maintaining a cooperative relationship with the probation officer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ex-Convict Monitoring Interface\\\",\\n\\\"description\\\": \\\"An interface that helps police officers monitor the activities of ex-convicts in a certain area by providing information on their recent locations and any related crime incidents in their area.\\\",\\n\\\"function_name\\\": \\\"monitor_ex_convict\\\",\\n\\\"input_args\\\": {\\n    \\\"ex_convict_id\\\": \\\"The ID or name of the ex-convict to be monitored\\\"\\n},\\n\\\"return\\\": {\\n    \\\"ex_convict_id\\\": \\\"The ID of the ex-convict\\\",\\n    \\\"location\\\": \\\"The recent location of the ex-convict\\\",\\n    \\\"local_crimes\\\": \\\"The list of recent crimes committed in the ex-convict's area\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"Geolocation API for ex-convict tracking\\\", \\\"Local Crime Data API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "An insomniac who often hears the faint sound of late-night radio shows through the walls", "synthesized text": "\"{\\n\\\"name\\\": \\\"Radio Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes radio shows or any audio files into text. It uses Google's Speech-to-Text service to perform the transcription.\\\",\\n\\\"function_name\\\": \\\"transcribe_radio_show\\\",\\n\\\"input_args\\\": [\\\"path_to_audio_file\\\"],\\n\\\"return\\\": \\\"Transcribed text of the audio file.\\\",\\n\\\"depend\\\": [\\\"SpeechRecognition library\\\", \\\"Google's Speech-to-Text API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A contemporary British glass artist specialized in the ancient technique of stained glass.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stained Glass Pattern Generation Interface\\\",\\n\\\"description\\\": \\\"Generates a unique design for a stained glass pattern based on the input color scheme and dimensions.\\\",\\n\\\"function_name\\\": \\\"generate_stained_glass_pattern\\\",\\n\\\"input_args\\\": {\\n    \\\"color_scheme\\\": \\\"A list of colors to be used in the pattern.\\\",\\n    \\\"width\\\": \\\"The desired width of the pattern in pixels.\\\",\\n    \\\"height\\\": \\\"The desired height of the pattern in pixels.\\\"\\n},\\n\\\"return\\\": \\\"A NumPy array representing the generated stained glass pattern.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired electronics engineer who was a contemporary of Daniel McCaughan", "synthesized text": "\"{\\n\\\"name\\\": \\\"RF Signal Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface performs a Fast Fourier Transform (FFT) on a signal to convert it from the time domain to the frequency domain.\\\",\\n\\\"function_name\\\": \\\"calculate_fft\\\",\\n\\\"input_args\\\": {\\\"filepath\\\": \\\"a string representing the path to a CSV file containing time series data of the signal.\\\"},\\n\\\"return\\\": {\\\"xf\\\": \\\"a numpy array containing the frequency bins.\\\", \\\"yf\\\": \\\"a numpy array containing the amplitude of the signal at each frequency bin.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"scipy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A travel agent interested in selling Caribbean holidays", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Price Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the best flight prices for a given route and departure date using the Skyscanner API.\\\",\\n\\\"function_name\\\": \\\"get_best_flight_price\\\",\\n\\\"input_args\\\": {\\n    \\\"departure\\\": \\\"the departure location (airport code)\\\",\\n    \\\"destination\\\": \\\"the destination location (airport code)\\\",\\n    \\\"departure_date\\\": \\\"the departure date (YYYY-MM-DD format)\\\"\\n},\\n\\\"return\\\": \\\"The minimum flight price for the given route and date.\\\",\\n\\\"depend\\\": \\\"requests, Skyscanner API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cautious relative who worries about the traveler's safety and constantly reminds them to be careful", "synthesized text": "\"{\\n\\\"name\\\": \\\"Travel Safety Advice Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the current travel advisory for a specific country. It takes the country name as input and returns the safety rating and a brief description of the current situation.\\\",\\n\\\"function_name\\\": \\\"get_travel_advisory\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"{rating: float, description: string}\\\",\\n\\\"depend\\\": \\\"Travel Advisory API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local IT consulting firm offering similar solutions and targeting the same customer base", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitor Analysis Interface\\\",\\n\\\"description\\\": \\\"Scrapes information about a competitor from their website\\\",\\n\\\"function_name\\\": \\\"scrape_competitor_information\\\",\\n\\\"input_args\\\": [\\\"competitor_url\\\"],\\n\\\"return\\\": \\\"Dictionary containing competitor's services, target markets, pricing, strengths, and weaknesses\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Dr. Sophia Lee, a distinguished economist who has published extensively on fiscal policy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Indicator Forecasting Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Prophet library from Facebook to forecast economic indicators based on historical data.\\\",\\n\\\"function_name\\\": \\\"forecast_economic_indicator\\\",\\n\\\"input_args\\\": [\\\"data_file\\\", \\\"period\\\"],\\n\\\"return\\\": \\\"A DataFrame with the forecasted values and their bounds for the specified period.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"fbprophet\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired Olympic swimmer from Hong Kong who has a deep affection for his country and is very excited about the performance of the Hong Kong team at the World Aquatics Championships.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sport Results Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface uses TheSportsDB API to get the latest results for a specified team from the World Aquatics Championships.\\\",\\n\\\"function_name\\\": \\\"get_latest_results\\\",\\n\\\"input_args\\\": [\\\"team\\\"],\\n\\\"return\\\": \\\"The latest results of the specified team in the World Aquatics Championships.\\\",\\n\\\"depend\\\": \\\"TheSportsDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a casual user who is interested in learning about SOAP and WSDL", "synthesized text": "\"{\\n\\\"name\\\": \\\"WSDL Viewer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to view and understand WSDL files more easily by converting them into a more readable format.\\\",\\n\\\"function_name\\\": \\\"wsdl_viewer\\\",\\n\\\"input_args\\\": [\\\"wsdl_url\\\"],\\n\\\"return\\\": \\\"A string representation of the prettified WSDL file.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"bs4\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An environmental education specialist organizing workshops to raise awareness about genetic diversity in endangered species", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Species Genetic Diversity Information Interface\\\",\\n  \\\"description\\\": \\\"An interface that fetches and provides the genetic diversity information for a given species using the Encyclopedia of Life (EOL) API.\\\",\\n  \\\"function_name\\\": \\\"fetch_species_genetic_info\\\",\\n  \\\"input_args\\\": \\\"species_name - The name of the species whose genetic diversity information is to be fetched\\\",\\n  \\\"return\\\": \\\"The genetic diversity information for the given species or a message saying 'Species not found' or 'No genetic diversity information found for this species'\\\",\\n  \\\"depend\\\": \\\"requests library, EOL API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An adult daughter often struggles with guilt about not being able to personally provide for her aging mom's needs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health Monitoring Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch health data of an elderly person using Fitbit API. The data includes heart rate, sleep patterns, and activity data.\\\",\\n\\\"function_name\\\": \\\"fetch_fitbit_data\\\",\\n\\\"input_args\\\": {\\\"user_id\\\": \\\"Fitbit user id of the elderly person\\\", \\\"user_token\\\": \\\"User token to access Fitbit API\\\"},\\n\\\"return\\\": {\\\"heart_rate\\\": \\\"Average heart rate of the day\\\", \\\"sleep_data\\\": \\\"Sleep data of the day\\\"},\\n\\\"depend\\\": [\\\"Fitbit Web API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow wrap artist in a different city who shares their love for vintage themes and provides inspiration", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vintage Theme Song Recommender Interface\\\",\\n\\\"description\\\": \\\"This interface uses Spotify's Web API to fetch songs that fit into a vintage theme. Based on a given artist, it fetches their top tracks, analyzes the genre and mood of these tracks, and then recommends similar vintage-themed songs.\\\",\\n\\\"function_name\\\": \\\"get_vintage_theme_song_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"artist_name\\\": \\\"string\\\"\\n},\\n\\\"return\\\": {\\n    \\\"vintage_songs\\\": \\\"list of strings\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"spotipy\\\"],\\n    \\\"Web APIs\\\": [\\\"Spotify Web API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A software engineer in a developed country who regularly sends money back to their family in their home country", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion and Transaction Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the current exchange rate from Open Exchange Rates API, converts the provided amount from the sender's currency to the recipient's currency, and then sends the converted amount via PayPal.\\\",\\n\\\"function_name\\\": \\\"send_money\\\",\\n\\\"input_args\\\": \\\"amount - The amount to be sent in the sender's currency, recipient_email - The email ID of the recipient, from_currency - The currency of the sender, to_currency - The currency of the recipient\\\",\\n\\\"return\\\": \\\"This function prints the success or failure status of the payment creation. If successful, it also provides a redirect URL for approval.\\\",\\n\\\"depend\\\": \\\"This function uses the Open Exchange Rates API to get the current exchange rates and the PayPal REST SDK to create and send the payment.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud Faroese citizen who admired Páll Vang", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image to Paper Cut Art Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model to convert images into stylized versions resembling paper cut art. The user only needs to provide the path to an image file.\\\",\\n\\\"function_name\\\": \\\"image_to_paper_cut_art\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"A stylized version of the input image resembling paper cut art\\\",\\n\\\"depend\\\": \\\"PyTorch, torchvision, PIL\\\"\\n}\"", "description": "tool development"}
{"input persona": "A criminal lawyer who looks for inspiration from successful lawyers in history.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Case Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get details of a successful case of a given lawyer using CourtListener API\\\",\\n\\\"function_name\\\": \\\"get_successful_case\\\",\\n\\\"input_args\\\": [\\\"lawyer_name\\\"],\\n\\\"return\\\": {\\\"Case Name\\\": \\\"string\\\", \\\"Case Date\\\": \\\"string\\\", \\\"Court\\\": \\\"string\\\", \\\"Opinion\\\": \\\"string\\\", \\\"Judge\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"CourtListener API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hospitality professional who understands the importance of hosting successful sports events and works closely with the journalist and store owner to ensure a seamless experience for athletes and fans", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Weather Forecast Interface\\\", \\n\\\"description\\\": \\\"This interface provides weather forecast for a specified location and date, useful for event organizers and hospitality professionals hosting outdoor sports events.\\\", \\n\\\"function_name\\\": \\\"get_event_weather_forecast\\\", \\n\\\"input_args\\\": [\\\"location\\\", \\\"event_date\\\"], \\n\\\"return\\\": \\\"Weather forecast for the specified date and location.\\\", \\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a legal immigrant and professional who moved to the United States 5 years ago", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Proficiency Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface corrects the grammatical errors in the input text and provides a proficiency score for the corrected English text.\\\",\\n\\\"function_name\\\": \\\"correct_and_score_english\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": {\\\"corrected_text\\\": \\\"string\\\", \\\"proficiency_score\\\": \\\"float\\\"},\\n\\\"depend\\\": {\\\"python_libraries\\\": [\\\"torch\\\", \\\"transformers\\\"], \\\"machine_learning_models\\\": [\\\"bert-base-uncorrected\\\", \\\"proficiency_model.pth\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a Victorian farmer dealing with water shortage issues", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast and Rainfall Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface provides a detailed weather forecast and rainfall prediction for a given location using the OpenWeatherMap API.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": \\\"location - a string representing the user's current location\\\",\\n\\\"return\\\": \\\"A list of tuples, where each tuple consists of a timestamp and the predicted rainfall in millimeters for that time.\\\",\\n\\\"depend\\\": \\\"Requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a nostalgic Russian cinematographer who worked on some of the films from 1997", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Metadata Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface fetches metadata of a movie from the Open Movie Database (OMDb) using the movie title as input.\\\",\\n\\\"function_name\\\": \\\"get_movie_metadata\\\",\\n\\\"input_args\\\": {\\\"movie_title\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"Title\\\": \\\"string\\\", \\\"Year\\\": \\\"string\\\", \\\"Rated\\\": \\\"string\\\", \\\"Released\\\": \\\"string\\\", \\\"Runtime\\\": \\\"string\\\", \\\"Genre\\\": \\\"string\\\", \\\"Director\\\": \\\"string\\\", \\\"Writer\\\": \\\"string\\\", \\\"Actors\\\": \\\"string\\\", \\\"Plot\\\": \\\"string\\\", \\\"Language\\\": \\\"string\\\", \\\"Country\\\": \\\"string\\\", \\\"Awards\\\": \\\"string\\\", \\\"Poster\\\": \\\"string\\\", \\\"Ratings\\\": \\\"list\\\", \\\"Metascore\\\": \\\"string\\\", \\\"imdbRating\\\": \\\"string\\\", \\\"imdbVotes\\\": \\\"string\\\", \\\"imdbID\\\": \\\"string\\\", \\\"Type\\\": \\\"string\\\", \\\"DVD\\\": \\\"string\\\", \\\"BoxOffice\\\": \\\"string\\\", \\\"Production\\\": \\\"string\\\", \\\"Website\\\": \\\"string\\\", \\\"Response\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python library\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Open Movie Database (OMDb) API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A technology company CEO looking to build a futuristic headquarters that showcases the fusion of mathematics and architecture", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Geometry Visualizer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to generate a 3D visualization of a shape defined by a mathematical function. The user inputs a function and the range of x, y, and z coordinates, and the interface outputs a 3D visualization of the shape.\\\",\\n\\\"function_name\\\": \\\"generate_3d_geometry\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"func\\\": \\\"A Python function that takes two arguments (x and y coordinates) and outputs a z coordinate\\\",\\n    \\\"x_range\\\": \\\"A tuple defining the range of x coordinates\\\",\\n    \\\"y_range\\\": \\\"A tuple defining the range of y coordinates\\\",\\n    \\\"z_range\\\": \\\"A tuple defining the range of z coordinates\\\"\\n    },\\n\\\"return\\\": \\\"A 3D visualization of the shape defined by the input function\\\",\\n\\\"depend\\\": \\\"Python libraries: numpy, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A South African sports journalist who is both passionate about cricket and critical of the ICC’s decision regarding the World Cup host's qualification.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cricket Match Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a cricket team name and a date range as input and returns a visual summary of that team's performance during that period.\\\",\\n\\\"function_name\\\": \\\"plot_team_performance\\\",\\n\\\"input_args\\\": [\\\"team\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"A bar chart showing the cricket team's performance in terms of matches played, wins, losses, draws, average runs scored, and average runs conceded.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"requests\\\", \\\"matplotlib.pyplot\\\"], \\\"web_apis\\\": [\\\"ESPN Cricinfo Statsguru\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a longtime competitor in the field of residential technology distribution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Smart Home Device Compatibility Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks the compatibility of two smart home devices. It uses a hypothetical API from smart home device manufacturers.\\\",\\n\\\"function_name\\\": \\\"check_device_compatibility\\\",\\n\\\"input_args\\\": [\\\"device1\\\", \\\"device2\\\"],\\n\\\"return\\\": \\\"Boolean value indicating whether the two input devices are compatible.\\\",\\n\\\"depend\\\": \\\"requests library, Smart home device manufacturer's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A University of Houston-Downtown graduate, cheering for Sheretta West's success.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the stock market prices for a given stock symbol and date range using a pre-trained neural network model.\\\",\\n  \\\"function_name\\\": \\\"predict_stock_price\\\",\\n  \\\"input_args\\\": {\\n    \\\"stock_symbol\\\": \\\"The stock symbol to predict prices for.\\\",\\n    \\\"start_date\\\": \\\"Start date of the date range.\\\",\\n    \\\"end_date\\\": \\\"End date of the date range.\\\"\\n  },\\n  \\\"return\\\": \\\"A numpy array of predicted stock prices.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas_datareader\\\", \\\"tensorflow\\\", \\\"sklearn\\\"],\\n    \\\"pre-trained model\\\": \\\"pretrained_model.h5\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "I am a detective who prides themselves on their privacy and has no personal social media accounts.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Social Media Mentions Tracker\\\",\\n  \\\"description\\\": \\\"Track mentions of a keyword on Twitter\\\",\\n  \\\"function_name\\\": \\\"track_mentions\\\",\\n  \\\"input_args\\\": [\\\"keyword\\\", \\\"count\\\"],\\n  \\\"return\\\": \\\"List of dictionaries where each dictionary contains the screen name of the user who posted the tweet and the text of the tweet\\\",\\n  \\\"depend\\\": [\\\"tweepy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A curious teenager learning the basics of plumbing from their retired grandparent", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pipe Diameter Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the diameter of a pipe given its circumference. Useful for basic plumbing tasks.\\\",\\n\\\"function_name\\\": \\\"calculate_pipe_diameter\\\",\\n\\\"input_args\\\": {\\n    \\\"circumference\\\": \\\"The circumference of the pipe. This should be a numeric value.\\\"\\n},\\n\\\"return\\\": \\\"The diameter of the pipe as a numeric value.\\\",\\n\\\"depend\\\": \\\"python standard math library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A foreign graduate student pursuing a degree in a scientific field, facing challenges due to immigration restrictions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Paper Summarization Interface\\\",\\n\\\"description\\\": \\\"This interface takes the URL of a scientific paper and returns a summarized version of the paper.\\\",\\n\\\"function_name\\\": \\\"summarize_scientific_paper\\\",\\n\\\"input_args\\\": \\\"url\\\",\\n\\\"return\\\": \\\"a summarized version of the scientific paper\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers, BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aerospace engineer moonlighting as a writer, contributing technical knowledge to the narratives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rocket Trajectory Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simulates and visualizes the trajectory of a rocket given specific initial conditions such as initial velocity, launch angle, and rocket mass.\\\",\\n\\\"function_name\\\": \\\"plot_rocket_trajectory\\\",\\n\\\"input_args\\\": {\\n    \\\"v0\\\": \\\"The initial velocity of the rocket (m/s).\\\",\\n    \\\"theta0\\\": \\\"The initial launch angle of the rocket (degrees).\\\",\\n    \\\"m\\\": \\\"The mass of the rocket (kg).\\\"\\n    },\\n\\\"return\\\": \\\"A plot showing the trajectory of the rocket.\\\",\\n\\\"depend\\\": \\\"Python libraries: matplotlib, numpy, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A close friend of Keith Roland Matthews, who also specializes in biology and disease control", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Disease Outbreak Information Interface\\\",\\n  \\\"description\\\": \\\"Fetches the latest information about disease outbreaks worldwide.\\\",\\n  \\\"function_name\\\": \\\"get_disease_outbreak_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"disease_name\\\": \\\"The name of the disease.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"disease\\\": \\\"The name of the disease.\\\",\\n    \\\"totalCases\\\": \\\"The total number of reported cases.\\\",\\n    \\\"totalDeaths\\\": \\\"The total number of deaths.\\\",\\n    \\\"totalRecovered\\\": \\\"The total number of recovered patients.\\\",\\n    \\\"updatedAt\\\": \\\"The date and time when the data was last updated.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\"],\\n    \\\"web_APIs\\\": [\\\"Disease.sh API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "an undergraduate biology major preparing for an internship interview at National Cancer Institute's Center for Cancer Research", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze DNA sequences, providing basic statistics and transcription.\\\",\\n\\\"function_name\\\": \\\"analyze_dna_sequence\\\",\\n\\\"input_args\\\": \\\"dna_sequence - a string representing the DNA sequence\\\",\\n\\\"return\\\": \\\"a dictionary with keys 'Length', 'GC Content', and 'Transcription', representing the length of the sequence, its GC content, and its transcription respectively\\\",\\n\\\"depend\\\": \\\"Biopython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nutrition scientist evaluating the biochemist's research proposal for funding", "synthesized text": "\"{\\n\\\"name\\\": \\\"Protein Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"Given a protein sequence, retrieve and analyze various properties of the protein, such as molecular weight, aromaticity, instability index and more.\\\",\\n\\\"function_name\\\": \\\"analyze_protein_sequence\\\",\\n\\\"input_args\\\": \\\"protein_sequence - A string representing the protein sequence\\\",\\n\\\"return\\\": \\\"A dictionary with keys as property names and values as the corresponding property values of the protein\\\",\\n\\\"depend\\\": \\\"Biopython, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data scientist fascinated by the application of quantitative methods in finance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price Prediction Interface\\\", \\n\\\"description\\\": \\\"This interface predicts the closing stock prices for the next 5 days using Facebook's Prophet package.\\\", \\n\\\"function_name\\\": \\\"predict_stock_prices\\\", \\n\\\"input_args\\\": \\\"ticker_symbol - the ticker symbol for a company\\\", \\n\\\"return\\\": \\\"A dataframe with the predicted closing prices for the next 5 days, along with the upper and lower bound of the prediction.\\\", \\n\\\"depend\\\": \\\"yfinance library to fetch the historical stock prices, fbprophet library for time-series forecasting.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A startup founder looking to build a cross-platform application using wxWidgets", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cross-Platform App Creation Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of creating a cross-platform application window using wxPython, a wrapper for wxWidgets in Python. The user only needs to provide the title of the window and its dimensions.\\\",\\n\\\"function_name\\\": \\\"create_cross_platform_window\\\",\\n\\\"input_args\\\": {\\n    \\\"title\\\": \\\"The title of the window\\\",\\n    \\\"width\\\": \\\"The width of the window\\\",\\n    \\\"height\\\": \\\"The height of the window\\\"\\n},\\n\\\"return\\\": \\\"None (The function will open a new window with the specified title and dimensions)\\\",\\n\\\"depend\\\": \\\"wxPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a die-hard stand-up comedy fan who's been eagerly waiting for a chance to see Trevor Noah live", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Comedy Show Search Interface\\\",\\n  \\\"description\\\": \\\"An interface for users to find upcoming shows for a specific comedian. The user only needs to input the comedian's name and the interface will return a list of upcoming shows.\\\",\\n  \\\"function_name\\\": \\\"get_upcoming_shows\\\",\\n  \\\"input_args\\\": [\\\"comedian_name\\\"],\\n  \\\"return\\\": \\\"List of dictionaries. Each dictionary contains the name of the show, the date and time of the show, and the venue of the show.\\\",\\n  \\\"depend\\\": \\\"TicketMaster API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A baseball coach who teaches young athletes the fundamentals of the game", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pitch Speed Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses computer vision techniques to estimate the speed of a baseball pitch from a video recording.\\\",\\n\\\"function_name\\\": \\\"calculate_pitch_speed\\\",\\n\\\"input_args\\\": [\\\"video_file\\\", \\\"frame_rate\\\", \\\"distance\\\"],\\n\\\"return\\\": \\\"The estimated speed of the pitch in miles per hour.\\\",\\n\\\"depend\\\": \\\"OpenCV, NumPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property owner who has extensive knowledge about different neighborhoods in London and helps newcomers find the perfect rental", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rental Suggestions Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Zillow API to provide users with a list of rental properties in London that match their specified criteria.\\\",\\n\\\"function_name\\\": \\\"get_rental_suggestions\\\",\\n\\\"input_args\\\": {\\n    \\\"neighborhood\\\": \\\"The neighborhood in London the user is interested in.\\\",\\n    \\\"budget\\\": \\\"The maximum rent the user is willing to pay per month.\\\",\\n    \\\"property_type\\\": \\\"The type of property the user is looking for (e.g., apartment, house, condo).\\\"\\n},\\n\\\"return\\\": \\\"A list of properties that match the user's criteria, with each property represented as a dictionary containing its address, rental price, and a link to more details.\\\",\\n\\\"depend\\\": \\\"Zillow Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property investor who attends local real estate meetups to network and gain industry knowledge", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Property Evaluation Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches a property's worth, its details, and comparability with the neighborhood properties using Zillow's API. Users input the property address and postal code.\\\",\\n  \\\"function_name\\\": \\\"get_property_details\\\",\\n  \\\"input_args\\\": {\\n    \\\"address\\\": \\\"string representing the property's address\\\",\\n    \\\"postal_code\\\": \\\"string representing the postal code of the property\\\"\\n  },\\n  \\\"return\\\": \\\"a dictionary containing the property's estimated worth, number of bedrooms and bathrooms, area in sqft, and comparable properties in the neighborhood, or a string message if unable to get property details.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"xml.etree.ElementTree\\\"],\\n    \\\"Web APIs\\\": [\\\"Zillow API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A frustrated parent who believes that the current school district funding is inadequate for their child's needs", "synthesized text": "\"{\\n\\\"name\\\": \\\"School District Funding Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides total funding, per student funding and total student count for any given school district in the U.S.\\\",\\n\\\"function_name\\\": \\\"get_school_district_funding\\\",\\n\\\"input_args\\\": {\\\"school_district\\\": \\\"Name of the school district\\\"},\\n\\\"return\\\": {\\\"total_funding\\\": \\\"Total funding of the school district\\\", \\\"per_student_funding\\\": \\\"Funding per student in the school district\\\", \\\"total_students\\\": \\\"Total number of students in the school district\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\"], \\\"Web APIs\\\": [\\\"U.S. Department of Education API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A podcast host who invites guests to dissect and debate the actions of Rick Grimes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Episode Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes audio files into text using the Speech Recognition library in Python. It's intended for podcast hosts, making it easier for them to get transcriptions of their episodes.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio - The file path to the audio file you want to transcribe.\\\",\\n\\\"return\\\": \\\"A string containing the transcribed text of the audio file.\\\",\\n\\\"depend\\\": \\\"Python's Speech Recognition library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young child who dreams of becoming a superhero and sees the military veteran as their ultimate role model", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military History Facts Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch information about historical military events. It uses the Military History API to get the event details.\\\",\\n\\\"function_name\\\": \\\"get_military_event_summary\\\",\\n\\\"input_args\\\": {\\\"event_name\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (summary of the military event)\\\",\\n\\\"depend\\\": \\\"requests library, Military History API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a St. Francis College student", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n  \\\"description\\\": \\\"An interface to detect the similarity between two pieces of text. Useful for plagiarism detection.\\\",\\n  \\\"function_name\\\": \\\"get_similarity_score\\\",\\n  \\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n  \\\"return\\\": \\\"A score representing the similarity between the two input texts. The score is between -1 and 1, where 1 means the texts are identical.\\\",\\n  \\\"depend\\\": \\\"Huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An environmental activist protesting against deforestation in North Bengal", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Deforestation Alert Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses NASA's Global Forest Change dataset to monitor deforestation in a specific region. The user inputs the coordinates of the area they are interested in, and the interface returns the amount of forest loss in that area over the last year.\\\",\\n  \\\"function_name\\\": \\\"calculate_deforestation\\\",\\n  \\\"input_args\\\": {\\n    \\\"lat\\\": \\\"Latitude of the area to monitor\\\",\\n    \\\"lon\\\": \\\"Longitude of the area to monitor\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary with information about the loss of forest area in the specified region, in square meters.\\\",\\n  \\\"depend\\\": \\\"Google Earth Engine API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An event coordinator who invites her to speak at international conferences on quantum security", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conference Speaker Invitation Interface\\\",\\n\\\"description\\\": \\\"Generates a professionally written invitation letter for a conference speaker\\\",\\n\\\"function_name\\\": \\\"generate_invitation\\\",\\n\\\"input_args\\\": {\\\"speaker_name\\\": \\\"string\\\", \\\"conference_details\\\": {\\\"name\\\": \\\"string\\\", \\\"date\\\": \\\"string\\\", \\\"location\\\": \\\"string\\\"}, \\\"talk_topic\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"A string representing the invitation letter\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"GPT-2 from Hugging Face\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Un CEO de una empresa de tecnología que busca asesoramiento para mejorar la eficiencia de sus operaciones", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interfaz de An\\u00e1lisis de Rendimiento de la CPU\\\",\\n  \\\"description\\\": \\\"Recopila y resume los porcentajes de uso de la CPU durante un per\\u00edodo de tiempo especificado por el usuario.\\\",\\n  \\\"function_name\\\": \\\"obtener_rendimiento_cpu\\\",\\n  \\\"input_args\\\": {\\n    \\\"intervalo_tiempo\\\": \\\"El intervalo de tiempo, en segundos, sobre el que se desea recopilar datos de rendimiento de la CPU.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"minimo\\\": \\\"El uso m\\u00ednimo de la CPU durante el intervalo de tiempo especificado.\\\",\\n    \\\"maximo\\\": \\\"El uso m\\u00e1ximo de la CPU durante el intervalo de tiempo especificado.\\\",\\n    \\\"media\\\": \\\"El uso medio de la CPU durante el intervalo de tiempo especificado.\\\"\\n  },\\n  \\\"depend\\\": \\\"Librer\\u00eda psutil de Python\\\"\\n}\"", "description": "tool development"}
{"input persona": "A German citizen who welcomes and supports the integration of immigrants into the community", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation Interface\\\", \\n\\\"description\\\": \\\"This interface translates text from one language to another, using the Google Cloud Translation API. It's designed to help a German citizen communicate with immigrants in their native language.\\\", \\n\\\"function_name\\\": \\\"translate_text\\\", \\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"The text that needs to be translated.\\\", \\n    \\\"target_language\\\": \\\"The ISO 639-1 language code for the target language. For example, 'de' for German.\\\"\\n}, \\n\\\"return\\\": \\\"The translated text.\\\", \\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Israeli chemist and member of the Israeli Society of Mass Spectrometry who admired Tsippy Tamiri's work", "synthesized text": "\"{\\n\\\"name\\\": \\\"MS Spectra Interpretation Interface\\\",\\n\\\"description\\\": \\\"An interface to interpret mass spectra by providing the path to a mass spectra data file. It encapsulates the Pyteomics library functions to load and interpret the data.\\\",\\n\\\"function_name\\\": \\\"interpret_mass_spectra\\\",\\n\\\"input_args\\\": \\\"path_to_file - The path to the mass spectra data file\\\",\\n\\\"return\\\": \\\"interpreted_data - The interpreted mass spectra data\\\",\\n\\\"depend\\\": \\\"Pyteomics library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Austrian sommelier living in Italy.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wine Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a user's wine preference description and returns a wine recommendation.\\\",\\n\\\"function_name\\\": \\\"get_wine_recommendation\\\",\\n\\\"input_args\\\": {\\\"description\\\": \\\"A short description of the user's wine preferences.\\\"},\\n\\\"return\\\": \\\"A string containing the name or type of recommended wine.\\\",\\n\\\"depend\\\": {\\\"huggingface\\\": \\\"gpt-2\\\"}\\n}\"", "description": "tool development"}
{"input persona": "an Indian defense analyst with a cynical view of government procurement processes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tender Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that scrapes and analyzes data from government tender notices.\\\",\\n\\\"function_name\\\": \\\"analyze_tender\\\",\\n\\\"input_args\\\": {\\n    \\\"tender_url\\\": \\\"The URL of the tender notice.\\\"\\n},\\n\\\"return\\\": \\\"A summarized analysis of the tender notice.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一个经常玩棒球手游，但对现实中的职业棒球缺乏深入了解的玩家。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u68d2\\u7403\\u7403\\u5458\\u6570\\u636e\\u67e5\\u8be2\\\",\\n\\\"description\\\": \\\"\\u6839\\u636e\\u7403\\u5458\\u7684\\u540d\\u5b57\\u8fd4\\u56de\\u8be5\\u7403\\u5458\\u7684\\u76f8\\u5173\\u6570\\u636e\\\",\\n\\\"function_name\\\": \\\"get_baseball_player_stats\\\",\\n\\\"input_args\\\": [\\\"player_name\\\"],\\n\\\"return\\\": \\\"\\u8be5\\u7403\\u5458\\u7684\\u76f8\\u5173\\u6570\\u636e\\uff0c\\u5305\\u62ec\\u751f\\u6daf\\u7edf\\u8ba1\\u3001\\u6700\\u8fd1\\u6bd4\\u8d5b\\u3001\\u751f\\u6daf\\u9ad8\\u5149\\u7b49\\\",\\n\\\"depend\\\": \\\"RapidAPI\\u7684Pro Baseball API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A philanthropist who established a scholarship fund specifically for active-duty military personnel seeking higher education", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Scholarship Eligibility Verification Interface\\\",\\n  \\\"description\\\": \\\"An interface to verify the active-duty status of a service member using the U.S. Department of Defense's Defense Manpower Data Center (DMDC) API. The user only needs to input the service member's Social Security Number (SSN), and our interface will return a confirmation of their active-duty status.\\\",\\n  \\\"function_name\\\": \\\"verify_active_duty_status\\\",\\n  \\\"input_args\\\": \\\"ssn\\\",\\n  \\\"return\\\": \\\"Boolean (True if the person is an active-duty service member, False otherwise)\\\",\\n  \\\"depend\\\": \\\"Web API from the U.S. Department of Defense's Defense Manpower Data Center (DMDC)\\\"\\n}\"", "description": "tool development"}
{"input persona": "an upcountry farmer who barely has any understanding of technologies and legal documents", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Summary Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of understanding complex legal documents by summarizing them. It takes in the path to a legal document and returns a simplified summary of the document.\\\",\\n\\\"function_name\\\": \\\"summarize_legal_doc\\\",\\n\\\"input_args\\\": \\\"path_to_doc - path to the legal document\\\",\\n\\\"return\\\": \\\"A summarized version of the legal document\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a Peruvian vegan activist.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Substitution Interface\\\",\\n\\\"description\\\": \\\"This interface takes a non-vegan ingredient as input and returns a list of possible vegan substitutions using a pre-trained model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"get_vegan_substitutes\\\",\\n\\\"input_args\\\": \\\"non_vegan_ingredient - a string representing a non-vegan food ingredient\\\",\\n\\\"return\\\": \\\"List of strings, each representing a possible vegan alternative to the input ingredient\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library and a pretrained model 'distilbert-base-uncased-finetuned-mnli'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dental surgeon who collaborates with the professor on research projects and clinical trials", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dental X-Ray Image Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model to identify anomalies or diseases in dental X-ray images\\\",\\n\\\"function_name\\\": \\\"analyze_dental_xray\\\",\\n\\\"input_args\\\": [\\\"path_to_xray\\\"],\\n\\\"return\\\": \\\"A dictionary with possible anomalies as keys and their respective probabilities as values\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A script editor with a deep understanding of the showrunner's vision, offering valuable feedback on narrative structure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Script Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the GPT-2 model from Hugging Face to analyze the narrative structure of a script. The user inputs the text of the script and the interface returns an analysis of the narrative structure.\\\",\\n\\\"function_name\\\": \\\"analyze_script\\\",\\n\\\"input_args\\\": \\\"script_text\\\",\\n\\\"return\\\": \\\"List of narrative structure analyses\\\",\\n\\\"depend\\\": \\\"GPT2LMHeadModel, GPT2Tokenizer from Hugging Face\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high-pressure sales executive looking for strategies to stay calm and confident in client meetings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mindfulness Meditation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a custom mindfulness meditation script. Users can input the duration of the meditation and any specific focus, and the interface will return a custom meditation script.\\\",\\n\\\"function_name\\\": \\\"generate_meditation_script\\\",\\n\\\"input_args\\\": {\\n  \\\"duration\\\": \\\"The duration of the meditation in minutes.\\\",\\n  \\\"focus\\\": \\\"The specific focus of the meditation, such as confidence or stress relief.\\\"\\n},\\n\\\"return\\\": \\\"A custom mindfulness meditation script.\\\",\\n\\\"depend\\\": \\\"This function leverages the GPT2 model from Huggingface Transformers.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An esteemed orthodontic professor known for their revolutionary research in teeth straightening techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Teeth Straightening Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the outcome of teeth straightening techniques given a dental scan image, the patient's age, and the technique to be used.\\\",\\n\\\"function_name\\\": \\\"predict_teeth_straightening\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"Path to the dental scan image\\\",\\n    \\\"age\\\": \\\"Patient's age\\\",\\n    \\\"technique\\\": \\\"Technique to be used for teeth straightening\\\"\\n},\\n\\\"return\\\": \\\"Predicted outcome of the teeth straightening process\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Pre-trained model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical resident who is fully dedicated to their work and often neglects their own well-being", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Health Check Reminder Interface\\\",\\n  \\\"description\\\": \\\"A tool that reminds the user to take regular health checks. It uses Python's built-in `datetime` library and the `schedule` library to set up the reminders.\\\",\\n  \\\"function_name\\\": \\\"health_check_reminder\\\",\\n  \\\"input_args\\\": {\\n    \\\"interval\\\": \\\"The interval (in hours) at which the reminder should be triggered.\\\",\\n    \\\"message\\\": \\\"The reminder message to be displayed.\\\"\\n  },\\n  \\\"return\\\": \\\"This function does not return a value. Instead, it prints a timestamped reminder message every interval hours.\\\",\\n  \\\"depend\\\": [\\\"Python's built-in `datetime` library\\\", \\\"Python's `schedule` library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A school principal advocating for mandatory vaccinations for all students", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vaccination Status Verification Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to verify the vaccination status of individuals by providing their name and date of birth. It simplifies the process of accessing and using a web API for vaccination status verification.\\\",\\n\\\"function_name\\\": \\\"verify_vaccination_status\\\",\\n\\\"input_args\\\": {\\n    \\\"name\\\": \\\"a string representing the name of the person to check\\\",\\n    \\\"dob\\\": \\\"a string representing their date of birth in the format 'YYYY-MM-DD'\\\"\\n},\\n\\\"return\\\": \\\"a string indicating the person's vaccination status, or a message indicating that the status could not be verified.\\\",\\n\\\"depend\\\": \\\"requests library, Vaccination Status Verification API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturing plant manager who's skeptical about outsourcing key responsibilities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Predictive Maintenance Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to predict when maintenance will be required for a machine. This can help managers decide whether outsourcing is necessary. The user only needs to provide the machine's operational data file, and the interface will return a prediction of when maintenance will be needed.\\\",\\n\\\"function_name\\\": \\\"predict_maintenance\\\",\\n\\\"input_args\\\": \\\"file_path (str) - The path to the csv file containing the machine's operational data.\\\",\\n\\\"return\\\": \\\"prediction (array) - An array containing the prediction of when maintenance will be required.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, tensorflow, sklearn; Machine Learning Model: predictive_maintenance_model.h5\\\"\\n}\"", "description": "tool development"}
{"input persona": "A vocal community member who feels that the reliable council member does not adequately represent their interests", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Voting Record Analysis Interface\\\", \\n  \\\"description\\\": \\\"Fetch and analyze a specific member's voting record from the ProPublica Congress API.\\\", \\n  \\\"function_name\\\": \\\"get_member_voting_record\\\", \\n  \\\"input_args\\\": {\\\"member_id\\\": \\\"A string that represents the specific member's ID.\\\"}, \\n  \\\"return\\\": {\\\"total_votes\\\": \\\"Total number of votes the member has cast.\\\", \\n             \\\"yes_votes\\\": \\\"Number of votes where the member voted 'Yes'.\\\", \\n             \\\"no_votes\\\": \\\"Number of votes where the member voted 'No'.\\\", \\n             \\\"party_majority_percentage\\\": \\\"Percentage of votes where the member's vote aligns with the majority of their party.\\\"}, \\n  \\\"depend\\\": {\\\"requests\\\": \\\"Python library to make HTTP requests.\\\", \\n             \\\"ProPublica Congress API\\\": \\\"Web API to fetch congressional data.\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A construction project manager who admires Mr. Harry Tow's leadership and management skills", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Progress Tracking Interface\\\",\\n\\\"description\\\": \\\"An interface that uses APIs from project management tools like Trello, and machine learning models to analyze and predict project progress.\\\",\\n\\\"function_name\\\": \\\"predict_project_completion_date\\\",\\n\\\"input_args\\\": [\\\"board_id\\\", \\\"api_key\\\"],\\n\\\"return\\\": \\\"predicted_completion_date\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"datetime\\\", \\\"sklearn.externals.joblib\\\", \\\"Trello API\\\", \\\"Trained Machine Learning Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A biochemist who develops biodegradable materials for the toymaker's eco-friendly line", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Biodegradable Material Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the biodegradability of a compound based on its molecular structure represented as a SMILES string.\\\",\\n  \\\"function_name\\\": \\\"predict_biodegradability\\\",\\n  \\\"input_args\\\": [\\\"smiles\\\"],\\n  \\\"return\\\": \\\"A string that indicates whether the compound is 'Biodegradable' or 'Non-biodegradable'.\\\",\\n  \\\"depend\\\": \\\"This function leverages the rdkit and tensorflow libraries, and a pre-trained machine learning model ('biodegradability_model.h5').\\\"\\n}\"", "description": "tool development"}
{"input persona": "An amateur Slovenian biathlete who has previously competed locally but is watching these junior championships from home due to a recent injury.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Biathlon Race Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches data about recent biathlon championships, analyzes the performance of top athletes, and provides insights. Users only need to input the championship's ID, and the interface will return the performance analysis of the championship.\\\",\\n\\\"function_name\\\": \\\"analyze_performance\\\",\\n\\\"input_args\\\": \\\"championship_id\\\",\\n\\\"return\\\": \\\"A dictionary with mean shooting accuracy and speed across the championship, and the names of the best shooter and the fastest athlete.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas. Web APIs: Sportradar's API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a secondary character in the plot, observing the incident.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Narration from Character Perspective Interface\\\",\\n\\\"description\\\": \\\"This interface generates a natural language description of a given scene from the perspective of a specified character.\\\",\\n\\\"function_name\\\": \\\"narrate_from_perspective\\\",\\n\\\"input_args\\\": [\\\"scene\\\", \\\"character\\\"],\\n\\\"return\\\": \\\"A string of text describing the scene from the character's perspective.\\\",\\n\\\"depend\\\": [\\\"Huggingface's transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A renowned expert in blockchain technology and its potential applications in various industries", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Blockchain Transaction Verification Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to verify the status of a transaction on the Bitcoin blockchain using its unique transaction hash\\\",\\n  \\\"function_name\\\": \\\"verify_blockchain_transaction\\\",\\n  \\\"input_args\\\": [\\\"transaction_hash\\\"],\\n  \\\"return\\\": \\\"A dictionary containing various details of the transaction such as its hash, size, block height, inputs, outputs, etc.\\\",\\n  \\\"depend\\\": [\\\"Python's requests library\\\", \\\"Blockchain API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired professional wrestler who achieved legendary status in the wrestling industry", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Wrestling Match Statistics Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches the match statistics of a given wrestler using the Wrestlingdata API.\\\",\\n  \\\"function_name\\\": \\\"get_wrestler_stats\\\",\\n  \\\"input_args\\\": {\\n    \\\"wrestler_name\\\": \\\"The name of the wrestler to fetch the statistics for.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"name\\\": \\\"The name of the wrestler.\\\",\\n    \\\"wins\\\": \\\"The number of matches won by the wrestler.\\\",\\n    \\\"losses\\\": \\\"The number of matches lost by the wrestler.\\\",\\n    \\\"draws\\\": \\\"The number of matches that ended in a draw for the wrestler.\\\",\\n    \\\"total_matches\\\": \\\"The total number of matches the wrestler participated in.\\\"\\n  },\\n  \\\"depend\\\": \\\"requests, Wrestlingdata API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A NASCAR-loving, junk food-craving, truck-loving American, who tastes every kind of burger and keen on barbecue parties.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutrition Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface returns the nutritional value of a given food.\\\",\\n\\\"function_name\\\": \\\"get_nutrition_info\\\",\\n\\\"input_args\\\": \\\"food_name\\\",\\n\\\"return\\\": \\\"Total calories and a dictionary containing the total amount of each nutrient in the food.\\\",\\n\\\"depend\\\": \\\"Python's requests and json libraries, Edamam Nutrition Analysis API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A journalist looking to write a series on untold stories of Australian military heroes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Military Hero Information Retrieval Interface\\\",\\n  \\\"description\\\": \\\"This interface allows the user to input a hero's name and returns detailed information about the hero, including their service history, honours/awards received, and any related articles or resources.\\\",\\n  \\\"function_name\\\": \\\"get_hero_information\\\",\\n  \\\"input_args\\\": {\\n    \\\"hero_name\\\": \\\"The name of the military hero\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"name\\\": \\\"The preferred name of the military hero\\\",\\n    \\\"serviceHistory\\\": \\\"The service history of the military hero\\\",\\n    \\\"honoursAwards\\\": \\\"The honours and awards received by the military hero\\\",\\n    \\\"relatedResources\\\": \\\"Web URLs of related resources/articles about the military hero\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"web_API\\\": \\\"Australian War Memorial API\\\",\\n    \\\"python_library\\\": \\\"requests library\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A representative from the Jordanian Ministry of Health who oversees healthcare services in refugee camps", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Medical Supplies Inventory Management Interface\\\",\\n  \\\"description\\\": \\\"An interface for managing the inventory of medical supplies in refugee camps. It takes as input two CSV files: one with the current inventory and one with the required supplies. The interface returns a CSV file with the supplies that need to be restocked.\\\",\\n  \\\"function_name\\\": \\\"manage_medical_inventory\\\",\\n  \\\"input_args\\\": {\\n    \\\"current_inventory_csv\\\": \\\"A CSV file with the current inventory of medical supplies\\\",\\n    \\\"required_inventory_csv\\\": \\\"A CSV file with the required inventory of medical supplies\\\"\\n  },\\n  \\\"return\\\": \\\"A CSV file with the supplies that need to be restocked.\\\",\\n  \\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A family with children of a similar age who also have dogs, creating opportunities for playdates and shared walks", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Dog-Friendly Playdate Finder\\\",\\n  \\\"description\\\": \\\"Finds nearby parks and contacts of dog owners with dogs of a similar breed and age.\\\",\\n  \\\"function_name\\\": \\\"find_dog_friendly_playdates\\\",\\n  \\\"input_args\\\": [\\\"location\\\", \\\"breed\\\", \\\"age\\\"],\\n  \\\"return\\\": \\\"A dictionary with a list of nearby parks and a list of emails of potential dog owner playdates.\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\"],\\n    \\\"web_APIs\\\": [\\\"Google Places\\\", \\\"Petfinder\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "The CEO of a major multinational corporation who wants to impress their shareholders and clients with a high-profile gala", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Event Planning Interface\\\",\\n  \\\"description\\\": \\\"An interface that provides a list of top event venues, a weather forecast, and a list of nearby hotels for a specified location and date.\\\",\\n  \\\"function_name\\\": \\\"plan_event\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"A string specifying the location of the event.\\\",\\n    \\\"date\\\": \\\"A string specifying the date of the event in the format 'YYYY-MM-DD'.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"venues\\\": \\\"A list of top event venues in the specified location.\\\",\\n    \\\"weather\\\": \\\"A weather forecast for the specified location and date.\\\",\\n    \\\"hotels\\\": \\\"A list of nearby hotels in the specified location.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"datetime\\\", \\\"pytz\\\"],\\n    \\\"web APIs\\\": [\\\"Eventbrite API\\\", \\\"OpenWeatherMap API\\\", \\\"Google Places API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a Bangladeshi expatriate living in Rome", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Converter Interface\\\",\\n\\\"description\\\": \\\"This interface provides the current exchange rate between two specified currencies.\\\",\\n\\\"function_name\\\": \\\"get_exchange_rate\\\",\\n\\\"input_args\\\": {\\\"source_currency\\\": \\\"string\\\", \\\"target_currency\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"float (exchange rate) or string (error message)\\\",\\n\\\"depend\\\": \\\"requests, exchangerate-api.com\\\"\\n}\"", "description": "tool development"}
{"input persona": "老譚，一名曆史老師，對政治充滿了熱情，並熱衷於分析選舉結果背後的社會變遷。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Election Result Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that allows the user to input a year, and it returns the correlation between the number of federal disaster declarations and the election results in each state for that year.\\\",\\n  \\\"function_name\\\": \\\"analyze_election\\\",\\n  \\\"input_args\\\": [\\\"year\\\"],\\n  \\\"return\\\": \\\"correlation\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"sklearn.preprocessing.MinMaxScaler\\\", \\\"OpenFEMA API\\\", \\\"MIT Election Data and Science Lab\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a geology professor who has been teaching about mineral deposits and mountain formation for 25 years.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mountain Profile Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the elevation profile between two points on a mountain. It can help in understanding the mountain formation and mineral deposits.\\\",\\n\\\"function_name\\\": \\\"get_elevation_profile\\\",\\n\\\"input_args\\\": {\\n    \\\"start_latitude\\\": \\\"The latitude of the start point\\\",\\n    \\\"start_longitude\\\": \\\"The longitude of the start point\\\",\\n    \\\"end_latitude\\\": \\\"The latitude of the end point\\\",\\n    \\\"end_longitude\\\": \\\"The longitude of the end point\\\"\\n},\\n\\\"return\\\": {\\n    \\\"start_point\\\": {\\n        \\\"latitude\\\": \\\"The latitude of the start point\\\",\\n        \\\"longitude\\\": \\\"The longitude of the start point\\\",\\n        \\\"elevation\\\": \\\"The elevation of the start point (in meters)\\\"\\n    },\\n    \\\"end_point\\\": {\\n        \\\"latitude\\\": \\\"The latitude of the end point\\\",\\n        \\\"longitude\\\": \\\"The longitude of the end point\\\",\\n        \\\"elevation\\\": \\\"The elevation of the end point (in meters)\\\"\\n    }\\n},\\n\\\"depend\\\": \\\"USGS's Elevation Point Query Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hopeless romantic who dislikes discussing money matters but passionately loves celebrity gossip", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Celebrity Gossip Summarizer\\\",\\n  \\\"description\\\": \\\"Retrieves the latest celebrity gossip news and provides a summarized version of each article\\\",\\n  \\\"function_name\\\": \\\"get_celebrity_gossip_summaries\\\",\\n  \\\"input_args\\\": {\\n    \\\"num_articles\\\": \\\"The number of news articles to retrieve and summarize\\\"\\n  },\\n  \\\"return\\\": \\\"A list of summaries for the latest celebrity gossip news articles\\\",\\n  \\\"depend\\\": \\\"Python standard library, requests, NewsAPI, Hugging Face Transformers pipeline\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Web Designer working specifically on the User Interface design of websites.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Web Accessibility Checker Interface\\\",\\n\\\"description\\\": \\\"This interface uses the WAVE API to check the accessibility of a given website. It returns a report with the number of errors, alerts, features, etc. related to web accessibility.\\\",\\n\\\"function_name\\\": \\\"check_web_accessibility\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": {\\n    \\\"errors\\\": \\\"number of errors related to web accessibility\\\",\\n    \\\"alerts\\\": \\\"number of alerts related to web accessibility\\\",\\n    \\\"features\\\": \\\"number of features related to web accessibility\\\",\\n    \\\"aria\\\": \\\"number of ARIA related items\\\",\\n    \\\"html5\\\": \\\"number of HTML5 and ARIA-related features\\\",\\n    \\\"contrast\\\": \\\"number of contrast errors\\\"\\n},\\n\\\"depend\\\": \\\"requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A network engineer who has recently started working with Zabbix and seeks guidance on best practices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Zabbix API Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch monitoring data from Zabbix server for a specific host. The user needs to input the Zabbix server URL, username, password, and the host name.\\\",\\n\\\"function_name\\\": \\\"get_zabbix_host_data\\\",\\n\\\"input_args\\\": [\\\"server_url\\\", \\\"username\\\", \\\"password\\\", \\\"host_name\\\"],\\n\\\"return\\\": \\\"Monitoring data for the specified host in JSON format\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"Zabbix API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An anthropologist studying administrative divisions in various countries.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Administrative Division Information Interface\\\",\\n    \\\"description\\\": \\\"Fetches information about a country's administrative divisions using the REST Countries API. The input is a country's name and the output is a list of administrative divisions or a message if the country is not found.\\\",\\n    \\\"function_name\\\": \\\"get_administrative_divisions\\\",\\n    \\\"input_args\\\": [\\\"country_name\\\"],\\n    \\\"return\\\": \\\"List of administrative divisions or 'Country not found' message\\\",\\n    \\\"depend\\\": [\\\"requests library\\\", \\\"REST Countries API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A graduate student researching the relationship between resource abundance and economic volatility", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Indicator and Resource Abundance Data Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to extract economic indicators and resource abundance data for a specific country over a range of years.\\\",\\n\\\"function_name\\\": \\\"get_combined_data\\\",\\n\\\"input_args\\\": [\\\"country\\\", \\\"start_year\\\", \\\"end_year\\\"],\\n\\\"return\\\": \\\"A DataFrame with columns: 'Date', 'GDP', 'INFLATION', 'UNEMPLOYMENT', 'RESOURCES'. Each row represents the data for a specific date within the specified year range.\\\",\\n\\\"depend\\\": [\\\"Python libraries: requests, pandas\\\", \\\"Web APIs: Quandl, World Bank\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an experienced heavy-rigging supervisor in the oil and gas industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Oil Rig Activity Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow and a Computer Vision API to monitor activities on an oil rig. The user inputs the path to a video file or live video feed URL, and the interface returns a list of identified activities and their timestamps.\\\",\\n\\\"function_name\\\": \\\"monitor_rig_activities\\\",\\n\\\"input_args\\\": {\\\"path_to_video\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"list of dictionaries with 'timestamp' and 'activities' keys\\\",\\n\\\"depend\\\": \\\"cv2, tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud graduate of RWTH Aachen University, particularly passionate about plastics engineering and currently working in the industry.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Properties Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the properties of a plastic material based on its composition using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_properties\\\",\\n\\\"input_args\\\": \\\"composition\\\",\\n\\\"return\\\": \\\"predicted_properties\\\",\\n\\\"depend\\\": \\\"Scikit-Learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "An IT engineer responsible for maintaining and updating the trading platforms for hedge funds", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated System Health Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks the health of a given trading platform by returning the HTTP response, ping response, and server load.\\\",\\n\\\"function_name\\\": \\\"automated_system_health_check\\\",\\n\\\"input_args\\\": \\\"url - The URL of the trading platform to check\\\",\\n\\\"return\\\": \\\"A dictionary with HTTP Response, Ping Response, and Server Load as keys and their respective status as values\\\",\\n\\\"depend\\\": \\\"Python built-in libraries (os, subprocess), requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A farmer struggling with new agricultural regulations imposed by the EU", "synthesized text": "\"{\\n\\\"name\\\": \\\"EU Agricultural Regulations Compliance Checker Interface\\\", \\n\\\"description\\\": \\\"This interface checks whether a farmer's practices are potentially non-compliant with the EU's agricultural regulations by comparing the practices to the regulations.\\\", \\n\\\"function_name\\\": \\\"compliance_checker\\\", \\n\\\"input_args\\\": \\\"farming_practices - A list of strings, with each string being a description of a farming practice.\\\", \\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains a potentially non-compliant farming practice and the relevant EU rule.\\\",\\n\\\"depend\\\": \\\"BeautifulSoup for web scraping, requests for making HTTP requests, transformers for NLP tasks\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computational linguist presenting research on applying AI to historical linguistics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates text from a historical language to a modern language using AI models.\\\",\\n\\\"function_name\\\": \\\"historical_to_modern_translation\\\",\\n\\\"input_args\\\": {\\n    \\\"historical_text\\\": \\\"The text in the historical language to be translated.\\\",\\n    \\\"src_lang\\\": \\\"The source historical language. Default is 'Old English'.\\\",\\n    \\\"target_lang\\\": \\\"The target modern language. Default is 'English'.\\\"\\n},\\n\\\"return\\\": \\\"The translated text in the target modern language.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers (MarianMT model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一位退休铁路系统的工程师，对我国铁路行业充满热爱，并对工会活动表示理解和支持。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Railway Scheduling Interface\\\",\\n  \\\"description\\\": \\\"An interface to get the train schedule from a start station to an end station.\\\",\\n  \\\"function_name\\\": \\\"get_train_schedule\\\",\\n  \\\"input_args\\\": [\\\"start_station\\\", \\\"end_station\\\"],\\n  \\\"return\\\": \\\"A list of dictionaries, each containing the train name, departure time from the start station, and arrival time at the end station.\\\",\\n  \\\"depend\\\": \\\"RailwayAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "Enthusiastic B-movie fan, loves action flicks, and is a fan of Bruce Willis.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"Fetches a list of movies by the given actor, sorted by popularity.\\\",\\n\\\"function_name\\\": \\\"get_movies_by_actor\\\",\\n\\\"input_args\\\": [\\\"name\\\"],\\n\\\"return\\\": \\\"List of movie titles\\\",\\n\\\"depend\\\": \\\"TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a postdoctoral researcher specializing in lattice-based cryptography", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Cryptography Interface\\\",\\n    \\\"description\\\": \\\"This interface allows users to encrypt and decrypt messages using AES encryption from the PyCryptoDome library.\\\",\\n    \\\"function_name\\\": [\\\"encrypt_message\\\", \\\"decrypt_message\\\"],\\n    \\\"input_args\\\": \\n    {\\n        \\\"encrypt_message\\\": [\\\"plain_text\\\", \\\"key\\\"],\\n        \\\"decrypt_message\\\": [\\\"cipher_dict\\\", \\\"key\\\"]\\n    },\\n    \\\"return\\\": \\n    {\\n        \\\"encrypt_message\\\": \\\"A dictionary with the cipher text, nonce, and tag.\\\",\\n        \\\"decrypt_message\\\": \\\"The decrypted plain text.\\\"\\n    },\\n    \\\"depend\\\": \\\"Python PyCryptoDome library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A scriptwriter for an action-packed lucha libre themed TV series", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lucha Libre Character Name Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a list of unique lucha libre inspired character names\\\",\\n\\\"function_name\\\": \\\"generate_lucha_libre_names\\\",\\n\\\"input_args\\\": [\\\"num_names\\\"],\\n\\\"return\\\": \\\"List of unique character names\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library (GPT2LMHeadModel, GPT2Tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A federal negotiator responsible for implementing the Inuvialuit Final Agreement", "synthesized text": "\"{\\n\\\"name\\\": \\\"Land Area Calculation Interface\\\", \\n\\\"description\\\": \\\"This interface calculates the total land area from a given shapefile. It can be particularly useful for tasks related to implementing land agreements.\\\", \\n\\\"function_name\\\": \\\"calculate_land_area\\\", \\n\\\"input_args\\\": \\\"shapefile - path to a shapefile\\\", \\n\\\"return\\\": \\\"total_area - total land area covered by the polygons in the shapefile\\\", \\n\\\"depend\\\": \\\"Geopandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A law school graduate writing a thesis on the retired Justice's influence on civil rights law", "synthesized text": "\"{\\n\\\"name\\\": \\\"Supreme Court Opinion Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches opinions authored by a specific Justice from the U.S. Government Publishing Office API and performs named entity recognition to identify mentions of civil rights.\\\",\\n\\\"function_name\\\": \\\"get_civil_rights_mentions_by_justice\\\",\\n\\\"input_args\\\": [\\\"justice_name\\\"],\\n\\\"return\\\": \\\"A list of mentions of civil rights in opinions authored by the specified Justice.\\\",\\n\\\"depend\\\": [\\\"U.S. Government Publishing Office API\\\", \\\"spaCy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A computer science major with an interest in computational chemistry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Molecular Structure Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface takes a Simplified Molecular Input Line Entry System (SMILES) string as input and returns a visualization of the corresponding molecular structure. It uses the RDKit library, a collection of cheminformatics and machine learning tools.\\\",\\n\\\"function_name\\\": \\\"visualize_molecule\\\",\\n\\\"input_args\\\": {\\n    \\\"smiles_string\\\": \\\"A string representing the chemical structure of a molecule in SMILES notation\\\"\\n},\\n\\\"return\\\": \\\"A Matplotlib object representing the visualized molecular structure\\\",\\n\\\"depend\\\": \\\"RDKit library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Bosnian citizen living in a region that is not majority-Croat", "synthesized text": "\"{\\n\\\"name\\\": \\\"Croatian to Bosnian Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates Croatian text to Bosnian using a pre-trained model from Hugging Face's Transformers library.\\\",\\n\\\"function_name\\\": \\\"translate_croatian_to_bosnian\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"The translated Bosnian text\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A military enthusiast in Nigeria who loves to collect and share various military facts and trivia.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Military Fact Search Interface\\\",\\n  \\\"description\\\": \\\"Fetches and parses information about specified military topics from Wikipedia\\\",\\n  \\\"function_name\\\": \\\"get_military_fact\\\",\\n  \\\"input_args\\\": [\\\"topic\\\"],\\n  \\\"return\\\": \\\"A brief summary from Wikipedia about the specified military topic\\\",\\n  \\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A native inhabitant of Saint Kitts and Nevis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Converter Interface\\\",\\n\\\"description\\\": \\\"This interface provides the current conversion rate between any two given currencies.\\\",\\n\\\"function_name\\\": \\\"get_conversion_rate\\\",\\n\\\"input_args\\\": [\\\"from_currency\\\", \\\"to_currency\\\"],\\n\\\"return\\\": \\\"The current conversion rate between the 'from_currency' and 'to_currency'.\\\",\\n\\\"depend\\\": \\\"requests, ExchangeRate-API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A doctoral candidate focusing on the correlation between religious tolerance and political stability", "synthesized text": "\"{\\n\\\"name\\\": \\\"Political Stability and Religious Tolerance Indices Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the political stability index and religious tolerance index of a given country. The indices are fetched from the World Bank and Pew Research Center respectively.\\\",\\n\\\"function_name\\\": \\\"get_country_indices\\\",\\n\\\"input_args\\\": [\\\"country_code\\\", \\\"country_name\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'Political Stability Index' and 'Religious Tolerance Index' and their respective values as the dictionary values.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"World Bank API\\\", \\\"Pew Research Center\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A chiropractor intrigued by the combination of form and function in everyday objects", "synthesized text": "\"{\\n  \\\"name\\\": \\\"3D Object Analyzer\\\",\\n  \\\"description\\\": \\\"Reads a 3D object file, computes the volume of the object and its convex hull, and returns these volumes\\\",\\n  \\\"function_name\\\": \\\"analyze_3d_object\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_obj\\\": \\\"Path to the 3D object file\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"object_volume\\\": \\\"Volume of the 3D object\\\",\\n    \\\"convex_hull_volume\\\": \\\"Volume of the convex hull of the 3D object\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"open3d\\\": \\\"A library for processing 3D data\\\",\\n    \\\"numpy\\\": \\\"A library for numerical computations in Python\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A local social worker advocating for improved wages and benefits for fast food workers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fast Food Wage Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch and analyze wage data for fast food workers from the Bureau of Labor Statistics (BLS). Users can get the average wage for fast food workers in a specific state for a specified year.\\\",\\n\\\"function_name\\\": \\\"get_average_fast_food_wage\\\",\\n\\\"input_args\\\": [\\\"state\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"Average wage for fast food workers in the specified state and year.\\\",\\n\\\"depend\\\": \\\"Bureau of Labor Statistics (BLS) API, Python requests and json libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "an ardent admirer of Indian music, particularly Bollywood songs, and a big fan of Kumar Sanu.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bollywood Song Lyrics Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface that takes in the title of a Bollywood song and returns its lyrics by leveraging the Genius API.\\\",\\n\\\"function_name\\\": \\\"fetch_song_lyrics_from_genius\\\",\\n\\\"input_args\\\": \\\"song_title\\\",\\n\\\"return\\\": \\\"Lyrics of the song or 'Lyrics not found' message\\\",\\n\\\"depend\\\": \\\"requests, json, Genius API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior executive who understands the impact of user manuals on brand reputation and customer loyalty", "synthesized text": "\"{\\n\\\"name\\\": \\\"User Manual Readability Assessment\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained BERT model to assess the readability of a user manual. The input is the path to a user manual file and the output is a readability score, with higher scores indicating more complex and harder-to-understand text.\\\",\\n\\\"function_name\\\": \\\"assess_readability\\\",\\n\\\"input_args\\\": \\\"path_to_txt\\\",\\n\\\"return\\\": \\\"readability_score\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library, TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer who has moved from Angular 1 to Angular 4.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Angular Migration Interface\\\",\\n\\\"description\\\": \\\"An interface to automatically upgrade Angular 1.x code to a form that's compatible with Angular 4. It uses the jscodeshift library and a code transformation script from the Angular CLI.\\\",\\n\\\"function_name\\\": \\\"upgrade_angular_code\\\",\\n\\\"input_args\\\": {\\n    \\\"input_file_path\\\": \\\"Path to a JavaScript file with Angular 1.x code\\\"\\n},\\n\\\"return\\\": \\\"Path to a new JavaScript file with the upgraded code\\\",\\n\\\"depend\\\": \\\"Python's subprocess and os libraries, jscodeshift CLI, Angular CLI's code transformation script\\\"\\n}\"", "description": "tool development"}
{"input persona": "K-pop fan club manager for an international K-pop fan community", "synthesized text": "\"{\\n\\\"name\\\": \\\"K-pop Lyrics Translation Interface\\\",\\n\\\"description\\\": \\\"This interface takes Korean lyrics of a K-pop song as input and returns its English translation.\\\",\\n\\\"function_name\\\": \\\"translate_kpop_lyrics\\\",\\n\\\"input_args\\\": [\\\"korean_lyrics\\\"],\\n\\\"return\\\": \\\"English translation of the input Korean lyrics\\\",\\n\\\"depend\\\": [\\\"googletrans Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "热心的自行车社区志愿者和业余自行车赛事追随者", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Race Tracker Interface\\\",\\n  \\\"description\\\": \\\"Tracks the current positions of racers in a bicycle race.\\\",\\n  \\\"function_name\\\": \\\"track_racers\\\",\\n  \\\"input_args\\\": [\\\"racers\\\", \\\"start_location\\\"],\\n  \\\"return\\\": \\\"A dictionary with racers' names as keys and their distance from the start as values.\\\",\\n  \\\"depend\\\": \\\"requests library for API calls, geopy for distance calculation\\\"\\n}\"", "description": "tool development"}
{"input persona": "A financial analyst who provides insightful market analysis on the TV show", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Market Sentiment Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the FinBERT model from the Hugging Face model repository to analyze the sentiment of a given market analysis text.\\\",\\n\\\"function_name\\\": \\\"analyze_market_sentiment\\\",\\n\\\"input_args\\\": [\\\"market_analysis_text\\\"],\\n\\\"return\\\": \\\"A dictionary with sentiment labels ('Negative', 'Neutral', 'Positive') as keys and their corresponding scores as values.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library and PyTorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A junior high school student who has homework on world calendars", "synthesized text": "\"{\\n\\\"name\\\": \\\"Date Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface for converting Gregorian dates to other world calendar dates. Currently supports conversion to Hebrew and Islamic calendars.\\\",\\n\\\"function_name\\\": \\\"convert_to_calendar\\\",\\n\\\"input_args\\\": {\\\"date_str\\\": \\\"a string representing a date in the 'YYYY-MM-DD' format\\\", \\\"target_calendar\\\": \\\"a string representing the name of the target calendar, either 'hebrew' or 'islamic'\\\"},\\n\\\"return\\\": \\\"a tuple representing the date in the target calendar (year, month, day)\\\",\\n\\\"depend\\\": [\\\"datetime\\\", \\\"convertdate.gregorian\\\", \\\"convertdate.hebrew\\\", \\\"convertdate.islamic\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A representative from the city's cultural department, collaborating with the business owner to secure permits and funding for the festivals", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Festival Permit and Funding Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches the necessary permits from the city's online permit system and potential funding sources from a public grant database for a given festival.\\\",\\n  \\\"function_name\\\": \\\"get_festival_permits_and_funding\\\",\\n  \\\"input_args\\\": {\\n    \\\"festival_info\\\": \\\"a dictionary that includes keys 'activity' and 'location'\\\"\\n  },\\n  \\\"return\\\": \\\"a dictionary that includes keys 'permits' and 'fundings'\\\",\\n  \\\"depend\\\": \\\"requests library, City's Online Permit System API, Public Grant Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An emotional college friend of Zhao Yijun who is touched by his dedication to scientific research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Paper Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and simplifies the information about an author's scientific papers from Semantic Scholar. It can help people without a scientific background to understand the author's research.\\\",\\n\\\"function_name\\\": \\\"fetch_paper_info\\\",\\n\\\"input_args\\\": [\\\"author_id\\\"],\\n\\\"return\\\": \\\"A list of dictionaries, with each dictionary containing simplified information about one of the author's papers. The information includes the paper's title, year of publication, topics, and number of citations.\\\",\\n\\\"depend\\\": \\\"Semantic Scholar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A defense minister responsible for investigating and analyzing unidentified aerial phenomena", "synthesized text": "\"{\\n\\\"name\\\": \\\"UFO Sightings Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches UFO sighting data from the National UFO Reporting Center (NUFORC), analyzes it, and visualizes the frequency and locations of sightings.\\\",\\n\\\"function_name\\\": \\\"analyze_ufo_sightings\\\",\\n\\\"input_args\\\": [\\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"Dictionary (Year: Number of Sightings), Scatter Plot (Locations of Sightings)\\\",\\n\\\"depend\\\": \\\"requests, pandas, matplotlib, geopy, NUFORC API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fiercely loyal fan of Wet Wet Wet who was there at their last performance at Edinburgh Castle", "synthesized text": "\"{\\n\\\"name\\\": \\\"Concert Setlist Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Setlist.fm API to extract the setlist of a specified concert. The user only needs to input the artist name and the date of the concert, and the interface will return the setlist for that concert.\\\",\\n\\\"function_name\\\": \\\"get_concert_setlist\\\",\\n\\\"input_args\\\": {\\n    \\\"artist_name\\\": \\\"A string representing the name of the artist.\\\",\\n    \\\"concert_date\\\": \\\"A string representing the date of the concert in the format 'YYYY-MM-DD'.\\\"\\n},\\n\\\"return\\\": \\\"A list of strings, each representing a song in the setlist. Returns 'No setlist found for the specified concert.' if no setlist is found.\\\",\\n\\\"depend\\\": \\\"Python's requests and datetime libraries, Setlist.fm API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate architect with extensive knowledge of Tirana's history and culture, offering a beautifully designed apartment in the heart of the city.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Price Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the price of a property given the number of bedrooms, bathrooms, location and square footage.\\\",\\n\\\"function_name\\\": \\\"predict_property_price\\\",\\n\\\"input_args\\\": [\\\"bedrooms\\\", \\\"bathrooms\\\", \\\"location\\\", \\\"square_footage\\\"],\\n\\\"return\\\": \\\"Predicted property price.\\\",\\n\\\"depend\\\": \\\"xgboost, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "an owner of a Samsung Galaxy S10 with a broken screen, who is a sustainability enthusiast and loves to recycle old items", "synthesized text": "\"{\\n\\\"name\\\": \\\"Phone Components Recycling Interface\\\",\\n\\\"description\\\": \\\"An interface to find nearby recycling centers for phone components using the Earth911 API.\\\",\\n\\\"function_name\\\": \\\"get_nearby_recycling_centers\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"A tuple of latitude and longitude\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary represents a recycling center with two keys: 'name' and 'address'.\\\",\\n\\\"depend\\\": \\\"requests library, Earth911 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A English literature teacher trying to implement statistical analysis in grading writing assignments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the 'textstat' Python library to analyze the complexity of a given text. The Flesch Reading Ease score is returned, which rates the text on a 100-point scale, where a higher score means the text is easier to understand.\\\",\\n\\\"function_name\\\": \\\"analyze_text_complexity\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"Flesch Reading Ease score\\\",\\n\\\"depend\\\": \\\"textstat Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a conservative and cautious financial analyst, who values long-term stability over short-term gains and always emphasizes the importance of risk management.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Portfolio Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface uses the yfinance library to fetch historical data for a portfolio of stocks, and then uses numpy to calculate the portfolio's variance, standard deviation (volatility), and correlation matrix. These metrics can help in assessing the overall risk of the portfolio.\\\",\\n\\\"function_name\\\": \\\"calculate_portfolio_risk\\\",\\n\\\"input_args\\\": [\\\"tickers\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": {\\\"return\\\": \\\"Expected annual portfolio return\\\", \\\"volatility\\\": \\\"Annual portfolio volatility\\\", \\\"covariance_matrix\\\": \\\"Covariance matrix of the portfolio\\\"},\\n\\\"depend\\\": [\\\"yfinance library\\\", \\\"numpy library\\\", \\\"pandas library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a senior microbiologist who studied under David J. L. Luck.", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze a DNA sequence. It returns the sequence's GC content, its transcription, and the protein for which it codes.\\\",\\n\\\"function_name\\\": \\\"analyze_dna_sequence\\\",\\n\\\"input_args\\\": \\\"dna_sequence - A string representing a DNA sequence\\\",\\n\\\"return\\\": \\\"A dictionary containing: 'gc_content' - The GC content of the DNA sequence; 'rna_transcript' - The RNA transcript of the DNA sequence; 'protein' - The amino acid sequence that the DNA codes for.\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a history enthusiast with a particular interest in colonial-era infrastructure and administration:", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Map Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface will take a historical map and a symbol, and highlight all occurrences of the symbol on the map. Useful for analysing the distribution of certain types of buildings or features in historical urban planning.\\\",\\n\\\"function_name\\\": \\\"find_symbol_on_map\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\", \\\"path_to_symbol\\\"],\\n\\\"return\\\": \\\"A map with the desired symbol highlighted\\\",\\n\\\"depend\\\": [\\\"OpenCV library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mountain rescue team leader who requires reliable vehicles for their operations in rugged terrain", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Condition Check Interface\\\",\\n\\\"description\\\": \\\"This interface provides comprehensive vehicle history reports using the Carfax API. Users only need to input the Vehicle Identification Number (VIN), and the interface will return the vehicle's history, including accidents, title information, and service history.\\\",\\n\\\"function_name\\\": \\\"get_vehicle_history\\\",\\n\\\"input_args\\\": \\\"vin\\\",\\n\\\"return\\\": \\\"Vehicle history report in JSON format\\\",\\n\\\"depend\\\": \\\"requests library, Carfax API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A legal advisor specializing in negotiating contracts and securing intellectual property rights for TV writers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Copyright Infringement Checker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check if their content is being used elsewhere on the web without their permission. It uses the Google Custom Search API to search for similar content and returns a list of links to webpages where similar content is found.\\\",\\n\\\"function_name\\\": \\\"copyright_infringement_checker\\\",\\n\\\"input_args\\\": [\\\"query\\\", \\\"api_key\\\", \\\"cse_id\\\", \\\"num\\\"],\\n\\\"return\\\": \\\"A list of URLs where similar content is found.\\\",\\n\\\"depend\\\": \\\"Google Custom Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an introverted sociology major graduate who dislikes corporate jargon and has little interest in marketing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Jargon Removal Interface\\\",\\n\\\"description\\\": \\\"This interface translates corporate jargon-filled English text into plain, understandable English. It is useful for those who find it difficult to understand corporate or marketing language.\\\",\\n\\\"function_name\\\": \\\"remove_jargon\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"translated_text\\\",\\n\\\"depend\\\": \\\"HuggingFace Transformers library (T5)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curious mathematician intrigued by algebraic methods for solving eigenvalue problems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Algebraic Eigenvalue Calculator Interface\\\", \\n\\\"description\\\": \\\"This interface calculates the eigenvalues and eigenvectors of a matrix using algebraic methods.\\\", \\n\\\"function_name\\\": \\\"solve_eigenvalue_problem\\\", \\n\\\"input_args\\\": [\\\"matrix\\\"], \\n\\\"return\\\": [\\\"eigenvalues\\\", \\\"eigenvectors\\\"], \\n\\\"depend\\\": [\\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a committed follower of Jameer Nelson who has been supporting him since his college basketball days.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Player Statistics Interface\\\",\\n  \\\"description\\\": \\\"Interface to get basketball player's career statistics\\\",\\n  \\\"function_name\\\": \\\"get_player_statistics\\\",\\n  \\\"input_args\\\": [\\\"player_name\\\"],\\n  \\\"return\\\": \\\"Player's career statistics\\\",\\n  \\\"depend\\\": \\\"requests library, BallDontLie API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A producer who values diversity of opinions and ensures fair representation on air", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Source Bias Detection Interface\\\",\\n\\\"description\\\": \\\"An interface that leverages the NewsAPI and a pre-trained model from huggingface to fetch news related to a certain topic from various sources and detect if the news content is biased or offensive.\\\",\\n\\\"function_name\\\": \\\"detect_news_bias\\\",\\n\\\"input_args\\\": [\\\"topic\\\"],\\n\\\"return\\\": \\\"A dictionary with news sources as keys and their respective bias level ('NOT' or 'OFF') as values.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"transformers\\\", \\\"torch\\\"], \\\"Web APIs\\\": [\\\"NewsAPI\\\"], \\\"Machine learning models\\\": [\\\"cardiffnlp/twitter-roberta-base-offensive\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A popular tech blogger known for their in-depth tutorials on Java batch processing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Java Code Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the path to a Java file as input and returns a complexity report of the Java code.\\\",\\n\\\"function_name\\\": \\\"analyze_java_code\\\",\\n\\\"input_args\\\": {\\\"path_to_file\\\": \\\"The file path to the Java code.\\\"},\\n\\\"return\\\": {\\\"raw_metrics\\\": \\\"A dict of raw metrics of the code, including LOC (Lines of Code), LLOC (Logical Lines of Code), SLOC (Source Lines of Code), comments, multi, blank, and single_comments\\\", \\\"complexity_metrics\\\": \\\"A list of Function objects, each representing a function or method in the code and its associated complexity metrics.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"radon\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A local chef and owner of a nearby restaurant in Minneapolis", "synthesized text": "\"{\\n    \\\"Chicken Parmesan\\\": {\\n        \\\"calories\\\": 350,\\n        \\\"protein\\\": \\\"25g\\\",\\n        \\\"fat\\\": \\\"10g\\\",\\n        \\\"carbohydrates\\\": \\\"30g\\\"\\n    },\\n    \\\"Spaghetti Carbonara\\\": {\\n        \\\"calories\\\": 500,\\n        \\\"protein\\\": \\\"20g\\\",\\n        \\\"fat\\\": \\\"25g\\\",\\n        \\\"carbohydrates\\\": \\\"50g\\\"\\n    }\\n}\"", "description": "tool development"}
{"input persona": "a teenager who believes bisexuality is a stage, not an identity.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bisexuality Awareness Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the summary of a Wikipedia page on a given topic, providing users with a broad understanding of the topic. It's particularly helpful for educating users and dispelling misconceptions on various subjects.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_summary\\\",\\n\\\"input_args\\\": \\\"topic\\\",\\n\\\"return\\\": \\\"Summary of the Wikipedia page on the given topic.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young couple who are planning their first road trip and seek guidance on routes and attractions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Route and Attraction Planner Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the HERE Routing API and TripAdvisor API to provide the most efficient route and top attractions for a road trip. The user inputs the starting city, destination city, and the number of stops they wish to make.\\\",\\n  \\\"function_name\\\": \\\"get_route_and_attractions\\\",\\n  \\\"input_args\\\": {\\n    \\\"start_city\\\": \\\"The starting city of the road trip. Input type: string\\\",\\n    \\\"end_city\\\": \\\"The destination city of the road trip. Input type: string\\\",\\n    \\\"num_stops\\\": \\\"The number of stops the user wishes to make along the route. Input type: int\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"route\\\": \\\"A list of geographical coordinates (latitude and longitude) that represents the most efficient route. Return type: list\\\",\\n    \\\"attractions\\\": \\\"A list of dictionaries, each of which includes a city and its top attractions. Return type: list of dictionaries\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"HERE Routing API\\\", \\\"TripAdvisor API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A 5-year-old child who has experienced severe abuse and neglect, struggling with trust and emotional regulation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emotion Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the emotion expressed in a text using a pre-trained model from TensorFlow Hub. The model can recognize six basic emotions: 'anger', 'fear', 'joy', 'love', 'sadness', 'surprise'.\\\",\\n\\\"function_name\\\": \\\"predict_emotion\\\",\\n\\\"input_args\\\": [\\\"model\\\", \\\"text\\\"],\\n\\\"return\\\": \\\"Predicted emotion as a string\\\",\\n\\\"depend\\\": \\\"TensorFlow Hub, TensorFlow, NumPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A UX designer focused on creating intuitive and user-friendly payment interfaces", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stripe Payment Interface\\\",\\n\\\"description\\\": \\\"An interface for processing payments using the Stripe API. Users input the necessary payment details and the interface processes the payment and returns a confirmation message.\\\",\\n\\\"function_name\\\": \\\"process_payment\\\",\\n\\\"input_args\\\": {\\n    \\\"stripe_api_key\\\": \\\"Your Stripe API key\\\",\\n    \\\"card_number\\\": \\\"Credit card number\\\",\\n    \\\"card_exp_month\\\": \\\"Card expiration month\\\",\\n    \\\"card_exp_year\\\": \\\"Card expiration year\\\",\\n    \\\"cvc\\\": \\\"Card verification code\\\",\\n    \\\"amount\\\": \\\"Amount to be charged in cents\\\"\\n},\\n\\\"return\\\": \\\"A confirmation message indicating the payment has been processed.\\\",\\n\\\"depend\\\": \\\"Stripe API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a resident of Radley village and a frequent participant in local events", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Google Calendar API to create reminders for local events. The user inputs the name of the event and the date and time, and the interface adds the event to their Google Calendar and sets a reminder.\\\",\\n\\\"function_name\\\": \\\"set_event_reminder\\\",\\n\\\"input_args\\\": [\\\"event_name\\\", \\\"event_date_time\\\"],\\n\\\"return\\\": \\\"A string indicating the event has been created and providing the Google Calendar link to the event.\\\",\\n\\\"depend\\\": [\\\"googleapiclient.discovery\\\", \\\"google_auth_oauthlib.flow\\\", \\\"google.auth.transport.requests\\\", \\\"datetime\\\", \\\"pickle\\\", \\\"os.path\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A keyboardist with a passion for synthesizers and creating new sounds", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Synthesizer Interface\\\",\\n\\\"description\\\": \\\"This interface generates a new sound synthesis using MIDI libraries for a given sequence of notes and tempo. The synthesized sound is saved as a MIDI file.\\\",\\n\\\"function_name\\\": \\\"create_sound_synthesis\\\",\\n\\\"input_args\\\": [\\\"notes\\\", \\\"tempo\\\"],\\n\\\"return\\\": \\\"A string indicating the successful creation and saving of the MIDI file with the synthesized sound.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"mido\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A performance testing expert who helps identify bottlenecks and provides recommendations for optimization", "synthesized text": "\"{\\n\\\"name\\\": \\\"Website Performance Testing Interface\\\", \\n\\\"description\\\": \\\"This interface tests the performance of a website by measuring its load time. Users only need to input the URL of the website they want to test, and our interface will return the time taken to load the website.\\\", \\n\\\"function_name\\\": \\\"test_website_performance\\\", \\n\\\"input_args\\\": [\\\"url\\\"], \\n\\\"return\\\": \\\"load_time (in seconds)\\\", \\n\\\"depend\\\": \\\"Python library: pyppeteer\\\"\\n}\"", "description": "tool development"}
{"input persona": "Um gerente de produto em uma empresa de tecnologia que busca novas aplicações de IA para melhorar a experiência do usuário mobile", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface de Tradu\\u00e7\\u00e3o de Texto\\\",\\n\\\"description\\\": \\\"Uma interface que usa a API de tradu\\u00e7\\u00e3o do Google Cloud para traduzir textos inseridos para o idioma de destino especificado.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"target_language\\\"],\\n\\\"return\\\": \\\"Tradu\\u00e7\\u00e3o do texto para o idioma de destino.\\\",\\n\\\"depend\\\": \\\"API de tradu\\u00e7\\u00e3o do Google Cloud\\\"\\n}\"", "description": "tool development"}
{"input persona": "A university professor who is excellent at problem-solving and has a broad knowledge of LaTeX and Overleaf, but isn't a big fan of Overleaf's UI design.", "synthesized text": "\"{\\n\\\"name\\\": \\\"LaTeX Document Compilation Interface\\\",\\n\\\"description\\\": \\\"This interface compiles LaTeX documents using the LaTeX command-line utilities. The user only needs to provide the path to the LaTeX file, and the interface will return a PDF file.\\\",\\n\\\"function_name\\\": \\\"compile_latex_to_pdf\\\",\\n\\\"input_args\\\": [\\\"path_to_latex\\\"],\\n\\\"return\\\": \\\"Path to the compiled PDF file or None if the compilation fails.\\\",\\n\\\"depend\\\": [\\\"Python's subprocess module\\\", \\\"LaTeX command-line utilities\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A steelworker who has been with the EVRAZ company for decades and believes in the industry's resilience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Steel Price Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the future price of steel given a number of months into the future.\\\",\\n\\\"function_name\\\": \\\"predict_steel_price\\\",\\n\\\"input_args\\\": [\\\"months_ahead\\\"],\\n\\\"return\\\": \\\"Predicted price of steel.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn.ensemble.RandomForestRegressor\\\", \\\"steel_price_model.pkl\\\", \\\"latest_steel_prices.csv\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an overly-enthusiastic University of Ottawa student and a massive GeeGees fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Score Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the latest sports scores for a particular team, using the 'TheSportsDB' API\\\",\\n\\\"function_name\\\": \\\"get_latest_scores\\\",\\n\\\"input_args\\\": \\\"team_name - The name of the team to fetch scores for\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing details about a recent event, including the event name, date, and score\\\",\\n\\\"depend\\\": \\\"requests library, TheSportsDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A community outreach worker who tries to steer her brother away from the underworld", "synthesized text": "\"{\\n\\\"name\\\": \\\"Criminal Record Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks for criminal records of a person using their name and birthdate. Returns the criminal records of the person.\\\",\\n\\\"function_name\\\": \\\"get_criminal_records\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"birthdate\\\"],\\n\\\"return\\\": \\\"Criminal records of the person\\\",\\n\\\"depend\\\": \\\"Public Records API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An inspiring young woman planning to major in physics and debunk pseudoscience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physics Equation Solver Interface\\\",\\n\\\"description\\\": \\\"An interface that can solve physics equations. The user inputs the equation and the variable to solve for, and the interface returns the solution.\\\",\\n\\\"function_name\\\": \\\"physics_equation_solver\\\",\\n\\\"input_args\\\": [\\\"equation\\\", \\\"variable\\\"],\\n\\\"return\\\": \\\"Solution to the physics equation for the specified variable.\\\",\\n\\\"depend\\\": \\\"sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A brilliant and meticulous law clerk who provides invaluable research and analysis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Case Search Interface\\\",\\n\\\"description\\\": \\\"This interface fetches details of legal cases based on a keyword input by the user. The interface leverages the CourtListener API.\\\",\\n\\\"function_name\\\": \\\"fetch_legal_cases\\\",\\n\\\"input_args\\\": {\\\"keyword\\\": \\\"A string input representing the keyword related to a legal case.\\\"},\\n\\\"return\\\": \\\"A list of dictionaries, with each dictionary containing the 'id', 'name', and 'summary' of a legal case.\\\",\\n\\\"depend\\\": \\\"Python's requests library, CourtListener API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curious local history enthusiast who grew up in Andhra Pradesh but not in the Tirupati district.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Monuments Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches data about historical monuments in a specific location from Wikipedia.\\\",\\n\\\"function_name\\\": \\\"get_historical_monuments\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"The name of the location for which to fetch historical monument information.\\\"\\n},\\n\\\"return\\\": \\\"A list of historical monuments in the specified location along with a short description of each monument.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A huge fan of the Lord of the Rings franchise who has been playing the Lord of the Rings Online MMORPG since its initial release.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Information Interface\\\",\\n\\\"description\\\": \\\"Fetches and returns a summary of a character's information in the Lord of the Rings Online MMORPG. The information includes the character's level, race, class, and location.\\\",\\n\\\"function_name\\\": \\\"get_character_info\\\",\\n\\\"input_args\\\": [\\\"character_name\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'name', 'level', 'race', 'class', 'location'. Each key's value is a string representing that aspect of the character.\\\",\\n\\\"depend\\\": \\\"requests library, Lord of the Rings Online MMORPG API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A superstitious fan who believes their team only wins when they wear a specific lucky jersey", "synthesized text": "\"{\\n\\\"name\\\": \\\"Jersey Color Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenAI and SportsDataIO APIs to analyze the color of a sports team's jersey in an image and correlate the team's performance with that color.\\\",\\n\\\"function_name\\\": \\\"analyze_jersey_luck\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"team_id\\\"],\\n\\\"return\\\": \\\"A dictionary containing the dominant color of the jersey, total games played in that jersey, wins in that jersey, and the winning percentage in that jersey.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"cv2\\\", \\\"numpy\\\", \\\"sklearn.cluster.KMeans\\\", \\\"OpenAI API\\\", \\\"SportsDataIO API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A city council member responsible for overseeing the airport expansion project and ensuring its success", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analyzing historical flight data. It takes in an airport ID and a time range, and returns a summary of the flight data.\\\",\\n\\\"function_name\\\": \\\"analyze_flight_data\\\",\\n\\\"input_args\\\": [\\\"airport_id\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"A dictionary containing the busiest days, the most common destination, and the average delay.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"datetime\\\"], \\\"Web APIs\\\": [\\\"OpenSky Network API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A local resident in Tallaght, County Dublin, familiar with the community and the landscape, but not personally acquainted with Diarmuid Rossa Phelan or Keith Conlon. I follow local news closely and have an interest in the welfare of my community.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local News Summarization Interface\\\",\\n\\\"description\\\": \\\"This interface fetches local news articles about Tallaght, County Dublin and provides a summary for each article. The user only needs to input the number of articles they want to summarize.\\\",\\n\\\"function_name\\\": \\\"summarize_articles\\\",\\n\\\"input_args\\\": \\\"num_articles: The number of articles to summarize.\\\",\\n\\\"return\\\": \\\"A list of summaries for each article.\\\",\\n\\\"depend\\\": \\\"This function leverages the GDELT's Global Knowledge Graph (GKG) API to fetch news articles and the Hugging Face Transformers library to summarize these articles.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local farmer who offers a tranquil space on their property for the rehabilitated animals to recover", "synthesized text": "\"{\\n\\\"name\\\": \\\"Animal Sound Classification Interface\\\",\\n\\\"description\\\": \\\"An interface using a pre-trained model from TensorFlow Hub to recognize the sound of different animals from provided audio file.\\\",\\n\\\"function_name\\\": \\\"recognize_animal_sound\\\",\\n\\\"input_args\\\": \\\"audio_file_path\\\",\\n\\\"return\\\": \\\"probable type of animal that made the sound\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Numpy, Soundfile\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired statistician recognized for his contribution to the field of predictive modelling", "synthesized text": "\"{\\n\\\"name\\\": \\\"Predictive Model Validation Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of validating a predictive model using cross-validation techniques. It leverages the scikit-learn library to compute the cross-validation scores of a given model on a dataset.\\\",\\n\\\"function_name\\\": \\\"validate_model\\\",\\n\\\"input_args\\\": {\\n    \\\"model\\\": \\\"The predictive model to be validated.\\\",\\n    \\\"X\\\": \\\"The features or independent variables in the dataset.\\\",\\n    \\\"y\\\": \\\"The target or dependent variable in the dataset.\\\",\\n    \\\"cv\\\": \\\"The number of cross-validation folds (optional, default is 5).\\\"\\n},\\n\\\"return\\\": \\\"The mean and standard deviation of the cross-validated scores.\\\",\\n\\\"depend\\\": \\\"scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a social historian specializing in American philanthropy and women's roles in civic engagement during the late 19th and early 20th centuries.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Document Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses OCR and NER to extract and analyze text from historical documents. Users input the path to an image file of a document, and the interface returns the recognized text and a list of named entities mentioned in the document.\\\",\\n\\\"function_name\\\": \\\"analyze_historical_document\\\",\\n\\\"input_args\\\": [\\\"path_to_image\\\"],\\n\\\"return\\\": \\\"A tuple containing the recognized text as a string, and a list of named entities as tuples (each containing the entity's text and label)\\\",\\n\\\"depend\\\": [\\\"Python PIL library\\\", \\\"Pytesseract\\\", \\\"Spacy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A flight attendant who always saves the best in-flight desserts for the pilot", "synthesized text": "\"{\\n\\\"name\\\": \\\"In-Flight Dessert Allocation Interface\\\",\\n\\\"description\\\": \\\"An interface that manages the allocation of in-flight desserts. It ensures the pilot's preferred dessert is always saved and alerts when any dessert runs out.\\\",\\n\\\"function_name\\\": \\\"allocate_desserts\\\",\\n\\\"input_args\\\": {\\n    \\\"total_desserts\\\": \\\"A dictionary with dessert name as key and its total number available as value\\\",\\n    \\\"pilot_preferred\\\": \\\"A string indicating the pilot's preferred dessert\\\",\\n    \\\"desserts_given\\\": \\\"A list of desserts given out\\\"\\n},\\n\\\"return\\\": \\\"The updated dictionary of remaining desserts or an alert message if a dessert runs out.\\\",\\n\\\"depend\\\": \\\"Python built-in functions\\\"\\n}\"", "description": "tool development"}
{"input persona": "Преподаватель курсов по автоматизации тестирования, который проводит обучение команды разработчиков по применению Selenium", "synthesized text": "\"{\\n\\\"name\\\": \\\"Selenium Test Automation Interface\\\",\\n\\\"description\\\": \\\"Automates a browser action (clicking an element) on a webpage and returns a screenshot of the page after the action.\\\",\\n\\\"function_name\\\": \\\"automate_browser_action\\\",\\n\\\"input_args\\\": {\\n    \\\"url\\\": \\\"The URL of the webpage\\\",\\n    \\\"xpath\\\": \\\"The xpath of the element to be clicked\\\"\\n},\\n\\\"return\\\": \\\"A screenshot of the webpage after the action\\\",\\n\\\"depend\\\": \\\"Selenium WebDriver Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A politically savvy salon owner in Fairfield who regularly discusses current events with patrons.", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Articles Summarization Interface\\\",\\n\\\"description\\\": \\\"This interface takes the URL of a news article and returns a summarized version of the article. It uses a pre-trained model from HuggingFace Transformers to perform the summarization.\\\",\\n\\\"function_name\\\": \\\"summarize_news_article\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"A summarized version of the news article.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\", \\\"transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local retailer who purchases products in bulk for resale", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bulk Purchase Discount Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates the total cost after applying a discount for bulk purchases. Input the original price of the item, the number of items being purchased, and the discount rate. The interface returns the final price after discount.\\\",\\n\\\"function_name\\\": \\\"calculate_bulk_discount\\\",\\n\\\"input_args\\\": [\\\"original_price\\\", \\\"items_count\\\", \\\"discount_rate\\\"],\\n\\\"return\\\": \\\"final_price\\\",\\n\\\"depend\\\": [\\\"Built-in Python mathematical operations\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A petroleum engineer who wrestles with the ethical implications of their work", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Carbon Footprint Calculation Interface\\\",\\n  \\\"description\\\": \\\"A tool that calculates the estimated carbon footprint of extracted oil\\\",\\n  \\\"function_name\\\": \\\"calculate_carbon_footprint\\\",\\n  \\\"input_args\\\": \\\"oil_extracted (in barrels)\\\",\\n  \\\"return\\\": \\\"Estimated carbon footprint (in tons of CO2)\\\",\\n  \\\"depend\\\": \\\"Carbon Intensity API from carbon-intensity.org.uk\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local resident whose family suffers from health issues due to the contaminated water", "synthesized text": "\"{\\n\\\"name\\\": \\\"Water Quality Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a path to a CSV file containing water quality data and returns a summary of the water quality, highlighting high-risk contaminants.\\\",\\n\\\"function_name\\\": \\\"analyze_water_quality\\\",\\n\\\"input_args\\\": \\\"csv_file_path\\\",\\n\\\"return\\\": \\\"dictionary of high-risk contaminants\\\",\\n\\\"depend\\\": \\\"Python library: pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long-distance partner who understands the importance of affordable travel for maintaining their relationship", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Flight Price Alert Interface\\\", \\n  \\\"description\\\": \\\"This interface allows users to get the lowest available price for flights between two airports and set up a price alert to notify them when there is a significant drop in the price.\\\", \\n  \\\"function_name\\\": [\\\"get_flight_prices\\\", \\\"setup_price_alert\\\"], \\n  \\\"input_args\\\": {\\\"get_flight_prices\\\": [\\\"departure_airport\\\", \\\"destination_airport\\\"], \\\"setup_price_alert\\\": [\\\"departure_airport\\\", \\\"destination_airport\\\", \\\"email\\\"]}, \\n  \\\"return\\\": {\\\"get_flight_prices\\\": \\\"min_price\\\", \\\"setup_price_alert\\\": \\\"alert_success\\\"}, \\n  \\\"depend\\\": \\\"Skyscanner API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated travel agent specializing in tailor-made trips around the United Kingdom", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the price of a flight based on the departure location, destination, and date of travel. It uses a pre-trained regression model from TensorFlow.\\\",\\n\\\"function_name\\\": \\\"predict_flight_price\\\",\\n\\\"input_args\\\": {\\n    \\\"departure\\\": \\\"The departure location of the flight, as a string.\\\",\\n    \\\"destination\\\": \\\"The destination of the flight, as a string.\\\",\\n    \\\"date\\\": \\\"The proposed date of travel, as a string in the format 'YYYY-MM-DD'.\\\"\\n},\\n\\\"return\\\": \\\"An estimated price for the flight, as a float.\\\",\\n\\\"depend\\\": \\\"This function depends on the TensorFlow and pandas Python libraries, as well as a pre-trained regression model stored locally as 'flight_price_model.h5'.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local school principal dedicated to improving the quality of education in Malakand", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Automated Quiz Generator\\\",\\n  \\\"description\\\": \\\"This interface generates multiple choice questions based on provided text.\\\",\\n  \\\"function_name\\\": \\\"generate_quiz\\\",\\n  \\\"input_args\\\": {\\n    \\\"text\\\": \\\"The input text on which to base the quiz questions.\\\",\\n    \\\"num_questions\\\": \\\"The number of questions to generate (optional, default is 5).\\\"\\n  },\\n  \\\"return\\\": \\\"A list of multiple-choice questions based on the input text.\\\",\\n  \\\"depend\\\": \\\"Requires the OpenAI GPT-3 'davinci-codex' model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long-term fan of Kenya Grace Johnson", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Track Artist's New Release Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Spotify's Web API to track an artist's new release. The user simply inputs the artist's name, and the interface will return the latest release from that artist.\\\",\\n  \\\"function_name\\\": \\\"get_artist_latest_release\\\",\\n  \\\"input_args\\\": [\\\"artist_name\\\"],\\n  \\\"return\\\": \\\"A dictionary containing information about the artist's latest album. If the artist is not found on Spotify, the interface will return 'Artist not found on Spotify.'\\\",\\n  \\\"depend\\\": [\\\"spotipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A loyal customer of Mrs. Bectors Food products who lives in southern India", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Availability Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks the availability of a specific product in southern India on the Mrs. Bectors Food products website.\\\",\\n\\\"function_name\\\": \\\"check_product_availability\\\",\\n\\\"input_args\\\": {\\\"product_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"availability\\\": \\\"boolean\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a hard-core fan of McKinley Dixon", "synthesized text": "\"{\\n\\\"name\\\": \\\"Track Lyrics Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface leverages the Genius API to retrieve the lyrics of a specified song, and then uses the Natural Language Toolkit (NLTK) to analyze the lyrics and return the most common words.\\\",\\n\\\"function_name\\\": \\\"analyze_lyrics\\\",\\n\\\"input_args\\\": [\\\"artist\\\", \\\"song_title\\\"],\\n\\\"return\\\": \\\"A list of tuples, where each tuple contains a word from the song's lyrics and its frequency of occurrence.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\", \\\"bs4\\\", \\\"re\\\", \\\"nltk\\\"], \\\"web APIs\\\": [\\\"Genius API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a professor of cyber security who was one of Howard Schmidt's former students", "synthesized text": "\"{\\n\\\"name\\\": \\\"Network Security Scan Interface\\\",\\n\\\"description\\\": \\\"An interface that performs a security scan on a network to identify open ports that could be potential security vulnerabilities.\\\",\\n\\\"function_name\\\": \\\"scan_network\\\",\\n\\\"input_args\\\": \\\"target_ip\\\",\\n\\\"return\\\": \\\"List of open ports\\\",\\n\\\"depend\\\": \\\"Python's socket and os libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A shrewd businessperson who knows how to market the acrobat's skills to a wider audience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Captioning Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained BERT model from the huggingface transformers library to automatically generate captions for a given video.\\\",\\n\\\"function_name\\\": \\\"generate_caption\\\",\\n\\\"input_args\\\": \\\"path_to_video: The path to the video file that we want to generate captions for.\\\",\\n\\\"return\\\": \\\"A list of captions for the video.\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library (BERT model and tokenizer), OpenCV library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A grandchild studying anthropology and writing a research paper on the role of religion in ancient civilizations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Data Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Europeana APIs to extract historical records related to a specific civilization and keyword. The users can input the civilization name and the keyword (for example, religion), and the interface will return a list of relevant historical records.\\\",\\n\\\"function_name\\\": \\\"extract_historical_records\\\",\\n\\\"input_args\\\": [\\\"civilization\\\", \\\"keyword\\\"],\\n\\\"return\\\": \\\"List of relevant historical records (titles).\\\",\\n\\\"depend\\\": \\\"Europeana APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A makeup counter sales manager who provides the student with exclusive discounts and sales events", "synthesized text": "\"{\\n\\\"name\\\": \\\"Discounted Products Search Interface\\\",\\n\\\"description\\\": \\\"This interface will return a list of discounted makeup products in the category of interest.\\\",\\n\\\"function_name\\\": \\\"get_discounted_makeup_products\\\",\\n\\\"input_args\\\": \\\"category - a string that represents the category of makeup products\\\",\\n\\\"return\\\": \\\"A list of strings, each string represents a discounted makeup product in the category of interest.\\\",\\n\\\"depend\\\": \\\"CosmeticsAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A travel blogger looking to increase organic traffic to their website by targeting popular destination search terms", "synthesized text": "\"{\\n\\\"name\\\": \\\"SEO Keyword Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Trends API to fetch popular search terms related to a given keyword. The interface will return a list of top related search queries that the blogger can use to optimize their blog posts for SEO.\\\",\\n\\\"function_name\\\": \\\"get_related_queries\\\",\\n\\\"input_args\\\": \\\"keyword\\\",\\n\\\"return\\\": \\\"List of popular related search queries\\\",\\n\\\"depend\\\": \\\"Google Trends API, pytrends Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An armchair NFL quarterback from Boston", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Game Statistics Interface\\\",\\n  \\\"description\\\": \\\"This interface retrieves recent game statistics for a specified NFL team. The statistics include total yards, passing yards, rushing yards, turnovers, and more.\\\",\\n  \\\"function_name\\\": \\\"get_recent_game_stats\\\",\\n  \\\"input_args\\\": \\\"team_name\\\",\\n  \\\"return\\\": \\\"game_stats\\\",\\n  \\\"depend\\\": \\\"NFL's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tower controller from a nearby airport who is always trying to outperform the head ground controller", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Flight Traffic Visualization Interface\\\",\\n  \\\"description\\\": \\\"Fetches live aircraft traffic data and plots it on a map. The user specifies their location and a radius, and the interface returns a plot of all aircraft within that radius.\\\",\\n  \\\"function_name\\\": \\\"plot_aircrafts\\\",\\n  \\\"input_args\\\": {\\n    \\\"latitude\\\": \\\"Latitude of the control tower\\\",\\n    \\\"longitude\\\": \\\"Longitude of the control tower\\\",\\n    \\\"radius\\\": \\\"Radius in which to search for aircraft\\\"\\n  },\\n  \\\"return\\\": \\\"A plot displaying all aircraft within the specified radius. The control tower is marked in red.\\\",\\n  \\\"depend\\\": \\\"Openskynetwork API for fetching live aircraft data. Matplotlib for visualizing the data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a St. Louis resident who had been a foster child.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Relevant Documents Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the top 5 relevant documents based on the user query using the ElasticSearch Python client.\\\",\\n\\\"function_name\\\": \\\"get_relevant_documents\\\",\\n\\\"input_args\\\": [\\\"query\\\"],\\n\\\"return\\\": \\\"List of top 5 relevant documents\\\",\\n\\\"depend\\\": [\\\"ElasticSearch Python client\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An environmental science major who studies the impact of chlorine on local waterways and advocates for natural swimming pools", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chlorine Level Detection Interface\\\",\\n\\\"description\\\": \\\"An interface to predict chlorine levels in water samples. The user provides a path to a .csv file containing water sample data, and the interface uses a pre-trained model to predict the chlorine level in the water.\\\",\\n\\\"function_name\\\": \\\"predict_chlorine_level\\\",\\n\\\"input_args\\\": \\\"data_path\\\",\\n\\\"return\\\": \\\"Predicted chlorine levels\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"sklearn\\\", \\\"joblib\\\"],\\n    \\\"machine_learning_models\\\": [\\\"RandomForestRegressor\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A newcomer to the rock music scene who struggles to appreciate complex musical concepts.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Feature Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts various features from a music file, such as tempo, beat frames, and spectral contrast. Users only need to input the path to a music file, and the interface will return a dictionary of the extracted music features.\\\",\\n\\\"function_name\\\": \\\"get_music_features\\\",\\n\\\"input_args\\\": \\\"path_to_music: The path to the music file from which features are to be extracted.\\\",\\n\\\"return\\\": \\\"A dictionary of music features, including tempo, beat frames, and spectral contrast.\\\",\\n\\\"depend\\\": \\\"Python's librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A disillusioned working-class voter looking for policies that address income inequality and healthcare access", "synthesized text": "\"{\\n\\\"name\\\": \\\"Policy Finder Interface\\\",\\n\\\"description\\\": \\\"An interface to help users find policies related to specific topics (e.g., income inequality, healthcare access) using the ProPublica API.\\\",\\n\\\"function_name\\\": \\\"find_policy\\\",\\n\\\"input_args\\\": [\\\"keywords\\\"],\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary contains the ID, title, and summary of a bill related to the given keywords.\\\",\\n\\\"depend\\\": \\\"ProPublica API\\\"\\n}\"", "description": "tool development"}
{"input persona": "นักพัฒนาซอฟต์แวร์ที่เชี่ยวชาญในงานการพัฒนาเว็บไซต์", "synthesized text": "\"{\\n\\\"name\\\": \\\"Website Load Time Check\\\",\\n\\\"description\\\": \\\"This interface checks the load time of a given website.\\\",\\n\\\"function_name\\\": \\\"check_website_load_time\\\",\\n\\\"input_args\\\": \\\"url - the URL of the website to check\\\",\\n\\\"return\\\": \\\"The load time of the website in seconds, or an error message if the website failed to load.\\\",\\n\\\"depend\\\": \\\"Python's urllib and time libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A philosopher and ethicist who questions the moral implications of using drones in warfare", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drone Strike Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface gives an analysis of the ethical implications of drone strikes in a given country. It uses data from the Bureau of Investigative Journalism's API and HuggingFace's transformers library to access GPT-3 for the ethical analysis.\\\",\\n\\\"function_name\\\": \\\"analyze_drone_strikes_ethics\\\",\\n\\\"input_args\\\": \\\"country (string)\\\",\\n\\\"return\\\": \\\"List of ethical analyses for each drone strike (list of strings)\\\",\\n\\\"depend\\\": \\\"Bureau of Investigative Journalism's API, HuggingFace's transformers, GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "an architect who specializes in historical and military architecture.", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Modeling Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that converts 2D architectural floor plans into a basic 3D model for architectural visualization. Utilizes the Open3D library.\\\",\\n\\\"function_name\\\": \\\"floor_plan_to_3d_model\\\",\\n\\\"input_args\\\": [\\\"floor_plan_image_paths\\\"],\\n\\\"return\\\": \\\"Point cloud representation of the 3D model\\\",\\n\\\"depend\\\": [\\\"Open3D library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mysterious hermit who is known to have expertise in evasion tactics and survival skills", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stealth Route Planning Interface\\\",\\n\\\"description\\\": \\\"An interface for planning routes that avoid main roads and heavily populated areas. Inputs are the start and end locations, and the output is a route that maximizes stealth.\\\",\\n\\\"function_name\\\": \\\"get_stealth_route\\\",\\n\\\"input_args\\\": \\\"start_location, end_location\\\",\\n\\\"return\\\": \\\"stealth_route\\\",\\n\\\"depend\\\": \\\"Google Maps API, Uber H3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A homeowner seeking to build a house inspired by Frank Lloyd Wright's principles of organic architecture", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D House Design Interface\\\",\\n\\\"description\\\": \\\"This interface creates a 3D model of a house based on the provided dimensions and rooms.\\\",\\n\\\"function_name\\\": \\\"build_house\\\",\\n\\\"input_args\\\": {\\n    \\\"dimensions\\\": \\\"The overall dimensions of the house (length, width, height).\\\",\\n    \\\"rooms\\\": \\\"A list of rooms with their respective dimensions (length, width, height).\\\"\\n},\\n\\\"return\\\": \\\"No return value. The function displays the 3D model of the house on the screen.\\\",\\n\\\"depend\\\": \\\"Pygame Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cybersecurity expert interested in understanding how network structures impact security vulnerabilities", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Network Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface to analyze a network's structure. It computes various network properties such as average path length, clustering coefficient, and degree distribution.\\\",\\n  \\\"function_name\\\": \\\"analyze_network_structure\\\",\\n  \\\"input_args\\\": \\\"file_path - Path to a file containing a list of edges in a network.\\\",\\n  \\\"return\\\": \\\"A dictionary with keys 'Average Path Length', 'Average Clustering Coefficient', and 'Degree Distribution', and their corresponding values.\\\",\\n  \\\"depend\\\": \\\"NetworkX Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A car manufacturer aiming to produce electric vehicles powered solely by solar energy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Energy Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface that estimates the monthly solar energy production for a given location and system specifications using the PVWatts API from the National Renewable Energy Laboratory (NREL).\\\",\\n\\\"function_name\\\": \\\"get_solar_energy_production\\\",\\n\\\"input_args\\\": {\\n    \\\"latitude\\\": \\\"The latitude of the location.\\\",\\n    \\\"longitude\\\": \\\"The longitude of the location.\\\",\\n    \\\"system_capacity\\\": \\\"The capacity of the system in kW.\\\",\\n    \\\"array_type\\\": \\\"The type of array (0 for Fixed - Open Rack, 1 for Fixed Roof Mounted, 2 for 1-Axis, 3 for 1-Axis Backtracking, 4 for 2-Axis).\\\",\\n    \\\"tilt\\\": \\\"The tilt of the array in degrees.\\\",\\n    \\\"azimuth\\\": \\\"The azimuth of the array in degrees.\\\"\\n},\\n\\\"return\\\": \\\"A list of monthly AC output in kWh.\\\",\\n\\\"depend\\\": \\\"Python's requests library and the PVWatts API from the National Renewable Energy Laboratory (NREL).\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school student shadowing the researcher to gain hands-on experience in the field of pharmaceutical research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Interaction Check Interface\\\",\\n\\\"description\\\": \\\"An interface to check possible interactions between two drugs. It uses DrugBank API to fetch information about the drugs and finds common interactions.\\\",\\n\\\"function_name\\\": \\\"check_drug_interaction\\\",\\n\\\"input_args\\\": {\\\"drug1\\\": \\\"Name of the first drug\\\", \\\"drug2\\\": \\\"Name of the second drug\\\"},\\n\\\"return\\\": \\\"A list of common interactions between the two drugs\\\",\\n\\\"depend\\\": \\\"DrugBank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow teacher known for their exceptional decorating skills and creative ideas for classroom celebrations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Classroom Decoration Ideas Interface\\\",\\n\\\"description\\\": \\\"Interface to retrieve creative decoration ideas for classroom celebrations from Pinterest.\\\",\\n\\\"function_name\\\": \\\"get_classroom_decoration_ideas\\\",\\n\\\"input_args\\\": \\\"occasion - The occasion for which you need decoration ideas.\\\",\\n\\\"return\\\": \\\"A list of creative decoration ideas for the given occasion.\\\",\\n\\\"depend\\\": \\\"Pinterest's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A progressive company that offers on-site daycare facilities and flexible work arrangements for nursing mothers", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Breast Milk Volume Estimation Interface\\\",\\n  \\\"description\\\": \\\"An interface to estimate the volume of breast milk a nursing mother can produce based on her diet, sleep hours, and the baby's age. The interface requires the user to input her daily calorie intake, sleep hours, and the baby's age in months, and it returns an estimated volume of milk production.\\\",\\n  \\\"function_name\\\": \\\"estimate_milk_volume\\\",\\n  \\\"input_args\\\": {\\n    \\\"calorie_intake\\\": \\\"The daily calorie intake of the mother in kcal. Example: 2000\\\",\\n    \\\"sleep_hours\\\": \\\"The number of sleep hours of the mother per day. Example: 8\\\",\\n    \\\"baby_age\\\": \\\"The age of the baby in months. Example: 3\\\"\\n  },\\n  \\\"return\\\": \\\"The estimated volume of breast milk production in ml. Example: 750\\\",\\n  \\\"depend\\\": \\\"TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "The lead singer of a local punk rock band who is inspired by Bowling for Soup's energetic performances", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Tempo Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a song's Spotify URI as input and returns the song's tempo (beats per minute). It helps users understand the rhythm and pacing of the songs that inspire them.\\\",\\n\\\"function_name\\\": \\\"get_song_tempo\\\",\\n\\\"input_args\\\": [\\\"song_uri\\\"],\\n\\\"return\\\": \\\"Song's tempo in beats per minute\\\",\\n\\\"depend\\\": [\\\"Spotify Web API\\\", \\\"spotipy Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A research scientist working on complex deep learning models, relying on specialized AI hardware for faster processing", "synthesized text": "\"{\\n\\\"name\\\": \\\"GPU Availability Checking Interface\\\",\\n\\\"description\\\": \\\"This interface checks whether a GPU is available for TensorFlow to use and returns its name and compute capability, if any. If no GPU is available, it returns a message indicating so.\\\",\\n\\\"function_name\\\": \\\"check_gpu_availability\\\",\\n\\\"input_args\\\": \\\"None\\\",\\n\\\"return\\\": \\\"If a GPU is available, returns a dictionary with keys 'name' and 'compute_capability'. If no GPU is available, returns a string 'No GPU available for TensorFlow to use.'\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A young classmate who eagerly awaits the dad's latest Minecraft creations and enjoys playing together", "synthesized text": "\"{\\n\\\"name\\\": \\\"Minecraft Structure Generator Interface\\\",\\n\\\"description\\\": \\\"Generates Minecraft-like 3D structures from semantic maps using a GAN.\\\",\\n\\\"function_name\\\": \\\"generate_minecraft_structure\\\",\\n\\\"input_args\\\": [\\n    {\\n    \\\"name\\\": \\\"path_to_img\\\",\\n    \\\"type\\\": \\\"String\\\",\\n    \\\"description\\\": \\\"Path to the semantic map image file.\\\"\\n    }\\n],\\n\\\"return\\\": {\\n    \\\"name\\\": \\\"structure\\\",\\n    \\\"type\\\": \\\"3D Array\\\",\\n    \\\"description\\\": \\\"The generated Minecraft-like 3D structure.\\\"\\n},\\n\\\"depend\\\": \\\"GANcraft model from the Magenta project\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retired nuclear physicist who participated in the Atoms for Peace conference in 1958", "synthesized text": "\"{\\n\\\"name\\\": \\\"Radioactive Decay Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the remaining amount of a radioactive substance after a certain time period based on its half-life.\\\",\\n\\\"function_name\\\": \\\"predict_radioactive_decay\\\",\\n\\\"input_args\\\": {\\n    \\\"half_life\\\": \\\"The half-life of the radioactive substance (in the same units as the time).\\\",\\n    \\\"initial_amount\\\": \\\"The initial amount of the radioactive substance.\\\",\\n    \\\"time\\\": \\\"The time period for which to predict the remaining amount (in the same units as the half-life).\\\"\\n},\\n\\\"return\\\": \\\"The remaining amount of the radioactive substance after the specified time period.\\\",\\n\\\"depend\\\": \\\"Python's math library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hydroelectric engineer specializing in harnessing the power of rivers and waterfalls for energy generation", "synthesized text": "\"{\\n\\\"name\\\": \\\"River Flow Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface inputs the site number of a river and the path to a trained machine learning model, and returns a prediction of the future water flow of the river.\\\",\\n\\\"function_name\\\": \\\"predict_river_flow\\\",\\n\\\"input_args\\\": [\\\"site_number\\\", \\\"model_path\\\"],\\n\\\"return\\\": \\\"A float number representing the predicted future water flow.\\\",\\n\\\"depend\\\": \\\"US Geological Survey (USGS) API, requests, pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A content and grateful woman who, due to a birth defect, has spent her whole life using a wheelchair.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wheelchair Accessibility Route Planner Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Maps Directions API to plan a wheelchair-friendly route between the specified start location and destination.\\\",\\n\\\"function_name\\\": \\\"plan_wheelchair_accessible_route\\\",\\n\\\"input_args\\\": {\\n    \\\"start_location\\\": \\\"The starting location of the route. It can be a street address or a name of a well-known place.\\\",\\n    \\\"destination\\\": \\\"The destination of the route. It can be a street address or a name of a well-known place.\\\"\\n},\\n\\\"return\\\": \\\"A list of step-by-step instructions for the wheelchair-accessible route.\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer developing a war game centered on navy battles", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Ship Recognition Interface\\\",\\n  \\\"description\\\": \\\"Identify ships in an image using TensorFlow object detection model\\\",\\n  \\\"function_name\\\": \\\"identify_ships_in_image\\\",\\n  \\\"input_args\\\": {\\\"path_to_image\\\": \\\"String (path to the image file)\\\"},\\n  \\\"return\\\": \\\"List (ship ids identified in the image)\\\",\\n  \\\"depend\\\": {\\\"tensorflow\\\": \\\"2.4.1\\\", \\\"tensorflow_hub\\\": \\\"0.9.0\\\", \\\"PIL\\\": \\\"7.2.0\\\", \\\"numpy\\\": \\\"1.19.5\\\", \\\"model\\\": \\\"https://tfhub.dev/tensorflow/ssd_mobilenet_v1/fpn_640x640/1\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A talented coder with a knack for fixing technical issues during live streams", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Live Stream Technical Issue Resolver Interface\\\",\\n    \\\"description\\\": \\\"Detects and flags potential issues in a live stream in real time.\\\",\\n    \\\"function_name\\\": \\\"resolve_stream_issues\\\",\\n    \\\"input_args\\\": {\\n        \\\"stream_id\\\": \\\"The ID of the live stream to analyze.\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"issues\\\": \\\"A list of dictionaries, each containing the time of the detected issue and a brief description of the issue.\\\"\\n    },\\n    \\\"depend\\\": {\\n        \\\"Python Libraries\\\": [\\\"webrtcvad\\\", \\\"requests\\\", \\\"numpy\\\", \\\"scipy.io\\\", \\\"sklearn.ensemble\\\"],\\n        \\\"Web APIs\\\": [\\\"WebRTC\\\"],\\n        \\\"Machine Learning Models\\\": [\\\"IsolationForest from sklearn for anomaly detection\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "An anonymous chat room user who shares funny stories and jokes to help boost their confidence", "synthesized text": "\"{\\n\\\"name\\\": \\\"Joke Generator Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that fetches a random joke of a specified type using the JokeAPI.\\\",\\n\\\"function_name\\\": \\\"get_random_joke\\\",\\n\\\"input_args\\\": {\\n    \\\"type\\\": \\\"The type of joke the user wants. Possible options include 'General', 'Programming', 'Pun', 'Spooky', 'Christmas'.\\\"\\n},\\n\\\"return\\\": \\\"A string containing a random joke of the specified type.\\\",\\n\\\"depend\\\": \\\"This function depends on the JokeAPI (a web API).\\\"\\n}\"", "description": "tool development"}
{"input persona": "A social media influencer who relies on the server infrastructure to handle the influx of followers and maintain uptime", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Server Load Balancer Interface\\\",\\n    \\\"description\\\": \\\"This interface registers instances with a specified load balancer to ensure the server infrastructure can handle a large influx of followers and maintain uptime.\\\",\\n    \\\"function_name\\\": \\\"register_instances_with_load_balancer\\\",\\n    \\\"input_args\\\": {\\\"load_balancer_name\\\": \\\"name of the load balancer\\\", \\\"instance_ids\\\": \\\"list of IDs of instances to register with the load balancer\\\"},\\n    \\\"return\\\": \\\"A string message indicating that the instances have been registered with the load balancer.\\\",\\n    \\\"depend\\\": \\\"AWS Boto3 SDK\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curious and open-minded individual who enjoys engaging in discussions about unexplained phenomena and shares interesting stories from their own experiences", "synthesized text": "\"{\\n\\\"name\\\": \\\"UFO Sightings Data Interface\\\",\\n\\\"description\\\": \\\"An interface that pulls data from the National UFO Reporting Center (NUFORC) API. The user can input a specific date, and our interface will return all UFO sightings reported on that date.\\\", \\n\\\"function_name\\\": \\\"get_ufo_sightings_on_date\\\", \\n\\\"input_args\\\": {\\\"date\\\": \\\"A string representing a date in the format 'YYYY-MM-DD'\\\"}, \\n\\\"return\\\": {\\\"sightings\\\": \\\"A list of dictionaries. Each dictionary contains the following keys: 'date', 'city', 'state', 'shape', and 'duration'.\\\"},\\n\\\"depend\\\": {\\\"resources\\\": [\\\"requests library\\\", \\\"BeautifulSoup library\\\", \\\"NUFORC API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A young engineer from Germany who is fascinated by autonomous drones and their applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drone Flight Path Planner Interface\\\",\\n\\\"description\\\": \\\"This interface receives the start and end points of a drone's flight and returns an optimized sequence of waypoints for the drone to follow.\\\",\\n\\\"function_name\\\": \\\"plan_drone_path\\\",\\n\\\"input_args\\\": {\\n    \\\"start_location\\\": \\\"The starting point of the drone's flight. This can be a place name or a set of GPS coordinates.\\\",\\n    \\\"end_location\\\": \\\"The end point of the drone's flight. This can be a place name or a set of GPS coordinates.\\\"\\n},\\n\\\"return\\\": \\\"A list of waypoints (GPS coordinates) for the drone to follow.\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "White, middle-aged social worker from a small town in Ohio with a passion for social justice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Demographic Data Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches and returns demographic data for a given region from the U.S. Census Bureau's API.\\\",\\n\\\"function_name\\\": \\\"get_demographic_data\\\",\\n\\\"input_args\\\": {\\\"region\\\": \\\"Name of the state or county\\\"},\\n\\\"return\\\": \\\"A dictionary with demographic data for the region, including population, median age, median household income, and poverty count.\\\",\\n\\\"depend\\\": \\\"requests, pandas, U.S. Census Bureau's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A financial analyst relying on statistical forecasts for investment strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the future stock price based on historical data.\\\",\\n\\\"function_name\\\": \\\"predict_stock_price\\\",\\n\\\"input_args\\\": {\\n    \\\"ticker\\\": \\\"The stock ticker symbol of the company (e.g., 'AAPL' for Apple Inc.)\\\",\\n    \\\"future_days\\\": \\\"The number of days in the future for which the user wants the prediction\\\"\\n},\\n\\\"return\\\": \\\"Array of predicted stock prices for the specified number of future days\\\",\\n\\\"depend\\\": \\\"pandas, sklearn, pandas_datareader, datetime\\\"\\n}\"", "description": "tool development"}
{"input persona": "A game design student who aspires to create the next big fighting game", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fighting Game Character Animation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to generate character animations from a single static sprite image. It is useful for game design students or anyone interested in creating animations for games.\\\",\\n\\\"function_name\\\": \\\"generate_animation_frames\\\",\\n\\\"input_args\\\": \\\"path_to_img - A string representing the path to the static sprite image file\\\",\\n\\\"return\\\": \\\"A string representing the path to the generated GIF file containing the animation frames\\\",\\n\\\"depend\\\": \\\"This function depends on the TensorFlow and TensorFlow Hub Python libraries, as well as the 'magenta/arbitrary-image-stylization-v1-256' model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graphic designer who contributes to the Noto Fonts project by creating and refining font assets", "synthesized text": "\"{\\n\\\"name\\\": \\\"Font Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a new font style for a given character using a pre-trained GAN model.\\\",\\n\\\"function_name\\\": \\\"generate_font\\\",\\n\\\"input_args\\\": [\\\"character - The character for which the font is to be generated.\\\", \\\"style - The desired style of the font.\\\"],\\n\\\"return\\\": \\\"A PIL Image object of the character in the desired font style.\\\",\\n\\\"depend\\\": \\\"tensorflow, numpy, PIL\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Elvis fan who holds classic rock'n'roll in high esteem and is fiercely proud of American values.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Lyrics Generation Interface\\\",\\n\\\"description\\\": \\\"An interface to generate song lyrics in the style of classic rock'n'roll given a starting lyric or theme.\\\",\\n\\\"function_name\\\": \\\"generate_song_lyrics\\\",\\n\\\"input_args\\\": {\\n    \\\"starting_lyrics\\\": \\\"Type: String, Description: The starting lyrics or theme of the song.\\\"\\n},\\n\\\"return\\\": \\\"Type: String, Description: The generated song lyrics in the style of classic rock'n'roll.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old resident of Palisade, Colorado who used to work in the coal mine.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Monitor Interface\\\",\\n\\\"description\\\": \\\"This interface takes the user's location and returns the current air quality index and associated health recommendations using the Breezometer API.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"a tuple of latitude and longitude\\\"},\\n\\\"return\\\": {\\\"air_quality_index\\\": \\\"the current air quality index\\\", \\\"health_recommendation\\\": \\\"associated health recommendations\\\"},\\n\\\"depend\\\": \\\"Breezometer API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An app startup founder seeking assistance in migrating their existing codebase to ARC", "synthesized text": "\"{\\n\\\"name\\\": \\\"Codebase Migration Interface\\\",\\n\\\"description\\\": \\\"This interface runs the ARC migration process in the Xcode for Objective-C code.\\\",\\n\\\"function_name\\\": \\\"migrate_to_arc\\\",\\n\\\"input_args\\\": {\\n\\\"project_directory\\\": \\\"The directory of the project which needs to be migrated to ARC.\\\"\\n},\\n\\\"return\\\": \\\"A string message indicating the success or failure of the migration.\\\",\\n\\\"depend\\\": \\\"Python's built-in subprocess library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young person searching for potential partners on a dating app who values good education and job status.", "synthesized text": "\"{\\n\\\"name\\\": \\\"User Profile Ranking Interface\\\",\\n\\\"description\\\": \\\"This interface uses LinkedIn API to gather information about potential matches' education and job status. It takes the LinkedIn profiles of potential matches as input and return their profiles ranked by education and job status.\\\",\\n\\\"function_name\\\": \\\"rank_profiles_by_education_and_job\\\",\\n\\\"input_args\\\": [\\\"profile_urls\\\"],\\n\\\"return\\\": \\\"A list of profile names ranked by education and job status\\\",\\n\\\"depend\\\": \\\"LinkedIn API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a seasoned cattle breeder specializing in Brahman cattle, with a deep appreciation for pedigreed livestock and an active participant in cattle shows and breeding programs.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Cow Pedigree Information Retrieval Interface\\\",\\n    \\\"description\\\": \\\"An interface to retrieve detailed pedigree information of a cattle from online livestock registries. The user inputs the registration number or name of the cattle, and the interface returns the pedigree information.\\\",\\n    \\\"function_name\\\": \\\"get_pedigree_info\\\",\\n    \\\"input_args\\\": \\\"cattle_id\\\",\\n    \\\"return\\\": \\\"A dictionary containing the pedigree information (Name, Registration No., DOB, Sire, Dam) of the cattle.\\\",\\n    \\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A customer service manager seeking to implement chatbots to improve customer support efficiency", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Chatbot Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface that utilizes the DialoGPT model from Hugging Face to generate responses to customer messages. Suitable for implementing chatbots in customer support systems.\\\",\\n  \\\"function_name\\\": \\\"generate_response\\\",\\n  \\\"input_args\\\": [\\\"message\\\"],\\n  \\\"return\\\": \\\"A string that is the chatbot's response to the input message.\\\",\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"microsoft/DialoGPT-medium\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a newly recruited police officer under Lieutenant Anthony Wollschlager’s command", "synthesized text": "\"{\\n\\\"name\\\": \\\"Police Record Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows for quick and easy access to police records. Users only need to input the name of the individual they are searching for, and the interface will return the person's police records.\\\",\\n\\\"function_name\\\": \\\"get_police_records\\\",\\n\\\"input_args\\\": [\\\"name\\\"],\\n\\\"return\\\": \\\"A JSON object containing the police records of the individual.\\\",\\n\\\"depend\\\": [\\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A transfer student from a community college unsure about transferring to a four-year university or entering the workforce", "synthesized text": "\"{\\n\\\"name\\\": \\\"University Admission Chances Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to predict the chances of admission into a university based on GRE score, TOEFL score, university rating, SOP, LOR, CGPA, and research experience.\\\",\\n\\\"function_name\\\": \\\"get_admission_chance\\\",\\n\\\"input_args\\\": [\\\"gre_score\\\", \\\"toefl_score\\\", \\\"university_rating\\\", \\\"sop\\\", \\\"lor\\\", \\\"cgpa\\\", \\\"research\\\"],\\n\\\"return\\\": \\\"A dictionary with the probabilities of not getting admission ('No Admission') and getting admission ('Admission')\\\",\\n\\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long-time listener and admirer of Simon Yaxley's radio broadcasts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Radio Show Transcription Interface\\\",\\n\\\"description\\\": \\\"An interface that transcribes the content of a radio show into text using a Speech-to-Text model from HuggingFace's transformers.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio - The path to the audio file in WAV format.\\\",\\n\\\"return\\\": \\\"A string containing the transcription of the audio content.\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers, soundfile\\\"\\n}\"", "description": "tool development"}
{"input persona": "A student-athlete who plays for the Pac-12 Conference.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Sports Schedule Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch the upcoming games for a specified sports team from a specified sports league.\\\",\\n  \\\"function_name\\\": \\\"get_upcoming_games\\\",\\n  \\\"input_args\\\": [\\n    {\\n      \\\"name\\\": \\\"sport\\\",\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"The sport the team competes in. For example, 'soccer'.\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"team\\\",\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"The name of the team. For example, 'USC'.\\\"\\n    }\\n  ],\\n  \\\"return\\\": [\\n    {\\n      \\\"name\\\": \\\"upcoming_games\\\",\\n      \\\"type\\\": \\\"list of dictionaries\\\",\\n      \\\"description\\\": \\\"Each dictionary represents an upcoming game and contains information about the game.\\\"\\n    }\\n  ],\\n  \\\"depend\\\": [\\\"requests\\\", \\\"SportsOpenData API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who is considering adopting the Zend Framework for their company's upcoming project", "synthesized text": "\"{\\n\\\"name\\\": \\\"PHP Code Quality Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes the quality of PHP code by checking against the Zend Framework's coding standard and detecting potential bugs, suboptimal code, overcomplicated expressions, and unused parameters, methods, or properties.\\\",\\n\\\"function_name\\\": \\\"analyze_php_code\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_php_file\\\": \\\"The path to a PHP file that needs to be analyzed.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"style_check\\\": \\\"A string containing the output of PHP CodeSniffer, which checks the code against the Zend Framework's coding standard.\\\",\\n    \\\"quality_check\\\": \\\"A string containing the output of PHP Mess Detector, which detects potential bugs, suboptimal code, overcomplicated expressions, and unused parameters, methods, or properties.\\\"\\n},\\n\\\"depend\\\": [\\\"PHP CodeSniffer\\\", \\\"PHP Mess Detector\\\", \\\"subprocess\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A farmer who lives in a rural town and doesn't know much about English language but has prior personal experience with Catholic Charities services.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Charity Services Finder\\\",\\n\\\"description\\\": \\\"This interface translates the user's input charity service name from Spanish to English, and finds the top 5 matching charity services using the Charity Navigator API.\\\",\\n\\\"function_name\\\": \\\"find_charity_services\\\",\\n\\\"input_args\\\": {\\n  \\\"service_name\\\": \\\"The name of the charity service the user is interested in, input in Spanish.\\\"\\n},\\n\\\"return\\\": \\\"A list of the top 5 matching charity services in English.\\\",\\n\\\"depend\\\": \\\"Python requests library for making HTTP requests, huggingface's transformers library for language translation, and Charity Navigator API for finding charity services.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An event organizer making use of digital platforms to create buzz around their events", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Buzz Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Twitter API to post about the event, and the Google Calendar API to schedule the event. Users only need to input the event details, our interface will post a Tweet about the event and schedule it in Google Calendar.\\\",\\n\\\"function_name\\\": \\\"create_event_and_tweet\\\",\\n\\\"input_args\\\": {\\n    \\\"event_name\\\": \\\"Name of the event\\\",\\n    \\\"event_date\\\": \\\"Date of the event in YYYY-MM-DD format\\\",\\n    \\\"event_time\\\": \\\"Time of the event in HH:MM format\\\",\\n    \\\"event_description\\\": \\\"Short description of the event\\\"\\n    },\\n\\\"return\\\": \\\"URL of the event created in Google Calendar\\\",\\n\\\"depend\\\": \\\"This function leverages the Twitter API, Google Calendar API, and the 'tweepy' and 'googleapiclient' Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mathematics teacher emphasizing the importance and applicability of algebraic logic in computing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Boolean Algebra Simplification Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies Boolean algebraic expressions. The user inputs a Boolean algebraic expression, and the interface returns the simplified form of the expression.\\\",\\n\\\"function_name\\\": \\\"simplify_boolean_algebra\\\",\\n\\\"input_args\\\": \\\"expression - a string representing a Boolean algebraic expression. The expression can contain variables 'x', 'y', 'z', and operators 'AND', 'OR', 'NOT'. For example, 'OR(AND(x, y), AND(x, NOT(y)))'.\\\",\\n\\\"return\\\": \\\"A string representing the simplified Boolean algebraic expression. For example, for the input 'OR(AND(x, y), AND(x, NOT(y)))', the output would be 'x'.\\\",\\n\\\"depend\\\": \\\"This interface leverages the Python sympy library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A horse racing commentator who is a big fan of Grégory Benoist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horse Racing Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for fetching and analyzing performance data of a specific jockey in horse racing\\\",\\n\\\"function_name\\\": \\\"get_jockey_performance\\\",\\n\\\"input_args\\\": \\\"jockey_name\\\",\\n\\\"return\\\": \\\"A dictionary containing 'total_races', 'total_wins' and 'win_percentage' of the specified jockey\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas; Web APIs: RapidAPI's Horse Racing API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A router manufacturer's executive", "synthesized text": "\"{\\n\\\"name\\\": \\\"Internet Speed Measure Interface\\\",\\n\\\"description\\\": \\\"An interface to measure the internet speed including ping latency, and download and upload speed.\\\",\\n\\\"function_name\\\": \\\"measure_internet_speed\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": {\\\"ping\\\": \\\"float (in milliseconds)\\\", \\\"download\\\": \\\"float (in bits per second)\\\", \\\"upload\\\": \\\"float (in bits per_second)\\\"},\\n\\\"depend\\\": [\\\"speedtest-cli library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a devout fan of the Fallout video game series and an avid tabletop enthusiast who has never actually played Fallout: The Board Game.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface for Fallout: The Board Game Information\\\",\\n\\\"description\\\": \\\"This interface uses the Board Game Geek API to retrieve detailed information about a specific board game. The user inputs the name of the board game as a string, and the function returns a dictionary containing the game's name, description, playing time, minimum and maximum number of players, average user rating, and game category.\\\",\\n\\\"function_name\\\": \\\"get_board_game_info\\\",\\n\\\"input_args\\\": \\\"board_game_name\\\",\\n\\\"return\\\": \\\"Dictionary with game's name, description, playing time, minimum and maximum number of players, average user rating, and game category.\\\",\\n\\\"depend\\\": \\\"Requests library, BeautifulSoup library, Board Game Geek API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A philatelist who specializes in collecting notable stamp misprints and errors.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stamp Verification Interface\\\",\\n\\\"description\\\": \\\"An interface that uses OCR to read the text from the stamp image and a pre-trained model to verify whether the stamp contains any misprints or errors\\\",\\n\\\"function_name\\\": \\\"verify_stamp\\\",\\n\\\"input_args\\\": \\\"path_to_img - The path to the image file of the stamp\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'stamp_text' and 'error'. 'stamp_text' contains the text read from the stamp image and 'error' is a boolean which indicates whether the stamp has any misprints/errors or not\\\",\\n\\\"depend\\\": \\\"Python libraries: pytesseract, PIL, tensorflow, tensorflow_hub; Machine Learning Models: OCR model, Image Classification model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A knowledgeable staff member who can recommend high-quality raw food brands and supplements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Food Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes the type of pet and any specific dietary needs or restrictions as input, and recommends high-quality raw food brands and supplements.\\\",\\n\\\"function_name\\\": \\\"pet_food_recommendation\\\",\\n\\\"input_args\\\": [\\\"pet_type\\\", \\\"dietary_needs\\\"],\\n\\\"return\\\": \\\"List of recommended high-quality raw food brands and supplements.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformer library (gpt-2 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A General Aviation (GA) pilot who uses a private aircraft for leisure flights only.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weather Information Interface\\\",\\n  \\\"description\\\": \\\"This interface provides current weather conditions at both departure and arrival airports. It uses ICAO codes of airports as inputs and returns a dictionary with weather conditions such as temperature, humidity, and wind speed at both locations.\\\",\\n  \\\"function_name\\\": \\\"get_weather_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"departure_airport_icao\\\": \\\"String - ICAO code of the departure airport\\\",\\n    \\\"arrival_airport_icao\\\": \\\"String - ICAO code of the arrival airport\\\"\\n  },\\n  \\\"return\\\": \\\"Dictionary - Contains two dictionaries 'departure' and 'arrival', each with fields: 'location' (String - name of the city), 'temperature' (Float - temperature in Kelvin), 'humidity' (Int - humidity percentage), 'wind_speed' (Float - wind speed in meter/sec)\\\",\\n  \\\"depend\\\": \\\"Python library - requests, Web API - OpenWeatherMap\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated Whovian watching a classic Doctor Who episode", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Transcript Search Interface\\\",\\n  \\\"description\\\": \\\"This interface transcribes the audio of a Doctor Who episode and searches the transcript for a specific phrase.\\\",\\n  \\\"function_name\\\": \\\"search_transcript\\\",\\n  \\\"input_args\\\": [\\\"path_to_audio\\\", \\\"phrase\\\"],\\n  \\\"return\\\": \\\"bool\\\",\\n  \\\"depend\\\": [\\\"Google Speech-to-Text API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fan of singing competition shows who has never followed \"The Voice - Hungary\"", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Episode Summary Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve episode summaries of TV shows like 'The Voice - Hungary' from IMDb.\\\",\\n\\\"function_name\\\": \\\"get_episode_summary\\\",\\n\\\"input_args\\\": [\\\"tv_show_id\\\", \\\"season\\\", \\\"episode\\\"],\\n\\\"return\\\": \\\"A string containing the summary of the specified episode.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"IMDb API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A doctoral candidate writing a dissertation on the relation of socio-economic status to recidivism rates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crime Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to analyze the correlation between socio-economic status and recidivism rates from a given dataset.\\\",\\n\\\"function_name\\\": \\\"analyze_recidivism_data\\\",\\n\\\"input_args\\\": {\\n    \\\"csv_file_path\\\": \\\"The path to the CSV file containing the dataset.\\\",\\n    \\\"socio_economic_status_col\\\": \\\"The name of the column in the dataset representing socio-economic status.\\\",\\n    \\\"recidivism_rate_col\\\": \\\"The name of the column in the dataset representing recidivism rates.\\\"\\n},\\n\\\"return\\\": \\\"A correlation coefficient representing the relationship between socio-economic status and recidivism rates.\\\",\\n\\\"depend\\\": \\\"Pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "荷兰的体育记者，专注于荷兰运动员的成就和成长故事。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u8377\\u5170\\u8fd0\\u52a8\\u5458\\u4fe1\\u606f\\u641c\\u7d22\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u7528\\u6237\\u8f93\\u5165\\u8fd0\\u52a8\\u5458\\u7684\\u540d\\u5b57\\uff0c\\u63a5\\u53e3\\u8fd4\\u56de\\u8fd0\\u52a8\\u5458\\u7684\\u76f8\\u5173\\u4fe1\\u606f\\u3002\\\",\\n\\\"function_name\\\": \\\"get_dutch_athlete_info\\\",\\n\\\"input_args\\\": [\\\"athlete_name\\\"],\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": \\\"Wiki API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A statistics professor who provides guidance on the mathematical aspects of encryption", "synthesized text": "\"{\\n\\\"name\\\": \\\"Encryption Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyze the time complexity of a given encryption algorithm and key.\\\",\\n\\\"function_name\\\": \\\"analyze_encryption_complexity\\\",\\n\\\"input_args\\\": \\\"encryption_key - The key used in the encryption algorithm.\\\",\\n\\\"return\\\": \\\"A dictionary with time taken for encryption and decryption.\\\",\\n\\\"depend\\\": \\\"Python's cryptography library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A drilling engineer responsible for optimizing drilling operations and maximizing oil production", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Drilling Optimization Interface\\\",\\n  \\\"description\\\": \\\"An interface to optimize drilling operations using machine learning. The user needs to input the current drilling parameters, and the interface will return the optimal parameters to maximize oil production.\\\",\\n  \\\"function_name\\\": \\\"optimize_drilling\\\",\\n  \\\"input_args\\\": {\\n    \\\"parameters\\\": \\\"A dictionary of current drilling parameters such as rate of penetration, drill bit speed, mud weight etc.\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary of optimal drilling parameters.\\\",\\n  \\\"depend\\\": \\\"tensorflow, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an experienced software developer who finds the Backbone.js framework quite cumbersome, but respects it for its part in web development history.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Simplified Backbone.js Interface in Python\\\",\\n\\\"description\\\": \\\"This interface provides a Pythonic interaction with the Backbone.js framework, offering methods to create, update, fetch, and delete models.\\\",\\n\\\"function_name\\\": [\\\"create_model\\\", \\\"update_model\\\", \\\"fetch_model\\\", \\\"delete_model\\\"],\\n\\\"input_args\\\": {\\n    \\\"create_model\\\": [\\\"model_name (str)\\\", \\\"attributes (dict)\\\"],\\n    \\\"update_model\\\": [\\\"model (Backbone.Model instance)\\\", \\\"attributes (dict)\\\"],\\n    \\\"fetch_model\\\": [\\\"model (Backbone.Model instance)\\\"],\\n    \\\"delete_model\\\": [\\\"model (Backbone.Model instance)\\\"]\\n    },\\n\\\"return\\\": {\\n    \\\"create_model\\\": \\\"Backbone.Model instance\\\",\\n    \\\"update_model\\\": \\\"Updated Backbone.Model instance\\\",\\n    \\\"fetch_model\\\": \\\"Fetched Backbone.Model instance\\\",\\n    \\\"delete_model\\\": \\\"Deleted Backbone.Model instance\\\"\\n    },\\n\\\"depend\\\": \\\"PyBackboneJS library, Backbone.js framework\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful scientist who attributes their career success to their faith-based education", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gene Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a gene sequence as input and returns the GC content of the sequence. GC content is a fundamental metric in gene sequence analysis, indicating the percentage of Guanines and Cytosines in the DNA sequence.\\\",\\n\\\"function_name\\\": \\\"get_gc_content\\\",\\n\\\"input_args\\\": \\\"sequence\\\",\\n\\\"return\\\": \\\"GC content of the input sequence\\\",\\n\\\"depend\\\": \\\"BioPython Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former high school classmate of Allison Gollust who always kept a low profile", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the face_recognition library in Python to determine whether two images contain the same person.\\\",\\n\\\"function_name\\\": \\\"is_same_person\\\",\\n\\\"input_args\\\": [\\\"image_path_1\\\", \\\"image_path_2\\\"],\\n\\\"return\\\": \\\"A boolean indicating whether the two images contain the same person.\\\",\\n\\\"depend\\\": \\\"Python library: face_recognition\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Telugu-speaking entrepreneur from Hyderabad, who is a technology enthusiast and regularly follows current affairs shows on regional television.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"News Article Translation Interface\\\",\\n  \\\"description\\\": \\\"This interface translates news articles from Telugu to English using the 'translate' python library. The user needs to input the text of the article in Telugu, and the interface will return the translated text in English.\\\",\\n  \\\"function_name\\\": \\\"translate_article\\\",\\n  \\\"input_args\\\": {\\n    \\\"article_text\\\": \\\"string\\\",\\n    \\\"from_lang\\\": \\\"string\\\",\\n    \\\"to_lang\\\": \\\"string\\\"\\n  },\\n  \\\"return\\\": \\\"string\\\",\\n  \\\"depend\\\": \\\"translate python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cashier who interacts with customers daily, witnessing the impact of affordable and nutritious food on their lives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Affordable Nutritious Recipe Finder Interface\\\",\\n\\\"description\\\": \\\"This interface takes dietary preferences and a maximum price as input and returns a list of affordable and nutritious recipes within the budget.\\\",\\n\\\"function_name\\\": \\\"find_affordable_nutritious_recipes\\\",\\n\\\"input_args\\\": [\\\"diet\\\", \\\"maxPrice\\\"],\\n\\\"return\\\": \\\"List of affordable and nutritious recipes with their title, price per serving, and nutrition information.\\\",\\n\\\"depend\\\": \\\"Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bicycle courier who believes that speed is not the sole determinant of good service", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"A high-level interface for bicycle couriers to get optimized route directions using the Google Maps Directions API.\\\",\\n\\\"function_name\\\": \\\"get_optimized_route\\\",\\n\\\"input_args\\\": {\\n    \\\"start_location\\\": \\\"The courier's current location.\\\",\\n    \\\"end_location\\\": \\\"The courier's destination.\\\",\\n    \\\"waypoints\\\": \\\"A list of places the courier wants to pass through along the route.\\\"\\n},\\n\\\"return\\\": \\\"A list of directions for the optimized route.\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A morning show co-host who jokes about not being able to keep up with the fast-paced biker lifestyle", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bike Speed Conversion Interface\\\",\\n\\\"description\\\": \\\"Converts the speed of a bike from one unit to another. Accepts inputs for the speed of the bike and the current and desired units.\\\",\\n\\\"function_name\\\": \\\"convert_bike_speed\\\",\\n\\\"input_args\\\": [\\\"speed\\\", \\\"current_unit\\\", \\\"desired_unit\\\"],\\n\\\"return\\\": \\\"The converted speed in the desired unit.\\\",\\n\\\"depend\\\": \\\"Python's built-in libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired casino dealer living in Las Vegas.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Casino Game Simulator\\\",\\n\\\"description\\\": \\\"Simulate the results of casino games such as roulette or blackjack\\\",\\n\\\"function_name\\\": \\\"play_casino_game\\\",\\n\\\"input_args\\\": {\\n    \\\"game_type\\\": \\\"The type of the game the user wants to play. Options include 'roulette' or 'blackjack'\\\",\\n    \\\"bet\\\": \\\"The amount of money the user wants to bet on the game\\\"\\n},\\n\\\"return\\\": \\\"A string that describes the result of the game and the outcome of the user's bet\\\",\\n\\\"depend\\\": \\\"Python's random library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curriculum editor who ensures that textbooks align with the latest educational standards", "synthesized text": "\"{\\n\\\"name\\\": \\\"Educational Standards Alignment Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a given textbook and checks its alignment with the latest educational standards.\\\",\\n\\\"function_name\\\": \\\"check_educational_alignment\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_text\\\": \\\"Path to the text file to be analyzed\\\",\\n    \\\"educational_standards\\\": \\\"List of keywords or phrases representing the latest educational standards\\\"\\n},\\n\\\"return\\\": {\\n    \\\"alignment_report\\\": \\\"A dictionary with each educational standard as a key and its occurrence count in the textbook as the value\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"nltk\\\"],\\n    \\\"Web APIs\\\": [],\\n    \\\"machine learning models\\\": []\\n}\\n}\"", "description": "tool development"}
{"input persona": "A business manager who discusses needs and gives feedback on software solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Software Requirements Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a NLP model to extract key points or requirements from the user's discussion or feedback text.\\\",\\n\\\"function_name\\\": \\\"extract_software_requirements\\\",\\n\\\"input_args\\\": \\\"feedback_text - A string containing the discussion or feedback from the user.\\\",\\n\\\"return\\\": \\\"A string that summarizes the key points or requirements from the user's input text.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young philosopher seeking guidance on the complex connection between religion and ethics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ethics and Religion Connection Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Gensim library's Doc2Vec model to analyze and understand the relationship between two or more documents. Specifically, it analyzes how closely related the topics of religion and ethics are in the philosophical literature.\\\",\\n\\\"function_name\\\": \\\"analyze_relation\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path1\\\": \\\"The path to a text file containing philosophical literature on one topic(e.g., religion)\\\",\\n    \\\"file_path2\\\": \\\"The path to a text file containing philosophical literature on another topic(e.g., ethics)\\\"\\n},\\n\\\"return\\\": \\\"A similarity score indicating the relationship between the two topics.\\\",\\n\\\"depend\\\": \\\"Gensim library's Doc2Vec model, NLTK's word_tokenize function\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diabolical murderer who taunts the detective with cryptic messages and challenges their profiling abilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cryptic Message Decryption Interface\\\",\\n\\\"description\\\": \\\"Decrypts messages encrypted with an Enigma machine\\\",\\n\\\"function_name\\\": \\\"decrypt_enigma_message\\\",\\n\\\"input_args\\\": [\\\"message\\\", \\\"rotor1\\\", \\\"rotor2\\\", \\\"rotor3\\\", \\\"ring_setting1\\\", \\\"ring_setting2\\\", \\\"ring_setting3\\\"],\\n\\\"return\\\": \\\"Decrypted message\\\",\\n\\\"depend\\\": \\\"pyEnigma library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A field epidemiologist who conducts disease surveillance and investigates outbreaks in different regions of Africa", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disease Outbreak News Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves recent disease outbreak news from the specified region using the WHO Disease Outbreak News page.\\\",\\n\\\"function_name\\\": \\\"get_outbreak_news\\\",\\n\\\"input_args\\\": \\\"region - string\\\",\\n\\\"return\\\": \\\"Dictionary with news title as key and link, published date as values\\\",\\n\\\"depend\\\": \\\"requests library, BeautifulSoup library, WHO Disease Outbreak News API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A regional manager who evaluates and sets performance goals for the airline customer service manager", "synthesized text": "\"{\\n\\\"name\\\": \\\"Airline Performance Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a file path to a CSV file with all the performance metrics, and returns a dataframe with the evaluated scores and set goals for each customer service manager.\\\",\\n\\\"function_name\\\": \\\"evaluate_and_set_goals\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A dataframe with the evaluated scores and set goals for each customer service manager.\\\",\\n\\\"depend\\\": \\\"Pandas, Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A restaurateur striving to maintain high food safety standards to protect their customers", "synthesized text": "\"{\\n \\\"name\\\": \\\"Food Safety Inspection Interface\\\",\\n \\\"description\\\": \\\"This interface fetches the hygiene rating of any food business in the UK from the Food Standards Agency's Food Hygiene Rating Scheme (FHRS) API.\\\",\\n \\\"function_name\\\": \\\"get_hygiene_rating\\\",\\n \\\"input_args\\\": \\\"business_id\\\",\\n \\\"return\\\": \\\"Hygiene rating for the given food business\\\",\\n \\\"depend\\\": \\\"Food Standards Agency's Food Hygiene Rating Scheme (FHRS) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film and TV researcher who is fascinated about forgotten actors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Actor Filmography Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve the filmography of a given actor using the IMDB API. The user only needs to input the actor's name, and the interface will return a list of movies or TV shows in which the actor has appeared.\\\",\\n\\\"function_name\\\": \\\"get_actor_filmography\\\",\\n\\\"input_args\\\": \\\"actor_name\\\",\\n\\\"return\\\": \\\"List of movies or TV shows the actor has appeared in\\\",\\n\\\"depend\\\": \\\"requests library, IMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a female pastor running a church in Houston", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sermon Topic Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface generates sermon topic suggestions based on a theme or a Bible verse using a large language model.\\\",\\n\\\"function_name\\\": \\\"generate_sermon_topics\\\",\\n\\\"input_args\\\": {\\\"input_text\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"List of sermon topics\\\",\\n\\\"depend\\\": \\\"Large Language Model (e.g., GPT-3 from OpenAI)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cargo ship captain committed to reducing carbon emissions by implementing eco-friendly practices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"Provides the most fuel-efficient route for a journey to help reduce carbon emissions.\\\",\\n\\\"function_name\\\": \\\"get_optimized_route\\\",\\n\\\"input_args\\\": [\\\"start_coords\\\", \\\"end_coords\\\"],\\n\\\"return\\\": \\\"Most fuel-efficient route as a list of coordinates.\\\",\\n\\\"depend\\\": \\\"OpenRouteService API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud member of Amsterdam's Jewish community", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Shabbat Time Reminder Interface\\\",\\n  \\\"description\\\": \\\"An interface that fetches the start (candle lighting) and end (Havdalah) times for Shabbat based on the user's location.\\\",\\n  \\\"function_name\\\": [\\\"get_shabbat_times\\\", \\\"get_geonameid\\\"],\\n  \\\"input_args\\\": {\\\"get_shabbat_times\\\": [\\\"city\\\"], \\\"get_geonameid\\\": [\\\"city\\\"]},\\n  \\\"return\\\": \\\"A list of strings indicating Shabbat start and end times.\\\",\\n  \\\"depend\\\": {\\\"python library\\\": [\\\"requests\\\"], \\\"web API\\\": [\\\"Hebcal Jewish Calendar\\\", \\\"Geonames\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A writer captivated by the Renaissance period who integrates elements of this era in their stories", "synthesized text": "\"{\\n\\\"name\\\": \\\"Renaissance Artwork Descriptions Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Harvard Art Museums API to return descriptions of artworks from a specified period. In this case, the period is 'Renaissance'.\\\",\\n\\\"function_name\\\": \\\"get_artwork_descriptions\\\",\\n\\\"input_args\\\": \\\"period - The historical period of interest (in this case, 'Renaissance').\\\",\\n\\\"return\\\": \\\"A list of descriptions of artworks from the specified period.\\\",\\n\\\"depend\\\": \\\"requests library, Harvard Art Museums API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a local historian in Kentucky with a deep appreciation for the region's storied past and its cemeteries as important historical sites.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cemetery Graves Information Interface\\\",\\n\\\"description\\\": \\\"Interface to get basic grave information like names and birth-death years of the people interred in a specific cemetery\\\",\\n\\\"function_name\\\": \\\"get_grave_info\\\",\\n\\\"input_args\\\": \\\"cemetery_name\\\",\\n\\\"return\\\": \\\"List of dictionaries each containing the name, birth year, and death year of the person interred there\\\",\\n\\\"depend\\\": \\\"Find a Grave API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cryptographer who uses prime numbers to secure communication systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prime Number Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a prime number of a specified number of bits using Python's cryptography library.\\\",\\n\\\"function_name\\\": \\\"generate_prime_number\\\",\\n\\\"input_args\\\": \\\"bits - The desired number of bits in the prime number.\\\",\\n\\\"return\\\": \\\"A prime number of the specified size.\\\",\\n\\\"depend\\\": \\\"Python's cryptography library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A career consultant from Cape Town who has no strong feelings towards Israel or epidemiology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Market Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes job market trends by scraping job postings from online portals and extracting the most frequently mentioned skills.\\\",\\n\\\"function_name\\\": \\\"analyze_job_market_trends\\\",\\n\\\"input_args\\\": {\\n    \\\"job_title\\\": \\\"The title of the job for which the market trends are to be analyzed.\\\",\\n    \\\"location\\\": \\\"The location where the job market trends are to be analyzed.\\\"\\n},\\n\\\"return\\\": \\\"A list of the top 10 most frequently mentioned skills in job postings for the given job title in the given location.\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests, NLTK\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional diner owner who views the emphasis on organic ingredients as a passing trend", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Menu Optimization Interface\\\",\\n  \\\"description\\\": \\\"Identifies the popularity trends of non-organic food items over the past 5 years. Useful for restaurant owners who want to optimize their menu based on popular demand.\\\",\\n  \\\"function_name\\\": \\\"get_trends\\\",\\n  \\\"input_args\\\": [\\\"menu_items\\\"],\\n  \\\"return\\\": \\\"Dictionary with statistics including count, mean, standard deviation, minimum, 25th percentile, median, 75th percentile, and maximum values for the popularity of each menu item over the past 5 years.\\\",\\n  \\\"depend\\\": {\\\"python library\\\": [\\\"pandas\\\", \\\"pytrends\\\"], \\\"web APIs\\\": [\\\"Google Trends API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An operations manager in a retail company, stressing the importance of data protection in supply chains", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Encryption Interface\\\",\\n\\\"description\\\": \\\"An interface to encrypt sensitive data. It allows users to encrypt their data using a secret key, providing an extra layer of security for data protection.\\\",\\n\\\"function_name\\\": [\\\"encrypt_data\\\", \\\"generate_secret_key\\\"],\\n\\\"input_args\\\": {\\n    \\\"encrypt_data\\\": [\\\"data\\\", \\\"secret_key\\\"],\\n    \\\"generate_secret_key\\\": []\\n    },\\n\\\"return\\\": {\\n    \\\"encrypt_data\\\": \\\"encrypted_data\\\",\\n    \\\"generate_secret_key\\\": \\\"secret_key\\\"\\n    },\\n\\\"depend\\\": \\\"Python cryptography library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical researcher investigating the potential benefits of moisture-wicking materials in wound healing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Moisture Absorption Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to analyze images of a material at different time intervals after being exposed to a known volume of liquid, returning the rate of moisture absorption.\\\",\\n\\\"function_name\\\": \\\"measure_moisture_absorption\\\",\\n\\\"input_args\\\": \\\"image_paths: List of paths to the images in the order they were taken\\\",\\n\\\"return\\\": \\\"List of absorption rates for each time interval\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a fictional detective with a fondness for botany.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant Identification Interface\\\",\\n\\\"description\\\": \\\"This interface takes an image of a plant (leaf, flower, etc.) and returns a list of potential plant species that match the image.\\\",\\n\\\"function_name\\\": \\\"identify_plant_from_image\\\",\\n\\\"input_args\\\": \\\"image_path - a string representing the file path to the image\\\",\\n\\\"return\\\": \\\"A list of strings, each representing a potential plant species that matches the image.\\\",\\n\\\"depend\\\": \\\"Python requests library, Plant.id Plant Identification API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An interior designer seeking professional print services for her client's bespoke wallpaper designs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Print Service Interface\\\",\\n\\\"description\\\": \\\"An interface to print custom designs on wallpaper using the Printful API. The user inputs the path to the design file, and the interface returns a confirmation of the print order.\\\",\\n\\\"function_name\\\": \\\"print_custom_wallpaper\\\",\\n\\\"input_args\\\": [\\\"design_file_path\\\"],\\n\\\"return\\\": \\\"Confirmation of the print order in JSON format\\\",\\n\\\"depend\\\": \\\"Printful API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A big fan of Go who admires Hsu Hao-hung", "synthesized text": "\"{\\n\\\"name\\\": \\\"Go Game Next Move Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts the next move in a Go game based on the current game state using a pretrained model from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"predict_next_move\\\",\\n\\\"input_args\\\": [\\\"game_state\\\"],\\n\\\"return\\\": \\\"A tuple representing the row and column of the suggested next move.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a frugal mom who's passionate about reducing waste and feeding my family healthy meals on a budget.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Recipe Ingredient Substitution Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a recipe as text and returns the same recipe but with possible ingredient substitutions to help save cost, reduce waste, or make the recipe healthier.\\\",\\n  \\\"function_name\\\": \\\"get_ingredient_substitutions\\\",\\n  \\\"input_args\\\": {\\n    \\\"recipe_text\\\": \\\"string\\\"\\n  },\\n  \\\"return\\\": \\\"dictionary where keys are original ingredients and values are lists of possible substitutions\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n    \\\"web APIs\\\": [\\\"Spoonacular API\\\"],\\n    \\\"machine learning models\\\": [\\\"dbmdz/bert-large-cased-finetuned-conll03-english\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A frontend web developer who isn't familiar with cryptography or Netflix's Message Security Layer (MSL)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Netflix MSL Encryption Interface\\\",\\n\\\"description\\\": \\\"A modular high-level interface to encrypt and decrypt messages using Netflix's Message Security Layer (MSL).\\\",\\n\\\"function_name\\\": [\\\"msl_encrypt_message\\\", \\\"msl_decrypt_message\\\"],\\n\\\"input_args\\\": {\\n    \\\"msl_encrypt_message\\\": [\\\"key_id\\\", \\\"encryption_key\\\", \\\"message\\\"], \\n    \\\"msl_decrypt_message\\\": [\\\"key_id\\\", \\\"decryption_key\\\", \\\"encrypted_message\\\"]\\n    },\\n\\\"return\\\": {\\n    \\\"msl_encrypt_message\\\": \\\"encrypted_message\\\", \\n    \\\"msl_decrypt_message\\\": \\\"decrypted_message\\\"\\n    },\\n\\\"depend\\\": \\\"msl (Python package, a Python implementation of Netflix's MSL)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young couple in a polyamorous relationship who are open and transparent about their lifestyle", "synthesized text": "\"{\\n\\\"name\\\": \\\"Couple's Calendar Interface\\\", \\n\\\"description\\\": \\\"This interface uses the Google Calendar API to create an event in the couple's shared Google Calendar. Users input the event details, and the interface creates an event in the Google Calendar.\\\", \\n\\\"function_name\\\": \\\"create_event\\\", \\n\\\"input_args\\\": {\\\"title\\\": \\\"string\\\", \\\"start_time\\\": \\\"datetime string\\\", \\\"end_time\\\": \\\"datetime string\\\", \\\"attendees\\\": \\\"list of strings\\\"}, \\n\\\"return\\\": \\\"string (URL to the created Google Calendar Event)\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young IT professional seeking guidance on building a home lab for computer experiments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Virtual Machine Creation Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of setting up a virtual machine. It uses the Vagrant library to generate a Vagrantfile with the user's chosen operating system, number of CPUs, and amount of memory.\\\",\\n\\\"function_name\\\": \\\"create_vagrant_file\\\",\\n\\\"input_args\\\": {\\n    \\\"os_name\\\": \\\"The name of the operating system to install on the virtual machine. This should be the name of a box from the Vagrant Cloud.\\\",\\n    \\\"num_cpus\\\": \\\"The number of CPUs to allocate to the virtual machine.\\\",\\n    \\\"memory\\\": \\\"The amount of memory (in MB) to allocate to the virtual machine.\\\"\\n},\\n\\\"return\\\": \\\"This function does not return any value. It creates a file named 'Vagrantfile' in the current directory.\\\",\\n\\\"depend\\\": \\\"This function requires the 'os' Python library and the Vagrant software.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a former resident of the Norman Blumberg Apartments in Philadelphia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Neighborhood Crime Report Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Philadelphia Police Department's public safety incident data to provide crime report count in a specific neighbourhood within a date range.\\\",\\n\\\"function_name\\\": \\\"get_crime_reports\\\",\\n\\\"input_args\\\": [\\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"Number of crime reports\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"datetime library\\\", \\\"data.phila.gov API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A historian specialized in the Tytanic event.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tytanic Passenger Survival Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts whether a passenger on the Titanic would have survived given certain features like age, sex, and class.\\\",\\n\\\"function_name\\\": \\\"predict_survival\\\",\\n\\\"input_args\\\": [\\\"path_to_model\\\",\\\"age\\\",\\\"sex\\\",\\\"pclass\\\"],\\n\\\"return\\\": \\\"Prediction of whether the passenger survived ('Survived' or 'Did not survive')\\\",\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"pickle\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An experienced astrophysicist who has conducted extensive research on pulsars", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pulsar Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface reads pulsar data from a .par file and returns relevant pulsar information, such as frequency, period, dispersion measure, binary model, companion mass, and orbital period.\\\",\\n\\\"function_name\\\": \\\"read_pulsar_data\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the .par file containing pulsar data.\\\"},\\n\\\"return\\\": {\\\"name\\\": \\\"The name of the pulsar.\\\",\\n           \\\"frequency\\\": \\\"The frequency of the pulsar.\\\",\\n           \\\"period\\\": \\\"The period of the pulsar.\\\",\\n           \\\"dispersion_measure\\\": \\\"The dispersion measure of the pulsar.\\\",\\n           \\\"binary_model\\\": \\\"The binary model of the pulsar.\\\",\\n           \\\"companion_mass\\\": \\\"The mass of the pulsar's companion star.\\\",\\n           \\\"orbital_period\\\": \\\"The orbital period of the pulsar.\\\"},\\n\\\"depend\\\": \\\"PyPulse library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a contemporary and childhood friend of Thomas R. Stradford", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Sentence Similarity Finder\\\",\\n  \\\"description\\\": \\\"Finds the most similar sentences in a text corpus to a given input sentence using the Universal Sentence Encoder\\\",\\n  \\\"function_name\\\": \\\"find_most_similar_sentences\\\",\\n  \\\"input_args\\\": [\\\"sentences\\\", \\\"input_sentence\\\", \\\"top_k\\\"],\\n  \\\"return\\\": \\\"List of the most similar sentences to the input_sentence from the sentences list\\\",\\n  \\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A physicist studying the effects of different materials on sound propagation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Propagation Simulation Interface\\\",\\n\\\"description\\\": \\\"Simulates the propagation of sound in a room with different types of materials. The user inputs the dimensions of the room, the location of the sound source, the location of the microphone, and the type of material on the walls. The interface returns the sound received by the microphone.\\\",\\n\\\"function_name\\\": \\\"simulate_sound_propagation\\\",\\n\\\"input_args\\\": {\\n\\\"room_dimensions\\\": \\\"A list of three numbers representing the width, depth, and height of the room in meters.\\\",\\n\\\"source_location\\\": \\\"A list of three numbers representing the x, y, and z coordinates of the sound source in the room.\\\",\\n\\\"mic_location\\\": \\\"A list of three numbers representing the x, y, and z coordinates of the microphone in the room.\\\",\\n\\\"wall_material\\\": \\\"A string representing the type of material on the walls. This should be a material available in the pyroomacoustics.materials library.\\\"\\n},\\n\\\"return\\\": \\\"A numpy array representing the sound received by the microphone.\\\",\\n\\\"depend\\\": \\\"pyroomacoustics library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A trauma survivor seeking therapy to cope with the long-term effects of stress", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mental Health Therapist Finder Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Psychology Today's therapist directory to find mental health therapists in a given zip code area.\\\",\\n\\\"function_name\\\": \\\"find_therapists\\\",\\n\\\"input_args\\\": \\\"zip_code\\\",\\n\\\"return\\\": \\\"A list of mental health therapists in the given zip code area.\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup (Python libraries); Psychology Today's therapist directory (Web API)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diligent researcher who provides background information and assists in organizing book tours and events", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Information Gathering Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about upcoming events related to a specified keyword by making a GET request to the Eventbrite API.\\\",\\n\\\"function_name\\\": \\\"get_event_info\\\",\\n\\\"input_args\\\": {\\n    \\\"keyword\\\": \\\"A string containing the keyword related to the event.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"event_info\\\": \\\"A list of dictionaries, each containing the name, start and end times, and URL of an upcoming event.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"],\\n    \\\"Web APIs\\\": [\\\"Eventbrite API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "an owl enthusiast who loves to make comparisons between similar species", "synthesized text": "\"{\\n\\\"name\\\": \\\"Owl Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to compare two owl species by providing brief descriptions and a similarity score based on their images.\\\",\\n\\\"function_name\\\": \\\"compare_owls\\\",\\n\\\"input_args\\\": {\\\"species1\\\": \\\"name of the first owl species\\\", \\\"species2\\\": \\\"name of the second owl species\\\"},\\n\\\"return\\\": {\\\"species1_summary\\\": \\\"brief description of the first owl species\\\", \\\"species2_summary\\\": \\\"brief description of the second owl species\\\", \\\"similarity\\\": \\\"similarity score between the images of the two species\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"wikipediaapi\\\", \\\"PIL\\\", \\\"torchvision\\\", \\\"torch\\\"], \\\"Web APIs\\\": [\\\"Wikipedia API\\\"], \\\"machine learning models\\\": [\\\"ResNet50\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a programming professor who is teaching her students about Supriya—an open-source Python library for SuperCollider.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Supriya Real-Time Audio Synthesis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to generate a sine wave with a specific frequency and duration using the Supriya Python library for SuperCollider. The user inputs a frequency and duration, and the function generates and plays the sine wave.\\\",\\n\\\"function_name\\\": \\\"create_sine_wave\\\",\\n\\\"input_args\\\": {\\\"frequency\\\": \\\"float\\\", \\\"duration\\\": \\\"float\\\"},\\n\\\"return\\\": \\\"None, but generates and plays a sine wave\\\",\\n\\\"depend\\\": {\\\"Python\\\": \\\"3.6+\\\", \\\"Python Libraries\\\":[\\\"supriya\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A nostalgic former fan of Deborah Sim, who used to follow her career closely but lost touch over the years.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Celebrity Latest News Interface\\\",\\n\\\"description\\\": \\\"This interface uses web scraping to get latest news articles about a specific celebrity from Google News.\\\",\\n\\\"function_name\\\": \\\"get_latest_news\\\",\\n\\\"input_args\\\": {\\\"celebrity\\\": \\\"The name of the celebrity.\\\"},\\n\\\"return\\\": \\\"A list containing the titles of the latest news articles about the input celebrity.\\\",\\n\\\"depend\\\": \\\"python libraries: BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "a resilient community member from Paradise, California who lost their home in the Camp Fire.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wildfire Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"Uses data from weather and environmental APIs to assess the risk of a wildfire in a given location.\\\",\\n\\\"function_name\\\": \\\"get_wildfire_risk\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"Risk level of wildfire ('Low Risk', 'Moderate Risk', 'High Risk')\\\",\\n\\\"depend\\\": \\\"requests library, Weather API, Environmental Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A counseling psychologist who helps people cope with work-related stress and improve their interpersonal skills", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emotion Recognition Interface\\\",\\n\\\"description\\\": \\\"Recognizes the emotion in a given text using a pre-trained model from Hugging Face Transformers.\\\",\\n\\\"function_name\\\": \\\"recognize_emotion\\\",\\n\\\"input_args\\\": \\\"text - a string of text to analyze\\\",\\n\\\"return\\\": \\\"A string indicating the recognized emotion, such as 'POSITIVE' or 'NEGATIVE'.\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A now-retired professional football player who underwent several surgeries during his career", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pain Management Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface to track the pain levels of a retired professional football player across various body parts over time. The interface updates a CSV file with the date, body part and pain level.\\\",\\n\\\"function_name\\\": \\\"update_pain_level\\\",\\n\\\"input_args\\\": {\\n    \\\"date\\\": \\\"The date on which the pain level is measured (in 'YYYY-MM-DD' format)\\\",\\n    \\\"body_part\\\": \\\"The body part where the pain is felt\\\",\\n    \\\"pain_level\\\": \\\"The pain level on a scale of 1-10\\\",\\n    \\\"csv_file\\\": \\\"The CSV file where the pain levels are tracked (default is 'pain_tracker.csv')\\\"\\n},\\n\\\"return\\\": \\\"A string confirming successful update of the CSV file\\\",\\n\\\"depend\\\": \\\"pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A devoted Anglican who has been following Dr. Rowan Williams for years", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sermon Transcription Interface\\\",\\n\\\"description\\\": \\\"Transcribe sermons or speeches from an audio file\\\",\\n\\\"function_name\\\": \\\"transcribe_sermon\\\",\\n\\\"input_args\\\": \\\"path_to_audio: str (Path to the audio file)\\\",\\n\\\"return\\\": \\\"str (Transcript of the sermon/speech)\\\",\\n\\\"depend\\\": \\\"Google Cloud Speech-to-Text API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Un piloto profesional que compite en carreras de automóviles a nivel internacional", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lap Time Predictor Interface\\\",\\n\\\"description\\\": \\\"Predict the lap time for a race car driver based on the weather, car configuration, and track.\\\",\\n\\\"function_name\\\": \\\"predict_lap_time\\\",\\n\\\"input_args\\\": [\\\"weather\\\", \\\"car_configuration\\\", \\\"track\\\"],\\n\\\"return\\\": \\\"A single floating point value representing the predicted lap time in seconds.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A person who owns a significant stake in Gamida Cell.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Information Interface\\\",\\n\\\"description\\\": \\\"Fetches stock market data including current price, open price, and close price of a stock using Alpha Vantage API. The user only needs to input the symbol of the stock.\\\",\\n\\\"function_name\\\": \\\"get_stock_market_info\\\",\\n\\\"input_args\\\": \\\"symbol\\\",\\n\\\"return\\\": \\\"A dictionary containing symbol, open_price, high_price, low_price, price, volume, latest_trading_day, previous_close, change, change_percent\\\",\\n\\\"depend\\\": \\\"requests library, Alpha Vantage API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Christian pastor who is a long-term believer in faith healing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verse Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface leverages a pre-trained language model from HuggingFace to provide recommendations of Bible verses based on a given query. This could be useful for a Christian pastor looking for relevant verses based on a particular topic or theme.\\\",\\n\\\"function_name\\\": \\\"get_relevant_bible_verses\\\",\\n\\\"input_args\\\": \\\"query\\\",\\n\\\"return\\\": \\\"A list of Bible verses that are relevant to the query\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am Nancy, a 56-year-old homemaker from Omaha, Nebraska. My interests include knitting, reading non-fiction, and volunteering for non-profit organizations. My only child is now in college, and I have a lot of time to help others and contribute to the community.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Non-profit Organization Finder Interface\\\",\\n\\\"description\\\": \\\"An interface to find non-profit organizations that match a user's interests by leveraging the GlobalGiving API.\\\",\\n\\\"function_name\\\": \\\"find_nonprofit_organizations\\\",\\n\\\"input_args\\\": \\\"interests - a string representing the user's interests\\\",\\n\\\"return\\\": \\\"A list of names of non-profit organizations that match the user's interests.\\\",\\n\\\"depend\\\": \\\"GlobalGiving API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A child raised in a deprived environment, whose personality development is being studied", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Mental Health Risk Assessment Interface\\\",\\n  \\\"description\\\": \\\"Assesses potential mental health risks or signs of emotional distress in a child's text inputs using the BERT model from Hugging Face.\\\",\\n  \\\"function_name\\\": \\\"mental_health_risk_assessment\\\",\\n  \\\"input_args\\\": [\\\"child_text\\\"],\\n  \\\"return\\\": \\\"A string representing the risk level ('LOW', 'MEDIUM', 'HIGH').\\\",\\n  \\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bioinformatician who analyzes genomic data to identify potential oncogenes and tumor suppressor genes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genomic Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that simplifies the process of analyzing genomic data. The user only needs to input the path to a FASTA file, and our interface will return a list of genes and their frequencies in the genome.\\\",\\n\\\"function_name\\\": \\\"analyze_genome\\\",\\n\\\"input_args\\\": \\\"path_to_fasta\\\",\\n\\\"return\\\": \\\"A dictionary where keys are gene names and values are their frequencies in the genome.\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A license examiner responsible for conducting driving tests and assessing road safety skills", "synthesized text": "\"{\\n\\\"name\\\": \\\"Driving Test Analytics Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to assess if a driver has passed or failed the driving test based on driving test data.\\\",\\n\\\"function_name\\\": \\\"pass_or_fail\\\",\\n\\\"input_args\\\": [\\\"model_path\\\", \\\"test_data\\\"],\\n\\\"return\\\": \\\"A string that indicates whether the driver has passed ('Pass') or failed ('Fail') the test.\\\",\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"pre-trained ML model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software development manager responsible for overseeing the implementation of cross-platform applications.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cross-Platform App Test Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to perform cross-platform testing for their web applications. Users need to provide the URL of the application, the name of the browser on which they want to test the application, and the test script. The interface will execute the test and return the results.\\\",\\n\\\"function_name\\\": \\\"execute_cross_platform_test\\\",\\n\\\"input_args\\\": {\\\"url\\\": \\\"string\\\", \\\"browser_name\\\": \\\"string\\\", \\\"test_script\\\": \\\"function\\\"},\\n\\\"return\\\": \\\"The result of the test script execution, which can vary depending on the user's test script.\\\",\\n\\\"depend\\\": \\\"Selenium WebDriver library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A police officer frustrated by the corruption within their own department", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Police Records Search Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch police records associated with a specific person or department. Useful for investigating potential corruption or illegal activities.\\\",\\n  \\\"function_name\\\": \\\"get_police_records\\\",\\n  \\\"input_args\\\": {\\n    \\\"identifier\\\": \\\"A string representing the identifier of the person or department to fetch records for.\\\"\\n  },\\n  \\\"return\\\": \\\"A JSON object containing the fetched police records.\\\",\\n  \\\"depend\\\": \\\"Web API: https://police-records-api.com/api/v1/records\\\"\\n}\"", "description": "tool development"}
{"input persona": "The current factory manager who values practical knowledge and appreciates industrial history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Predictive Maintenance Interface\\\",\\n\\\"description\\\": \\\"An interface that uses machine learning models from scikit-learn to predict the failure of machines in the factory based on historical data. The user only needs to input a CSV file with historical data, and the interface will return a prediction model.\\\",\\n\\\"function_name\\\": \\\"train_predictive_model\\\",\\n\\\"input_args\\\": \\\"file_path: str - the path to the CSV file\\\",\\n\\\"return\\\": \\\"tuple: (model, accuracy) - the trained prediction model and its accuracy score.\\\",\\n\\\"depend\\\": \\\"python libraries: pandas, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful startup founder who has used Cordova to build cross-platform mobile apps", "synthesized text": "\"{\\n\\\"name\\\": \\\"App Size Reduction Interface\\\",\\n\\\"description\\\": \\\"An interface to reduce the size of a Cordova mobile app. It uses the APK Analyzer tool and cordova-clean library to analyze and reduce the size.\\\",\\n\\\"function_name\\\": \\\"reduce_cordova_app_size\\\",\\n\\\"input_args\\\": \\\"cordova_project_path\\\",\\n\\\"return\\\": \\\"A dictionary showing the app size before and after the reduction\\\",\\n\\\"depend\\\": [\\\"Android Studio (APK Analyzer tool)\\\", \\\"cordova-clean library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A middle-class, law-abiding citizen who initially held prejudices towards former convicts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Criminal Record Lookup Interface\\\",\\n\\\"description\\\": \\\"An interface to look up a person's criminal records using the name and location. The data is fetched from an API of a public records or background check service provider.\\\",\\n\\\"function_name\\\": \\\"get_criminal_records\\\",\\n\\\"input_args\\\": {\\n    \\\"name\\\": \\\"The name of the person.\\\",\\n    \\\"location\\\": \\\"The location of the person.\\\"\\n},\\n\\\"return\\\": \\\"A JSON structure containing the criminal records of the person. If no records are found, an empty structure is returned.\\\",\\n\\\"depend\\\": \\\"requests library, backgroundchecks.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young researcher exploring the mathematical frameworks that unify macroscopic and microscopic phenomena", "synthesized text": "\"{\\n\\\"name\\\": \\\"Complex Number Operations Interface\\\",\\n\\\"description\\\": \\\"This interface performs mathematical operations (addition, subtraction, multiplication, division) on complex numbers.\\\",\\n\\\"function_name\\\": \\\"perform_complex_operation\\\",\\n\\\"input_args\\\": [\\\"complex1\\\", \\\"complex2\\\", \\\"operation\\\"],\\n\\\"return\\\": \\\"The result of the operation on the two complex numbers.\\\",\\n\\\"depend\\\": \\\"python built-in complex number class\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bridal shop owner who's determined to meet fitness goals before her wedding", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fitness Goals Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface provides a simple way for users to track their daily net calories by taking into account the calories burned through exercise and the calories consumed through food intake.\\\",\\n\\\"function_name\\\": \\\"calculate_net_calories\\\",\\n\\\"input_args\\\": [\\\"exercise_type\\\", \\\"duration\\\", \\\"food_intake\\\"],\\n\\\"return\\\": \\\"net_calories\\\",\\n\\\"depend\\\": [\\\"TensorFlow Hub\\\", \\\"MyFitnessPal API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A computer science professor with a solid background in the use and implementation of user controls on Windows Forms Applications.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Generate User Control Interface\\\",\\n\\\"description\\\": \\\"This interface allows the creation of a user control for a Windows Form application. The user only needs to provide the name of the control, its position, dimensions, and parent form.\\\",\\n\\\"function_name\\\": \\\"create_user_control\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"position\\\", \\\"dimensions\\\", \\\"parent_form\\\"],\\n\\\"return\\\": \\\"A string message indicating successful creation and addition of the user control to the parent form.\\\",\\n\\\"depend\\\": [\\\"System.Windows.Forms\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fictional character named Angus MacGyver fond of improvising solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Materials to Tool Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model to suggest potential tools that could be created from a given list of materials.\\\",\\n\\\"function_name\\\": \\\"suggest_tool\\\",\\n\\\"input_args\\\": \\\"materials_list - a list of materials available for use\\\",\\n\\\"return\\\": \\\"A string describing the suggested tool that could be created from the given materials\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library (GPT2LMHeadModel, GPT2Tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a biographer who is in charge of the biographies of contemporary scientists", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Scientific Publication Search Interface\\\",\\n  \\\"description\\\": \\\"Fetches the most recent publications of a given scientist from the Europe PMC database. The results include the title and abstract of each publication.\\\",\\n  \\\"function_name\\\": \\\"get_scientist_publications\\\",\\n  \\\"input_args\\\": {\\n    \\\"scientist_name\\\": \\\"The name of the scientist whose publications are to be fetched.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"publications\\\": \\\"A list of dictionaries, each containing the 'title' and 'abstract' of a publication.\\\"\\n  },\\n  \\\"depend\\\": \\\"Python's requests library, Europe PMC's RESTful web service\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular beauty blogger known for their honest reviews and budget-friendly recommendations for affordable nail polish brands", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nail Polish Color Matcher Interface\\\",\\n\\\"description\\\": \\\"This interface takes the RGB values of a color as input and returns the closest matching affordable nail polish.\\\",\\n\\\"function_name\\\": \\\"find_matching_polish\\\",\\n\\\"input_args\\\": [\\\"r\\\", \\\"g\\\", \\\"b\\\"],\\n\\\"return\\\": \\\"The brand and name of the closest matching, affordable nail polish. If no affordable nail polishes are found that match the color, it returns an error message.\\\",\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"nail_polish_colors.csv\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一个酷爱独立电影和实验性电影的导演", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u7535\\u5f71\\u5267\\u672c\\u5206\\u6790\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u4f7f\\u7528\\u6df1\\u5ea6\\u5b66\\u4e60\\u8fdb\\u884c\\u7535\\u5f71\\u5267\\u672c\\u7684\\u60c5\\u7eea\\u548c\\u60c5\\u8282\\u5206\\u6790\\\",\\n\\\"function_name\\\": \\\"analyze_script\\\",\\n\\\"input_args\\\": \\\"script_text\\\",\\n\\\"return\\\": \\\"\\u5206\\u6790\\u7ed3\\u679c\\uff0c\\u5305\\u62ec\\u5267\\u672c\\u7684\\u60c5\\u7eea\\u8d70\\u5411\\u548c\\u60c5\\u8282\\u8bbe\\u7f6e\\\",\\n\\\"depend\\\": \\\"huggingface\\u7684GPT-3\\u6a21\\u578b\\\"\\n}\"", "description": "tool development"}
{"input persona": "An immunologist investigating the immune response in Crohn's disease and its genetic basis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Variant Analysis Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to parse VCF files and return a DataFrame of genetic variants.\\\",\\n\\\"function_name\\\": \\\"parse_vcf\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_vcf\\\": {\\n        \\\"description\\\": \\\"The path to the VCF file.\\\",\\n        \\\"type\\\": \\\"string\\\"\\n    }\\n},\\n\\\"return\\\": {\\n    \\\"description\\\": \\\"A DataFrame containing genetic variants.\\\",\\n    \\\"type\\\": \\\"DataFrame\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"Biopython\\\", \\\"pandas\\\", \\\"vcf\\\"],\\n    \\\"web_APIs\\\": [],\\n    \\\"ML_models\\\": []\\n}\\n}\"", "description": "tool development"}
{"input persona": "A government agency that uses surveillance drones for monitoring border security", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drone Footage Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze surveillance footage from drones and detect potential security threats. The user inputs the path to the video file and the interface returns the timestamps and locations in the video where potential security threats (like humans, vehicles, or boats) are detected.\\\",\\n\\\"function_name\\\": \\\"detect_threats\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"List of tuples, each containing a timestamp and a class ID representing a detected threat\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, OpenCV, SSD MobileNet V2 object detection model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A media studies student who helps manage the technical aspect of the vlog", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Transcription Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google's Speech-to-Text API to transcribe the audio of a video file into text.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"The path to the video file to transcribe.\\\"\\n},\\n\\\"return\\\": \\\"A string containing the text transcription of the audio from the video file.\\\",\\n\\\"depend\\\": \\\"This function requires the 'subprocess' and 'speech_recognition' Python libraries, as well as 'ffmpeg' software for converting video to audio.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A journalist fighting for transparency in government by requesting access to classified documents", "synthesized text": "\"{\\n\\\"name\\\": \\\"Freedom of Information Act (FOIA) Request Submission Interface\\\",\\n\\\"description\\\": \\\"An interface to submit a FOIA request to a specific agency on behalf of the user.\\\",\\n\\\"function_name\\\": \\\"submit_foia_request\\\",\\n\\\"input_args\\\": {\\n    \\\"agency\\\": \\\"The name of the agency to which the request is being made.\\\",\\n    \\\"subject\\\": \\\"The subject of the FOIA request.\\\",\\n    \\\"description\\\": \\\"A detailed description of the records sought.\\\"\\n},\\n\\\"return\\\": \\\"A string indicating whether the FOIA request was successfully submitted or if there was an error.\\\",\\n\\\"depend\\\": \\\"Depends on the MuckRock API to submit FOIA requests.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An active member of an Objective-C forum who can provide guidance and resources on working with enums", "synthesized text": "\"{\\n\\\"name\\\": \\\"Objective-C Enum Helper\\\",\\n\\\"description\\\": \\\"This interface can parse an Objective-C enum declaration and return a dictionary mapping enum members to their integer values.\\\",\\n\\\"function_name\\\": \\\"parse_objective_c_enum\\\",\\n\\\"input_args\\\": {\\n    \\\"enum_declaration\\\": \\\"A string containing the Objective-C enum declaration.\\\"\\n    },\\n\\\"return\\\": \\\"A dictionary where each key is an enum member and the value is its corresponding integer value.\\\",\\n\\\"depend\\\": \\\"Python's built-in 're' (regular expressions) library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aging Catholic priest who deeply admires the work of Huub Oosterhuis and holds traditional views on liturgy and hymnody.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hymn Lyrics Generator\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained text generation model to generate hymn lyrics based on a given theme.\\\",\\n\\\"function_name\\\": \\\"generate_hymn\\\",\\n\\\"input_args\\\": {\\n    \\\"theme\\\": \\\"string representing the theme of the hymn\\\",\\n    \\\"max_length\\\": \\\"integer representing the maximum length of the generated text (optional, default is 150)\\\"\\n},\\n\\\"return\\\": \\\"string representing the generated hymn\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformer library ('gpt2' model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow gymnast who has also recovered from a similar injury and can provide support and guidance throughout the recovery process", "synthesized text": "\"{\\n\\\"name\\\": \\\"Injury Recovery Support Interface\\\",\\n\\\"description\\\": \\\"An interface for a chatbot that simulates a fellow gymnast who has also recovered from a similar injury. The user inputs their questions or concerns, and the interface returns supportive and guiding responses.\\\",\\n\\\"function_name\\\": \\\"get_supportive_response\\\",\\n\\\"input_args\\\": \\\"user_input - a string that represents the user's question or concern\\\",\\n\\\"return\\\": \\\"A string that represents the chatbot's response\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A classical musician skeptical about the authenticity and longevity of internet fame", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Music Popularity Prediction Interface\\\",\\n    \\\"description\\\": \\\"Predict the popularity of a song based on its attributes like tempo, key, loudness, etc.\\\",\\n    \\\"function_name\\\": \\\"predict_popularity\\\",\\n    \\\"input_args\\\": {\\n        \\\"danceability\\\": \\\"float\\\",\\n        \\\"energy\\\": \\\"float\\\",\\n        \\\"key\\\": \\\"int\\\",\\n        \\\"loudness\\\": \\\"float\\\",\\n        \\\"mode\\\": \\\"int\\\",\\n        \\\"speechiness\\\": \\\"float\\\",\\n        \\\"acousticness\\\": \\\"float\\\",\\n        \\\"instrumentalness\\\": \\\"float\\\",\\n        \\\"liveness\\\": \\\"float\\\",\\n        \\\"valence\\\": \\\"float\\\",\\n        \\\"tempo\\\": \\\"float\\\"\\n    },\\n    \\\"return\\\": \\\"float\\\",\\n    \\\"depend\\\": {\\n        \\\"python libraries\\\": [\\\"numpy\\\", \\\"pandas\\\", \\\"sklearn.preprocessing\\\", \\\"tensorflow.keras\\\"],\\n        \\\"machine learning model\\\": \\\"music_popularity_model.h5\\\"\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A competitor who appreciates the passion and expertise of the vineyard owner, but also views them as a rival", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wine Vintage Quality Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the quality of a particular wine vintage by leveraging the Global Wine Score API. The user inputs the name of the wine and the year of its vintage, and the interface returns the quality score of that particular vintage.\\\",\\n\\\"function_name\\\": \\\"get_wine_vintage_score\\\",\\n\\\"input_args\\\": [\\n    \\\"wine_name\\\",\\n    \\\"vintage_year\\\"\\n],\\n\\\"return\\\": \\\"Score of the wine vintage or error message.\\\",\\n\\\"depend\\\": \\\"Global Wine Score API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a stickler for clarity and detail in code, especially test cases. I also have a penchant for offering suggestions on improving code quality and test coverage.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Review and Suggestions Interface\\\",\\n\\\"description\\\": \\\"This interface uses pylint for static code analysis to check for any errors or style issues, and coverage.py to measure code coverage of Python programs. It returns a report of code issues and test coverage.\\\",\\n\\\"function_name\\\": \\\"review_and_improve_code\\\",\\n\\\"input_args\\\": \\\"path_to_python_file - a string representing the path to a Python file\\\",\\n\\\"return\\\": \\\"a dictionary with pylint_score (a float representing the pylint score of the code, higher is better) and test_coverage (a float representing the percentage of code covered by tests)\\\",\\n\\\"depend\\\": [\\\"os\\\", \\\"pylint.lint\\\", \\\"coverage\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A diligent and ambitious researcher looking to collaborate on a social media research project", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitter Data Collection Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch tweets containing a specific keyword using the Twitter API.\\\",\\n\\\"function_name\\\": \\\"fetch_tweets\\\",\\n\\\"input_args\\\": \\\"keyword: The keyword to search for in tweets.\\\",\\n\\\"return\\\": \\\"A list of tweets containing the keyword.\\\",\\n\\\"depend\\\": \\\"Tweepy, a Python library for accessing the Twitter API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fisherman who unintentionally discovered a shipwreck while casting his nets, now intrigued by its historical significance", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Shipwreck Information Interface\\\",\\n  \\\"description\\\": \\\"An interface that allows users to retrieve information about shipwrecks based on their geographical location. The interface uses the Maritime Archaeology Sea Trust API to fetch data.\\\",\\n  \\\"function_name\\\": \\\"get_shipwreck_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"coordinates\\\": \\\"A string representing the geographical coordinates where the shipwreck was found.\\\"\\n  },\\n  \\\"return\\\": \\\"A JSON object containing data about the shipwreck, including its name, history, and any available images.\\\",\\n  \\\"depend\\\": \\\"requests library, Maritime Archaeology Sea Trust API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A countertenor pushing the boundaries of traditional vocal classification", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Music Genre Classification Interface\\\",\\n  \\\"description\\\": \\\"Classify the genre of a piece of music by giving the path to the audio file\\\",\\n  \\\"function_name\\\": \\\"predict_genre\\\",\\n  \\\"input_args\\\": [\\\"audio_file_path\\\"],\\n  \\\"return\\\": \\\"predicted_genre\\\",\\n  \\\"depend\\\": [\\\"tensorflow\\\", \\\"librosa\\\", \\\"numpy\\\", \\\"pre-trained TensorFlow model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A professional archer who participated in the 2002 European Archery Championships", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wind Effect Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface estimates the wind effect on arrow flight for archers based on the input of wind speed, wind direction, and arrow speed\\\", \\n\\\"function_name\\\": \\\"calculate_wind_effect\\\", \\n\\\"input_args\\\": {\\\"wind_speed\\\": \\\"The speed of the wind in m/s\\\", \\\"wind_direction\\\": \\\"The direction of the wind in degrees from the direction of arrow flight (0 means the wind is coming directly from the front, 90 means it's coming from the right, etc.)\\\", \\\"arrow_speed\\\": \\\"The speed of the arrow in m/s\\\"},\\n\\\"return\\\": \\\"A number representing the wind effect on arrow flight. A positive value means the wind will push the arrow to the right, a negative value means the wind will push the arrow to the left.\\\", \\n\\\"depend\\\": \\\"Python's math library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a lead emergency manager in the affected region of Caribbean", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Hurricane Forecasting Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface that leverages the HURDAT2 dataset from the National Hurricane Center and machine learning models to provide a forecast for hurricane activity. The user inputs the current date, and the interface provides a forecast for the next few days.\\\",\\n  \\\"function_name\\\": \\\"forecast_hurricane_activity\\\",\\n  \\\"input_args\\\": \\\"current_date\\\",\\n  \\\"return\\\": \\\"forecast for the next 7 days\\\",\\n  \\\"depend\\\": \\\"pandas, fbprophet, HURDAT2 dataset\\\"\\n}\"", "description": "tool development"}
{"input persona": "A construction worker fighting for fair wages and better working conditions on job sites", "synthesized text": "\"{\\n\\\"name\\\": \\\"Construction Site Safety Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to an image file of a construction site and returns a list of detected unsafe conditions, such as missing safety helmets, untied shoelaces, or unattended tools.\\\",\\n\\\"function_name\\\": \\\"detect_unsafe_conditions\\\",\\n\\\"input_args\\\": [\\\"image_path\\\"],\\n\\\"return\\\": \\\"List of detected unsafe conditions\\\",\\n\\\"depend\\\": \\\"Python libraries (cv2, torch, torchvision), Machine learning model (YOLOv5 from ultralytics)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical researcher working on using AI in radiology to improve the detection of early-stage cancers", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Radiology Image Analysis Interface\\\",\\n    \\\"description\\\": \\\"An interface for detecting potential early-stage cancers in radiology images using a pre-trained model from TensorFlow Hub. The input is the path to a radiology image file, and the output is the positions and confidence scores for the detected potential early-stage cancers.\\\",\\n    \\\"function_name\\\": \\\"detect_cancer\\\",\\n    \\\"input_args\\\": [\\\"path_to_img\\\"],\\n    \\\"return\\\": \\\"A dictionary with keys 'detection_scores' and 'detection_boxes', where 'detection_scores' are the confidence scores for the detected objects, and 'detection_boxes' are the positions of the detected objects.\\\",\\n    \\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young researcher with a passion for studying the impact craters on the Moon and other celestial bodies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crater Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to detect craters in an image of celestial bodies. The input is a path to an image file, and the output is a list of tuples, each containing the class name ('Crater'), the score of the detection, and the bounding box of the detected crater.\\\",\\n\\\"function_name\\\": \\\"detect_craters\\\",\\n\\\"input_args\\\": \\\"path_to_image\\\",\\n\\\"return\\\": \\\"List of tuples ('Crater', score, bounding box)\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, cv2, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casual player of Garena Free Fire from India", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface provides game statistics like kills, deaths, matches played, and win ratio for a user in the Garena Free Fire game. The user needs to input their game username.\\\",\\n\\\"function_name\\\": \\\"get_game_stats\\\",\\n\\\"input_args\\\": {\\\"username\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"Kills\\\": \\\"integer\\\", \\\"Deaths\\\": \\\"integer\\\", \\\"Matches Played\\\": \\\"integer\\\", \\\"Win Ratio\\\": \\\"float\\\"},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Garena's API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A loyal patron who values the authentic craftsmanship and unique flavors of the master baker's creations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bakery Product Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a collaborative filtering model to recommend bakery products based on user's past preferences.\\\",\\n\\\"function_name\\\": \\\"bakery_product_recommendation\\\",\\n\\\"input_args\\\": [\\\"user_id\\\", \\\"user_ratings\\\"],\\n\\\"return\\\": \\\"List of top 5 recommended bakery product IDs.\\\",\\n\\\"depend\\\": [\\\"Surprise library (SVD)\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A representative from a leading company in IoT solutions for smart cities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves real-time air quality information based on the user's current location. It returns the air quality index and health recommendations.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": {\\\"air_quality_index\\\": \\\"integer\\\", \\\"health_recommendations\\\": \\\"string\\\"},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Breezometer API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An interdisciplinary researcher who pushes the boundaries of conventional academic disciplines", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Literature Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses the PubMed API to fetch relevant scientific literature for a given research topic. It returns a list of papers, each with its title, authors, and abstract.\\\",\\n\\\"function_name\\\": \\\"get_related_scientific_papers\\\",\\n\\\"input_args\\\": [\\\"topic\\\"],\\n\\\"return\\\": \\\"List of dictionaries, each dictionary containing 'title': String, 'authors': String, 'abstract': String\\\",\\n\\\"depend\\\": \\\"PubMed API, requests library, BeautifulSoup library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a radio sports commentator, who is old friends with Jack Cooney", "synthesized text": "\"{\\n\\\"name\\\": \\\"Live Sports Score Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to fetch live sports scores by providing the sport and the teams they are interested in. It returns a string stating the current game status and the scores of both teams.\\\",\\n\\\"function_name\\\": \\\"get_live_sports_score\\\",\\n\\\"input_args\\\": {\\\"sport\\\": \\\"string\\\", \\\"team1\\\": \\\"string\\\", \\\"team2\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": \\\"Sportradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A stage equipment rental company providing state-of-the-art sound and lighting systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Equipment Availability Interface\\\",\\n\\\"description\\\": \\\"This interface checks the availability of specific equipment in the inventory of a stage equipment rental company.\\\",\\n\\\"function_name\\\": \\\"check_equipment_availability\\\",\\n\\\"input_args\\\": \\\"equipment_name - The name of the equipment to check availability for.\\\",\\n\\\"return\\\": \\\"Returns 'Available' if the equipment is available, 'Unavailable' if it is not, or 'Equipment not found in inventory.' if the equipment does not exist in the inventory.\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "a parent of a child attending Fairfield Union Local School District", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Lunch Menu Interface\\\",\\n\\\"description\\\": \\\"This interface returns the school lunch menu for a given date from the Fairfield Union Local School District's website.\\\",\\n\\\"function_name\\\": \\\"get_school_lunch_menu\\\",\\n\\\"input_args\\\": {\\\"date\\\": \\\"a datetime.date object representing the date to retrieve the lunch menu for\\\"},\\n\\\"return\\\": \\\"A list of food items on the menu for the given date, or None if no menu is available.\\\",\\n\\\"depend\\\": \\\"This function depends on the BeautifulSoup and requests Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local resident from Balfour", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weather Forecast Interface\\\",\\n  \\\"description\\\": \\\"Fetches the current weather information for a specified city.\\\",\\n  \\\"function_name\\\": \\\"get_weather_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"city_name\\\": \\\"Name of the city for which to fetch the weather information.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"Temperature\\\": \\\"Current temperature in Kelvin.\\\",\\n    \\\"Humidity\\\": \\\"Current humidity in percentage.\\\",\\n    \\\"Pressure\\\": \\\"Current atmospheric pressure in hPa.\\\",\\n    \\\"Weather Description\\\": \\\"Description of the current weather conditions.\\\"\\n  },\\n  \\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly woman who always requests a bowl of chili for her Sunday lunch", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Chili Recipe Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches a suitable chili recipe for the user based on their dietary restrictions, number of servings needed, and the type of cuisine they prefer.\\\",\\n  \\\"function_name\\\": \\\"get_chili_recipe\\\",\\n  \\\"input_args\\\": {\\n    \\\"diet\\\": \\\"User's dietary restrictions. Examples may include 'vegan', 'vegetarian', 'gluten free' etc.\\\",\\n    \\\"servings\\\": \\\"Number of servings required by the user.\\\",\\n    \\\"cuisine\\\": \\\"Type of cuisine preferred by the user. Examples could be 'Mexican', 'Italian', etc.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"title\\\": \\\"Title of the suitable chili recipe.\\\",\\n    \\\"sourceUrl\\\": \\\"URL of the source where the recipe can be found.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_library\\\": [\\\"requests\\\", \\\"json\\\"],\\n    \\\"web_API\\\": [\\\"Spoonacular API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A picky eater who only wants to eat fast food and sugary snacks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Healthy Fast Food Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends the healthiest food options available at a given fast food restaurant by leveraging the Nutrionix API.\\\",\\n\\\"function_name\\\": \\\"get_healthy_fast_food_options\\\",\\n\\\"input_args\\\": {\\n    \\\"restaurant\\\": \\\"The name of the fast food restaurant.\\\"\\n},\\n\\\"return\\\": \\\"A list of the healthiest food options available at the input restaurant.\\\",\\n\\\"depend\\\": \\\"Nutrionix API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A strategic planner at an international medical mission organization who decides where resources are most needed", "synthesized text": "\"{\\n\\\"name\\\": \\\"Global Health Metrics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches key health metrics such as life expectancy, prevalent diseases, mortality rates from World Health Organization's API. It helps a strategic planner at a medical mission organization decide where resources are most needed.\\\", \\n\\\"function_name\\\": \\\"get_health_metrics_by_country\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"A JSON response containing key health metrics for the specified country.\\\",\\n\\\"depend\\\": \\\"WHO's Global Health Observatory (GHO) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who loves saving and dislikes repetitive and lengthy descriptions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Expense Tracker Interface\\\",\\n  \\\"description\\\": \\\"An interface to help users track their expenses. Users can add expenses by inputting the amount, category, and a short description. Users can also retrieve all expenses within a certain date range.\\\",\\n  \\\"function_name\\\": [\\\"create_connection\\\", \\\"create_table\\\", \\\"add_expense\\\", \\\"get_expenses\\\"],\\n  \\\"input_args\\\": {\\n    \\\"create_connection\\\": [],\\n    \\\"create_table\\\": [\\\"conn\\\"],\\n    \\\"add_expense\\\": [\\\"conn\\\", \\\"expense\\\"],\\n    \\\"get_expenses\\\": [\\\"conn\\\", \\\"start_date\\\", \\\"end_date\\\"]\\n  },\\n  \\\"return\\\": {\\n    \\\"create_connection\\\": \\\"conn\\\",\\n    \\\"create_table\\\": \\\"None\\\",\\n    \\\"add_expense\\\": \\\"lastrowid\\\",\\n    \\\"get_expenses\\\": \\\"rows\\\"\\n  },\\n  \\\"depend\\\": [\\\"sqlite3\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A middle-income India-based real estate agent who is hoping for market reforms.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Price Prediction Interface\\\", \\n\\\"description\\\": \\\"An interface to predict the future price of properties based on a set of property features\\\", \\n\\\"function_name\\\": \\\"predict_property_price\\\", \\n\\\"input_args\\\": {\\\"features\\\": \\\"A list of property features like location, square footage, number of rooms, etc.\\\"}, \\n\\\"return\\\": \\\"The predicted price of the property\\\", \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"sklearn\\\"], \\\"machine learning model\\\": \\\"Random Forest Regressor pre-trained on a property price dataset\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A local artist and photographer living in Mason City.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Colorization Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to colorize black and white images using DeOldify.\\\",\\n\\\"function_name\\\": \\\"colorize_image\\\",\\n\\\"input_args\\\": {\\\"path_to_img\\\": \\\"The file path to the black and white image.\\\"},\\n\\\"return\\\": \\\"A colorized version of the provided image.\\\",\\n\\\"depend\\\": \\\"DeOldify\\\"\\n}\"", "description": "tool development"}
{"input persona": "A DJ who creates electronic music mixes specifically designed to pump up athletes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Beat Detection and BPM Interface\\\",\\n\\\"description\\\": \\\"This interface receives the path to an audio file and returns the detected beats per minute (BPM) of the track.\\\",\\n\\\"function_name\\\": \\\"get_bpm\\\",\\n\\\"input_args\\\": [\\\"audio_file_path\\\"],\\n\\\"return\\\": \\\"BPM of the track as a float.\\\",\\n\\\"depend\\\": \\\"Aubio Python library for audio processing and music information retrieval.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mother who is seeking advice on the likelihood of passing down a genetic condition to her children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Condition Likelihood Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the likelihood of a certain genetic condition being passed down to children based on the mother's and father's genotypes.\\\",\\n\\\"function_name\\\": \\\"calculate_genetic_condition_likelihood\\\",\\n\\\"input_args\\\": [\\\"mother_genotype\\\", \\\"father_genotype\\\"],\\n\\\"return\\\": \\\"The likelihood of the child being affected by the condition\\\",\\n\\\"depend\\\": {\\\"python_library\\\": [\\\"Biopython\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A UX researcher passionate about understanding how visitors interact with digital interfaces in museums", "synthesized text": "\"{\\n\\\"name\\\": \\\"Visitor Interaction Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google Analytics API to fetch data related to how visitors interact with digital interfaces in museums. It returns a data frame with the metrics of sessions, users, new users, etc.\\\",\\n\\\"function_name\\\": \\\"fetch_ga_data\\\",\\n\\\"input_args\\\": {\\n    \\\"view_id\\\": \\\"The view ID of the Google Analytics account.\\\",\\n    \\\"start_date\\\": \\\"The start date of the data in 'YYYY-MM-DD' format.\\\",\\n    \\\"end_date\\\": \\\"The end date of the data in 'YYYY-MM-DD' format.\\\"\\n},\\n\\\"return\\\": \\\"A DataFrame with the metrics of sessions, users, new users, etc., for the given period.\\\",\\n\\\"depend\\\": \\\"Google Analytics API, pandas, googleapiclient, oauth2client\\\"\\n}\"", "description": "tool development"}
{"input persona": "Rails Developer with a thorough understanding of SSL/TLS certificates", "synthesized text": "\"{\\n\\\"name\\\": \\\"SSL Certificate Info Fetcher Interface\\\",\\n\\\"description\\\": \\\"Fetch and parse SSL certificate information from a given domain.\\\",\\n\\\"function_name\\\": \\\"get_certificate_info\\\",\\n\\\"input_args\\\": \\\"domain\\\",\\n\\\"return\\\": \\\"A dictionary containing issuer, subject, notBefore and notAfter dates of the SSL certificate.\\\",\\n\\\"depend\\\": \\\"OpenSSL, idna\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local citizen from Summerside who was a former colleague of Craig Dalton in the Canadian Armed Forces", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"Fetches and displays the current weather and the weather forecast for the next 5 days for the specified city\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": \\\"city\\\",\\n\\\"return\\\": \\\"None, but prints the current weather and the weather forecast for the next 5 days\\\",\\n\\\"depend\\\": \\\"requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A busy doctor who relies on the platform to access medical information quickly and efficiently", "synthesized text": "\"{\\n\\\"name\\\": \\\"Symptom Checker Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to check potential medical conditions based on their symptoms. The function taps into the Infermedica API, a leading provider of AI-powered health check tools.\\\",\\n\\\"function_name\\\": \\\"check_symptoms\\\",\\n\\\"input_args\\\": [\\\"symptoms\\\"],\\n\\\"return\\\": \\\"List of possible conditions\\\",\\n\\\"depend\\\": \\\"Infermedica API\\\"\\n}\"", "description": "tool development"}
{"input persona": "IT Project Manager who has little technical background", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Project Task Assignment Interface\\\", \\n\\\"description\\\": \\\"This interface takes a list of tasks with their dependencies and required skills, as well as a list of team members with their skills, and returns a task assignment plan that assigns each task to a team member who has the required skills and ensures that tasks are assigned in an order that respects their dependencies.\\\", \\n\\\"function_name\\\": \\\"assign_tasks\\\", \\n\\\"input_args\\\": [\\\"task_file\\\", \\\"team_file\\\"], \\n\\\"return\\\": \\\"A DataFrame that contains the task assignment plan, which assigns each task to a team member who has the required skills and ensures that tasks are assigned in an order that respects their dependencies.\\\", \\n\\\"depend\\\": \\\"Python's pandas library for data manipulation and networkx library for network analysis\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young seminary student who admired Archbishop Fréchard", "synthesized text": "\"{\\n\\\"name\\\": \\\"Biblical Passage Search Interface\\\",\\n\\\"description\\\": \\\"This interface takes a book, chapter, and verse of the Bible as input and returns the corresponding scripture passage.\\\",\\n\\\"function_name\\\": \\\"get_bible_verse\\\",\\n\\\"input_args\\\": [\\\"book\\\", \\\"chapter\\\", \\\"verse\\\"],\\n\\\"return\\\": \\\"The scripture passage corresponding to the input book, chapter, and verse.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"BibleGateway API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An occupational therapist specializing in occupational chemical exposure, providing personalized treatment and guidance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Properties Fetch Interface\\\",\\n\\\"description\\\": \\\"Fetches key chemical properties such as Molecular Formula, Molecular Weight, Canonical SMILES, IUPAC Name, InChI, InChIKey, Isomeric SMILES, and Exact Mass from the PubChem database.\\\",\\n\\\"function_name\\\": \\\"fetch_chemical_properties\\\",\\n\\\"input_args\\\": {\\n    \\\"chemical_name\\\": \\\"Name of the chemical (string)\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing the requested properties of the chemical (dict)\\\",\\n\\\"depend\\\": \\\"PubChem API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A group of astrophysicists who attend the violinist's performances to draw parallels between the harmony of the universe and music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Star Sound Frequency Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface that takes in the frequency of a star's light oscillation and returns an audio file where this frequency is converted to a sound wave.\\\",\\n\\\"function_name\\\": \\\"oscillation_to_sound\\\",\\n\\\"input_args\\\": {\\\"frequency_in_hz\\\": \\\"The frequency of the star's light oscillation in hertz.\\\"},\\n\\\"return\\\": \\\"The path to an audio file that plays the sound corresponding to the input frequency.\\\",\\n\\\"depend\\\": [\\\"pydub\\\", \\\"astropy\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a resident of Dashiwo town who loves the peace and tranquility of his hometown.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Noise Level Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface uses a noise level monitoring service API to get current noise levels for a specified location\\\",\\n\\\"function_name\\\": \\\"get_noise_levels\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"current noise level\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"noise level monitoring API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An automobile company executive who has direct competition with SEAT", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Car Sales Data Comparison Interface\\\",\\n  \\\"description\\\": \\\"Fetches and compares the sales data of the user's company and SEAT from an online car sales database.\\\",\\n  \\\"function_name\\\": \\\"get_sales_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"company_name\\\": \\\"The name of the user's company.\\\"\\n  },\\n  \\\"return\\\": \\\"A DataFrame containing the sales data of the user's company and SEAT.\\\",\\n  \\\"depend\\\": \\\"Python libraries: requests, pandas. Web API: carsalesdatabase.com\\\"\\n}\"", "description": "tool development"}
{"input persona": "A talented high school basketball player being heavily pursued by multiple universities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface predicts a basketball player's future performance based on past game statistics. The user inputs a CSV file path with the player's past game statistics, and the interface returns a prediction of the player's future performance.\\\",\\n\\\"function_name\\\": \\\"predict_performance\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"numpy array\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A popular YouTube content creator who has published in-depth tutorials on working with UICollectionView in iOS projects", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Video Transcription Interface\\\",\\n  \\\"description\\\": \\\"An interface for YouTube content creators to easily get transcriptions for their videos by simply providing the YouTube video ID.\\\",\\n  \\\"function_name\\\": \\\"get_video_transcription\\\",\\n  \\\"input_args\\\": \\\"video_id - The ID of the YouTube video to get transcriptions for.\\\",\\n  \\\"return\\\": \\\"A list of transcriptions for the provided YouTube video ID.\\\",\\n  \\\"depend\\\": \\\"This function leverages the YouTube Data API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a former linebacker for the 1999 Jacksonville Dolphins, now coaching high school football.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a BERT model from Huggingface to analyze the performance descriptions of football players and extracts the key performance indicators.\\\",\\n\\\"function_name\\\": \\\"extract_key_performance_indicators\\\",\\n\\\"input_args\\\": \\\"performance_description - A string that describes a player's performance\\\",\\n\\\"return\\\": \\\"A list of key performance indicators extracted from the performance description\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers (BertTokenizer, TFBertModel), tensorflow, sklearn's TfidfVectorizer\\\"\\n}\"", "description": "tool development"}
{"input persona": "A priest who shares their knowledge about religious symbolism in classical art", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Religious Symbol Analysing Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses image recognition to identify religious symbols in an image and explain their meanings.\\\",\\n  \\\"function_name\\\": \\\"get_symbols_in_image\\\",\\n  \\\"input_args\\\": {\\n    \\\"image_path\\\": \\\"Path to the image file\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary where keys are the names of the recognized symbols and values are their meanings.\\\",\\n  \\\"depend\\\": \\\"Microsoft's Computer Vision API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a computer system administrator who has hands-on experience with Windows Task Scheduler.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Task Scheduling Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to schedule a new task in Windows Task Scheduler by specifying the task name, the time to run it, and the command to run.\\\",\\n\\\"function_name\\\": \\\"schedule_task\\\",\\n\\\"input_args\\\": {\\n    \\\"task_name\\\": \\\"The name of the task to be scheduled\\\",\\n    \\\"time\\\": \\\"The time to run the task, in the format HH:MM\\\",\\n    \\\"command\\\": \\\"The command to be run by the task\\\"\\n    },\\n\\\"return\\\": \\\"A message indicating whether the task was scheduled successfully or an error occurred\\\",\\n\\\"depend\\\": \\\"Python's subprocess module\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gamer who respects their preference for spoiler-free content and always asks before discussing game details", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Spoiler Detector Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from Hugging Face to detect whether a text contains game spoilers.\\\",\\n\\\"function_name\\\": \\\"is_spoiler\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"A boolean value indicating whether the input text contains spoilers.\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"transformers\\\", \\\"torch\\\"], \\\"models\\\": [\\\"m3hrdadfi/text-classification-spoiler-detection\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A plumbing contractor who offers an apprenticeship program for aspiring plumbers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Applicant Screening Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from the HuggingFace Transformers library to analyze the motivation letters of applicants to a plumbing apprenticeship program. It identifies key motivations, experience and aspirations expressed by the applicant.\\\",\\n\\\"function_name\\\": \\\"extract_key_information\\\",\\n\\\"input_args\\\": \\\"motivation_letter_text\\\",\\n\\\"return\\\": \\\"A string containing key motivations, experience and aspirations of the applicant.\\\",\\n\\\"depend\\\": \\\"HuggingFace Transformers library, Large Language Model (LLM)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A customs officer responsible for inspecting and certifying the compliance of imported goods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Customs Duty Calculation Interface\\\",\\n\\\"description\\\": \\\"Uses APIs from Trade Data Services to get the Harmonized System (HS) code for an imported product, and fetches the customs duty percentage from the Customs Duty API. It then calculates the customs duty based on the value of the goods.\\\",\\n\\\"function_name\\\": \\\"calculate_customs_duty\\\",\\n\\\"input_args\\\": {\\\"product\\\": \\\"name of the product\\\", \\\"country\\\": \\\"country of import\\\", \\\"value\\\": \\\"value of the goods\\\"},\\n\\\"return\\\": \\\"calculated customs duty\\\",\\n\\\"depend\\\": \\\"requests library, Trade Data Services APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "an envious former track and field athlete who never managed to finish first.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Track Performance Improvement Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes track and field data and provides suggestions for performance improvements. It uses a RandomForestRegressor model to determine which aspects of an athlete's performance are most important and then suggests areas where the athlete can improve.\\\",\\n\\\"function_name\\\": \\\"suggest_improvements\\\",\\n\\\"input_args\\\": [\\\"performance_data\\\", \\\"athlete_data\\\"],\\n\\\"return\\\": \\\"A list of suggestions for performance improvements\\\",\\n\\\"depend\\\": \\\"Scikit-learn, Pandas, NumPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher studying the historical significance of urban park designs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Park Similarity Interface\\\",\\n\\\"description\\\": \\\"An interface to find parks with similar design descriptions to the input park. It uses web scraping to fetch data about different parks and a language model from HuggingFace to compute semantic text similarity.\\\",\\n\\\"function_name\\\": \\\"find_similar_parks\\\",\\n\\\"input_args\\\": \\\"park_name\\\",\\n\\\"return\\\": \\\"A list of park names with similar design descriptions to the input park.\\\",\\n\\\"depend\\\": \\\"BeautifulSoup, requests, torch, transformers (BertModel, BertTokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of the city's environmental committee who can offer guidance on eco-friendly gardening practices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant Identification Interface\\\",\\n\\\"description\\\": \\\"This interface identifies plants based on images. It can help users to identify invasive species or to ensure they are planting eco-friendly and native species in their gardens.\\\",\\n\\\"function_name\\\": \\\"identify_plant\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\"],\\n\\\"return\\\": \\\"Possible name of the plant\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, PIL, NumPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A basketball enthusiast who loves novelty items and is planning for a wedding", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Novelty Item Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses the eBay API to find and return information about basketball-themed novelty items that could potentially be used for wedding favors.\\\",\\n\\\"function_name\\\": \\\"search_ebay_for_basketball_novelty_items\\\",\\n\\\"input_args\\\": [\\\"keyword\\\"],\\n\\\"return\\\": \\\"List of dictionaries, each containing the title, price, and URL of a related item for sale on eBay.\\\",\\n\\\"depend\\\": \\\"eBay API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Разработчик ПО, прочитавший много литературы по микросервисам и авторизации.", "synthesized text": "\"{\\n\\\"name\\\": \\\"OAuth2 Token Generation Interface\\\",\\n\\\"description\\\": \\\"An interface to generate OAuth2 token using client credentials grant type\\\",\\n\\\"function_name\\\": \\\"generate_oauth2_token\\\",\\n\\\"input_args\\\": {\\n    \\\"client_id\\\": \\\"The client ID for OAuth2 server\\\",\\n    \\\"client_secret\\\": \\\"The client secret for OAuth2 server\\\",\\n    \\\"scope\\\": \\\"The scope of the access request\\\",\\n    \\\"auth_url\\\": \\\"The authorization server URL\\\"\\n},\\n\\\"return\\\": \\\"An access token if successful, otherwise None\\\",\\n\\\"depend\\\": \\\"requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned physicist creating a revolutionary theory challenging the principles of molecular biology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Protein Structure Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses DeepMind's AlphaFold2 model to predict the 3D structure of proteins from their amino acid sequences.\\\",\\n\\\"function_name\\\": \\\"predict_protein_structure\\\",\\n\\\"input_args\\\": \\\"amino_acid_sequence - A string representing the amino acid sequence of the protein\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'plddts' and 'pae'. 'plddts' is a score that indicates the confidence of the model in the predicted structure, with higher values meaning higher confidence. 'pae' is the predicted aligned error, which represents the model's estimate of the error in the predicted distances between each pair of amino acids.\\\",\\n\\\"depend\\\": \\\"DeepMind's AlphaFold2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A neuroscientist who studies the effects of immersive audio on the human brain", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Sound Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface takes an input audio file and converts it into 3D sound using the HRTF (Head-Related Transfer Function). The output is a new audio file with 3D sound.\\\",\\n\\\"function_name\\\": \\\"convert_to_3d_sound\\\",\\n\\\"input_args\\\": [\\\"input_audio_path\\\", \\\"output_audio_path\\\"],\\n\\\"return\\\": \\\"Path to the new 3D audio file\\\",\\n\\\"depend\\\": [\\\"pydub\\\", \\\"hrtf\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A trivia enthusiast living in Oklahoma", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trivia Question Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Open Trivia Database API to generate trivia questions based on user-specified difficulty and category.\\\",\\n\\\"function_name\\\": \\\"generate_trivia_question\\\",\\n\\\"input_args\\\": {\\n    \\\"difficulty\\\": \\\"string (easy, medium, hard)\\\",\\n    \\\"category\\\": \\\"integer (representing the category ID as per the Open Trivia Database)\\\"\\n    },\\n\\\"return\\\": {\\n    \\\"question\\\": \\\"string (the trivia question)\\\",\\n    \\\"correct_answer\\\": \\\"string (the correct answer to the trivia question)\\\",\\n    \\\"incorrect_answers\\\": \\\"list of strings (the incorrect answers to the trivia question)\\\"\\n    },\\n\\\"depend\\\": \\\"Open Trivia Database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a devoted member of the Parma eparchy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Orthodox Liturgical Calendar Interface\\\",\\n\\\"description\\\": \\\"Provides liturgical information for a given day according to the Orthodox Church calendar.\\\",\\n\\\"function_name\\\": \\\"get_liturgical_info\\\",\\n\\\"input_args\\\": \\\"date - datetime object\\\",\\n\\\"return\\\": \\\"Dictionary containing liturgical information\\\",\\n\\\"depend\\\": \\\"Church Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cognitive scientist exploring the neural mechanisms that could potentially explain telekinesis abilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brain Activity Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface visualizes brain activity in a given time window using MNE Python library. It takes as input the path to the EEG/MEG data file (in FIF format), and the start and end times for the window of interest, and it outputs a topographic map of the brain activity.\\\",\\n\\\"function_name\\\": \\\"visualize_brain_activity\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_data\\\": \\\"The path to the EEG/MEG data file in FIF format\\\",\\n    \\\"start_time\\\": \\\"The start time for the window of interest\\\",\\n    \\\"end_time\\\": \\\"The end time for the window of interest\\\"\\n},\\n\\\"return\\\": \\\"A topographic map of the brain activity in the given time window\\\",\\n\\\"depend\\\": \\\"MNE python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lobster fisherman from Maine who enjoys swapping stories with the New Yorker about their respective cities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface compares the current weather conditions in two given cities. The weather conditions include a description and the temperature.\\\",\\n\\\"function_name\\\": \\\"compare_weather\\\",\\n\\\"input_args\\\": [\\\"city1\\\", \\\"city2\\\"],\\n\\\"return\\\": \\\"Dictionary with weather comparison\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"OpenWeatherMap API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A technology entrepreneur who believes that academia is too slow in realizing technological advancements", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Real-Time Scholarly Article Search Interface\\\",\\n  \\\"description\\\": \\\"An interface to search and retrieve the most recent scholarly articles related to a specific query\\\",\\n  \\\"function_name\\\": \\\"get_recent_scholarly_articles\\\",\\n  \\\"input_args\\\": {\\n    \\\"query\\\": \\\"The search query to find related scholarly articles\\\",\\n    \\\"days\\\": \\\"The number of past days within which the articles should have been published (default is 30)\\\"\\n  },\\n  \\\"return\\\": \\\"A list of titles of the most recent scholarly articles related to the query\\\",\\n  \\\"depend\\\": \\\"Semantic Scholar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A recent graduate of Gombe State College of Health Technology, Kaltungo, now working in a local healthcare clinic", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Patient Record Management Interface\\\",\\n  \\\"description\\\": \\\"An interface to create, read, update and delete records in a patient database stored as a CSV file.\\\",\\n  \\\"function_name\\\": [\\\"add_patient\\\", \\\"get_patient\\\", \\\"update_patient\\\", \\\"delete_patient\\\"],\\n  \\\"input_args\\\": [\\\"name\\\", \\\"age\\\", \\\"gender\\\", \\\"health_condition\\\"],\\n  \\\"return\\\": [\\\"Confirmation message or requested patient information\\\"],\\n  \\\"depend\\\": [\\\"Python Pandas library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a former classmate and friend of Robyn Kennedy who is proud of her achievements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Recognition and Verification Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Face Recognition library to identify if Robyn Kennedy is in the provided image.\\\",\\n\\\"function_name\\\": \\\"is_robyn_in_image\\\",\\n\\\"input_args\\\": [\\\"path_to_image\\\", \\\"path_to_robyn_image\\\"],\\n\\\"return\\\": \\\"Boolean result indicating if Robyn Kennedy is in the provided image.\\\",\\n\\\"depend\\\": \\\"Face Recognition library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fast-food franchise owner who prioritizes profit margins over implementing costly safety recommendations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Food Price Prediction Interface\\\",\\n  \\\"description\\\": \\\"An interface to predict the price of a food item based on its features using a pre-trained machine learning model\\\",\\n  \\\"function_name\\\": [\\\"train_price_predictor\\\", \\\"predict_food_price\\\"],\\n  \\\"input_args\\\": [\\\"csv_path\\\", \\\"model\\\", \\\"ingredients\\\", \\\"size\\\", \\\"type\\\"],\\n  \\\"return\\\": \\\"Predicted price of the food item\\\",\\n  \\\"depend\\\": \\\"Pandas, Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fan of Zhang Tielin who watched every episode of every series he starred in, no matter how good or bad it was.", "synthesized text": "\"{\\n  \\\"name\\\" : \\\"TV Show Ratings Interface\\\",\\n  \\\"description\\\" : \\\"This interface provides the ratings for all the TV series that a specified actor has starred in.\\\",\\n  \\\"function_name\\\" : \\\"get_actor_tv_series_ratings\\\",\\n  \\\"input_args\\\" : \\\"actor_name - A string that is the name of the actor.\\\",\\n  \\\"return\\\" : \\\"A dictionary with the TV series names as keys and their ratings as values.\\\",\\n  \\\"depend\\\" : \\\"requests, bs4\\\"\\n}\"", "description": "tool development"}
{"input persona": "A meticulous homeowner who wants to ensure their property is accurately valued for insurance purposes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Property Value Estimate Interface\\\",\\n\\\"description\\\": \\\"An interface to get an estimated property value using Zillow's GetSearchResults API\\\",\\n\\\"function_name\\\": \\\"get_property_value\\\",\\n\\\"input_args\\\": [\\\"address\\\", \\\"city_state_zip\\\"],\\n\\\"return\\\": \\\"A tuple (valuation_range_low, valuation_range_high)\\\",\\n\\\"depend\\\": [\\\"Zillow API\\\", \\\"requests\\\", \\\"xml.etree.ElementTree\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Un entomólogo aficionado que recién descubre su pasión por los escarabajos", "synthesized text": "\"{\\n\\\"name\\\": \\\"Identificaci\\u00f3n de Escarabajos\\\",\\n\\\"description\\\": \\\"Una interfaz que utiliza un modelo de aprendizaje profundo para identificar especies de escarabajos a partir de im\\u00e1genes. El usuario debe proporcionar la ruta a un archivo de imagen y la interfaz devolver\\u00e1 el nombre de la especie del escarabajo en la imagen.\\\",\\n\\\"function_name\\\": \\\"identificar_escarabajo\\\",\\n\\\"input_args\\\": \\\"ruta_imagen\\\",\\n\\\"return\\\": \\\"Especie de escarabajo en la imagen\\\",\\n\\\"depend\\\": \\\"Tensorflow, Tensorflow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud fellow professor and personal friend of Pierre Kunstmann", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates input text into a specified target language. It uses Google Cloud Translation API to perform the translation.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"string\\\", \\\"target_lang\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"tuple (original text, translated text)\\\",\\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Detroit local who is actively looking for job opportunities", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Job Search Interface\\\",\\n  \\\"description\\\": \\\"A web scraping interface that uses the Indeed API to find job listings. The user just needs to input the type of job they're looking for and their preferred location, and the interface will return a list of job opportunities.\\\",\\n  \\\"function_name\\\": \\\"get_job_opportunities\\\",\\n  \\\"input_args\\\": {\\n    \\\"job_title\\\": \\\"The type of job user is looking for\\\",\\n    \\\"location\\\": \\\"The preferred location of the user\\\"\\n  },\\n  \\\"return\\\": \\\"A list of job opportunities with the following information for each job: Job Title, Company, Location, Summary, Posting Date, and Job URL.\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"json\\\"],\\n    \\\"web_APIs\\\": [\\\"Indeed API\\\"],\\n    \\\"machine_learning_models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An HR software vendor developing a data management system specifically tailored for employee data", "synthesized text": "\"{\\n\\\"name\\\": \\\"Employee Data Management Interface\\\",\\n\\\"description\\\": \\\"An interface for managing employee data. Users can add, delete, update, and retrieve employee data.\\\",\\n\\\"function_name\\\": [\\\"add_employee\\\", \\\"delete_employee\\\", \\\"update_employee\\\", \\\"retrieve_employee\\\"],\\n\\\"input_args\\\": [\\\"employee_data\\\", \\\"emp_id\\\", \\\"new_data\\\"],\\n\\\"return\\\": [\\\"None for add, delete, and update functions. A dataframe of the employee's data for the retrieve function.\\\"],\\n\\\"depend\\\": [\\\"pandas library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local farmer who grows cempasúchil (marigolds) used for traditional Day of the Dead altars", "synthesized text": "\"{\\n\\\"name\\\": \\\"Marigold Flower Health Status Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that uses a pre-trained model from TensorFlow Hub to identify the health status of a marigold flower by scanning an image of the flower.\\\",\\n\\\"function_name\\\": \\\"marigold_health_status\\\",\\n\\\"input_args\\\": \\\"path_to_image - A string representing the path to the image of the marigold flower\\\",\\n\\\"return\\\": \\\"A string representing the label of the disease the flower might be suffering from, or 'healthy' if no disease is detected.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, AIY Vision Classifier Model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of parliament who questions the financial feasibility of investing in a national concert hall", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Feasibility Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface allows users to conduct a financial feasibility analysis by calculating the Net Present Value (NPV) and Internal Rate of Return (IRR) of a project given the initial investment amount and future cash flows.\\\", \\n\\\"function_name\\\": \\\"financial_feasibility_analysis\\\", \\n\\\"input_args\\\": {\\\"initial_investment\\\": \\\"The initial investment amount.\\\", \\\"future_cash_flows\\\": \\\"A list of estimated future cash flows from the project.\\\"}, \\n\\\"return\\\": {\\\"NPV\\\": \\\"Net Present Value of the project.\\\", \\\"IRR\\\": \\\"Internal Rate of Return of the project.\\\"}, \\n\\\"depend\\\": {\\\"python_library\\\": [\\\"numpy_financial\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A politician representing the region where the Amazon rainforest is located, who is supportive of indigenous rights and willing to work with the leader", "synthesized text": "\"{\\n\\\"name\\\": \\\"Deforestation Rate Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get the deforestation rate in the Amazon rainforest for a specified period using the Global Forest Watch's API.\\\",\\n\\\"function_name\\\": \\\"get_deforestation_rate\\\",\\n\\\"input_args\\\": [\\\"start_year\\\", \\\"end_year\\\"],\\n\\\"return\\\": \\\"The count of deforestation alerts in the Amazon rainforest during the specified period.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Global Forest Watch API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a retired radio engineer who has witnessed the growth of FM radio in Nepal.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Signal Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze and visualize audio signals. It can handle both local audio files and live radio streams.\\\",\\n\\\"function_name\\\": \\\"get_audio_info\\\",\\n\\\"input_args\\\": \\\"path_or_url - a string representing the path to a local audio file or the URL of a live radio stream\\\",\\n\\\"return\\\": \\\"A string representing the sample rate and duration of the audio signal, and a waveform plot of the signal.\\\",\\n\\\"depend\\\": \\\"Librosa Python library for audio analysis and Matplotlib Python library for visualization\\\"\\n}\"", "description": "tool development"}
{"input persona": "a PhD candidate in computer science, who recently completed her doctoral dissertation in collaboration with LIP6 and has been relying on lip6.fr for research materials.", "synthesized text": "\"{\\n\\\"name\\\": \\\"PDF Extraction and Text Search Interface\\\",\\n\\\"description\\\": \\\"Searches through all the PDF materials on the lip6.fr website, extracts text, and returns a list of PDFs that contain the queried keyword or phrase.\\\",\\n\\\"function_name\\\": \\\"search_keyword_in_pdfs\\\",\\n\\\"input_args\\\": [\\\"keyword\\\"],\\n\\\"return\\\": \\\"List of PDF URLs containing the keyword\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\", \\\"PyPDF2\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A renowned industry expert who references the senior engineer's code as an example of best practices", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Code Quality Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the Radon library to compute various code quality metrics from the input Python source code.\\\",\\n  \\\"function_name\\\": \\\"analyze_code_quality\\\",\\n  \\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the Python source code to be analyzed.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"raw_metrics\\\": \\\"Raw metrics such as SLOC, comment lines, blank lines.\\\",\\n    \\\"cc_metrics\\\": \\\"Cyclomatic complexity metrics.\\\",\\n    \\\"halstead_metrics\\\": \\\"Halstead metrics such as program vocabulary, length, calculated length, volume, difficulty, effort.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"radon\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a former student of Podhale State Vocational University in Nowy Targ", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the semantic similarity between two texts using SentenceTransformer model from Huggingface's transformers library. The output is a score from 0 to 1, where 1 means the texts are semantically identical.\\\",\\n\\\"function_name\\\": \\\"calculate_document_similarity\\\",\\n\\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n\\\"return\\\": \\\"similarity_score\\\",\\n\\\"depend\\\": [\\\"Huggingface's transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a socially conscious filmmaker from Tamil Nadu", "synthesized text": "\"{\\n\\\"name\\\": \\\"Subtitles Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates a SubRip (.srt) format subtitle file from one language to another using Google's Translation API and pysubs2 library.\\\",\\n\\\"function_name\\\": \\\"translate_subtitles\\\",\\n\\\"input_args\\\": [\\\"subtitle_file_path\\\", \\\"target_language\\\"],\\n\\\"return\\\": \\\"translated_subtitle_file_path\\\",\\n\\\"depend\\\": \\\"Google Translation API, pysubs2 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single mother seeking financial assistance to start her own business and lift her family out of poverty", "synthesized text": "\"{\\n\\\"name\\\": \\\"Small Business Loan Eligibility Check Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to predict the eligibility of a person for a small business loan based on their personal and financial information.\\\",\\n\\\"function_name\\\": \\\"check_loan_eligibility\\\",\\n\\\"input_args\\\": {\\n  \\\"age\\\": \\\"integer\\\",\\n  \\\"dependents\\\": \\\"integer\\\",\\n  \\\"education\\\": \\\"integer (1 for graduate, 0 for not graduate)\\\",\\n  \\\"employment\\\": \\\"integer (1 for self-employed, 0 for not self-employed)\\\",\\n  \\\"income\\\": \\\"float\\\",\\n  \\\"credit_score\\\": \\\"integer\\\"\\n},\\n\\\"return\\\": \\\"Probability (float between 0 and 1) of getting a loan\\\",\\n\\\"depend\\\": \\\"scikit-learn, pandas, joblib libraries and a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A backend developer who appreciates the clarity of the project requirements and follows them precisely", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Face Recognition library to identify the locations of faces in an image. The user only needs to input the path to an image file.\\\",\\n\\\"function_name\\\": \\\"identify_faces\\\",\\n\\\"input_args\\\": [\\\"image_path\\\"],\\n\\\"return\\\": \\\"List of tuples detailing the locations of each face in the image in css (top, right, bottom, left) order. Returns an empty list if no faces are found.\\\",\\n\\\"depend\\\": \\\"Face Recognition library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wife who is an excellent baker and doesn't understand coding at all", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Scaling Interface\\\",\\n\\\"description\\\": \\\"This interface scales the quantity of ingredients in a recipe based on the number of servings desired.\\\",\\n\\\"function_name\\\": \\\"scale_recipe\\\",\\n\\\"input_args\\\": [\\\"recipe_text\\\", \\\"servings\\\"],\\n\\\"return\\\": \\\"A string representing the scaled recipe.\\\",\\n\\\"depend\\\": [\\\"python\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A curious technology enthusiast with no prior knowledge about potentiometers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Potentiometer Value Reading Interface\\\",\\n\\\"description\\\": \\\"An interface to read the analog value from a potentiometer connected to a specified pin on a Raspberry Pi.\\\",\\n\\\"function_name\\\": \\\"read_potentiometer_value\\\",\\n\\\"input_args\\\": [\\\"pin\\\"],\\n\\\"return\\\": \\\"Analog value representing the potentiometer's current state\\\",\\n\\\"depend\\\": [\\\"RPi.GPIO\\\", \\\"time\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A technologist who specializes in clean energy technology and is an expert in transforming ideas into tangible products", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Solar Panel Efficiency Calculation Interface\\\",\\n  \\\"description\\\": \\\"This interface estimates the efficiency of a solar panel given its specifications, orientation, and weather conditions using a pre-trained machine learning model.\\\",\\n  \\\"function_name\\\": \\\"predict_efficiency\\\",\\n  \\\"input_args\\\": {\\n    \\\"solar_panel_specs\\\": \\\"Specifications of the solar panel (type, size, etc.)\\\",\\n    \\\"orientation\\\": \\\"Orientation of the solar panel (azimuth and tilt angles)\\\",\\n    \\\"weather_conditions\\\": \\\"Current weather conditions (temperature, sunlight intensity, etc.)\\\"\\n  },\\n  \\\"return\\\": \\\"Estimated efficiency of the solar panel\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas\\\", \\\"scikit-learn\\\"],\\n    \\\"machine learning models\\\": [\\\"A pre-trained model for solar panel efficiency prediction\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A casting director in the German film industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automatic Actor Search Interface\\\",\\n\\\"description\\\": \\\"This interface searches for actors based on specified age range, gender, and nationality using the IMDb API.\\\",\\n\\\"function_name\\\": \\\"search_actors_by_criteria\\\",\\n\\\"input_args\\\": {\\n    \\\"age_range\\\": \\\"A list or tuple of two integers representing the youngest and oldest age the actor could be.\\\",\\n    \\\"gender\\\": \\\"A string that should be either 'male' or 'female'.\\\",\\n    \\\"nationality\\\": \\\"A string representing the nationality the actor should have.\\\"\\n},\\n\\\"return\\\": \\\"A list of actor names who match the input criteria.\\\",\\n\\\"depend\\\": \\\"IMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A motivational speaker and longtime Virginia Cavaliers fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Team Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides comprehensive information about the user's favorite sports team, including team details, last 5 games and next 5 games.\\\",\\n\\\"function_name\\\": \\\"get_team_info\\\",\\n\\\"input_args\\\": {\\\"team_name\\\": \\\"A string representing the name of the user's favorite sports team.\\\"},\\n\\\"return\\\": \\\"A dictionary containing the team's details, last 5 games and next 5 games.\\\",\\n\\\"depend\\\": \\\"This function leverages the Sports Open Data API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A historian focused on the founding era who provides evidence to support the historical context argument", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Text Similarity Interface\\\",\\n    \\\"description\\\": \\\"An interface that computes the semantic similarity between two pieces of text using a pre-trained model from Huggingface's transformers library. Can be used to determine how closely a document or statement is related to a known piece of historical context.\\\",\\n    \\\"function_name\\\": \\\"compute_text_similarity\\\",\\n    \\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n    \\\"return\\\": \\\"A similarity score between the two texts.\\\",\\n    \\\"depend\\\": \\\"Huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A health inspector who is determined to uncover the vendor's secret recipe for food safety reasons", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides a detailed analysis of a recipe's ingredients, including their nutrition, diet and health labels. It is particularly useful for health inspectors who need to quickly assess the healthfulness of a food vendor's recipes.\\\",\\n\\\"function_name\\\": \\\"get_recipe_analysis\\\",\\n\\\"input_args\\\": \\\"recipe\\\",\\n\\\"return\\\": \\\"A comprehensive analysis of the recipe's ingredients, including their nutritional values, diet labels, and health labels.\\\",\\n\\\"depend\\\": \\\"Edamam API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high-profile celebrity who enjoys playing golf as a way to relax and network", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Golf Course Recommendations Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a user's location and returns the top rated nearby golf courses. The golf courses are sorted by rating, with the highest rated courses appearing first.\\\",\\n  \\\"function_name\\\": \\\"get_top_rated_golf_courses\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"A string representing the user's current location in the format of 'latitude,longitude'. For example, '51.5074,-0.1278' for London.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of dictionaries, each representing a top rated golf course. Each dictionary contains the course's name, rating, and address.\\\",\\n  \\\"depend\\\": \\\"This function uses the Google Places API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former Logistics Specialist in the Singapore Army who likes to correct inaccuracies and explain military terminologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Terminology Explanation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Wikipedia API to return a simple explanation of a military term.\\\",\\n\\\"function_name\\\": \\\"explain_military_term\\\",\\n\\\"input_args\\\": {\\\"term\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"explanation\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"web_API\\\": \\\"Wikipedia API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A young scholar who seeks advice on pursuing a career in medieval studies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scholarly Article Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Semantic Scholar API to search for influential papers in a specified field of interest.\\\",\\n\\\"function_name\\\": \\\"get_influential_papers\\\",\\n\\\"input_args\\\": \\\"field_of_interest\\\",\\n\\\"return\\\": \\\"A list of influential papers in the field of interest.\\\",\\n\\\"depend\\\": \\\"Semantic Scholar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A journalist covering the impact of security measures on the community and seeking interviews with the police sergeant", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Interview Scheduling Interface\\\",\\n\\\"description\\\": \\\"This interface creates an interview event on the user's Google Calendar and sends an invite to the interviewee.\\\",\\n\\\"function_name\\\": \\\"create_interview_event\\\",\\n\\\"input_args\\\": {\\n\\\"interviewee_email\\\": \\\"The email address of the person the user wants to interview.\\\",\\n\\\"interview_date\\\": \\\"The date for the preferred interview.\\\",\\n\\\"interview_time\\\": \\\"The time for the preferred interview.\\\",\\n\\\"duration_minutes\\\": \\\"The expected duration of the interview in minutes.\\\"\\n},\\n\\\"return\\\": \\\"The HTML link to the created event on the user's Google Calendar.\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A transgender activist who appreciates the inclusivity of Harry Potter and sees it as a way to spark conversations about acceptance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Transgender Name Pronoun Correction Interface\\\",\\n\\\"description\\\": \\\"An interface that replaces a character's name and pronouns in a text with a user's preferred name and pronouns. Useful for transgender individuals who wish to see themselves represented in their favorite books.\\\",\\n\\\"function_name\\\": \\\"correct_name_pronoun_in_text\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"original_name\\\", \\\"preferred_name\\\", \\\"original_pronouns\\\", \\\"preferred_pronouns\\\"],\\n\\\"return\\\": \\\"A string of text where the original name and pronouns have been replaced with the preferred name and pronouns.\\\",\\n\\\"depend\\\": [\\\"SpaCy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A brilliant astrophysicist who is known for their groundbreaking research on black holes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Black Hole Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Astropy library to analyze black hole data. It takes a path to a FITS file as input and returns basic stats about the data and a histogram.\\\",\\n\\\"function_name\\\": \\\"analyze_black_hole_data\\\",\\n\\\"input_args\\\": \\\"fits_file_path\\\",\\n\\\"return\\\": \\\"Basic stats about the data and a histogram\\\",\\n\\\"depend\\\": \\\"Astropy library, numpy, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "a senior North Korean official who is tasked with secretively developing the country’s ballistic missile program", "synthesized text": "\"{\\n\\\"name\\\": \\\"Satellite Imagery Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze satellite images and identify objects and their locations. Useful for surveillance and monitoring purposes.\\\",\\n\\\"function_name\\\": \\\"analyze_satellite_image\\\",\\n\\\"input_args\\\": \\\"image_path - The path to the satellite image file or the URL of the image.\\\",\\n\\\"return\\\": \\\"A dictionary with 'objects' (a list of detected objects in the image) and 'locations' (a list of bounding boxes indicating the locations of the detected objects).\\\",\\n\\\"depend\\\": \\\"Python libraries: torch, torchvision, PIL; Machine learning model: fasterrcnn_resnet50_fpn from torchvision.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young non-religious Ukrainian woman who is passionate about architecture and design.", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Viewer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to view 3D models from .obj files using Pygame's OpenGL functionality.\\\",\\n\\\"function_name\\\": \\\"view_3D_model\\\",\\n\\\"input_args\\\": \\\"path_to_obj_file - The path to the .obj file that contains the 3D model.\\\",\\n\\\"return\\\": \\\"None - Opens a new window that displays the 3D model.\\\",\\n\\\"depend\\\": \\\"Python's Pygame library and Pygame's Pygame3D module.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former poacher who now provides crucial information to help catch illegal hunters", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wildlife Activity Reporting Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input an image taken in a wildlife area. The system will analyze the image for potential signs of illegal hunting activity and generate a detailed report.\\\",\\n\\\"function_name\\\": \\\"detect_illegal_activity\\\",\\n\\\"input_args\\\": {\\\"image_path\\\": \\\"The path to the image file to be analyzed.\\\"},\\n\\\"return\\\": \\\"A detailed report on potential signs of illegal hunting activity.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"cv2\\\", \\\"numpy\\\", \\\"tensorflow\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"Pre-trained Image Classification Model\\\", \\\"GPT-2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a passionate player of \"The Division 2\" game", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Stats Interface\\\",\\n\\\"description\\\": \\\"This interface fetches a player's game stats from 'The Division 2' using Ubisoft's API.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": \\\"player_name\\\",\\n\\\"return\\\": \\\"Player's game stats or None if unable to fetch\\\",\\n\\\"depend\\\": \\\"Ubisoft's API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A radiation oncologist specializing in the treatment of specific types of cancer", "synthesized text": "\"{ \\n\\\"name\\\": \\\"Cancer Type Prediction Interface\\\", \\n\\\"description\\\": \\\"This interface takes as input a clinical narrative (medical history) and returns a prediction of the cancer type. It is particularly useful for oncologists specializing in the treatment of specific types of cancer.\\\", \\n\\\"function_name\\\": \\\"predict_cancer_type\\\", \\n\\\"input_args\\\": \\\"clinical_narrative\\\", \\n\\\"return\\\": \\\"predicted_cancer_type\\\", \\n\\\"depend\\\": \\\"Hugging Face's AutoTokenizer, AutoModelForSequenceClassification, PyTorch\\\" \\n}\"", "description": "tool development"}
{"input persona": "A die-hard fan of the \"Miraculous: Tales of Ladybug & Cat Noir\" animated series from France", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Dialogue Generator Interface\\\",\\n\\\"description\\\": \\\"Generates dialogues between the characters from the 'Miraculous: Tales of Ladybug & Cat Noir' series using a language generation model. The user inputs the names of the two characters and the initial dialogue, and the interface returns a continuation of the dialogue.\\\",\\n\\\"function_name\\\": \\\"generate_dialogue\\\",\\n\\\"input_args\\\": [\\\"character1\\\", \\\"character2\\\", \\\"initial_dialogue\\\"],\\n\\\"return\\\": \\\"A list of 3 possible continuations of the dialogue, each with a maximum length of 200 tokens.\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library (GPT-2 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wind turbine manufacturer representative providing insights on the latest advancements in wind power technology", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Wind Power Forecasting Interface\\\",\\n  \\\"description\\\": \\\"Predicts the wind power output based on weather forecast data. The input should be a list of weather forecast data including wind speed, wind direction, temperature, pressure, and humidity. The function returns the predicted wind power output.\\\",\\n  \\\"function_name\\\": \\\"predict_wind_power\\\",\\n  \\\"input_args\\\": [\\\"weather_data\\\"],\\n  \\\"return\\\": \\\"predicted_power\\\",\\n  \\\"depend\\\": [\\\"tensorflow\\\", \\\"numpy\\\", \\\"pre-trained machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A political science student who argues that population control measures are necessary for sustainable development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Population Data Retrieval Interface\\\", \\n\\\"description\\\": \\\"This interface fetches the current population of a given country using the World Population Review API.\\\", \\n\\\"function_name\\\": \\\"get_population_by_country\\\", \\n\\\"input_args\\\": \\\"country_name\\\", \\n\\\"return\\\": \\\"Current population of the input country\\\", \\n\\\"depend\\\": \\\"World Population Review API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A government official responsible for overseeing the bank's risk management practices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the risk associated with a particular banking operation or transaction using a pre-trained Machine Learning model.\\\",\\n\\\"function_name\\\": \\\"predict_risk\\\",\\n\\\"input_args\\\": [\\\"transaction_details\\\", \\\"model_path\\\"],\\n\\\"return\\\": \\\"Risk Score (float between 0 and 1)\\\",\\n\\\"depend\\\": \\\"scikit-learn library, Pre-trained ML model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A web developer who specializes in using EJS for server-side templating.", "synthesized text": "\"{\\n\\\"name\\\": \\\"HTML Minification Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a string of HTML code as input and returns a minified version of the same HTML code as a string. This is useful for web developers who want to optimize their website's load time by reducing the size of their HTML files.\\\",\\n\\\"function_name\\\": \\\"minify_html\\\",\\n\\\"input_args\\\": {\\\"html_code\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"minified_html\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"htmlmin python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former aerospace engineer who underwent a life-changing spiritual transformation and converted to Buddhism", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meditation Timer Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that serves as a meditation timer. The timer will take two parameters - the duration of the meditation in minutes and an optional 'interval' parameter that, if provided, will emit a gentle sound at the specified interval (also in minutes).\\\",\\n\\\"function_name\\\": \\\"meditation_timer\\\",\\n\\\"input_args\\\": {\\n    \\\"duration\\\": \\\"The duration of the meditation in minutes.\\\",\\n    \\\"interval\\\": \\\"An optional parameter specifying the interval at which a sound should be emitted (also in minutes).\\\"\\n},\\n\\\"return\\\": \\\"No return value. The function performs an action (timing a meditation session and optionally emitting sounds at intervals) rather than producing a result.\\\",\\n\\\"depend\\\": \\\"Built-in Python libraries for timing (time) and sound generation (os).\\\"\\n}\"", "description": "tool development"}
{"input persona": "A veteran wastewater treatment plant operator with years of experience in optimizing purification processes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Water Quality Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the water quality based on various parameters such as turbidity, pH, temperature etc.\\\",\\n\\\"function_name\\\": \\\"predict_water_quality\\\",\\n\\\"input_args\\\": \\\"parameters\\\",\\n\\\"return\\\": \\\"A string indicating the predicted water quality ('Poor Water Quality' or 'Good Water Quality').\\\",\\n\\\"depend\\\": \\\"Pandas, Scikit-learn, TensorFlow, Pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local resident in Wichita, Kansas who is a little cyber-phobic and dislikes online appointments.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Call Scheduling Interface\\\",\\n\\\"description\\\": \\\"An interface to schedule automated phone calls to deliver appointment details. Users need to input the recipient's phone number, the time of the appointment, and the details of the appointment. The interface will then make a call to the recipient with these details.\\\",\\n\\\"function_name\\\": \\\"schedule_call\\\",\\n\\\"input_args\\\": {\\n    \\\"account_sid\\\": \\\"Your Twilio Account SID\\\",\\n    \\\"auth_token\\\": \\\"Your Twilio Auth Token\\\",\\n    \\\"from_number\\\": \\\"Your Twilio phone number\\\",\\n    \\\"to_number\\\": \\\"Recipient's phone number\\\",\\n    \\\"appointment_details\\\": \\\"Details of the appointment\\\"\\n},\\n\\\"return\\\": \\\"The unique identifier (SID) of the call created\\\",\\n\\\"depend\\\": \\\"Twilio's Programmable Voice service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineering student learning about OpenStack's Ironic project", "synthesized text": "\"{\\n\\\"name\\\": \\\"OpenStack Ironic API Interface\\\",\\n\\\"description\\\": \\\"An interface to interact with the OpenStack Ironic API to get the details of a specified bare metal node.\\\",\\n\\\"function_name\\\": \\\"get_node_details\\\",\\n\\\"input_args\\\": [\\\"auth_url\\\", \\\"username\\\", \\\"password\\\", \\\"project_id\\\", \\\"project_domain_id\\\", \\\"user_domain_id\\\", \\\"node_name\\\"],\\n\\\"return\\\": \\\"A dictionary containing the details of the specified node, or an error message if the node was not found.\\\",\\n\\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"openstack\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A regular bus rider who appreciates the colorful murals that brighten up their daily commute", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mural Recognition and Information Interface\\\",\\n\\\"description\\\": \\\"Recognizes the content of a mural from an image and provides information about the recognized objects.\\\",\\n\\\"function_name\\\": \\\"recognize_mural\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"Description of the mural content\\\",\\n\\\"depend\\\": \\\"TensorFlow Hub, Google Vision API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data scientist who leverages socket programming to collect real-time data for analysis", "synthesized text": "\"{\\n\\\"name\\\": \\\"TCP Connection Interface\\\",\\n\\\"description\\\": \\\"This interface opens and maintains a TCP connection for real-time data collection. It uses the Python 'socket' library.\\\",\\n\\\"function_name\\\": \\\"create_tcp_connection\\\",\\n\\\"input_args\\\": [\\\"server_ip\\\", \\\"port\\\"],\\n\\\"return\\\": \\\"A socket object that can be used for sending and receiving data.\\\",\\n\\\"depend\\\": \\\"Python 'socket' library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A personal injury lawyer who offers legal advice and resources to pursue compensation for workplace injuries", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Workers Compensation Legal Advice Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a description of a workplace injury situation as input and returns legal advice based on workers compensation laws.\\\",\\n  \\\"function_name\\\": \\\"get_legal_advice\\\",\\n  \\\"input_args\\\": \\\"description - a string describing the workplace injury situation\\\",\\n  \\\"return\\\": \\\"A string containing legal advice based on workers compensation laws.\\\",\\n  \\\"depend\\\": \\\"Huggingface's transformers library (GPT-2 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A baker from Japan, introducing traditional Japanese techniques and ingredients in baking", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bread Recipe Translator Interface\\\",\\n\\\"description\\\": \\\"This interface translates a Japanese bread recipe into English and suggests alternative ingredients if the original Japanese ones are not available.\\\",\\n\\\"function_name\\\": \\\"bread_recipe_translator\\\",\\n\\\"input_args\\\": \\\"japanese_recipe - a string containing the original recipe in Japanese\\\",\\n\\\"return\\\": \\\"{ 'Translated Recipe': 'the translated recipe in English', 'Alternative Ingredients': 'a dictionary with the original Japanese ingredients as keys and their alternatives as values'}\\\",\\n\\\"depend\\\": \\\"googletrans - a Python library for translating between languages\\\"\\n}\"", "description": "tool development"}
{"input persona": "a tech reviewer who indulges in details and appreciates printers for their artistic potential", "synthesized text": "\"{\\n\\\"name\\\": \\\"Printer Specification Analyzer Interface\\\",\\n\\\"description\\\": \\\"Extracts printer specifications from a given product URL\\\",\\n\\\"function_name\\\": \\\"extract_printer_specs\\\",\\n\\\"input_args\\\": {\\n    \\\"url\\\": \\\"URL for a printer product\\\"\\n},\\n\\\"return\\\": \\\"A dictionary of printer specifications.\\\",\\n\\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\", \\\"BeautifulSoup from bs4\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "a Scottish energy policy researcher", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Wind Energy Potential Calculator\\\",\\n    \\\"description\\\": \\\"Estimates the potential wind energy production for a specific location using the MERRA-2 dataset from NASA's Global Modeling and Assimilation Office.\\\",\\n    \\\"function_name\\\": \\\"calculate_wind_energy_potential\\\",\\n    \\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\"],\\n    \\\"return\\\": \\\"An estimate of the annual energy production from a standard 2 MW wind turbine at the input location.\\\",\\n    \\\"depend\\\": [\\\"xarray\\\", \\\"MERRA-2 dataset\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a recent graduate in Denmark who has just started following cryptocurrency trading", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cryptocurrency Price Check Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input the name of a cryptocurrency and return its current price in the specified currency. The default currency is USD.\\\",\\n\\\"function_name\\\": \\\"get_crypto_price\\\",\\n\\\"input_args\\\": {\\n    \\\"crypto_name\\\": \\\"Name of the cryptocurrency (string). For example, 'bitcoin'.\\\",\\n    \\\"currency\\\": \\\"Optional. The currency in which the price should be returned (string). For example, 'usd'. Default is 'usd'.\\\"\\n},\\n\\\"return\\\": \\\"The current price of the specified cryptocurrency in the specified currency (float). For example, 39724.5.\\\",\\n\\\"depend\\\": \\\"CoinGecko API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young astronomy enthusiast who hangs out at the retired engineer's porch, eager to hear tales of space", "synthesized text": "\"{\\n\\\"name\\\": \\\"Star Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the basic details about a star from the Open Astronomy Catalog API. The user only needs to input the name of the star.\\\",\\n\\\"function_name\\\": \\\"get_star_information\\\",\\n\\\"input_args\\\": [\\\"star_name - The name of the star for which information is to be fetched.\\\"],\\n\\\"return\\\": [\\\"A dictionary with basic details about the star, or an error message if the star information could not be retrieved.\\\"],\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Open Astronomy Catalog API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A civil engineer living in Kagoshima Prefecture, Japan.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Earthquake Alert Interface\\\",\\n\\\"description\\\": \\\"This interface provides recent earthquake data around the input location using the Japan Meteorological Agency's API.\\\",\\n\\\"function_name\\\": \\\"get_earthquake_alerts\\\",\\n\\\"input_args\\\": \\\"location: The location for which the user wants to get recent earthquake data.\\\",\\n\\\"return\\\": \\\"A list of recent earthquake events around the input location. Each event includes the time of the earthquake, its magnitude, depth, and location.\\\",\\n\\\"depend\\\": \\\"requests, Japan Meteorological Agency's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A quarterback who has experienced firsthand the challenges of facing Suh on the field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Play Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the next play in a football game given the current game state.\\\",\\n\\\"function_name\\\": \\\"predict_next_play\\\",\\n\\\"input_args\\\": {\\n    \\\"game_state\\\": \\\"A string that describes the current state of the game.\\\"\\n},\\n\\\"return\\\": \\\"A string that represents the predicted next play ('Run', 'Pass', 'Field Goal', 'Punt').\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A promoter who relies on the blogger's influence to attract more audience to live shows", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blogger Influence Score Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from SEO tools and social media platforms to calculate an influence score for bloggers. It takes a blogger's website URL and social media handle as input and returns the calculated influence score.\\\",\\n\\\"function_name\\\": \\\"calculate_influence_score\\\",\\n\\\"input_args\\\": [\\\"url\\\", \\\"handle\\\"],\\n\\\"return\\\": \\\"Influence Score\\\",\\n\\\"depend\\\": [\\\"Ahrefs API\\\", \\\"Social Media API\\\", \\\"requests library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An older cousin who laments the decline of proper grammar and communication skills", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grammar Check Interface\\\",\\n\\\"description\\\": \\\"This interface corrects grammar and spelling errors in English text using the Language-Tool Python library.\\\",\\n\\\"function_name\\\": \\\"grammar_and_spell_check\\\",\\n\\\"input_args\\\": \\\"text - a string in English to be corrected\\\",\\n\\\"return\\\": \\\"corrected_text - a string with the corrected version of the text\\\",\\n\\\"depend\\\": \\\"language_tool_python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graduate student eager to learn about information geometry and its applications in machine learning", "synthesized text": "\"{\\n\\\"name\\\": \\\"Information Geometry Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the Fisher information matrix for a given probability distribution and visualizes the information geometry using a contour plot.\\\",\\n\\\"function_name\\\": \\\"visualize_information_geometry\\\",\\n\\\"input_args\\\": \\\"prob_dist - a probability distribution represented as a list of probabilities\\\",\\n\\\"return\\\": \\\"A contour plot visualizing the information geometry of the distribution.\\\",\\n\\\"depend\\\": \\\"numpy, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "Tennis enthusiast and amateur local player.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tennis Match Predictor Interface\\\",\\n  \\\"description\\\": \\\"This interface predicts the outcome of a tennis match between two players on a specific surface using a machine learning model.\\\",\\n  \\\"function_name\\\": \\\"predict_tennis_match\\\",\\n  \\\"input_args\\\": {\\n    \\\"player1\\\": \\\"Name of the first player\\\",\\n    \\\"player2\\\": \\\"Name of the second player\\\",\\n    \\\"surface\\\": \\\"Surface of the court (grass, clay, or hard)\\\"\\n  },\\n  \\\"return\\\": \\\"A prediction of who will win the match based on historical data.\\\",\\n  \\\"depend\\\": [\\\"transformers\\\", \\\"torch\\\", \\\"Hugging Face: mrm8488/bert-tiny-finetuned-sms-spam-detection\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a middle-aged dad, who watches Paw Patrol with his kids during the weekends.", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Episode Summary Interface\\\",\\n\\\"description\\\": \\\"Fetches episode summaries for a particular TV show\\\",\\n\\\"function_name\\\": \\\"get_episode_summary\\\",\\n\\\"input_args\\\": [\\\"show_name\\\", \\\"episode_number\\\"],\\n\\\"return\\\": \\\"String containing the summary of the specified episode\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"TVMaze API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A colleague from a different institution, sharing techniques for manuscript restoration", "synthesized text": "\"{\\n\\\"name\\\": \\\"Manuscript Restoration Interface\\\",\\n\\\"description\\\": \\\"This interface restores damaged or degraded manuscripts using a deep learning model for image inpainting. It takes as input the path to an image file of the manuscript and returns a restored version of the manuscript.\\\",\\n\\\"function_name\\\": \\\"restore_manuscript\\\",\\n\\\"input_args\\\": [\\\"image_path\\\"],\\n\\\"return\\\": \\\"A numpy array representing the restored manuscript image.\\\",\\n\\\"depend\\\": \\\"python libraries (cv2, numpy, tensorflow, tensorflow_hub), machine learning model (https://tfhub.dev/tensorflow/inpainting/gmcnn-1)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of a youth mentoring program that aims to empower and guide young girls", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mentor-Mentee Matching Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to match mentors with mentees based on their profiles. The user inputs their profile and a list of potential matches' profiles. The output is a ranked list of matches, with the first match being the most suitable.\\\",\\n\\\"function_name\\\": \\\"match_mentors\\\",\\n\\\"input_args\\\": [\\\"mentee_profile_path\\\", \\\"mentor_profiles_paths\\\"],\\n\\\"return\\\": \\\"A list of paths to mentor profiles, sorted by match suitability.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pioneer in computer graphics who was at the forefront of creating computer-generated imagery (CGI) for blockbusters", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Image Style Transfer Interface\\\",\\n  \\\"description\\\": \\\"This interface renders a given image in the style of another image using a pre-trained model from TensorFlow Hub. Users only need to provide the paths to two images, and the interface will return a synthesis of these images that retains the content of the first image while applying the artistic style of the second.\\\",\\n  \\\"function_name\\\": \\\"style_transfer\\\",\\n  \\\"input_args\\\": [\\\"content_path\\\", \\\"style_path\\\"],\\n  \\\"return\\\": \\\"A numpy array that represents the stylized image.\\\",\\n  \\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conference organizer inviting the historian to deliver a keynote address on the significance of the Middle Ages", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historian Availability Checking Interface\\\",\\n\\\"description\\\": \\\"An interface that checks the availability of a historian on certain dates using the Google Calendar API.\\\",\\n\\\"function_name\\\": \\\"check_historian_availability\\\",\\n\\\"input_args\\\": {\\n    \\\"email\\\": \\\"The email of the historian.\\\",\\n    \\\"proposed_dates\\\": \\\"The proposed dates for the conference in 'yyyy-mm-dd' format.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary where the key is the date and the value is a boolean indicating availability.\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent living in South Walton who's always looking for new activities for their teenage kids.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Discovery Interface\\\",\\n\\\"description\\\": \\\"This interface fetches upcoming events in a specified location based on preferred categories using the Eventbrite API.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_events\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"A string representing the user's location\\\",\\n    \\\"categories\\\": \\\"A list of strings representing the user's preferred categories of events\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the name, start and end time, description, and URL of an event.\\\",\\n\\\"depend\\\": \\\"Eventbrite API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a novice scientific researcher starting a doctoral study.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Literature Search Interface\\\",\\n\\\"description\\\": \\\"This interface provides functions to search for scientific articles related to a specific topic using the Entrez Programming Utilities (E-utilities) provided by the National Center for Biotechnology Information (NCBI).\\\",\\n\\\"function_name\\\": [\\\"search_articles\\\", \\\"get_articles_details\\\"],\\n\\\"input_args\\\": [\\\"topic\\\", \\\"max_results\\\", \\\"idlist\\\"],\\n\\\"return\\\": [\\\"List of PubMed IDs\\\", \\\"List of articles' details\\\"],\\n\\\"depend\\\": [\\\"Bio.Entrez (from Biopython)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hobbyist cryptographer looking for advice on creating unbreakable encryption algorithms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum Random Number Generation Interface\\\",\\n\\\"description\\\": \\\"Generates truly random numbers using quantum processes via the ANU Quantum Random Numbers Server API. Useful for creating highly secure encryption keys.\\\",\\n\\\"function_name\\\": \\\"get_quantum_random_numbers\\\",\\n\\\"input_args\\\": [\\\"num_of_numbers\\\"],\\n\\\"return\\\": \\\"List of truly random numbers\\\",\\n\\\"depend\\\": \\\"ANU Quantum Random Numbers Server API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a law student focusing on disaster management and emergency laws", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emergency Law Statutes Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface that returns all the federal statutes related to a given emergency-related keyword. Uses the Legal Information Institute's (LII) API from Cornell Law School.\\\",\\n\\\"function_name\\\": \\\"get_emergency_law_statutes\\\",\\n\\\"input_args\\\": [\\\"keyword\\\"],\\n\\\"return\\\": \\\"List of federal statutes titles related to the given keyword.\\\",\\n\\\"depend\\\": \\\"requests library, Cornell Law School's Legal Information Institute API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biology researcher exploring how blockchain can revolutionize data sharing in genetic research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Data Sharing Interface\\\",\\n\\\"description\\\": \\\"This interface uses the InterPlanetary File System (IPFS) to store and share genetic data in a decentralized manner.\\\",\\n\\\"function_name\\\": [\\\"store_genetic_data\\\", \\\"get_genetic_data\\\"],\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"file_hash\\\"],\\n\\\"return\\\": [\\\"File Hash (string)\\\", \\\"File content (bytes)\\\"],\\n\\\"depend\\\": [\\\"ipfshttpclient\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged, libertarian-minded IT specialist residing in Wyoming", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cryptocurrency Price Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface uses the CoinGecko API to fetch the current price, market cap, trading volume and other related information of any given cryptocurrency.\\\",\\n\\\"function_name\\\": \\\"get_cryptocurrency_info\\\",\\n\\\"input_args\\\": \\\"crypto_name - a string representing the name of the cryptocurrency\\\",\\n\\\"return\\\": \\\"A dictionary containing the current price in USD, the market cap, the 24h trading volume, and the 24h change percentage of the requested cryptocurrency.\\\",\\n\\\"depend\\\": \\\"CoinGecko API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mixologist who creates custom Wake Forest-themed cocktails and drinks for watch parties", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alcohol Content Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the total alcohol content of a cocktail given the volume and alcohol content (ABV) of each individual ingredient.\\\",\\n\\\"function_name\\\": \\\"calculate_alcohol_content\\\",\\n\\\"input_args\\\": \\\"A list of tuples, where each tuple contains the volume (in milliliters) and alcohol content (as a decimal) of each ingredient.\\\",\\n\\\"return\\\": \\\"A decimal representing the total alcohol content of the cocktail.\\\",\\n\\\"depend\\\": \\\"Python built-in functionalities\\\"\\n}\"", "description": "tool development"}
{"input persona": "A caretaker providing unconventional food sources and observing the polar bear's adaptation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Polar Bear Food Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to analyze images of food items and predict their nutritional content. The caretaker can input the path to an image of the food item, and the interface will return the estimated nutritional content.\\\",\\n\\\"function_name\\\": \\\"predict_nutritional_content\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"predicted_nutritional_content\\\",\\n\\\"depend\\\": \\\"PyTorch, torchvision, PIL\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservative philosopher arguing for moral absolutism", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Moral Argument Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses NLP libraries to analyze a given argument text and identify its logical structure, coherence, and fallacies. This can help philosophers, debaters, and writers in formulating more logically sound and persuasive arguments.\\\",\\n  \\\"function_name\\\": \\\"analyze_moral_argument\\\",\\n  \\\"input_args\\\": [\\\"argument_text\\\"],\\n  \\\"return\\\": \\\"a detailed analysis of the argument including its logical structure, coherence, and any fallacies detected.\\\",\\n  \\\"depend\\\": [\\\"HuggingFace transformers or a custom NLP library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineering student who is studying Actor-based concurrency model using Akka.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Actor System Interface\\\",\\n\\\"description\\\": \\\"This interface creates an actor system using the Akka library in Python (Pykka). The actor system can handle concurrent operations.\\\",\\n\\\"function_name\\\": \\\"create_actor_system\\\",\\n\\\"input_args\\\": [\\\"name\\\"],\\n\\\"return\\\": \\\"An actor reference which can be used to send messages to the actor.\\\",\\n\\\"depend\\\": \\\"Pykka library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A group of vintage enthusiasts who organize pop-up markets to showcase and sell their curated finds", "synthesized text": "\"{\\n\\\"name\\\": \\\"Online Market Organizer Interface\\\",\\n\\\"description\\\": \\\"This interface leverages the Eventbrite API to create, update, and manage events. It's tailored for a group of vintage enthusiasts who organize pop-up markets to showcase and sell their curated finds.\\\",\\n\\\"function_name\\\": \\\"create_event\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"description\\\", \\\"start_time\\\", \\\"end_time\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"Eventbrite URL of the created event or an error message\\\",\\n\\\"depend\\\": [\\\"Eventbrite API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young pianist who suffered a hand injury and is struggling to regain their musical abilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Piano Exercise Recommendation Interface\\\",\\n\\\"description\\\": \\\"Generates a custom piano exercise based on the given difficulty level and length.\\\",\\n\\\"function_name\\\": \\\"generate_piano_exercise\\\",\\n\\\"input_args\\\": [\\\"difficulty\\\", \\\"length\\\"],\\n\\\"return\\\": \\\"Path to the generated MIDI file.\\\",\\n\\\"depend\\\": [\\\"magenta\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A professional basketball player from Costa Rica who has participated in the 2023 Central American and Caribbean Games.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches a basketball player's performance statistics from a sports data provider.\\\",\\n\\\"function_name\\\": \\\"get_basketball_stats\\\",\\n\\\"input_args\\\": {\\n    \\\"player_name\\\": \\\"The name of the basketball player\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing the player's performance statistics\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"MySportsFeeds API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A new age spiritual healer, specializing in energy-based emotional therapy and a believer in the mystical history of Atlantis.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Energy Level Detection Interface\\\",\\n\\\"description\\\": \\\"This interface receives a path to a voice recording file and returns the detected energy level using a deep learning model from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"detect_energy_level\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"energy_level\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, numpy, librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Indian military personnel who served his country for 30 years and received the 50th Independence Anniversary Medal.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Medal Recognition Interface\\\",\\n\\\"description\\\": \\\"Recognizes the text engraved on a military medal using Optical Character Recognition (OCR).\\\",\\n\\\"function_name\\\": \\\"recognize_medal_text\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"recognized_text\\\",\\n\\\"depend\\\": \\\"Google Cloud Vision API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fitness blogger who shares their experience and tips on cross-training for runners", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Training Plan Optimization Interface\\\",\\n  \\\"description\\\": \\\"An interface that takes a runner's current stats and goals, and returns an optimized cross-training plan.\\\",\\n  \\\"function_name\\\": \\\"optimize_training_plan\\\",\\n  \\\"input_args\\\": {\\n    \\\"mileage\\\": \\\"Current weekly mileage\\\",\\n    \\\"longest_run\\\": \\\"Length of the longest run\\\",\\n    \\\"pace\\\": \\\"Average running pace\\\",\\n    \\\"goal\\\": \\\"Running goal (like a marathon)\\\",\\n    \\\"days\\\": \\\"Number of available training days\\\"\\n  },\\n  \\\"return\\\": \\\"A detailed cross-training plan\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"tensorflow\\\", \\\"sklearn\\\"],\\n    \\\"pre-trained model\\\": \\\"A TensorFlow model trained to optimize cross-training plans\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A forward-thinking governor who is committed to implementing renewable energy policies and expanding green initiatives in the state", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Potential Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that utilizes the PVWatts API to estimate the energy production potential of a solar photovoltaic system at a particular latitude and longitude.\\\",\\n\\\"function_name\\\": \\\"get_solar_potential\\\",\\n\\\"input_args\\\": {\\n    \\\"latitude\\\": \\\"The latitude of the area of interest.\\\",\\n    \\\"longitude\\\": \\\"The longitude of the area of interest.\\\"\\n},\\n\\\"return\\\": \\\"The annual energy production (in kWh) of a solar photovoltaic system at the given location.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"PVWatts v6 API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A staunch climate change skeptic who believes the Paris climate accord will negatively affect the economy.", "synthesized text": "\"{\\n\\\"name\\\": \\\"CO2 Emission Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts CO2 emissions based on GDP, population, and energy use using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_co2_emissions\\\",\\n\\\"input_args\\\": [\\\"gdp\\\", \\\"population\\\", \\\"energy_use\\\"],\\n\\\"return\\\": \\\"Predicted CO2 emissions based on input values.\\\",\\n\\\"depend\\\": \\\"Sklearn library and a pre-trained machine learning model for CO2 emission prediction.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A logistics manager responsible for coordinating the transportation and storage of oil products", "synthesized text": "\"{\\n\\\"name\\\": \\\"Oil Price Forecasting Interface\\\",\\n\\\"description\\\": \\\"This interface takes historical oil prices as input and returns the forecasted oil prices.\\\",\\n\\\"function_name\\\": \\\"forecast_oil_prices\\\",\\n\\\"input_args\\\": \\\"historical_prices\\\",\\n\\\"return\\\": \\\"forecasted_prices\\\",\\n\\\"depend\\\": \\\"huggingface\\\"\\n}\"", "description": "tool development"}
{"input persona": "An active participant in a global forum for insect geneticists, exchanging ideas and research findings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analyzing genetic sequences. Returns a summary of the sequence, including its length, frequency of nucleotides, and GC content.\\\",\\n\\\"function_name\\\": \\\"analyze_genetic_sequence\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": {\\\"sequence_id\\\": \\\"string\\\", \\\"length\\\": \\\"int\\\", \\\"nucleotide_count\\\": \\\"dict\\\", \\\"gc_content\\\": \\\"float\\\"},\\n\\\"depend\\\": [\\\"Biopython\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer developing sustainable irrigation system using IoT and AI", "synthesized text": "\"{\\n\\\"name\\\": \\\"Irrigation Control Interface\\\",\\n\\\"description\\\": \\\"An interface that uses weather forecast data and soil moisture content data to determine the optimal irrigation schedule for a particular region.\\\",\\n\\\"function_name\\\": \\\"get_irrigation_schedule\\\",\\n\\\"input_args\\\": \\\"location: Tuple[float, float]\\\",\\n\\\"return\\\": \\\"List[bool]: A list of booleans indicating whether to irrigate on the respective day (True means irrigate, False means don't irrigate).\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas, sklearn; Web APIs: OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired anthropologist who pioneered the field of transportation anthropology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Railway Route Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a user's current location and destination, and returns the shortest railway route from the current location to the destination using data from OpenStreetMap and the NetworkX library.\\\",\\n\\\"function_name\\\": \\\"shortest_railway_route\\\",\\n\\\"input_args\\\": [\\\"current_location\\\", \\\"destination\\\"],\\n\\\"return\\\": \\\"An array of node IDs, representing the shortest path from the current location to the destination.\\\",\\n\\\"depend\\\": [\\\"NetworkX library\\\", \\\"OpenStreetMap API\\\", \\\"geopy library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am an avid fan of \"Inside No. 9\" who loves good pranks.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prank Idea Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates creative and fun prank ideas based on the user's input of environment, humor type, and prank level. It uses a large language model to generate these ideas.\\\",\\n\\\"function_name\\\": \\\"prank_idea_generator\\\",\\n\\\"input_args\\\": {\\n    \\\"environment\\\": \\\"The type of environment where the prank will take place (e.g., office, school, home)\\\",\\n    \\\"humor_type\\\": \\\"The sense of humor of the person who will be pranked (e.g., silly, sarcastic, dry)\\\",\\n    \\\"prank_level\\\": \\\"The level of the prank (e.g., harmless, medium, extreme)\\\"\\n},\\n\\\"return\\\": \\\"A list of prank ideas suitable for the specified environment, humor type, and prank level.\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional healer passing down ancestral knowledge and healing practices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medicinal Plant Identification Interface\\\",\\n\\\"description\\\": \\\"A high level interface that accepts an image of a plant and returns the name and species of the plant using the Plant.id API.\\\",\\n\\\"function_name\\\": \\\"identify_plant\\\",\\n\\\"input_args\\\": \\\"image_path: The path to the image file of the plant.\\\",\\n\\\"return\\\": \\\"A list of tuples where each tuple contains the name and species of the plant identified from the image.\\\",\\n\\\"depend\\\": \\\"Python's requests and json libraries, Plant.id API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A public administration officer in charge of geographical data management in Iran", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geographical Data Management Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of addresses in Iran and returns a GeoDataFrame with the location's latitude, longitude, and geometry data.\\\",\\n\\\"function_name\\\": \\\"create_geographical_dataframe\\\",\\n\\\"input_args\\\": [\\\"addresses\\\"],\\n\\\"return\\\": \\\"GeoDataFrame\\\",\\n\\\"depend\\\": [\\\"geopandas\\\", \\\"geopy\\\", \\\"shapely\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A systems engineer with a passion for teaching, who provides step-by-step instructions on server configuration", "synthesized text": "\"{\\n\\\"name\\\": \\\"Server Configuration Verification Interface\\\",\\n\\\"description\\\": \\\"Connects to a server via SSH and executes commands to check the server's configuration.\\\",\\n\\\"function_name\\\": \\\"verify_server_configuration\\\",\\n\\\"input_args\\\": {\\n    \\\"server_ip\\\": \\\"The IP address of the server\\\",\\n    \\\"username\\\": \\\"The username for the server\\\",\\n    \\\"password\\\": \\\"The password for the server\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with the operating system information and disk usage, or an error message if the connection fails.\\\",\\n\\\"depend\\\": \\\"Python's 'paramiko' library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A coin dealer who specializes in rare proof sets and can provide valuable insights and recommendations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coin Price Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to predict the future price of a coin.\\\",\\n\\\"function_name\\\": \\\"predict_coin_price\\\",\\n\\\"input_args\\\": {\\\"coin_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"predicted_price\\\": \\\"float\\\"},\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"transformers\\\", \\\"torch\\\"], \\n          \\\"models\\\": [\\\"distilbert-base-uncased-finetuned-sst-2-english\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A father who played football in his youth and has passed on the love for the Packers to his children", "synthesized text": "\"{\\n  \\\"name\\\": \\\"NFL Game Score Prediction Interface\\\",\\n  \\\"description\\\": \\\"An interface that predicts the outcome of an NFL game between two teams using a pre-trained machine learning model.\\\",\\n  \\\"function_name\\\": \\\"predict_nfl_game_score\\\",\\n  \\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\"],\\n  \\\"return\\\": \\\"A tuple containing the predicted winning team and the probability of them winning.\\\",\\n  \\\"depend\\\": [\\\"HuggingFace Transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Um desenvolvedor back-end que implementa os designs em código funcional e otimizado", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface de Compara\\u00e7\\u00e3o de Desempenho de C\\u00f3digo\\\",\\n\\\"description\\\": \\\"Esta interface compara o tempo de execu\\u00e7\\u00e3o de duas fun\\u00e7\\u00f5es de c\\u00f3digo e retorna a que tem o tempo de execu\\u00e7\\u00e3o mais r\\u00e1pido.\\\",\\n\\\"function_name\\\": \\\"compare_code_performance\\\",\\n\\\"input_args\\\": [\\\"func1\\\", \\\"func2\\\", \\\"number\\\"],\\n\\\"return\\\": \\\"A fun\\u00e7\\u00e3o com o tempo de execu\\u00e7\\u00e3o mais r\\u00e1pido e os tempos de execu\\u00e7\\u00e3o de ambas as fun\\u00e7\\u00f5es\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"timeit\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A beekeeper who utilizes the lumber mill's wood scraps to build beehives for their apiary", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wood Moisture Measurement Interface\\\",\\n\\\"description\\\": \\\"This interface measures the moisture content of wood. The moisture content is returned as a floating-point number representing the percentage of moisture.\\\",\\n\\\"function_name\\\": \\\"measure_wood_moisture\\\",\\n\\\"input_args\\\": {\\\"port\\\": \\\"The serial port that the moisture sensor is connected to.\\\"},\\n\\\"return\\\": \\\"The moisture content of the wood.\\\",\\n\\\"depend\\\": {\\\"Python libraries\\\": [\\\"pySerial\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A big fan of strongman competitions and a fellow bodybuilder in Iceland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Strength Training Progress Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to track their strength training progress by predicting their 1RM (One-Repetition Maximum) based on the current weight, reps and sets they are lifting. It returns the rate of strength increase.\\\",\\n\\\"function_name\\\": \\\"get_strength_progress\\\",\\n\\\"input_args\\\": {\\n    \\\"weight_list\\\": \\\"A list of weights lifted in each session.\\\",\\n    \\\"reps_list\\\": \\\"A list of reps done in each session.\\\",\\n    \\\"sets_list\\\": \\\"A list of sets done in each session.\\\"\\n},\\n\\\"return\\\": \\\"The rate of strength increase.\\\",\\n\\\"depend\\\": \\\"scipy, sklearn, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular television personality known for presenting simplified versions of historical events", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Simplification Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the information about historical events. It uses the Wikipedia API to obtain information about the historical event and a text summarization model from HuggingFace to simplify the information.\\\",\\n\\\"function_name\\\": \\\"simplify_historical_event\\\",\\n\\\"input_args\\\": {\\n    \\\"event\\\": \\\"Name or date of the historical event.\\\"\\n},\\n\\\"return\\\": \\\"A simplified summary of the historical event.\\\",\\n\\\"depend\\\": \\\"Wikipedia API, HuggingFace's text summarization model\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a Venezuelan history professor who is deeply disenchanted with the political manipulation of constitutions in Latin American history.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Constitution Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface compares the semantic similarity between two different constitutions and returns a similarity score between 0 and 1.\\\",\\n\\\"function_name\\\": \\\"compute_similarity_between_constitutions\\\",\\n\\\"input_args\\\": [\\\"path_to_constitution1\\\", \\\"path_to_constitution2\\\"],\\n\\\"return\\\": \\\"A similarity score between 0 and 1, where 1 means the two constitutions are semantically identical.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concerned and engaged Aliquippa community member who advocates for a safer and more secure neighborhood", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crime Data Collection Interface\\\",\\n\\\"description\\\": \\\"This interface fetches crime data for a specified neighborhood using the public API from data.police.uk\\\",\\n\\\"function_name\\\": \\\"get_crime_data\\\",\\n\\\"input_args\\\": \\\"neighborhood\\\",\\n\\\"return\\\": \\\"JSON object containing detailed crime incidents reported in the specified neighborhood\\\",\\n\\\"depend\\\": \\\"requests library, data.police.uk API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bioinformatics expert specializing in XML and SBML integration for drug discovery", "synthesized text": "\"{\\n\\\"name\\\": \\\"SBML to Networkx Graph Interface\\\",\\n\\\"description\\\": \\\"This interface converts an SBML (Systems Biology Markup Language) file into a networkx graph object. Users only need to input the path to an SBML file.\\\",\\n\\\"function_name\\\": \\\"sbml_to_networkx_graph\\\",\\n\\\"input_args\\\": [\\\"sbml_path\\\"],\\n\\\"return\\\": \\\"A networkx graph object representing the SBML file.\\\",\\n\\\"depend\\\": [\\\"libsbml library\\\", \\\"networkx library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local historian from Tampere, Finland with a passion for geology and preservation of local history.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Earthquake Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for historical earthquake events based on location and time range. The earthquakes are fetched from the US Geological Survey's Earthquake Catalog API.\\\",\\n\\\"function_name\\\": \\\"get_historical_earthquakes\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"start_time\\\", \\\"end_time\\\"],\\n\\\"return\\\": \\\"List of dictionaries each containing the magnitude, place, time, and details of a historical earthquake.\\\",\\n\\\"depend\\\": \\\"US Geological Survey's Earthquake Catalog API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tech entrepreneur developing software to map and monitor deforestation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Deforestation Mapping Interface\\\",\\n\\\"description\\\": \\\"This interface fetches satellite imagery from Planet API and uses a deep learning model to identify deforested areas. It takes a location (latitude and longitude) and a date as input, and returns a map highlighting deforested areas.\\\",\\n\\\"function_name\\\": \\\"detect_deforestation\\\",\\n\\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"deforested_areas\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"PIL\\\", \\\"io\\\"],\\n\\\"web_apis\\\": [\\\"Planet API\\\"],\\n\\\"machine_learning_models\\\": [\\\"https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An active participant in an art forum dedicated to discussing and preserving Soviet-era literary artworks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates Russian text (or any other language) into English using Google Cloud Translation API. This is useful for users who are interested in Soviet-era literary artworks but do not understand Russian.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"string\\\", \\\"target_language\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"google.cloud\\\"], \\\"Web APIs\\\": [\\\"Google Cloud Translation API\\\"], \\\"machine learning models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "A retail store owner who relies on the import business owner for a steady supply of goods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Exchange Rate Interface\\\",\\n\\\"description\\\": \\\"This interface returns the current exchange rate between the base currency and the target currency.\\\",\\n\\\"function_name\\\": \\\"get_exchange_rate\\\",\\n\\\"input_args\\\": [\\\"base_currency\\\", \\\"target_currency\\\"],\\n\\\"return\\\": \\\"Current exchange rate as a float.\\\",\\n\\\"depend\\\": \\\"ExchangeRate-API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst collaborating on a project investigating the correlation between religious conservatism and right-wing politics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Religion-Politics Correlation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the correlation between religious conservatism and right-wing politics based on data provided in a CSV file.\\\",\\n\\\"function_name\\\": \\\"calculate_correlation\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the CSV file containing 'political_leaning' and 'religious_conservatism' columns.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"correlation\\\": \\\"The Spearman correlation between 'political_leaning' and 'religious_conservatism'.\\\",\\n    \\\"p_value\\\": \\\"The p-value for the correlation test.\\\"\\n},\\n\\\"depend\\\": \\\"pandas, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager overseeing the entire publication process and ensuring timely delivery", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Deadline Tracking Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the number of days remaining until the project deadline. This helps project managers to track project timelines more effectively.\\\",\\n\\\"function_name\\\": \\\"calculate_days_remaining\\\",\\n\\\"input_args\\\": {\\n    \\\"start_date\\\": \\\"The start date of the project, formatted as 'YYYY-MM-DD'\\\",\\n    \\\"end_date\\\": \\\"The expected end date of the project, formatted as 'YYYY-MM-DD'\\\",\\n    \\\"current_date\\\": \\\"The current date, formatted as 'YYYY-MM-DD'\\\"\\n},\\n\\\"return\\\": \\\"The number of days remaining until the project deadline.\\\",\\n\\\"depend\\\": \\\"Python's datetime library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A government official from Kyrgyzstan who is proficient in laws and regulations related to electronic governance.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Legal Document Similarity Checker\\\",\\n  \\\"description\\\": \\\"This interface accepts two legal documents as input and returns a similarity score between the documents using a pre-trained model from huggingface transformers.\\\",\\n  \\\"function_name\\\": \\\"compute_similarity\\\",\\n  \\\"input_args\\\": [\\\"document1\\\", \\\"document2\\\"],\\n  \\\"return\\\": \\\"A similarity score between the input documents.\\\",\\n  \\\"depend\\\": \\\"Huggingface Transformers library (sentence-transformers/bert-base-nli-mean-tokens model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a loyal Vertz fan who is originally from Matsuyama, Ehime", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vertz Concert Notification Interface\\\",\\n\\\"description\\\": \\\"Fetches upcoming Vertz concerts in a given location using the Songkick API\\\",\\n\\\"function_name\\\": \\\"get_upcoming_vertz_concerts\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"a string representing the user's location\\\"\\n},\\n\\\"return\\\": \\\"a list of dictionaries, where each dictionary contains the venue, city, and date of an upcoming Vertz concert\\\",\\n\\\"depend\\\": \\\"requests, Songkick API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud rival realtor", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitor Property Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Zillow API to retrieve information about a competitor's property listings.\\\",\\n\\\"function_name\\\": \\\"get_competitor_properties\\\",\\n\\\"input_args\\\": [\\\"realtor_id\\\"],\\n\\\"return\\\": \\\"A list of dictionaries where each dictionary contains the details (price, location, size) of a property listed by the competitor.\\\",\\n\\\"depend\\\": \\\"Zillow API, Python's requests and xml.etree.ElementTree libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concerned mother who wants to ensure her child's personal essay stands out among other applicants", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grammar and Plagiarism Check Interface\\\", \\n\\\"description\\\": \\\"This interface uses the Grammarly API to check grammar and plagiarism in a given text.\\\", \\n\\\"function_name\\\": \\\"check_grammar_and_plagiarism\\\", \\n\\\"input_args\\\": [\\\"text\\\"], \\n\\\"return\\\": [\\\"grammar_errors\\\", \\\"plagiarism_score\\\"],\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Grammarly API\\\"] \\n}\"", "description": "tool development"}
{"input persona": "A politician who supports the death penalty but engages in respectful debates with the lawyer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Debate Summary Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes the audio of a political debate and summarizes the key points.\\\",\\n\\\"function_name\\\": \\\"summarize_debate\\\",\\n\\\"input_args\\\": {\\n    \\\"audio_file_path\\\": \\\"The path to an audio file of a debate.\\\"\\n},\\n\\\"return\\\": \\\"A summary of the key points made during the debate\\\",\\n\\\"depend\\\": \\\"Google's Speech-to-Text service API, HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个正在学意大利语的中国体育迷", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Commentary Translation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Huggingface Transformers library and the Sportsradar API to fetch live commentary from a football match and translate it into a target language.\\\",\\n\\\"function_name\\\": \\\"football_commentary_translation\\\",\\n\\\"input_args\\\": [\\\"match_id\\\", \\\"target_language\\\"],\\n\\\"return\\\": \\\"A list of translated football match comments.\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers, Sportsradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young woman seeking professional advice on managing her acne-prone skin", "synthesized text": "\"{\\n\\\"name\\\": \\\"Acne Prediction and Treatment Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts the probability of acne based on various inputs and provides treatment recommendations.\\\",\\n\\\"function_name\\\": \\\"predict_acne\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"gender\\\", \\\"skin_type\\\", \\\"diet\\\"],\\n\\\"return\\\": [\\\"probability of having acne\\\", \\\"treatment recommendation\\\"],\\n\\\"depend\\\": [\\\"Large Language Model\\\", \\\"Acne prediction trained model (e.g., RandomForestClassifier from sklearn)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Ethiopian human rights advocate living in Europe", "synthesized text": "\"{\\n\\\"name\\\": \\\"Human Rights News Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest news articles related to human rights in Ethiopia using the NewsAPI.\\\",\\n\\\"function_name\\\": \\\"get_human_rights_news\\\",\\n\\\"input_args\\\": \\\"num_articles\\\",\\n\\\"return\\\": \\\"List of dictionaries where each dictionary contains the title, description, and url of a news article.\\\",\\n\\\"depend\\\": \\\"NewsAPI, requests, json\\\"\\n}\"", "description": "tool development"}
{"input persona": "A regular customer who seeks personalized advice from the nutritionist on maintaining a balanced diet while indulging in bakery treats", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutrition Facts Interface\\\",\\n\\\"description\\\": \\\"Get the nutrition facts for a specified bakery item\\\",\\n\\\"function_name\\\": \\\"get_nutrition_facts\\\",\\n\\\"input_args\\\": [\\\"food_item\\\"],\\n\\\"return\\\": {\\\"calories\\\": \\\"Calories content\\\", \\\"protein\\\": \\\"Protein content\\\", \\\"fat\\\": \\\"Fat content\\\", \\\"carbs\\\": \\\"Carbohydrate content\\\", \\\"fiber\\\": \\\"Fiber content\\\"},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Edamam Food and Grocery Database API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A cousin who is an expert in horticulture and brings natural elements into interior spaces", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Indoor Plant Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface leverages the Trefle API to recommend suitable indoor plants based on room conditions such as light level and humidity.\\\",\\n  \\\"function_name\\\": \\\"get_indoor_plants\\\",\\n  \\\"input_args\\\": {\\n    \\\"light\\\": \\\"String describing the light level of your room (low, medium, high)\\\",\\n    \\\"humidity\\\": \\\"String describing the humidity level of your room (low, medium, high)\\\"\\n  },\\n  \\\"return\\\": \\\"A list of suitable indoor plants for the given conditions\\\",\\n  \\\"depend\\\": \\\"Trefle API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired factory worker suffering from hearing loss due to years of noise exposure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hearing Aid Adjustment Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained deep learning model from Facebook's research hub to filter out background noise from audio files, improving the clarity of the speech for those with hearing difficulties.\\\",\\n\\\"function_name\\\": \\\"enhance_audio\\\",\\n\\\"input_args\\\": {\\\"path_to_audio\\\": \\\"The file path to the audio file that needs noise reduction.\\\"},\\n\\\"return\\\": \\\"A numpy array representation of the enhanced audio file with reduced background noise.\\\",\\n\\\"depend\\\": \\\"This function leverages the PyTorch library, TorchAudio library, and a pre-trained model from Facebook's research hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student who successfully underwent orthodontic treatment with clear aligners and shares their positive experience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Teeth Alignment Progress Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenCV and dlib libraries to track the alignment progress of the teeth throughout a treatment. It takes a directory path where images of teeth (taken from the same angle) are stored, and returns a graph displaying the changes in teeth alignment over time.\\\",\\n\\\"function_name\\\": \\\"track_alignment_progress\\\",\\n\\\"input_args\\\": \\\"directory_path\\\",\\n\\\"return\\\": \\\"A graph showing the alignment progress of the teeth\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\", \\\"dlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A community leader rallying their neighborhood to stand up for their legal rights", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Legal Document Search Interface\\\",\\n  \\\"description\\\": \\\"Fetches legal documents related to certain keywords from the CourtListener Free Law Project.\\\",\\n  \\\"function_name\\\": \\\"fetch_legal_documents\\\",\\n  \\\"input_args\\\": \\\"keywords\\\",\\n  \\\"return\\\": \\\"A list of URLs pointing to legal documents relevant to the given keywords.\\\",\\n  \\\"depend\\\": \\\"CourtListener Free Law Project API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bank teller who assists customers with traditional banking services", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface takes an amount of money in one currency and converts it to the equivalent amount in another currency using real-time exchange rates from ExchangeRate-API.\\\",\\n\\\"function_name\\\": \\\"convert_currency\\\",\\n\\\"input_args\\\": [\\\"amount\\\", \\\"from_currency\\\", \\\"to_currency\\\"],\\n\\\"return\\\": \\\"converted_amount\\\",\\n\\\"depend\\\": \\\"ExchangeRate-API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young child who is mesmerized by the bright colors and asks the property owner about the artist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Artist Finder\\\",\\n\\\"description\\\": \\\"This interface accepts a description of an artwork and returns the name of the artist who created it by searching the internet. The accuracy of the results depends on the information available online.\\\",\\n\\\"function_name\\\": \\\"find_artist_by_art_description\\\",\\n\\\"input_args\\\": \\\"description\\\",\\n\\\"return\\\": \\\"artist\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An older brother who offers practical tips on organizing and maximizing space in a small room", "synthesized text": "\"{\\n\\\"name\\\": \\\"Room Layout Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface optimizes the placement of furniture in a small room. The user inputs the dimensions of their room and their furniture, and the interface returns an optimized layout.\\\",\\n\\\"function_name\\\": \\\"optimize_room_layout\\\",\\n\\\"input_args\\\": [\\\"room_width\\\", \\\"room_height\\\", \\\"furniture\\\"],\\n\\\"return\\\": \\\"A dictionary where each key is the name of a piece of furniture and the corresponding value is a tuple with the coordinates of the upper left corner of the piece of furniture in the optimized layout.\\\",\\n\\\"depend\\\": \\\"Google's OR-Tools\\\"\\n}\"", "description": "tool development"}
{"input persona": "a critique at Publishers Weekly, who has deep knowledge about children's books.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a brief description of the type of book an user is looking for and returns a list of recommended children's books that match the input description.\\\",\\n\\\"function_name\\\": \\\"recommend_books\\\",\\n\\\"input_args\\\": [\\\"input_description\\\", \\\"book_summaries\\\", \\\"book_titles\\\"],\\n\\\"return\\\": \\\"A list of recommended children's books that match the input description.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library (for the 'distilbert-base-nli-mean-tokens' model), sklearn.metrics.pairwise (for the 'cosine_similarity' function), and a database of children's book summaries and titles.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a doctoral candidate who studies functional analysis.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Matrix Factorization Interface\\\",\\n\\\"description\\\": \\\"This interface provides LU decomposition of a square matrix. It is useful for various mathematical operations such as solving linear equations, calculating determinants and inverses.\\\",\\n\\\"function_name\\\": \\\"lu_decomposition\\\",\\n\\\"input_args\\\": \\\"matrix - 2D numpy array representing a square matrix\\\",\\n\\\"return\\\": \\\"a dictionary containing three 2D numpy arrays ('P', 'L', and 'U') which are the factors of the input matrix\\\",\\n\\\"depend\\\": \\\"NumPy, SciPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A judge in the federal court system that often presides over patent cases", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Patent Similarity Search Interface\\\",\\n  \\\"description\\\": \\\"An interface that allows users to find similar patents based on the cosine similarity of their embeddings. Useful for judges to quickly identify related cases or precedents.\\\",\\n  \\\"function_name\\\": \\\"find_similar_patents\\\",\\n  \\\"input_args\\\": \\\"patent_text\\\",\\n  \\\"return\\\": \\\"List of tuples where the first element is the document number in the corpus and the second element is the similarity score\\\",\\n  \\\"depend\\\": \\\"gensim Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An insurance company executive who defends high premium costs citing operating expenses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Expense Checker\\\",\\n\\\"description\\\": \\\"This interface fetches a company's operating expenses from a financial database using web scraping\\\",\\n\\\"function_name\\\": \\\"get_company_expenses\\\",\\n\\\"input_args\\\": \\\"company_name\\\",\\n\\\"return\\\": \\\"A dictionary with operating expense types as keys and the corresponding values in currency format\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property management company seeking data-driven insights to optimize rental pricing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Zillow Rental Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses Zillow's Zestimate Web API to predict the rental price of a property. The user inputs the property address, and the interface returns an estimated rental price for the property.\\\",\\n\\\"function_name\\\": \\\"get_rental_price_prediction\\\",\\n\\\"input_args\\\": [\\\"address\\\", \\\"city\\\", \\\"state\\\", \\\"zip_code\\\"],\\n\\\"return\\\": \\\"Estimated rental price\\\",\\n\\\"depend\\\": [\\\"Zillow's Zestimate Web API\\\", \\\"requests\\\", \\\"xmltodict\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A police captain who believes that the proposed changes will compromise the safety of officers and the community", "synthesized text": "\"{\\n\\\"name\\\": \\\"Police Incident Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the probability of a police incident based on the time of day, day of the week, and location using a machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_police_incident\\\",\\n\\\"input_args\\\": [\\\"day_of_week\\\", \\\"time_of_day\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"Predicted probability of a police incident\\\",\\n\\\"depend\\\": [\\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A small business owner looking to train employees in customer service and sales techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Customer Service and Sales Training Interface\\\",\\n\\\"description\\\": \\\"An interface using a GPT-3 model to simulate customer service and sales situations for training purposes.\\\",\\n\\\"function_name\\\": \\\"respond_to_scenario\\\",\\n\\\"input_args\\\": \\\"scenario - A string describing a customer service or sales scenario.\\\",\\n\\\"return\\\": \\\"A string containing the chatbot's response to the scenario.\\\",\\n\\\"depend\\\": \\\"Hugging Face transformers library (GPT-3 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A competitive fellow officer who wants to eventually move into detective work", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Criminal Record Search Interface\\\",\\n  \\\"description\\\": \\\"An interface to search for an individual's criminal record using their full name. The data is fetched from a public criminal records database.\\\",\\n  \\\"function_name\\\": \\\"get_criminal_record\\\",\\n  \\\"input_args\\\": {\\n    \\\"full_name\\\": \\\"A string that includes the full name of the individual whose criminal record is being searched for.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"records\\\": \\\"A list of objects where each object represents a single criminal record associated with the searched individual. Each object includes information about the crime such as the date, location, and description of the crime.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"requests\\\": \\\"A Python library for making HTTP requests.\\\",\\n    \\\"Public Criminal Records Database API\\\": \\\"An API that provides access to a database of public criminal records.\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A neighbor who often sees the driver leaving early in the morning and returning late at night", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sleep Quality Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes the user's sleep data to determine the quality of sleep they are getting. It uses the Sleep Data API from the user's wearable device.\\\",\\n\\\"function_name\\\": \\\"analyze_sleep_data\\\",\\n\\\"input_args\\\": \\\"sleep_data_file\\\",\\n\\\"return\\\": \\\"A dictionary with the total time spent in sleep, time spent in various sleep stages (REM, light, and deep), and periods of wakefulness.\\\",\\n\\\"depend\\\": \\\"Pandas library, Sleep Data API from wearable devices\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local street food vendor renowned for serving the best balut, a popular delicacy enjoyed during game nights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Popularity Trend Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Twitter API to track the popularity of a particular food item over time based on the number of tweets mentioning it per day.\\\",\\n\\\"function_name\\\": \\\"get_popularity_trend\\\",\\n\\\"input_args\\\": [\\\"food_item\\\"],\\n\\\"return\\\": \\\"A line plot showing the trend of the food item's popularity over time.\\\",\\n\\\"depend\\\": \\\"Python libraries: tweepy, pandas, collections. Web APIs: Twitter API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aspiring spy novelist looking for inspiration for a character similar to Tennent H. Bagley.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Inspiration Interface\\\",\\n\\\"description\\\": \\\"This interface provides a summary of a given character's characteristics, achievements, and background, serving as an inspiration for creating new characters.\\\",\\n\\\"function_name\\\": \\\"get_character_inspiration\\\",\\n\\\"input_args\\\": [\\\"character_name\\\"],\\n\\\"return\\\": \\\"A string representing the summary of the character's characteristics, achievements, and background.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an atheist and skeptical of religious titles and achievements, but with a profound respect for individual dedication and the cultural significance of monastic contributions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Religious Figure Biography Summarizer\\\",\\n\\\"description\\\": \\\"This interface uses Wikipedia's API to fetch information about a religious figure, and then uses an NLP model to summarize the information in a neutral and objective way.\\\",\\n\\\"function_name\\\": \\\"summarize_biography\\\",\\n\\\"input_args\\\": [\\\"title\\\"],\\n\\\"return\\\": \\\"A short, neutral summary of the religious figure's life and achievements.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"huggingface's transformers library\\\", \\\"Wikipedia API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An adamant puppet hater.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Puppet Removal from Image Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained TensorFlow model to detect and remove puppets from images.\\\",\\n\\\"function_name\\\": \\\"remove_puppets\\\",\\n\\\"input_args\\\": \\\"path_to_img - a string representing the path to the image file\\\",\\n\\\"return\\\": \\\"A numpy array representing the image with all detected puppets removed\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and the Faster R-CNN Inception ResNet V2 model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a strict German teacher who pays attention to details.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Spelling and Grammar Check Interface\\\",\\n  \\\"description\\\": \\\"An interface to check and correct the spelling and grammar of a given German text. It uses the LanguageTool API to find errors and suggests corrections.\\\",\\n  \\\"function_name\\\": \\\"correct_german_text\\\",\\n  \\\"input_args\\\": {\\\"text\\\": \\\"A string representing the text to be corrected.\\\"},\\n  \\\"return\\\": {\\n    \\\"corrected_text\\\": \\\"The corrected text after applying the suggested corrections.\\\",\\n    \\\"errors\\\": \\\"A list of errors found in the text.\\\"\\n  },\\n  \\\"depend\\\": \\\"LanguageTool API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A public relations specialist skilled in crafting messaging for historic preservation campaigns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historic Preservation News Generation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the GPT-3 model from OpenAI to generate news articles or press releases about historic preservation campaigns. Users input the name of the historic site, its history, and the goal of the preservation campaign.\\\",\\n\\\"function_name\\\": \\\"generate_preservation_news\\\",\\n\\\"input_args\\\": [\\\"historic_site\\\", \\\"history\\\", \\\"campaign_goal\\\"],\\n\\\"return\\\": \\\"A news article or press release text\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sibling who also lived in East Timor and experienced the same historical events", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Analyzer\\\",\\n\\\"description\\\": \\\"An interface that uses Named Entity Recognition to identify historical events in a text document.\\\",\\n\\\"function_name\\\": \\\"analyze_historical_events\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"List of identified historical events in the document.\\\",\\n\\\"depend\\\": \\\"huggingface transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "An iOS Developer troubleshooting a file stream error", "synthesized text": "\"{\\n\\\"name\\\": \\\"File Stream Error Diagnosis Interface\\\",\\n\\\"description\\\": \\\"This interface uses Pygments to perform syntax highlighting and analysis of the problematic code. The user just needs to input the path of the file, and it will return the highlighted code along with potential syntax errors identified.\\\",\\n\\\"function_name\\\": \\\"diagnose_file_stream_error\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"Path to the problematic Swift file\\\"\\n},\\n\\\"return\\\": {\\n    \\\"highlighted_code\\\": \\\"Syntax highlighted version of the input code\\\",\\n    \\\"pylint_stdout\\\": \\\"Standard output from running pylint on the input code\\\",\\n    \\\"pylint_stderr\\\": \\\"Standard error output from running pylint on the input code\\\"\\n},\\n\\\"depend\\\": \\\"This function leverages the Pygments and pylint Python libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced stealth microphone modder.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Quality Evaluation Interface\\\",\\n\\\"description\\\": \\\"Interface to evaluate the sound quality of modified microphones using the PESQ (Perceptual Evaluation of Speech Quality) algorithm.\\\",\\n\\\"function_name\\\": \\\"evaluate_sound_quality\\\",\\n\\\"input_args\\\": [\\\"original_path\\\", \\\"modified_path\\\", \\\"rate\\\"],\\n\\\"return\\\": \\\"PESQ score between -0.5 to 4.5. Higher score indicates better quality.\\\",\\n\\\"depend\\\": [\\\"librosa\\\", \\\"pypesq\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A political lobbyist who advocates for the continued use of landmines for national defense purposes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Landmine Detection API Interface\\\",\\n\\\"description\\\": \\\"This interface uses the API from Mine Kafon Lab to get the probability of landmine presence in a specific location based on historical data.\\\",\\n\\\"function_name\\\": \\\"get_landmine_probability\\\",\\n\\\"input_args\\\": \\\"location - a string representing the geographical location\\\",\\n\\\"return\\\": \\\"A float representing the probability of landmine presence in the given location.\\\",\\n\\\"depend\\\": \\\"requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A culinary expert specializing in traditional Polish cuisine, running a popular cooking channel on YouTube", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface takes a recipe, original number of servings and desired number of servings as inputs and returns the recipe with adjusted ingredient quantities.\\\",\\n\\\"function_name\\\": \\\"convert_recipe\\\",\\n\\\"input_args\\\": [\\\"recipe\\\", \\\"original_servings\\\", \\\"desired_servings\\\"],\\n\\\"return\\\": \\\"Converted recipe as a string.\\\",\\n\\\"depend\\\": [\\\"Python standard library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A first-time homebuyer looking for the perfect property to start a family", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Property Search Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of home searching by providing users with a list of properties that match their specific requirements. Users only need to input their desired location, budget, and specific requirements (like number of bedrooms, bathrooms etc.), and our interface will return the available properties that match their criteria.\\\",\\n\\\"function_name\\\": \\\"search_home_properties\\\",\\n\\\"input_args\\\": {\\n\\\"location\\\": \\\"The desired location for the property\\\",\\n\\\"budget\\\": \\\"The maximum budget for the property\\\",\\n\\\"bedrooms\\\": \\\"Minimum number of bedrooms required\\\",\\n\\\"bathrooms\\\": \\\"Minimum number of bathrooms required\\\"\\n},\\n\\\"return\\\": \\\"A list of properties that match the user's criteria, each represented as a dictionary with keys 'address', 'price', 'bedrooms', 'bathrooms'\\\",\\n\\\"depend\\\": \\\"Real estate platform API (e.g., Realtor)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professor who emphasizes the importance of accurate grading and timely submission of grades", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Grade Submission Interface\\\",\\n\\\"description\\\": \\\"An interface for automating the submission of grades from a CSV file to a Learning Management System (LMS) like Canvas\\\",\\n\\\"function_name\\\": \\\"submit_grades\\\",\\n\\\"input_args\\\": \\\"file_path, assignment_id\\\",\\n\\\"return\\\": \\\"A message indicating that grades have been submitted successfully\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, requests; Web APIs: Canvas LMS API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A patient who frequently uses hospital services in Scotland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hospital Waiting Times Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the average waiting times for a specific hospital in Scotland using the NHS Scotland Open Data API.\\\",\\n\\\"function_name\\\": \\\"get_average_waiting_times\\\",\\n\\\"input_args\\\": \\\"hospital_name\\\",\\n\\\"return\\\": \\\"average_waiting_time\\\",\\n\\\"depend\\\": \\\"requests, pandas, NHS Scotland Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A big-box home improvement store manager aiming to monopolize the local market", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitor Price Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface compares our product's price to a competitor's price.\\\",\\n\\\"function_name\\\": \\\"compare_prices\\\",\\n\\\"input_args\\\": [\\\"our_price\\\", \\\"competitor_url\\\"],\\n\\\"return\\\": \\\"String indicating if our price is lower, the same or higher than the competitor's.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, beautifulsoup4\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated and encouraging trainer who recognizes the parent's commitment and provides regular progress updates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Progress Report Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model from Huggingface to predict the student's progress based on their test scores and other metrics.\\\",\\n\\\"function_name\\\": \\\"get_student_progress\\\",\\n\\\"input_args\\\": [\\\"student_name\\\", \\\"test_scores\\\"],\\n\\\"return\\\": \\\"A string that represents the student's progress ('[student_name] is making good progress.' or '[student_name] needs to improve.')\\\",\\n\\\"depend\\\": [\\\"Huggingface transformers library\\\", \\\"torch\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A frustrated user who has experienced slow application performance and is seeking a solution", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Application Performance Monitoring Interface\\\",\\n  \\\"description\\\": \\\"This interface profiles the performance of a given Python function, providing statistics about the number of function calls and the time each function took to execute.\\\",\\n  \\\"function_name\\\": \\\"performance_profile\\\",\\n  \\\"input_args\\\": {\\n    \\\"func\\\": \\\"The function to be profiled\\\",\\n    \\\"args\\\": \\\"The arguments to be passed to the function\\\",\\n    \\\"kwargs\\\": \\\"The keyword arguments to be passed to the function\\\"\\n  },\\n  \\\"return\\\": \\\"Returns the result of the function that was profiled, and prints the performance statistics to stdout\\\",\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"cProfile\\\", \\\"pstats\\\", \\\"io\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An artist who expresses human emotions through abstract paintings and believes that numbers cannot capture the complexity of human behavior", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emotion Recognition from Art Interface\\\",\\n\\\"description\\\": \\\"An interface to recognize the emotions depicted in abstract paintings. The user inputs the path to an image file of the abstract painting, and the interface returns a list of possible emotions that the painting might be expressing.\\\",\\n\\\"function_name\\\": \\\"recognize_emotion_in_art\\\",\\n\\\"input_args\\\": \\\"img_path - path to the image file of the abstract painting\\\",\\n\\\"return\\\": \\\"A string representing the predicted emotion\\\",\\n\\\"depend\\\": \\\"TensorFlow library, a pre-trained deep learning model for emotion recognition\\\"\\n}\"", "description": "tool development"}
{"input persona": "A musician with a rare type of amnesia, providing valuable insights into the connection between music and memory", "synthesized text": "\"{\\n\\\"name\\\": \\\"Melody Generation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained MusicVAE model to generate melodies. You need to input a few seed notes (as a MIDI file), and the interface will return a generated melody (as a MIDI file).\\\",\\n\\\"function_name\\\": \\\"generate_melody\\\",\\n\\\"input_args\\\": {\\n    \\\"seed_notes\\\": \\\"A MIDI file with a few seed notes.\\\",\\n    \\\"temperature\\\": \\\"A float that controls the randomness of the generations. Higher values will make the output more random, lower values will make it more deterministic. Optional, default is 0.5.\\\"\\n},\\n\\\"return\\\": \\\"A MIDI file with the generated melody.\\\",\\n\\\"depend\\\": \\\"This function depends on the Magenta library and a pre-trained MusicVAE model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturer of industrial conveyor belts and handling equipment, committed to meeting strict quality standards", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quality Control Inspection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to inspect the quality of industrial conveyor belts and handling equipment based on images of the products.\\\",\\n\\\"function_name\\\": \\\"quality_inspection\\\",\\n\\\"input_args\\\": \\\"img_path - The path to the image file of the product.\\\",\\n\\\"return\\\": \\\"A string that says whether the product is of 'Acceptable' quality or 'Not Acceptable'.\\\",\\n\\\"depend\\\": \\\"TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A director who recognizes the importance of proper nutrition and supports the dietitian's role in the production", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meal Plan Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a meal plan based on a given calorie limit and dietary restrictions using a GPT-2 model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"generate_meal_plan\\\",\\n\\\"input_args\\\": [\\\"calorie_limit\\\", \\\"dietary_restrictions\\\"],\\n\\\"return\\\": \\\"A meal plan that meets the given criteria\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"Hugging Face Transformers\\\"],\\n            \\\"machine learning models\\\": [\\\"GPT-2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An interior designer from Morocco, inspired by the vibrant colors and intricate patterns of Moroccan architecture and design", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Palette Generation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to upload an image of a design they like, and it will return a color palette derived from that image. It uses a TensorFlow Hub model for image segmentation and sklearn's KMeans for color clustering.\\\",\\n\\\"function_name\\\": \\\"get_palette\\\",\\n\\\"input_args\\\": [\\\"path_to_img - The path to the image file\\\", \\\"n_colors - The number of colors to include in the palette\\\"],\\n\\\"return\\\": \\\"A list of RGB color values representing the most dominant colors in the image.\\\",\\n\\\"depend\\\": {\\\"tensorflow\\\": \\\"2.6.0\\\", \\\"tensorflow_hub\\\": \\\"0.12.0\\\", \\\"sklearn\\\": \\\"0.24.2\\\", \\\"PIL\\\": \\\"8.3.1\\\", \\\"numpy\\\": \\\"1.19.5\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A computer programmer who enjoys bowling as a stress-relief activity and is always looking for new tips and tricks", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Bowling Score Calculator Interface\\\",\\n    \\\"description\\\": \\\"This interface receives the sequence of throws in a game of bowling and calculates the total score according to the rules of scoring in bowling.\\\",\\n    \\\"function_name\\\": \\\"calculate_bowling_score\\\",\\n    \\\"input_args\\\": {\\n        \\\"throws\\\": \\\"String representation of a complete game of bowling. Throws are represented by 'X' for strikes, '/' for spares, '-' for misses, and digits '1'-'9' for the number of pins knocked down, and frames are separated by '|'.\\\"\\n    },\\n    \\\"return\\\": \\\"The total score of the game of bowling.\\\",\\n    \\\"depend\\\": [\\\"Python Standard Library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow actor who has witnessed the transformation from a nervous auditionee to a confident and acclaimed horror film star", "synthesized text": "\"{\\n\\\"name\\\": \\\"Deep Fake Video Generation Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that leverages a pre-trained model from Hugging Face or TensorFlow to generate deep fake videos. Users only need to input the paths to the source video (the audition tape) and the target video (the star performance), and the interface will return a deep fake video where the actor\\u2019s audition tape is transformed to mimic the star performance.\\\",\\n\\\"function_name\\\": \\\"generate_deepfake_video\\\",\\n\\\"input_args\\\": [\\\"source_video_path\\\", \\\"target_video_path\\\"],\\n\\\"return\\\": \\\"Deep fake video as a video object\\\",\\n\\\"depend\\\": \\\"DeepFace library for deep fake video transformation\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an enthusiastic archaeology student specializing in Mesoamerican cultures, particularly drawn to the mysteries of the Maya civilization.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mayan Numerals Converter Interface\\\",\\n\\\"description\\\": \\\"This interface converts numbers from our base 10 numeral system to the Mayan numeral system.\\\",\\n\\\"function_name\\\": \\\"convert_to_mayan_numerals\\\",\\n\\\"input_args\\\": [\\\"number\\\"],\\n\\\"return\\\": \\\"A string representing the number in the Mayan numeral system.\\\",\\n\\\"depend\\\": [\\\"Python built-in functions\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An assertive student journalist who often challenges the debate team captain's views through their write-ups", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fact Checking Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Fact Check Tools API to verify the factual accuracy of claims or statements.\\\",\\n\\\"function_name\\\": \\\"fact_check\\\",\\n\\\"input_args\\\": \\\"claim - A string containing the claim or statement to fact check.\\\",\\n\\\"return\\\": \\\"A list containing the fact check results or an error message.\\\",\\n\\\"depend\\\": \\\"Google Fact Check Tools API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Economic analyst with a focus on the Middle East region.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Oil Prices Data Retrieval Interface\\\",\\n  \\\"description\\\": \\\"Retrieves the latest oil prices using the Oilprice API. The user needs to specify the type of oil (e.g. Brent Crude Oil, WTI Crude Oil). The function will return the latest price, change percentage, and time of last update.\\\",\\n  \\\"function_name\\\": \\\"get_oil_price\\\",\\n  \\\"input_args\\\": {\\n    \\\"oil_type\\\": \\\"string\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"price\\\": \\\"float\\\",\\n    \\\"change_percentage\\\": \\\"float\\\",\\n    \\\"last_update\\\": \\\"string\\\"\\n  },\\n  \\\"depend\\\": [\\\"Oilprice API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retiree who has always dreamed of experiencing the opulence of a luxury vacation in Qatar", "synthesized text": "\"{\\n\\\"name\\\": \\\"Luxury Hotel Finder Interface\\\",\\n\\\"description\\\": \\\"An interface to help users find top-rated luxury hotels within their budget in the specified destination. It uses APIs from hotel booking platforms.\\\",\\n\\\"function_name\\\": \\\"get_luxury_hotels\\\",\\n\\\"input_args\\\": {\\n    \\\"destination\\\": \\\"The destination where the user wants to find a hotel\\\",\\n    \\\"budget\\\": \\\"The maximum budget per night for the hotel\\\"\\n},\\n\\\"return\\\": \\\"A list of top-rated luxury hotel names within the user's budget in the specified destination\\\",\\n\\\"depend\\\": \\\"Web API (e.g., Booking.com's API)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow sports fan who always has a hot take on the latest game", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Sports Game Statistics Interface\\\",\\n    \\\"description\\\": \\\"This interface fetches the latest game statistics from the Sports Open Data API. The user inputs the sport type and the names of the two teams, and the interface returns the latest game statistics including the final score, total yards, and turnovers.\\\",\\n    \\\"function_name\\\": \\\"fetch_game_stats\\\",\\n    \\\"input_args\\\": {\\n        \\\"sport\\\": \\\"String - The type of the sport (e.g., 'football', 'basketball').\\\",\\n        \\\"team1\\\": \\\"String - The name of the first team.\\\",\\n        \\\"team2\\\": \\\"String - The name of the second team.\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"team1\\\": \\\"String - The name of the first team.\\\",\\n        \\\"team2\\\": \\\"String - The name of the second team.\\\",\\n        \\\"score\\\": \\\"String - The final score of the game.\\\",\\n        \\\"total_yards\\\": \\\"Integer - The total yards gained by both teams during the game.\\\",\\n        \\\"turnovers\\\": \\\"Integer - The total number of turnovers by both teams during the game.\\\"\\n    },\\n    \\\"depend\\\": {\\n        \\\"python_libraries\\\": [\\\"requests\\\", \\\"json\\\"],\\n        \\\"web_APIs\\\": [\\\"Sports Open Data API\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A single mother who wants the best care for her beloved dog but has limited financial resources", "synthesized text": "\"{\\n\\\"name\\\": \\\"Veterinary Clinic Search and Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface finds nearby veterinary clinics and provides an estimated cost for a specified type of pet care.\\\",\\n\\\"function_name\\\": \\\"find_vet_and_estimate_cost\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"The user's current location\\\", \\\"care_type\\\": \\\"The type of care the user's pet needs\\\"},\\n\\\"return\\\": {\\\"clinics\\\": \\\"A list of nearby veterinary clinics\\\", \\\"estimated_cost\\\": \\\"An estimated cost for the specified pet care\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\"], \\\"Web APIs\\\": [\\\"Google Places API\\\"], \\\"machine learning models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "I am a horror game aficionado who appreciates the nostalgic value of childhood cartoons repurposed into different genres.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cartoon Image to Horror Image Conversion Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that uses a pre-trained GAN model from TensorFlow Hub to convert cartoon images into horror-like images.\\\",\\n\\\"function_name\\\": \\\"cartoon_to_horror\\\",\\n\\\"input_args\\\": {\\\"image_path\\\": \\\"The path to the cartoon image that needs to be converted into a horror-like image\\\",\\\"output_path\\\": \\\"The path where the converted image will be saved\\\"},\\n\\\"return\\\": \\\"The path to the newly created horror-like image.\\\",\\n\\\"depend\\\": \\\"This function uses the TensorFlow and TensorFlow Hub Python libraries, as well as a pre-trained GAN model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lawyer serving in custody battles who prioritizes blood relations over adoptive families", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Family Tree Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a Gramps XML file and a person's ID as inputs and returns a list of the person's blood relatives.\\\",\\n  \\\"function_name\\\": \\\"get_blood_relatives\\\",\\n  \\\"input_args\\\": [\\\"gramps_file\\\", \\\"person_id\\\"],\\n  \\\"return\\\": \\\"List of names of blood relatives\\\",\\n  \\\"depend\\\": \\\"Python's built-in xml.etree.ElementTree library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a hardcore Club Universidad Nacional fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Match Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface uses API-football to provide the upcoming match schedule of a specified team.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_matches\\\",\\n\\\"input_args\\\": \\\"team\\\",\\n\\\"return\\\": \\\"A list of tuples. Each tuple contains the date and the teams playing for each upcoming match.\\\",\\n\\\"depend\\\": \\\"requests library, API-football\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Linux enthusiast who prefer practical solutions to explicit control over terminal settings.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Terminal Command Execution Interface\\\", \\n\\\"description\\\": \\\"This interface allows the user to execute terminal commands directly from the python script.\\\", \\n\\\"function_name\\\": \\\"run_terminal_command\\\", \\n\\\"input_args\\\": {\\\"command\\\": \\\"string\\\"}, \\n\\\"return\\\": {\\\"output\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python\\\": [\\\"subprocess\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A religious leader who utilizes historical religious texts for sermon preparation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Texts Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a historical text and returns a dictionary containing the frequency of each word in the text. The user inputs the path to a text file and the interface reads the file, tokenizes the words, and calculates the frequency distribution.\\\",\\n\\\"function_name\\\": \\\"text_analysis\\\",\\n\\\"input_args\\\": \\\"path_to_file\\\",\\n\\\"return\\\": \\\"A dictionary containing each unique word from the text and its frequency\\\",\\n\\\"depend\\\": \\\"NLTK library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced soldier in a military video game", "synthesized text": "\"{\\n\\\"name\\\": \\\"Enemy Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to identify and locate enemy soldiers in a screenshot from a video game.\\\",\\n\\\"function_name\\\": \\\"detect_enemies\\\",\\n\\\"input_args\\\": \\\"path_to_img - Path to the game screenshot\\\",\\n\\\"return\\\": \\\"A numpy array of bounding boxes for each detected enemy in the image. Each bounding box is represented by four coordinates [y_min, x_min, y_max, x_max].\\\",\\n\\\"depend\\\": \\\"This function leverages the TensorFlow, TensorFlow Hub libraries and a pre-trained model from TensorFlow Hub for object detection (ssd_mobilenet_v1)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A first-time mother struggling to understand the process of obtaining prenatal care and insurance coverage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health Insurance Interface\\\",\\n\\\"description\\\": \\\"This interface uses the HealthCare.gov API to provide information about insurance plans, eligibility, and enrollment procedures in a specific state.\\\",\\n\\\"function_name\\\": \\\"get_insurance_info\\\",\\n\\\"input_args\\\": [\\\"state\\\"],\\n\\\"return\\\": \\\"A dictionary containing a list of insurance plans available in the provided state and the steps to enroll.\\\",\\n\\\"depend\\\": \\\"HealthCare.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A survivalist living off-the-grid, preparing for potential societal collapse", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Radiation Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the PVWatts API to estimate the annual energy output of a photovoltaic system based on its location and specifications.\\\",\\n\\\"function_name\\\": \\\"get_solar_radiation\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"system_capacity\\\", \\\"array_type\\\", \\\"tilt\\\", \\\"azimuth\\\", \\\"system_losses\\\"],\\n\\\"return\\\": \\\"The estimated annual energy output of the specified photovoltaic system in kilowatt-hours (kWh).\\\",\\n\\\"depend\\\": \\\"requests library, PVWatts API from NREL\\\"\\n}\"", "description": "tool development"}
{"input persona": "A music educator sharing free online resources and tutorials for children interested in learning music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Tutorial Search Interface\\\",\\n\\\"description\\\": \\\"Search for music lessons for kids on a specified instrument using YouTube's Data API.\\\",\\n\\\"function_name\\\": \\\"get_music_tutorials\\\",\\n\\\"input_args\\\": [\\\"instrument\\\"],\\n\\\"return\\\": [\\\"list of video URLs\\\"],\\n\\\"depend\\\": [\\\"requests library\\\", \\\"YouTube's Data API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A confused individual who doesn't play video games and doesn't like messy information", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Game Review Summary Interface\\\",\\n\\\"description\\\": \\\"This interface uses web scraping and the TextRank algorithm to provide a summarized review of a specified video game.\\\",\\n\\\"function_name\\\": \\\"get_game_review_summary\\\",\\n\\\"input_args\\\": \\\"game_title - The title of the video game to get a review summary for.\\\",\\n\\\"return\\\": \\\"A string containing a summarized review of the specified video game.\\\",\\n\\\"depend\\\": \\\"Python's BeautifulSoup and requests libraries for web scraping, and Gensim's TextRank algorithm for text summarization.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local resident of Divriği District who is passionate about the history and culture of the area.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Landmark Information Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve detailed information about a specified historical landmark. It uses the Wikidata Query Service API to fetch the data.\\\",\\n\\\"function_name\\\": \\\"get_landmark_info\\\",\\n\\\"input_args\\\": \\\"landmark_name - The name of the landmark for which to retrieve information.\\\",\\n\\\"return\\\": \\\"A dictionary containing the name and description of the landmark, or a message indicating that no information was found.\\\",\\n\\\"depend\\\": \\\"requests library, Wikidata Query Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a struggling musician in Texas.", "synthesized text": "\"{\\n\\\"name\\\":\\\"Music Genre Classifier Interface\\\",\\n\\\"description\\\":\\\"Predicts the genre of a given music file\\\",\\n\\\"function_name\\\":\\\"predict_music_genre\\\",\\n\\\"input_args\\\":{\\n    \\\"music_file_path\\\":\\\"The path to the music file\\\"\\n},\\n\\\"return\\\":\\\"The predicted genre of the music\\\",\\n\\\"depend\\\":\\\"tensorflow, tensorflow_io, pre-trained music genre classification model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fuel technician responsible for efficiently and safely refueling the race car during pit stops", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fuel Efficiency Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the fuel efficiency of a race car based on telemetry data and the amount of fuel used.\\\",\\n\\\"function_name\\\": \\\"calculate_fuel_efficiency\\\",\\n\\\"input_args\\\": [\\\"telemetry_data_file\\\", \\\"fuel_used\\\"],\\n\\\"return\\\": \\\"fuel_efficiency\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A traditional costume designer who views the use of technology in cosplay as a threat to craftsmanship", "synthesized text": "\"{\\n\\\"name\\\": \\\"Costume Material Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends suitable materials for costume design based on the designer's past choices and the choices of other designers with similar tastes.\\\",\\n\\\"function_name\\\": \\\"get_materials_recommendation\\\",\\n\\\"input_args\\\": {\\\"past_materials\\\": \\\"list of materials that the user has used in the past\\\", \\\"materials_data\\\": \\\"a pandas DataFrame that includes the materials information\\\"},\\n\\\"return\\\": \\\"a list of recommended materials to try\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"sklearn\\\", \\\"pandas\\\"], \\\"machine learning model\\\": [\\\"Tf-idf\\\", \\\"cosine similarity\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A crime drama show creator who values authenticity and realism in their storytelling", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-Time Crime Data Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Crimeometer API to gather real-time crime data from a specified area. It is useful for crime drama show creators who want to ensure their storylines are realistic and accurately reflect the types of crime occurring in their chosen location.\\\",\\n\\\"function_name\\\": \\\"get_real_time_crime_data\\\",\\n\\\"input_args\\\": \\\"location: tuple of two floats, representing latitude and longitude coordinates\\\",\\n\\\"return\\\": \\\"List of strings, each representing a type of crime incident that has recently occurred in the specified location\\\",\\n\\\"depend\\\": \\\"Python Library - requests, Web API - Crimeometer\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who specializes in installation packages and have extensive experience in Windows Installer technology and InstallShield.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Package Extractor Interface\\\",\\n\\\"description\\\": \\\"This interface extracts files from a Windows Installer .msi package. It takes as input the filepath to the .msi file and the output directory where the extracted files should be stored. The function will create the output directory if it does not already exist.\\\",\\n\\\"function_name\\\": \\\"extract_msi_package\\\",\\n\\\"input_args\\\": {\\n    \\\"msi_file_path\\\": \\\"The path to the .msi file to be extracted.\\\",\\n    \\\"output_dir\\\": \\\"The directory where the extracted files should be stored.\\\"\\n},\\n\\\"return\\\": \\\"None, but files are extracted to the designated output directory.\\\",\\n\\\"depend\\\": [\\\"zipfile\\\", \\\"os\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an architecture student from KTH Royal Institute of Technology who participated in the construction project of the Björkborn Bridge.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bridge Load Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the maximum load a bridge can bear based on its design parameters and the material used.\\\",\\n\\\"function_name\\\": \\\"calculate_bridge_load\\\",\\n\\\"input_args\\\": {\\n    \\\"length\\\": \\\"The length of the bridge (in meters)\\\",\\n    \\\"width\\\": \\\"The width of the bridge (in meters)\\\",\\n    \\\"height\\\": \\\"The height of the bridge (in meters)\\\",\\n    \\\"density\\\": \\\"The density of the material used (in kg/m^3)\\\",\\n    \\\"elasticity\\\": \\\"The elasticity of the material used (in Pa)\\\",\\n    \\\"load\\\": \\\"The load applied to the bridge (in N)\\\"\\n},\\n\\\"return\\\": \\\"The maximum load the bridge can bear without breaking or deforming (in N)\\\",\\n\\\"depend\\\": \\\"numpy, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single mother struggling to provide education for her children in a war-torn country", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Educational Content Finder\\\",\\n  \\\"description\\\": \\\"A high-level interface to find educational content based on grade and subject using Khan Academy API.\\\",\\n  \\\"function_name\\\": \\\"get_educational_content\\\",\\n  \\\"input_args\\\": {\\n    \\\"grade\\\": \\\"The grade of the student (e.g., 'grade1', 'grade2', etc.)\\\",\\n    \\\"subject\\\": \\\"The subject that the student wants to learn (e.g., 'math', 'science', etc.)\\\"\\n  },\\n  \\\"return\\\": \\\"List of educational content titles available for the given grade and subject.\\\",\\n  \\\"depend\\\": \\\"Python's requests library and Khan Academy API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A corporate trainer responsible for educating employees on company policies, including termination procedures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Employee Termination Procedure Training Interface\\\",\\n\\\"description\\\": \\\"An interface that generates a termination letter for an employee following company policies. The user only needs to input the name of the employee and the reason for termination.\\\",\\n\\\"function_name\\\": \\\"generate_termination_letter\\\",\\n\\\"input_args\\\": {\\n    \\\"employee_name\\\": \\\"The full name of the employee to be terminated\\\",\\n    \\\"termination_reason\\\": \\\"The reason for the employee's termination\\\"\\n},\\n\\\"return\\\": \\\"A string indicating the path to the saved termination letter\\\",\\n\\\"depend\\\": \\\"Python's docx library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cousin of Sam Kendricks who is also a professional pole vaulter", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pole Vault Performance Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface takes in various factors like athlete's body metrics, pole metrics, weather conditions, etc. and predicts the pole vault performance using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_pole_vault_performance\\\",\\n\\\"input_args\\\": [\\\"body_height\\\", \\\"body_weight\\\", \\\"pole_length\\\", \\\"pole_weight\\\", \\\"wind_speed\\\", \\\"temperature\\\"],\\n\\\"return\\\": \\\"Predicted pole vault performance.\\\",\\n\\\"depend\\\": \\\"tensorflow, numpy, a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A finance expert specializing in renewable energy projects, seeking funding for a wind power initiative in Central Asia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wind Power Potential Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get the wind power potential including Average Wind Speed at 100m, Power Density at 100m, and Capacity Factor at 100m for a given geographical location using the Global Wind Atlas API.\\\",\\n\\\"function_name\\\": \\\"get_wind_power_potential\\\",\\n\\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'Average Wind Speed', 'Power Density', and 'Capacity Factor' and their corresponding values.\\\",\\n\\\"depend\\\": \\\"Python requests library, Global Wind Atlas API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Svelte.js enthusiast who loves sharing knowledge", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Snippet Generation Interface\\\",\\n\\\"description\\\": \\\"An interface for creating Gists on GitHub. The user provides a code snippet, a description, and a filename, and the function creates a Gist and returns the URL.\\\",\\n\\\"function_name\\\": \\\"create_gist\\\",\\n\\\"input_args\\\": [\\\"snippet\\\", \\\"description\\\", \\\"filename\\\"],\\n\\\"return\\\": \\\"URL to the created Gist on GitHub\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"GitHub Gist API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who develops applications specifically tailored for convention management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Attendee Registration Interface\\\",\\n\\\"description\\\": \\\"An interface for registering attendees for a convention. It captures attendee's name, email, and ticket type and stores these details in a database.\\\",\\n\\\"function_name\\\": \\\"register_attendee\\\",\\n\\\"input_args\\\": {\\\"name\\\": \\\"string\\\", \\\"email\\\": \\\"string\\\", \\\"ticket_type\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"status\\\": \\\"string\\\", \\\"message\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"sqlite3\\\", \\\"flask\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An educational YouTube channel host who breaks down quartic equations into simple, step-by-step explanations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quartic Equation Solver Interface\\\",\\n\\\"description\\\": \\\"An interface to solve quartic equations given the coefficients. The solutions are returned as a list of strings for easy comprehension and further use.\\\",\\n\\\"function_name\\\": \\\"solve_quartic_equation\\\",\\n\\\"input_args\\\": {\\n\\\"a\\\": \\\"The coefficient of x^4\\\",\\n\\\"b\\\": \\\"The coefficient of x^3\\\",\\n\\\"c\\\": \\\"The coefficient of x^2\\\",\\n\\\"d\\\": \\\"The coefficient of x\\\",\\n\\\"e\\\": \\\"The constant term\\\"\\n},\\n\\\"return\\\": \\\"A list of solutions to the quartic equation\\\",\\n\\\"depend\\\": \\\"SymPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an art historian with an expertise in Islamic art of the 15th century, particularly focusing on the cultural and religious significance of artistic representations.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Classification Interface\\\",\\n\\\"description\\\": \\\"This interface classifies an image into one of the categories recognized by the Inception V3 model trained on the ImageNet dataset.\\\",\\n\\\"function_name\\\": \\\"classify_art\\\",\\n\\\"input_args\\\": {\\\"path_to_img\\\": \\\"the path to the image file to be classified\\\"},\\n\\\"return\\\": \\\"The label or category that the model predicts for the image.\\\",\\n\\\"depend\\\": {\\\"tensorflow\\\": \\\"2.4.0\\\", \\\"tensorflow_hub\\\": \\\"0.12.0\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A computer science undergraduate specializing in artificial intelligence for threat detection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Threat Detection Interface\\\",\\n\\\"description\\\": \\\"An interface that uses machine learning to detect network threats. Users input a file containing network logs, and the interface returns a list of identified threats.\\\",\\n\\\"function_name\\\": \\\"detect_threats\\\",\\n\\\"input_args\\\": \\\"file\\\",\\n\\\"return\\\": \\\"threats\\\",\\n\\\"depend\\\": \\\"Scikit-Learn, Pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A recreational weekend soccer player without particular attachment or expertise in other sports, let alone their relevance in the larger historical picture.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Sport Event Details Interface\\\",\\n    \\\"description\\\": \\\"Provide detailed information about a specific sports event using TheSportsDB API.\\\",\\n    \\\"function_name\\\": \\\"get_sport_event_details\\\",\\n    \\\"input_args\\\": \\\"event_name\\\",\\n    \\\"return\\\": {\\n        \\\"event\\\": \\\"event name\\\",\\n        \\\"date\\\": \\\"event date\\\",\\n        \\\"league\\\": \\\"league name\\\",\\n        \\\"season\\\": \\\"season of the event\\\",\\n        \\\"venue\\\": \\\"venue of the event\\\",\\n        \\\"city\\\": \\\"city where the event was held\\\",\\n        \\\"country\\\": \\\"country where the event was held\\\",\\n        \\\"home_team\\\": \\\"home team\\\",\\n        \\\"away_team\\\": \\\"away team\\\",\\n        \\\"home_score\\\": \\\"score of home team\\\",\\n        \\\"away_score\\\": \\\"score of away team\\\"\\n    },\\n    \\\"depend\\\": \\\"TheSportsDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a middle-aged woman living in Bristol, Connecticut, who had friendly interactions with the two fallen officers.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Police Incident Report Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve police incident reports. Users input the date and location of the incident, and the interface returns the details of the police incident report.\\\",\\n\\\"function_name\\\": \\\"get_police_incident_report\\\",\\n\\\"input_args\\\": {\\n    \\\"date\\\": \\\"The date of the incident. Format: 'YYYY-MM-DD'\\\",\\n    \\\"location\\\": \\\"The location of the incident. Format: 'City, State'\\\"\\n},\\n\\\"return\\\": \\\"The details of the police incident report, including the incident type, location, date, time, and other details as provided by the data source.\\\",\\n\\\"depend\\\": \\\"Web API: Public Safety or Police Department Data Source\\\"\\n}\"", "description": "tool development"}
{"input persona": "An individual who grew up in a small southern town, carrying a certain resentment toward perceived Northern (Yankee) cultural imperialism", "synthesized text": "\"{\\n\\\"name\\\": \\\"Southern Accent Text Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface translates a given text into a southern accent.\\\",\\n\\\"function_name\\\": \\\"translate_text_to_southern_accent\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"translated text with a southern accent\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young woman with Down syndrome who has defied expectations and excelled in an inclusive educational setting", "synthesized text": "\"{\\n\\\"name\\\": \\\"Learning Progress Tracker\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to track the learning progress of a student. It takes in a CSV file that contains the student's scores over time and outputs a plot that shows the historical and predicted scores.\\\",\\n\\\"function_name\\\": \\\"learning_progress_tracker\\\",\\n\\\"input_args\\\": \\\"data_path\\\",\\n\\\"return\\\": \\\"future_scores\\\",\\n\\\"depend\\\": \\\"pandas, sklearn, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A CEO of a major investment bank who sees increased oversight as unnecessary government intervention", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface leveraging GPT-3 from Huggingface's Transformers to predict stock market trends based on historical data and recent news.\\\",\\n\\\"function_name\\\": \\\"predict_stock_trend\\\",\\n\\\"input_args\\\": {\\\"ticker_symbol\\\": \\\"A string that represents the ticker symbol of a stock. For example, 'AAPL' for Apple Inc.\\\"},\\n\\\"return\\\": \\\"A string ('up' or 'down') that represents the predicted trend of the input stock.\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a nostalgic old artist who was Gondhalekar's contemporary", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Artwork Style Transfer\\\",\\n    \\\"description\\\": \\\"Applies the style of one image to another image using a pre-trained deep learning model.\\\",\\n    \\\"function_name\\\": \\\"apply_art_style\\\",\\n    \\\"input_args\\\": [\\\"style_image_path\\\", \\\"content_image_path\\\"],\\n    \\\"return\\\": \\\"A numpy array representing the stylized image.\\\",\\n    \\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and the 'https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2' model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A student who is learning medical image analysis for the first time and has basic knowledge of C++ and Python.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"DICOM Image Viewer\\\", \\n  \\\"description\\\": \\\"Reads DICOM files and displays the medical image contained within. DICOM (Digital Imaging and Communications in Medicine) is the standard for the communication and management of medical imaging information and related data.\\\", \\n  \\\"function_name\\\": \\\"view_dicom_image\\\", \\n  \\\"input_args\\\": [\\\"dicom_file_path\\\"], \\n  \\\"return\\\": \\\"Displays the medical image from the input DICOM file.\\\",\\n  \\\"depend\\\": [\\\"pydicom\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired Olympic ski jumper turned local ski jumping coach in Norway.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ski Jump Score Calculator Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates the total score of a ski jump based on distance, style points and wind conditions. The calculation follows the rules of the International Ski Federation (FIS).\\\",\\n\\\"function_name\\\": \\\"calculate_ski_jump_score\\\",\\n\\\"input_args\\\": {\\n    \\\"distance\\\": \\\"The distance of the jump in meters.\\\",\\n    \\\"style_points\\\": \\\"A list of style points awarded by each judge.\\\",\\n    \\\"wind_vector\\\": \\\"The wind conditions as a vector. Negative values represent headwind, positive values represent tailwind.\\\"\\n},\\n\\\"return\\\": \\\"The total score of the ski jump.\\\",\\n\\\"depend\\\": \\\"Python built-in functions\\\"\\n}\"", "description": "tool development"}
{"input persona": "A first-time user of the software who is frustrated by the complexity of the interface", "synthesized text": "\"{\\n\\\"name\\\": \\\"User-friendly PDF Merging Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the task of merging multiple PDF files into one. The user only needs to provide an array of paths to the PDF files and the desired output file name.\\\",\\n\\\"function_name\\\": \\\"merge_pdfs\\\",\\n\\\"input_args\\\": [\\\"pdf_file_paths\\\", \\\"output_name\\\"],\\n\\\"return\\\": \\\"A successful print statement indicating the new merged PDF file.\\\",\\n\\\"depend\\\": [\\\"PyPDF2\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A structural engineer who ensures the roller coasters meet safety regulations and structural integrity.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Roller Coaster Safety Check Interface\\\",\\n\\\"description\\\": \\\"Predicts whether a roller coaster would meet safety regulations based on its features.\\\",\\n\\\"function_name\\\": \\\"roller_coaster_safety_check\\\",\\n\\\"input_args\\\": [\\\"height\\\", \\\"speed\\\", \\\"track_length\\\", \\\"num_inversions\\\"],\\n\\\"return\\\": \\\"A string indicating whether the roller coaster is expected to meet safety regulations ('Safe') or not ('Unsafe').\\\",\\n\\\"depend\\\": \\\"Python libraries (Pandas, sklearn, joblib), Pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced banker who shares insights on the importance of credit history and offers tips on establishing good credit", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Credit Score Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches the user's credit score from a credit score provider's API and provides tips on improving it. The tips are generated by a large language model based on the user's current score.\\\",\\n  \\\"function_name\\\": {\\\"1\\\": \\\"get_credit_score\\\", \\\"2\\\": \\\"get_credit_improvement_tips\\\"},\\n  \\\"input_args\\\": {\\\"1\\\": \\\"ssn\\\", \\\"2\\\": \\\"credit_score\\\"},\\n  \\\"return\\\": {\\\"1\\\": \\\"credit_score\\\", \\\"2\\\": \\\"tips\\\"},\\n  \\\"depend\\\": {\\\"1\\\": \\\"requests library, Credit Score Provider API\\\", \\\"2\\\": \\\"Large Language Model\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A Spanish immigrant retired confectionery shop owner living in Brazil.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Translation Interface\\\",\\n  \\\"description\\\": \\\"Translates input text from one language to another using the 'translate' Python library.\\\",\\n  \\\"function_name\\\": \\\"translate_text\\\",\\n  \\\"input_args\\\": {\\n    \\\"input_text\\\": \\\"The text to be translated.\\\",\\n    \\\"from_lang\\\": \\\"The language code of the original text. Default is 'pt' for Portuguese.\\\",\\n    \\\"to_lang\\\": \\\"The language code to translate the text into. Default is 'es' for Spanish.\\\"\\n  },\\n  \\\"return\\\": \\\"The translated text.\\\",\\n  \\\"depend\\\": \\\"Python's translate library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An excitable professional wrestling vlogger and commentator who goes by the name \"SuplexMasterJay\"", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wrestling Match Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses video analysis and machine learning to analyze wrestling matches and count the number of key moves like suplexes, takedowns, pin attempts, and high-flying moves.\\\",\\n\\\"function_name\\\": \\\"analyze_wrestling_match\\\",\\n\\\"input_args\\\": \\\"video_path - a string representing the path to a wrestling match video file\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are the names of wrestling moves and the values are the counts of how many times that move occurred in the match.\\\",\\n\\\"depend\\\": [\\\"cv2\\\", \\\"numpy\\\", \\\"tensorflow\\\", \\\"pre-trained move classification model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A technical support specialist who troubleshoots any issues with Google Drive and ensures data security", "synthesized text": "\"{\\n\\\"name\\\": \\\"Google Drive File Scan Interface\\\",\\n\\\"description\\\": \\\"This interface scans files in a specified Google Drive folder for potential threats using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"scan_files_in_folder\\\",\\n\\\"input_args\\\": [\\\"folder_id\\\"],\\n\\\"return\\\": \\\"List of files along with their threat status.\\\",\\n\\\"depend\\\": [\\\"Google Drive API\\\", \\\"pre-trained machine learning model for malware detection\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A healthcare administrator who values the collaboration between the occupational therapist and the engineer in improving patient outcomes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Activity Level Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the activity level of a patient based on their clinical records. It is designed to help healthcare professionals, such as occupational therapists and engineers, in developing personalized interventions and assistive devices.\\\",\\n\\\"function_name\\\": \\\"predict_activity_level\\\",\\n\\\"input_args\\\": \\\"clinical_record - string, a text of patient's clinical record\\\",\\n\\\"return\\\": \\\"string, the predicted activity level of the patient which can be 'low', 'medium', or 'high'\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local sushi chef who provides Japanese food samples during book events to immerse attendees in the culture", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Allergen Detection Interface\\\",\\n\\\"description\\\": \\\"This interface identifies potential allergens in a given ingredient or food item by leveraging the Open Food Facts API.\\\",\\n\\\"function_name\\\": \\\"get_allergens_from_ingredient\\\",\\n\\\"input_args\\\": [\\\"ingredient_name\\\"],\\n\\\"return\\\": [\\\"List of potential allergens\\\"],\\n\\\"depend\\\": [\\\"Open Food Facts API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an ambitious freshman now studying at Baker University", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Detector Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face's Transformers library to detect plagiarism in text documents. It returns whether the document is plagiarized or not and the similarity score.\\\",\\n\\\"function_name\\\": \\\"check_plagiarism\\\",\\n\\\"input_args\\\": [\\\"document1\\\", \\\"document2\\\"],\\n\\\"return\\\": {\\\"is_plagiarized\\\": \\\"boolean\\\", \\\"similarity_score\\\": \\\"float\\\"},\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"transformers\\\", \\\"torch\\\", \\\"sklearn\\\"], \\\"machine learning models\\\": [\\\"sentence-transformers/paraphrase-MiniLM-L6-v2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A visual effects artist who specializes in creating realistic physics simulations in movies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physics Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the PyBullet library to create 3D physics simulations. Users input the parameters for the objects and forces involved, and the interface returns a simulation that can be visualized and further processed with graphics software.\\\",\\n\\\"function_name\\\": \\\"create_physics_simulation\\\",\\n\\\"input_args\\\": {\\n    \\\"object_parameters\\\": {\\n        \\\"urdf_file\\\": \\\"String (path to URDF file)\\\",\\n        \\\"start_position\\\": \\\"List of three Floats (x, y, z position in meters)\\\",\\n        \\\"start_orientation\\\": \\\"List of four Floats (quaternion x, y, z, w)\\\"\\n    },\\n    \\\"force_parameters\\\": {\\n        \\\"force_vector\\\": \\\"List of three Floats (force in newtons in x, y, z directions)\\\",\\n        \\\"force_position\\\": \\\"List of three Floats (position in meters where force is applied in x, y, z directions)\\\"\\n    }\\n},\\n\\\"return\\\": \\\"None (creates a visualization of a physics simulation)\\\",\\n\\\"depend\\\": \\\"PyBullet library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dietitian who offers advice on healthy eating habits for children", "synthesized text": "\"{\\n  \\\"name\\\" : \\\"Nutrition Recommendation Interface\\\",\\n  \\\"description\\\" : \\\"An interface that takes in a food item and returns whether it is recommended for children based on its nutritional profile.\\\",\\n  \\\"function_name\\\" : \\\"is_healthy_for_kids\\\",\\n  \\\"input_args\\\" : {\\n    \\\"food_name\\\" : \\\"Name of the food item\\\"\\n  },\\n  \\\"return\\\" : {\\n    \\\"recommended\\\" : \\\"Boolean indicating if the food is recommended\\\",\\n    \\\"reason\\\" : \\\"The reason why the food is/is not recommended\\\"\\n  },\\n  \\\"depend\\\" : {\\n    \\\"USDA FoodData Central API\\\" : \\\"To get the nutritional profile of the food\\\",\\n    \\\"requests\\\" : \\\"Python library to make HTTP requests\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A systems administrator who relies on Apache Traffic Server for web traffic management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Apache Traffic Server Log Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze and visualize web traffic from Apache Traffic Server logs. It returns the most visited pages, peak traffic time, and a visualization of the traffic trend.\\\",\\n\\\"function_name\\\": \\\"analyze_web_traffic\\\",\\n\\\"input_args\\\": \\\"log_file_path\\\",\\n\\\"return\\\": \\\"A dictionary with 'Most Visited Pages' and 'Peak Traffic Time', and a plot of the web traffic trend.\\\",\\n\\\"depend\\\": \\\"Python's built-in libraries: pandas, matplotlib, seaborn\\\"\\n}\"", "description": "tool development"}
{"input persona": "Afghan immigrant in New Hampshire who doesn't speak English fluently but is passionate about becoming a hairdresser", "synthesized text": "\"{\\n\\\"name\\\": \\\"English Vocabulary Building Interface\\\",\\n\\\"description\\\": \\\"This interface helps non-native English speakers to learn and understand new words by providing definitions, usage examples, synonyms, and antonyms. They only need to input a word, and the interface will return the required details.\\\",\\n\\\"function_name\\\": \\\"get_word_details\\\",\\n\\\"input_args\\\": \\\"word - the word user wants to get details about\\\",\\n\\\"return\\\": \\\"A dictionary containing 'word' as the input word, 'definitions' as a list of definitions of the word, 'examples' as usage examples, 'synonyms' as synonyms of the word, and 'antonyms' as antonyms of the word.\\\",\\n\\\"depend\\\": \\\"Wordnik API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traveler who frequently visits tropical areas and seeks advice on preventing skin diseases", "synthesized text": "\"{\\n\\\"name\\\": \\\"UV Index Forecast\\\",\\n\\\"description\\\": \\\"Provides the UV Index forecast for the next few hours based on the user's location along with protective advice.\\\",\\n\\\"function_name\\\": \\\"get_uv_index_forecast\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"A tuple including latitude and longitude of the user's current location\\\"\\n},\\n\\\"return\\\": {\\n    \\\"uv_index_forecast\\\": \\\"UV Index for the next few hours\\\",\\n    \\\"advice\\\": \\\"Protective advice based on the UV Index forecast\\\"\\n},\\n\\\"depend\\\": \\\"OpenUV.io API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a member of Air Force Falcon's ice hockey team", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Shot Accuracy Improvement Interface\\\",\\n  \\\"description\\\": \\\"An interface for ice hockey players to improve their shot accuracy by predicting the best angles and speeds for shots based on their past performance data.\\\",\\n  \\\"function_name\\\": \\\"predict_shot_accuracy\\\",\\n  \\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to a CSV file containing the player's past performance data.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of predicted shot accuracies for the player's shots.\\\",\\n  \\\"depend\\\": \\\"Python libraries: pandas, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "IT специалист, занимающийся архитектурой серверов и хранением данных.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Server Status Interface\\\",\\n  \\\"description\\\": \\\"This interface returns the current status of a server, including CPU usage, memory usage, and disk usage.\\\",\\n  \\\"function_name\\\": \\\"get_server_status\\\",\\n  \\\"input_args\\\": [\\\"server_name\\\"],\\n  \\\"return\\\": {\\\"server_name\\\": \\\"string\\\", \\\"cpu_usage\\\": \\\"float\\\", \\\"memory_usage\\\": \\\"float\\\", \\\"disk_usage\\\": \\\"float\\\"},\\n  \\\"depend\\\": [\\\"psutil\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a Wyoming high school teacher", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n\\\"description\\\": \\\"This interface compares the similarity of two input texts using the Jaccard similarity coefficient. It is useful for plagiarism detection in students' assignments.\\\",\\n\\\"function_name\\\": \\\"plagiarism_check\\\",\\n\\\"input_args\\\": [\\\"original_text\\\", \\\"comparing_text\\\"],\\n\\\"return\\\": \\\"A similarity score between 0 and 1. A higher score indicates higher similarity.\\\",\\n\\\"depend\\\": \\\"The 'textdistance' Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An African gamer who is passionate about inclusion and diversity.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Game Character Diversity Interface\\\",\\n  \\\"description\\\": \\\"Analyze the diversity of video game characters in terms of gender, ethnicity, and other attributes from an image URL\\\",\\n  \\\"function_name\\\": \\\"analyze_game_character_diversity\\\",\\n  \\\"input_args\\\": \\\"img_url\\\",\\n  \\\"return\\\": \\\"diversity_score, report\\\",\\n  \\\"depend\\\": \\\"TensorFlow Hub, faster_rcnn/openimages_v4/inception_resnet_v2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a friend of Ilkin Rustamzade from his university days", "synthesized text": "\"{\\n\\\"name\\\": \\\"LinkedIn Profile Parser Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the public information of a LinkedIn profile. It takes in a LinkedIn profile URL and returns the parsed public information of the profile such as name, current position, education, skills, etc.\\\",\\n\\\"function_name\\\": \\\"fetch_linkedin_profile\\\",\\n\\\"input_args\\\": \\\"url\\\",\\n\\\"return\\\": \\\"A dictionary containing the parsed public information of the LinkedIn profile\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bloodstock agent who assists in selecting and purchasing high-quality racehorses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horse Pedigree Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the pedigree information of a horse, which can be used to analyze the quality of the horse for racing purposes.\\\",\\n\\\"function_name\\\": \\\"get_horse_pedigree\\\",\\n\\\"input_args\\\": \\\"horse_name\\\",\\n\\\"return\\\": \\\"Pedigree information of the horse in text format.\\\",\\n\\\"depend\\\": \\\"API from the Jockey Club Information Systems (JCIS)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aspiring young female wrestler who idolizes Toni Storm", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wrestler Match Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Pro Wrestling API to fetch and analyze match data for a specified wrestler. It returns a detailed analysis of the wrestler's matches, including total matches, win/loss count, list of opponents, list of venues, and list of match dates.\\\",\\n\\\"function_name\\\": \\\"analyze_wrestler_matches\\\",\\n\\\"input_args\\\": \\\"wrestler_name: The name of the wrestler to analyze\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'total_matches', 'wins', 'losses', 'opponents', 'venues', and 'dates'. Each key maps to the corresponding data from the wrestler's match history.\\\",\\n\\\"depend\\\": \\\"requests, Pro Wrestling API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An audiologist who collaborates with the physical therapist to diagnose and treat vestibular disorders", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vestibular Disorder Detection Interface\\\",\\n\\\"description\\\": \\\"This module uses a pre-trained deep learning model to classify audio signals and detect vestibular disorders. The user only needs to input the path to an audio file, and the function will return a diagnosis of whether the patient likely has a vestibular disorder.\\\",\\n\\\"function_name\\\": \\\"detect_vestibular_disorder\\\",\\n\\\"input_args\\\": [\\\"audio_file_path\\\"],\\n\\\"return\\\": \\\"A string indicating whether a vestibular disorder is likely or not.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"numpy\\\", \\\"librosa\\\", \\\"pretrained_model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a corporate executive in IT and cybersecurity, Nordic Region", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cyber Attack Detection Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to detect potential cyber attacks based on system log sequences.\\\",\\n\\\"function_name\\\": \\\"detect_cyber_attack\\\",\\n\\\"input_args\\\": \\\"path_to_file\\\",\\n\\\"return\\\": \\\"A string indicating whether a potential cyber attack is detected or not\\\",\\n\\\"depend\\\": \\\"sklearn, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A health education specialist who creates engaging and informative materials for health awareness campaigns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Readability Score Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Flesch Reading Ease formula to calculate the readability of a given text. It is used to ensure that health education materials are accessible to a broad audience.\\\",\\n\\\"function_name\\\": \\\"calculate_readability\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"A score representing the readability of the input text. Higher scores indicate easier readability.\\\",\\n\\\"depend\\\": \\\"textstat library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A food and beverage manager who oversees the culinary operations of the bed and breakfast", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to convert the quantity of a recipe ingredient from one unit of measurement to another.\\\",\\n\\\"function_name\\\": \\\"convert_ingredient_quantity\\\",\\n\\\"input_args\\\": {\\n    \\\"quantity\\\": \\\"The quantity of the ingredient that needs to be converted. Can be an integer or float.\\\",\\n    \\\"current_unit\\\": \\\"The current unit of measurement for the quantity. Should be a string.\\\",\\n    \\\"convert_to_unit\\\": \\\"The unit of measurement that the quantity needs to be converted to. Should be a string.\\\"\\n},\\n\\\"return\\\": \\\"The converted quantity of the ingredient. Returns a float.\\\",\\n\\\"depend\\\": \\\"Python library: pint\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young resident of Kanker, Chhattisgarh who always aspired to be a doctor", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Symptom Diagnosis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of symptoms as input and returns potential medical diagnoses using the Infermedica API.\\\",\\n\\\"function_name\\\": \\\"get_medical_diagnosis\\\",\\n\\\"input_args\\\": [\\\"symptoms\\\"],\\n\\\"return\\\": [\\\"List of potential medical conditions\\\"],\\n\\\"depend\\\": [\\\"requests library, Infermedica API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A representative from a local car dealership who advertises their latest offers during the radio show", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Car Offer Audio Extraction Interface\\\",\\n  \\\"description\\\": \\\"This interface takes the path to a radio show audio file as input and returns the transcribed text of the audio. It can be used by car dealership representatives to review and analyze their advertisements.\\\",\\n  \\\"function_name\\\": \\\"transcribe_audio\\\",\\n  \\\"input_args\\\": [\\\"path_to_audio\\\"],\\n  \\\"return\\\": \\\"Transcribed text of the audio\\\",\\n  \\\"depend\\\": [\\\"SpeechRecognition library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A broadcast journalist who keeps citizens informed about the state's legislative activities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bill Tracker Interface\\\",\\n\\\"description\\\": \\\"Interface to access latest status of a specific bill using LegiScan API.\\\",\\n\\\"function_name\\\": \\\"get_bill_status\\\",\\n\\\"input_args\\\": \\\"bill_number\\\",\\n\\\"return\\\": \\\"Current status of the bill\\\",\\n\\\"depend\\\": \\\"requests library, LegiScan API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A clinical researcher with a deep understanding of patient needs and treatment options", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Interaction Checker Interface\\\",\\n\\\"description\\\": \\\"This interface uses the APIs from National Library of Medicine's RxNorm to check potential drug-drug interactions. Users input two drug names, and it returns the interaction information if there's any.\\\",\\n\\\"function_name\\\": \\\"check_drug_interactions\\\",\\n\\\"input_args\\\": {\\\"drug1\\\": \\\"string\\\", \\\"drug2\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": \\\"requests, json, RxNorm API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A child development specialist who provides guidance on selecting age-appropriate educational materials", "synthesized text": "\"{\\n\\\"name\\\": \\\"OpenAI Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface provides book recommendations for children based on their age and interest.\\\",\\n\\\"function_name\\\": \\\"get_book_recommendations\\\",\\n\\\"input_args\\\": { \\\"age\\\": \\\"The age of the child\\\", \\\"interest\\\": \\\"The interest of the child\\\" },\\n\\\"return\\\": \\\"A list of book recommendations.\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a casual satellite-tracker hobbyist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Satellite Tracking Interface\\\",\\n\\\"description\\\": \\\"This interface uses the N2YO API to provide real-time tracking and predictions for satellites. The user only needs to provide the ID of a satellite (based on the NORAD two-line element set format), and our interface will return the current location (longitude, latitude, and altitude) of the satellite.\\\",\\n\\\"function_name\\\": \\\"get_satellite_location\\\",\\n\\\"input_args\\\": \\\"satellite_id\\\",\\n\\\"return\\\": \\\"Tuple of (latitude, longitude, altitude)\\\",\\n\\\"depend\\\": \\\"requests, N2YO API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow lab technician who loves creating color-coded labeling systems and organizing lab supplies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Coded Label Generation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Python Imaging Library (PIL) to create color-coded labels. The user simply needs to input the label text, color, and output filename, and our interface will return a color-coded label as an image file.\\\",\\n\\\"function_name\\\": \\\"create_color_coded_label\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"color\\\", \\\"output_filename\\\"],\\n\\\"return\\\": \\\"A message indicating the label image has been created successfully.\\\",\\n\\\"depend\\\": [\\\"Python Imaging Library (PIL)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "The head of the dining services department, constantly working to improve the quality and variety of food options on campus", "synthesized text": "\"{\\n\\\"name\\\": \\\"Menu Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of ingredients and generates a unique recipe using them. It uses a pre-trained model from Hugging Face that is capable of generating recipes.\\\",\\n\\\"function_name\\\": \\\"generate_recipe\\\",\\n\\\"input_args\\\": [\\\"ingredients\\\"],\\n\\\"return\\\": \\\"A unique recipe as a string\\\",\\n\\\"depend\\\": \\\"Hugging Face's GPT2LMHeadModel and GPT2Tokenizer\\\"\\n}\"", "description": "tool development"}
{"input persona": "A designer committed to creating cruelty-free, faux fur clothing options to discourage the use of real fur", "synthesized text": "\"{\\n\\\"name\\\": \\\"Faux Fur Design Inspiration Interface\\\",\\n\\\"description\\\": \\\"This interface uses a deep learning model to extract the patterns and textures from images of real fur, providing inspiration and guidance for designers creating faux fur.\\\",\\n\\\"function_name\\\": \\\"extract_fur_patterns\\\",\\n\\\"input_args\\\": \\\"path_to_img - a string that represents the path to the image file of real fur\\\",\\n\\\"return\\\": \\\"An image of the segmented patterns and textures from the real fur image\\\",\\n\\\"depend\\\": \\\"This function depends on the TensorFlow and TensorFlow Hub libraries, as well as the DeepLabV3 model for image segmentation from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "Fan of Australian volleyball teams", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Volleyball Match Result Interface\\\",\\n  \\\"description\\\": \\\"An interface that fetches volleyball match results using the Sports Open Data API. Users specify the name of the Australian volleyball team and the interface returns the team's recent match results.\\\",\\n  \\\"function_name\\\": \\\"get_volleyball_match_results\\\",\\n  \\\"input_args\\\": \\\"'team_name' - name of the Australian volleyball team\\\",\\n  \\\"return\\\": \\\"A list of dictionaries. Each dictionary represents a match with keys 'opponent' (name of the opponent team), 'score' (scores of the match), and 'win' (a boolean indicating whether the user's team won the match).\\\",\\n  \\\"depend\\\": \\\"requests library, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mother of a teenager who is interested in getting an oral piercing.", "synthesized text": "\"{\\n \\\"name\\\": \\\"Piercing Safety Information Interface\\\",\\n \\\"description\\\": \\\"Extracts safety information about a specific type of oral piercing from a trustworthy source.\\\",\\n \\\"function_name\\\": \\\"get_piercing_safety_info\\\",\\n \\\"input_args\\\": {\\n   \\\"piercing_type\\\": \\\"The type of piercing. For example: 'tongue', 'lip', etc.\\\"\\n },\\n \\\"return\\\": \\\"A string containing safety information about the specified type of piercing.\\\",\\n \\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who created a popular dark mode extension for various popular software applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Inversion Interface\\\",\\n\\\"description\\\": \\\"An interface that uses OpenCV to invert the colors of an image, creating a 'dark mode' version of the image.\\\",\\n\\\"function_name\\\": \\\"invert_image_colors\\\",\\n\\\"input_args\\\": \\n{\\n    \\\"image_path\\\": \\\"The path to the image file to be inverted.\\\"\\n},\\n\\\"return\\\": \\\"The path to the new image file with inverted colors.\\\",\\n\\\"depend\\\": \\\"OpenCV, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from a region with abundant water resources who opposes the equitable distribution legislation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Water Usage Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes water usage data of a specific region to form an argument against the proposed equitable distribution legislation.\\\",\\n\\\"function_name\\\": \\\"get_water_usage_statistics\\\",\\n\\\"input_args\\\": {\\n    \\\"region\\\": \\\"The region for which the water usage statistics are to be fetched.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"analysis\\\": \\\"A dictionary containing the water usage analysis of the specified region.\\\"\\n},\\n\\\"depend\\\": \\\"This function depends on the 'requests' and 'pandas' Python libraries and the 'USGS Water Data for the Nation' API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A private antiquities collector accused of illegally obtaining rare Mesoamerican artifacts", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Artifact Authenticity Verification Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the type of a Mesoamerican artifact based on its image, aiding in authenticity verification.\\\",\\n  \\\"function_name\\\": \\\"verify_artifact\\\",\\n  \\\"input_args\\\": [\\\"path_to_img\\\"],\\n  \\\"return\\\": \\\"artifact_type\\\",\\n  \\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"pre-trained machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A historian with a specific interest in the correlation between tectonic activity and societal development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Earthquake Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch and analyze earthquake data from the US Geological Survey's API.\\\",\\n\\\"function_name\\\": \\\"get_earthquake_data\\\",\\n\\\"input_args\\\": {\\n    \\\"start_time\\\": \\\"The start date of the time range to fetch earthquake data from, in the format 'YYYY-MM-DD'.\\\",\\n    \\\"end_time\\\": \\\"The end date of the time range to fetch earthquake data from, in the format 'YYYY-MM-DD'.\\\",\\n    \\\"min_magnitude\\\": \\\"The minimum magnitude of earthquakes to include in the data.\\\"\\n},\\n\\\"return\\\": \\\"A Pandas DataFrame containing the magnitude, location and time of each earthquake within the specified timeframe and above the specified magnitude.\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"pandas\\\"],\\n    \\\"web_APIs\\\": [\\\"US Geological Survey's API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "a resident in Florida who has been closely following the foreclosure crisis", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Foreclosure Property Search Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Zillow API to return a list of foreclosure properties within a specified price range in a specified location.\\\",\\n  \\\"function_name\\\": \\\"get_foreclosure_properties\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"The location where to search for foreclosure properties.\\\",\\n    \\\"min_price\\\": \\\"The minimum price of the foreclosure properties. Defaults to 0.\\\",\\n    \\\"max_price\\\": \\\"The maximum price of the foreclosure properties. Defaults to infinity.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of street addresses for foreclosure properties within the specified price range in the specified location.\\\",\\n  \\\"depend\\\": \\\"Zillow API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst who has benefited from the improved efficiency of the database systems implemented by the retiree", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Query Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to execute SQL queries on a SQLite database and get the results as a pandas DataFrame\\\",\\n\\\"function_name\\\": \\\"execute_sql_query\\\",\\n\\\"input_args\\\": {\\n    \\\"query\\\": \\\"A string that represents the SQL query to be executed\\\",\\n    \\\"database\\\": \\\"A string that represents the name of the SQLite database to connect to\\\"\\n},\\n\\\"return\\\": \\\"A pandas DataFrame that contains the result of the SQL query\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sqlite3\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a CSV manager in the United Nations", "synthesized text": "\"{\\n\\\"name\\\": \\\"CSV Data Filtering Interface\\\", \\n\\\"description\\\": \\\"This interface filters data from a CSV file based on a specified condition and writes the filtered data to a new file.\\\", \\n\\\"function_name\\\": \\\"filter_csv_data\\\", \\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"Path to the CSV file that needs to be filtered.\\\", \\n    \\\"column_name\\\": \\\"The name of the column to filter on.\\\", \\n    \\\"filter_value\\\": \\\"The value to filter for in the specified column.\\\", \\n    \\\"output_file_path\\\": \\\"Path to the output CSV file that will contain the filtered data.\\\"\\n}, \\n\\\"return\\\": \\\"Path to the output CSV file that contains the filtered data.\\\", \\n\\\"depend\\\": \\\"Python's built-in 'csv' library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lounge manager who creates a comfortable and relaxing environment for passengers during layovers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ambient Noise Generation Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to play an ambient noise of a specific type to create a relaxing atmosphere. It uses the Pydub library to load and play a .wav file.\\\",\\n\\\"function_name\\\": \\\"generate_ambient_noise\\\",\\n\\\"input_args\\\": {\\\"sound_type\\\": \\\"The type of ambient noise you want to generate. Options are 'rain', 'ocean', and 'forest'.\\\"},\\n\\\"return\\\": \\\"None. The specified sound is played directly.\\\",\\n\\\"depend\\\": \\\"Python's Pydub library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A non-tech savvy business owner relying on the overhaul to increase operational efficiency and productivity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inventory Management Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies inventory management by providing a list of products that are low in stock, a list of products that have poor sales, and a graph showing product sales.\\\",\\n\\\"function_name\\\": \\\"inventory_management\\\",\\n\\\"input_args\\\": \\\"file_path - a string representing the path to a CSV file with columns for 'Product', 'Quantity', and 'Sales'\\\",\\n\\\"return\\\": \\\"A dictionary with two lists: 'Low Stock' and 'Poor Sales', representing products that are low in stock and have poor sales respectively.\\\",\\n\\\"depend\\\": \\\"Pandas and Matplotlib libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "a member of the working class who can't afford insurance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Cost Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the cost of medical insurance based on several parameters using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_medical_cost\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"sex\\\", \\\"bmi\\\", \\\"children\\\", \\\"smoker\\\", \\\"region\\\"],\\n\\\"return\\\": \\\"Predicted cost of medical insurance.\\\",\\n\\\"depend\\\": [\\\"Hugging Face transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A group of active and adventurous kids who participate in junior triathlon events and look up to their parent as a role model", "synthesized text": "\"{\\n\\\"name\\\": \\\"Triathlon Training Plan Generator\\\",\\n\\\"description\\\": \\\"Generates a training plan for a junior triathlete based on their age, current fitness level and the date of an upcoming triathlon event.\\\",\\n\\\"function_name\\\": \\\"generate_training_plan\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"fitness_level\\\", \\\"event_date\\\"],\\n\\\"return\\\": \\\"A string that indicates the recommended hours per week for swimming, biking, and running.\\\",\\n\\\"depend\\\": \\\"Sklearn RandomForestRegressor, pandas, numpy, datetime\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired telephone line repairer reminiscing the times of landline phones", "synthesized text": "\"{\\n\\\"name\\\": \\\"Old Phone Ringtone Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses Python's simpleaudio library to generate and play an old-fashioned telephone ringtone. The user specifies the duration of the ring and the number of rings.\\\",\\n\\\"function_name\\\": \\\"generate_phone_ringtone\\\",\\n\\\"input_args\\\": [\\\"duration\\\", \\\"number_of_rings\\\", \\\"frequency\\\"],\\n\\\"return\\\": \\\"A string message indicating that the ringtone has been played successfully.\\\",\\n\\\"depend\\\": [\\\"Python's simpleaudio library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fitness enthusiast sibling who relies on the nutritionist's expertise for optimal performance", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Macro Nutrient Calculator Interface\\\",\\n  \\\"description\\\": \\\"Calculates daily intake of protein, carbohydrates, and fats based on user's weight, goal and activity level.\\\",\\n  \\\"function_name\\\": \\\"calculate_macros\\\",\\n  \\\"input_args\\\": {\\n    \\\"weight\\\": \\\"User's weight in kilograms\\\",\\n    \\\"goal\\\": \\\"User's goal ('lose', 'gain', 'maintain')\\\",\\n    \\\"activity_level\\\": \\\"User's activity level ('sedentary', 'light', 'moderate', 'active', 'very active')\\\"\\n  },\\n  \\\"return\\\": \\\"The amount of protein, carbohydrates, and fats (in grams) the user needs to consume daily.\\\",\\n  \\\"depend\\\": \\\"Python standard libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A freshly appointed attorney currently specializing in alcohol law", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alcohol Laws By State Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about the alcohol laws in a specific state in the USA. The user only needs to input the state name, and the interface will return information about the alcohol laws in that state.\\\",\\n\\\"function_name\\\": \\\"get_alcohol_laws_by_state\\\",\\n\\\"input_args\\\": [\\\"state\\\"],\\n\\\"return\\\": \\\"Information about the alcohol laws in the provided state.\\\",\\n\\\"depend\\\": \\\"openstates.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a football pundit from Germany", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches detailed statistics of a particular football match using an API provided by football-data.org. Users input a match ID and the interface returns the detailed statistics of the match.\\\",\\n\\\"function_name\\\": \\\"get_match_statistics\\\",\\n\\\"input_args\\\": \\\"match_id\\\",\\n\\\"return\\\": \\\"A dictionary containing the names of the home and away teams, and a nested dictionary of the match statistics.\\\",\\n\\\"depend\\\": \\\"requests library, football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired history professor who dislikes tourism-oriented writing detailing only the superficial aspects of a place's history.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Depth Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Gensim library's Latent Dirichlet Allocation (LDA) to analyze the depth of the historical information in a text.\\\",\\n\\\"function_name\\\": \\\"historical_depth\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"A score that indicates the depth of historical information in the text.\\\",\\n\\\"depend\\\": \\\"Gensim library's Latent Dirichlet Allocation (LDA)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A PC gamer who argues that gaming on computers provides the ultimate gaming experience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Performance Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface that optimizes a user's GPU settings for gaming. The user only needs to input the game they are playing, and the interface will automatically adjust their GPU settings for optimal performance.\\\",\\n\\\"function_name\\\": \\\"optimize_gpu_for_game\\\",\\n\\\"input_args\\\": \\\"game_name - The name of the game the user is playing\\\",\\n\\\"return\\\": \\\"None. The function changes the GPU settings directly.\\\",\\n\\\"depend\\\": \\\"pynvml (Python NVIDIA Management Library)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A neat and organized individual who values efficiency and expects their living space to be kept in order", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Room Cleaning Interface\\\",\\n\\\"description\\\": \\\"An interface to automate the cleaning of a room using a Raspberry Pi-based robot. The user specifies the room size and the location of obstacles, and the interface returns the cleaning path that the robot should follow.\\\",\\n\\\"function_name\\\": \\\"automated_cleaning\\\",\\n\\\"input_args\\\": [\\\"room_size\\\", \\\"obstacles\\\"],\\n\\\"return\\\": \\\"cleaning_path\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"RPi.GPIO\\\"], \\\"hardware\\\": [\\\"Raspberry Pi-based robot\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "The visionary behind the non-profit, driven by a personal story of struggling to access medication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Price Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the GoodRx API to find the cheapest prices for a given medication at nearby pharmacies.\\\",\\n\\\"function_name\\\": \\\"get_cheapest_medication_prices\\\",\\n\\\"input_args\\\": \\\"medication_name\\\",\\n\\\"return\\\": \\\"A sorted list of prices at different pharmacies, with the cheapest price first.\\\",\\n\\\"depend\\\": \\\"GoodRx API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A descendant of Phillip A. Emery who unfortunately inherited grandpa's disability", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gene Variant Analysis Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to get comprehensive information about a specific gene variant from MyVariant.info\\\",\\n\\\"function_name\\\": \\\"get_variant_info\\\",\\n\\\"input_args\\\": \\\"rsID - The reference SNP id (rsID) of the variant\\\",\\n\\\"return\\\": \\\"A JSON object that contains comprehensive information about the gene variant, including gene name, variant type, clinical significance, impact, and much more.\\\",\\n\\\"depend\\\": \\\"MyVariant.info API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a devoted fan of Adrian Moore from Germany", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Composition Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface analyzes a music composition for attributes like tempo, beat, and pitch. The user just needs to input the path to a music file (in .wav format), and the interface will return a dictionary containing the analyzed attributes of the music.\\\", \\n\\\"function_name\\\": \\\"analyze_music_composition\\\",\\n\\\"input_args\\\": {\\\"path_to_music\\\": \\\"String representing the path to a music file\\\"},\\n\\\"return\\\": {\\\"tempo\\\": \\\"Float representing the tempo of the music\\\", \\\"beat_frames\\\": \\\"List of integers representing the beat frames of the music\\\", \\\"pitch\\\": \\\"Float representing the pitch tuning of the music\\\"},\\n\\\"depend\\\": \\\"librosa library in Python\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired soccer player who now works as a sports agent, helping players secure contracts and endorsements", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Player Market Value Estimation Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a machine learning model to estimate a soccer player's market value based on their statistics. The model is trained on historical player market values and statistics.\\\",\\n  \\\"function_name\\\": \\\"estimate_player_market_value\\\",\\n  \\\"input_args\\\": {\\n    \\\"model_path\\\": \\\"Path to the trained RandomForestRegressor model.\\\",\\n    \\\"player_stats\\\": \\\"List of player statistics in the following order - Age, Goals, Assists, Minutes Played, Pass Accuracy.\\\"\\n  },\\n  \\\"return\\\": \\\"Estimated market value of the player.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"sklearn.ensemble.RandomForestRegressor\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A white hat hacker who works alongside the cybersecurity professor to identify and fix vulnerabilities in systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vulnerability Scanning Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenVAS library to scan a target IP address for vulnerabilities.\\\",\\n\\\"function_name\\\": \\\"scan_for_vulnerabilities\\\",\\n\\\"input_args\\\": [\\\"target_ip\\\"],\\n\\\"return\\\": \\\"Scan report detailing the vulnerabilities found on the target system.\\\",\\n\\\"depend\\\": \\\"OpenVAS library\\\"\\n}\"", "description": "tool development"}
{"input persona": "篮球评论员", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Real-time Match Data Retrieval Interface\\\",\\n  \\\"description\\\": \\\"This interface retrieves real-time data of a basketball match, including score, hits, rebounds and more, using the Sports Open Data API.\\\",\\n  \\\"function_name\\\": \\\"get_live_match_data\\\",\\n  \\\"input_args\\\": [\\\"match_id\\\"],\\n  \\\"return\\\": \\\"real-time match data as a dictionary\\\",\\n  \\\"depend\\\": \\\"Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly resident who believes that the inspection process is too strict and burdensome, often having disagreements with the inspector", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Inspection Report Summary Interface\\\",\\n\\\"description\\\": \\\"This interface takes a home inspection report as input and returns a simplified summary of the report. It helps users understand the key points without having to go through the entire document.\\\",\\n\\\"function_name\\\": \\\"summarize_inspection_report\\\",\\n\\\"input_args\\\": \\\"report_text - string or path to a text file containing the home inspection report\\\",\\n\\\"return\\\": \\\"A string containing a summary of the report\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library for NLP tasks specifically the Summarization pipeline\\\"\\n}\"", "description": "tool development"}
{"input persona": "A risk assessor who analyzes property vulnerability and advises on mitigation strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"Interface to assess the flood and wildfire risks of a property.\\\",\\n\\\"function_name\\\": \\\"assess_property_risk\\\",\\n\\\"input_args\\\": [\\\"address\\\", \\\"path_to_img\\\"],\\n\\\"return\\\": {\\\"Flood Risk\\\": \\\"string\\\", \\\"Fire Risk\\\": \\\"boolean\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\"], \\\"web APIs\\\": [\\\"FEMA\\\", \\\"TensorFlow Hub model 'https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1'\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A car enthusiast worried about the devaluation of his rare vehicle collection due to market trends", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Price Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Edmunds API to provide historical price trend data for a specified vehicle. Users input the make, model, and year of their car, and the interface returns the historical price trend, aiding in future value prediction.\\\",\\n\\\"function_name\\\": \\\"get_vehicle_price_trend\\\",\\n\\\"input_args\\\": {\\\"make\\\": \\\"string\\\", \\\"model\\\": \\\"string\\\", \\\"year\\\": \\\"integer\\\"},\\n\\\"return\\\": \\\"Price trend data (JSON) or an error message if data is not available.\\\",\\n\\\"depend\\\": \\\"Edmunds API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Indian government official, working in the Ministry of Petroleum and Natural Gas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Petroleum Product Price Interface\\\",\\n\\\"description\\\": \\\"This interface fetches daily price of petroleum products like Petrol, Diesel, etc. in various cities of India using the IOCL API.\\\",\\n\\\"function_name\\\": \\\"get_petroleum_price\\\",\\n\\\"input_args\\\": {\\n  \\\"city\\\": \\\"Name of the city\\\",\\n  \\\"product_type\\\": \\\"Type of petroleum product (like Petrol, Diesel)\\\"\\n},\\n\\\"return\\\": \\\"Price of the specified petroleum product in the specified city.\\\",\\n\\\"depend\\\": \\\"IOCL API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Vueling Airlines representative who ensures timely and reliable flight services for the travel agency's customers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Status Check Interface\\\",\\n\\\"description\\\": \\\"This interface returns the real-time flight status of a specific flight, using the airline name and flight number as input. It provides information about flight status, estimated departure, and arrival times.\\\",\\n\\\"function_name\\\": \\\"get_flight_status\\\",\\n\\\"input_args\\\": [\\\"airline_name\\\", \\\"flight_number\\\"],\\n\\\"return\\\": {\\\"flight_status\\\": \\\"string\\\", \\\"departure\\\": \\\"string\\\", \\\"arrival\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"aviationstack API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A radiology techinician with limited understanding of artificial intelligence.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chest X-Ray Diagnosis Interface\\\",\\n\\\"description\\\": \\\"An interface for diagnosing chest x-rays using a pre-trained deep learning model. It simplifies the process of running an AI model to a single function call, specifically designed for radiology technicians with limited understanding of artificial intelligence.\\\",\\n\\\"function_name\\\": \\\"diagnose_chest_xray\\\",\\n\\\"input_args\\\": [\\\"image_path\\\"],\\n\\\"return\\\": \\\"A diagnosis statement based on the x-ray image\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, Chest X-Ray Images (Pneumonia) model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a passionate fan and historian of Italian football. Giorgio Sereni's contributions to the sport resonate deeply with me, and I collect memorabilia from the era of players like him.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Result Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a team name and a year as inputs and returns all match results of that team in the specified year. It uses the football-data.org API.\\\",\\n\\\"function_name\\\": \\\"get_match_results\\\",\\n\\\"input_args\\\": [\\\"team\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"A list of strings, each string being the result of a match.\\\",\\n\\\"depend\\\": \\\"requests, football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A detective who works closely with the advocate to gather evidence and ensure the victim's safety", "synthesized text": "\"{\\n\\\"name\\\": \\\"Evidence Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses a Named Entity Recognition (NER) model to extract potential evidence from a large chunk of text.\\\",\\n\\\"function_name\\\": \\\"extract_entities\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"A list of entities (persons, organizations, locations, expressions of times, quantities, monetary values, percentages, etc.) potentially related to the case.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a mathematics university student who wants to research and understand the Goldston-Pintz-Yıldırım sieve more.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prime Number Sieve Interface\\\",\\n\\\"description\\\": \\\"This interface provides a list of prime numbers up to a given number. It's useful for studying sieves and prime gaps, such as the Goldston-Pintz-Y\\u0131ld\\u0131r\\u0131m sieve.\\\",\\n\\\"function_name\\\": \\\"generate_prime_numbers\\\",\\n\\\"input_args\\\": \\\"end - an integer up to which to generate prime numbers\\\",\\n\\\"return\\\": \\\"A list of prime numbers up to 'end'\\\",\\n\\\"depend\\\": \\\"Sympy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a history teacher who used to be a lawyer in Exeter", "synthesized text": "\"{\\n\\\"name\\\": \\\"Case Law Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to search for case laws by their name or citation. The result is the full text of the case law.\\\",\\n\\\"function_name\\\": \\\"get_case_law\\\",\\n\\\"input_args\\\": {\\\"case_name_or_citation\\\": \\\"A string representing the name or citation of the case law.\\\"},\\n\\\"return\\\": \\\"A string representing the full text of the case law.\\\",\\n\\\"depend\\\": \\\"This function depends on the requests library and the API of a legal database provider (e.g., Westlaw or CaseMine).\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former EU regulatory officer, now a consultant specializing in eco-friendly startups", "synthesized text": "\"{\\n  \\\"name\\\": \\\"EU Legislation Compliance Check Interface\\\",\\n  \\\"description\\\": \\\"An interface that helps eco-friendly startups find relevant EU regulations they need to comply with. Users only need to enter the type of their startup, and the interface will return the relevant EU regulations.\\\",\\n  \\\"function_name\\\": \\\"get_eu_regulations\\\",\\n  \\\"input_args\\\": {\\n    \\\"startup_type\\\": \\\"The type of the startup (e.g., 'solar energy', 'electric vehicles').\\\"\\n  },\\n  \\\"return\\\": \\\"A list of titles of relevant EU regulations.\\\",\\n  \\\"depend\\\": \\\"Eur-Lex API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a contemporary Polish poet who admires Czesław Miłosz's works", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poem Style Transfer Interface\\\",\\n\\\"description\\\": \\\"This interface takes a user's original poem and the name of a poet whose style they want to emulate, and returns a poem in the style of the specified poet.\\\",\\n\\\"function_name\\\": \\\"transform_poem_style\\\",\\n\\\"input_args\\\": [\\\"original_poem\\\", \\\"target_poet\\\"],\\n\\\"return\\\": \\\"A poem in the style of the target poet.\\\",\\n\\\"depend\\\": {\\\"python library\\\": [\\\"transformers\\\", \\\"torch\\\"], \\\"machine learning model\\\": \\\"Helsinki-NLP/opus-mt-en-pl\\\"}\\n}\"", "description": "tool development"}
{"input persona": "I am a politically engaged resident of Washington, D.C., who is frustrated with the District's lack of full representation in Congress and is actively involved in advocating for statehood.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Legislation Tracking Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the ProPublica Congress API to track the status and details of bills related to Washington D.C. statehood.\\\",\\n  \\\"function_name\\\": \\\"get_bill_details\\\",\\n  \\\"input_args\\\": {\\\"bill_id\\\": \\\"string\\\"},\\n  \\\"return\\\": {\\\"bill_id\\\": \\\"string\\\", \\\"title\\\": \\\"string\\\", \\\"sponsor\\\": \\\"string\\\", \\\"summary\\\": \\\"string\\\", \\\"status\\\": \\\"string\\\"},\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"ProPublica Congress API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A cousin who works in a different industry but connects them with potential employers through their network", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Opportunities Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface uses LinkedIn's API to search for job opportunities posted by a specific person or within a specific person's network.\\\",\\n\\\"function_name\\\": \\\"get_linked_in_connection_jobs\\\",\\n\\\"input_args\\\": \\\"connection_id - The LinkedIn ID of the connection\\\",\\n\\\"return\\\": \\\"A list of dictionaries, with each dictionary representing a job opportunity. Each dictionary contains two keys - 'title' and 'company', representing the job title and the company name respectively.\\\",\\n\\\"depend\\\": \\\"requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hardware engineer working on designing fiber optic components for the network", "synthesized text": "\"{\\n\\\"name\\\": \\\"Optical Power Loss Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the optical power loss in a fiber optic component given the initial power (in watts), the length of the fiber (in kilometers), and the attenuation coefficient (in dB/km).\\\",\\n\\\"function_name\\\": \\\"calculate_optical_power_loss\\\",\\n\\\"input_args\\\": {\\n    \\\"initial_power\\\": \\\"The initial optical power in watts.\\\",\\n    \\\"fiber_length\\\": \\\"The length of the fiber in kilometers.\\\",\\n    \\\"attenuation_coefficient\\\": \\\"The attenuation coefficient in dB/km.\\\"\\n},\\n\\\"return\\\": \\\"The final optical power after the loss (in watts).\\\",\\n\\\"depend\\\": \\\"NumPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a senior resident of Tuen Mun District in Hong Kong, who has seen the district evolve over the decades, and I take pride in being well-informed about the local transportation developments.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Public Transport Arrival Time Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Data.Gov.HK API to provide real-time public transport information. Users can input a bus route number to get the estimated arrival time of the next bus on that route.\\\",\\n\\\"function_name\\\": \\\"get_bus_arrival_time\\\",\\n\\\"input_args\\\": {\\\"route\\\": \\\"string representing the bus route number\\\"},\\n\\\"return\\\": \\\"string representing the estimated arrival time of the next bus in ISO 8601 format\\\",\\n\\\"depend\\\": {\\\"Python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Data.Gov.HK API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Daysofmay's #1 fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Track Lyrics Interface\\\",\\n\\\"description\\\": \\\"This interface provides the URL of the lyrics of a Daysofmay song given the title of the song.\\\",\\n\\\"function_name\\\": \\\"get_lyrics\\\",\\n\\\"input_args\\\": [\\\"song_title\\\"],\\n\\\"return\\\": \\\"URL of the lyrics or 'Lyrics not found' if the song is not found.\\\",\\n\\\"depend\\\": \\\"Genius API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A stroke survivor who greatly admires the dedication of medical professionals and the impact they have on patients' lives", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Speech-To-Text Transcription Interface\\\",\\n  \\\"description\\\": \\\"An interface that transcribes spoken words into written text using speech recognition library that interfaces with Google Web Speech API. This can be useful for stroke survivors who might have difficulty typing or writing.\\\",\\n  \\\"function_name\\\": \\\"transcribe_audio\\\",\\n  \\\"input_args\\\": {\\\"audio_file_path\\\": \\\"The path to the audio file to be transcribed.\\\"},\\n  \\\"return\\\": \\\"The transcribed text from the audio file.\\\",\\n  \\\"depend\\\": {\\\"python library\\\": [\\\"speech_recognition\\\"], \\\"Web APIs\\\": [\\\"Google Web Speech API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An artist who creates stunning aerial silk performances and inspires others in the neighborhood", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aerial Silk Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to analyze human body posture in images. It is useful for aerial silk artists who want to perfect their performance.\\\",\\n\\\"function_name\\\": \\\"analyze_posture\\\",\\n\\\"input_args\\\": \\\"path_to_img - The path to the image file that you want to analyze.\\\",\\n\\\"return\\\": \\\"A numpy array of keypoints representing the body posture in the image.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A theater owner concerned about declining ticket sales due to the popularity of streaming platforms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface to recommend top-rated movies in a particular genre using the TMDB API. This could help theater owners decide on what movies to screen to attract more viewers.\\\",\\n\\\"function_name\\\": \\\"get_top_movies_by_genre\\\",\\n\\\"input_args\\\": [\\\"genre\\\"],\\n\\\"return\\\": \\\"A list of dictionaries, each containing the title and release date of a top-rated movie in the specified genre.\\\",\\n\\\"depend\\\": \\\"TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Australian retiree who has invested a significant part of his savings in Commonwealth Bank shares", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface to get the latest closing price of a stock by using the symbol of the stock.\\\",\\n\\\"function_name\\\": \\\"get_latest_closing_price\\\",\\n\\\"input_args\\\": \\\"symbol\\\",\\n\\\"return\\\": \\\"The latest closing price of the stock as a float.\\\",\\n\\\"depend\\\": \\\"Alpha Vantage API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An industrial engineer specializing in quality control and utilizing statistical analysis in manufacturing processes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Statistical Process Control (SPC) Interface\\\",\\n\\\"description\\\": \\\"An interface that generates a control chart from manufacturing process data in a CSV file. The control chart includes a center line (mean), upper control limit (UCL), and lower control limit (LCL).\\\",\\n\\\"function_name\\\": \\\"generate_control_chart\\\",\\n\\\"input_args\\\": {\\n    \\\"csv_path\\\": \\\"The path to the CSV file containing the manufacturing process data\\\",\\n    \\\"column_name\\\": \\\"The name of the column in the CSV file for which to generate the control chart\\\"\\n},\\n\\\"return\\\": \\\"Displays a control chart and does not return any value.\\\",\\n\\\"depend\\\": \\\"This function depends on the pandas, numpy, and matplotlib Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a full-time movie theater usher and a part-time comic book dealer.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Comic Book Price Lookup Interface\\\",\\n\\\"description\\\": \\\"This interface takes the title and issue number of a comic book, and returns the original store date and current market price for that comic.\\\",\\n\\\"function_name\\\": \\\"get_comic_book_price\\\",\\n\\\"input_args\\\": {\\\"title\\\": \\\"string\\\", \\\"issue_number\\\": \\\"integer\\\"},\\n\\\"return\\\": {\\\"store_date\\\": \\\"string\\\", \\\"cover_price\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Comic Vine API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a ministry officer from the National Directorate of Civil Identification", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that matches a given face image to a database of known faces\\\",\\n\\\"function_name\\\": \\\"match_face\\\",\\n\\\"input_args\\\": [\\\"image_path\\\", \\\"known_faces\\\"],\\n\\\"return\\\": \\\"Index of the first match found in the known_faces database, or a message indicating that no match or no face was found\\\",\\n\\\"depend\\\": [\\\"face_recognition Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A small business owner who has personally experienced the negative effects of pollution caused by oil companies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Air Quality Open Data Platform API to get the current air quality index at a specified location.\\\",\\n\\\"function_name\\\": \\\"get_air_quality_index\\\",\\n\\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\"],\\n\\\"return\\\": \\\"The air quality index at the specified location or an error message if no data is available.\\\",\\n\\\"depend\\\": \\\"Web API: Air Quality Open Data Platform\\\"\\n}\"", "description": "tool development"}
{"input persona": "An English-speaking public health worker who is working on a health project in Benin", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Translation Interface\\\",\\n  \\\"description\\\": \\\"This interface translates English text into French. It is useful for English speakers working in French-speaking areas, like Benin.\\\",\\n  \\\"function_name\\\": \\\"translate_to_french\\\",\\n  \\\"input_args\\\": [\\\"text\\\"],\\n  \\\"return\\\": \\\"Translated French text\\\",\\n  \\\"depend\\\": \\\"googletrans Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated Minecraft player known for exploring and discovering hidden gems within the game", "synthesized text": "\"{\\n\\\"name\\\": \\\"Minecraft Seed Finder Interface\\\",\\n\\\"description\\\": \\\"An interface for finding Minecraft seeds with a specified feature near the spawn location. The feature can be any valid Minecraft feature, such as 'village', 'desert temple', or 'jungle temple'.\\\",\\n\\\"function_name\\\": \\\"find_minecraft_seeds\\\",\\n\\\"input_args\\\": [\\\"feature\\\"],\\n\\\"return\\\": \\\"A list of Minecraft seeds (strings)\\\",\\n\\\"depend\\\": \\\"Minecraft Seed Finder API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a descendant of Sir William Bowyer-Smijth, 12th Baronet", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancestor Descendants Tree Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input the name of an ancestor and get the list of descendants of that ancestor.\\\",\\n\\\"function_name\\\": \\\"get_descendants\\\",\\n\\\"input_args\\\": \\\"ancestor_name\\\",\\n\\\"return\\\": \\\"A list of descendants' names.\\\",\\n\\\"depend\\\": \\\"Wikidata's SPARQL endpoint API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old, lazy dog that watches the cat's antics with mild disinterest", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Activity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow to classify different animal behaviors from video footage.\\\",\\n\\\"function_name\\\": \\\"analyze_pet_behavior\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"A list of identified behaviors and their timestamps.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, aiy/vision/classifier/pets/1 from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "Python Developer Sherin", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Package Version Check Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check the currently installed version of a specific Python package in their environment.\\\",\\n\\\"function_name\\\": \\\"get_package_version\\\",\\n\\\"input_args\\\": [\\\"package_name\\\"],\\n\\\"return\\\": \\\"string representing the version of the package or 'Package Not Found'\\\",\\n\\\"depend\\\": [\\\"pkg_resources\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A screenwriter who creates complex and inspiring female characters, just like Angelina Jolie", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Traits Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a list of character traits inspired by a given famous person.\\\",\\n\\\"function_name\\\": \\\"generate_character_traits\\\",\\n\\\"input_args\\\": [\\\"inspiration\\\"],\\n\\\"return\\\": \\\"List of character traits as strings\\\",\\n\\\"depend\\\": \\\"OpenAI's GPT-3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A motion capture technician who helps translate the dancer's movements into digital form for video game animations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Motion Capture Data Processing Interface\\\",\\n\\\"description\\\": \\\"An interface utilizing the OpenPose library to extract body keypoints from a video. The user inputs a path to the video file, and the interface returns a list of 2D arrays. Each 2D array represents a frame of the video and contains the body keypoints of all detected people.\\\",\\n\\\"function_name\\\": \\\"process_motion_capture\\\",\\n\\\"input_args\\\": \\\"video_path\\\",\\n\\\"return\\\": \\\"keypoints_data\\\",\\n\\\"depend\\\": \\\"OpenPose library from CMU Perceptual Computing Lab\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced Hindustani classical vocalist who guides the bansuri player in mastering different ragas", "synthesized text": "\"{\\n\\\"name\\\" : \\\"Raga Identification Interface\\\",\\n\\\"description\\\" : \\\"An interface to identify the raga from a bansuri audio clip using TensorFlow's YAMNet model.\\\",\\n\\\"function_name\\\" : \\\"identify_raga\\\",\\n\\\"input_args\\\" : \\\"path_to_audio - Path to the audio file\\\",\\n\\\"return\\\" : \\\"Identified Raga\\\",\\n\\\"depend\\\" : \\\"Python libraries: tensorflow, tensorflow_hub, librosa. Machine learning model: YAMNet from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A scientist specializing in astrophysics who remains doubtful about the existence of UFOs", "synthesized text": "\"{\\n\\\"name\\\": \\\"UFO Detection Interface\\\",\\n\\\"description\\\": \\\"An interface using PyTorch and a pre-trained object detection model to detect potential UFOs in an image.\\\",\\n\\\"function_name\\\": \\\"detect_ufos\\\",\\n\\\"input_args\\\": {\\\"image_path\\\": \\\"Path to the image file\\\"},\\n\\\"return\\\": \\\"Number of potential UFOs detected in the image.\\\",\\n\\\"depend\\\": \\\"PyTorch, torchvision, PIL\\\"\\n}\"", "description": "tool development"}
{"input persona": "：一个秘鲁高山滑雪运动员，正在准备参加奥林匹克。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u6ed1\\u96ea\\u573a\\u96ea\\u60c5\\u62a5\\u544a\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u8fd9\\u4e2a\\u63a5\\u53e3\\u4f7f\\u7528OpenWeatherMap API\\uff0c\\u7528\\u6237\\u8f93\\u5165\\u6ed1\\u96ea\\u573a\\u4f4d\\u7f6e\\uff0c\\u63a5\\u53e3\\u8fd4\\u56de\\u6ed1\\u96ea\\u573a\\u7684\\u96ea\\u60c5\\u62a5\\u544a\\u3002\\\",\\n\\\"function_name\\\": \\\"get_ski_resort_snow_report\\\",\\n\\\"input_args\\\": \\\"resort_location - \\u6ed1\\u96ea\\u573a\\u7684\\u4f4d\\u7f6e\\uff0c\\u5982'\\u5965\\u6797\\u5339\\u514b\\u8c37'\\\",\\n\\\"return\\\": \\\"\\u4e00\\u4e2a\\u5305\\u542b\\u8fc7\\u53bb24\\u5c0f\\u65f6\\u7684\\u964d\\u96ea\\u91cf\\uff08\\u6beb\\u7c73\\uff09\\u3001\\u6e29\\u5ea6\\uff08\\u5f00\\u6c0f\\u5ea6\\uff09\\u548c\\u98ce\\u901f\\uff08\\u7c73/\\u79d2\\uff09\\u7684\\u5b57\\u5178\\\",\\n\\\"depend\\\": \\\"Python\\u7684requests\\u5e93\\uff0cOpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A politician rival of Andre V. Johnson, Jr. from Republican party.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Political Rival Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses ProPublica Congress API to find the political rivals of a given US politician based on voting history, bill sponsorship and committee membership.\\\",\\n\\\"function_name\\\": \\\"get_political_rivals\\\",\\n\\\"input_args\\\": \\\"politician_name\\\",\\n\\\"return\\\": \\\"A list of names of the political rivals of the given politician\\\",\\n\\\"depend\\\": \\\"ProPublica Congress API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young Muslim civil rights activist who draws strength from his faith to combat discrimination", "synthesized text": "\"{\\n\\\"name\\\": \\\"Qibla Direction Finder Interface\\\",\\n\\\"description\\\": \\\"This interface provides the Qibla direction for a given location. Qibla is the direction that should be faced when a Muslim prays.\\\",\\n\\\"function_name\\\": \\\"get_qibla_direction\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"Qibla direction in degrees from true north\\\",\\n\\\"depend\\\": \\\"Islamic Finder API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A budding ecologist fascinated by the role of seagrass meadows in coastal ecosystems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Seagrass Distribution Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to visualize the distribution of seagrass meadows in a specified geographical region.\\\",\\n\\\"function_name\\\": \\\"visualize_seagrass_distribution\\\",\\n\\\"input_args\\\": \\\"region - a string representing the geographical region of interest\\\",\\n\\\"return\\\": \\\"A heatmap representing the distribution of seagrass in the specified region.\\\",\\n\\\"depend\\\": \\\"Ocean Data View (ODV) API, seaborn, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent of a child with Prader-Willi syndrome who has successfully implemented a structured meal and activity plan", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Activity and Meal Planner Interface\\\",\\n  \\\"description\\\": \\\"An interface that creates a structured meal and activity plan for a given period. It uses Python's built-in calendar and datetime libraries.\\\",\\n  \\\"function_name\\\": \\\"create_plan\\\",\\n  \\\"input_args\\\": \\n  {\\n    \\\"start_date\\\": \\\"Starting date of the plan in 'YYYY-MM-DD' format.\\\",\\n    \\\"end_date\\\": \\\"Ending date of the plan in 'YYYY-MM-DD' format.\\\",\\n    \\\"meal_times\\\": \\\"A list of meal times in 'HH:MM' format.\\\",\\n    \\\"activity_times\\\": \\\"A list of activity times in 'HH:MM' format.\\\"\\n  },\\n  \\\"return\\\": \\n  {\\n    \\\"plan\\\": \\\"A dictionary representing the meal and activity plan for each day in the given period. Each date is a key, and its value is another dictionary where each key is a meal or activity time, and its value is either 'Food' or 'Activity'.\\\"\\n  },\\n  \\\"depend\\\": \\n  {\\n    \\\"Python libraries\\\": [\\\"calendar\\\", \\\"datetime\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A foreign language interpreter proficient in Arabic and Farsi, often accompanying delegations on diplomatic missions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a text string and the source and target languages as inputs and returns the text translated into the target language.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"source_language\\\", \\\"target_language\\\"],\\n\\\"return\\\": \\\"Translated text string\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned Iowa state senator known for being candid about political maneuvering", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Legislative Bill Tracker Interface\\\",\\n    \\\"description\\\": \\\"An interface to track the complete history of a legislative bill including actions, votes, amendments, and cosponsors by using the ProPublica Congress API.\\\",\\n    \\\"function_name\\\": \\\"track_legislative_bill\\\",\\n    \\\"input_args\\\": {\\n        \\\"bill_number\\\": \\\"The number of the bill to track.\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"Bill\\\": \\\"The number of the bill.\\\",\\n        \\\"Title\\\": \\\"The title of the bill.\\\",\\n        \\\"Sponsor\\\": \\\"The sponsor of the bill.\\\",\\n        \\\"Summary\\\": \\\"A summary of the bill.\\\",\\n        \\\"Actions\\\": \\\"A list of actions taken on the bill.\\\",\\n        \\\"Votes\\\": \\\"A list of votes on the bill.\\\",\\n        \\\"Amendments\\\": \\\"A list of amendments to the bill.\\\",\\n        \\\"Cosponsors\\\": \\\"A list of cosponsors of the bill.\\\"\\n    },\\n    \\\"depend\\\": {\\n        \\\"python_library\\\": [\\\"requests\\\"],\\n        \\\"web_APIs\\\": [\\\"ProPublica Congress API\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A proud self-proclaimed grammar fanatic and writer who is currently uninterested in dating.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grammar Check Interface\\\",\\n\\\"description\\\": \\\"An interface to correct grammar mistakes in a text using the LanguageTool API.\\\",\\n\\\"function_name\\\": \\\"check_and_correct_grammar\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"Corrected text\\\",\\n\\\"depend\\\": [\\\"LanguageTool API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an ambitious board member who is eager to become the chairwoman", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Meeting Scheduler Interface\\\",\\n  \\\"description\\\": \\\"An interface to schedule meetings with other board members using Google Calendar API. The user needs to input the meeting details such as title, start time, end time, attendees' emails, and a description, and the interface will create the event on Google Calendar.\\\",\\n  \\\"function_name\\\": \\\"schedule_meeting\\\",\\n  \\\"input_args\\\": [\\\"title\\\", \\\"start_time\\\", \\\"end_time\\\", \\\"attendees\\\", \\\"description\\\"],\\n  \\\"return\\\": \\\"A string containing the link to the created Google Calendar event.\\\",\\n  \\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A horse owner who has dealt with a similar rare genetic disorder in their own horse and has valuable insights to share", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Disorder Information Sharing Interface\\\",\\n\\\"description\\\": \\\"This interface extracts key information from a user's description of a genetic disorder and their insights, and presents it in a structured format. It uses the BERT model from Hugging Face for information extraction.\\\",\\n\\\"function_name\\\": \\\"share_genetic_disorder_insights\\\",\\n\\\"input_args\\\": {\\n    \\\"description\\\": \\\"A detailed description of the genetic disorder.\\\",\\n    \\\"insights\\\": \\\"The user's insights or experiences dealing with the disorder.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Disorder Information\\\": \\\"The key information about the genetic disorder, extracted from the user's description.\\\",\\n    \\\"Owner Insights\\\": \\\"The key insights from the user's experiences dealing with the disorder.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"transformers\\\"],\\n    \\\"machine learning models\\\": [\\\"BERT from Hugging Face\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A social geographer conducting research on the social impact of post-conflict reconstruction, working closely with the urban planner to analyze data and develop innovative strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"GeoSpatial Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface integrates geographic boundaries data from a GeoJSON file with social data from a CSV file, enabling complex geospatial analytics.\\\",\\n\\\"function_name\\\": \\\"integrate_geosocial_data\\\",\\n\\\"input_args\\\": [\\\"geojson_path\\\", \\\"csv_path\\\"],\\n\\\"return\\\": \\\"Geopandas DataFrame that integrates the geographic and social data\\\",\\n\\\"depend\\\": [\\\"GeoPandas library\\\", \\\"Pandas library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a young Black woman who is a junior researcher at National Cancer Institute and is inspired by Dominiqua Griffin's work", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gene Ontology Enrichment Analysis Interface\\\",\\n\\\"description\\\": \\\"Provides a list of enriched Gene Ontology terms for a given list of genes to help understand their functions\\\",\\n\\\"function_name\\\": \\\"go_enrichment_analysis\\\",\\n\\\"input_args\\\": \\\"a list of gene IDs\\\",\\n\\\"return\\\": \\\"a list of enriched GO terms\\\",\\n\\\"depend\\\": \\\"Biopython library, Gene Ontology (GO)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A religious studies scholar who believes that religious accommodations are essential for fostering a pluralistic society", "synthesized text": "\"{\\n\\\"name\\\": \\\"Religious Holiday Calendar Interface\\\",\\n\\\"description\\\": \\\"Interface to get the list of religious holidays for a specified year in a specified country.\\\",\\n\\\"function_name\\\": \\\"get_religious_holidays\\\",\\n\\\"input_args\\\": {\\\"country\\\": \\\"string\\\", \\\"year\\\": \\\"integer\\\"},\\n\\\"return\\\": \\\"List of tuples. Each tuple contains the name of the religious holiday and its date in ISO format.\\\",\\n\\\"depend\\\": \\\"Web API: Calendarific\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another military strategist from a rival nation, constantly attempting to outwit and outmaneuver", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Strategy Simulator Interface\\\",\\n\\\"description\\\": \\\"An interface that simulates military strategies and suggests possible counter-strategies.\\\",\\n\\\"function_name\\\": \\\"simulate_strategy\\\",\\n\\\"input_args\\\": \\\"commands - A list of commands representing a military strategy.\\\",\\n\\\"return\\\": \\\"A tuple containing the rewards of the strategy and additional info about the state of the environment after the strategy has been executed.\\\",\\n\\\"depend\\\": \\\"OpenAI Gym, Stable Baselines, TensorFlow, and a pre-trained model for military strategy simulation\\\"\\n}\"", "description": "tool development"}
{"input persona": "An African American Maryland resident who votes Democrat", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Voter Registration Status Check Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to check their voter registration status by providing their first name, last name, and date of birth.\\\",\\n  \\\"function_name\\\": \\\"get_voter_registration_status\\\",\\n  \\\"input_args\\\": [\\\"first_name\\\", \\\"last_name\\\", \\\"dob\\\"],\\n  \\\"return\\\": \\\"The voter registration status of the individual.\\\",\\n  \\\"depend\\\": \\\"US Election Assistance Commission API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a long-time resident in the district that LaVon Bracy Davis represents and a passionate follower of local politics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Politician Voting Record Interface\\\",\\n\\\"description\\\": \\\"This interface uses the ProPublica Congress API to fetch the voting record of a specified politician, allowing users to understand their local representative's stance on various issues.\\\",\\n\\\"function_name\\\": \\\"get_voting_record\\\",\\n\\\"input_args\\\": \\\"politician_id\\\",\\n\\\"return\\\": \\\"A list of descriptions of the votes that the politician has participated in.\\\",\\n\\\"depend\\\": \\\"ProPublica Congress API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wellness influencer who claims to have discovered the ultimate diet for optimal health", "synthesized text": "\"{\\n  \\\"ENERC_KCAL\\\": {\\n    \\\"label\\\": \\\"Energy\\\",\\n    \\\"quantity\\\": 278.82225,\\n    \\\"unit\\\": \\\"kcal\\\"\\n  },\\n  \\\"FAT\\\": {\\n    \\\"label\\\": \\\"Fat\\\",\\n    \\\"quantity\\\": 1.2755,\\n    \\\"unit\\\": \\\"g\\\"\\n  },\\n  // ... more nutrients ...\\n}\"", "description": "tool development"}
{"input persona": "An online retailer specializing in refurbished vintage audio equipment", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Price Comparison Interface\\\",\\n  \\\"description\\\": \\\"This interface scrapes data from multiple online sources to compare the prices of specific vintage audio equipment.\\\",\\n  \\\"function_name\\\": \\\"get_product_prices\\\",\\n  \\\"input_args\\\": \\\"product_name - a string representing the name of the product\\\",\\n  \\\"return\\\": \\\"A dictionary where each key-value pair is the source URL and the price of the product from that source, respectively\\\",\\n  \\\"depend\\\": \\\"BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A registered nurse who supports and educates the residents about the benefits of an active lifestyle", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physical Activity Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the calories burned based on the type of physical activity and its duration. It returns a motivational message encouraging an active lifestyle.\\\",\\n\\\"function_name\\\": \\\"estimate_calories_burned\\\",\\n\\\"input_args\\\": [\\\"activity_type\\\", \\\"duration\\\"],\\n\\\"return\\\": \\\"A string message with the estimated calories burned and a motivational phrase.\\\",\\n\\\"depend\\\": [\\\"Huggingface: bert-base-cased-finetuned-mrpc\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A sports journalist who specializes in covering motocross events and has followed Calvin Vlaanderen's career closely.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Motocross Race Statistics Interface\\\",\\n    \\\"description\\\": \\\"An interface that makes use of sports data APIs to retrieve the career statistics of a motocross racer based on the racer's name.\\\",\\n    \\\"function_name\\\": \\\"get_racer_statistics\\\",\\n    \\\"input_args\\\": \\\"racer_name\\\",\\n    \\\"return\\\": \\\"Dictionary containing the career statistics of the motocross racer\\\",\\n    \\\"depend\\\": \\\"requests, json\\\"\\n}\"", "description": "tool development"}
{"input persona": "Long-term IBS sufferer", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Food Sensitivity Predictor\\\",\\n    \\\"description\\\": \\\"Predicts potential food sensitivities for IBS sufferers based on their symptoms and food intake.\\\",\\n    \\\"function_name\\\": \\\"predict_food_sensitivity\\\",\\n    \\\"input_args\\\": {\\n        \\\"symptoms\\\": \\\"A list of symptoms the user is experiencing.\\\",\\n        \\\"food_list\\\": \\\"A list of foods that the user frequently consumes.\\\"\\n    },\\n    \\\"return\\\": \\\"A list of foods that the user might be sensitive to.\\\",\\n    \\\"depend\\\": \\\"Machine learning model (RandomForestClassifier)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cybersecurity expert from a different country, working on the implementation of encryption algorithms", "synthesized text": "\"{\\n\\\"name\\\": \\\"AES Encryption Interface\\\",\\n\\\"description\\\": \\\"This interface takes a message and a secret key as inputs, and returns the encrypted message using the AES encryption algorithm.\\\",\\n\\\"function_name\\\": \\\"aes_encrypt\\\",\\n\\\"input_args\\\": [\\\"message\\\", \\\"secret_key\\\"],\\n\\\"return\\\": \\\"A dictionary containing 'iv' and 'ciphertext', both Base64 encoded.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"Crypto.Cipher\\\", \\\"Crypto.Util.Padding\\\", \\\"Crypto.Random\\\", \\\"base64\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A resident who lives in Palakkad South", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"Provides current weather conditions for a given city using OpenWeatherMap API.\\\",\\n\\\"function_name\\\": \\\"get_current_weather\\\",\\n\\\"input_args\\\": {\\n    \\\"city_name\\\": \\\"A string representing the name of the city.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"main_weather\\\": \\\"A string describing the main weather condition.\\\",\\n    \\\"description\\\": \\\"A more detailed description of the weather condition.\\\",\\n    \\\"temperature\\\": \\\"A number representing the current temperature in Kelvin.\\\",\\n    \\\"humidity\\\": \\\"A number representing the current humidity percentage.\\\"\\n},\\n\\\"depend\\\": \\\"requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A super frugal student studying at Emory University", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meal Plan Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface that optimizes student's meal plan. The user inputs the number of days remaining in the semester, the current balance in their meal plan account, and the meal plan options available, and the interface returns the optimal meal plan strategy that maximizes satisfaction without exceeding the current balance.\\\",\\n\\\"function_name\\\": \\\"optimize_meal_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"days_left\\\": \\\"number of days left in the semester\\\",\\n    \\\"current_balance\\\": \\\"current balance in the meal plan account\\\",\\n    \\\"meal_options\\\": \\\"a dictionary where each key is a meal option and each value is another dictionary with two keys: 'cost' and 'satisfaction'\\\"\\n},\\n\\\"return\\\": \\\"a dictionary where each key is a meal option and each value is the number of times that meal option should be chosen to maximize satisfaction without exceeding the current balance\\\",\\n\\\"depend\\\": \\\"PuLP library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical geneticist studying the impact of genetic variations on drug responses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Variation Impact on Drug Response Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to understand the potential impact of a specific genetic variation on drug responses. Users input a genetic variant in the standard HGVS notation, and the function returns a list of potential drug response impacts.\\\",\\n\\\"function_name\\\": \\\"get_drug_response\\\",\\n\\\"input_args\\\": {\\n    \\\"genetic_variant\\\": \\\"A string representing a genetic variant in HGVS notation.\\\"\\n},\\n\\\"return\\\": \\\"A list of potential drug response impacts related to the inputted genetic variant.\\\",\\n\\\"depend\\\": \\\"This function depends on the MyVariant.info API, which aggregates information from multiple databases about genetic variations.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Nigerian parent advocating for less privilege and vulnerable groups.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Charity Donation Interface\\\",\\n\\\"description\\\": \\\"This interface handles charity donation transactions. Users only need to input the charity's ID, the donation amount, and the currency, and the interface will handle the donation.\\\",\\n\\\"function_name\\\": \\\"donate_to_charity\\\",\\n\\\"input_args\\\": [\\\"charity_id\\\", \\\"amount\\\", \\\"currency\\\"],\\n\\\"return\\\": \\\"Confirmation message of the transaction status.\\\",\\n\\\"depend\\\": \\\"JustGiving API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher studying the ecological impact of wildfires and examining strategies for prevention and recovery", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wildfire Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from NASA's Fire Information for Resource Management System (FIRMS) to access real-time and archived data on active fires. Users input the geographical coordinates of the area they want to study (latitude and longitude), and the time period for which they want data (start date and end date), and the interface returns data on the active fires in that area during the specified time period.\\\",\\n\\\"function_name\\\": \\\"get_wildfire_data\\\",\\n\\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"Data on the active fires in the specified area during the specified time period, or an error message if the data retrieval was unsuccessful.\\\",\\n\\\"depend\\\": [\\\"Python's requests library\\\", \\\"NASA's Fire Information for Resource Management System (FIRMS) API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an oncologist who was inspired by Bates' work", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cancer Mutation Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses Biopython and the PDB to analyze the effect of a mutation on a protein's structure. The user needs to provide the PDB id of the protein and the mutation. The interface returns the distance between the center of mass of the original and mutated amino acids.\\\",\\n\\\"function_name\\\": \\\"mutate_protein\\\",\\n\\\"input_args\\\": [\\\"pdb_id\\\", \\\"mutation\\\"],\\n\\\"return\\\": \\\"The distance between the center of mass of the original and mutated amino acids.\\\",\\n\\\"depend\\\": [\\\"Biopython\\\", \\\"PDB\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A talent scout from a top European club, impressed by the young striker's skills and potential", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Statistics Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to retrieve key statistics for a football player, such as games played, goals scored, assists, etc. The user only needs to input the player's name.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": \\\"player_name\\\",\\n\\\"return\\\": \\\"Player's key statistics\\\",\\n\\\"depend\\\": \\\"RapidAPI's Football-API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A policymaker responsible for creating strategies to address the potential disruption caused by automation", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Job Automation Impact Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface that predicts the probability of a job being automated based on its characteristics.\\\",\\n  \\\"function_name\\\": \\\"predict_job_automation_probability\\\",\\n  \\\"input_args\\\": {\\n    \\\"model\\\": \\\"a string representing the path to a pre-trained machine learning model\\\",\\n    \\\"job_characteristics\\\": \\\"a list of numbers representing the characteristics of a job\\\"\\n  },\\n  \\\"return\\\": \\\"a float representing the probability of the job being automated\\\",\\n  \\\"depend\\\": \\\"Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "Ein Musikjournalist, der sich auf klassische Musik und das Kulturleben in Europa spezialisiert hat.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Konzertsuche Interface\\\",\\n  \\\"description\\\": \\\"Sucht nach in der N\\u00e4he stattfindenden Konzerten, basierend auf Standort und Musikstil.\\\",\\n  \\\"function_name\\\": \\\"get_nearby_concerts\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"String repr\\u00e4sentiert den Standort des Benutzers.\\\",\\n    \\\"genre\\\": \\\"String repr\\u00e4sentiert den gew\\u00fcnschten Musikstil.\\\"\\n  },\\n  \\\"return\\\": \\\"Eine Liste von Konzertnamen, die auf Standort und Musikstil basieren.\\\",\\n  \\\"depend\\\": \\\"Benutzt die Eventbrite API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A museum curator specializing in Finnish artifacts and exhibitions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Finnish Artifact Translation Interface\\\",\\n  \\\"description\\\": \\\"This interface translates Finnish text to English using Google Translation API, which is particularly useful for museum curators specializing in Finnish artifacts and exhibitions.\\\",\\n  \\\"function_name\\\": \\\"translate_finnish_to_english\\\",\\n  \\\"input_args\\\": {\\n     \\\"finnish_text\\\": \\\"string\\\"\\n   },\\n  \\\"return\\\": \\\"string\\\",\\n  \\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a retired rugby player who played against Lise Baker back in the day.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Statistics Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface uses a sports data API to fetch the career statistics of a specified rugby player.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": [\\\"player_name\\\"],\\n\\\"return\\\": \\\"A JSON object containing the career statistics of the player.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"SportsDataIO API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A commercial pig farmer seeking expert advice to optimize pig feed for maximum growth and health", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Optimal Pig Feed Calculation Interface\\\",\\n  \\\"description\\\": \\\"An interface that calculates the optimal feed mix for pigs based on the costs and nutritional values of available feeds and the nutritional needs of the pigs. It uses linear programming to find a solution that minimizes cost while meeting nutritional requirements.\\\",\\n  \\\"function_name\\\": \\\"calculate_optimal_feed\\\",\\n  \\\"input_args\\\": {\\n    \\\"costs\\\": \\\"A list of feed costs per unit\\\",\\n    \\\"nutritional_values\\\": \\\"A 2D list where each sublist corresponds to a feed type, and every element in the sublist is the nutritional value of that feed\\\",\\n    \\\"nutritional_needs\\\": \\\"A list of nutritional needs of the pig\\\"\\n  },\\n  \\\"return\\\": \\\"A list of quantities of each feed type that provides the required nutrients at the lowest cost\\\",\\n  \\\"depend\\\": \\\"SciPy's optimization (linear programming) function\\\"\\n}\"", "description": "tool development"}
{"input persona": "A space scientist seeking innovative solutions for lunar and Mars rovers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Path Planning Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the A* pathfinding algorithm to determine the shortest path for a rover from a start to a goal point on a grid map of the terrain.\\\",\\n\\\"function_name\\\": \\\"astar\\\",\\n\\\"input_args\\\": [\\\"array\\\", \\\"start\\\", \\\"goal\\\"],\\n\\\"return\\\": \\\"A list of tuples that represent the coordinates from the start to the goal point.\\\",\\n\\\"depend\\\": \\\"Numpy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A climate researcher publishing papers on the decline of biodiversity due to environmental changes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Species Distribution Modelling Interface\\\",\\n\\\"description\\\": \\\"Predicts the impact of environmental changes on species distribution\\\",\\n\\\"function_name\\\": \\\"predict_species_distribution\\\",\\n\\\"input_args\\\": [\\\"species_file\\\", \\\"env_file\\\"],\\n\\\"return\\\": \\\"A scatter plot displaying the predicted species distribution based on environmental data\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\", \\\"matplotlib\\\", \\\"csv files of species occurrence records and environmental data\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Java programmer who is a beginner in the Aura Framework.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aura Framework Helper Interface\\\", \\n\\\"description\\\": \\\"This interface generates basic Aura components code based on user inputs.\\\", \\n\\\"function_name\\\": \\\"generate_aura_component_code\\\", \\n\\\"input_args\\\": [\\\"name\\\", \\\"type\\\", \\\"attributes\\\"], \\n\\\"return\\\": \\\"A string of the basic code for the specified Aura component.\\\", \\n\\\"depend\\\": [\\\"Python's built-in functions\\\"]\\n}\"", "description": "tool development"}
{"input persona": "我是一位历史学爱好者，对工业革命以降的历史特别感兴趣。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface takes a time period as input and returns a list of important historical events that took place during that time period. It uses the Wikipedia API to fetch data and a pre-trained NER model to identify events.\\\",\\n\\\"function_name\\\": \\\"extract_events\\\",\\n\\\"input_args\\\": [\\\"start_year\\\", \\\"end_year\\\"],\\n\\\"return\\\": \\\"A list of important historical events.\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n    \\\"web_apis\\\": [\\\"Wikipedia API\\\"],\\n    \\\"machine_learning_models\\\": [\\\"dbmdz/bert-large-cased-finetuned-conll03-english\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A loyal Yahoo Mail user since 1997.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Email Management Interface\\\",\\n    \\\"description\\\": \\\"An interface to fetch the number of unread emails in a Yahoo Mail account.\\\",\\n    \\\"function_name\\\": \\\"get_unread_emails\\\",\\n    \\\"input_args\\\": {\\n        \\\"email\\\": \\\"The user's Yahoo Mail email address.\\\",\\n        \\\"password\\\": \\\"The user's Yahoo Mail password.\\\"\\n    },\\n    \\\"return\\\": \\\"The number of unread emails in the user's Yahoo Mail account.\\\",\\n    \\\"depend\\\": \\\"Python library - IMAPClient\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casual Genshin Impact player who prefers to play the game for relaxation rather than competitiveness", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Genshin Impact Daily Task Reminder Interface\\\",\\n  \\\"description\\\": \\\"This interface returns a list of the user's daily tasks in Genshin Impact based on their region and UID. It simplifies the process of keeping track of daily tasks in the game.\\\",\\n  \\\"function_name\\\": \\\"get_daily_tasks\\\",\\n  \\\"input_args\\\": { \\n    \\\"region\\\": \\\"User's region in the game\\\",\\n    \\\"uid\\\": \\\"User's UID in the game\\\"\\n  },\\n  \\\"return\\\": \\\"A list of tasks that the user needs to complete in the game today\\\",\\n  \\\"depend\\\": \\\"Genshin Impact's database API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A clinical microbiologist who collaborates on research projects and shares expertise on laboratory techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genome Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates the GC content of a genome sequence. The user inputs the path to a genome sequence file (in FASTA format), and the interface returns the GC content of the sequence.\\\",\\n\\\"function_name\\\": \\\"calculate_gc_content\\\",\\n\\\"input_args\\\": {\\\"genome_path\\\": \\\"Path to the genome sequence file in FASTA format\\\"},\\n\\\"return\\\": \\\"GC content of the sequence (a floating-point number)\\\",\\n\\\"depend\\\": \\\"Biopython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Episcopal Bishop who strongly believes in the power of prayer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prayer Time Notification Interface\\\",\\n\\\"description\\\": \\\"An interface that notifies the user at specified daily prayer times.\\\",\\n\\\"function_name\\\": \\\"start\\\",\\n\\\"input_args\\\": [\\\"prayer_times - a list of strings representing the prayer times in 24-hour format\\\"],\\n\\\"return\\\": \\\"A reminder message on the console at each prayer time.\\\",\\n\\\"depend\\\": [\\\"Python's built-in datetime and time libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A senior tax officer in Sri Lanka's Revenue Department responsible for providing guidance and support to multinational corporations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Corporate Tax Calculation Interface\\\",\\n\\\"description\\\": \\\"A simple interface to automate the tax calculation process for multinational corporations operating in Sri Lanka.\\\",\\n\\\"function_name\\\": \\\"calculate_corporate_tax\\\",\\n\\\"input_args\\\": {\\\"income\\\": \\\"The total income of the corporation.\\\", \\\"tax_rate\\\": \\\"The tax rate applicable to the corporation.\\\"},\\n\\\"return\\\": \\\"The calculated tax amount.\\\",\\n\\\"depend\\\": \\\"Python's built-in mathematical operations\\\"\\n}\"", "description": "tool development"}
{"input persona": "An adolescent who has experienced negative consequences of peer-influenced gambling", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Gambler's Help Interface\\\",\\n  \\\"description\\\": \\\"This interface provides local resources available for people struggling with gambling addiction.\\\",\\n  \\\"function_name\\\": \\\"get_gambling_help_resources\\\",\\n  \\\"input_args\\\": \\\"country\\\",\\n  \\\"return\\\": \\\"A list of dictionaries. Each dictionary includes the 'name', 'description', and 'contact' of a resource.\\\",\\n  \\\"depend\\\": \\\"GambleAware API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A banker who provides advice and assistance in setting up the children's savings accounts", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Banking API Interface\\\",\\n  \\\"description\\\": \\\"Interface for setting up a child's savings account using a banking service provider's API. The function sends a POST request to the API with the required personal and financial information.\\\",\\n  \\\"function_name\\\": \\\"setup_child_savings_account\\\",\\n  \\\"input_args\\\": {\\n    \\\"parent_name\\\": \\\"Name of the parent\\\",\\n    \\\"parent_email\\\": \\\"Email of the parent\\\",\\n    \\\"child_name\\\": \\\"Name of the child\\\",\\n    \\\"child_dob\\\": \\\"Date of birth of the child\\\",\\n    \\\"initial_deposit\\\": \\\"Initial deposit amount\\\"\\n  },\\n  \\\"return\\\": \\\"A success or failure message indicating whether the account was created successfully\\\",\\n  \\\"depend\\\": \\\"Python requests library, Banking service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young athlete's parent who questions the excessive use of data in coaching decisions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Performance Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to predict a player's performance based on their physical stats, previous performances, and training regime.\\\",\\n\\\"function_name\\\": [\\\"load_data\\\", \\\"train_model\\\", \\\"predict_performance\\\"],\\n\\\"input_args\\\": {\\n\\\"load_data\\\": [\\\"file_path\\\"],\\n\\\"train_model\\\": [\\\"file_path\\\"],\\n\\\"predict_performance\\\": [\\\"model\\\", \\\"player_data\\\"]\\n},\\n\\\"return\\\": {\\n\\\"load_data\\\": \\\"DataFrame containing player data\\\",\\n\\\"train_model\\\": \\\"Trained RandomForestRegressor model\\\",\\n\\\"predict_performance\\\": \\\"Predicted performance score\\\"\\n},\\n\\\"depend\\\": \\\"Scikit-Learn, Pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "Фронтенд-разработчик, энтузиаст открытого исходного кода и активный участник хакатонов", "synthesized text": "\"{\\n\\\"name\\\": \\\"Website Speed Test Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to test the speed performance of their website. It uses the Google PageSpeed Insights API to get the performance score. The score is a number between 0 and 1, where 1 is the best possible score.\\\",\\n\\\"function_name\\\": \\\"test_website_speed\\\",\\n\\\"input_args\\\": \\\"url\\\",\\n\\\"return\\\": \\\"Performance score (number between 0 and 1)\\\",\\n\\\"depend\\\": \\\"Google PageSpeed Insights API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A government official attending an international conference on sustainable engineering, interested in the professor's innovative solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Summarization Interface\\\",\\n\\\"description\\\": \\\"An interface for summarizing lengthy documents such as research papers or conference proceedings using a BERT-based extractive summarizer.\\\",\\n\\\"function_name\\\": \\\"summarize_document\\\",\\n\\\"input_args\\\": \\\"path_to_document (A string representing the path to the document file)\\\",\\n\\\"return\\\": \\\"A string containing the summarization of the document\\\",\\n\\\"depend\\\": \\\"Uses the 'bert-extractive-summarizer' Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young aspiring actress who recently moved to LA and dreams of affording a home in the luxurious Bird Streets neighborhood.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Real Estate Price Prediction\\\",\\n  \\\"description\\\": \\\"Predicts the future price of a property based on its details like number of bedrooms, bathrooms, and finished square feet area.\\\",\\n  \\\"function_name\\\": \\\"predict_future_price\\\",\\n  \\\"input_args\\\": {\\n    \\\"address\\\": \\\"The address of the property in Los Angeles, CA.\\\"\\n  },\\n  \\\"return\\\": \\\"The predicted future price of the property.\\\",\\n  \\\"depend\\\": \\\"Zillow API, TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "a technician who specializes in repairing Brother printers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Printer Diagnosis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a Brother Printer Diagnostics API to provide users with information about a specific printer error, including its potential cause and suggested solutions.\\\",\\n\\\"function_name\\\": \\\"get_printer_error_solution\\\",\\n\\\"input_args\\\": {\\\"error_code\\\": \\\"The error code displayed on the Brother printer.\\\"},\\n\\\"return\\\": {\\\"cause\\\": \\\"The potential cause of the error.\\\", \\\"solution\\\": \\\"The suggested solution for the error.\\\"},\\n\\\"depend\\\": \\\"Brother Printer Diagnostics API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmacist who always pushes their family to use tried and true remedies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Interaction Checker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input a list of common drug names and it will return potential drug interactions.\\\",\\n\\\"function_name\\\": \\\"check_drug_interactions\\\",\\n\\\"input_args\\\": [\\\"drug_names\\\"],\\n\\\"return\\\": [\\\"A list of potential drug interactions.\\\"],\\n\\\"depend\\\": [\\\"RxNorm APIs\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An empathetic and detail-oriented individual who assists customers with inquiries and issues related to the financial products", "synthesized text": "\"{\\n\\\"name\\\": \\\"Credit Score Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a Random Forest Regressor model to predict a user's credit score based on their inputted personal and financial information.\\\",\\n\\\"function_name\\\": \\\"calculate_credit_score\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the individual.\\\",\\n    \\\"income\\\": \\\"The annual income of the individual.\\\",\\n    \\\"open_credit\\\": \\\"The number of open credit lines the individual has.\\\",\\n    \\\"derogatory_items\\\": \\\"The number of major derogatory items on the individual's credit report.\\\"\\n    },\\n\\\"return\\\": \\\"A credit score.\\\",\\n\\\"depend\\\": \\\"Scikit-Learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a seasoned cloud architect and an AWS Certified Solutions Architect with a deep knowledge of Infrastructure as Code (IaC) practices, particularly with Terraform.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Terraform Plan Visualizer Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Terraform and terraform-visual API to visualize the changes in a terraform plan. It receives a path to a terraform file and returns a URL containing a visualization of the plan.\\\",\\n\\\"function_name\\\": \\\"terraform_plan_visualizer\\\",\\n\\\"input_args\\\": \\\"tf_file_path\\\",\\n\\\"return\\\": \\\"A URL string to the visualized terraform plan\\\",\\n\\\"depend\\\": \\\"Python standard library (subprocess), requests library, Terraform, terraform-visual API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casual fan of Samantha Cook who discovers her remarkable sport achievements only through reading articles casually.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch sports statistics for a given athlete using sports data APIs.\\\",\\n\\\"function_name\\\": \\\"get_athlete_statistics\\\",\\n\\\"input_args\\\": \\\"athlete_name - The name of the athlete as a string.\\\",\\n\\\"return\\\": \\\"A dictionary of the athlete's sports statistics, including wins, losses, goals, assists, and matches played.\\\",\\n\\\"depend\\\": \\\"Python's requests library, sports data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A working professional interested in self-improvement and looking for recommendations on leadership books", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface provides book recommendations based on a given topic using the Google Books API.\\\",\\n\\\"function_name\\\": \\\"get_book_recommendations\\\",\\n\\\"input_args\\\": \\n{\\n    \\\"topic\\\": \\\"A keyword or phrase representing the topic for which the user wants book recommendations, e.g. 'leadership'.\\\",\\n    \\\"max_results\\\": \\\"An optional argument representing the maximum number of results to return. Defaults to 5.\\\"\\n},\\n\\\"return\\\": \\\"A list of book titles and their authors, e.g. ['Leaders Eat Last by Simon Sinek', 'Start with Why by Simon Sinek']\\\",\\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An education institution IT administrator seeking assistance from the developer to integrate CAS into their systems", "synthesized text": "\"{\\n  \\\"name\\\": \\\"CAS Integration Interface\\\",\\n  \\\"description\\\": \\\"An interface that encapsulates the Python CAS library to authenticate a user via a CAS server. Users only need to provide the CAS server URL, the service URL, and the user's credentials (username and password), and the interface will return a validation response indicating whether the authentication is successful or not.\\\",\\n  \\\"function_name\\\": \\\"authenticate_cas_user\\\",\\n  \\\"input_args\\\": {\\n    \\\"cas_server_url\\\": \\\"The URL of the CAS server\\\",\\n    \\\"service_url\\\": \\\"The URL of the service the user is trying to access\\\",\\n    \\\"username\\\": \\\"The username of the user\\\",\\n    \\\"password\\\": \\\"The password of the user\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"message\\\": \\\"The status of the authentication\\\",\\n    \\\"username\\\": \\\"The authenticated username (if successful)\\\",\\n    \\\"error\\\": \\\"Error message or validation response if authentication fails\\\"\\n  },\\n  \\\"depend\\\": \\\"Python CAS library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A microbiologist specializing in oral health and studying the microbial composition of dental plaque", "synthesized text": "\"{\\n\\\"name\\\": \\\"Microbial Composition Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes the microbial composition in a given sample using a pre-trained model from TensorFlow Hub. The user input is a path to a FASTQ file storing raw sequence data and corresponding quality scores. The output is a pandas DataFrame that shows the microbial composition including Bacteria, Archaea, Viruses, Fungi, and Protozoa.\\\",\\n\\\"function_name\\\": \\\"analyze_microbial_composition\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"pandas DataFrame\\\",\\n\\\"depend\\\": \\\"Python libraries: BioPython, pandas, tensorflow, tensorflow_hub; Machine learning model: a metagenomics model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a bass player in a rival metalcore band", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Song Feature Extraction Interface\\\",\\n  \\\"description\\\": \\\"This interface extracts various audio features such as tempo, beat frames, harmonic and percussive components, spectral contrast, tonnetz, and mel-frequency cepstral coefficients from a given song.\\\",\\n  \\\"function_name\\\": \\\"extract_song_features\\\",\\n  \\\"input_args\\\": [\\\"song_path\\\"],\\n  \\\"return\\\": \\\"A dictionary containing various audio features of the song.\\\",\\n  \\\"depend\\\": \\\"librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long-standing veteran in abstract painting, recognizable for their unique expressionist style", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Palette Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the dominant colors from an image (e.g., a painting).\\\",\\n\\\"function_name\\\": \\\"get_dominant_colors\\\",\\n\\\"input_args\\\": {\\\"image_path\\\": \\\"Path to the image file\\\", \\\"num_colors\\\": \\\"Number of dominant colors to extract\\\"},\\n\\\"return\\\": \\\"An array of RGB values representing the dominant colors\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "The novelist whose work serves as the source material for the film, seeking to protect the integrity of their story", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Similarity Interface\\\", \\n\\\"description\\\": \\\"This interface calculates the similarity between the original text from a novel and a film script. It helps to understand how closely the film script aligns with the original work.\\\", \\n\\\"function_name\\\": \\\"calculate_similarity\\\", \\n\\\"input_args\\\": [\\\"novel_text\\\", \\\"script_text\\\"], \\n\\\"return\\\": \\\"Similarity score between the texts ranging from -1 (dissimilar) to 1 (identical)\\\", \\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, numpy, Universal Sentence Encoder from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "An AI-powered investment research platform that provides real-time market data and predictive analytics", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Real-time Market Data and Predictive Analytics Interface\\\",\\n  \\\"description\\\": \\\"An interface to get real-time market data and make next trading day price predictions for a given stock.\\\",\\n  \\\"function_name\\\": \\\"make_prediction\\\",\\n  \\\"input_args\\\": [\\\"symbol\\\", \\\"model\\\"],\\n  \\\"return\\\": \\\"Predicted price for the next trading day for the given stock.\\\",\\n  \\\"depend\\\": \\\"Python libraries: requests, tensorflow, numpy, pandas, sklearn.preprocessing; Web APIs: Alpha Vantage; Machine learning models: LSTM model for time series forecasting.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced snowboarder who can guide the teenager through the basics and provide tips and tricks along the way", "synthesized text": "\"{\\n\\\"name\\\": \\\"Snowboarding Trick Suggestion Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to analyze a user's snowboarding performance from a video and suggests the next tricks that they should learn based on their skill level.\\\",\\n\\\"function_name\\\": \\\"get_trick_suggestion\\\",\\n\\\"input_args\\\": \\\"video_path - The path to the video file of the user's snowboarding performance.\\\",\\n\\\"return\\\": \\\"current_tricks - A list of tricks that the user is currently able to perform, next_tricks - A list of tricks that the user should learn next based on their skill level.\\\",\\n\\\"depend\\\": \\\"cv2 for video processing, joblib for loading the pre-trained model, and a pre-trained snowboarding trick suggestion model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful neurologist who credits their mentor's research on sleep for their career path", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sleep Stage Classification Interface\\\",\\n\\\"description\\\": \\\"An interface to classify sleep stages based on EEG signals using a pretrained model from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"classify_sleep_stage\\\",\\n\\\"input_args\\\": {\\\"path_to_data\\\": \\\"Path to the EEG data file (CSV format).\\\"},\\n\\\"return\\\": \\\"An array representing the classified sleep stages.\\\",\\n\\\"depend\\\": \\\"Python libraries: numpy, tensorflow, tensorflow_hub. Machine learning model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physical therapist specializing in hydrotherapy and rehabilitation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rehabilitation Exercise Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input a patient's condition and returns a list of recommended hydrotherapy exercises.\\\",\\n\\\"function_name\\\": \\\"recommend_exercises\\\",\\n\\\"input_args\\\": {\\n  \\\"patient_condition\\\": \\\"A list of features encoding the patient's condition.\\\",\\n  \\\"path_to_model\\\": \\\"The path to a trained model for human activity recognition.\\\",\\n  \\\"path_to_db\\\": \\\"The path to a database of hydrotherapy exercises.\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended hydrotherapy exercises.\\\",\\n\\\"depend\\\": \\\"This function depends on the sklearn and pandas Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A past McDonald's employee who worked the breakfast shift.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fast Food Menu Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a LightGBM model trained on a dataset of fast food menu items and customer satisfaction data to recommend menu items based on the user's dietary preferences.\\\",\\n\\\"function_name\\\": \\\"get_menu_recommendations\\\",\\n\\\"input_args\\\": \\\"dietary_pref\\\",\\n\\\"return\\\": \\\"A list of recommended menu items.\\\",\\n\\\"depend\\\": \\\"Python library: pandas, lightgbm; Machine learning model: fast_food_recommender.lgb\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local resident of Tayside, Scotland who is unhappy but also hopeful for changes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Air Quality Monitoring Interface\\\",\\n  \\\"description\\\": \\\"An interface to get real-time air quality information for a specific location. The information includes air quality index, a description of the air quality, and the dominant pollutant in the air.\\\",\\n  \\\"function_name\\\": \\\"get_air_quality\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"A tuple of latitude and longitude for the location where air quality information is to be retrieved.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"Air Quality Index\\\": \\\"Numeric value representing the air quality index at the given location.\\\",\\n    \\\"Air Quality Description\\\": \\\"A textual description of the overall air quality at the given location.\\\",\\n    \\\"Dominant Pollutant\\\": \\\"The primary pollutant contributing to the air quality index at the given location.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"Breezometer's Air Quality API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A Colombian technology and innovation enthusiast", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Facial Emotion Recognition Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from huggingface to detect human emotions based on facial expressions. The user only needs to input the path to an image file, and the interface will return the detected emotion.\\\",\\n  \\\"function_name\\\": \\\"detect_emotion\\\",\\n  \\\"input_args\\\": [\\\"image_path\\\"],\\n  \\\"return\\\": \\\"Detected emotion as a string\\\",\\n  \\\"depend\\\": [\\\"huggingface transformers library\\\", \\\"PIL library\\\", \\\"torch library\\\", \\\"microsoft/emotion-ferplus model from huggingface model hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A climate change denier who was influenced by the skeptic professor's arguments", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Climate Change Data Visualization Interface\\\",\\n  \\\"description\\\": \\\"A data visualization interface that displays changes in global temperature, sea level and CO2 levels over a specific year range input by the user.\\\",\\n  \\\"function_name\\\": \\\"get_climate_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"start_year\\\": \\\"The start year of the data range\\\",\\n    \\\"end_year\\\": \\\"The end year of the data range\\\"\\n  },\\n  \\\"return\\\": \\\"A plot showing the changes in global temperature, sea level and CO2 levels over the input year range.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas\\\", \\\"matplotlib\\\"],\\n    \\\"Web APIs\\\": [\\\"NASA's Global Climate Change API\\\"],\\n    \\\"machine learning models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A teenager struggling with body image issues due to the unrealistic portrayals in media", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Modification Detection Interface\\\",\\n\\\"description\\\": \\\"An interface to detect if an image has been digitally altered or modified. The user only needs to input the path to an image file, and the interface will return a boolean value indicating whether the image has been altered.\\\",\\n\\\"function_name\\\": \\\"detect_image_modification\\\",\\n\\\"input_args\\\": {\\\"path_to_img\\\": \\\"The path to the image file.\\\"},\\n\\\"return\\\": \\\"A boolean value indicating whether the image has been altered.\\\",\\n\\\"depend\\\": {\\\"tensorflow\\\": \\\"2.4\\\", \\\"tensorflow_hub\\\": \\\"0.11.0\\\"}\\n}\"", "description": "tool development"}
{"input persona": "a tourism manager in Liechtenstein", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hotel Availability and Pricing Interface\\\",\\n\\\"description\\\": \\\"This interface returns the available hotels with their rates in a given city between specified check-in and check-out dates.\\\",\\n\\\"function_name\\\": \\\"get_hotel_availability_and_price\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"check_in\\\", \\\"check_out\\\"],\\n\\\"return\\\": \\\"List of available hotels with their rates.\\\",\\n\\\"depend\\\": \\\"Amadeus Hotel Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An industrial plant manager seeking advice on optimizing machine performance and reducing energy consumption", "synthesized text": "\"{\\n\\\"name\\\": \\\"Machine Performance Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface takes a csv file path as input and uses a machine learning model to optimize the machine performance and reduce energy consumption. The csv file should contain historical data of the machine including its parameters, performance and energy consumption.\\\",\\n\\\"function_name\\\": \\\"optimize_machine_performance\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A dictionary with the optimal machine parameters for the highest performance and least energy consumption.\\\",\\n\\\"depend\\\": \\\"python libraries: pandas, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "a big fan of the show \"The Haves and the Have Nots\" who intentionally avoids spoilers", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Episode Summary Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and returns a non-spoiler summary of a specified TV show episode.\\\",\\n\\\"function_name\\\": \\\"get_episode_summary\\\",\\n\\\"input_args\\\": {\\n    \\\"tv_show\\\": \\\"Name of the TV show\\\",\\n    \\\"season\\\": \\\"Season number\\\",\\n    \\\"episode\\\": \\\"Episode number\\\"\\n},\\n\\\"return\\\": \\\"A string containing a non-spoiler summary of the specified episode.\\\",\\n\\\"depend\\\": \\\"requests, re libraries and TV Maze API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A competitive freediver striving to break records without the need for scuba gear", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dive Plan Interface\\\",\\n\\\"description\\\": \\\"Calculates the maximum dive time without the need for decompression stop based on the planned depth\\\",\\n\\\"function_name\\\": \\\"calculate_no_deco_limit\\\",\\n\\\"input_args\\\": \\\"depth - The planned dive depth in meters\\\",\\n\\\"return\\\": \\\"The maximum time in minutes that the diver can spend at the given depth without requiring decompression stops\\\",\\n\\\"depend\\\": \\\"Buhlmann ZH-L16 decompression model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A non-profit organization dedicated to preserving and promoting civil rights history through various projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Civil Rights Document Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from HuggingFace to extract entities from a text document related to civil rights history.\\\",\\n\\\"function_name\\\": \\\"extract_entities\\\",\\n\\\"input_args\\\": \\\"document_text - The text from a document.\\\",\\n\\\"return\\\": \\\"A dictionary with keys as 'persons', 'organizations', 'locations', and 'dates'. Each key contains a list of respective entities identified from the document.\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A colleague of Sarah Yuan, also a medical researcher at the University of South Florida, who admires her accomplishments and leadership in the field.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Genetic Variant Impact Prediction Interface\\\",\\n  \\\"description\\\": \\\"An interface that predicts the potential impact of genetic variants on protein function using a BERT-based pre-trained model.\\\",\\n  \\\"function_name\\\": \\\"predict_variant_impact\\\",\\n  \\\"input_args\\\": [\\\"sequence\\\", \\\"position\\\", \\\"variant\\\"],\\n  \\\"return\\\": {\\n    \\\"sequence\\\": \\\"string\\\",\\n    \\\"variant\\\": \\\"string\\\",\\n    \\\"position\\\": \\\"integer\\\",\\n    \\\"predicted_impact\\\": \\\"float\\\"\\n  },\\n  \\\"depend\\\": [\\\"huggingface: transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A resident of the Philippines who regularly mixes the 100 and 1000 peso banknotes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Recognition Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to recognize the denomination of Philippine Peso banknotes using a pre-trained image classification model.\\\",\\n\\\"function_name\\\": \\\"classify_banknote\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\"],\\n\\\"return\\\": \\\"The denomination of the banknote ('100' or '1000').\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Pre-trained image classification model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A community blogger passionate about local developments and investments in Fishers, Indiana", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Price Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts the price of a property based on various factors such as location, property type, and size using a pre-trained machine learning model from huggingface.\\\",\\n\\\"function_name\\\": \\\"predict_property_price\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"property_type\\\", \\\"size\\\"],\\n\\\"return\\\": \\\"Estimated price of the property\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A military blogger with insider knowledge about the lieutenant's past missions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mission Details Extraction Interface\\\",\\n\\\"description\\\": \\\"Extracts specific details related to the lieutenant's past missions from a given text. These details include locations, dates, and mission names.\\\",\\n\\\"function_name\\\": \\\"extract_mission_details\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": [\\\"List of dictionaries. Each dictionary represents an entity and contains the entity, its value and starting and ending indices in the text.\\\"],\\n\\\"depend\\\": [\\\"Hugging Face: transformers library for Named Entity Recognition\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A driven RF engineer who designs and optimizes cellular networks and thrives on delivering innovative solutions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Cellular Network Coverage Prediction Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to predict the network coverage based on parameters like distance from the cell, cell power, and cell height.\\\",\\n  \\\"function_name\\\": \\\"predict_coverage\\\",\\n  \\\"input_args\\\": [\\\"distance_from_cell\\\", \\\"cell_power\\\", \\\"cell_height\\\"],\\n  \\\"return\\\": \\\"Predicted network coverage\\\",\\n  \\\"depend\\\": \\\"Scikit-learn library, RandomForestRegressor model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a long-time speedrunner and a big fan of \"GoldenEye 007\"", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speedrun Time Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface for comparing a user's speedrun time for a specific level in 'GoldenEye 007' with the world record. The user inputs their time and the level, and the interface returns a message comparing the two times.\\\",\\n\\\"function_name\\\": \\\"compare_speedrun_time\\\",\\n\\\"input_args\\\": {\\\"user_time\\\": \\\"string\\\", \\\"level\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"requests\\\"], \\\"web_APIs\\\": [\\\"speedrun.com API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A native gray wolf that shares the snow leopard's territory and competes for similar prey", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Wildlife Habitat Overlap Analysis Interface\\\",\\n  \\\"description\\\": \\\"Fetches occurrence data for two species and plots their overlapping regions to indicate shared habitats.\\\",\\n  \\\"function_name\\\": \\\"plot_species_overlap\\\",\\n  \\\"input_args\\\": [\\\"species_1\\\", \\\"species_2\\\"],\\n  \\\"return\\\": \\\"A visual map showing overlapping regions of species sightings.\\\",\\n  \\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\", \\\"geopandas\\\", \\\"matplotlib\\\"], \\\"Web APIs\\\": [\\\"Global Biodiversity Information Facility API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A government organization looking to enhance security measures with biometric authentication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Verification Interface\\\",\\n\\\"description\\\": \\\"This interface uses the face_recognition library to verify whether the given face matches with the known faces or not.\\\",\\n\\\"function_name\\\": \\\"face_verification\\\",\\n\\\"input_args\\\": {\\n    \\\"known_face_file\\\": \\\"Path to the image file containing the known face(s)\\\",\\n    \\\"unknown_face_file\\\": \\\"Path to the image file containing the face to verify\\\"\\n},\\n\\\"return\\\": \\\"Returns a boolean value indicating if the face was recognized or not.\\\",\\n\\\"depend\\\": \\\"This function depends on the face_recognition Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young mother who received compassionate care from the midwife during her pregnancy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pregnancy Care Advice Interface\\\",\\n\\\"description\\\": \\\"This interface provides pregnancy care advice based on the user's symptoms or concerns. It leverages a machine learning model trained on medical advice related to pregnancy.\\\",\\n\\\"function_name\\\": \\\"pregnancy_care_advice\\\",\\n\\\"input_args\\\": \\\"user_query\\\",\\n\\\"return\\\": \\\"Advice based on the user's symptoms or concerns.\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library, PyTorch, and a trained model on pregnancy-related medical advice\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mortgage broker who assists clients in securing loans for properties in the 16611 ZIP code", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mortgage Interest Rate Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts a mortgage interest rate given the credit score, loan amount, down payment, and loan term. It leverages a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_interest_rate\\\",\\n\\\"input_args\\\": [\\\"credit_score\\\", \\\"loan_amount\\\", \\\"down_payment\\\", \\\"loan_term\\\"],\\n\\\"return\\\": \\\"The predicted mortgage interest rate as a float.\\\",\\n\\\"depend\\\": \\\"scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A monument engraver who creates beautiful and personalized grave markers for the departed", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text to Image Interface\\\",\\n\\\"description\\\": \\\"Generates an image from a text description using OpenAI's DALL-E.\\\",\\n\\\"function_name\\\": \\\"text_to_image\\\",\\n\\\"input_args\\\": \\\"text_description - A string describing the image to be generated.\\\",\\n\\\"return\\\": \\\"An image generated from the given text description.\\\",\\n\\\"depend\\\": \\\"OpenAI's DALL-E, PyTorch, torchvision, Pillow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A multinational corporation seeking to increase customer engagement and brand loyalty through targeted marketing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Customer Segmentation Interface\\\", \\n\\\"description\\\": \\\"This interface uses the KMeans clustering algorithm to create customer segments based on their purchasing behavior and demographics.\\\", \\n\\\"function_name\\\": \\\"customer_segmentation\\\", \\n\\\"input_args\\\": {\\\"file_path\\\": \\\"string, path to the CSV file with customer data\\\", \\\"n_clusters\\\": \\\"int, the desired number of customer segments\\\"}, \\n\\\"return\\\": \\\"a dataframe with an additional column representing the customer segment each customer belongs to\\\", \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"scikit-learn\\\"], \\\"machine learning models\\\": [\\\"KMeans clustering algorithm\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A socialite who hosts fundraising events and introduces the preacher to influential people in society", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Attendee Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the list of people attending a Facebook event and their professional details from LinkedIn. Users need to provide the Facebook event ID and their LinkedIn API token, and the interface will return a list of influential people attending the event with their professional details.\\\",\\n\\\"function_name\\\": \\\"analyze_event_attendees\\\",\\n\\\"input_args\\\": [\\\"event_id\\\", \\\"fb_access_token\\\", \\\"ln_access_token\\\"],\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary represents an attendee and contains their name, job title, company, and location.\\\",\\n\\\"depend\\\": \\\"Facebook's Graph API, LinkedIn's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A community leader in Virginia Beach who advocates for road safety", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traffic Accident Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface queries the Fatality Analysis Reporting System (FARS) API to return the total number of fatal crashes for a specific year in a specific state.\\\",\\n\\\"function_name\\\": \\\"get_fatal_crashes\\\",\\n\\\"input_args\\\": [\\\"year\\\", \\\"state\\\"],\\n\\\"return\\\": \\\"Total number of fatal crashes in the specified year and state.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Fatality Analysis Reporting System (FARS) API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A foreign ambassador in need of expert event planning for important political gatherings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Expert Event Planning Interface\\\",\\n\\\"description\\\": \\\"This interface uses the FourSquare API to find suitable venues and catering services based on the location and requirements. It also uses the OpenAI GPT-3 model to generate a detailed event planning guide based on the input requirements.\\\",\\n\\\"function_name\\\": \\\"plan_event\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"requirements\\\"],\\n\\\"return\\\": \\\"A dictionary with possible venues, catering services and a detailed event planning guide\\\",\\n\\\"depend\\\": \\\"FourSquare API, OpenAI GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A startup founder developing quantum computing hardware for commercial use", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum Circuit Simulator Interface\\\", \\n\\\"description\\\": \\\"This interface uses Qiskit to simulate a quantum circuit based on user input, and returns the final quantum state.\\\", \\n\\\"function_name\\\": \\\"simulate_quantum_circuit\\\", \\n\\\"input_args\\\": [\\\"num_qubits\\\", \\\"gates\\\"], \\n\\\"return\\\": \\\"Final quantum state visualization as a Bloch multivector.\\\", \\n\\\"depend\\\": \\\"Qiskit\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diehard fan of Amanda Fuller who loves trivia and fun facts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Trivia Interface\\\",\\n\\\"description\\\": \\\"Fetch trivia and fun facts about an actor's movies using the IMDb API\\\",\\n\\\"function_name\\\": \\\"get_actor_movie_trivia\\\",\\n\\\"input_args\\\": \\\"actor_name\\\",\\n\\\"return\\\": \\\"trivia\\\",\\n\\\"depend\\\": \\\"imdb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An underground activist who is fighting from within the regime and constantly in the danger zone", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Secure Text Messaging Interface\\\",\\n  \\\"description\\\": \\\"Encrypts a message using symmetric encryption to ensure secure communication.\\\",\\n  \\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_message\\\", \\\"decrypt_message\\\"],\\n  \\\"input_args\\\": [\\\"message\\\", \\\"key\\\"],\\n  \\\"return\\\": \\\"encrypted message/decrypted message\\\",\\n  \\\"depend\\\": \\\"cryptography library in Python\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Palestinian small business owner living in Ramallah", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get the current exchange rate from one currency to another. It uses the Open Exchange Rates API.\\\",\\n\\\"function_name\\\": \\\"get_exchange_rate\\\",\\n\\\"input_args\\\": [\\\"base_currency\\\", \\\"target_currency\\\"],\\n\\\"return\\\": \\\"A float number representing the current exchange rate from the base currency to the target currency.\\\",\\n\\\"depend\\\": \\\"requests library, Open Exchange Rates API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly grandparent who has little understanding of modern superhero films but appreciates the empowerment of women in media.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Superhero Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in user preferences and returns recommendations for superhero movies with strong female leads.\\\",\\n\\\"function_name\\\": \\\"recommend_superhero_movies\\\",\\n\\\"input_args\\\": \\\"None\\\",\\n\\\"return\\\": \\\"List of recommended movie titles\\\",\\n\\\"depend\\\": \\\"Python libraries: torch, transformers, requests, HuggingFace model: 'bert-base-uncased', Web API: 'The Movie Database (TMDB) API'\\\"\\n}\"", "description": "tool development"}
{"input persona": "The nation's finance minister, deeply concerned with the overall economic stability and growth", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Indicator Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves economic indicators such as GDP, inflation rate, unemployment rate etc for a given country. It helps finance ministers or other stakeholders to make informed decisions.\\\",\\n\\\"function_name\\\": \\\"get_economic_indicators\\\",\\n\\\"input_args\\\": \\\"country - A string that represents the name of the country\\\",\\n\\\"return\\\": \\\"A dictionary containing the economic indicators for the specified country\\\",\\n\\\"depend\\\": \\\"This function depends on the requests library for making HTTP requests and the Alpha Vantage API for fetching the economic data\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Gaudiya Vaishnava follower who prioritizes unity and respects traditional teachings.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Mantras Chanting Count Tracker Interface\\\",\\n  \\\"description\\\": \\\"This interface allows a user to track the count of their mantra chanting, and sends a message when the user has reached their chanting goal.\\\",\\n  \\\"function_name\\\": \\\"chant\\\",\\n  \\\"input_args\\\": {\\n    \\\"mantra\\\": \\\"A string representing the mantra to be chanted.\\\",\\n    \\\"goal\\\": \\\"An integer representing the goal number of times the user wants to chant the mantra.\\\"\\n  },\\n  \\\"return\\\": \\\"A string message that updates the user on their mantra chanting count, and sends a congratulatory message when the goal is reached.\\\",\\n  \\\"depend\\\": \\\"Python built-in libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A geologist who collaborates closely with the engineer to interpret geological data", "synthesized text": "\"{\\n\\\"name\\\": \\\"Seismic Data Interpretation Interface\\\",\\n\\\"description\\\": \\\"This interface interprets seismic data by performing a basic instrument correction and detecting events using a simple STA/LTA trigger. The processed data and detected events are plotted for visual interpretation.\\\",\\n\\\"function_name\\\": \\\"process_seismic_data\\\",\\n\\\"input_args\\\": \\\"path_to_data: The path to the seismic data file (in a standard format like .SAC)\\\",\\n\\\"return\\\": \\\"A list of the detected seismic events.\\\",\\n\\\"depend\\\": \\\"ObsPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a 45-year-old Hungarian Professor specialized in the Anthropology of Science, who is also fond of open-source initiatives and a volunteer Wikipedia editor since 2012", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wikipedia Article Summary Interface\\\",\\n\\\"description\\\": \\\"This interface takes a Wikipedia article title as input and returns a summary of the article.\\\",\\n\\\"function_name\\\": \\\"get_wikipedia_article_summary\\\",\\n\\\"input_args\\\": \\\"title\\\",\\n\\\"return\\\": \\\"A string which is a summary of the Wikipedia article.\\\",\\n\\\"depend\\\": \\\"Python's Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned ecologist who argues that resources should be concentrated on broader ecosystems rather than individual species", "synthesized text": "\"{\\n\\\"name\\\": \\\"Species Distribution Modeling Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the potential distribution of a species based on environmental conditions and occurrence records. Utilizes Biome dataset from WorldClim and a machine learning model from scikit-learn.\\\",\\n\\\"function_name\\\": \\\"create_species_distribution_model\\\",\\n\\\"input_args\\\": [\\\"species_occurrences\\\", \\\"species_name\\\"],\\n\\\"return\\\": \\\"A dictionary containing the trained Random Forest model ('model') and its accuracy on the test set ('accuracy')\\\",\\n\\\"depend\\\": {\\\"data\\\": \\\"WorldClim Biome Data\\\", \\\"python libraries\\\": [\\\"numpy\\\", \\\"scikit-learn\\\", \\\"rasterio\\\", \\\"osgeo\\\", \\\"geopandas\\\", \\\"rasterstats\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A senior scientist at a pharmaceutical company who has successfully developed marine-derived drugs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drugs Similarity Search Interface\\\",\\n\\\"description\\\": \\\"This interface takes the SMILES string of a compound and returns a list of similar compounds from a given database.\\\",\\n\\\"function_name\\\": \\\"find_similar_drugs\\\",\\n\\\"input_args\\\": {\\\"input_smiles\\\": \\\"The SMILES string of the input compound\\\", \\\"database_smiles\\\": \\\"A list of SMILES strings to search for similar compounds\\\", \\\"threshold\\\": \\\"The minimum similarity score to consider a compound as similar (default is 0.8)\\\"},\\n\\\"return\\\": \\\"A list of SMILES strings of similar compounds\\\",\\n\\\"depend\\\": \\\"RDKit\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bioinformatics technologist who develops computational models of neural networks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genome Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a DNA sequence file in FASTA format as input and returns a dictionary with the count of Adenine (A), Thymine (T), Guanine (G), and Cytosine (C) in the DNA sequence.\\\",\\n\\\"function_name\\\": \\\"count_nucleotides_in_dna_sequence\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"{'A': a_count, 'T': t_count, 'G': g_count, 'C': c_count}\\\",\\n\\\"depend\\\": [\\\"BioPython library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A high school junior preparing to participate in the National Geographic GeoBee", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geography Question Generator Interface\\\",\\n\\\"description\\\": \\\"Generates geography-related questions for GeoBee practice using the GeoNames geographical database.\\\",\\n\\\"function_name\\\": \\\"generate_geography_question\\\",\\n\\\"input_args\\\": \\\"difficulty\\\",\\n\\\"return\\\": \\\"A tuple containing a question and its corresponding answer.\\\",\\n\\\"depend\\\": \\\"GeoNames Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An insurance business professional, with a particular interest in reinsurance in the African continent.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Insurance Premium Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Pricing Engine from the Risk Data Open Platform (RDOP) API to calculate insurance premiums based on the type of insurance, risk factors, and geographic location.\\\",\\n\\\"function_name\\\": \\\"calculate_insurance_premium\\\",\\n\\\"input_args\\\": {\\n    \\\"insurance_type\\\": \\\"The type of insurance (e.g., reinsurance)\\\",\\n    \\\"risk_factors\\\": \\\"Risk factors as a dictionary (e.g., {'age': 30, 'health_condition': 'good'})\\\",\\n    \\\"location\\\": \\\"Geographic location (e.g., 'Kenya')\\\"\\n},\\n\\\"return\\\": \\\"The calculated insurance premium as a float or an error message as a string.\\\",\\n\\\"depend\\\": \\\"This function leverages the Risk Data Open Platform (RDOP) API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former member of the 2013 Texas Longhorns baseball team, now a professional baseball player.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baseball Player Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Sportsradar API to fetch the career statistics of a given baseball player.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": [\\\"player_name\\\"],\\n\\\"return\\\": \\\"A dictionary containing the player's career stats or an error message if the player does not exist or there is a problem with the request.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Sportsradar API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A man from Portland who was thinking about opening a pub.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Beer Brand Name Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates creative beer brand names given a type of beer. It uses a machine learning model from Hugging Face to generate the names.\\\",\\n\\\"function_name\\\": \\\"generate_beer_names\\\",\\n\\\"input_args\\\": [\\\"beer_type\\\", \\\"num_names\\\"],\\n\\\"return\\\": \\\"A list of creative beer brand names\\\",\\n\\\"depend\\\": \\\"Hugging Face's GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local historian and amateur botanist interested in historical railways and native plant species", "synthesized text": "\"{\\n\\\"name\\\": \\\"Railway Station Plant Species Finder Interface\\\",\\n\\\"description\\\": \\\"This interface utilizes the Wikipedia API to search for information on the local flora around historical railway stations.\\\",\\n\\\"function_name\\\": \\\"get_local_flora\\\",\\n\\\"input_args\\\": \\\"station_name - A string that represents the name of the historical railway station.\\\",\\n\\\"return\\\": \\\"A list of strings representing the native plant species in the surrounding area, or a message indicating that no information is available.\\\",\\n\\\"depend\\\": \\\"This function depends on the requests library to make HTTP requests and the re library to parse the content of the Wikipedia page.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A scandalized 17th-century French noblewoman", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"An interface to convert text to speech in a specified accent using Google's Text-to-Speech API. The user inputs a string of text and the desired accent, and the function returns a .mp3 file where the text is spoken in the chosen accent.\\\",\\n\\\"function_name\\\": \\\"generate_speech\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"string\\\", \\\"accent\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"audio file (mp3)\\\",\\n\\\"depend\\\": \\\"gtts library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Zen master who finds tranquility in the clean lines and meticulous care of luxury automobiles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Auto Detailing Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface that estimates the cost of detailing for a particular car model based on the make, model, and year of the car, as well as the user's location.\\\",\\n\\\"function_name\\\": \\\"get_cost_estimation\\\",\\n\\\"input_args\\\": [\\\"make\\\", \\\"model\\\", \\\"year\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"An estimated cost for auto detailing\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"Edmunds API\\\", \\\"Universal Sentence Encoder\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A 3D modeler who specializes in architectural design using SketchUp", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Validator Interface\\\",\\n\\\"description\\\": \\\"This interface validates the 3D model created by the user by using SketchUp's Ruby API. It returns whether the file is valid or not and any errors if there are any.\\\",\\n\\\"function_name\\\": \\\"validate_sketchup_model\\\",\\n\\\"input_args\\\": \\\"filepath - The path to the SketchUp file\\\",\\n\\\"return\\\": \\\"A tuple of two elements. The first element is a boolean indicating the validity of the file. The second element is a string containing errors if there are any.\\\",\\n\\\"depend\\\": \\\"SketchUp's Ruby API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An executive assistant who supports the mathematician in managing departmental affairs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mathematical Equation Solver Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a mathematical equation as input and returns its solution. The interface uses SymPy, a Python library for symbolic mathematics.\\\",\\n\\\"function_name\\\": \\\"solve_equation\\\",\\n\\\"input_args\\\": {\\\"equation_string\\\": \\\"A string that represents a mathematical equation.\\\"},\\n\\\"return\\\": \\\"The function will return the solution to the input equation.\\\",\\n\\\"depend\\\": \\\"Python library: SymPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local resident in Purworejo, Central Java", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-Time Air Quality Index Interface\\\",\\n\\\"description\\\": \\\"This interface returns the real-time Air Quality Index (AQI) of a specified location.\\\",\\n\\\"function_name\\\": \\\"get_real_time_AQI\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"AQI\\\": \\\"integer\\\"},\\n\\\"depend\\\": {\\\"Web API\\\": \\\"World Air Quality Index API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A mystery writer intrigued by the subtle differences in privacy laws across various jurisdictions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Privacy Law Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface takes two jurisdictions as input and returns a comparison of privacy laws between these two jurisdictions.\\\",\\n\\\"function_name\\\": \\\"compare_privacy_laws\\\",\\n\\\"input_args\\\": {\\\"jurisdiction1\\\": \\\"string\\\", \\\"jurisdiction2\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"jurisdiction1\\\": \\\"string (privacy laws)\\\", \\\"jurisdiction2\\\": \\\"string (privacy laws)\\\"},\\n\\\"depend\\\": \\\"Global Data Protection Laws and Regulations API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a marine biologist who is fascinated by bryozoans, also known as moss animals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bryozoan Species Information Interface\\\",\\n\\\"description\\\": \\\"Fetches a wealth of information about a given species of bryozoans (moss animals) using the Encyclopedia of Life (EOL) API. The provided information includes images, videos, maps, IUCN conservation status, common names, synonyms, and references.\\\",\\n\\\"function_name\\\": \\\"get_bryozoan_info\\\",\\n\\\"input_args\\\": \\\"species_name - The common or scientific name of a bryozoan species\\\",\\n\\\"return\\\": \\\"A dictionary containing detailed information about the specified bryozoan species\\\",\\n\\\"depend\\\": \\\"Python's requests library, Encyclopedia of Life (EOL) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school junior aiming for a scholarship in engineering and needing extra help in calculus", "synthesized text": "\"{\\n\\\"name\\\": \\\"Calculus Problem Solver Interface\\\",\\n\\\"description\\\": \\\"This interface solves calculus differentiation problems. It takes a mathematical expression, a variable to differentiate with respect to, and the order of differentiation as inputs, and returns the differential of the given expression.\\\",\\n\\\"function_name\\\": \\\"solve_calculus_problem\\\",\\n\\\"input_args\\\": [\\\"expression\\\", \\\"variable_to_diff\\\", \\\"order_of_diff\\\"],\\n\\\"return\\\": \\\"The differential of the given expression\\\",\\n\\\"depend\\\": \\\"SymPy Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who acknowledges the hacker's skills but tries to persuade them to use their talents for constructive purposes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Password Strength Checker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check the strength of their passwords, providing a score from 0 (very weak) to 4 (very strong) and giving suggestions to improve it.\\\",\\n\\\"function_name\\\": \\\"check_password_strength\\\",\\n\\\"input_args\\\": \\\"password - the password that needs to be checked\\\",\\n\\\"return\\\": \\\"A dictionary containing the score of the password's strength and suggestions to improve it\\\",\\n\\\"depend\\\": \\\"zxcvbn Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A grandmother who was a nurse during World War II and shares her own experiences", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voice to Text Transcription Interface\\\",\\n\\\"description\\\": \\\"Transcribe spoken language into written text from an audio file\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio - Path to the audio file\\\",\\n\\\"return\\\": \\\"Transcribed text from the audio file\\\",\\n\\\"depend\\\": \\\"SpeechRecognition library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a South African student athlete who participates in University Sports South Africa (USSA) events.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Athlete Performance Prediction\\\",\\n\\\"description\\\": \\\"Predict the future performance of an athlete based on their historical performance data\\\",\\n\\\"function_name\\\": \\\"predict_performance\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A tuple (y_pred, rmse), where y_pred is a list of predicted performance and rmse is the root mean square error of the model\\\",\\n\\\"depend\\\": \\\"pandas, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned poet whose evocative verses have greatly influenced the filmmaker's storytelling style", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"Converts input text to spoken words and saves the output as an MP3 file.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"The text to be converted to speech.\\\",\\n    \\\"output_filename\\\": \\\"The name of the output MP3 file.\\\"\\n},\\n\\\"return\\\": \\\"The name of the output MP3 file.\\\",\\n\\\"depend\\\": \\\"Google's Text-to-Speech API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful event planner tied in the city due to professional commitments but aspires to settle in the countryside", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface to compare the current weather of two cities using OpenWeatherMap API.\\\",\\n\\\"function_name\\\": \\\"compare_weather\\\",\\n\\\"input_args\\\": [\\\"city1\\\", \\\"city2\\\", \\\"api_key\\\"],\\n\\\"return\\\": \\\"A dictionary with weather comparison of two cities.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"OpenWeatherMap API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young activist inspired by the analyst's alternative perspectives on fiscal policies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fiscal Policy Impact Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to input a particular fiscal policy change, and it will return an analysis of the potential impact of this policy change on the economy.\\\",\\n\\\"function_name\\\": \\\"analyze_fiscal_policy_change\\\",\\n\\\"input_args\\\": \\\"policy_change - a string describing a fiscal policy change\\\",\\n\\\"return\\\": \\\"A string describing the potential impact of the policy change on the economy.\\\",\\n\\\"depend\\\": \\\"World Bank APIs, Eurostat APIs, Python libraries: requests, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business major struggling to pass the mandatory mathematics courses required for their degree", "synthesized text": "\"{\\n\\\"name\\\": \\\"Math Problem Solver Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Wolfram Alpha API to solve math problems with step-by-step solutions.\\\",\\n\\\"function_name\\\": \\\"solve_math_problem\\\",\\n\\\"input_args\\\": [\\\"app_id\\\", \\\"problem\\\"],\\n\\\"return\\\": \\\"A string that consists of the step-by-step solution to the input math problem.\\\",\\n\\\"depend\\\": \\\"Wolfram Alpha API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A competitive esports player who relies on the audio cues for quick and accurate decision-making", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Normalization Interface\\\",\\n\\\"description\\\": \\\"This interface takes an audio file, normalizes its volume to a target amplitude, and exports the normalized audio to a new file.\\\",\\n\\\"function_name\\\": \\\"normalize_audio\\\",\\n\\\"input_args\\\": [\\\"input_audio_file\\\", \\\"output_audio_file\\\"],\\n\\\"return\\\": \\\"The path to the output audio file which has been volume-normalized.\\\",\\n\\\"depend\\\": \\\"PyDub (Python library)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sound engineer who specializes in synthesizing and manipulating audio waves", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Waveform Synthesis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to generate and manipulate audio waveforms.\\\",\\n\\\"function_name\\\": \\\"generate_audio_wave\\\",\\n\\\"input_args\\\": [\\\"frequency\\\", \\\"duration\\\", \\\"amplitude\\\", \\\"filename\\\"],\\n\\\"return\\\": \\\"The path to the generated .wav file.\\\",\\n\\\"depend\\\": [\\\"NumPy\\\", \\\"PyDub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A veterinarian who provides medical care to the cattle on the farmer's farm", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disease Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the disease of cattle based on the symptoms described by the user. Returns the predicted disease.\\\",\\n\\\"function_name\\\": \\\"predict_disease\\\",\\n\\\"input_args\\\": [\\\"symptoms\\\"],\\n\\\"return\\\": \\\"Disease prediction\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformer library and a pre-trained text classification model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a immigration consultant who is very familiar with California and often recommends it to clients.", "synthesized text": "\"{\\n\\\"name\\\": \\\"California Living Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface provides an estimated monthly cost of living in a given city in California. The estimate includes costs of living, average salaries, and median housing prices.\\\",\\n\\\"function_name\\\": \\\"get_cost_of_living\\\",\\n\\\"input_args\\\": \\\"city\\\",\\n\\\"return\\\": \\\"Estimated monthly cost of living in the given city\\\",\\n\\\"depend\\\": \\\"Numbeo API, Indeed API, Zillow API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired cruiser who spent several vacations aboard the M/S Megastar Aries", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Cruise Route History Interface\\\",\\n  \\\"function_name\\\": \\\"get_ship_voyage_history\\\",\\n  \\\"description\\\": \\\"Fetch the past voyage details of a specific ship including the ports of call and dates.\\\",\\n  \\\"input_args\\\": \\\"ship_name - The name of the ship to search for\\\",\\n  \\\"return\\\": \\\"A list of dictionaries. Each dictionary represents a stop along the ship's route, including the date of the stop, the name of the port, and the country where the port is located.\\\",\\n  \\\"depend\\\": \\\"Marine Vessel Traffic API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Bangkok resident who has never visited northeastern Thailand (Isan)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Isan Food Recipe Interface\\\",\\n\\\"description\\\": \\\"This interface brings the recipe of a specified Isan dish from TheMealDB API. It takes the dish name as input and returns the recipe including name, category, area, cooking instructions and ingredients with their measures.\\\",\\n\\\"function_name\\\": \\\"get_isan_recipe\\\",\\n\\\"input_args\\\": {\\\"dish_name\\\": \\\"Type: String - Name of the Isan dish you want to cook.\\\"},\\n\\\"return\\\": {\\n    \\\"Type\\\": \\\"Dict\\\",\\n    \\\"Description\\\": \\\"Complete recipe of the provided dish including name, category, area, cooking instructions and ingredients with their measures.\\\"\\n},\\n\\\"depend\\\": {\\\"API\\\": \\\"TheMealDB API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A computer scientist involved in the creation of the first Internet routers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Network Traffic Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a pcap file as input and returns a summary of the network traffic including source and destination IPs, port numbers, and protocol used.\\\",\\n\\\"function_name\\\": \\\"analyze_network_traffic\\\",\\n\\\"input_args\\\": \\\"pcap_file - a string representing the path to a pcap file\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains details about a network packet including source IP, destination IP, source port, destination port, and protocol.\\\",\\n\\\"depend\\\": \\\"Python library - Scapy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst who conducts quantitative studies to evaluate the effectiveness of different teaching methods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a csv file path as input that contains student data, including their scores and the teaching method used. The function then returns a summary of the performance for each teaching method.\\\",\\n\\\"function_name\\\": \\\"analyze_teaching_effectiveness\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"target\\\", \\\"teaching_method\\\"],\\n\\\"return\\\": \\\"Mean Absolute Error for the provided teaching_method\\\",\\n\\\"depend\\\": \\\"pandas, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "a bald American City resident who is desperately looking for an effective hair transplant solution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hair Transplant Clinic Search Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to find nearby hair transplant clinics based on their current location. The user needs to provide their current location as input, and the interface will return a list of nearby hair transplant clinics.\\\",\\n\\\"function_name\\\": \\\"get_nearby_hair_transplant_clinics\\\",\\n\\\"input_args\\\": \\\"location - a string representing the user's current location in the format 'latitude,longitude'\\\",\\n\\\"return\\\": \\\"A list of strings, each string representing the name of a nearby hair transplant clinic.\\\",\\n\\\"depend\\\": \\\"Python's requests library, Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a casual Greta Van Fleet fan who enjoys playing guitar", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Chord Generation Interface\\\",\\n  \\\"description\\\": \\\"Generate guitar chords for a given song and artist.\\\",\\n  \\\"function_name\\\": \\\"get_song_chords\\\",\\n  \\\"input_args\\\": {\\n    \\\"artist\\\": \\\"Name of the artist\\\",\\n    \\\"song_name\\\": \\\"Name of the song\\\"\\n  },\\n  \\\"return\\\": \\\"String with the guitar chords of the song.\\\",\\n  \\\"depend\\\": [\\\"Python BeautifulSoup library\\\", \\\"Web API: Ultimate Guitar\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A small-scale clothing retailer based in New York City", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inventory Management Interface\\\",\\n\\\"description\\\": \\\"This interface allows small-scale retailers to update their inventory count. It uses the pandas library to read and update the inventory data in a CSV file.\\\",\\n\\\"function_name\\\": \\\"update_inventory\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"item_name\\\", \\\"new_count\\\"],\\n\\\"return\\\": \\\"Updated inventory data as a pandas DataFrame.\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "The owner of a coffee shop near the train station, who always serves a warm cup of coffee to start the day", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coffee Preference Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the coffee preference of a customer based on their demographic and other details using a pre-trained machine learning model from Hugging Face's Model Hub.\\\",\\n\\\"function_name\\\": \\\"predict_coffee_preference\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"gender\\\", \\\"time_of_day\\\", \\\"previous_orders\\\"],\\n\\\"return\\\": \\\"Predicted coffee preference ('Espresso' or 'Latte')\\\",\\n\\\"depend\\\": \\\"Hugging Face's Model Hub, transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A marketing specialist working to convince consumers of the benefits of solar energy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Energy Savings Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the potential savings by switching to solar energy based on the user's monthly electricity bill and location.\\\",\\n\\\"function_name\\\": \\\"calculate_solar_savings\\\",\\n\\\"input_args\\\": {\\n    \\\"monthly_electricity_bill\\\": \\\"The user's average monthly electricity bill in USD.\\\",\\n    \\\"location\\\": \\\"The user's location.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"annual_solar_savings\\\": \\\"The potential annual savings in USD by switching to solar energy.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"geopy\\\"],\\n    \\\"web APIs\\\": [\\\"OpenAI API\\\", \\\"Solar Energy Technologies Office (SETO) API\\\", \\\"Local government data API\\\"],\\n    \\\"machine learning models\\\": []\\n}\\n}\"", "description": "tool development"}
{"input persona": "a senior citizen from Tanauan, Batangas, who grew up listening to heroic tales from World War II", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Book Conversion Interface\\\",\\n\\\"description\\\": \\\"Converts a text file into an audio file using text-to-speech technology. Useful for visually impaired people or those who prefer listening over reading.\\\",\\n\\\"function_name\\\": \\\"text_to_audio\\\",\\n\\\"input_args\\\": {\\n    \\\"text_file\\\": \\\"Path to the input text file\\\",\\n    \\\"audio_file\\\": \\\"Path and name of the output audio file\\\"\\n},\\n\\\"return\\\": \\\"A message indicating that the audio file has been saved and its location\\\",\\n\\\"depend\\\": \\\"gTTS library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer proficient in IntelliJ IDEA, primarily uses it for Java development.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Java Code Formatter Interface\\\",\\n  \\\"description\\\": \\\"Formats raw Java code to adhere to standard Java code conventions, using Python's yapf library.\\\",\\n  \\\"function_name\\\": \\\"format_java_code\\\",\\n  \\\"input_args\\\": {\\n    \\\"raw_code\\\": \\\"A string of raw, unformatted Java code.\\\"\\n  },\\n  \\\"return\\\": \\\"A string of formatted Java code.\\\",\\n  \\\"depend\\\": \\\"yapf Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Someone who vehemently believes O.J. Simpson was guilty and thinks justice wasn't served.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Case Evidence Analyzer\\\",\\n\\\"description\\\": \\\"This interface analyzes and evaluates the evidence presented in a legal case. It uses an NLP model to understand the context and significance of the evidence in relation to the case, and returns a score indicating the strength of the evidence.\\\",\\n\\\"function_name\\\": \\\"analyze_evidence\\\",\\n\\\"input_args\\\": {\\\"case_name\\\": \\\"The name of the legal case\\\", \\\"evidence_text\\\": \\\"The text description of the evidence\\\"},\\n\\\"return\\\": {\\\"case\\\": \\\"The name of the legal case\\\", \\\"evidence_strength\\\": \\\"A score indicating the strength of the evidence\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"BERT from huggingface\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Blake Byrne, a contemporary art collector and philanthropist", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Artwork Style Classifier Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained CNN model from TensorFlow Hub to identify and classify the style of a given artwork. The user simply needs to provide the path to an image file of the artwork, and the interface will return the predicted style of the artwork.\\\",\\n  \\\"function_name\\\": \\\"classify_artwork_style\\\",\\n  \\\"input_args\\\": \\\"path_to_img: The path to the image file of the artwork.\\\",\\n  \\\"return\\\": \\\"The predicted style of the artwork.\\\",\\n  \\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, pre-trained Inception V3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A silver-haired veteran who is an active member of the National Rifle Association and always looks forward to hunting season in U.S.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hunting Season Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface to provide forecasts for the upcoming hunting season based on the user's state and the type of game they are interested in. The forecast includes predicted population levels and best times to hunt.\\\",\\n\\\"function_name\\\": \\\"get_hunting_season_forecast\\\",\\n\\\"input_args\\\": [\\\"state\\\", \\\"game_type\\\"],\\n\\\"return\\\": \\\"A dictionary containing the forecast for the hunting season including predicted population levels and best times to hunt.\\\",\\n\\\"depend\\\": \\\"This function depends on the U.S. Fish & Wildlife Service API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retiree from Sandusky, Ohio, who does not like unsolicited calls.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Phone Number Lookup Interface\\\",\\n  \\\"description\\\": \\\"Look up information about a phone number, such as the carrier, location, and whether it's a valid number.\\\",\\n  \\\"function_name\\\": \\\"lookup_phone_number\\\",\\n  \\\"input_args\\\": \\\"phone_number\\\",\\n  \\\"return\\\": \\\"Information about the phone number (carrier, location, validity)\\\",\\n  \\\"depend\\\": \\\"Numverify API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a junior epidemiologist who aspires to be like Rebecca J. Troisi", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Epidemic Prediction Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the SIR model in epidemiology to predict the spread of diseases. The user needs to input the initial number of susceptible, infected, and recovered individuals, along with the transmission and recovery rates, and the interface will return a prediction of the future spread of the disease.\\\",\\n  \\\"function_name\\\": \\\"predict_epidemic\\\",\\n  \\\"input_args\\\": [\\\"S0\\\", \\\"I0\\\", \\\"R0\\\", \\\"beta\\\", \\\"gamma\\\", \\\"days\\\"],\\n  \\\"return\\\": \\\"{Susceptible: [], Infected: [], Recovered: []}\\\",\\n  \\\"depend\\\": [\\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired construction worker and the site supervisor's father, offering advice based on years of industry experience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from construction material vendors or open databases to provide real-time cost estimation of construction materials. Users will need to input the type and quantity of the materials, and the interface will return the total estimated cost.\\\",\\n\\\"function_name\\\": \\\"get_material_cost\\\",\\n\\\"input_args\\\": [\\n    {\\\"name\\\": \\\"material\\\", \\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The type of the material\\\"},\\n    {\\\"name\\\": \\\"quantity\\\", \\\"type\\\": \\\"integer\\\", \\\"description\\\": \\\"The quantity of the material\\\"}\\n],\\n\\\"return\\\": {\\\"type\\\": \\\"float\\\", \\\"description\\\": \\\"The total estimated cost of the materials\\\"},\\n\\\"depend\\\": {\\\"APIs\\\": [\\\"Construction Materials Prices API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Another renowned yacht designer constantly vying for prestigious design awards", "synthesized text": "\"{\\n\\\"name\\\": \\\"Yacht Design Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface evaluates the design parameters of a yacht and returns a score indicating its competitiveness for prestigious design awards.\\\",\\n\\\"function_name\\\": \\\"evaluate_yacht_design\\\",\\n\\\"input_args\\\": \\\"path_to_file - path to a file that contains the yacht design parameters\\\",\\n\\\"return\\\": \\\"A score indicating the design's competitiveness for prestigious design awards\\\",\\n\\\"depend\\\": \\\"TensorFlow Hub, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A primary school art teacher always looking for the best supplies for the classroom", "synthesized text": "\"{\\n\\\"name\\\": \\\"Art Supplies Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface fetches prices for a particular art supply from different online marketplaces (Amazon, eBay, Alibaba), allowing the user to easily compare prices and find the best deal.\\\",\\n\\\"function_name\\\": \\\"compare_art_supply_prices\\\",\\n\\\"input_args\\\": \\\"art_supply\\\",\\n\\\"return\\\": \\\"A dictionary with keys as marketplace names and values as the price of the art supply in those marketplaces.\\\",\\n\\\"depend\\\": \\\"The function uses Python's built-in 'requests' library and APIs from Amazon, eBay, and Alibaba.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a Utahn historian who specializes in the state's military history and has a deep passion for sharing knowledge about Utah's role in significant events. I frequently lead discussions at community centers and local schools about our state's contributions to national history.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Timeline Interface\\\",\\n\\\"description\\\": \\\"This interface generates a visual timeline of historical events.\\\",\\n\\\"function_name\\\": \\\"create_timeline\\\",\\n\\\"input_args\\\": \\\"events - A list of dictionaries. Each dictionary should contain a 'date' (a datetime.date object) and an 'event' (a string).\\\",\\n\\\"return\\\": \\\"A visual timeline of the events.\\\",\\n\\\"depend\\\": \\\"Python's datetime and matplotlib libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school teacher, scouted by Marvel, now works part-time scriptwriting for superhero comics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Name Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a new name for a character based on Markov chain of provided seed names\\\",\\n\\\"function_name\\\": \\\"generate_name\\\",\\n\\\"input_args\\\": [\\\"seed_names - a list of names to use as the initial seed for the generator\\\", \\\"length - the length of the name to generate (optional, default is 5)\\\"],\\n\\\"return\\\": \\\"A new, generated name\\\",\\n\\\"depend\\\": [\\\"Python's Random and Re libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A rookie software developer who is a fan of Unreal Engine 4", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Unreal Engine 4 Blueprint Compiler Interface\\\",\\n  \\\"description\\\": \\\"An interface that translates Unreal Engine 4 Blueprints into Python code, allowing developers to understand how the logic of the blueprint translates to Python.\\\",\\n  \\\"function_name\\\": \\\"blueprint_to_python\\\",\\n  \\\"input_args\\\": {\\n    \\\"blueprint_file\\\": \\\"Path to the Unreal Engine 4 Blueprint file.\\\"\\n  },\\n  \\\"return\\\": \\\"Python code that represents the logic of the input Blueprint.\\\",\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"unreal_engine\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A horse breeder with a strong passion for preserving and improving the bloodlines of dressage horses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pedigree Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides a method to analyse horse pedigrees, providing key metrics such as the inbreeding coefficient and effective population size from a given CSV file.\\\",\\n\\\"function_name\\\": \\\"analyse_pedigree\\\",\\n\\\"input_args\\\": {\\n    \\\"csv_file\\\": \\\"The path to a CSV file with the horse's pedigree information.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"inbreeding_coefficient\\\": \\\"A measure of the amount of consanguinity in the pedigree.\\\",\\n    \\\"effective_population_size\\\": \\\"A measure of the number of breeding individuals in an idealised population that would show the same amount of dispersion of allele frequencies under random genetic drift or the same amount of inbreeding as the population under consideration.\\\"\\n},\\n\\\"depend\\\": \\\"pyPedigree library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A community organizer who values the warden's efforts to ensure the safety of the neighborhood", "synthesized text": "\"{\\n\\\"name\\\": \\\"Neighborhood Crime Rate Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch crime data from a specific location within a specific date range. It provides information on the number of crimes per day within a 3 miles radius.\\\",\\n\\\"function_name\\\": \\\"get_crime_rate\\\",\\n\\\"input_args\\\": {\\\"city\\\": {\\\"type\\\": \\\"dictionary\\\", \\\"description\\\": \\\"A dictionary with 'lat' and 'lon' keys representing the city's latitude and longitude respectively.\\\"},\\n\\\"start_date\\\": {\\\"type\\\": \\\"datetime\\\", \\\"description\\\": \\\"Start date of the date range for which crime data is to be fetched.\\\"},\\n\\\"end_date\\\": {\\\"type\\\": \\\"datetime\\\", \\\"description\\\": \\\"End date of the date range for which crime data is to be fetched.\\\"}},\\n\\\"return\\\": {\\\"type\\\": \\\"float\\\", \\\"description\\\": \\\"The number of crimes per day within a 3 miles radius.\\\"},\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"requests\\\", \\\"datetime\\\"], \\\"api\\\": \\\"Crimeometer\\\"}\\n}\"", "description": "tool development"}
{"input persona": "足球评论员，关注着日本足球和国际足坛动态，经常在博客上发布球员分析。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u8db3\\u7403\\u7403\\u5458\\u7edf\\u8ba1\\u6570\\u636e\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u8f93\\u5165\\u7403\\u5458\\u7684\\u540d\\u5b57\\uff0c\\u8fd4\\u56de\\u7403\\u5458\\u7684\\u8be6\\u7ec6\\u7edf\\u8ba1\\u6570\\u636e\\u3002\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": [\\\"player_name\\\"],\\n\\\"return\\\": \\\"\\u7403\\u5458\\u7684\\u8be6\\u7ec6\\u7edf\\u8ba1\\u6570\\u636e\\uff08\\u5305\\u62ec\\u6bd4\\u8d5b\\u6570\\u91cf\\uff0c\\u8fdb\\u7403\\uff0c\\u52a9\\u653b\\u7b49\\uff09\\\",\\n\\\"depend\\\": \\\"football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An attorney practicing in a different field seeking guidance on ethical dilemmas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Ethics Guidance Interface\\\",\\n\\\"description\\\": \\\"This interface provides guidance on legal ethical dilemmas by leveraging a machine learning model trained on legal case law, ethics opinions, and other relevant legal texts.\\\",\\n\\\"function_name\\\": \\\"get_legal_ethics_guidance\\\",\\n\\\"input_args\\\": \\\"ethical_dilemma - a text string describing the ethical dilemma\\\",\\n\\\"return\\\": \\\"A list of text strings, each one a potential response to the ethical dilemma based on the trained data.\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library (for the GPT2 model and tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An academic scholar studying the historical significance of harpsichord in the Baroque era", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Feature Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts music features such as tempo and beat frames from an audio file using the librosa library. The user only needs to provide the path to an audio file.\\\",\\n\\\"function_name\\\": \\\"extract_music_features\\\",\\n\\\"input_args\\\": \\\"audio_file_path\\\",\\n\\\"return\\\": \\\"A dictionary with 'tempo' and 'beat_frames' as keys. Tempo is a float representing the estimated tempo in beats per minute. Beat_frames is a list of integers representing the estimated positions of beat frames.\\\",\\n\\\"depend\\\": \\\"librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A picky house owner and former carpenter in Kingman, Arizona.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Improvement Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface to get the cost estimation for a specific home improvement or construction project in a specific location. The cost estimation is based on data from Clear Estimates, a leading provider of cost estimation for construction and home improvement projects.\\\",\\n\\\"function_name\\\": \\\"get_home_improvement_cost_estimation\\\",\\n\\\"input_args\\\": {\\n    \\\"project_type\\\": \\\"The type of the home improvement or construction project. For example, 'Kitchen Remodel', 'Bathroom Remodel', 'Deck Building', etc.\\\",\\n    \\\"location\\\": \\\"The location where the project will be performed. For example, 'Kingman, Arizona'.\\\"},\\n\\\"return\\\": \\\"The estimated cost for the specified project in the specified location.\\\",\\n\\\"depend\\\": \\\"This function depends on the Clear Estimates API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A childhood fan of Tintin in his early 30s.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tintin Comic Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface to extract dialogues from Tintin comic pages\\\",\\n\\\"function_name\\\": \\\"extract_dialogues_from_tintin_comic\\\",\\n\\\"input_args\\\": [\\\"path_to_image\\\"],\\n\\\"return\\\": \\\"List of dialogues in the comic page\\\",\\n\\\"depend\\\": [\\\"Python PIL library\\\", \\\"pytesseract OCR library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Здоровьесознательный фитнес-инструктор, который помогает руководителю стартапа поддерживать физическую активность и заботиться о своем здоровье", "synthesized text": "\"{\\n\\\"name\\\": \\\"Exercise Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface that utilizes Python's Schedule library to remind the user to perform an exercise every few hours.\\\",\\n\\\"function_name\\\": \\\"exercise_reminder\\\",\\n\\\"input_args\\\": {\\n    \\\"exercise\\\": \\\"Type of exercise the user wants to be reminded to do.\\\",\\n    \\\"hours\\\": \\\"Frequency of reminders in hours.\\\"\\n},\\n\\\"return\\\": \\\"This function does not return a value. It continuously runs, printing a reminder to the console every few hours.\\\",\\n\\\"depend\\\": \\\"Python's Schedule library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow paralegal studying for the LSAT, offering study tips and support", "synthesized text": "\"{\\n\\\"name\\\": \\\"LSAT Practice Test Score Predictor Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained regression model to predict the LSAT score based on the number of correct answers in each section (Logical Reasoning, Analytical Reasoning, and Reading Comprehension).\\\",\\n\\\"function_name\\\": \\\"predict_lsat_score\\\",\\n\\\"input_args\\\": [\\\"path_to_model\\\", \\\"lr_correct\\\", \\\"ar_correct\\\", \\\"rc_correct\\\"],\\n\\\"return\\\": \\\"Estimated LSAT score\\\",\\n\\\"depend\\\": [\\\"sklearn.externals.joblib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A coding enthusiast who created a popular coding theory blog, sharing tips and resources for beginners", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Snippet Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface receives a problem description as input and returns a recommended Python code snippet as output.\\\",\\n\\\"function_name\\\": \\\"get_recommended_code_snippet\\\",\\n\\\"input_args\\\": {\\n    \\\"problem_description\\\": \\\"A string describing the coding problem.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"code_snippet\\\": \\\"A string containing the recommended Python code snippet.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"openai\\\"],\\n    \\\"Web API\\\": [\\\"OpenAI\\\"],\\n    \\\"Machine Learning Model\\\": [\\\"GPT-3\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A student of Islamic history and the caliphs of early Islam, particularly interested in the life and times of 'Umar ibn al-Khattab.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Events Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts names of persons, locations, and time expressions from a given text about 'Umar ibn al-Khattab.\\\",\\n\\\"function_name\\\": \\\"extract_historical_entities\\\",\\n\\\"input_args\\\": [\\\"path_to_text\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'Persons', 'Locations', and 'Times', containing lists of named entities in the corresponding categories.\\\",\\n\\\"depend\\\": \\\"Huggingface's transformer library and a pre-trained Named Entity Recognition (NER) model (dbmdz/bert-large-cased-finetuned-conll03-english)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A resident of the area who appreciates the aroma of freshly grilled hot dogs on game days", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Day Hot Dog Vendor Locator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Yelp Fusion API to find hot dog vendors near a specified location.\\\",\\n\\\"function_name\\\": \\\"get_hot_dog_vendors\\\",\\n\\\"input_args\\\": \\\"location - a string representing the location where you want to find hot dog vendors\\\",\\n\\\"return\\\": \\\"A list of hot dog vendor names near the specified location\\\",\\n\\\"depend\\\": \\\"Python 'requests' library, Yelp Fusion API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A travel blogger on a mission to visit lesser-known European villages", "synthesized text": "\"{\\n\\\"name\\\": \\\"European Village Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenTripMap API to recommend lesser-known villages in a specified European country for travel bloggers to visit. Lesser-known villages are defined as having fewer than five tourist attractions listed in the OpenTripMap database.\\\",\\n\\\"function_name\\\": \\\"get_lesser_known_villages\\\",\\n\\\"input_args\\\": \\\"country - a string that represents the European country where the user wants to find lesser-known villages\\\",\\n\\\"return\\\": \\\"A list of lesser-known village names in the specified European country\\\",\\n\\\"depend\\\": \\\"OpenTripMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A government official seeking advice on developing a tourism master plan for their city", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tourist Attractions Popularity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches details of various tourist attractions in a city using Google Places API and estimates their popularity based on the number of reviews and average rating.\\\",\\n\\\"function_name\\\": \\\"analyze_tourist_attractions\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"api_key\\\"],\\n\\\"return\\\": \\\"List of tuples where each tuple contains the name of a tourist attraction and its estimated popularity.\\\",\\n\\\"depend\\\": [\\\"Google Places API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A research scientist looking for custom simulation software to model complex biological systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bio Simulation Interface\\\",\\n\\\"description\\\": \\\"An interface for running simulations of biochemical networks using the COPASI API.\\\",\\n\\\"function_name\\\": \\\"run_simulation\\\",\\n\\\"input_args\\\": {\\n  \\\"model_file\\\": \\\"Path to the model file in SBML format.\\\",\\n  \\\"simulation_type\\\": \\\"Type of simulation to run (e.g., 'time course', 'steady state').\\\",\\n  \\\"parameters\\\": \\\"Dictionary of parameters for the simulation.\\\"\\n},\\n\\\"return\\\": \\\"The results of the simulation.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"COPASI\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A horse whisperer who has the unique ability to communicate with horses on a deep level", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Horse Emotion Detection Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained deep learning model to classify the emotions of horses from images. The user needs to input the path to an image file of a horse, and the interface will return the detected emotion of the horse.\\\",\\n  \\\"function_name\\\": \\\"detect_horse_emotion\\\",\\n  \\\"input_args\\\": [\\\"path_to_img\\\"],\\n  \\\"return\\\": \\\"Detected emotion of the horse (e.g., 'Happy', 'Sad', 'Angry', 'Neutral')\\\",\\n  \\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Python's numpy library, and a pre-trained model from TensorFlow Hub for horse emotion classification\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious political advisor who aims to become the youngest UN Secretary-General", "synthesized text": "\"{\\n\\\"name\\\": \\\"United Nations Voting Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from the United Nations' public documents system to gather data on voting patterns for General Assembly resolutions. It returns the voting results (for, against, abstain) for a specified resolution.\\\",\\n\\\"function_name\\\": \\\"get_voting_results\\\",\\n\\\"input_args\\\": [\\\"resolution_number\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"Dictionary with 'For', 'Against', 'Abstain' as keys and respective votes as values, or 'No voting results found.' in case of error or no votes.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\", \\\"United Nations Official Document System\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A dedicated fan of one of the pre-debut groups, RedSquare", "synthesized text": "\"{\\n\\\"name\\\": \\\"K-pop Debut Countdown Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Twitter API to fetch tweets from a specified user's timeline, looks for any tweets containing information about the group's debut date, and then calculates and returns the number of days until this date.\\\",\\n\\\"function_name\\\": \\\"countdown_to_debut\\\",\\n\\\"input_args\\\": \\\"username - the Twitter username of the K-pop group\\\",\\n\\\"return\\\": \\\"Number of days left until the group's debut, or a message indicating that the debut date could not be found.\\\",\\n\\\"depend\\\": \\\"Tweepy (Python library), Twitter API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst who shares tips and tricks for troubleshooting rendering issues on SQL Reporting Services forums", "synthesized text": "\"{\\n\\\"name\\\": \\\"SQL Query Performance Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface for optimizing SQL queries. The user inputs their SQL query, and the interface returns the optimized query and its estimated execution time.\\\",\\n\\\"function_name\\\": \\\"optimize_sql_query\\\",\\n\\\"input_args\\\": [\\\"database_uri\\\", \\\"raw_sql_query\\\"],\\n\\\"return\\\": {\\\"optimized_query\\\": \\\"SQL query\\\", \\\"estimated_execution_time\\\": \\\"float in seconds\\\"},\\n\\\"depend\\\": [\\\"SQLalchemy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A graduate art history student researching the influence of Japanese art on Van Gogh’s style", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to compute the similarity between two artworks, which can be used to determine how similar their styles are.\\\",\\n\\\"function_name\\\": \\\"compute_artwork_similarity\\\",\\n\\\"input_args\\\": [\\\"path_to_img1\\\", \\\"path_to_img2\\\"],\\n\\\"return\\\": \\\"A similarity score between the two images. A higher score indicates more similar styles.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a Syrian refugee in Canada who was forced to flee their city due to violence and terror", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Language Translation Interface\\\",\\n  \\\"description\\\": \\\"Translates Arabic text to English using Google's Translation API\\\",\\n  \\\"function_name\\\": \\\"translate_arabic_to_english\\\",\\n  \\\"input_args\\\": \\\"text - a string of Arabic text\\\",\\n  \\\"return\\\": \\\"A tuple where the first item is the original Arabic text and the second item is the translated English text\\\",\\n  \\\"depend\\\": \\\"Google's Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student struggling to manage their expenses and looking for a user-friendly financial app", "synthesized text": "\"{\\n\\\"name\\\": \\\"Expense Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input a CSV file of their transactions, and the interface will return a detailed summary and visualization of their expenses.\\\",\\n\\\"function_name\\\": [\\\"load_data\\\", \\\"expense_summary\\\", \\\"visualize_expenses\\\"],\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": [\\\"Dataframe from CSV file\\\", \\\"Summary of expenses\\\", \\\"Visualization of expenses\\\"],\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am an octogenarian who lived through the Great Depression.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface takes a stock symbol and a specific date as inputs and returns the opening, closing, high, and low prices for that stock on the given date. This is done by leveraging the Alpha Vantage API for financial data.\\\",\\n\\\"function_name\\\": \\\"get_stock_price_on_date\\\",\\n\\\"input_args\\\": [\\\"stock_symbol\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"A dictionary with 'open', 'high', 'low', and 'close' prices for the stock on the specified date.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Alpha Vantage API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I'm a basketball blogger and an avid NBA fan, focusing specifically on the Oklahoma City Thunder team updates.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"NBA Team Statistics Interface\\\",\\n  \\\"description\\\": \\\"Returns the latest statistics for a specific NBA team\\\",\\n  \\\"function_name\\\": \\\"get_team_statistics\\\",\\n  \\\"input_args\\\": \\\"team_name\\\",\\n  \\\"return\\\": \\\"Latest statistics for the input NBA team\\\",\\n  \\\"depend\\\": \\\"balldontlie API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A student athlete who recently transferred to Burman University", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Workout Plan Generator Interface\\\",\\n    \\\"description\\\": \\\"Generates a personalized workout plan based on user's physical characteristics and fitness goal using a pre-trained model from TensorFlow.\\\",\\n    \\\"function_name\\\": \\\"generate_workout_plan\\\",\\n    \\\"input_args\\\": {\\n        \\\"age\\\": \\\"User's age\\\",\\n        \\\"weight\\\": \\\"User's weight\\\",\\n        \\\"height\\\": \\\"User's height\\\",\\n        \\\"gender\\\": \\\"User's gender\\\",\\n        \\\"goal\\\": \\\"User's fitness goal\\\"\\n    },\\n    \\\"return\\\": \\\"A personalized workout plan\\\",\\n    \\\"depend\\\": {\\n        \\\"tensorflow\\\": \\\"2.6.0\\\",\\n        \\\"sklearn\\\": \\\"0.24.2\\\",\\n        \\\"pandas\\\": \\\"1.2.5\\\"\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A representative from an oil and gas company collaborating on developing spill response plans and strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Oil Spill Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface uses NOAA's GNOME software to predict the trajectory of an oil spill based on the location of the spill, wind speed and water current.\\\",\\n\\\"function_name\\\": \\\"predict_oil_spill_trajectory\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"wind_speed\\\", \\\"water_current\\\"],\\n\\\"return\\\": \\\"JSON object describing the trajectory of the oil spill.\\\",\\n\\\"depend\\\": \\\"NOAA's GNOME API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow classmate from Dolly Parton's early school days who remembers her as a talented singer even at a young age", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Lyrics Generator Interface\\\",\\n\\\"description\\\": \\\"An interface that generates song lyrics based on a given theme using the GPT-2 model from huggingface.\\\",\\n\\\"function_name\\\": \\\"generate_song_lyrics\\\",\\n\\\"input_args\\\": [\\\"theme\\\", \\\"length\\\"],\\n\\\"return\\\": \\\"A string of generated song lyrics.\\\",\\n\\\"depend\\\": [\\\"huggingface's transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A law student from the University of Louisville Brandeis School of Law", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Legal Document Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface takes the path to a legal document as input and returns the top 5 most important sentences from the document. This helps users to quickly understand the main points of the document.\\\",\\n  \\\"function_name\\\": \\\"analyze_document\\\",\\n  \\\"input_args\\\": [\\\"path_to_doc\\\"],\\n  \\\"return\\\": \\\"List of top 5 most important sentences from the document\\\",\\n  \\\"depend\\\": [\\\"HuggingFace: microsoft/BiomedNLP-PubMedBERT-base-uncased-abstract\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An active contributor to online forums and communities dedicated to Dalvik bytecode and Android system development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dalvik Bytecode Decompiler Interface\\\",\\n\\\"description\\\": \\\"This interface decompiles Dalvik bytecode to a more human-readable form.\\\",\\n\\\"function_name\\\": \\\"decompile_dalvik_bytecode\\\",\\n\\\"input_args\\\": {\\\"path_to_dex\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": [\\\"androguard\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A contributor to open source projects with a focus on creating Python bindings for existing C++ libraries", "synthesized text": "\"{\\n\\\"name\\\": \\\"C++ Code Compilation Interface\\\",\\n\\\"description\\\": \\\"An interface that compiles C++ code, creates a dynamic library, and then provides a Python wrapper to access the C++ functions.\\\",\\n\\\"function_name\\\": \\\"compile_and_run_cpp_code\\\",\\n\\\"input_args\\\": [\\\"cpp_code\\\", \\\"function_name\\\", \\\"*args\\\"],\\n\\\"return\\\": \\\"The result of the function call in the C++ code.\\\",\\n\\\"depend\\\": [\\\"ctypes\\\", \\\"tempfile\\\", \\\"subprocess\\\", \\\"C++ Compiler\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a social worker living in North Lawndale, Chicago whose main focus is children's welfare and development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"Assess the risk of a child being in a vulnerable situation based on various factors such as family background, economic status, and neighborhood condition.\\\",\\n\\\"function_name\\\": \\\"assess_child_risk\\\",\\n\\\"input_args\\\": [\\\"family_background\\\", \\\"economic_status\\\", \\\"neighborhood_condition\\\"],\\n\\\"return\\\": \\\"risk score (float)\\\",\\n\\\"depend\\\": \\\"HuggingFace Transformers library (BERT model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "an ex-nurse who always gives advice on health issues.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blood Pressure Level Interpretation Interface\\\",\\n\\\"description\\\": \\\"This interface takes systolic and diastolic blood pressure readings and returns an interpretation of the blood pressure level.\\\",\\n\\\"function_name\\\": \\\"interpret_blood_pressure\\\",\\n\\\"input_args\\\": {\\\"systolic\\\": \\\"integer, systolic blood pressure reading\\\", \\\"diastolic\\\": \\\"integer, diastolic blood pressure reading\\\"},\\n\\\"return\\\": \\\"string, interpretation of blood pressure level\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "a financial analyst who is native in Dutch but speaks fluent English;", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Data Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch historical stock market data for a given stock symbol. It uses the Alpha Vantage API and supports multiple languages.\\\",\\n\\\"function_name\\\": \\\"get_stock_data\\\",\\n\\\"input_args\\\": [\\\"symbol\\\", \\\"language\\\"],\\n\\\"return\\\": \\\"A pandas DataFrame with the historical stock data. The DataFrame's column names are translated into the specified language.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas. Web APIs: Alpha Vantage API, a large language model for translation.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate nature photographer with an interest in capturing the unique landscapes of Cumbria", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weather Forecast Interface\\\", \\n  \\\"description\\\": \\\"Provide weather forecast for the next 5 days for a given location to assist photographers in planning their shoots\\\", \\n  \\\"function_name\\\": \\\"get_weather_forecast\\\", \\n  \\\"input_args\\\": \\\"location - a string that represents the location where the photographer plans to shoot\\\", \\n  \\\"return\\\": \\\"A list of weather forecasts for the next 5 days. Each forecast contains time (in UTC), temperature (in Kelvin), general weather status (like Clear, Clouds), and a more detailed weather description\\\", \\n  \\\"depend\\\": \\\"Python library: requests. Web API: OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software architect who prefers statically-typed languages for high-performance systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Language Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the repositories of a GitHub user and predicts the programming languages used in them.\\\",\\n\\\"function_name\\\": \\\"get_user_programming_languages\\\",\\n\\\"input_args\\\": {\\n    \\\"username\\\": \\\"The GitHub username of the user.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"set\\\",\\n    \\\"description\\\": \\\"A set of programming languages used by the user in their repositories.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n    \\\"Web_APIs\\\": [\\\"GitHub API\\\"],\\n    \\\"machine_learning_models\\\": [\\\"huggingface/CodeBERTa-small-v1\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "我是中国近现代文学研究者，专注于探索文学作品及其背后的作家生平。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Chinese Literature Analysis Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface that uses a pre-trained BERT model to extract topics from a text.\\\",\\n  \\\"function_name\\\": \\\"topic_modeling\\\",\\n  \\\"input_args\\\": {\\n    \\\"text\\\": \\\"The text from which to extract topics.\\\",\\n    \\\"num_topics\\\": \\\"The number of topics to extract. Default is 5.\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary where each key is a topic number and the value is a list of the top 10 words associated with that topic.\\\",\\n  \\\"depend\\\": \\\"huggingface's transformers library (BertModel, BertTokenizer), sklearn's LDA and CountVectorizer\\\"\\n}\"", "description": "tool development"}
{"input persona": "An audiologist who educates patients about the importance of protecting their hearing", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Hearing Damage Risk Interface\\\",\\n    \\\"description\\\": \\\"Calculates the risk of hearing damage based on the average noise decibel level and the duration of exposure.\\\",\\n    \\\"function_name\\\": \\\"calculate_hearing_damage_risk\\\",\\n    \\\"input_args\\\": {\\n        \\\"avg_decibel_level\\\": \\\"The average decibel level of noise exposure\\\",\\n        \\\"exposure_duration_hours\\\": \\\"The duration of noise exposure in hours\\\"\\n    },\\n    \\\"return\\\": \\\"The potential risk of hearing damage: 'High risk of hearing damage', 'Medium risk of hearing damage', or 'Low risk of hearing damage'\\\",\\n    \\\"depend\\\": \\\"Uses the NIOSH sound level guidelines to calculate the risk\\\"\\n}\"", "description": "tool development"}
{"input persona": "an aspiring filmmaker from Hungary who admires the work of Marcell", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Scene Segmentation Interface\\\",\\n\\\"description\\\": \\\"This interface splits a video into different scenes using a pre-trained TensorFlow model for video scene segmentation. The user inputs the path to a video file, and the interface returns a list of timestamps indicating the start and end times of each scene.\\\",\\n\\\"function_name\\\": \\\"segment_video\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"List of tuples, each tuple containing two timestamps indicating the start and end times of a scene.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, NumPy, moviepy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from a major insurance company interested in leveraging AI for improved patient outcomes and cost savings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Predictive Health Risk Scoring Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to predict the likelihood of a patient being readmitted to the hospital within 30 days. The user inputs patient data, and the interface returns a risk score.\\\",\\n\\\"function_name\\\": \\\"predict_readmission_risk\\\",\\n\\\"input_args\\\": [\\\"patient_data\\\"],\\n\\\"return\\\": \\\"risk_score\\\",\\n\\\"depend\\\": [\\\"Hugging Face's transformers library, PyTorch\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a devout environmentalist who doesn't take the Bible as literal truth, but embraces it as a cultural and spiritual legacy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Keyword Search and Relevance Score Interface\\\",\\n\\\"description\\\": \\\"This interface takes a keyword and a Bible text file, and outputs the Bible verses containing the keyword with a relevance score.\\\",\\n\\\"function_name\\\": \\\"bible_search\\\",\\n\\\"input_args\\\": [\\\"keyword\\\", \\\"bible_text_file\\\"],\\n\\\"return\\\": \\\"A list of tuples. Each tuple contains a Bible verse containing the keyword and a relevance score.\\\",\\n\\\"depend\\\": [\\\"nltk\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Американский фанат музыки, который пользуется музыкальным стриминговым сервисом Spotify и не упускает новые релизы.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Spotify New Release Interface\\\",\\n\\\"description\\\": \\\"An interface that alerts the user when their favorite artists have new releases on Spotify. The user only needs to input their Spotify user token.\\\",\\n\\\"function_name\\\": \\\"get_new_releases\\\",\\n\\\"input_args\\\": \\\"user_token\\\",\\n\\\"return\\\": \\\"A list of new releases from the user's favorite artists.\\\",\\n\\\"depend\\\": \\\"Spotify Web API, Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A new Velero user who wants to take incremental backups of Kubernetes applications and restore them in a disaster scenario.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Velero Backup and Restore Interface\\\",\\n\\\"description\\\": \\\"This interface provides easy-to-use functions to backup and restore Kubernetes applications using Velero.\\\",\\n\\\"function_name\\\": [\\\"velero_backup\\\", \\\"velero_restore\\\"],\\n\\\"input_args\\\": [\\\"backup_name\\\", \\\"namespace\\\"],\\n\\\"return\\\": \\\"Confirmation message indicating if the backup or restore was initiated.\\\",\\n\\\"depend\\\": \\\"Python's subprocess library and Velero CLI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A 7th grade middle school student who is deeply obsessed with dinosaurs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dinosaur Information Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Dino Ipsum API to generate dinosaur-themed lorem ipsum text. This could be useful for generating text for dinosaur-themed projects or presentations.\\\",\\n\\\"function_name\\\": \\\"generate_dinosaur_ipsum\\\",\\n\\\"input_args\\\": {\\n    \\\"paragraphs\\\": \\\"Number of paragraphs to generate\\\",\\n    \\\"words\\\": \\\"Number of words per paragraph\\\"\\n},\\n\\\"return\\\": \\\"Returns a list of strings, each string is a dinosaur-themed lorem ipsum paragraph\\\",\\n\\\"depend\\\": \\\"We leverage the Dino Ipsum Web API in this function\\\"\\n}\"", "description": "tool development"}
{"input persona": "An introverted, independent woman, artist and cat lover who does not particularly follow fashion trends but likes to be comfortable, unique, and confident in her clothing.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Personalized Fashion Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a user's preferences as input and returns a list of recommended clothing items that match those preferences. It uses a TF-IDF vectorizer and cosine similarity to find items that are most similar to the user's preferences.\\\",\\n  \\\"function_name\\\": \\\"recommend_clothing\\\",\\n  \\\"input_args\\\": {\\n    \\\"preferences\\\": \\\"Textual description of the user's clothing preferences.\\\",\\n    \\\"items_df\\\": \\\"A pandas DataFrame containing information about the clothing items, including a 'description' column and a 'name' column.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of names of recommended clothing items.\\\",\\n  \\\"depend\\\": \\\"python libraries (pandas, sklearn)\\\"\\n}\"", "description": "tool development"}
{"input persona": "English teacher trying to get students into sports", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Sports Article Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface to recommend sports news articles appropriate for a specific grade level.\\\",\\n  \\\"function_name\\\": \\\"recommend_articles\\\",\\n  \\\"input_args\\\": {\\n    \\\"grade_level\\\": \\\"The grade level of the class (integer from 0-14, where 0 is kindergarten and 14 is college graduate).\\\"\\n  },\\n  \\\"return\\\": \\\"A list of sports news articles that are appropriate for the specified grade level.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n    \\\"web APIs\\\": [\\\"NewsAPI\\\"],\\n    \\\"pre-trained models\\\": [\\\"textattack/roberta-base-RD-S\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A book editor impressed by the mapmaker's attention to detail and interested in collaborating on a fantasy novel", "synthesized text": "\"{\\n\\\"name\\\": \\\"Collaborative Writing Assistant Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to add content to a Google Document. The users input the content they want to add and the position in the Google Document where they want to add it. The interface adds the input content to the specified position in the Google Document.\\\",\\n\\\"function_name\\\": \\\"add_content_to_google_doc\\\",\\n\\\"input_args\\\": [\\\"doc_id\\\", \\\"content\\\", \\\"position\\\"],\\n\\\"return\\\": \\\"None, but updates the specified Google Document by adding content at the given position\\\",\\n\\\"depend\\\": \\\"Google Docs API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a woman who frequently suffers from severe premenstrual dysphoric disorder (PMDD) symptoms.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Symptom Tracker and Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface allows users to record and analyze PMDD symptoms over time.\\\", \\n\\\"function_name\\\": [\\\"record_symptom\\\", \\\"analyze_symptoms\\\"], \\n\\\"input_args\\\": {\\\"record_symptom\\\": [\\\"date_str\\\", \\\"symptom\\\", \\\"severity\\\"], \\\"analyze_symptoms\\\": []}, \\n\\\"return\\\": {\\\"record_symptom\\\": \\\"None\\\", \\\"analyze_symptoms\\\": \\\"Dictionary with symptom as key and 'mean' and 'count' as sub-keys\\\"},\\n\\\"depend\\\": [\\\"pandas\\\", \\\"datetime\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A university department head aiming at increasing the employability rate of the graduates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Market Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Jobtechdev's Historical Job Posting API to analyze the trends in job market demands. Users input a job title or skill, and the interface returns the trend data for that job or skill over time.\\\",\\n\\\"function_name\\\": \\\"get_job_trend\\\",\\n\\\"input_args\\\": \\\"skill\\\",\\n\\\"return\\\": \\\"A pandas Series with dates as the index and the count of job postings requiring the input skill as the values.\\\",\\n\\\"depend\\\": \\\"requests, pandas, Jobtechdev's Historical Job Posting API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager who relies on the developer's precise time estimates to create project timelines", "synthesized text": "\"{\\n\\\"name\\\": \\\"Estimate Project Completion Time Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the project completion time based on a list of task estimates and the number of simulations to run, using the Montecarlo simulation method. Each task estimate is a tuple of optimistic, most likely, and pessimistic estimates, in man-days.\\\",\\n\\\"function_name\\\": \\\"montecarlo_project_estimate\\\",\\n\\\"input_args\\\": {\\n    \\\"task_estimates\\\": \\\"A list of tuples, each representing an estimate for a single task. Each tuple contains three elements: the optimistic, most likely, and pessimistic estimates.\\\",\\n    \\\"num_simulations\\\": \\\"The number of simulations to run.\\\"\\n    },\\n\\\"return\\\": \\\"The estimated project completion time, as a percentile score of the total project times generated by the simulations.\\\",\\n\\\"depend\\\": \\\"numpy, scipy.stats\\\"\\n}\"", "description": "tool development"}
{"input persona": "The chairman of the Parents Television Council who despises sexually explicit content in the media", "synthesized text": "\"{\\n  \\\"name\\\": \\\"TV Content Filter Interface\\\",\\n  \\\"description\\\": \\\"An interface that classifies TV shows based on their description to determine if they contain explicit sexual content or not\\\",\\n  \\\"function_name\\\": \\\"classify_tv_content\\\",\\n  \\\"input_args\\\": \\\"description\\\",\\n  \\\"return\\\": \\\"classification ('Explicit' or 'Safe')\\\",\\n  \\\"depend\\\": \\\"Hugging Face's transformers library and PyTorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "a pardoning judge", "synthesized text": "\"{\\n\\\"name\\\": \\\"Convict Pardoning Interface\\\",\\n\\\"description\\\": \\\"An interface using AI model to predict the probability of recidivism for a convict and returns a score indicating whether it would be a good idea to pardon this individual.\\\",\\n\\\"function_name\\\": \\\"predict_pardon\\\",\\n\\\"input_args\\\": {\\\"convict_details\\\": \\\"a dictionary containing relevant details about the convict, such as nature of the crime, behavior in prison, etc.\\\"},\\n\\\"return\\\": \\\"a score between 0 and 1 indicating the likelihood of recidivism. Lower score indicates lower risk of recidivism.\\\",\\n\\\"depend\\\": [\\\"python library: sklearn, pandas\\\", \\\"machine learning model: recidivism prediction model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young aspiring bodybuilder with Herculean determination and a hunger for knowledge", "synthesized text": "\"{\\n\\\"name\\\": \\\"Personalized Workout Routine Interface\\\",\\n\\\"description\\\": \\\"This interface generates a personalized workout routine based on the user's body type, fitness level, and goals.\\\",\\n\\\"function_name\\\": \\\"get_personalized_workout\\\",\\n\\\"input_args\\\": {\\n    \\\"body_type\\\": \\\"A string representing the user's body type\\\",\\n    \\\"fitness_level\\\": \\\"A string representing the user's fitness level\\\",\\n    \\\"goal\\\": \\\"A string representing the user's workout goal\\\"\\n},\\n\\\"return\\\": \\\"A string representing a weekly workout routine tailored to the user's needs.\\\",\\n\\\"depend\\\": \\\"Uses a machine learning model trained on a dataset of workout routines.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history professor who connects the travel vlogger's experiences to historical events and landmarks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Landmark Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to recognize historical landmarks in images and return information about them\\\",\\n\\\"function_name\\\": \\\"process_image\\\",\\n\\\"input_args\\\": \\\"path_to_img - string representing the path to an image file\\\",\\n\\\"return\\\": \\\"A dictionary containing information about the recognized historical landmark\\\",\\n\\\"depend\\\": \\\"Python Libraries - PIL, requests, io, transformers, torch; Web APIs - Landmark Information API; Machine Learning Models - google/vit-base-patch16-224-in21k\\\"\\n}\"", "description": "tool development"}
{"input persona": "A devoted wife who has stood by her husband throughout his military career and now supports him as he faces terminal illness", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pain Management Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface sets up regular reminders for medication administration.\\\",\\n\\\"function_name\\\": \\\"set_medication_reminder\\\",\\n\\\"input_args\\\": {\\n    \\\"medicine\\\": \\\"Name of the medication\\\",\\n    \\\"dosage\\\": \\\"Dosage of the medication\\\",\\n    \\\"timing\\\": \\\"The time (in 24-hour format) when the medication should be given\\\"\\n},\\n\\\"return\\\": \\\"This function runs indefinitely and does not return any value. It prints a reminder message and shows a system notification at the specified time every day.\\\",\\n\\\"depend\\\": \\\"Python's schedule library, time library, and os library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A marine engineer who provides expert technical advice in maritime accident investigations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vessel Speed Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the average speed of a ship between two timestamps using AIS data.\\\",\\n\\\"function_name\\\": \\\"get_vessel_speed\\\",\\n\\\"input_args\\\": [\\\"MMSI\\\", \\\"start_time\\\", \\\"end_time\\\"],\\n\\\"return\\\": \\\"Estimated speed in km/hr\\\",\\n\\\"depend\\\": [\\\"requests python library\\\", \\\"Vesseltracker AIS data API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A project manager who relies on the auditor's expertise to ensure project compliance and mitigate risks", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Compliance Audit Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a large language model to analyze project documentation for compliance issues and risks. Returns a structured report.\\\",\\n  \\\"function_name\\\": \\\"analyze_document\\\",\\n  \\\"input_args\\\": {\\n    \\\"document_text\\\": \\\"The text of the project documentation to be analyzed.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"report\\\": \\\"A structured report indicating the potential compliance issues and risks.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"json\\\", \\\"collections\\\"],\\n    \\\"machine learning models\\\": [\\\"OpenAI GPT-3\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a mid-tier manager working at AT&T.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Customer Churn Prediction Interface\\\", \\n\\\"description\\\": \\\"This interface takes a CSV file containing customer data and uses a pre-trained machine learning model to predict customer churn.\\\", \\n\\\"function_name\\\": \\\"predict_customer_churn\\\", \\n\\\"input_args\\\": \\\"csv_file_path\\\", \\n\\\"return\\\": \\\"A list of predictions indicating whether each customer will churn (1) or not (0)\\\", \\n\\\"depend\\\": \\\"Hugging Face's transformers library, pandas, PyTorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another junior developer who is also navigating the challenges of their first job and they form a support system for each other", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Review Interface\\\", \\n\\\"description\\\": \\\"This interface uses GitHub's API and a large language model to review the latest commit from a specified user and repository.\\\", \\n\\\"function_name\\\": \\\"code_review\\\", \\n\\\"input_args\\\": {\\\"user\\\": \\\"string\\\", \\\"repo\\\": \\\"string\\\"}, \\n\\\"return\\\": \\\"dictionary where the keys are the filenames and the values are the reviews.\\\", \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"PyGithub\\\", \\\"requests\\\"], \\\"Web APIs\\\": [\\\"GitHub's API\\\"], \\\"machine learning models\\\": [\\\"Large Language Model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An aspiring young bridge player who idolizes Judy Bramley", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bridge Hand Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a bridge hand as input and returns an evaluation of the hand using the High Card Points (HCP) method. The user only needs to input their hand, and our interface will return the total points of the hand.\\\",\\n\\\"function_name\\\": \\\"evaluate_bridge_hand\\\",\\n\\\"input_args\\\": \\\"hand\\\",\\n\\\"return\\\": \\\"total_hcp\\\",\\n\\\"depend\\\": \\\"Python built-in functions\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm an ex-college basketball player and a die-hard fan of the Arkansas-Pine Bluff Golden Lions men's basketball team.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Team Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches a team's statistics, including last game date, last game result, and team description from TheSportsDB API.\\\",\\n\\\"function_name\\\": \\\"get_team_stats\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"A dictionary containing the team description, the date of the last game and the result of the last game.\\\",\\n\\\"depend\\\": \\\"TheSportsDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A help desk technician who prefers straightforward solutions and has little patience for office gossip", "synthesized text": "\"{\\n\\\"name\\\": \\\"Internet Connectivity Check Interface\\\",\\n\\\"description\\\": \\\"Checks whether the device has internet connectivity by trying to reach a provided URL.\\\",\\n\\\"function_name\\\": \\\"check_internet_connectivity\\\",\\n\\\"input_args\\\": {\\\"url\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"boolean\\\",\\n\\\"depend\\\": \\\"requests Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior software engineer who specializes in AS3 (ActionScript 3)", "synthesized text": "\"{\\n  \\\"name\\\": \\\"AS3 to Python Code Conversion Interface\\\",\\n  \\\"description\\\": \\\"This interface converts AS3 (ActionScript 3) code to Python code.\\\",\\n  \\\"function_name\\\": \\\"convert_as3_to_python\\\",\\n  \\\"input_args\\\": {\\n    \\\"as3_code\\\": \\\"The AS3 code to be converted, provided as a string.\\\"\\n  },\\n  \\\"return\\\": \\\"Returns the equivalent Python code as a string.\\\",\\n  \\\"depend\\\": \\\"This function depends on a hypothetical 'code_converter' Python library or a similar functionality.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Mechanical engineer who treats every word related to \"space\" as a term of art.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Space Term Definition Interface\\\",\\n\\\"description\\\": \\\"This interface uses NASA's API to fetch the definition of space-related terms.\\\",\\n\\\"function_name\\\": \\\"get_space_term_definition\\\",\\n\\\"input_args\\\": \\\"term\\\",\\n\\\"return\\\": \\\"Definition of the space-related term\\\",\\n\\\"depend\\\": \\\"NASA's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A grassroots organizer empowering marginalized communities in Gary, Indiana", "synthesized text": "\"{\\n\\\"name\\\": \\\"Community Event Planner Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to plan and manage community events by creating them on Meetup.com.\\\",\\n\\\"function_name\\\": \\\"create_meetup_event\\\",\\n\\\"input_args\\\": {\\n    \\\"group_urlname\\\": \\\"The URL name of the Meetup group.\\\",\\n    \\\"event_name\\\": \\\"The name of the event.\\\",\\n    \\\"event_description\\\": \\\"A description of the event.\\\",\\n    \\\"event_time\\\": \\\"The time of the event, in milliseconds since the epoch.\\\"\\n},\\n\\\"return\\\": \\\"A message indicating whether the event was created successfully or the error message received.\\\",\\n\\\"depend\\\": \\\"requests library, Meetup API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An HR representative who provides a designated prayer room and ensures that the colleague's dietary needs are met during office events", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prayer Time Notifier and Office Event Menu Suggestion Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches the prayer times for a specific location and suggests recipes for an office event based on dietary restrictions.\\\",\\n\\\"function_name\\\": [\\\"get_prayer_times\\\", \\\"get_dietary_restricted_recipes\\\"],\\n\\\"input_args\\\": [\\\"city, country\\\", \\\"dietary_restriction\\\"],\\n\\\"return\\\": [\\\"Prayer timings for the day\\\", \\\"List of suggested recipes\\\"],\\n\\\"depend\\\": [\\\"requests library, Aladhan.com API, Spoonacular API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a big fan of Wuxia novels and the adrenaline rush of life and death showdowns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This function takes a text string as input and converts it to spoken word, saving the result in an mp3 file and returning the filename.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"The text you want to convert to speech\\\", \\\"language\\\": \\\"The language in which you want the text to be spoken (default is 'en')\\\", \\\"slow\\\": \\\"Whether you want the speech to be slow (default is False)\\\"},\\n\\\"return\\\": \\\"The name of the file where the spoken text is saved.\\\",\\n\\\"depend\\\": {\\\"python_library\\\": [\\\"gTTS\\\"], \\\"web_APIs\\\": [], \\\"ML_models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "一个刚从政治理论专业毕业的年轻学者，对行政学和党的建设有着浓厚兴趣。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legislation Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained BERT model to analyze a given legislation document and return its key points and topics.\\\",\\n\\\"function_name\\\": \\\"get_key_points_and_topics\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_file\\\": \\\"The path to the legislation document to be analyzed.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"key_points\\\": \\\"The key points extracted from the document.\\\",\\n    \\\"topics\\\": \\\"The main topics covered in the document.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"transformers\\\", \\\"torch\\\"],\\n    \\\"machine learning models\\\": [\\\"BertModel\\\", \\\"BertTokenizer\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A senior citizen who is an active member of a local support group for individuals with incontinence", "synthesized text": "\"{\\n\\\"name\\\": \\\"Incontinence Product Finder Interface\\\",\\n\\\"description\\\": \\\"Scrape incontinence product information from the web and return a list of products that match the user's specific needs.\\\",\\n\\\"function_name\\\": \\\"get_incontinence_products\\\",\\n\\\"input_args\\\": {\\n    \\\"requirements\\\": \\\"A list of strings representing the user's specific needs for incontinence products (e.g., 'for night-time use', 'for men', 'disposable')\\\"\\n},\\n\\\"return\\\": \\\"A list of product names that match the user's requirements.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries for web scraping\\\"\\n}\"", "description": "tool development"}
{"input persona": "The founder of a traditional betting company who believes that interactive user experiences are a fad", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Betting Odds Comparison Interface\\\",\\n\\\"description\\\": \\\"Compares the betting odds of a given match from multiple sports betting services.\\\",\\n\\\"function_name\\\": \\\"get_betting_odds\\\",\\n\\\"input_args\\\": {\\\"team1\\\": \\\"Name of the first team\\\", \\\"team2\\\": \\\"Name of the second team\\\"},\\n\\\"return\\\": \\\"A dictionary containing the odds of winning for each team from different betting services.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"betting service APIs\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow biochemist exploring the potential applications of enzymatic reactions in industrial processes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Enzyme Kinetics Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface simulates and plots the Michaelis-Menten kinetics of an enzymatic reaction given the initial concentrations of enzyme and substrate, and the reaction parameters.\\\",\\n\\\"function_name\\\": \\\"simulate_enzyme_kinetics\\\",\\n\\\"input_args\\\": [\\\"s0 - Initial concentration of substrate\\\", \\\"e0 - Initial concentration of enzyme\\\", \\\"v_max - Maximum rate of reaction\\\", \\\"k_m - Michaelis constant\\\", \\\"t_max - Maximum time for simulation (optional)\\\"],\\n\\\"return\\\": \\\"A plot showing the concentrations of substrate and product over time.\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"scipy.integrate.odeint\\\", \\\"matplotlib.pyplot\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An electrical engineer specializing in micro-electromechanical systems (MEMS) for drug delivery systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"MEMS Simulation Interface\\\",\\n\\\"description\\\": \\\"An interface for running simulations of micro-electromechanical systems (MEMS) using the FEniCS Project. Users can input the parameters of the MEMS device, and our interface will return the simulation results.\\\",\\n\\\"function_name\\\": \\\"run_MEMS_simulation\\\",\\n\\\"input_args\\\": {\\n    \\\"material_parameters\\\": \\\"A dictionary or string representing the material parameters for the MEMS device.\\\",\\n    \\\"boundary_conditions\\\": \\\"A dictionary or string representing the boundary conditions for the MEMS device.\\\",\\n    \\\"mesh_resolution\\\": \\\"An optional integer specifying the resolution of the mesh for the simulation. Default is 32.\\\"\\n},\\n\\\"return\\\": \\\"The displacement field `u` as a FEniCS `Function` object, which can be further manipulated or visualized using FEniCS or other libraries like Matplotlib.\\\",\\n\\\"depend\\\": \\\"FEniCS Project\\\"\\n}\"", "description": "tool development"}
{"input persona": "An intelligence officer seeking secure means of communication for field operatives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Encrypted Message Communication Interface\\\",\\n\\\"description\\\": \\\"This interface provides methods for secure communication. It allows users to encrypt and decrypt messages using a secret key.\\\",\\n\\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_message\\\", \\\"decrypt_message\\\"],\\n\\\"input_args\\\": [[\\\"None\\\"], [\\\"message\\\", \\\"key\\\"], [\\\"cipher_text\\\", \\\"key\\\"]],\\n\\\"return\\\": [\\\"key\\\", \\\"cipher_text\\\", \\\"plain_text\\\"],\\n\\\"depend\\\": [\\\"cryptography.fernet\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A college student who organizes donation drives and volunteers regularly at the shelter, inspired by the director's dedication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Donation Tracking Interface\\\",\\n\\\"description\\\": \\\"An interface for tracking donations. It uses an SQLite3 database to store donation data.\\\",\\n\\\"function_name\\\": \\\"track_donation\\\",\\n\\\"input_args\\\": [\\\"donor\\\", \\\"type\\\", \\\"quantity\\\"],\\n\\\"return\\\": \\\"Confirmation message of successful data entry\\\",\\n\\\"depend\\\": [\\\"SQLite3 Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an Italian independent musician who wasn't selected for the Sanremo Music Festival", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Genre Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow hub to classify the genre of a piece of music\\\",\\n\\\"function_name\\\": \\\"classify_music_genre\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the music file\\\"},\\n\\\"return\\\": \\\"Predicted genre of the music\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Numpy, Librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student interested in learning about forex trading as a way to earn extra income", "synthesized text": "\"{\\n\\\"name\\\": \\\"Forex Rate Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the current exchange rate for a specified forex pair using the ExchangeRatesAPI.\\\",\\n\\\"function_name\\\": \\\"fetch_forex_rate\\\",\\n\\\"input_args\\\": {\\\"pair\\\": \\\"a string representing the forex pair to fetch the rate for, e.g. 'USD/EUR'\\\"},\\n\\\"return\\\": \\\"the current exchange rate for the specified forex pair, as a float\\\",\\n\\\"depend\\\": \\\"requests library, ExchangeRatesAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Luxembourgish sports commentator who isn't very fond of cricket", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cricket Match Score Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches the current cricket match scores using the cricAPI. User needs to input the match id, and the interface will return the match scores and status.\\\",\\n\\\"function_name\\\": \\\"get_cricket_match_score\\\",\\n\\\"input_args\\\": [\\\"match_id\\\"],\\n\\\"return\\\": {\\\"team1\\\": \\\"string\\\", \\\"team2\\\": \\\"string\\\", \\\"score\\\": \\\"string\\\", \\\"matchStarted\\\": \\\"boolean\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"cricAPI\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一个对跨境交通措施持保守态度的香港居民。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Currency Exchange Rate Interface\\\",\\n  \\\"description\\\": \\\"An interface to get the current exchange rate between two types of currency.\\\",\\n  \\\"function_name\\\": \\\"get_exchange_rate\\\",\\n  \\\"input_args\\\": [\\\"from_currency\\\", \\\"to_currency\\\"],\\n  \\\"return\\\": \\\"current exchange rate between the two currencies\\\",\\n  \\\"depend\\\": [\\\"Open Exchange Rates API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An academic researcher studying the impact of quantum computing on encryption algorithms", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Quantum Simulation Interface\\\",\\n  \\\"description\\\": \\\"An interface to simulate the execution of a quantum circuit and return the result.\\\",\\n  \\\"function_name\\\": \\\"run_quantum_circuit\\\",\\n  \\\"input_args\\\": \\\"A string representing a quantum circuit in QASM format\\\",\\n  \\\"return\\\": \\\"A dictionary representing the result of running the quantum circuit\\\",\\n  \\\"depend\\\": \\\"qiskit Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a person who idolizes employees like Ah Qi", "synthesized text": "\"{\\n\\\"name\\\": \\\"Employee Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface fetches employee recognitions and accomplishments from BambooHR.\\\",\\n\\\"function_name\\\": \\\"get_employee_recognition\\\",\\n\\\"input_args\\\": {\\n    \\\"employee_id\\\": \\\"The ID of the employee\\\"\\n},\\n\\\"return\\\": \\\"A list of recognitions and accomplishments of the employee.\\\",\\n\\\"depend\\\": \\\"BambooHR API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retired professional Indonesian footballer who played in the same era as Ferril Raymond Hattu", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Player Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the performance statistics of a given football player, including games played, goals scored, assists, and more.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": [\\\"player_name\\\"],\\n\\\"return\\\": \\\"A dictionary with player's statistics including games played, goals scored, assists, yellow cards, and red cards\\\",\\n\\\"depend\\\": \\\"requests library, football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Radstock Co-op loyal customer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to compare the prices of a specific product across different Co-op stores.\\\",\\n\\\"function_name\\\": \\\"get_product_prices\\\",\\n\\\"input_args\\\": {\\n    \\\"product_name\\\": \\\"The name of the product to compare prices.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with keys being the store names and values being the prices of the product in those stores.\\\",\\n\\\"depend\\\": \\\"This function leverages the API from a price comparison service.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former military instructor who served in the South Scanian Regiment (P 7)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Vehicle Identification Interface\\\",\\n\\\"description\\\": \\\"A high-level interface for identifying and classifying military vehicles using deep learning. The user simply inputs the path to an image file, and the interface returns the type of military vehicle in the image.\\\",\\n\\\"function_name\\\": \\\"identify_military_vehicle\\\",\\n\\\"input_args\\\": \\\"path_to_image\\\",\\n\\\"return\\\": \\\"type_of_vehicle\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A technology journalist who reviews and recommends file storage solutions for businesses", "synthesized text": "\"{\\n\\\"name\\\": \\\"File Storage Cost Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the cost of storage on various platforms given the number of users and the amount of storage required in GBs.\\\",\\n\\\"function_name\\\": \\\"calculate_storage_cost\\\",\\n\\\"input_args\\\": [\\\"num_users\\\", \\\"storage_in_gb\\\"],\\n\\\"return\\\": \\\"A dictionary with the cost of storage on Google Drive, Dropbox, Box, and OneDrive.\\\",\\n\\\"depend\\\": \\\"Python's requests library, APIs from Google Drive, Dropbox, Box, OneDrive\\\"\\n}\"", "description": "tool development"}
{"input persona": "A writing coach specialises in non-fiction manuscript development", "synthesized text": "\"{\\n\\\"name\\\": \\\"Manuscript Readability Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface computes a variety of readability scores for a manuscript. The scores indicate the reading difficulty and grade level required to understand the text.\\\",\\n\\\"function_name\\\": \\\"assess_readability\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A dictionary of readability scores\\\",\\n\\\"depend\\\": \\\"Python textstat library\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个对城市发展充满好奇的中学生。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u57ce\\u5e02\\u53d1\\u5c55\\u4fe1\\u606f\\u83b7\\u53d6\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u8be5\\u63a5\\u53e3\\u80fd\\u591f\\u6839\\u636e\\u8f93\\u5165\\u7684\\u57ce\\u5e02\\u540d\\u79f0\\uff0c\\u8fd4\\u56de\\u8be5\\u57ce\\u5e02\\u7684\\u5f00\\u653e\\u5ea6\\u3001\\u53d1\\u5c55\\u7a0b\\u5ea6\\u7b49\\u4fe1\\u606f\\u3002\\\",\\n\\\"function_name\\\": \\\"get_city_development_info\\\",\\n\\\"input_args\\\": [\\\"city_name\\\"],\\n\\\"return\\\": \\\"\\u4e00\\u4e2a\\u5305\\u542b\\u57ce\\u5e02\\u5f00\\u653e\\u5ea6\\u3001\\u53d1\\u5c55\\u7a0b\\u5ea6\\u7b49\\u4fe1\\u606f\\u7684\\u5b57\\u5178\\\",\\n\\\"depend\\\": \\\"Global Open City Index\\u7684API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An art curator hosting an exhibition on the history of typography and its impact on visual communication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Font Recognition Interface\\\", \\n\\\"description\\\": \\\"This interface identifies the font used in a given image. It is useful for art curators, graphic designers, and anyone interested in typography.\\\", \\n\\\"function_name\\\": \\\"identify_font\\\", \\n\\\"input_args\\\": \\\"image_path - path of the image file\\\", \\n\\\"return\\\": \\\"Name of the font used in the image\\\", \\n\\\"depend\\\": \\\"tensorflow, cv2, numpy, tensorflow.keras\\\"\\n}\"", "description": "tool development"}
{"input persona": "an ardent fan of the \"Unbreakable Kimmy Schmidt\" series", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Episode Summarization Interface\\\",\\n\\\"description\\\": \\\"This interface fetches episode summaries of the 'Unbreakable Kimmy Schmidt' series using The Movie Database (TMDb) API.\\\",\\n\\\"function_name\\\": \\\"get_episode_summary\\\",\\n\\\"input_args\\\": {\\\"season_number\\\": \\\"integer\\\", \\\"episode_number\\\": \\\"integer\\\"},\\n\\\"return\\\": \\\"string - an overview of the requested episode.\\\",\\n\\\"depend\\\": {\\\"web_APIs\\\": [\\\"The Movie Database (TMDb) API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "an urban planner in Coimbatore, India", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Urban Development Planning Interface\\\",\\n  \\\"description\\\": \\\"Predicts the environmental and traffic impact of a new building in a given location using OpenStreetMap data and a Machine Learning model\\\",\\n  \\\"function_name\\\": \\\"predict_impact\\\",\\n  \\\"input_args\\\": {\\n    \\\"lat\\\": \\\"Latitude of the location\\\",\\n    \\\"lon\\\": \\\"Longitude of the location\\\",\\n    \\\"building\\\": {\\n      \\\"height\\\": \\\"Height of the new building\\\",\\n      \\\"floors\\\": \\\"Number of floors of the new building\\\",\\n      \\\"area\\\": \\\"Total area of the new building\\\"\\n    }\\n  },\\n  \\\"return\\\": {\\n    \\\"environmental_impact\\\": \\\"Predicted environmental impact of the new building\\\",\\n    \\\"traffic_impact\\\": \\\"Predicted traffic impact of the new building\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"tensorflow\\\", \\\"keras\\\", \\\"sklearn\\\"],\\n    \\\"web_APIs\\\": [\\\"OpenStreetMap\\\"],\\n    \\\"machine_learning_models\\\": [\\\"Urban Planning Model\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A science enthusiast who investigates the physics and mechanics behind police chases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speed to Distance Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the distance covered by a vehicle given its speed and the time it has traveled. This is based on the basic physics principle that distance equals speed multiplied by time.\\\",\\n\\\"function_name\\\": \\\"calculate_distance\\\",\\n\\\"input_args\\\": {\\n    \\\"speed\\\": \\\"The speed of the vehicle in mph or km/h. For example, '60 mph' or '100 km/h'.\\\",\\n    \\\"time\\\": \\\"The time the vehicle has been in motion in hours, minutes, or seconds. For example, '2 hours', '120 min', or '7200 sec'.\\\"\\n    },\\n\\\"return\\\": \\\"A string stating the distance covered by the vehicle in kilometers.\\\",\\n\\\"depend\\\": \\\"Python basic library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A university lecturer of sociology expressing concern over society's diminishing interest in the arts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Arts Popularity Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google Trends to analyze the popularity trend of a specified art form over the last five years.\\\",\\n\\\"function_name\\\": \\\"analyze_arts_popularity_trend\\\",\\n\\\"input_args\\\": [\\\"art_form\\\"],\\n\\\"return\\\": \\\"List of popularity values representing the trend of the specified art form over the last five years.\\\",\\n\\\"depend\\\": \\\"pytrends library, Google Trends API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired English professor who leads a book club dedicated to exploring humor in literature", "synthesized text": "\"{\\n\\\"name\\\": \\\"Joke Generation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Hugging Face's GPT-2 model to generate jokes in the style of a specific author or book. The user provides the style (author or book name) as input, and the interface returns a generated joke.\\\",\\n\\\"function_name\\\": \\\"generate_joke\\\",\\n\\\"input_args\\\": {\\\"style\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (joke text)\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"transformers\\\"], \\\"Machine Learning Models\\\": [\\\"gpt2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A golf club manufacturer who designs and produces state-of-the-art golf equipment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Golf Club Design Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface optimizes the design of golf clubs based on the input parameters. The function uses a pre-trained machine learning model to predict the optimal design.\\\",\\n\\\"function_name\\\": \\\"optimize_golf_club_design\\\",\\n\\\"input_args\\\": [\\\"head_shape\\\", \\\"material\\\", \\\"shaft_length\\\", \\\"weight_distribution\\\"],\\n\\\"return\\\": \\\"An optimized design for the golf club.\\\",\\n\\\"depend\\\": \\\"This function depends on the sklearn library for the machine learning model, and pandas for data manipulation.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A taxi driver transitioning to an all-electric fleet and seeking advice on charging infrastructure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Electric Vehicle Charging Station Locator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the NREL API to find nearby electric vehicle charging stations based on the user's location and a specified search radius.\\\",\\n\\\"function_name\\\": \\\"get_nearby_ev_charging_stations\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"The user's current location, as a string\\\",\\n    \\\"radius_km\\\": \\\"The search radius in kilometers, as an integer\\\"\\n},\\n\\\"return\\\": \\\"A list of the names of the top 10 closest electric vehicle charging stations.\\\",\\n\\\"depend\\\": \\\"requests library, NREL API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renowned political scientist who advises on research methodologies and provides insights into the academic publishing process.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Academic Paper Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the main keywords from the abstract and conclusion of an academic paper. The user inputs the abstract and conclusion text, and the function returns a summary of each, which could be interpreted as the main keywords or points.\\\",\\n\\\"function_name\\\": \\\"analyze_paper\\\",\\n\\\"input_args\\\": [\\\"abstract_text\\\", \\\"conclusion_text\\\"],\\n\\\"return\\\": \\\"A dictionary with two keys: 'abstract_keywords' and 'conclusion_keywords'. Each key corresponds to the main keywords or points extracted from the respective section of the paper.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a major critic and rival of Xhafer Tahiri and his party, the Democratic League of Kosovo", "synthesized text": "\"{\\n\\\"name\\\": \\\"Political Rival Information Interface\\\",\\n\\\"description\\\": \\\"Extracts information about a political figure's rivals and critics from their Wikipedia page\\\",\\n\\\"function_name\\\": \\\"get_political_rival_info\\\",\\n\\\"input_args\\\": \\\"politician_name\\\",\\n\\\"return\\\": \\\"A string containing a sentence from the Wikipedia page that mentions the politician's rivals or critics\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent who worries about the potential negative effects of excessive time spent in virtual reality", "synthesized text": "\"{\\n\\\"name\\\": \\\"Screen Time Control Interface\\\",\\n\\\"description\\\": \\\"An interface that monitors the runtime of a specified application (virtual reality) and terminates it if it runs longer than a specified time limit.\\\",\\n\\\"function_name\\\": \\\"monitor_vr_application\\\",\\n\\\"input_args\\\": {\\n    \\\"app_name\\\": \\\"The name of the application's process to monitor\\\",\\n    \\\"time_limit_hours\\\": \\\"The maximum allowable run time for the application in hours\\\"\\n},\\n\\\"return\\\": \\\"None. The function runs indefinitely and terminates the application process if it exceeds the time limit.\\\",\\n\\\"depend\\\": \\\"Python's time, os and psutil libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film director from Jersey City, New Jersey.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Script Breakdown Interface\\\",\\n\\\"description\\\": \\\"An interface to breakdown a film script into characters, actions, dialogues, and scene changes. The input is the script text and the output is a dictionary containing the breakdown.\\\",\\n\\\"function_name\\\": \\\"script_breakdown\\\",\\n\\\"input_args\\\": [\\\"script_text\\\"],\\n\\\"return\\\": {\\\"character_count\\\": \\\"A dictionary with character names as keys and their count as values\\\", \\\"action_descriptions\\\": \\\"A list of sentences containing action descriptions\\\", \\\"dialogue_breakdown\\\": \\\"A list of sentences containing dialogues\\\", \\\"scene_changes\\\": \\\"A number representing scene changes in the script.\\\"},\\n\\\"depend\\\": [\\\"NLTK\\\", \\\"Spacy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A storage hardware manufacturer interested in implementing the computer scientist's algorithms in their products", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disk Space Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface returns a detailed report of the disk usage of a given directory, including the total, used, and free space. It is useful for storage hardware manufacturers to understand the disk usage of a particular directory and to make necessary decisions for efficiently implementing computer scientist's algorithms in their products.\\\",\\n\\\"function_name\\\": \\\"get_disk_usage\\\",\\n\\\"input_args\\\": \\\"directory_path - The path of the directory you want to check the disk usage for\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'total_space_GB', 'used_space_GB', and 'free_space_GB' representing the total, used, and free space in the given directory, respectively.\\\",\\n\\\"depend\\\": \\\"Python's os and shutil libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "a football enthusiast who supports Millwall F.C.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface returns the match statistics of a given team's match on a specific date. The statistics include the names of the home and away teams, the score, and detailed match statistics if available.\\\",\\n\\\"function_name\\\": \\\"get_match_statistics\\\",\\n\\\"input_args\\\": [\\\"team_name\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"A dictionary containing the names of the home and away teams, the score, and detailed match statistics if available.\\\",\\n\\\"depend\\\": \\\"requests library, football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a lawyer with a keen interest in the history of religious freedom and secular state development, and I appreciate the evolution of the relationship between church and state in European history.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Extraction from Historical Documents Interface\\\",\\n\\\"description\\\": \\\"This interface uses Optical Character Recognition (OCR) technology to extract text from scanned historical documents or manuscripts.\\\",\\n\\\"function_name\\\": \\\"extract_text_from_image\\\",\\n\\\"input_args\\\": {\\n    \\\"image_path\\\": \\\"Path to the image file\\\"\\n},\\n\\\"return\\\": \\\"Extracted text from the document in string format\\\",\\n\\\"depend\\\": \\\"Python libraries: pytesseract, PIL\\\"\\n}\"", "description": "tool development"}
{"input persona": "A European historian focusing on comparative historical analysis between American Civil War and European conflicts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and summarizes news articles about two historical events, allowing for comparative analysis.\\\",\\n\\\"function_name\\\": \\\"compare_historical_events\\\",\\n\\\"input_args\\\": [\\\"event1\\\", \\\"event2\\\", \\\"api_key\\\"],\\n\\\"return\\\": \\\"A dictionary containing lists of summaries for each event.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"transformers\\\"], \\\"web APIs\\\": [\\\"Event Registry API\\\"], \\\"machine learning models\\\": [\\\"Summarization pipeline from Hugging Face Transformers\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A web developer who relies on NGINX for high-performance web server deployments", "synthesized text": "\"{\\n\\\"name\\\": \\\"NGINX Config Validation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the NGINX command-line tool to check configurations for errors. The user only needs to input the path to the NGINX configuration file, and our interface will return whether the configuration is valid or not, and any associated error messages.\\\",\\n\\\"function_name\\\": \\\"validate_nginx_config\\\",\\n\\\"input_args\\\": \\\"config_path\\\",\\n\\\"return\\\": \\\"A dictionary object that contains a 'valid' key, which will be True if the configuration is valid and False otherwise, and an 'error' key, which will contain any error message if the configuration is not valid, otherwise None.\\\",\\n\\\"depend\\\": \\\"NGINX command-line tool\\\"\\n}\"", "description": "tool development"}
{"input persona": "A digital artist who creates virtual reconstructions of ancient South East Asian sites", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Reconstruction Interface\\\",\\n\\\"description\\\": \\\"This interface takes a directory of images as input, and uses COLMAP via the Open3D library to create a 3D model of the subject in the images. The output is a .ply file that can be viewed in any 3D viewing software like Meshlab or CloudCompare.\\\",\\n\\\"function_name\\\": \\\"reconstruct_3D_model\\\",\\n\\\"input_args\\\": {\\\"image_directory\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (path to the output .ply file)\\\",\\n\\\"depend\\\": [\\\"open3d\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a woman born and raised in Laguna, fascinated with Filipino history and the contributions of its political figures.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Date Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface that extracts dates from a text description of a historical event using a pre-trained model from HuggingFace.\\\",\\n\\\"function_name\\\": \\\"extract_dates_from_text\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"Date(s) mentioned in the input text.\\\",\\n\\\"depend\\\": [\\\"HuggingFace's transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A human rights attorney frequently traveling to provide legal assistance in post-conflict zones", "synthesized text": "\"{\\n\\\"name\\\": \\\"Safe Travel Advisory Interface\\\",\\n\\\"description\\\": \\\"This interface returns safety information and advice for a specific country using the Travel Advisory API.\\\",\\n\\\"function_name\\\": \\\"get_travel_advisory\\\",\\n\\\"input_args\\\": {\\\"country\\\": \\\"The ISO country code (2-letter) of the country to retrieve the safety information for.\\\"},\\n\\\"return\\\": {\\\"country\\\": \\\"The name of the country.\\\", \\\"safety_score\\\": \\\"The safety score of the country.\\\", \\\"advisory_text\\\": \\\"The number of active travel advisories for the country.\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"Travel Advisory API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A biker who wears their passion for the club proudly on their sleeve, quite literally", "synthesized text": "\"{\\n\\\"name\\\": \\\"Motorcycle Club Patch Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that recognizes and provides information about motorcycle club patches using Google's Cloud Vision API.\\\",\\n\\\"function_name\\\": \\\"recognize_mc_patch\\\",\\n\\\"input_args\\\": [\\\"patch_image_path\\\"],\\n\\\"return\\\": \\\"List of text descriptions detected in the patch image\\\",\\n\\\"depend\\\": \\\"Google Cloud Vision API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A marketing specialist with expertise in targeting and engaging Android and iOS users", "synthesized text": "\"{\\n\\\"name\\\": \\\"App Store Scraper Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes the metadata of a given app from the App Store (for iOS apps) or Google Play Store (for Android apps). The metadata includes the app's title, description, developer, ratings, and reviews.\\\",\\n\\\"function_name\\\": \\\"get_app_metadata\\\",\\n\\\"input_args\\\": {\\n    \\\"app_name\\\": \\\"The name of the app to be scraped.\\\",\\n    \\\"platform\\\": \\\"The platform of the app. It can be either 'ios' or 'android'.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing the app's metadata.\\\",\\n\\\"depend\\\": \\\"This function uses the 'app_store_scraper' and 'google_play_scraper' Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher investigating the role of gender in post-war reconstruction", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gender Analysis in Texts Interface\\\",\\n\\\"description\\\": \\\"This interface uses Named Entity Recognition (NER) to count the number of male and female entities mentioned in a given text.\\\",\\n\\\"function_name\\\": \\\"gender_analysis_in_texts\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"Path to the text file\\\"},\\n\\\"return\\\": {\\\"Male\\\": \\\"Count of male entities\\\", \\\"Female\\\": \\\"Count of female entities\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"dbmdz/bert-large-cased-finetuned-conll03-english\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A retired pilot who spends evenings stargazing from their backyard", "synthesized text": "\"{\\n\\\"name\\\": \\\"Star Position Prediction\\\",\\n\\\"description\\\": \\\"Predicts the position (azimuth and altitude) of a particular star at a given time based on the user's geographical coordinates\\\",\\n\\\"function_name\\\": \\\"get_star_position\\\",\\n\\\"input_args\\\": {\\n    \\\"latitude\\\": \\\"The latitude of the user's location\\\",\\n    \\\"longitude\\\": \\\"The longitude of the user's location\\\",\\n    \\\"star_name\\\": \\\"The name of the star\\\",\\n    \\\"time\\\": \\\"The time at which to predict the star's position (format: 'YYYY-MM-DDTHH:MM:SS')\\\"\\n},\\n\\\"return\\\": {\\n    \\\"altitude\\\": \\\"The altitude of the star in degrees\\\",\\n    \\\"azimuth\\\": \\\"The azimuth of the star in degrees\\\"\\n},\\n\\\"depend\\\": \\\"Skyfield API (Python library for astronomy)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An IT professional who is not very fond of JavaScript, 显然我对JS的吐槽每天都尚未完结。", "synthesized text": "\"{\\n\\\"name\\\": \\\"JavaScript Minification Interface\\\",\\n\\\"description\\\": \\\"This interface minifies a JavaScript file. It accepts the path to a JavaScript file and returns a minified version of the JavaScript file.\\\",\\n\\\"function_name\\\": \\\"minify_javascript\\\",\\n\\\"input_args\\\": [\\\"path_to_js_file\\\"],\\n\\\"return\\\": \\\"Minified JavaScript as a string.\\\",\\n\\\"depend\\\": \\\"Python library 'jsmin'\\\"\\n}\"", "description": "tool development"}
{"input persona": "An artist who is fascinated by the psychology of visual perception and its impact on consumer preferences", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Palette Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to extract the dominant colors from an image. Useful for artists who want to understand the color palette of popular consumer goods, websites, or advertisements.\\\",\\n\\\"function_name\\\": \\\"extract_colors\\\",\\n\\\"input_args\\\": {\\n    \\\"image_path\\\": \\\"String representing the path to the image file\\\",\\n    \\\"num_colors\\\": \\\"Integer representing the number of dominant colors to extract (default is 5)\\\"\\n},\\n\\\"return\\\": \\\"List of dominant colors (each color represented as a list of R, G, B values)\\\",\\n\\\"depend\\\": \\\"Python libraries: OpenCV, numpy, sklearn.cluster.KMeans\\\"\\n}\"", "description": "tool development"}
{"input persona": "a customer at Uber Eats who just ordered a burger and fries for lunch", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Delivery Time Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Uber Eats API to get the estimated delivery time for a specific order.\\\",\\n\\\"function_name\\\": \\\"get_estimated_delivery_time\\\",\\n\\\"input_args\\\": [\\\"order_id\\\"],\\n\\\"return\\\": \\\"Estimated delivery time in minutes\\\",\\n\\\"depend\\\": \\\"Uber Eats API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a biologist working in a research station in Antarctica", "synthesized text": "\"{\\n\\\"name\\\": \\\"Penguin Image Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a TensorFlow Hub model to classify images of penguins into species. The user inputs the file path to an image, and the interface returns the predicted species of the penguin.\\\",\\n\\\"function_name\\\": \\\"classify_penguin\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The file path to an image of a penguin.\\\"\\n},\\n\\\"return\\\": \\\"The predicted species of the penguin in the image.\\\",\\n\\\"depend\\\": \\\"This function depends on the TensorFlow and TensorFlow Hub Python libraries, and the 'aiy/vision/classifier/birds_species_V1' model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A symphony orchestra conductor seeking advice on improving the acoustics of their concert hall", "synthesized text": "\"{\\n\\\"name\\\": \\\"Room Acoustic Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes room acoustics by returning the room's reverberation time and echo density using an audio file recorded in the room.\\\",\\n\\\"function_name\\\": \\\"calculate_reverb_and_echo\\\",\\n\\\"input_args\\\": [\\\"path_to_audio\\\"],\\n\\\"return\\\": \\\"Reverberation time (RT60) and echo density of the room\\\",\\n\\\"depend\\\": [\\\"librosa, numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A skeptical but practical medical professional with immense experience in digestive diseases and nutrition, presently exploring leadership opportunities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutrition Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Edamam Nutrition Analysis API to provide detailed nutrition data for a specific food or meal. The user only needs to input the name of the food or meal, and the interface will return the nutrition information.\\\",\\n\\\"function_name\\\": \\\"get_nutrition_info\\\",\\n\\\"input_args\\\": \\\"food_name\\\",\\n\\\"return\\\": \\\"A dictionary containing detailed nutrition information for the specified food or meal.\\\",\\n\\\"depend\\\": \\\"Edamam Nutrition Analysis API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular YouTuber who creates step-by-step PHP tutorials for beginners", "synthesized text": "\"{\\n\\\"name\\\": \\\"PHP Syntax Highlighting Interface\\\",\\n\\\"description\\\": \\\"This interface takes PHP code as input and returns the highlighted PHP code in HTML format. This can be particularly useful for YouTubers or bloggers who post code on their websites and want the syntax to be automatically highlighted for better readability.\\\",\\n\\\"function_name\\\": \\\"highlight_php_syntax\\\",\\n\\\"input_args\\\": {\\\"php_code\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (highlighted PHP code in HTML format)\\\",\\n\\\"depend\\\": \\\"Pygments library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A farmer who enjoys watching the hot air balloons float peacefully over their fields", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hot Air Balloon Weather Suitability Interface\\\",\\n\\\"description\\\": \\\"This interface takes a location as an input and returns a suitability rating for hot air balloon flying based on current weather conditions. It uses weather information from OpenWeatherMap to determine suitability based on temperature and wind speed.\\\",\\n\\\"function_name\\\": \\\"balloon_suitability\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"A string stating whether the conditions are suitable for hot air balloon flying based on temperature and wind speed.\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young military spouse seeking a home near the base to accommodate their growing family", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses real estate web APIs to find suitable homes for a growing family based on the desired location and family size.\\\",\\n\\\"function_name\\\": \\\"get_family_suitable_homes\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"family_size\\\"],\\n\\\"return\\\": \\\"List of addresses of suitable homes\\\",\\n\\\"depend\\\": \\\"Web API (Real Estate Service)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A veteran esports coach who tries to calm down the rival player and channel their hot-headedness into focused gameplay", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Emotion Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained deep learning model to recognize the dominant emotion of the speaker in an audio file.\\\",\\n\\\"function_name\\\": \\\"recognize_emotion\\\",\\n\\\"input_args\\\": \\\"path_to_audio - a string that represents the path to the audio file.\\\",\\n\\\"return\\\": \\\"The dominant emotion of the speaker in the audio file. The returned value will be an integer as follows: 0 for 'neutral', 1 for 'calm', 2 for 'happy', 3 for 'sad', 4 for 'angry', 5 for 'fearful', 6 for 'disgust', 7 for 'surprised'.\\\",\\n\\\"depend\\\": \\\"Python libraries: tensorflow, tensorflow_hub, pydub; Machine Learning Model from TensorFlow Hub: 'https://tfhub.dev/google/speech_emotion_recognition/1'\\\"\\n}\"", "description": "tool development"}
{"input persona": "a middle-aged Brazilian Jiu-Jitsu practitioner who has followed the rise of the Musumecis", "synthesized text": "\"{\\n  \\\"name\\\": \\\"BJJ Competition Result Lookup Interface\\\",\\n  \\\"description\\\": \\\"An interface that retrieves the competition results of a specific Brazilian Jiu-Jitsu (BJJ) athlete from the BJJ Heroes API.\\\",\\n  \\\"function_name\\\": \\\"get_bjj_competition_results\\\",\\n  \\\"input_args\\\": \\\"athlete_name\\\",\\n  \\\"return\\\": \\\"Athlete's competition history or error message if no results found.\\\",\\n  \\\"depend\\\": \\\"requests library, BJJ Heroes API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An electric vehicle manufacturer offering a collaboration to develop a hybrid electric bicycle", "synthesized text": "\"{\\n\\\"name\\\": \\\"Electric Bike Range Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the range of a hybrid electric bike based on parameters such as rider weight, terrain, level of electric assist, and weather.\\\",\\n\\\"function_name\\\": \\\"predict_bike_range\\\",\\n\\\"input_args\\\": {\\\"weight\\\": \\\"float\\\", \\\"terrain\\\": \\\"int\\\", \\\"assist_level\\\": \\\"int\\\", \\\"weather\\\": \\\"int\\\"},\\n\\\"return\\\": \\\"float\\\",\\n\\\"depend\\\": \\\"Numpy, Pandas, Scikit-Learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "An immigration lawyer specializing in visa and residency applications for international prospective medical students", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Visa Eligibility Check Interface\\\",\\n  \\\"description\\\": \\\"An interface to check visa eligibility for international prospective medical students by inputting their nationality, prospective university, and field of study.\\\",\\n  \\\"function_name\\\": \\\"check_visa_eligibility\\\",\\n  \\\"input_args\\\": {\\n    \\\"nationality\\\": \\\"The nationality of the student\\\",\\n    \\\"university\\\": \\\"The university where the student plans to study\\\",\\n    \\\"field_of_study\\\": \\\"The field of study the student is interested in\\\"\\n  },\\n  \\\"return\\\": \\\"A JSON object containing visa eligibility information\\\",\\n  \\\"depend\\\": \\\"Web APIs from the U.S. Department of State or other visa information providers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A native of Governador Valadares, Brazil who admired and respected Ermano Batista Filho in his political career", "synthesized text": "\"{\\n\\\"name\\\": \\\"Political News Search Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the latest news related to a given politician using the News API. The function returns the top 5 latest news articles related to the politician.\\\",\\n\\\"function_name\\\": \\\"fetch_latest_news\\\",\\n\\\"input_args\\\": \\\"politician_name\\\",\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary contains the title of the news article and the url to access it.\\\",\\n\\\"depend\\\": \\\"News API\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a 55-year-old conservative comic book fan who left the comics community due to the political drama", "synthesized text": "\"{\\n\\\"name\\\": \\\"Comic Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends comic books based on the user's political preference using a pre-trained BERT model for text classification.\\\",\\n\\\"function_name\\\": \\\"recommend_comics\\\",\\n\\\"input_args\\\": [\\\"political_preference\\\"],\\n\\\"return\\\": \\\"A list of recommended comic books that align with the user's political views.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\", \\\"torch\\\", \\\"json\\\"], \\\"machine learning models\\\": [\\\"bert-base-uncased\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A window cleaner who provides access to unique vantage points for the photographer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Elevation Image Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Street View Static API to get an image of a building from a unique perspective. It can be useful for photographers looking for new perspectives or for window cleaners to understand the structure of the building before starting their work.\\\",\\n\\\"function_name\\\": \\\"get_building_image\\\",\\n\\\"input_args\\\": [\\\"address\\\"],\\n\\\"return\\\": \\\"Image content\\\",\\n\\\"depend\\\": \\\"Google Street View Static API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud Dalit activist whose mission is to educate others about B. R. Ambedkar and his influence on social justice in India", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ambedkar Quotes Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a specified number of quotes from B. R. Ambedkar by scraping a website containing his quotes.\\\",\\n\\\"function_name\\\": \\\"get_ambedkar_quotes\\\",\\n\\\"input_args\\\": [\\\"num_quotes\\\"],\\n\\\"return\\\": \\\"A list of B. R. Ambedkar quotes\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A computer science professor who specializes in data structures and educates students on various data serialization methods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Serialization Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a Python data structure (like a list, dictionary, or custom object) and a format ('json' or 'pickle'), then returns the serialized string in the specified format.\\\",\\n\\\"function_name\\\": \\\"serialize_data\\\",\\n\\\"input_args\\\": {\\n    \\\"data_structure\\\": \\\"The Python data structure to be serialized\\\",\\n    \\\"format\\\": \\\"The format to serialize the data structure in, either 'json' or 'pickle'\\\"\\n},\\n\\\"return\\\": \\\"A serialized string of the input data structure in the specified format\\\",\\n\\\"depend\\\": \\\"Python json and pickle libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "averse to dolls and uninformed about the market for dolls", "synthesized text": "\"{\\n\\\"name\\\": \\\"Doll Market Price Checking Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a doll as input and returns the average price for the doll based on current listings on eBay.\\\",\\n\\\"function_name\\\": \\\"get_average_doll_price\\\",\\n\\\"input_args\\\": \\\"doll_name - A string representing the name of the doll.\\\",\\n\\\"return\\\": \\\"The average price of the doll on eBay. Returns 'No results found' if there are no listings for the doll.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries, eBay's search listings\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biology teacher incorporating statistics into their research on population growth and ecological patterns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Population Growth Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts future population growth based on past data.\\\",\\n\\\"function_name\\\": \\\"predict_population_growth\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A dictionary with years as keys and predicted population as values.\\\",\\n\\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "a first responder in Caro who enjoyed attending community activities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emergency Event Notification Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch information about upcoming events in a given category from Eventbrite for a location. The current location is set to Caro.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_events\\\",\\n\\\"input_args\\\": \\\"category\\\",\\n\\\"return\\\": \\\"List of upcoming event names\\\",\\n\\\"depend\\\": \\\"Eventbrite API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A historian who also runs a blog documenting famous personalities in the space of cryptocurrency.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cryptocurrency Historical Price Interface\\\",\\n\\\"description\\\": \\\"This interface returns the price of a given cryptocurrency on a specified date. It uses the CoinGecko API to fetch the data.\\\",\\n\\\"function_name\\\": \\\"get_historical_price\\\",\\n\\\"input_args\\\": [\\\"crypto_name\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"The price of the specified cryptocurrency on the specified date in USD or an appropriate error message\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"CoinGecko API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A literary critic who examines the Marquis de Sade's texts from a psychological perspective", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes the complexity of a text by considering various readability indices and the frequency distribution of words.\\\",\\n\\\"function_name\\\": \\\"analyze_text_complexity\\\",\\n\\\"input_args\\\": \\\"file_path - the path to the text file\\\",\\n\\\"return\\\": \\\"A dictionary with the Flesch Reading Ease score, Automated Readability Index, Dale-Chall Readability Score, and the 10 most common words in the text.\\\",\\n\\\"depend\\\": [\\\"nltk\\\", \\\"textstat\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A current space station engineer known for his meticulous designs and safety protocols", "synthesized text": "\"{\\n\\\"name\\\": \\\"Space Station Telemetry Interface\\\",\\n\\\"description\\\": \\\"This interface provides the real-time location of the International Space Station (ISS) and the next time it will pass over a given location.\\\",\\n\\\"function_name\\\": \\\"get_ISS_info\\\",\\n\\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\"],\\n\\\"return\\\": \\\"A dictionary containing the current position of the ISS and the next passover time at the given location.\\\",\\n\\\"depend\\\": \\\"requests library, Open Notify API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nostalgic alumna of the Department of Aerospace Engineering, University of Illinois at Urbana-Champaign", "synthesized text": "\"{\\n\\\"name\\\": \\\"Satellite Pass Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts the times when a specified satellite will be passing over a given location. The input parameters are location (latitude, longitude), the satellite of interest in NORAD two-line element set format, and a time range (start time, end time). The interface returns a list of times when the satellite will be passing over the location.\\\",\\n\\\"function_name\\\": \\\"get_satellite_pass_times\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"(float, float)\\\", \\\"tle\\\": \\\"str\\\", \\\"start_time\\\": \\\"datetime\\\", \\\"end_time\\\": \\\"datetime\\\"},\\n\\\"return\\\": \\\"[datetime]\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"skyfield.api\\\", \\\"datetime\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a devoted fan of trampoline gymnastics, especially the double mini trampoline event", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trampoline Score Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the final score in double mini trampoline gymnastics. The user inputs the list of maneuvers executed, the execution scores from each judge, and the time of flight. The interface then returns the final score.\\\",\\n\\\"function_name\\\": \\\"calculate_trampoline_score\\\",\\n\\\"input_args\\\": [\\\"maneuvers\\\", \\\"execution_scores\\\", \\\"time_of_flight\\\"],\\n\\\"return\\\": \\\"final_score\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bright, young Betazoid ensign eager to learn about intercultural communication and ethics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Universal Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates input text into a specified target language using Google Cloud Translation API.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"target_language\\\"],\\n\\\"return\\\": \\\"Translated text in the target language.\\\",\\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a system administrator at a mid-size tech company, and I am proficient at a wide array of Linux distributions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Server Health Check Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about the server's health, including CPU usage, memory usage, and disk usage.\\\",\\n\\\"function_name\\\": \\\"get_server_health\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A dictionary containing the CPU usage percentage, memory usage percentage, and disk usage percentage.\\\",\\n\\\"depend\\\": \\\"psutil Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Polish truck driver familiar with national road 53", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed weather forecast for a specific location using OpenWeatherMap API.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"main_weather\\\": \\\"string\\\", \\\"description\\\": \\\"string\\\", \\\"temperature\\\": \\\"float\\\", \\\"humidity\\\": \\\"int\\\", \\\"wind_speed\\\": \\\"float\\\"},\\n\\\"depend\\\": [\\\"requests\\\", \\\"OpenWeatherMap API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A naturopathic doctor with years of experience in treating children using natural methods", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Herbal Remedy Suggestion Interface\\\",\\n  \\\"description\\\": \\\"This interface suggests natural remedies for a given ailment. It uses a hypothetical API that provides information on natural remedies\\\",\\n  \\\"function_name\\\": \\\"get_herbal_remedies\\\",\\n  \\\"input_args\\\": {\\n    \\\"ailment\\\": \\\"string\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"suggested_remedies\\\": \\\"list\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"health-natural-remedies-api.com (hypothetical)\\\"],\\n    \\\"machine learning models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a CS professor who has the patience and passion to explain the detailed information and alternatives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface profiles a given Python script using the Py-Spy library, providing detailed runtime information that can be used to optimize the code.\\\",\\n\\\"function_name\\\": \\\"optimize_code\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_script\\\": \\\"The path to the Python script to be profiled.\\\"\\n},\\n\\\"return\\\": \\\"A string containing the profiled output from Py-Spy.\\\",\\n\\\"depend\\\": [\\\"Python Library: Py-Spy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hardcore fan fairly critical of Shia LaBeouf", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Rating Interface\\\", \\n\\\"description\\\": \\\"This interface allows users to get the ratings of any movie from various sources. They just need to input the name of the movie.\\\", \\n\\\"function_name\\\": \\\"get_movie_ratings\\\", \\n\\\"input_args\\\": {\\\"movie_name\\\": \\\"string\\\"}, \\n\\\"return\\\": {\\\"Source\\\": \\\"Rating\\\"}, \\n\\\"depend\\\": {\\\"requests\\\": \\\"Used for making HTTP requests to the API\\\", \\\"OMDb API\\\": \\\"Used to fetch movie ratings\\\"}\\n}\"", "description": "tool development"}
{"input persona": "An end-of-the-world cult leader", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Apocalypse Countdown Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the NASA Near Earth Object Web Service API to get information about near-Earth Asteroids based on a given date. It returns the closest asteroid to Earth on that day, including its distance from Earth and its estimated size.\\\",\\n  \\\"function_name\\\": \\\"get_nearest_asteroid\\\",\\n  \\\"input_args\\\": \\\"date\\\",\\n  \\\"return\\\": \\\"Dictionary containing name, miss distance in kilometers, and estimated diameter in kilometers of the nearest asteroid.\\\",\\n  \\\"depend\\\": \\\"NASA Near Earth Object Web Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young aspiring mechanical engineer seeking advice and mentorship in the automotive field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mentorship Matching Interface\\\",\\n\\\"description\\\": \\\"An interface that connects aspiring mechanical engineers with potential mentors in the automotive field on LinkedIn.\\\",\\n\\\"function_name\\\": \\\"get_potential_mentors\\\",\\n\\\"input_args\\\": [\\\"profile_url\\\"],\\n\\\"return\\\": \\\"A list of potential mentors with their names, headlines, and LinkedIn profile URLs.\\\",\\n\\\"depend\\\": \\\"LinkedIn's APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "中国的奥运爱好者，关注各国运动员的表现。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Athlete Performance Interface\\\",\\n  \\\"description\\\": \\\"Retrieve and visualize the performance of a given athlete in Olympic games.\\\",\\n  \\\"function_name\\\": \\\"get_athlete_performance\\\",\\n  \\\"input_args\\\": [\\\"athlete_name\\\"],\\n  \\\"return\\\": \\\"A bar chart showing the performance of the athlete in different events.\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"pandas\\\", \\\"matplotlib\\\", \\\"Olympic Games Official Website\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a model who desires to have children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ovulation Predictor\\\",\\n\\\"description\\\": \\\"This interface predicts the next ovulation date and fertile window based on the last menstrual period and cycle length. It can be helpful for those who are trying to conceive.\\\",\\n\\\"function_name\\\": \\\"predict_ovulation\\\",\\n\\\"input_args\\\": [\\\"last_period_date\\\", \\\"cycle_length\\\"],\\n\\\"return\\\": \\\"A string that provides the predicted next ovulation date and fertile window.\\\",\\n\\\"depend\\\": [\\\"Python's datetime and dateutil libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Scandal enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Episode Summary Interface\\\",\\n\\\"description\\\": \\\"Provides a summary of a specified episode from a TV show using the TVMaze API\\\",\\n\\\"function_name\\\": \\\"get_episode_summary\\\",\\n\\\"input_args\\\": [\\\"show_name\\\", \\\"season\\\", \\\"episode\\\"],\\n\\\"return\\\": \\\"Summary of the specified episode or 'Episode not found.' if the episode does not exist.\\\",\\n\\\"depend\\\": \\\"requests library, TVMaze API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former explosives expert who still holds a deep respect for the power and potential harm of these substances.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Explosives Safety Check Interface\\\",\\n\\\"description\\\": \\\"This interface uses the PubChem API and a large language model to provide a safety summary for a given chemical substance.\\\",\\n\\\"function_name\\\": \\\"get_safety_summary\\\",\\n\\\"input_args\\\": [\\\"substance_name - The name of the chemical substance.\\\"],\\n\\\"return\\\": \\\"A safety summary for the given substance.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"PubChem API\\\", \\\"Large Language Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A junior IT technician with only a basic understanding of Cassandra, and no experience with Reaper.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cassandra Repair Job Interface\\\",\\n\\\"description\\\": \\\"An interface that simplifies the process of initiating a repair job on a Cassandra cluster using the Reaper REST API. Only requires the cluster name as input.\\\",\\n\\\"function_name\\\": \\\"initiate_repair_job\\\",\\n\\\"input_args\\\": \\\"cluster_name\\\",\\n\\\"return\\\": \\\"A string indicating the result of the operation.\\\",\\n\\\"depend\\\": \\\"Reaper REST API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired printer who worked in a newspaper press and misses the sound of the printing machines", "synthesized text": "\"{\\n\\\"name\\\": \\\"Printing Press Sound Interface\\\", \\n\\\"description\\\": \\\"This interface allows users to input the type of sound they want to hear, and it returns a URL to a sound file that matches the user's request.\\\", \\n\\\"function_name\\\": \\\"get_sound_sample\\\", \\n\\\"input_args\\\": {\\\"sound_type\\\": \\\"a string representing the kind of sound the user wants to hear\\\"}, \\n\\\"return\\\": \\\"a URL to a low-quality mp3 preview of a sound sample, or a message saying that no matching sound samples were found\\\", \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Freesound.org API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A teenage son pursuing law studies, inspired by their parent's commitment to justice.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Case Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search for legal cases related to a specific term.\\\",\\n\\\"function_name\\\": \\\"get_legal_cases_by_term\\\",\\n\\\"input_args\\\": \\\"term\\\",\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary includes the name of a case, its decision date, and the court in which it was heard.\\\",\\n\\\"depend\\\": \\\"requests library, Case Law Access Project API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A logical and systematic thinker who designs the overall structure and framework of the software solution", "synthesized text": "\"{\\n  \\\"name\\\": \\\"AI Model Training Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface for training deep learning models using TensorFlow's Keras API. Simply provide the training data, validation data, and a dictionary of hyperparameters, and the interface returns the trained model.\\\",\\n  \\\"function_name\\\": \\\"train_model\\\",\\n  \\\"input_args\\\": {\\n    \\\"train_data\\\": \\\"(x_train, y_train)\\\",\\n    \\\"valid_data\\\": \\\"(x_valid, y_valid)\\\",\\n    \\\"hyperparams\\\": \\\"Dictionary of hyperparameters\\\"\\n  },\\n  \\\"return\\\": \\\"Trained model and the training history\\\",\\n  \\\"depend\\\": \\\"TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young child with cerebral palsy who is working on improving their hand-eye coordination", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Hand-eye Coordination Training Game\\\",\\n  \\\"description\\\": \\\"A simple game to help a child with cerebral palsy improve their hand-eye coordination.\\\",\\n  \\\"function_name\\\": \\\"start_game\\\",\\n  \\\"input_args\\\": \\\"None\\\",\\n  \\\"return\\\": \\\"A running game that stops when the user closes the game window.\\\",\\n  \\\"depend\\\": \\\"Pygame library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner looking to automate their project management tasks through Podio API", "synthesized text": "\"{\\n\\\"name\\\": \\\"Podio Project Management Interface\\\",\\n\\\"description\\\": \\\"An interface to automate project management tasks using the Podio API. This specific function adds a new task to a project.\\\",\\n\\\"function_name\\\": \\\"create_task\\\",\\n\\\"input_args\\\": {\\\"project_id\\\": \\\"The ID of the project\\\", \\\"task_name\\\": \\\"The name of the task\\\", \\\"task_description\\\": \\\"The description of the task\\\"},\\n\\\"return\\\": \\\"The ID of the created task\\\",\\n\\\"depend\\\": \\\"Podio API, pypodio2 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A social media influencer who live-tweets reality shows and hosts watch parties", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitter Post Scheduling Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to schedule their tweets for a specific time. The user only needs to input their tweet content and the time they want the tweet to be posted, and our interface will automatically post the tweet at the specified time.\\\",\\n\\\"function_name\\\": \\\"schedule_tweet\\\",\\n\\\"input_args\\\": [\\\"api\\\", \\\"tweet_content\\\", \\\"post_time\\\"],\\n\\\"return\\\": \\\"Confirmation message that the tweet has been posted at the specified time\\\",\\n\\\"depend\\\": [\\\"tweepy\\\", \\\"Python's datetime and time libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A space medicine specialist who studies and provides solutions for the physiological effects of long-duration space travel", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bone Density Change Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the change in bone density due to long-duration space travel. It uses a pre-trained Linear Regression model from scikit-learn.\\\",\\n\\\"function_name\\\": \\\"predict_bone_density_change\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"gender\\\", \\\"time_in_space\\\"],\\n\\\"return\\\": \\\"An estimate of the change in bone density.\\\",\\n\\\"depend\\\": \\\"scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired high school teacher who taught Micheal Miller in Haskell High School.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Student Grade Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface for analyzing student grades. Takes a CSV file path as input and returns an analysis report of the grades, including the average grade, minimum grade, maximum grade, and standard deviation.\\\",\\n  \\\"function_name\\\": \\\"analyze_grades\\\",\\n  \\\"input_args\\\": [\\\"file_path\\\"],\\n  \\\"return\\\": \\\"Dictionary with keys as 'Average Grade', 'Minimum Grade', 'Maximum Grade', 'Standard Deviation' and their corresponding values\\\",\\n  \\\"depend\\\": [\\\"Python libraries: pandas, numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A person who has undergone tattoo removal and can share their personal experience and provide emotional support", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tattoo Removal Experience Sharing Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a chatbot to provide advice and emotional support based on the experiences of individuals who have undergone tattoo removal.\\\",\\n  \\\"function_name\\\": \\\"get_response\\\",\\n  \\\"input_args\\\": \\\"input_text - text input from user\\\",\\n  \\\"return\\\": \\\"response - text response from chatbot\\\",\\n  \\\"depend\\\": \\\"HuggingFace Transformers (a Python library for NLP)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced horse trainer from a different country who shares unique training techniques and tips", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horse Speech Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates horse training tips from one language to another using the Google Translate API. It's useful for horse trainers who work internationally.\\\",\\n\\\"function_name\\\": \\\"translate_horse_training_tips\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"The text in the user's native language that contains the horse training tips\\\", \\\"target_language\\\": \\\"The language that the user wants to translate the text to (default is English)\\\"},\\n\\\"return\\\": \\\"The translated text\\\",\\n\\\"depend\\\": \\\"Google Translate API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The head of aeronautical engineering department who oversees and approves designs and modifications", "synthesized text": "\"{\\n\\\"name\\\": \\\"CAD File Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to visualize and analyze the geometry and structure of a CAD design. Users only need to input the path to the CAD file, and the interface will return the visualization of the design and a summary of its geometric properties.\\\",\\n\\\"function_name\\\": \\\"analyze_and_visualize_cad_file\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"Geometric properties of the CAD design\\\",\\n\\\"depend\\\": \\\"Python Libraries: Pygame, OpenGL, SolidPython\\\"\\n}\"", "description": "tool development"}
{"input persona": "A law student awarded a scholarship by the senior jurist's foundation for their commitment to human rights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Summarizer Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to summarize legal documents for easier comprehension. The user needs to input the path to a legal document, and the interface will return a summarized version.\\\",\\n\\\"function_name\\\": \\\"summarize_legal_document\\\",\\n\\\"input_args\\\": [\\\"path_to_document\\\"],\\n\\\"return\\\": \\\"A summarized version of the input legal document.\\\",\\n\\\"depend\\\": [\\\"Huggingface's transformers\\\", \\\"BERT model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A government official who seeks to modernize administrative processes and reduce human error in data entry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Data Entry Interface\\\",\\n\\\"description\\\": \\\"An interface for extracting text from images or scanned documents to automate data entry tasks and reduce human error.\\\",\\n\\\"function_name\\\": \\\"extract_text_from_image_advanced\\\",\\n\\\"input_args\\\": \\\"image_path: The path to the image file from which to extract text.\\\",\\n\\\"return\\\": \\\"A string containing the text extracted from the image.\\\",\\n\\\"depend\\\": \\\"Python PIL library, pytesseract library, TensorFlow, TensorFlow Hub, and a pre-trained TensorFlow model (https://tfhub.dev/google/magenta/arbitrary-image-stylization-v1-256/2)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A restaurant owner who believes in second chances and hires the homeless individual as a dishwasher", "synthesized text": "\"{\\n\\\"name\\\": \\\"Employee Record Interface\\\",\\n\\\"description\\\": \\\"This interface allows to create and manage employee records in a CSV file.\\\",\\n\\\"function_name\\\": \\\"create_employee_record\\\",\\n\\\"input_args\\\": {\\n    \\\"name\\\": \\\"Name of the employee\\\",\\n    \\\"role\\\": \\\"Role of the employee\\\",\\n    \\\"start_date\\\": \\\"Start date of the employee\\\",\\n    \\\"salary\\\": \\\"Salary of the employee\\\"\\n},\\n\\\"return\\\": \\\"Confirmation message after successful creation of the employee record.\\\",\\n\\\"depend\\\": \\\"Python's built-in CSV module\\\"\\n}\"", "description": "tool development"}
{"input persona": "a tech-savvy service representative at Hostgator", "synthesized text": "\"{\\n\\\"name\\\": \\\"Website Uptime Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface uses the UptimeRobot API to check the uptime status of a website.\\\",\\n\\\"function_name\\\": \\\"get_website_uptime_status\\\",\\n\\\"input_args\\\": {\\n    \\\"website_url\\\": \\\"The URL of the website to monitor.\\\"\\n},\\n\\\"return\\\": \\\"Returns the uptime status of the website ('Paused', 'Not checked yet', 'Up', 'Seems down', 'Down') or an error message if an error occurs.\\\",\\n\\\"depend\\\": \\\"UptimeRobot API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A food critic impressed by the sales representative's knowledge of beer and their ability to recommend the perfect brew to complement different dishes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Beer Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends a type of beer that pairs well with a specified dish\\\",\\n\\\"function_name\\\": \\\"recommend_beer\\\",\\n\\\"input_args\\\": {\\\"dish\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers, GPT-2 Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property specialist who appreciates the charm and value of Victorian houses and helps buyers find their dream home", "synthesized text": "\"{\\n\\\"name\\\": \\\"Victorian House Finder Interface\\\",\\n\\\"description\\\": \\\"An interface for users to find Victorian houses in their preferred location by leveraging the Zillow API.\\\",\\n\\\"function_name\\\": \\\"get_victorian_houses\\\",\\n\\\"input_args\\\": \\\"location - The user's preferred location for their Victorian house.\\\",\\n\\\"return\\\": \\\"A list of Victorian houses in the provided location, with each house's address, zipcode, year built, and price.\\\",\\n\\\"depend\\\": \\\"Python's requests and xml.etree.ElementTree libraries, and the Zillow API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A patient who received a life-saving transplant and is grateful for the dedication and professionalism of the medical courier", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Courier Tracking Interface\\\",\\n\\\"description\\\": \\\"This Interface uses the TrackingMore API to track parcels or deliveries across different carriers. It provides real-time tracking data including location, status, estimated delivery time, etc.\\\",\\n\\\"function_name\\\": \\\"track_medical_parcel\\\",\\n\\\"input_args\\\": \\\"tracking_number\\\",\\n\\\"return\\\": \\\"A dictionary with the current status and location of the parcel\\\",\\n\\\"depend\\\": \\\"TrackingMore API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow science fiction author and an ardent fan of brain simulation fiction.", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI Text Generator Interface\\\",\\n\\\"description\\\": \\\"This interface takes a user-provided prompt and returns a continuation of the prompt that is generated by the GPT-2 model from Huggingface's Transformers library.\\\",\\n\\\"function_name\\\": \\\"generate_text\\\",\\n\\\"input_args\\\": \\\"prompt - A string that the user wants to continue\\\",\\n\\\"return\\\": \\\"A string that continues the user-provided prompt\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An economics major seeking guidance on understanding the impact of protectionism on the global economy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Global Economic Impact of Protectionism Interface\\\",\\n\\\"description\\\": \\\"This interface uses World Bank's World Integrated Trade Solution (WITS) API to gather data related to trade flows and tariffs. It then uses a pre-trained Machine Learning model from TensorFlow to predict the impact of protectionism on the global economy.\\\",\\n\\\"function_name\\\": \\\"predict_impact\\\",\\n\\\"input_args\\\": {\\n    \\\"country\\\": \\\"Name of the country for which you want to predict the impact of protectionism\\\"\\n},\\n\\\"return\\\": \\\"A predicted value representing the impact of protectionism on the country's economy. The higher the value, the more negative impact that protectionism is predicted to have on the economy.\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"tensorflow\\\"],\\n    \\\"web APIs\\\": [\\\"World Bank's World Integrated Trade Solution (WITS) API\\\"],\\n    \\\"machine learning models\\\": [\\\"TensorFlow pre-trained model\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A forensic accountant specialized in calculating economic damages in personal injury cases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Damage Calculation Interface\\\", \\n\\\"description\\\": \\\"This interface simplifies the calculation of economic damages in personal injury cases. It requires the amount of lost income per year, the expected retirement age, and the current age of the victim as input.\\\", \\n\\\"function_name\\\": \\\"calculate_economic_damages\\\", \\n\\\"input_args\\\": [\\\"lost_income_per_year\\\", \\\"retirement_age\\\", \\\"current_age\\\"], \\n\\\"return\\\": \\\"total_economic_damages\\\", \\n\\\"depend\\\": [\\\"numpy\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Latvian local government official familiar with regional planning", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Permit Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for building permits associated with a given address using local government's open data APIs.\\\",\\n\\\"function_name\\\": \\\"get_building_permits\\\",\\n\\\"input_args\\\": {\\\"address\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"Array of permit information or a string message.\\\",\\n\\\"depend\\\": \\\"requests library, Local Government's Open Data APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "An insurance underwriter who evaluates and prices risks for various industries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Risk Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to evaluate the likelihood of a future event (e.g., a default or a claim) based on the input features of a client.\\\",\\n\\\"function_name\\\": \\\"evaluate_risk\\\",\\n\\\"input_args\\\": {\\\"client_features\\\": \\\"a dictionary where keys are feature names and values are feature values\\\"},\\n\\\"return\\\": \\\"risk score - a value between 0 and 1 where 1 indicates high risk and 0 indicates low risk\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, sklearn, tensorflow; Machine learning model: risk_assessment_model.h5\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rational and scientific-minded individual who shares a property boundary with the haunted house", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ghost Activity Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a TensorFlow model to detect unusual activities or anomalies from sensor data installed around a haunted house. The user only needs to input the path to the sensor data file.\\\",\\n\\\"function_name\\\": \\\"detect_ghost_activity\\\",\\n\\\"input_args\\\": \\\"path_to_data\\\",\\n\\\"return\\\": \\\"A string indicating whether any ghostly activities were detected.\\\",\\n\\\"depend\\\": \\\"TensorFlow, Pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "An IKEA store manager", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Inventory Management Interface\\\",\\n  \\\"description\\\": \\\"This interface helps to get the inventory status of a specific item from an inventory file.\\\",\\n  \\\"function_name\\\": \\\"get_inventory_status\\\",\\n  \\\"input_args\\\": [\\n    {\\n      \\\"name\\\": \\\"inventory_file\\\",\\n      \\\"description\\\": \\\"Path to the inventory file\\\",\\n      \\\"type\\\": \\\"str\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"item_name\\\",\\n      \\\"description\\\": \\\"Name of the item to check inventory\\\",\\n      \\\"type\\\": \\\"str\\\"\\n    }\\n  ],\\n  \\\"return\\\": {\\n    \\\"description\\\": \\\"Current inventory status of the specified item\\\",\\n    \\\"type\\\": \\\"int or str\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"pandas\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A nonprofit organization manager who relies on the retiree's expertise to draft legal documents for grants and contracts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Drafting Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pretrained model (legal-bert) to draft legal documents based on user input.\\\",\\n\\\"function_name\\\": \\\"draft_legal_document\\\",\\n\\\"input_args\\\": [\\\"document_type\\\", \\\"document_description\\\"],\\n\\\"return\\\": \\\"A draft of the desired legal document\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformer model (legal-bert)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An interior designer who runs a small business and relies on their partner to help with the company's website and technical issues", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Website Traffic Analyzer Interface\\\",\\n  \\\"description\\\": \\\"An interface that fetches and displays a summary of website traffic from Google Analytics. It provides total visits, unique visitors, and average session duration for the past 30 days.\\\",\\n  \\\"function_name\\\": \\\"get_google_analytics_data\\\",\\n  \\\"input_args\\\": \\\"view_id - The ID of the Google Analytics view that the user wants to access.\\\",\\n  \\\"return\\\": \\\"A dictionary with the total visits, unique visitors, and average session duration.\\\",\\n  \\\"depend\\\": \\\"Python's googleapiclient and oauth2client libraries, Google Analytics API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young Assamese artist who never got to meet Neel Pawan Baruah in person but was always inspired by his works", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts a given text to speech and plays the resulting audio. It can be useful for users who want to listen to text in audio format.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"[language]\\\", \\\"[filename]\\\"],\\n\\\"return\\\": \\\"None, but plays the text-to-speech audio\\\",\\n\\\"depend\\\": [\\\"Google Text-to-Speech API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who develops and maintains the hospital management system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Records Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve patient records from a hospital database using the patient's ID.\\\",\\n\\\"function_name\\\": \\\"get_patient_data\\\",\\n\\\"input_args\\\": {\\\"patient_id\\\": \\\"The ID of the patient.\\\"},\\n\\\"return\\\": \\\"Returns a list of tuples where each tuple represents a patient's record from the database.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"sqlite3\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An experienced Java Developer with comprehensive knowledge about Java Archive (Jar) files", "synthesized text": "\"{\\n\\\"name\\\": \\\"Jar File Information Extractor Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that allows users to extract the contents of a Jar file with a single command. The function uses Python's 'os' and 'subprocess' libraries to execute a system command that lists the contents of the Jar file.\\\",\\n\\\"function_name\\\": \\\"extract_jar_contents\\\",\\n\\\"input_args\\\": {\\n    \\\"jar_file_path\\\": \\\"The file path of the Jar file to be processed.\\\"\\n},\\n\\\"return\\\": \\\"A string containing the contents of the Jar file.\\\",\\n\\\"depend\\\": \\\"Python's 'os' and 'subprocess' libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A digital marketing specialist who collaborates with the Python developer to create targeted social media campaigns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Social Media Campaign Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get information about the performance of social media campaigns using the Facebook Graph API.\\\",\\n\\\"function_name\\\": \\\"get_campaign_performance\\\",\\n\\\"input_args\\\": [\\\"ad_account_id\\\", \\\"access_token\\\"],\\n\\\"return\\\": \\\"Dictionary with campaign performance data\\\",\\n\\\"depend\\\": \\\"Facebook Graph API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a regional manager of a competing brokerage company", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Competitor Price Comparison Interface\\\",\\n  \\\"description\\\": \\\"This interface uses financial market data APIs to compare the stock prices of competing brokerage firms. Users need to input their company's stock symbol and the symbols of their competitors, and the interface will return a comparison of their current stock prices.\\\",\\n  \\\"function_name\\\": \\\"compare_competitor_prices\\\",\\n  \\\"input_args\\\": [\\\"user_symbol\\\", \\\"competitor_symbols\\\"],\\n  \\\"return\\\": \\\"A dictionary where the key 'user_price' corresponds to the user's company's current stock price and the key 'competitor_prices' corresponds to a dictionary of each competitor's symbol and their current stock price.\\\",\\n  \\\"depend\\\": \\\"This function depends on the requests library for making HTTP requests and the Alpha Vantage API for getting current stock prices.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sales representative for Kodak who often updates customers with new products", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Update Notification Interface\\\",\\n\\\"description\\\": \\\"This interface automates the process of sending product update emails to customers. It accepts the sender's email and password, recipient's email, product name, product details, and an optional attachment path for the product's image. It then sends an email to the recipient with the product update.\\\",\\n\\\"function_name\\\": \\\"send_product_update_email\\\",\\n\\\"input_args\\\": [\\\"sender_email\\\", \\\"sender_password\\\", \\\"recipient_email\\\", \\\"product_name\\\", \\\"product_details\\\", \\\"attachment_path\\\"],\\n\\\"return\\\": \\\"None, but an email is sent to the recipient's email address.\\\",\\n\\\"depend\\\": [\\\"Python's SMTP Library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A nostalgic former participant of the 2FM Song Contest", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Song Lyrics Search Interface\\\",\\n  \\\"description\\\": \\\"This interface allows the user to search for the lyrics of a song by providing the song title and artist name.\\\",\\n  \\\"function_name\\\": \\\"get_song_lyrics\\\",\\n  \\\"input_args\\\": [\\n    {\\n      \\\"name\\\": \\\"artist\\\",\\n      \\\"type\\\": \\\"str\\\",\\n      \\\"description\\\": \\\"The name of the artist/band.\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"title\\\",\\n      \\\"type\\\": \\\"str\\\",\\n      \\\"description\\\": \\\"The title of the song.\\\"\\n    }\\n  ],\\n  \\\"return\\\": {\\n    \\\"type\\\": \\\"str\\\",\\n    \\\"description\\\": \\\"The lyrics of the song. If not found, it returns a message indicating this.\\\"\\n  },\\n  \\\"depend\\\": \\\"Python requests library, Lyrics.ovh API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a staunch believer in Darwin's theory of evolution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Species Evolution Simulation Interface\\\",\\n\\\"description\\\": \\\"An interface that simulates the process of evolution. The user inputs the initial characteristics of the species, the environment, and the number of generations, and the interface simulates the evolution of the species under these conditions.\\\",\\n\\\"function_name\\\": \\\"evolve_species\\\",\\n\\\"input_args\\\": [\\\"initial_traits\\\", \\\"environment\\\", \\\"num_generations\\\"],\\n\\\"return\\\": \\\"The best individual after the evolution\\\",\\n\\\"depend\\\": [\\\"DEAP Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a retired Hong Kong cinema projectionist who is nostalgic about the golden age of Hong Kong cinema.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Hong Kong Cinema Film Recommendation Interface\\\",\\n    \\\"description\\\": \\\"An interface that recommends Hong Kong cinema films based on a user-inputted film title. It uses a pre-trained recommendation model from TensorFlow Hub.\\\",\\n    \\\"function_name\\\": \\\"get_movie_recommendations\\\",\\n    \\\"input_args\\\": {\\n        \\\"user_input\\\": \\\"Title of a Hong Kong cinema film the user enjoyed\\\",\\n        \\\"movie_list\\\": \\\"List of descriptions or summaries of the films in the database\\\"\\n    },\\n    \\\"return\\\": \\\"A list of recommended films that are similar to the user-inputted film\\\",\\n    \\\"depend\\\": {\\n        \\\"TensorFlow\\\": \\\"2.x\\\",\\n        \\\"TensorFlow Hub\\\": \\\"0.12.0\\\",\\n        \\\"NumPy\\\": \\\"1.19.5\\\"\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A venture capitalist impressed by their business idea and offers funding to accelerate growth", "synthesized text": "\"{\\n\\\"name\\\": \\\"Startup Valuation Interface\\\",\\n\\\"description\\\": \\\"This interface provides a method to estimate the valuation of a startup using a simplified discounted cash flow model.\\\",\\n\\\"function_name\\\": \\\"calculate_startup_valuation\\\",\\n\\\"input_args\\\": {\\n    \\\"cash_flows\\\": \\\"A list of integers or floats representing projected future cash flows.\\\",\\n    \\\"discount_rate\\\": \\\"A float representing the discount rate.\\\",\\n    \\\"growth_rate\\\": \\\"A float representing the growth rate.\\\"\\n},\\n\\\"return\\\": \\\"A float representing the estimated valuation of the startup.\\\",\\n\\\"depend\\\": \\\"Python Built-in Function\\\"\\n}\"", "description": "tool development"}
{"input persona": "Italian student researching WWII personal stories for History class.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Document Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface extracts text from a scanned historical document using Google Cloud Vision API's OCR, and then identifies key entities (like people, places, organizations, etc.) from the extracted text using Named Entity Recognition (NER) from Hugging Face transformers.\\\",\\n\\\"function_name\\\": \\\"analyze_historical_document\\\",\\n\\\"input_args\\\": [\\\"image_path\\\"],\\n\\\"return\\\": \\\"A list of dictionaries, each containing information on a recognized entity, such as the entity type and the part of the text it corresponds to.\\\",\\n\\\"depend\\\": [\\\"Python libraries: google-cloud-vision, PIL, io, transformers\\\", \\\"Web APIs: Google Cloud Vision API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a rugby fan from New Zealand who has never heard of Jack Umaga", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Rugby Player Details Interface\\\",\\n    \\\"description\\\": \\\"This interface returns detailed information about a rugby player, including their team, position, nationality, and other statistics.\\\",\\n    \\\"function_name\\\": \\\"get_rugby_player_details\\\",\\n    \\\"input_args\\\": [\\\"player_name\\\"],\\n    \\\"return\\\": {\\n        \\\"name\\\": \\\"Player's name\\\",\\n        \\\"team\\\": \\\"Player's team\\\",\\n        \\\"position\\\": \\\"Player's position\\\",\\n        \\\"nationality\\\": \\\"Player's nationality\\\",\\n        \\\"birth_date\\\": \\\"Player's birth date\\\",\\n        \\\"height\\\": \\\"Player's height in cm\\\",\\n        \\\"weight\\\": \\\"Player's weight in kg\\\"\\n    },\\n    \\\"depend\\\": [\\\"requests\\\", \\\"Sports Open Data API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A wise and seasoned farmer in Canada who has successfully managed various crops and livestock for decades", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the weather forecast for the upcoming week using the OpenWeatherMap API. Users input their city name, and the interface returns the weather forecast for the next 7 days.\\\",\\n\\\"function_name\\\": \\\"get_weekly_weather\\\",\\n\\\"input_args\\\": \\\"city - a string representing the name of the city.\\\",\\n\\\"return\\\": \\\"A list of strings representing the weather forecast for the next 7 days. Each string includes the date, weather description, and minimum and maximum temperatures in Celsius.\\\",\\n\\\"depend\\\": \\\"Python's requests and datetime libraries, and OpenWeatherMap API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A descendant of the ancient civilization whose language and culture help interpret the inscriptions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Decoding Ancient Inscriptions Interface\\\", \\n  \\\"description\\\": \\\"This interface uses OCR technology to convert the image of inscriptions into text, then uses the Google Translate API to translate the ancient language into English.\\\", \\n  \\\"function_name\\\": \\\"decode_ancient_inscription\\\", \\n  \\\"input_args\\\": \\\"image_path\\\", \\n  \\\"return\\\": \\\"translated_text\\\", \\n  \\\"depend\\\": \\\"Google Cloud Vision API, Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A statistics professor, who authored several highly influential papers on Bayesian inference", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bayesian Inference Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of performing Bayesian inference. Users only need to input their prior distribution, likelihood function, and observed data. The interface will return the posterior distribution from the Bayesian inference.\\\",\\n\\\"function_name\\\": \\\"perform_bayesian_inference\\\",\\n\\\"input_args\\\": {\\n    \\\"prior_distribution\\\": \\\"A pymc3 distribution representing the prior belief about the parameter.\\\",\\n    \\\"likelihood_function\\\": \\\"A pymc3 distribution representing the likelihood of the data given the parameter.\\\",\\n    \\\"observed_data\\\": \\\"A numpy array of observed data points.\\\"\\n},\\n\\\"return\\\": \\\"The trace of the posterior distribution after 2000 MCMC samples.\\\",\\n\\\"depend\\\": \\\"python library: pymc3, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired female physicist who somewhat envies Anne's career.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum State Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Qiskit, a python library for quantum computing, to simulate quantum states and run quantum circuits. Users only need to input the quantum circuit, and the interface will return the quantum state after the circuit.\\\",\\n\\\"function_name\\\": \\\"simulate_quantum_state\\\",\\n\\\"input_args\\\": {\\\"circuit\\\": \\\"A Qiskit QuantumCircuit object\\\"},\\n\\\"return\\\": \\\"The quantum state after the circuit, represented as a complex numpy array.\\\",\\n\\\"depend\\\": \\\"Qiskit library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a network and cybersecurity expert with considerable knowledge on DNS and IP blacklists.", "synthesized text": "\"{\\n\\\"name\\\": \\\"IP Blacklist Verification Interface\\\",\\n\\\"description\\\": \\\"An interface to check if a given IP address is blacklisted for any malicious activities using the AbuseIPDB API.\\\",\\n\\\"function_name\\\": \\\"check_ip_blacklist_status\\\",\\n\\\"input_args\\\": {\\n    \\\"ip_address\\\": \\\"The IP address to check.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"abuseConfidenceScore\\\": \\\"The abuse confidence score for the IP address.\\\",\\n    \\\"totalReports\\\": \\\"The total number of reports for the IP address.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python_library\\\": [\\\"requests\\\"],\\n    \\\"web_API\\\": [\\\"AbuseIPDB API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "An ardent follower of Nussbaum's academic work", "synthesized text": "\"{\\n\\\"name\\\": \\\"Academic Paper Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest academic papers of a given author using the Semantic Scholar API. It returns the titles of the 5 most recent papers.\\\",\\n\\\"function_name\\\": \\\"get_latest_papers\\\",\\n\\\"input_args\\\": \\\"author_name\\\",\\n\\\"return\\\": \\\"List of strings (Paper Titles)\\\",\\n\\\"depend\\\": \\\"Semantic Scholar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A well-established publisher of print-based educational materials reluctant to transition to digital platforms", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Text-To-Speech Interface\\\",\\n  \\\"description\\\": \\\"Converts input text into high-quality speech audio, returning an audio file.\\\",\\n  \\\"function_name\\\": \\\"convert_text_to_speech\\\",\\n  \\\"input_args\\\": [\\\"text\\\", \\\"language\\\", \\\"slow\\\"],\\n  \\\"return\\\": \\\"speech_file\\\",\\n  \\\"depend\\\": [\\\"gTTS library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged man who grew up in Havana, Namibia and has a great interest in community development.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Community Project Fundraising Tracker Interface\\\",\\n  \\\"description\\\": \\\"Interface to track the fundraising progress of community development projects by writing details into a Google Sheets document.\\\",\\n  \\\"function_name\\\": \\\"write_to_google_sheets\\\",\\n  \\\"input_args\\\": [\\\"file_id\\\", \\\"project_name\\\", \\\"amount_raised\\\"],\\n  \\\"return\\\": \\\"A success message indicating the data has been added to Google Sheets.\\\",\\n  \\\"depend\\\": [\\\"Google Sheets API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A product manager from a tech company interested in implementing knowledge graphs for their business", "synthesized text": "\"{\\n\\\"name\\\": \\\"Knowledge Graph Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts entities and their relationships from a text and returns a knowledge graph using SpaCy and NetworkX.\\\",\\n\\\"function_name\\\": \\\"build_knowledge_graph\\\",\\n\\\"input_args\\\": \\\"text - The text from which to extract the knowledge graph.\\\",\\n\\\"return\\\": \\\"A graph object representing the knowledge graph, with nodes as entities and edges as relationships.\\\",\\n\\\"depend\\\": \\\"Python libraries: SpaCy, NetworkX\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concerned parent of a child in Class 5 Foxes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Homework Submission Interface\\\",\\n  \\\"description\\\": \\\"Uploads the homework file to the class's Dropbox folder.\\\",\\n  \\\"function_name\\\": \\\"upload_homework\\\",\\n  \\\"input_args\\\": {\\n    \\\"child_name\\\": \\\"Name of the child\\\",\\n    \\\"file_path\\\": \\\"Path to the homework file on the local machine\\\"\\n  },\\n  \\\"return\\\": \\\"Confirmation message that the file has been uploaded successfully\\\",\\n  \\\"depend\\\": \\\"Dropbox API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a doctor specializing in cerebrovascular diseases.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stroke Risk Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the risk of stroke based on health metrics (like age, hypertension, heart disease, ever married, work type, Residence type, avg glucose level, bmi, smoking status).\\\",\\n\\\"function_name\\\": \\\"predict_stroke_risk\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"hypertension\\\", \\\"heart_disease\\\", \\\"ever_married\\\", \\\"work_type\\\", \\\"Residence_type\\\", \\\"avg_glucose_level\\\", \\\"bmi\\\", \\\"smoking_status\\\"],\\n\\\"return\\\": \\\"The function returns the stroke probability.\\\",\\n\\\"depend\\\": [\\\"sklearn.preprocessing.StandardScaler\\\", \\\"sklearn.preprocessing.OneHotEncoder\\\", \\\"sklearn.compose.ColumnTransformer\\\", \\\"sklearn.pipeline.Pipeline\\\", \\\"sklearn.ensemble.RandomForestClassifier\\\", \\\"pandas\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A state legislator advocating for incentives and infrastructure development to promote electric vehicle adoption", "synthesized text": "\"{\\n\\\"name\\\": \\\"Electric Vehicle Charging Station Locator Interface\\\",\\n\\\"description\\\": \\\"This interface helps users locate the nearest electric vehicle charging stations by inputting their current location. The interface returns the nearby electric vehicle charging stations.\\\",\\n\\\"function_name\\\": \\\"get_nearby_EV_charging_stations\\\",\\n\\\"input_args\\\": \\\"location - a tuple of latitude and longitude\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing the name of the charging station and the distance to it\\\",\\n\\\"depend\\\": \\\"requests library, Open Charge Map API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casual viewer of Casimiro's Twitch streams", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitch Clip Download Interface\\\",\\n\\\"description\\\": \\\"An interface to get a download link for a Twitch clip from its ID.\\\",\\n\\\"function_name\\\": \\\"get_clip_download_link\\\",\\n\\\"input_args\\\": {\\n    \\\"clip_id\\\": \\\"A string containing the ID of the Twitch clip.\\\"\\n},\\n\\\"return\\\": \\\"A string containing the direct download link for the Twitch clip.\\\",\\n\\\"depend\\\": \\\"Twitch Helix API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow ecologist who has always respected Julie Jastrow's work", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Soil Microbial Biomass Estimation Interface\\\",\\n    \\\"description\\\": \\\"A high-level interface that uses a pre-trained RandomForestRegressor model to estimate soil microbial biomass based on soil properties (organic carbon, total nitrogen, pH).\\\",\\n    \\\"function_name\\\": \\\"estimate_soil_microbial_biomass\\\",\\n    \\\"input_args\\\": {\\n        \\\"soil_properties\\\": {\\n            \\\"type\\\": \\\"dict\\\",\\n            \\\"description\\\": \\\"A dictionary containing soil properties: organic carbon, total nitrogen, pH.\\\"\\n        }\\n    },\\n    \\\"return\\\": {\\n        \\\"type\\\": \\\"float\\\",\\n        \\\"description\\\": \\\"An estimated value for soil microbial biomass.\\\"\\n    },\\n    \\\"depend\\\": {\\n        \\\"python_libraries\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"pickle\\\"],\\n        \\\"trained_model\\\": \\\"rf_model.pkl\\\"\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A retired race car driver and a big fan of Juan Pablo Montoya", "synthesized text": "\"{\\n\\\"name\\\": \\\"Racing Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and returns career statistics for a provided race car driver by scraping data from ESPN website.\\\",\\n\\\"function_name\\\": \\\"get_driver_statistics\\\",\\n\\\"input_args\\\": \\\"driver_name - the name of the race car driver\\\",\\n\\\"return\\\": \\\"A dictionary containing the career statistics for the driver.\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "a die-hard NFL fan who has always seen Luke Kuechly as my idol.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches a particular player's statistics from the NFL's unofficial API. All the user needs to do is input the player's name.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": [\\\"player_name\\\"],\\n\\\"return\\\": \\\"Detailed statistics of the specified player.\\\",\\n\\\"depend\\\": [\\\"Python requests library\\\", \\\"NFL's unofficial API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hotel owner who fears the influx of tourists will negatively impact their business", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tourist Arrival Prediction Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface for predicting the number of tourist arrivals based on factors like season, location, and the impact of recent global events. Useful for hotel and other tourism-related business owners to plan their operations.\\\",\\n  \\\"function_name\\\": \\\"predict_tourist_arrivals\\\",\\n  \\\"input_args\\\": {\\n    \\\"season\\\": \\\"The current season. Expects a string from: ['Spring', 'Summer', 'Autumn', 'Winter'].\\\",\\n    \\\"location\\\": \\\"The location of the hotel. Expects a string.\\\",\\n    \\\"global_event_impact\\\": \\\"The impact level of recent global events on tourism, on a scale of 1-5. Expects an integer.\\\"\\n  },\\n  \\\"return\\\": \\\"The predicted number of tourist arrivals. Returns a single integer.\\\",\\n  \\\"depend\\\": \\\"This function depends on the Python pandas and sklearn libraries, and a pre-trained machine learning model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An electrical engineer who credits their career path to the teacher's inspiring lessons on electricity and magnetism", "synthesized text": "\"{\\n\\\"name\\\": \\\"Electrical Circuit Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface where the user inputs the values of resistances, inductances, and capacitances in an RLC circuit, and outputs the frequency response of the circuit.\\\",\\n\\\"function_name\\\": \\\"compute_frequency_response\\\",\\n\\\"input_args\\\": [\\\"R\\\", \\\"L\\\", \\\"C\\\"],\\n\\\"return\\\": \\\"A plot visualizing the frequency response of the RLC circuit.\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"matplotlib\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a senior choir member who loves classical music and has a particular interest in the origins and history of different pieces.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Classical Music Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Open Opus API to retrieve detailed information about specific classical music pieces, including their origin, history, and various performances.\\\",\\n\\\"function_name\\\": \\\"get_classical_music_info\\\",\\n\\\"input_args\\\": {\\n  \\\"composer_name\\\": \\\"The name of the composer\\\",\\n  \\\"work_title\\\": \\\"The title of the work\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing detailed information about the specific classical music piece. If no information is found, it returns 'No information found'.\\\",\\n\\\"depend\\\": \\\"Python's built-in requests library and Open Opus API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A shrewd collector with access to rare and ancient manuscripts that could be valuable for treaty negotiations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Translation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to translate documents into a language of their choice, making it easier for them to understand and evaluate the contents of the documents.\\\",\\n\\\"function_name\\\": \\\"translate_document\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"target_language\\\"],\\n\\\"return\\\": \\\"translatedText\\\",\\n\\\"depend\\\": [\\\"Google Cloud Translation API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a loyal One Mississippi viewer who appreciates dry humor", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a TV show you enjoy and returns a list of similar shows you might like. It uses the TasteDive API to find shows similar to the one you input.\\\",\\n\\\"function_name\\\": \\\"recommend_similar_shows\\\",\\n\\\"input_args\\\": \\\"tv_show_name\\\",\\n\\\"return\\\": \\\"A list of names of similar TV shows\\\",\\n\\\"depend\\\": \\\"TasteDive API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a middle-aged African American who is an avid investor in tech stocks.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the closing price of a particular stock for the next trading day using historical data and a Support Vector Regression model.\\\",\\n\\\"function_name\\\": \\\"predict_stock_price\\\",\\n\\\"input_args\\\": [\\\"symbol\\\"],\\n\\\"return\\\": \\\"The predicted closing price of the stock for the next trading day.\\\",\\n\\\"depend\\\": [\\\"yfinance Python library\\\", \\\"sklearn Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A planetary geologist who analyzes the geological data of other planets to assess their habitability", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Planetary Habitability Analysis Interface\\\",\\n  \\\"description\\\": \\\"Fetches scientific articles related to the geology of a given planet and uses sentiment analysis on the abstracts of these articles to assess overall scientific sentiment towards the habitability of the planet.\\\",\\n  \\\"function_name\\\": \\\"analyze_planet_habitability\\\",\\n  \\\"input_args\\\": [\\n    {\\n      \\\"name\\\": \\\"planet_name\\\",\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"The name of the planet to analyze for habitability.\\\"\\n    }\\n  ],\\n  \\\"return\\\": {\\n    \\\"type\\\": \\\"float\\\",\\n    \\\"description\\\": \\\"The proportion of positive sentiments in the analyzed articles. A higher number indicates a more positive scientific sentiment towards the habitability of the planet.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n    \\\"web_apis\\\": [\\\"NASA's Astrophysics Data System (ADS) API\\\"],\\n    \\\"machine_learning_models\\\": [\\\"Huggingface sentiment-analysis\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An online bookseller specializing in rare first editions and signed copies", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Book Price Comparison Interface\\\",\\n  \\\"description\\\": \\\"Compare prices of a specific book from multiple online sellers\\\",\\n  \\\"function_name\\\": \\\"compare_book_prices\\\",\\n  \\\"input_args\\\": {\\n    \\\"book_name\\\": \\\"Name of the book\\\",\\n    \\\"edition\\\": \\\"Edition of the book\\\"\\n  },\\n  \\\"return\\\": \\\"Dictionary with prices from different sellers\\\",\\n  \\\"depend\\\": \\\"requests library, APIs from AbeBooks, Biblio, Bookfinder\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data scientist looking to broaden their understanding of system design", "synthesized text": "\"{\\n\\\"name\\\": \\\"System Design Interview Question Generator Interface\\\",\\n\\\"description\\\": \\\"This module uses a large language model to generate a new system design interview question based on a provided topic. This can help data scientists and other professionals prepare for system design interviews by providing them with a variety of unique and challenging questions to practice with.\\\",\\n\\\"function_name\\\": \\\"generate_system_design_question\\\",\\n\\\"input_args\\\": {\\n    \\\"topic\\\": \\\"The domain of the system design question to be generated (e.g., 'data pipelines', 'distributed systems')\\\"\\n},\\n\\\"return\\\": \\\"A system design interview question generated by a large language model\\\",\\n\\\"depend\\\": \\\"Large Language Model (e.g., GPT-3)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An amateur golfer and lifetime fan of Sheila Vaughan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Golf Swing Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub for pose estimation to analyze the user's golf swing. The user only needs to input the path to a video file of their golf swing, and the interface will return a sequence of images with estimated poses.\\\",\\n\\\"function_name\\\": \\\"analyze_golf_swing\\\",\\n\\\"input_args\\\": \\\"path_to_video: The path to the video file that contains the golf swing to be analyzed.\\\",\\n\\\"return\\\": \\\"A sequence of images with estimated poses, effectively breaking down and analyzing the golf swing\\\",\\n\\\"depend\\\": \\\"Python Libraries (cv2, numpy, tensorflow, tensorflow_hub), Machine Learning Model (MoveNet SinglePose: Lightning v1 from TensorFlow Hub)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A investigative reporter researching the impact of MERS on homeowners in Rhode Island", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mortgage Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the number of mortgages recorded by MERS for a given year in a given state using the Federal Housing Finance Agency API.\\\",\\n\\\"function_name\\\": \\\"get_mers_mortgage_data\\\",\\n\\\"input_args\\\": [\\\"state\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"Number of mortgages recorded by MERS for the given year in the given state.\\\",\\n\\\"depend\\\": \\\"requests library, Federal Housing Finance Agency API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An army officer who instills a strong sense of duty and integrity in their relatives", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Lie Detector Interface\\\",\\n  \\\"description\\\": \\\"An interface for a simple 'lie detector' that compares the sentiment of a statement with the sentiment of a known fact and decides whether the statement is likely to be true or false\\\",\\n  \\\"function_name\\\": \\\"lie_detector\\\",\\n  \\\"input_args\\\": {\\n    \\\"statement\\\": \\\"The statement to be analyzed\\\",\\n    \\\"known_fact\\\": \\\"The known fact to be compared with the statement\\\"\\n  },\\n  \\\"return\\\": \\\"A string that indicates whether the statement is likely to be true or false\\\",\\n  \\\"depend\\\": \\\"Huggingface's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A winemaking equipment manufacturer who supplies state-of-the-art machinery and tools for the vineyard", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wine Quality Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Huggingface's Model Hub to predict the quality of wine based on certain parameters.\\\",\\n\\\"function_name\\\": \\\"predict_wine_quality\\\",\\n\\\"input_args\\\": {\\n    \\\"fixed_acidity\\\": \\\"Fixed acidity of the wine\\\",\\n    \\\"volatile_acidity\\\": \\\"Volatile acidity of the wine\\\",\\n    \\\"citric_acid\\\": \\\"Citric acid content of the wine\\\",\\n    \\\"residual_sugar\\\": \\\"Residual sugar content of the wine\\\",\\n    \\\"chlorides\\\": \\\"Chlorides content of the wine\\\",\\n    \\\"free_sulfur_dioxide\\\": \\\"Free sulfur dioxide content of the wine\\\",\\n    \\\"total_sulfur_dioxide\\\": \\\"Total sulfur dioxide content of the wine\\\",\\n    \\\"density\\\": \\\"Density of the wine\\\",\\n    \\\"pH\\\": \\\"pH of the wine\\\",\\n    \\\"sulphates\\\": \\\"Sulphates content of the wine\\\",\\n    \\\"alcohol\\\": \\\"Alcohol content of the wine\\\"\\n},\\n\\\"return\\\": \\\"Predicted quality of the wine\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library and a pre-trained model ('distilbert-base-uncased-finetuned-wine-quality') from Huggingface's Model Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer who developed a decentralized peer-to-peer digital currency", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Transaction Verification Interface\\\",\\n\\\"description\\\": \\\"This interface verifies a Bitcoin transaction using the transaction ID provided by the user. It fetches and returns the transaction details from the Bitcoin blockchain.\\\",\\n\\\"function_name\\\": \\\"verify_transaction\\\",\\n\\\"input_args\\\": \\\"tx_id\\\",\\n\\\"return\\\": \\\"Transaction details if valid, or error message if transaction ID is invalid\\\",\\n\\\"depend\\\": \\\"Blockchain.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A game designer from Japan who integrates cultural diversity into her game designs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cultural Insights Interface\\\", \\n\\\"description\\\": \\\"This interface returns the top 10 recent news themes of a specified country. This could provide insights into the country's current cultural, social, and political climate.\\\", \\n\\\"function_name\\\": \\\"get_country_news_themes\\\", \\n\\\"input_args\\\": [\\\"country\\\"], \\n\\\"return\\\": \\\"List of top 10 recent news themes of the specified country.\\\", \\n\\\"depend\\\": \\\"GDELT Project API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hotel manager who worked under the magnate's leadership and seeks advice on industry challenges", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hotel Industry Challenges Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to analyze a challenge in the hotel industry and suggest a course of action.\\\",\\n\\\"function_name\\\": \\\"analyze_industry_challenge\\\",\\n\\\"input_args\\\": \\\"challenge_description - A string describing the challenge\\\",\\n\\\"return\\\": \\\"A string analysis of the challenge and a suggested course of action\\\",\\n\\\"depend\\\": \\\"Hugging Face's 'bert-base-uncased' model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An EEG researcher who is also a MATLAB enthusiast.", "synthesized text": "\"{\\n\\\"name\\\": \\\"EEG Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface loads and preprocesses an EEG dataset from a file. It applies a bandpass filter and Independent Component Analysis (ICA) for artifact removal.\\\",\\n\\\"function_name\\\": \\\"preprocess_eeg_data\\\",\\n\\\"input_args\\\": \\\"path_to_eeg_file\\\",\\n\\\"return\\\": \\\"2D NumPy array containing the preprocessed EEG data\\\",\\n\\\"depend\\\": \\\"MNE Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Progressive Jewish American voter who strongly supports Bernie Sanders.", "synthesized text": "\"{\\n\\\"name\\\": \\\"US Candidate Policy Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface compares the policy positions of two US political candidates on a specific issue. It uses web scraping to extract the relevant data from a political website.\\\",\\n\\\"function_name\\\": \\\"compare_policy_positions\\\",\\n\\\"input_args\\\": {\\\"candidate1\\\": \\\"string\\\", \\\"candidate2\\\": \\\"string\\\", \\\"issue\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"Dictionary with candidate names as keys and their policy positions as values.\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Australian surfer who befriended the Latvian-born individual at the local beach and shares their love for the ocean", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Beach Condition Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the OpenWeatherMap API to get the current weather, wind speed, and wave height of a certain beach.\\\",\\n\\\"function_name\\\": \\\"get_beach_conditions\\\",\\n\\\"input_args\\\": \\\"beach_name\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'Temperature', 'Wind Speed', and 'Weather Description', representing the current temperature, wind speed, and weather description of the beach, respectively\\\",\\n\\\"depend\\\": \\\"requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A newbie tabletop gamer seeking advice on character creation and game mechanics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Creation and Game Mechanics Advice Interface\\\",\\n\\\"description\\\": \\\"This interface generates a character with random attributes and provides advice on character creation and game mechanics based on the user's chosen game and character type.\\\",\\n\\\"function_name\\\": \\\"generate_character\\\",\\n\\\"input_args\\\": {\\\"game\\\": \\\"string\\\", \\\"character_type\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"attributes\\\": \\\"dictionary\\\", \\\"advice\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python\\\": [\\\"random\\\", \\\"transformers\\\"], \\\"models\\\": [\\\"GPT2LMHeadModel\\\", \\\"GPT2Tokenizer\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A Yuma, Arizona resident who drives a pickup truck and has little interest in luxury cars.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Fuel Efficiency Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface compares the fuel efficiency of two trucks. It uses data from the U.S. Department of Energy.\\\",\\n\\\"function_name\\\": \\\"compare_truck_efficiency\\\",\\n\\\"input_args\\\": {\\n    \\\"truck1\\\": {\\n        \\\"make\\\": \\\"The make of the first truck\\\",\\n        \\\"model\\\": \\\"The model of the first truck\\\"\\n    },\\n    \\\"truck2\\\": {\\n        \\\"make\\\": \\\"The make of the second truck\\\",\\n        \\\"model\\\": \\\"The model of the second truck\\\"\\n    }\\n},\\n\\\"return\\\": \\\"A statement comparing the fuel efficiency of the two trucks.\\\",\\n\\\"depend\\\": \\\"U.S. Department of Energy Web API, Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Unix System Programmer with a background in C", "synthesized text": "\"{\\n  \\\"name\\\": \\\"System Performance Monitoring Interface\\\",\\n  \\\"description\\\": \\\"Provides system utilization information including CPU, memory, disk, and network statistics.\\\",\\n  \\\"function_name\\\": \\\"get_system_performance\\\",\\n  \\\"input_args\\\": [],\\n  \\\"return\\\": \\\"A dictionary with keys \\\\\\\"CPU Utilization (%)\\\\\\\", \\\\\\\"Memory Utilization (%)\\\\\\\", \\\\\\\"Disk Utilization (%)\\\\\\\", and \\\\\\\"Network Stats\\\\\\\". The value of \\\\\\\"Network Stats\\\\\\\" is another dictionary with keys \\\\\\\"Bytes Sent\\\\\\\", \\\\\\\"Bytes Received\\\\\\\", \\\\\\\"Packets Sent\\\\\\\", and \\\\\\\"Packets Received\\\\\\\".\\\",\\n  \\\"depend\\\": \\\"Python library - psutil\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst presenting research on fertility rates at an international demographic conference", "synthesized text": "\"{\\n\\\"name\\\": \\\"World Bank Data Retrieval Interface\\\",\\n\\\"description\\\": \\\"Fetches fertility rate data for a given country and year using World Bank API\\\",\\n\\\"function_name\\\": \\\"get_fertility_rate\\\",\\n\\\"input_args\\\": [\\\"country\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"Fertility rate for the specified country and year or a message indicating if data is not available\\\",\\n\\\"depend\\\": \\\"requests library, World Bank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fan of Chris Kirchner who is disillusioned by his charges", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Player Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed sports statistics of a specified player using the 'api-football' API. It returns the player's statistics like goals scored, assists, red cards, yellow cards etc.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": \\\"player_name\\\",\\n\\\"return\\\": \\\"A dictionary containing player's statistics\\\",\\n\\\"depend\\\": \\\"requests library, 'api-football' API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior resident living in Gwanak-gu, Seoul.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface returns the current Air Quality Index (AQI), the primary pollutant, and the health advisory associated with the current AQI for a given location.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"state\\\", \\\"country\\\"],\\n\\\"return\\\": {\\\"Air Quality Index\\\": \\\"AQI value\\\", \\\"Primary Pollutant\\\": \\\"primary pollutant\\\", \\\"Health Implications\\\": \\\"health advisory\\\"},\\n\\\"depend\\\": [\\\"AirVisual API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am an experienced travel blogger who specializes in providing detailed guides and insights into transportation systems in different cities around the world.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Public Transport Route Planner Interface\\\",\\n  \\\"description\\\": \\\"This interface takes the current location, destination, and departure time as input, and returns the best public transport routes using data from OpenTripPlanner.\\\",\\n  \\\"function_name\\\": \\\"get_public_transport_routes\\\",\\n  \\\"input_args\\\": [\\\"current_location\\\", \\\"destination\\\", \\\"departure_time\\\"],\\n  \\\"return\\\": \\\"A list of route options, where each route option includes the total duration, the number of transfers, the total walking distance, and a list of the individual legs of the journey, with each leg specifying the mode of transport, the route number, and the departure and arrival times.\\\",\\n  \\\"depend\\\": \\\"OpenTripPlanner API, datetime, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A risk manager who applies statistical methodologies to measure, manage, and mitigate financial uncertainties", "synthesized text": "\"{\\n\\\"name\\\": \\\"Value-at-Risk Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the Value at Risk (VaR) of a portfolio of assets at a given confidence level.\\\",\\n\\\"function_name\\\": \\\"calculate_portfolio_var\\\",\\n\\\"input_args\\\": [\\\"asset_prices\\\", \\\"weights\\\", \\\"confidence_level\\\"],\\n\\\"return\\\": \\\"Value at Risk of the portfolio\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An aspiring playwright inspired by traditional Chinese performing arts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chinese Poetry Generation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from HuggingFace to generate Chinese poetry. Users can input the first line of the poem, and the rest of the poem will be generated.\\\",\\n\\\"function_name\\\": \\\"generate_chinese_poetry\\\",\\n\\\"input_args\\\": [\\\"first_line\\\", \\\"max_length\\\"],\\n\\\"return\\\": \\\"string representing the generated poem\\\",\\n\\\"depend\\\": \\\"python libraries: transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tech-savvy mother who has seen the positive impact of digital storybooks on her children and wants to support the coordinator's efforts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Digital Storybook Reader Interface\\\",\\n\\\"description\\\": \\\"This interface converts a story text into an audio file using Google's Text-to-Speech API. Users just need to provide the text from the storybook, and the interface will return an audio file of the story read out loud.\\\",\\n\\\"function_name\\\": \\\"text_to_audio\\\",\\n\\\"input_args\\\": {\\\"story_text\\\": \\\"string\\\", \\\"filename\\\": \\\"string (optional)\\\"},\\n\\\"return\\\": \\\"The name of the audio file with the spoken text\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former ringmaster who reminisces about the glory days of the circus", "synthesized text": "\"{\\n\\\"name\\\": \\\"Circus Show Poster Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a circus show poster given the name of the circus and show title. It uses a large language model to generate a catchy description and then creates a poster image using PIL and a font fetched from Google Fonts.\\\",\\n\\\"function_name\\\": \\\"generate_circus_poster\\\",\\n\\\"input_args\\\": [\\\"circus_name\\\", \\\"show_title\\\"],\\n\\\"return\\\": \\\"A graphical poster image which is displayed.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"PIL\\\", \\\"requests\\\", \\\"io\\\", \\\"transformers\\\"], \\\"Web APIs\\\": [\\\"Google Fonts API\\\"], \\\"machine learning models\\\": [\\\"GPT2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a graduate student who chose major in applied physics because of Professor Edward Yu's inspiration.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Optical Properties Calculator Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates the optical properties such as refractive index and absorption coefficient of a certain material at a specified wavelength using the Python library py_materials.\\\",\\n\\\"function_name\\\": \\\"calculate_optical_properties\\\",\\n\\\"input_args\\\": {\\n    \\\"material\\\": \\\"Type of material (string)\\\",\\n    \\\"wavelength\\\": \\\"Wavelength in nanometers (float)\\\"\\n},\\n\\\"return\\\": {\\n    \\\"refractive_index\\\": \\\"Refractive index of the material at the given wavelength (float)\\\",\\n    \\\"absorption_coefficient\\\": \\\"Absorption coefficient of the material at the given wavelength (float)\\\"\\n},\\n\\\"depend\\\": [\\\"Python library: py_materials\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young child suffering from severe eczema and seeking relief from the constant itching and discomfort", "synthesized text": "\"{\\n\\\"name\\\": \\\"Eczema Relief Suggestions Interface\\\",\\n\\\"description\\\": \\\"This interface provides high-level, professional health information on managing eczema. It fetches the information from the National Library of Medicine's Health Topics API.\\\",\\n\\\"function_name\\\": \\\"get_eczema_relief_suggestions\\\",\\n\\\"input_args\\\": \\\"None\\\",\\n\\\"return\\\": \\\"A list of URLs containing professional medical advice and suggestions on how to manage and alleviate eczema symptoms.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries, National Library of Medicine's Health Topics API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cousin who recently married a foreign national and needs guidance on the marriage-based immigration process", "synthesized text": "\"{\\n  \\\"name\\\": \\\"USCIS Form Filling Interface\\\",\\n  \\\"description\\\": \\\"An interface that fills in USCIS Form I-130 using user-provided details.\\\",\\n  \\\"function_name\\\": \\\"fill_form_i130\\\",\\n  \\\"input_args\\\": {\\n    \\\"user_details\\\": \\\"A dictionary where keys are field names in the form and values are the user's responses.\\\",\\n    \\\"spouse_details\\\": \\\"A dictionary where keys are field names in the form and values are the spouse's responses.\\\"\\n  },\\n  \\\"return\\\": \\\"A completed Form I-130 saved as 'completed_form_i130.pdf'.\\\",\\n  \\\"depend\\\": \\\"Python's pdfrw library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An editor at a popular geek culture magazine who regularly features the photographer's cosplay photography in their publication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cosplay Image Background Removal Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to remove the background of cosplay images. Users only need to input the path to an image file, and the interface will return the image with the background removed.\\\",\\n\\\"function_name\\\": \\\"remove_background\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\"],\\n\\\"return\\\": \\\"numpy array representing the image with background removed\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\", \\\"magenta/arbitrary-image-stylization-v1-256 TensorFlow Hub model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a mountaineer from Latin America", "synthesized text": "\"{\\n\\\"name\\\": \\\"Altitude Sickness Predictive Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the risk of altitude sickness based on altitude, physical condition, and history of altitude sickness. It uses a pre-trained RandomForestClassifier model for prediction.\\\",\\n\\\"function_name\\\": \\\"altitude_sickness_predictor\\\",\\n\\\"input_args\\\": [\\\"altitude: The altitude the mountaineer is climbing to in meters\\\", \\\"physical_condition: The current physical condition of the mountaineer on a scale of 1-10\\\", \\\"history_of_altitude_sickness: Whether the mountaineer has a history of altitude sickness. 1 for Yes and 0 for No\\\"],\\n\\\"return\\\": \\\"A string indicating the risk of altitude sickness: Low, Moderate, or High\\\",\\n\\\"depend\\\": \\\"sklearn, pandas, joblib and a pre-trained RandomForestClassifier model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aspiring young female entrepreneur in India, particularly interested in breaking glass ceilings and women's leadership roles.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Women Leaders News Interface\\\",\\n\\\"description\\\": \\\"An interface to get the latest news about women leaders around the world using the GDELT Project's API.\\\",\\n\\\"function_name\\\": \\\"get_women_leaders_news\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A list of dictionaries, each representing a news article about women leaders. Each dictionary includes details like the title of the article, the URL, the source, and the date of publication.\\\",\\n\\\"depend\\\": \\\"Python's requests library for making HTTP requests, Python's xml.etree.ElementTree library for parsing the XML response from the API, and the GDELT Project's API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A financial institution seeking advice on implementing secure encryption algorithms in their online banking platform", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure Encryption Interface\\\",\\n\\\"description\\\": \\\"This interface provides simple and secure methods for encrypting and decrypting data using a secret key.\\\",\\n\\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_data\\\", \\\"decrypt_data\\\"],\\n\\\"input_args\\\": {\\\"generate_key\\\": [], \\\"encrypt_data\\\": [\\\"key\\\", \\\"data\\\"], \\\"decrypt_data\\\": [\\\"key\\\", \\\"cipher_text\\\"]},\\n\\\"return\\\": {\\\"generate_key\\\": \\\"key\\\", \\\"encrypt_data\\\": \\\"cipher_text\\\", \\\"decrypt_data\\\": \\\"original_data\\\"},\\n\\\"depend\\\": [\\\"cryptography.fernet\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A sibling who, against all odds, manages to win big in high-stakes blackjack games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blackjack Strategy Interface\\\",\\n\\\"description\\\": \\\"This interface suggests the best possible action (hit, stand, double down, or split) for a given blackjack hand based on basic blackjack strategy.\\\",\\n\\\"function_name\\\": \\\"blackjack_best_move\\\",\\n\\\"input_args\\\": {\\\"player_hand\\\": \\\"The player's current hand as a list of pydealer Card objects\\\", \\\"dealer_card\\\": \\\"The dealer's visible card as a pydealer Card object\\\"},\\n\\\"return\\\": \\\"A string that is the suggested action ('Hit', 'Stand', 'Double Down', 'Split')\\\",\\n\\\"depend\\\": \\\"Python library 'pydealer'\\\"\\n}\"", "description": "tool development"}
{"input persona": "Ein Reiseblogger mit einer Vorliebe für versteckte Juwelen Europas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hidden European Gems Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface to recommend hidden gems in Europe based on users' preferred activities and current country. It uses TripAdvisor's API to find attractions that are highly rated but have less than 100 reviews.\\\",\\n\\\"function_name\\\": \\\"get_hidden_gems_in_europe\\\",\\n\\\"input_args\\\": [\\\"preferred_activities\\\", \\\"current_country\\\"],\\n\\\"return\\\": \\\"A list of names of recommended hidden gems in Europe.\\\",\\n\\\"depend\\\": \\\"requests library, TripAdvisor API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A documentary film-maker often highlighting societal changes triggered by rapid urban growth", "synthesized text": "\"{\\n\\\"name\\\": \\\"Urban Growth Data Visualization Interface\\\",\\n\\\"description\\\": \\\"An interface to visualize the urban growth data of a specified country. The data is fetched from the World Bank's API and visualized using seaborn and matplotlib libraries.\\\",\\n\\\"function_name\\\": \\\"plot_urban_growth\\\",\\n\\\"input_args\\\": \\\"country_name - The name of the country for which the urban growth data is to be plotted.\\\",\\n\\\"return\\\": \\\"A line plot showing the urban growth rate in the specified country over the years.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, seaborn, matplotlib, requests; Web APIs: World Bank's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired civil engineer who once was a colleague of James Price and pursued a similar career path", "synthesized text": "\"{\\n\\\"name\\\": \\\"Structural Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the FEniCS Project, a popular computing platform for solving partial differential equations (PDEs), to perform structural analysis. The user inputs the material properties, load conditions, and dimensions of the structure, and the interface returns the displacement and stress distribution in the structure.\\\",\\n\\\"function_name\\\": \\\"structural_analysis\\\",\\n\\\"input_args\\\": {\\n\\\"E\\\": \\\"Young's modulus of the material\\\",\\n\\\"nu\\\": \\\"Poisson's ratio of the material\\\",\\n\\\"rho\\\": \\\"Density of the material\\\",\\n\\\"g\\\": \\\"Acceleration due to gravity\\\",\\n\\\"L\\\": \\\"Length of the structure\\\",\\n\\\"W\\\": \\\"Width of the structure\\\",\\n\\\"H\\\": \\\"Height of the structure\\\"\\n},\\n\\\"return\\\": {\\n\\\"u\\\": \\\"Displacement and stress distribution in the structure\\\"\\n},\\n\\\"depend\\\": {\\n\\\"fenics\\\": \\\"A popular computing platform for solving PDEs\\\"\\n}\\n}\"", "description": "tool development"}
{"input persona": "an ex high school classmate of Dr. Kaitlyn Kelly Gabe, who has chosen to lead an ordinary life in small-town Escanaba, and stays away from social media.", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Digest Interface\\\",\\n\\\"description\\\": \\\"This interface returns the latest news about a specific topic or a person. The news data is parsed from Google News RSS feed.\\\",\\n\\\"function_name\\\": \\\"get_latest_news\\\",\\n\\\"input_args\\\": [\\\"topic\\\"],\\n\\\"return\\\": \\\"A list of the latest 5 news items about the topic. Each news item is a dictionary containing 'title', 'link', and 'pubDate'.\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Liberal Arts student seeking help to understand the basics of coding for a required computer science course", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Explanation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input a Python code snippet as a string, and it will return the output of the code execution. This is useful for beginners to understand what specific lines of code or code blocks do when executed.\\\",\\n\\\"function_name\\\": \\\"run_python_code\\\",\\n\\\"input_args\\\": \\\"code - A string of Python code\\\",\\n\\\"return\\\": \\\"The output of the Python code execution\\\",\\n\\\"depend\\\": \\\"Algorithmia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A forensic ballistics expert who analyzes firearms and ammunition for criminal investigations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Firearm Identification Interface\\\", \\n\\\"description\\\": \\\"This interface identifies the type of firearm from an image.\\\", \\n\\\"function_name\\\": \\\"get_firearm_id\\\", \\n\\\"input_args\\\": [\\\"image_path\\\"], \\n\\\"return\\\": \\\"A list of identified firearm types from the image.\\\", \\n\\\"depend\\\": [\\\"cv2\\\", \\\"numpy\\\", \\\"firearm_haarcascade.xml\\\", \\\"identify_firearm function\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A technology provider specializing in 3D printing and scanning solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Generation Interface\\\",\\n\\\"description\\\": \\\"This interface is used to generate 3D models from point cloud data. The user inputs a file path to a point cloud data file, and the interface returns a 3D mesh model.\\\",\\n\\\"function_name\\\": \\\"point_cloud_to_mesh\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"3D mesh model\\\",\\n\\\"depend\\\": {\\\"python_library\\\": [\\\"trimesh\\\", \\\"numpy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am an elderly Australian who has never had experience with dementia or any kind of cognitive deterioration but is very sympathetic to those who are.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disease Progression Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the progression of diseases like dementia based on certain health metrics.\\\",\\n\\\"function_name\\\": \\\"predict_disease_progression\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"bmi\\\", \\\"blood_pressure\\\", \\\"cholesterol_level\\\"],\\n\\\"return\\\": \\\"Prediction on the disease progression.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow.keras\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A pedestrian safety activist campaigning for improved crosswalk infrastructure", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crosswalk Safety Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the safety of a crosswalk using Google Street View API and a pre-trained object detection model from TensorFlow Hub. It gives a safety score based on the presence of safety measures like traffic lights and zebra crossing lines.\\\",\\n\\\"function_name\\\": \\\"analyze_crosswalk_safety\\\",\\n\\\"input_args\\\": {\\n    \\\"lat\\\": \\\"Latitude of the crosswalk\\\",\\n    \\\"long\\\": \\\"Longitude of the crosswalk\\\"\\n},\\n\\\"return\\\": \\\"A safety score based on the detected safety measures. Higher scores indicate safer crosswalks.\\\",\\n\\\"depend\\\": \\\"Google Street View API, TensorFlow, TensorFlow Hub, and a pre-trained object detection model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hardcore Bad Boys fan who has been eager for a new installment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Release Date Check Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check the release date of a movie by simply inputting the movie's name.\\\",\\n\\\"function_name\\\": \\\"get_movie_release_date\\\",\\n\\\"input_args\\\": \\\"movie_name\\\",\\n\\\"return\\\": \\\"The release date of the input movie, or a message indicating that the movie was not found or the API request failed.\\\",\\n\\\"depend\\\": \\\"TMDB (The Movie Database) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school dropout now working in construction, proud of but unable to relate to their sibling's academic pursuits", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Scientific Concept Explanation Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a scientific concept as input and uses a large language model to produce a simpler, more understandable explanation.\\\",\\n  \\\"function_name\\\": \\\"simplify_scientific_concept\\\",\\n  \\\"input_args\\\": \\\"concept - a string representing a scientific concept\\\",\\n  \\\"return\\\": \\\"A string containing a simplified explanation of the concept.\\\",\\n  \\\"depend\\\": \\\"LLM\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student who stumbled across their content and became inspired to learn more about imperialism", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Imperialism Study Resource Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches information related to Imperialism from Wikipedia and provides it in a structured way. The user only needs to input the specific topic they are interested in, and our interface will return a brief summary and link to more detailed information.\\\",\\n  \\\"function_name\\\": \\\"get_wikipedia_summary\\\",\\n  \\\"input_args\\\": {\\\"topic\\\": \\\"string\\\"},\\n  \\\"return\\\": {\\\"summary\\\": \\\"string\\\", \\\"url\\\": \\\"string\\\"},\\n  \\\"depend\\\": {\\\"requests\\\": \\\"Python Library\\\", \\\"Wikipedia API\\\": \\\"Web API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A concession stand worker at the local sports stadium experienced in preparing favorite game snacks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Game Snack Recommendations Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends similar snacks based on a user's favorite snack.\\\",\\n\\\"function_name\\\": \\\"recommend_snacks\\\",\\n\\\"input_args\\\": \\\"favorite_snack - a string representing the user's favorite snack\\\",\\n\\\"return\\\": \\\"A list of strings, each representing a snack recommendation\\\",\\n\\\"depend\\\": \\\"HuggingFace's text-generation pipeline and the GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An intelligence agent who recognizes the importance of preserving press freedom and collaborates with the cybersecurity expert to protect journalists", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Encrypted Communication Interface\\\", \\n  \\\"description\\\": \\\"An interface for secure, encrypted communication. The user inputs a message and a shared secret key, and the interface returns the encrypted message.\\\", \\n  \\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_message\\\", \\\"decrypt_message\\\"], \\n  \\\"input_args\\\": [\\\"message\\\", \\\"key\\\"], \\n  \\\"return\\\": \\\"encrypted_message/decrypted_message\\\", \\n  \\\"depend\\\": [\\\"cryptography\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A person who avoids dealing with paperwork and feels stressed by tax season.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tax Calculation Interface\\\",\\n  \\\"description\\\": \\\"An interface that processes financial data from a CSV file and calculates the estimated tax owed based on the 2021 tax brackets for single filers in the United States.\\\",\\n  \\\"function_name\\\": \\\"calculate_tax\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_csv\\\": \\\"The path to a CSV file containing financial details. The CSV file should have columns named 'Income' and 'Expenses'.\\\"\\n  },\\n  \\\"return\\\": \\\"The estimated tax owed, rounded to 2 decimal places.\\\",\\n  \\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A classically trained actor learning to adapt to avant-garde theater", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts a given input text to speech and saves it as an mp3 file. It can be used to help actors listen to dialogues or scripts.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"filename\\\"],\\n\\\"return\\\": \\\"An mp3 file with the spoken text.\\\",\\n\\\"depend\\\": \\\"gTTS Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是名热衷于研究中国城市轨道交通的城市规划师。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u57ce\\u5e02\\u8f68\\u9053\\u4ea4\\u901a\\u67e5\\u8be2\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u8be5\\u63a5\\u53e3\\u5141\\u8bb8\\u7528\\u6237\\u901a\\u8fc7\\u8f93\\u5165\\u57ce\\u5e02\\u540d\\u79f0\\u548c\\u4ea4\\u901a\\u7ebf\\u8def\\u540d\\u79f0\\uff0c\\u6765\\u83b7\\u53d6\\u8be5\\u57ce\\u5e02\\u7684\\u8f68\\u9053\\u4ea4\\u901a\\u7ebf\\u8def\\u8be6\\u60c5\\u3002\\\",\\n\\\"function_name\\\": \\\"get_city_subway_info\\\",\\n\\\"input_args\\\": [\\\"city_name\\\", \\\"line_name\\\"],\\n\\\"return\\\": \\\"\\u8fd4\\u56de\\u8be5\\u57ce\\u5e02\\u7684\\u8f68\\u9053\\u4ea4\\u901a\\u7ebf\\u8def\\u8be6\\u60c5\\u3002\\\",\\n\\\"depend\\\": \\\"\\u8be5\\u51fd\\u6570\\u4f7f\\u7528\\u4e86requests\\u5e93\\u548c\\u9ad8\\u5fb7\\u5730\\u56feAPI\\u3002\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud alumnus of Alpha Mu Sigma at the Cooper Union Institute of Technology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alumni Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve notable alumni of a specific fraternity or university.\\\",\\n\\\"function_name\\\": \\\"get_notable_alumni\\\",\\n\\\"input_args\\\": \\\"fraternity_or_university\\\",\\n\\\"return\\\": \\\"List of names of notable alumni\\\",\\n\\\"depend\\\": \\\"LinkedIn's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hot-headed shooter specialist with exceptional reflexes and in-game mechanics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Stats Analysis Interface\\\",\\n\\\"description\\\": \\\"Predict the player's in-game performance based on their historical game data\\\",\\n\\\"function_name\\\": \\\"analyze_game_performance\\\",\\n\\\"input_args\\\": [\\\"game_username\\\", \\\"game_name\\\"],\\n\\\"return\\\": \\\"Analysis of the player's game performance\\\",\\n\\\"depend\\\": \\\"HuggingFace\\u2019s transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a retired official from Henan province, familiar with the political landscape of China's local governments.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Government Structure Query\\\",\\n\\\"description\\\": \\\"This interface uses a web scraping library (Beautiful Soup) to extract the structure of local government departments from the official webpage of China's local governments.\\\",\\n\\\"function_name\\\": \\\"get_local_government_structure\\\",\\n\\\"input_args\\\": {\\n    \\\"province\\\": \\\"The province of the local government. E.g., 'henan'\\\",\\n    \\\"city\\\": \\\"The city of the local government. E.g., 'zhengzhou'\\\"\\n},\\n\\\"return\\\": \\\"A list of local government department names.\\\",\\n\\\"depend\\\": \\\"Python's requests library for making HTTP requests, and Beautiful Soup library for parsing HTML documents.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A producer working on implementing virtual reality technology in broadcasting live sports", "synthesized text": "\"{\\n\\\"name\\\": \\\"360 Degree Video Stitching Interface\\\",\\n\\\"description\\\": \\\"This interface stitches videos from multiple cameras into a single 360 degree video. Useful in broadcasting live sports for an immersive experience.\\\",\\n\\\"function_name\\\": \\\"stitch_videos\\\",\\n\\\"input_args\\\": \\\"video_files - A list of paths to the video files to be stitched\\\",\\n\\\"return\\\": \\\"stitched_frame - A frame from the stitched 360 degree video, or None if stitching failed\\\",\\n\\\"depend\\\": \\\"OpenCV - A powerful library for computer vision tasks\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional cleaner who ensures properties are immaculate before viewings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Room Odor Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to analyze the odor profile of a room and determine whether it has an unpleasant smell.\\\",\\n\\\"function_name\\\": \\\"analyze_room_odor\\\",\\n\\\"input_args\\\": {\\n\\\"odor_data\\\": \\\"An array of floats representing the odor profile of a room.\\\"\\n},\\n\\\"return\\\": \\\"A string that says whether the room has an unpleasant smell or not.\\\",\\n\\\"depend\\\": \\\"scikit-learn library, electronic nose sensor, Raspberry Pi\\\"\\n}\"", "description": "tool development"}
{"input persona": "A video game programmer working on the next big fantasy RPG, drawing inspiration from various anime", "synthesized text": "\"{\\n\\\"name\\\": \\\"Anime Character Recognition Interface\\\", \\n\\\"description\\\": \\\"An interface to recognize characters in anime images. Input the path to an anime image file, and it will return the recognized anime character's name.\\\", \\n\\\"function_name\\\": \\\"recognize_anime_character\\\", \\n\\\"input_args\\\": \\\"path_to_img\\\", \\n\\\"return\\\": \\\"character_name\\\", \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"], \\n            \\\"machine learning models\\\": [\\\"https://tfhub.dev/google/cropnet/feature_vector/anime_character_recognition/1\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A botanist studying the unique flora of the Burren and its relationship with soil nutrients", "synthesized text": "\"{\\n\\\"name\\\": \\\"Soil Nutrient Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface predicts the nutrient content in the soil based on its properties such as color, texture, and pH level. It uses a RandomForestRegressor model from scikit-learn library.\\\", \\n\\\"function_name\\\": \\\"predict_nutrient_content\\\", \\n\\\"input_args\\\": [\\\"color\\\", \\\"texture\\\", \\\"pH_level\\\"], \\n\\\"return\\\": {\\\"N\\\": \\\"Estimated Nitrogen content\\\", \\\"P\\\": \\\"Estimated Phosphorus content\\\", \\\"K\\\": \\\"Estimated Potassium content\\\"},\\n\\\"depend\\\": \\\"scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A product manager responsible for planning and coordinating the development of Jenkins X features", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Jenkins X Feature Release Planning Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch the list of issues, pull requests, and commits for Jenkins X project using GitHub API. This will help in planning and coordinating the development of Jenkins X features.\\\",\\n  \\\"function_name\\\": \\\"get_jenkins_x_issues_pulls_commits\\\",\\n  \\\"input_args\\\": {\\n    \\\"username\\\": \\\"Username of the owner of the repository\\\",\\n    \\\"repo\\\": \\\"Name of the repository\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary containing the list of issues, pull requests, and commits.\\\",\\n  \\\"depend\\\": \\\"Python requests library, GitHub API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another fellow recruit who shares the ambition to serve the country", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physical Fitness Test Score Calculator\\\",\\n\\\"description\\\": \\\"This function calculates the scores for the U.S. Army Physical Fitness Test (APFT).\\\",\\n\\\"function_name\\\": \\\"calculate_score\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"gender\\\", \\\"pushups\\\", \\\"situps\\\", \\\"run_time\\\"],\\n\\\"return\\\": {\\\"pushup_score\\\": \\\"The score for the push-up event.\\\", \\\"situp_score\\\": \\\"The score for the sit-up event.\\\", \\\"run_score\\\": \\\"The score for the 2-mile run event.\\\"},\\n\\\"depend\\\": [\\\"Python\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A seasoned risk analyst experienced in identifying potential threats in imported goods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Threat Identification Interface\\\",\\n\\\"description\\\": \\\"An interface that uses TensorFlow's pre-trained text classification models to identify potential threats in the descriptions of imported goods.\\\",\\n\\\"function_name\\\": \\\"identify_threat\\\",\\n\\\"input_args\\\": \\\"description\\\",\\n\\\"return\\\": \\\"threat_level\\\",\\n\\\"depend\\\": \\\"TensorFlow Hub, TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired nurse who offers practical tips on baby care and parenting based on her years of experience", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baby Crying Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses deep learning to analyze the sound of a baby's cry and classify it into different categories such as hunger, sleepiness, need for a diaper change, discomfort, etc.\\\",\\n\\\"function_name\\\": \\\"analyze_baby_cry\\\",\\n\\\"input_args\\\": \\\"audio_file_path - The path to an audio file of the baby's cry.\\\",\\n\\\"return\\\": \\\"An integer representing the likely reason for the baby's cry. This can be interpreted as follows: 0 for Hunger, 1 for Sleepiness, 2 for Need for a diaper change, 3 for Discomfort, 4 for Need for attention.\\\",\\n\\\"depend\\\": \\\"This function depends on the tensorflow, tensorflow_hub, numpy, and scipy libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A record label CEO seeking the next big country music star", "synthesized text": "\"{\\n\\\"name\\\": \\\"Country Music Talent Finder Interface\\\",\\n\\\"description\\\": \\\"An interface to find emerging country music artists using the Spotify Web API.\\\",\\n\\\"function_name\\\": \\\"find_emerging_country_artists\\\",\\n\\\"input_args\\\": {\\n    \\\"client_id\\\": \\\"Your Spotify Client ID\\\",\\n    \\\"client_secret\\\": \\\"Your Spotify Client Secret\\\"\\n},\\n\\\"return\\\": \\\"A list of promising country music artists based on their recent popularity and the number of followers.\\\",\\n\\\"depend\\\": \\\"Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A university student who cares about internet speed but doesn't use DC++", "synthesized text": "\"{\\n\\\"name\\\": \\\"Internet Speed Test Interface\\\",\\n\\\"description\\\": \\\"This interface measures the download and upload speed of your internet connection.\\\",\\n\\\"function_name\\\": \\\"get_internet_speed\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": {\\\"Download Speed\\\": \\\"float, download speed in Mbps\\\", \\\"Upload Speed\\\": \\\"float, upload speed in Mbps\\\"},\\n\\\"depend\\\": [\\\"speedtest-cli\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A county commissioner responsible for approving or denying permits related to mineral extraction on the rancher's land", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mineral Permit Approval Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes the details of a mineral extraction permit as input, and predicts whether the permit would be approved or denied.\\\",\\n\\\"function_name\\\": \\\"predict_permit_approval\\\",\\n\\\"input_args\\\": [\\\"permit_details\\\"],\\n\\\"return\\\": \\\"Predicted outcome of the permit ('Approve' or 'Deny').\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library and a pre-trained text classification model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from the Ministry of Religious Affairs who consults with the cleric on matters related to Islam and religious policies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Islamic Hadith Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to retrieve Hadiths (sayings of Prophet Muhammad PBUH) by the name of the narrator (Sahaba).\\\",\\n\\\"function_name\\\": \\\"get_hadiths_by_sahaba\\\",\\n\\\"input_args\\\": \\\"sahaba_name - The name of the companion of the Prophet (pbuh) in English.\\\",\\n\\\"return\\\": \\\"A list of Hadiths narrated by the specified Sahaba. If an error occurs, returns an error message.\\\",\\n\\\"depend\\\": \\\"Python's requests library and Al Adhan API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student who contracted an antibiotic-resistant infection while studying abroad", "synthesized text": "\"{\\n\\\"name\\\": \\\"Antibiotic Resistant Bacteria Identifier Interface\\\",\\n\\\"description\\\": \\\"This interface uses a deep learning model to identify antibiotic-resistant bacteria from microscope images.\\\",\\n\\\"function_name\\\": \\\"identify_antibiotic_resistant_bacteria\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\"],\\n\\\"return\\\": \\\"A boolean value indicating whether the bacteria in the image are likely to be antibiotic-resistant or not.\\\",\\n\\\"depend\\\": \\\"A pre-trained model from TensorFlow Hub (https://tfhub.dev/google/antibiotic_resistance_identifier/1)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned electrical engineer with years of experience in designing circuit boards for mobile devices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Circuit Board Design Checker Interface\\\",\\n\\\"description\\\": \\\"Interface to automatically check for common design issues in a KiCad PCB file\\\",\\n\\\"function_name\\\": \\\"check_circuit_design\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"Path to the KiCad PCB file\\\"\\n},\\n\\\"return\\\": \\\"List of potential issues in the design\\\",\\n\\\"depend\\\": \\\"KiCad Python API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An airline pilot who frequently experiences jet lag and relies on their sibling's expertise to manage sleep schedules", "synthesized text": "\"{\\n\\\"name\\\": \\\"Jet Lag Management Interface\\\",\\n\\\"description\\\": \\\"This interface is developed to help airline pilots manage their sleep schedules efficiently when they frequently experience jet lag. It predicts the optimal sleep schedule based on the departure and arrival timezones and the flight duration.\\\",\\n\\\"function_name\\\": \\\"get_sleep_schedule\\\",\\n\\\"input_args\\\": [\\\"departure_tz\\\", \\\"arrival_tz\\\", \\\"flight_duration\\\"],\\n\\\"return\\\": \\\"A string representing the optimal sleep schedule in hours since midnight.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pytz\\\", \\\"datetime\\\", \\\"tensorflow\\\", \\\"pandas\\\"], \\\"machine learning models\\\": [\\\"sleep_schedule_model.h5\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An acclaimed aviation historian who provides a fresh perspective on the women aviators' accomplishments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Flight Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that retrieves historical flight data, filters it by pilot gender, and returns a graph showing the number of flights over time.\\\",\\n\\\"function_name\\\": \\\"analyze_women_aviation_history\\\",\\n\\\"input_args\\\": {\\n    \\\"start_date\\\": \\\"The start of the date range for which to retrieve flight data, represented as a Unix timestamp.\\\",\\n    \\\"end_date\\\": \\\"The end of the date range for which to retrieve flight data, represented as a Unix timestamp.\\\"\\n},\\n\\\"return\\\": \\\"A graph showing the number of flights piloted by women over time, output directly to the console.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas, matplotlib. Web API: OpenSky API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a junior architect in the United States who aspires to contribute to the society", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Energy Consumption Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the energy consumption of a building given its features using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"estimate_building_energy_consumption\\\",\\n\\\"input_args\\\": \\\"building_features - a dictionary where the keys are the feature names and the values are the corresponding feature values\\\",\\n\\\"return\\\": \\\"An estimate of the building's energy consumption\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, sklearn. A pre-trained model 'pre_trained_building_energy_model.joblib' is required.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A city council member passionate about animal welfare, willing to provide financial support for the rebranding", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Shelter Funding Distribution Interface\\\",\\n\\\"description\\\": \\\"This interface distributes a given amount of money equally among all pet shelters in a specified city, and returns a list of the shelters along with the amount they will receive and their geolocation.\\\",\\n\\\"function_name\\\": \\\"distribute_funds\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"amount\\\"],\\n\\\"return\\\": \\\"A dictionary with shelter names as keys, and the corresponding values being another dictionary with keys 'amount' and 'location', representing the amount of money the shelter will receive and its geolocation, respectively.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Petfinder API\\\", \\\"OpenStreetMap API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A diehard fan of Anna Asti and Ukrainian pop music", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Translate Lyrics Interface\\\",\\n  \\\"description\\\": \\\"Translate Ukrainian lyrics to English.\\\",\\n  \\\"function_name\\\": \\\"translate_lyrics\\\",\\n  \\\"input_args\\\": [\\\"lyrics\\\"],\\n  \\\"return\\\": \\\"String - Translated English lyrics\\\",\\n  \\\"depend\\\": \\\"Python library: transformers, Machine learning model: Helsinki-NLP/opus-mt-uk-en\\\"\\n}\"", "description": "tool development"}
{"input persona": "Children's book author who often bounces off ideas for stories and characters", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Name Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a list of fictional character names based on a seed word or phrase, using a pre-trained GPT-2 model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"generate_character_names\\\",\\n\\\"input_args\\\": [\\\"seed_word\\\", \\\"num_names\\\"],\\n\\\"return\\\": \\\"List of generated character names\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"gpt2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A curious homeowner who knows little about oak flooring", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wood Density Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the density of a given wood sample using a deep learning model. Users only need to provide an image of the wood sample.\\\",\\n\\\"function_name\\\": \\\"estimate_wood_density\\\",\\n\\\"input_args\\\": \\\"path_to_img - a string indicating the path to the image file of the wood sample\\\",\\n\\\"return\\\": \\\"a numpy array representing the estimated density of the wood\\\",\\n\\\"depend\\\": \\\"Python libraries: TensorFlow, TensorFlow Hub; Machine learning model: a hypothetical model from TensorFlow Hub trained to estimate wood density from images\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bestselling author who requires seamless integration between their writing software and the publishing company's database", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Uploading Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of uploading a document to a publisher's server using their REST API. The user only needs to provide the path to their document file.\\\",\\n\\\"function_name\\\": \\\"upload_document\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the document file to be uploaded.\\\"\\n},\\n\\\"return\\\": \\\"The HTTP status code from the response to the upload request. A status code of 200 typically indicates a successful upload.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Publisher's API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A GPS voiceover artist who takes his job too seriously", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text to Speech Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface that converts input text to speech, creating an audio file.\\\",\\n\\\"function_name\\\": \\\"text_to_speech_conversion\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"language\\\", \\\"slow\\\", \\\"filename\\\"],\\n\\\"return\\\": \\\"The path to the output audio file.\\\",\\n\\\"depend\\\": \\\"Google Text to Speech (gTTS) library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tennis coach who never made it to the professional league herself.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tennis Match Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to analyze the performance of tennis players by providing a CSV file containing the match data. The interface will return a detailed report with statistical analysis and plots.\\\",\\n\\\"function_name\\\": \\\"analyze_performance\\\",\\n\\\"input_args\\\": \\\"file_path - The path to the CSV file containing the match data.\\\",\\n\\\"return\\\": \\\"A dictionary consisting of total match wins and points won by each player. Also, it will display two bar graphs showing the comparison between the two players in terms of match wins and points won.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A social media influencer who shares exclusive behind-the-scenes content of Peter Sagan's races", "synthesized text": "\"{\\n\\\"name\\\": \\\"Instagram Post Analytics Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches and returns the analytics of a specific Instagram post.\\\",\\n\\\"function_name\\\": \\\"get_post_metrics\\\",\\n\\\"input_args\\\": [\\\"post_id\\\", \\\"access_token\\\"],\\n\\\"return\\\": \\\"A JSON object that includes the post's ID, media type, media URL, username, timestamp, likes count, comments count, and shares count.\\\",\\n\\\"depend\\\": [\\\"Instagram Basic Display API\\\", \\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired cricketer who played alongside Yuvraj Singh and shares interesting anecdotes about their time together", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"An interface to convert text into an audio file using Google Text-to-Speech. Ideal for creating audiobooks, podcasts, or any other audio content.\\\",\\n\\\"function_name\\\": \\\"convert_anecdote_to_speech\\\",\\n\\\"input_args\\\": {\\n    \\\"anecdote_text\\\": \\\"The text of the anecdote to be converted into speech.\\\",\\n    \\\"output_file_name\\\": \\\"The name of the output audio file without the extension.\\\"\\n    },\\n\\\"return\\\": \\\"A string confirming the creation of the output audio file.\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS) Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former special forces officer turned bestselling military fiction author", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts text to speech and generates an mp3 file with the spoken version of the text. It is useful for creating audio versions of text.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"filename\\\"],\\n\\\"return\\\": \\\"A message indicating that the speech has been saved as an mp3 file.\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS) library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An indie filmmaker known for featuring exclusive tracks from new artists in their movies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends new tracks based on a reference track the user likes. It leverages the Spotify Web API to perform this task.\\\",\\n\\\"function_name\\\": \\\"recommend_tracks\\\",\\n\\\"input_args\\\": {\\\"track_name\\\": \\\"Name of the reference track\\\", \\\"artist\\\": \\\"Name of the artist of the reference track\\\", \\\"client_id\\\": \\\"Spotify Client ID\\\", \\\"client_secret\\\": \\\"Spotify Client Secret\\\"},\\n\\\"return\\\": \\\"A list of recommended track names along with their artists\\\",\\n\\\"depend\\\": \\\"Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A podcast host who hosts a show dedicated to discussing Mila Kunis' filmography", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Ratings Interface\\\",\\n\\\"description\\\": \\\"An interface to get movie ratings and user reviews from IMDb\\\",\\n\\\"function_name\\\": \\\"get_movie_info\\\",\\n\\\"input_args\\\": \\\"movie_title\\\",\\n\\\"return\\\": \\\"A dictionary containing the IMDb rating and user reviews for the input movie\\\",\\n\\\"depend\\\": \\\"requests, bs4\\\"\\n}\"", "description": "tool development"}
{"input persona": "A historian challenging the notion of the influence of politics on Southeast Asian culture", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Document Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates a text from one language to another. It's especially useful for historians who study documents written in different languages.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"src_lang\\\", \\\"tgt_lang\\\"],\\n\\\"return\\\": \\\"A string of text translated to the target language.\\\",\\n\\\"depend\\\": [\\\"Hugging Face Transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a longtime fan of lawn bowls and admirer of Bob Schneider", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bowls Score Calculator Interface\\\",\\n\\\"description\\\": \\\"A simple scoring system for the game of lawn bowls. Users simply input the number of bowls closer to the jack from each player, and the interface will calculate the score of the end.\\\",\\n\\\"function_name\\\": \\\"calculate_bowls_score\\\",\\n\\\"input_args\\\": {\\n    \\\"player1_bowls\\\": \\\"The number of bowls from Player 1 that are closer to the jack than any of Player 2's bowls.\\\",\\n    \\\"player2_bowls\\\": \\\"The number of bowls from Player 2 that are closer to the jack than any of Player 1's bowls.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with the score for each player. If a player has more bowls closer to the jack, they score a point. If they have the same number of bowls closer to the jack, no points are awarded.\\\",\\n\\\"depend\\\": \\\"Python's built-in functionality\\\"\\n}\"", "description": "tool development"}
{"input persona": "a marketing officer working for an industrial manufacturing company in Utah", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitor Patent Analysis Interface\\\",\\n\\\"description\\\": \\\"Interface for fetching patents filed by a specific organization from the USPTO Database.\\\",\\n\\\"function_name\\\": \\\"get_competitor_patents\\\",\\n\\\"input_args\\\": \\\"organization_name - Name of the competitor organization\\\",\\n\\\"return\\\": \\\"A list of dictionaries where each dictionary represents a patent filed by the organization. Each dictionary contains the patent title and patent number.\\\",\\n\\\"depend\\\": \\\"USPTO API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conference organizer seeking expertise on the intersection of international law and cyber warfare", "synthesized text": "\"{\\n\\\"name\\\": \\\"Expertise Finder Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of speaker profiles (such as short bios or abstracts) and a topic of interest. It then returns a relevance score for each speaker based on the semantic similarity between the speaker profile and the topic. A high score indicates a strong match.\\\",\\n\\\"function_name\\\": \\\"get_relevance_scores\\\",\\n\\\"input_args\\\": {\\n    \\\"speaker_profiles\\\": \\\"A list of strings. Each string is a short bio or abstract of a potential speaker.\\\",\\n    \\\"topic\\\": \\\"A string that represents the topic of interest.\\\"\\n},\\n\\\"return\\\": \\\"A list of floats. Each float is the relevance score of the corresponding speaker to the topic. The higher the score, the more relevant the speaker is to the topic.\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concerned citizen who has experienced the negative consequences of believing misinformation and now seeks to educate others", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fake News Detection Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from HuggingFace's transformers to classify whether a piece of news is reliable or not.\\\",\\n\\\"function_name\\\": \\\"check_fake_news\\\",\\n\\\"input_args\\\": \\\"news_text - the text of the news article\\\",\\n\\\"return\\\": \\\"A string indicating whether the news is likely to be real or fake.\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Cambodian local food vendor who has a stall outside the event center", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Popularity Predictor Interface\\\",\\n\\\"description\\\": \\\"Predicts the popularity of a food item based on location, event, and type of cuisine using a pre-trained model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"get_popularity_score\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"event\\\", \\\"cuisine\\\"],\\n\\\"return\\\": \\\"A dictionary with a single key-value pair. The key is 'popularity_score' and the value is a float representing the predicted popularity score.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a mechanical engineer who designs vibration testing systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vibration Analysis Interface\\\", \\n\\\"description\\\": \\\"An interface to perform Fourier Transform on vibration data to understand frequency components. User inputs a list of vibration data and receives a list of frequencies and corresponding amplitudes.\\\", \\n\\\"function_name\\\": \\\"perform_vibration_analysis\\\", \\n\\\"input_args\\\": [\\\"vibration_data\\\"], \\n\\\"return\\\": \\\"list of tuples where each tuple represents a frequency and its corresponding amplitude\\\", \\n\\\"depend\\\": [\\\"SciPy library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a professor who is lukewarm about polymer organic photovoltaics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Article Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from the PubMed database to search for relevant scientific articles based on a provided keyword or phrase. It returns the titles and abstracts of the articles.\\\",\\n\\\"function_name\\\": \\\"get_scientific_articles\\\",\\n\\\"input_args\\\": [\\\"keyword\\\"],\\n\\\"return\\\": \\\"List of tuples, where each tuple contains the title and abstract of a scientific article.\\\",\\n\\\"depend\\\": \\\"requests, xml.etree.ElementTree\\\"\\n}\"", "description": "tool development"}
{"input persona": "a busy entrepreneur living in Harrison, WV who needs to physically mail a lot of items for her business", "synthesized text": "\"{\\n\\\"name\\\": \\\"USPS Shipping Rates Interface\\\", \\n\\\"description\\\": \\\"An interface that uses the USPS Web Tools API to calculate shipping rates based on provided source and destination zip codes, weight of the package and package type.\\\", \\n\\\"function_name\\\": \\\"get_shipping_rates\\\", \\n\\\"input_args\\\": [\\\"source_zip\\\", \\\"destination_zip\\\", \\\"weight\\\", \\\"package_type\\\"], \\n\\\"return\\\": \\\"Dictionary of available USPS shipping services and their prices.\\\", \\n\\\"depend\\\": \\\"USPS Web Tools API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Croatian immigrant residing in Kansas City, Missouri, who was unable to attend the event.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Summary Interface\\\",\\n\\\"description\\\": \\\"This interface takes a video URL of an event as input and returns a summarized version of the event. The summarization is done with the help of a pre-trained summarization model.\\\",\\n\\\"function_name\\\": \\\"summarize_video\\\",\\n\\\"input_args\\\": \\\"video_url - URL of the video to be summarized\\\",\\n\\\"return\\\": \\\"A list of frames representing the summarized video\\\",\\n\\\"depend\\\": \\\"Python libraries: pytube, cv2, summarizer. Web APIs: YouTube API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Syrian refugee who was part of a failed attempt to leave Turkey for Greece on a rubber dingy and now resides in a Turkish refugee camp", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the DeepL API to translate inputted text to a specified language.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": [\\\"input_text\\\", \\\"target_lang\\\"],\\n\\\"return\\\": \\\"Translated text in the specified language.\\\",\\n\\\"depend\\\": \\\"DeepL API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A colleague from Marcus Griffin's previous company", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface uses seaborn and matplotlib libraries to generate data visualizations. Users just need to provide the path to a CSV file and the type of plot they want, and our interface will return a visualization of the data.\\\",\\n\\\"function_name\\\": \\\"visualize_data\\\",\\n\\\"input_args\\\": [\\\"path_to_csv\\\", \\\"plot_type\\\", \\\"x_axis\\\", \\\"y_axis\\\"],\\n\\\"return\\\": \\\"A visualization of the data in the provided CSV file. If the plot type is histogram, it will be a histogram of the x_axis data. If the plot type is scatterplot, it will be a scatterplot of the x_axis and y_axis data.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\", \\\"seaborn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A trade diplomat from a country with high tariffs on agricultural imports", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trade Tariff Lookup Interface\\\",\\n\\\"description\\\": \\\"An interface to look up the tariff rate for a specific product in a targeted country using the product's HS code and the country's name.\\\",\\n\\\"function_name\\\": \\\"get_tariff_rate\\\",\\n\\\"input_args\\\": [\\\"hs_code\\\", \\\"country\\\"],\\n\\\"return\\\": \\\"The tariff rate for the input product in the targeted country.\\\",\\n\\\"depend\\\": \\\"Trade.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Science teacher explaining the topic to high school students.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interactive Equation Solver Interface\\\",\\n\\\"description\\\": \\\"An interface that uses sympy library to solve equations.\\\",\\n\\\"function_name\\\": \\\"solve_equation\\\",\\n\\\"input_args\\\": {\\n    \\\"equation\\\": \\\"A string representing the equation. Example: '2*x - 3 = 0'\\\",\\n    \\\"variable\\\": \\\"The variable in the equation. Example: 'x'\\\"\\n},\\n\\\"return\\\": \\\"The solutions for the equation.\\\",\\n\\\"depend\\\": \\\"Sympy Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired military paratrooper with extensive experience in high-altitude jumps", "synthesized text": "\"{\\n\\\"name\\\": \\\"Parachute Jump Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface provides a simulation of a parachute jump given the initial altitude, wind speed and direction.\\\",\\n\\\"function_name\\\": \\\"parachute_jump_simulation\\\",\\n\\\"input_args\\\": [\\\"initial_altitude\\\", \\\"wind_speed\\\", \\\"wind_direction\\\"],\\n\\\"return\\\": \\\"Final position of the parachute.\\\",\\n\\\"depend\\\": \\\"PyBullet Physics Simulation Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a beginner Python learner interested in file system operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"File Operation Interface\\\",\\n\\\"description\\\": \\\"A high-level interface for common file system operations. The user can simply input the source file path, target path, and operation they want to perform. The interface will perform the operation and return a success message.\\\",\\n\\\"function_name\\\": \\\"file_operation\\\",\\n\\\"input_args\\\": {\\n  \\\"source_path\\\": \\\"The source file path\\\",\\n  \\\"target_path\\\": \\\"The target file path for copy, move, or rename operations\\\",\\n  \\\"operation\\\": \\\"The operation to perform: 'copy', 'move', 'delete', 'rename'\\\"\\n},\\n\\\"return\\\": \\\"A success message if the operation was successful, or an error message if the operation was invalid.\\\",\\n\\\"depend\\\": \\\"Python's built-in 'os' and 'shutil' libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A purist DJ who believes that electronic remixes ruin the essence of original rock music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Track Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface compares the similarity between two tracks based on their audio features, which can be useful to find out how much a remix has changed the essence of the original song.\\\",\\n\\\"function_name\\\": \\\"calculate_similarity\\\",\\n\\\"input_args\\\": [\\\"track_id_1\\\", \\\"track_id_2\\\", \\\"token\\\"],\\n\\\"return\\\": \\\"A similarity score between two tracks\\\",\\n\\\"depend\\\": \\\"Spotify's Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A geneticist who relies on user-friendly interfaces to efficiently analyze and interpret complex genetic data", "synthesized text": "\"{\\n\\\"name\\\": \\\"Genetic Variant Annotation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Biopython library and MyVariant.info API to analyze and interpret genetic variant data. It accepts a genetic variant as input and returns its annotated information.\\\",\\n\\\"function_name\\\": \\\"annotate_variant\\\",\\n\\\"input_args\\\": [\\\"variant\\\"],\\n\\\"return\\\": \\\"Annotated information of the genetic variant\\\",\\n\\\"depend\\\": \\\"requests, Bio, MyVariant.info API\\\"\\n}\"", "description": "tool development"}
{"input persona": "一名满口\"流利\"韩语，长期居住在首尔的中国女歌迷", "synthesized text": "\"{\\n\\\"name\\\": \\\"Korean Lyrics Translation Interface\\\",\\n\\\"description\\\": \\\"Interface to translate Korean song lyrics into Chinese using the DeepL API\\\",\\n\\\"function_name\\\": \\\"translate_korean_lyrics\\\",\\n\\\"input_args\\\": [\\\"lyrics\\\"],\\n\\\"return\\\": \\\"Translated lyrics\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"urllib\\\", \\\"DeepL API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A car enthusiast who owns a modified Volkswagen Golf GTI and seeks the tuner's expertise in increasing its performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car Performance Tuning Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to predict the increase in horsepower and torque after a car's modifications.\\\",\\n\\\"function_name\\\": \\\"car_performance_tuning\\\",\\n\\\"input_args\\\": [\\\"car_specs\\\", \\\"modifications\\\"],\\n\\\"return\\\": \\\"A dictionary with the expected increase in horsepower and torque.\\\",\\n\\\"depend\\\": \\\"HuggingFace transformers, torch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college graduate struggling with direction who looks up to the speaker for guidance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Career Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface receives a user's interests, skills, and location, and returns a list of job recommendations that match the user's input.\\\",\\n\\\"function_name\\\": \\\"get_job_recommendations\\\",\\n\\\"input_args\\\": [\\\"interests\\\", \\\"skills\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A list of job titles that match the user's interests and skills, or an error message if no matches are found.\\\",\\n\\\"depend\\\": {\\\"Web APIs\\\": [\\\"LinkedIn Job Search API\\\"], \\\"Machine Learning Models\\\": [\\\"Huggingface: distilbert-base-uncased-finetuned-sst-2-english\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a theatre lover who prefers matinee shows on weekdays.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Theatre Showtime Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses the theatre information provider API to get and return matinee showtimes of a given theatre for a specific day of the week.\\\",\\n\\\"function_name\\\": \\\"get_matinee_showtimes\\\",\\n\\\"input_args\\\": {\\n  \\\"theatre_name\\\": \\\"Name of the theatre\\\",\\n  \\\"day_of_week\\\": \\\"Day of the week\\\"\\n},\\n\\\"return\\\": \\\"Returns a list of matinee showtimes for the specified day.\\\",\\n\\\"depend\\\": \\\"requests library, Theatre Information Provider API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The president of a developing country heavily impacted by pandemics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vaccine Availability Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about the COVID-19 vaccination progress in a specified country, using the 'COVID-19 World Vaccination Progress' dataset from Kaggle.\\\",\\n\\\"function_name\\\": \\\"get_vaccine_info\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each representing a record of the vaccination progress in the specified country on a specific date. Each dictionary includes information about total vaccinations, people vaccinated, people fully vaccinated, daily vaccinations (raw and for million), daily vaccinations per million, and the vaccines used.\\\",\\n\\\"depend\\\": \\\"Pandas library, Kaggle dataset\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired winemaker with years of experience in grape cultivation and wine production", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wine Quality Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input the chemical properties of wine and returns a prediction of the wine's quality based on a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_wine_quality\\\",\\n\\\"input_args\\\": [\\\"fixed_acidity\\\", \\\"volatile_acidity\\\", \\\"citric_acid\\\", \\\"residual_sugar\\\", \\\"chlorides\\\", \\\"free_sulfur_dioxide\\\", \\\"total_sulfur_dioxide\\\", \\\"density\\\", \\\"pH\\\", \\\"sulphates\\\", \\\"alcohol\\\"],\\n\\\"return\\\": \\\"A prediction of the wine's quality.\\\",\\n\\\"depend\\\": \\\"Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "a potential customer who is looking for a secure lock for my pocket sliding door.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pocket Sliding Door Lock Recommendation Interface\\\",\\n\\\"description\\\": \\\"Allows the user to get the top recommended locks for pocket sliding doors from Amazon.\\\",\\n\\\"function_name\\\": \\\"get_sliding_door_locks\\\",\\n\\\"input_args\\\": \\\"None\\\",\\n\\\"return\\\": \\\"List of the top recommended locks for pocket sliding doors\\\",\\n\\\"depend\\\": \\\"Amazon Product Advertising API, bottlenose Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local business owner who offers discounts to Notre Dame students and their families", "synthesized text": "\"{\\n\\\"name\\\": \\\"Discount Validation Interface\\\",\\n\\\"description\\\": \\\"This interface checks whether a person is associated with Notre Dame University using the Google Custom Search JSON API. It is designed to help local business owners offer discounts to Notre Dame students and their families.\\\",\\n\\\"function_name\\\": \\\"validate_notre_dame_association\\\",\\n\\\"input_args\\\": \\\"person_name\\\",\\n\\\"return\\\": \\\"boolean value indicating whether the person is associated with Notre Dame University\\\",\\n\\\"depend\\\": \\\"Google Custom Search JSON API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property owner who relies on the handyman to keep the rental property in good condition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Maintenance Request Interface\\\",\\n\\\"description\\\": \\\"Create maintenance requests for a handyman in a task management system.\\\",\\n\\\"function_name\\\": \\\"create_maintenance_request\\\",\\n\\\"input_args\\\": [\\\"task_title\\\", \\\"task_description\\\", \\\"assignee_id\\\", \\\"project_id\\\"],\\n\\\"return\\\": \\\"The ID of the newly created task.\\\",\\n\\\"depend\\\": \\\"Asana API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a game designer who heavily relies on SDL (Simple DirectMedia Layer)", "synthesized text": "\"{\\n\\\"name\\\": \\\"SDL Event Handler Interface\\\",\\n\\\"description\\\": \\\"An interface that encapsulates the basic SDL event handling loop. Users only need to input the desired screen width and height, and the interface will initialize SDL, create the window and surface, and start the event loop.\\\",\\n\\\"function_name\\\": \\\"sdl_event_loop\\\",\\n\\\"input_args\\\": [\\\"screen_width\\\", \\\"screen_height\\\"],\\n\\\"return\\\": \\\"None. The function initializes SDL, creates a window of the specified size, and starts the event loop, waiting for user interaction.\\\",\\n\\\"depend\\\": \\\"PySDL2 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An investment banker who evaluates the profitability and potential risks of real estate projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real Estate Investment Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that provides comprehensive analysis of the profitability and potential risks of a real estate project\\\",\\n\\\"function_name\\\": \\\"real_estate_investment_analysis\\\",\\n\\\"input_args\\\": {\\n\\\"purchase_price\\\": \\\"The purchase price of the property\\\",\\n\\\"renovation_cost\\\": \\\"The cost of renovation required on the property\\\",\\n\\\"monthly_rent\\\": \\\"The expected monthly rent from tenants\\\",\\n\\\"annual_expenses\\\": \\\"The total annual expenses for managing the property\\\",\\n\\\"mortgage_rate\\\": \\\"The annual interest rate of the mortgage\\\",\\n\\\"mortgage_term\\\": \\\"The term of the mortgage in years\\\",\\n\\\"down_payment_percentage\\\": \\\"The down payment as a percentage of the total investment\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing key financial metrics like NPV, IRR, Cash on Cash Return, and DSCR\\\",\\n\\\"depend\\\": \\\"Python's pandas, numpy libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "a health policy officer specialising in antimicrobial resistance", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Antimicrobial Resistance Research Paper Summarization Interface\\\",\\n    \\\"description\\\": \\\"An interface that takes as input the URL of a research paper related to antimicrobial resistance and returns a summarized version of the paper\\\",\\n    \\\"function_name\\\": \\\"summarize_research_paper\\\",\\n    \\\"input_args\\\": {\\n        \\\"url\\\": \\\"The URL of the research paper to be summarized\\\"\\n    },\\n    \\\"return\\\": \\\"A string containing a summarized version of the research paper\\\",\\n    \\\"depend\\\": \\\"HuggingFace's transformer library for the summarization model, and requests library for downloading the paper\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Asian Games archery competitor from Japan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Arrow Speed Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the speed of an arrow based on the bow draw weight, arrow weight, and draw length using a RandomForestRegressor model.\\\",\\n\\\"function_name\\\": \\\"predict_arrow_speed\\\",\\n\\\"input_args\\\": {\\n    \\\"bow_draw_weight\\\": \\\"The draw weight of the bow in pounds.\\\",\\n    \\\"arrow_weight\\\": \\\"The weight of the arrow in grains.\\\",\\n    \\\"draw_length\\\": \\\"The draw length in inches.\\\"\\n},\\n\\\"return\\\": \\\"The predicted speed of the arrow in feet per second.\\\",\\n\\\"depend\\\": \\\"scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pub owner who values high-quality audio for the in-house entertainment system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Quality Enhancement Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub that enhances the quality of audio files. Users only need to input the path to an audio file, and it will generate a higher quality version of the audio.\\\",\\n\\\"function_name\\\": \\\"enhance_and_save_audio\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_audio\\\": \\\"The path to the low quality audio file\\\",\\n    \\\"path_to_save\\\": \\\"The path to save the enhanced audio file\\\"\\n},\\n\\\"return\\\": \\\"None, but a higher quality audio file will be saved at the specified path.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, numpy, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "An academic counselor at a university, wanting to send a detailed message about Prof. Baxter.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Professor Information Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to extract detailed information about a professor using Google Scholar API. The information includes the professor's h-index, i10-index, total citations, and recent publications.\\\",\\n\\\"function_name\\\": \\\"get_professor_info\\\",\\n\\\"input_args\\\": \\\"name - The name of the professor\\\",\\n\\\"return\\\": \\\"A dictionary containing the professor's name, affiliation, h-index, i10-index, total citations, and the titles of their five most recent publications.\\\",\\n\\\"depend\\\": \\\"Google Scholar API, scholarly Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cognitive psychologist questioning the accuracy of EEG recordings in research studies", "synthesized text": "\"{\\n\\\"name\\\": \\\"EEG Signal Noise Reduction Interface\\\",\\n\\\"description\\\": \\\"Interface to denoise raw EEG data, improving the accuracy of EEG recordings in research studies.\\\",\\n\\\"function_name\\\": \\\"denoise_eeg_data\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"Path to a CSV file containing raw EEG data\\\", \\\"wavelet\\\": \\\"Wavelet to be used for the denoising process (default is 'db6')\\\", \\\"level\\\": \\\"Level of decomposition in the wavelet transform (default is 2)\\\"},\\n\\\"return\\\": \\\"Path to the CSV file containing the denoised EEG data\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, numpy, PyWavelets\\\"\\n}\"", "description": "tool development"}
{"input persona": "a confused non-German speaker", "synthesized text": "\"{\\n\\\"name\\\": \\\"German Text Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates German text into English using the Google Translate API.\\\",\\n\\\"function_name\\\": \\\"translate_german_to_english\\\",\\n\\\"input_args\\\": [\\\"german_text\\\"],\\n\\\"return\\\": \\\"English translation of the input text.\\\",\\n\\\"depend\\\": [\\\"googletrans library (Google Translate API)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local seaweed farm owner supplying the designer with high-quality seaweed fibers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Seaweed Quality Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model to analyze the quality of seaweed from an image. It returns a quality score and a quality category ('High Quality', 'Medium Quality', 'Low Quality').\\\",\\n\\\"function_name\\\": \\\"analyze_seaweed_quality\\\", \\n\\\"input_args\\\": [\\\"path_to_img\\\"], \\n\\\"return\\\": {\\\"quality_score\\\": \\\"float\\\", \\\"quality_category\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"tensorflow\\\": \\\"2.6.0\\\", \\\"tensorflow_hub\\\": \\\"0.12.0\\\", \\\"Machine Learning Model\\\": \\\"https://tfhub.dev/seaweed-quality-analyzer/1\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A politically indifferent Japanese teen obsessed with K-Pop", "synthesized text": "\"{\\n\\\"name\\\": \\\"K-pop Lyric Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates K-pop lyrics from Korean to Japanese using the Google Translate API. The user inputs the lyrics in Korean, and the interface outputs the translated lyrics in Japanese.\\\",\\n\\\"function_name\\\": \\\"translate_kpop_lyrics\\\",\\n\\\"input_args\\\": \\\"korean_lyrics\\\",\\n\\\"return\\\": \\\"japanese_lyrics\\\",\\n\\\"depend\\\": \\\"Google Translate API\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个在土耳其伊斯坦布尔生活的旅游爱好者", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u65c5\\u884c\\u8def\\u7ebf\\u63a8\\u8350\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u6839\\u636e\\u7528\\u6237\\u7684\\u51fa\\u53d1\\u5730\\u548c\\u76ee\\u7684\\u5730\\uff0c\\u63d0\\u4f9b\\u63a8\\u8350\\u7684\\u65c5\\u884c\\u8def\\u7ebf\\u3002\\\",\\n\\\"function_name\\\": \\\"get_recommended_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"\\u8fd4\\u56de\\u4e00\\u4e2a\\u5b57\\u7b26\\u4e32\\uff0c\\u5305\\u542b\\u65c5\\u884c\\u8def\\u7ebf\\u7684\\u8be6\\u7ec6\\u6307\\u793a\\u3002\\\",\\n\\\"depend\\\": \\\"\\u4f7f\\u7528\\u4e86Google\\u5730\\u56fe\\u7684Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software developer who specializes in wrapping JNI (Java Native Interface) code into Java classes", "synthesized text": "\"{\\n\\\"name\\\": \\\"JNI Code Wrapper\\\",\\n\\\"description\\\": \\\"This interface compiles and runs JNI (Java Native Interface) code wrapped inside a Java class. It returns the output of the Java class.\\\",\\n\\\"function_name\\\": \\\"compile_and_run_jni\\\",\\n\\\"input_args\\\": \\\"path_to_jni_code: String that represents the path to the JNI code file.\\\",\\n\\\"return\\\": \\\"String that represents the output of running the Java class that wraps the JNI code.\\\",\\n\\\"depend\\\": \\\"Python's subprocess module, Java Compiler (javac) and Java Runtime Environment (JRE), C compiler (gcc)\\\"\\n}\"", "description": "tool development"}
{"input persona": "平凡的台湾家庭主妇，热心公益，经常参与社区活动。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Taiwan Vaccine Appointment Interface\\\",\\n\\\"description\\\": \\\"An interface for Taiwan residents to check available vaccine appointments by entering their NHI card number and birth date.\\\",\\n\\\"function_name\\\": \\\"get_vaccine_appointments\\\",\\n\\\"input_args\\\": [\\\"nhi_card_number\\\", \\\"birth_date\\\"],\\n\\\"return\\\": \\\"A list of available vaccine appointments.\\\",\\n\\\"depend\\\": \\\"API from Taiwan's Health Insurance Administration\\\"\\n}\"", "description": "tool development"}
{"input persona": "An engineer working on developing alternative energy sources for vehicles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alternative Energy Potential Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the NREL API to provide data on the solar energy potential of a given location. The user inputs the latitude and longitude, and the interface returns the average annual solar radiation in kilowatt hours per square meter per day (kWh/m2/day).\\\",\\n\\\"function_name\\\": \\\"get_solar_energy_potential\\\",\\n\\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\"],\\n\\\"return\\\": \\\"Average annual solar radiation in kWh/m2/day\\\",\\n\\\"depend\\\": \\\"NREL API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A disaster relief coordinator working on preparedness and emergency response plans for towns in Tornado Alley", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tornado Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from National Weather Service to get the latest forecast information. Users only need to input a location, and the interface will return the latest tornado warnings or watches for that area.\\\",\\n\\\"function_name\\\": \\\"get_tornado_forecast\\\",\\n\\\"input_args\\\": \\\"location - a string that specifies the location in the format 'latitude,longitude'\\\",\\n\\\"return\\\": \\\"A list of forecast periods that include the word 'tornado' in their short forecast description. Each item in the list is a dictionary with details like start time, end time, temperature, wind speed, and the complete forecast description.\\\",\\n\\\"depend\\\": \\\"requests, json\\\"\\n}\"", "description": "tool development"}
{"input persona": "An intrigued Maritime Studies student", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sea Conditions Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenWeatherMap API to fetch and return the wave height, wave direction, sea level pressure, and sea temperature at a given location.\\\",\\n\\\"function_name\\\": \\\"get_sea_conditions\\\",\\n\\\"input_args\\\": \\\"lat, lon\\\",\\n\\\"return\\\": \\\"Dictionary with keys 'Wave Height', 'Wave Direction', 'Sea Level Pressure', 'Sea Temperature' and their corresponding values\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hydrologist interested in the effects of soil permeability on water flow", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Soil Permeability Effect Interface\\\",\\n  \\\"description\\\": \\\"An interface for calculating the cumulative infiltration of water into the soil over a given time period based on the Green-Ampt Infiltration Model. The user inputs the initial soil moisture content, saturated hydraulic conductivity, wetting front suction, and time period, and the interface returns the cumulative infiltration.\\\",\\n  \\\"function_name\\\": \\\"calculate_cumulative_infiltration\\\",\\n  \\\"input_args\\\": {\\n    \\\"initial_moisture_content\\\": \\\"Initial soil moisture content (same units as saturated_hydraulic_conductivity and wetting_front_suction)\\\",\\n    \\\"saturated_hydraulic_conductivity\\\": \\\"Saturated hydraulic conductivity (same units as initial_moisture_content and wetting_front_suction)\\\",\\n    \\\"wetting_front_suction\\\": \\\"Wetting front suction (same units as initial_moisture_content and saturated_hydraulic_conductivity)\\\",\\n    \\\"time_period\\\": \\\"Time period (hours)\\\"\\n  },\\n  \\\"return\\\": \\\"Cumulative infiltration (same units as input parameters)\\\",\\n  \\\"depend\\\": \\\"numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A telecommunications company seeking expertise in designing high-frequency circuits for their communication systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"RF Circuit Simulation\\\",\\n\\\"description\\\": \\\"This interface simulates a given RF circuit over a specified frequency range and returns its frequency response.\\\",\\n\\\"function_name\\\": \\\"simulate_rf_circuit\\\",\\n\\\"input_args\\\": [\\\"schematic_filepath\\\", \\\"freq_start\\\", \\\"freq_end\\\"],\\n\\\"return\\\": \\\"Plot of Frequency Response\\\",\\n\\\"depend\\\": [\\\"PySpice\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An inspiring filmmaker and Jérémie Battaglia's fan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Color Correction Interface\\\",\\n\\\"description\\\": \\\"An interface for adjusting the contrast and brightness of a video file. The interface uses the OpenCV library to process the video frames.\\\",\\n\\\"function_name\\\": \\\"adjust_video_color\\\",\\n\\\"input_args\\\": [\\\"input_video_path\\\", \\\"output_video_path\\\", \\\"alpha\\\", \\\"beta\\\"],\\n\\\"return\\\": \\\"A color-corrected video file\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A formerly incarcerated individual seeking assistance in restoring their voting rights and reintegrating into society", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voting Rights Restoration Interface\\\",\\n\\\"description\\\": \\\"This interface uses the APIs from the National Conference of State Legislatures (NCSL) to provide information on how to restore voting rights after incarceration. Users input the state they reside in, and the interface returns the steps required for restoring their voting rights.\\\",\\n\\\"function_name\\\": \\\"get_voting_rights_restoration_steps\\\",\\n\\\"input_args\\\": \\\"state - The U.S. state the user resides in\\\",\\n\\\"return\\\": \\\"A string detailing the steps required for restoring voting rights in the specified state, or an error message if the state is not found.\\\",\\n\\\"depend\\\": \\\"This function relies on the BeautifulSoup and requests Python libraries, as well as the APIs from the National Conference of State Legislatures (NCSL).\\\"\\n}\"", "description": "tool development"}
{"input persona": "A coworker who works remotely from their minimalist RV and shares tips on living with less", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Internet Speed Test Interface\\\",\\n  \\\"description\\\": \\\"Check the current internet connection speed, returning the download and upload speeds in Mbps.\\\",\\n  \\\"function_name\\\": \\\"get_internet_speed\\\",\\n  \\\"input_args\\\": \\\"None\\\",\\n  \\\"return\\\": \\\"Dictionary with download and upload speeds in Mbps\\\",\\n  \\\"depend\\\": \\\"speedtest-cli Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired electrical engineer who spent his career working on energy projects in Spain.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Irradiance Forecasting Interface\\\",\\n\\\"description\\\": \\\"Fetches the forecast of solar irradiance for a given location using the Solcast API. Useful for planning and optimizing home-based solar power systems.\\\",\\n\\\"function_name\\\": \\\"get_solar_irradiance_forecast\\\",\\n\\\"input_args\\\": [\\\"latitude\\\", \\\"longitude\\\"],\\n\\\"return\\\": \\\"List of tuples containing the end of a forecast period and the corresponding Global Horizontal Irradiance (GHI) in W/m\\u00b2.\\\",\\n\\\"depend\\\": \\\"Solcast API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An organizer proficient in scheduling, with an understanding of nutrition and health requirements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meal Planning Interface\\\",\\n\\\"description\\\": \\\"An interface that generates a meal plan based on user's dietary needs, daily calorie intake target, and number of meals. It leverages the Spoonacular API, a comprehensive database of food and nutritional information.\\\",\\n\\\"function_name\\\": \\\"get_meal_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"diet\\\": \\\"string indicating dietary preference (e.g., 'Vegan', 'Vegetarian', 'Paleo')\\\",\\n    \\\"targetCalories\\\": \\\"integer indicating desired total calorie intake for the day\\\",\\n    \\\"numMeals\\\": \\\"integer indicating the number of meals to plan for during the day\\\"\\n},\\n\\\"return\\\": \\\"List of dictionaries, each representing a meal and containing details about the recipe, ingredients, preparation instructions, and nutritional information.\\\",\\n\\\"depend\\\": \\\"Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent who recognizes the importance of remote learning and enrolls their children in the mobile application", "synthesized text": "\"{\\n\\\"name\\\": \\\"Learning Progress Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface leverages the API of an educational application to monitor a child's learning progress, providing information on completed and ongoing courses, as well as performance.\\\",\\n\\\"function_name\\\": \\\"get_child_learning_progress\\\",\\n\\\"input_args\\\": \\\"child_id\\\",\\n\\\"return\\\": \\\"A dictionary containing lists of names of completed and ongoing courses, and performance metrics of the child.\\\",\\n\\\"depend\\\": \\\"Python's requests library, Educational Application's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a devout follower of the Jacobite Syriac Church, with knowledge in church history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Syriac Script Translator Interface\\\",\\n\\\"description\\\": \\\"Translates English text to Syriac (Aramaic) script using Google's Cloud Translation API and reshapes the text using the python-bidi and arabic_reshaper libraries.\\\",\\n\\\"function_name\\\": \\\"english_to_syriac\\\",\\n\\\"input_args\\\": \\\"text - A string of text in English.\\\",\\n\\\"return\\\": \\\"A string of text in Syriac script.\\\",\\n\\\"depend\\\": \\\"Python libraries: python-bidi, arabic_reshaper. Web APIs: Google's Cloud Translation API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Head of operations for a major fast-food chain looking to switch to sustainable packaging solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sustainable Packaging Material Recommender Interface\\\",\\n\\\"description\\\": \\\"This interface takes a set of requirements as input and returns a list of the top 3 recommended sustainable packaging materials that meet these requirements. The model behind the interface is trained to understand and classify the properties and environmental impacts of various materials based on textual descriptions.\\\",\\n\\\"function_name\\\": \\\"get_sustainable_packaging_recommendations\\\",\\n\\\"input_args\\\": [\\\"requirements\\\"],\\n\\\"return\\\": \\\"List of top 3 recommended materials\\\",\\n\\\"depend\\\": [\\\"HuggingFace Transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An organized and efficient team lead responsible for coordinating the work of the UX/UI designer in different time zones", "synthesized text": "\"{\\n\\\"name\\\": \\\"Time Zone Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to convert a time from their current timezone to the timezone of a UX/UI designer. It's especially useful for coordinating work across different time zones.\\\",\\n\\\"function_name\\\": \\\"convert_time_to_designer_timezone\\\",\\n\\\"input_args\\\": {\\n    \\\"current_timezone\\\": \\\"The user's current timezone in the format accepted by pytz, e.g., 'America/Los_Angeles'\\\",\\n    \\\"designer_timezone\\\": \\\"The UX/UI designer's timezone in the format accepted by pytz, e.g., 'Asia/Kolkata'\\\",\\n    \\\"input_time\\\": \\\"The desired time in the user's timezone, formatted as a string in the format 'YYYY-MM-DD HH:MM:SS'\\\"\\n},\\n\\\"return\\\": \\\"The corresponding time in the UX/UI designer's timezone, formatted as a string in the format 'YYYY-MM-DD HH:MM:SS'\\\",\\n\\\"depend\\\": \\\"Python library: pytz\\\"\\n}\"", "description": "tool development"}
{"input persona": "A beginner who just started learning VBA a week ago", "synthesized text": "\"{\\n\\\"name\\\": \\\"VBA Code Formatter Interface\\\",\\n\\\"description\\\": \\\"An interface that takes unformatted VBA code as input and outputs a more readable and formatted version of the same code.\\\",\\n\\\"function_name\\\": \\\"format_vba_code\\\",\\n\\\"input_args\\\": {\\\"code\\\": \\\"str\\\"},\\n\\\"return\\\": \\\"str (Formatted VBA code)\\\",\\n\\\"depend\\\": \\\"yapf Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a passionate local resident of Staten Island", "synthesized text": "\"{\\n\\\"name\\\": \\\"Staten Island Ferry Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes the Staten Island Ferry's official website for the most up-to-date schedule. The user inputs the direction of their travel ('Manhattan' or 'Staten Island'), and the interface returns the next three ferry departure times.\\\",\\n\\\"function_name\\\": \\\"get_ferry_schedule\\\",\\n\\\"input_args\\\": \\\"direction\\\",\\n\\\"return\\\": \\\"The next three ferry departure times.\\\",\\n\\\"depend\\\": \\\"Python's requests library, BeautifulSoup library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Australian citizen with minimal knowledge of technical broadband terminology.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Internet Speed Test Interface\\\",\\n  \\\"description\\\": \\\"An interface to test the user's internet download speed, upload speed, and ping latency using the Speedtest.net API. The function returns these values in a dictionary.\\\",\\n  \\\"function_name\\\": \\\"get_internet_speed\\\",\\n  \\\"input_args\\\": \\\"None\\\",\\n  \\\"return\\\": \\\"A dictionary with keys 'download_speed', 'upload_speed', and 'ping_latency'. Speeds are in Mbps, latency is in ms.\\\",\\n  \\\"depend\\\": \\\"speedtest\\\"\\n}\"", "description": "tool development"}
{"input persona": "Carlos's mother, who knows nothing about computer technology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Email Spam Filtering Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to classify an email as spam or not. The user needs to input the text of an email, and the interface will return whether the email is spam or not.\\\",\\n\\\"function_name\\\": \\\"classify_email_spam\\\",\\n\\\"input_args\\\": \\\"email_text\\\",\\n\\\"return\\\": \\\"'Spam' or 'Not Spam'\\\",\\n\\\"depend\\\": \\\"Hugging Face transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner who has been trying to obtain a liquor license for a new establishment in Clinton.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Liquor License Status Check Interface\\\",\\n\\\"description\\\": \\\"An interface to check the status of a liquor license using a permit number. The interface communicates with a government API to retrieve the current status of the license.\\\",\\n\\\"function_name\\\": \\\"check_liquor_license_status\\\",\\n\\\"input_args\\\": {\\n    \\\"permit_number\\\": \\\"The permit number of the liquor license.\\\"\\n},\\n\\\"return\\\": \\\"The current status of the liquor license.\\\",\\n\\\"depend\\\": \\\"Web API from local government\\\"\\n}\"", "description": "tool development"}
{"input persona": "a game developer with expertise in building games using Pyglet", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sprite Animation Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of animating sprites in a game using Pyglet. The user only needs to input the path to the sprite sheet, the number of frames in the sprite sheet, the frame rate for the animation, and the window to display the animation on.\\\",\\n\\\"function_name\\\": \\\"animate_sprite\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_sprite_sheet\\\": \\\"Path to the sprite sheet image file.\\\",\\n    \\\"num_frames\\\": \\\"The number of frames in the sprite sheet.\\\",\\n    \\\"frame_rate\\\": \\\"The frame rate for the animation (frames per second).\\\",\\n    \\\"window\\\": \\\"The Pyglet window to display the animation on.\\\"\\n},\\n\\\"return\\\": \\\"A Pyglet sprite object that can be drawn onto the provided window.\\\",\\n\\\"depend\\\": [\\\"Pyglet\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mobile app developer who wants to implement data anonymization techniques in their application", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Anonymization Interface\\\",\\n\\\"description\\\": \\\"This interface generates fake data to anonymize user data. It supports various types of data such as name, address, and email.\\\",\\n\\\"function_name\\\": \\\"anonymize_data\\\",\\n\\\"input_args\\\": \\\"data_type - A string indicating the type of data to generate (e.g., 'name', 'address', 'email')\\\",\\n\\\"return\\\": \\\"A string of fake data of the specified type\\\",\\n\\\"depend\\\": \\\"Python Faker library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a graduating students of Library and Information Sciences at the University of Ibadan, Nigeria.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Cataloging Interface\\\",\\n\\\"description\\\": \\\"This interface fetches complete details about a book using its ISBN.\\\",\\n\\\"function_name\\\": \\\"get_book_details\\\",\\n\\\"input_args\\\": {\\n  \\\"isbn\\\": \\\"The ISBN number of the book.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing details about the book such as title, authors, publish date, cover image URLs, subjects, etc.\\\",\\n\\\"depend\\\": \\\"Python's built-in requests library and Open Library API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A supply chain expert who closely monitors the impact of Chinese forklift manufacturers on the European market", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Rating and Review Interface\\\", \\n\\\"description\\\": \\\"This interface retrieves the average rating and top 5 reviews of forklift products by a specified Chinese manufacturer in the European market from Amazon.\\\", \\n\\\"function_name\\\": \\\"get_product_reviews\\\", \\n\\\"input_args\\\": \\\"manufacturer_name\\\", \\n\\\"return\\\": \\\"average_rating, top_reviews\\\", \\n\\\"depend\\\": \\\"Amazon Product Reviews API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow campaign staff member who witnessed the misuse of funds and now wants to seek justice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Whistleblower Protection Interface\\\",\\n\\\"description\\\": \\\"An interface that allows a user to send an anonymous email report about a case of fund misuse. The user only needs to input the recipient's email, the subject of the email, and the message they wish to convey.\\\",\\n\\\"function_name\\\": \\\"send_anonymous_email\\\",\\n\\\"input_args\\\": {\\n    \\\"recipient_email\\\": \\\"string - the email address of the recipient\\\",\\n    \\\"subject\\\": \\\"string - the subject of the email\\\",\\n    \\\"message\\\": \\\"string - the body of the email, detailing the misconduct\\\"\\n},\\n\\\"return\\\": \\\"string - a confirmation message indicating the email has been sent\\\",\\n\\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"smtplib\\\", \\\"ssl\\\", \\\"yattag\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A single parent struggling with the financial burden of home repairs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the cost of home repairs based on the type of repair and the value of the home.\\\",\\n\\\"function_name\\\": \\\"get_repair_cost\\\",\\n\\\"input_args\\\": [\\\"address\\\", \\\"repair_type\\\"],\\n\\\"return\\\": \\\"Estimated cost of the repair.\\\",\\n\\\"depend\\\": \\\"Zillow API, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "a nonprofit organizer who lost friends in a car accident", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grief Counseling Appointment Booking Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to book an appointment with a counselor on an online therapy platform. Users input their preferred date, time, and counselor's name, and the system will return a message indicating whether the booking was successful.\\\",\\n\\\"function_name\\\": \\\"book_counseling_appointment\\\",\\n\\\"input_args\\\": {\\\"date\\\": \\\"string\\\", \\\"time\\\": \\\"string\\\", \\\"counselor_name\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string indicating success or failure of booking\\\",\\n\\\"depend\\\": \\\"Python requests library, online therapy platform API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An uninterested old lady who has absolutely no interest or knowledge about curling.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Curling Match Simplified Summary Interface\\\",\\n\\\"description\\\": \\\"This interface fetches live curling match data and provides a simplified summary that's easy to understand even for those who are not familiar with curling.\\\",\\n\\\"function_name\\\": \\\"simplify_curling_match_summary\\\",\\n\\\"input_args\\\": {\\n    \\\"match_id\\\": \\\"The ID of the curling match to get a simplified summary of. This can often be found on the website or app of the curling organization.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"simple_summary\\\": \\\"A simplified and easy-to-understand summary of the curling match data.\\\"\\n},\\n\\\"depend\\\": \\\"Python's built-in requests library for getting match data from a Web API, and a large language model (LLM) for processing the match data into a simple summary.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mortgage lender who relies on the property appraiser's expertise to determine loan amounts and interest rates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Valuation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Zillow's Zestimate API to retrieve an estimated property value based on the given address and postal code.\\\",\\n\\\"function_name\\\": \\\"get_property_value\\\",\\n\\\"input_args\\\": [\\\"address\\\", \\\"zip\\\"],\\n\\\"return\\\": \\\"Estimated property value as a float.\\\",\\n\\\"depend\\\": [\\\"Zillow's Zestimate API\\\", \\\"requests\\\", \\\"xml.etree.ElementTree\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An Ernährungswissenschaftler, der sich für die Verbesserung der Nährstoffaufnahme bei Kindern einsetzt", "synthesized text": "\"{\\n\\\"name\\\": \\\"N\\u00e4hrstoffanalyse-Interface\\\",\\n\\\"description\\\": \\\"Eine Schnittstelle, die den N\\u00e4hrwert eines bestimmten Lebensmittels zur\\u00fcckgibt, indem sie die USDA FoodData Central API verwendet.\\\",\\n\\\"function_name\\\": \\\"get_nutrition_info\\\",\\n\\\"input_args\\\": \\\"food_name\\\",\\n\\\"return\\\": \\\"Ein W\\u00f6rterbuch, das N\\u00e4hrstoffnamen als Schl\\u00fcssel und die entsprechende Menge dieses N\\u00e4hrstoffs pro 100 Gramm des Lebensmittels als Wert enth\\u00e4lt.\\\",\\n\\\"depend\\\": \\\"USDA FoodData Central API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical scientist developing new medications for OAB treatment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Discovery Interface\\\",\\n\\\"description\\\": \\\"This interface takes a target SMILES string and a list of candidate SMILES strings, and returns the top 5 candidate compounds that are most similar to the target compound based on molecular fingerprint similarity. This can be used for drug discovery, where the target compound is a known effective drug and the candidates are potential new drugs.\\\",\\n\\\"function_name\\\": \\\"get_most_similar_compounds\\\",\\n\\\"input_args\\\": {\\\"target_smiles\\\": \\\"A SMILES string representing the target compound\\\", \\\"candidate_smiles_list\\\": \\\"A list of SMILES strings representing the candidate compounds\\\"},\\n\\\"return\\\": \\\"A list of SMILES strings representing the top 5 most similar candidate compounds\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"rdkit\\\"], \\\"Web APIs\\\": [], \\\"machine learning models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "A fellow Cambodian native who shares nostalgic memories of their hometown", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nostalgic Location Image Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to search for nostalgic images related to a specific location using the Flickr API.\\\",\\n\\\"function_name\\\": \\\"get_nostalgic_images\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"tag\\\"],\\n\\\"return\\\": \\\"A list of URLs of images related to the input location and tag.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Flickr API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A collector of vintage fishing reels", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vintage Fishing Reel Price Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the eBay API to fetch the recent selling prices of similar vintage fishing reels and calculate an estimated price for a given reel.\\\",\\n\\\"function_name\\\": \\\"get_estimated_price\\\",\\n\\\"input_args\\\": [\\\"reel_details\\\"],\\n\\\"return\\\": \\\"The estimated price of the vintage fishing reel based on recent sales of similar items.\\\",\\n\\\"depend\\\": \\\"eBay API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Mid-aged single woman who fears any forms of commitment.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dating Advice Generator\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to generate tailored dating advice for a mid-aged single woman who fears any forms of commitment. The user inputs her specific dating situation, and the interface will return a list of possible advices.\\\",\\n\\\"function_name\\\": \\\"generate_dating_advice\\\",\\n\\\"input_args\\\": \\\"situation - A string describing the user's specific dating situation.\\\",\\n\\\"return\\\": \\\"A list of strings, each containing a possible advice for the user's dating situation.\\\",\\n\\\"depend\\\": \\\"Hugging Face's GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a novelist who often grapples with the challenges of managing time between writing, researching, and personal life.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"Interface to convert text to speech using Google Text-to-Speech. Useful for multitasking and gaining a different perspective on written work.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"filename\\\"],\\n\\\"return\\\": \\\"Confirmation message of file save\\\",\\n\\\"depend\\\": [\\\"gtts library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A senior software developer with extensive experience in JavaScript and DHTMLX Scheduler", "synthesized text": "\"{\\n\\\"name\\\": \\\"JavaScript Code Formatter Interface\\\",\\n\\\"description\\\": \\\"This interface takes JavaScript code as input and returns the code formatted using the Prettier library. The function writes the input code to a temporary file, formats the code using Prettier, and then reads and returns the formatted code. The temporary file is overwritten on every function call.\\\",\\n\\\"function_name\\\": \\\"format_javascript_code\\\",\\n\\\"input_args\\\": [\\\"code\\\"],\\n\\\"return\\\": \\\"The formatted JavaScript code as a string.\\\",\\n\\\"depend\\\": \\\"Prettier library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A devoted fan of James Fulton, a rally co-driver enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rally Speed Calculator\\\",\\n\\\"description\\\": \\\"This interface calculates the average speed of a rally car given the distance of the track and the time it took to complete.\\\",\\n\\\"function_name\\\": \\\"calculate_average_speed\\\",\\n\\\"input_args\\\": {\\n    \\\"distance\\\": \\\"The distance of the track in kilometers.\\\",\\n    \\\"time\\\": \\\"The time it took to complete the track in hours.\\\"\\n},\\n\\\"return\\\": \\\"The average speed of the rally car in kilometers per hour.\\\",\\n\\\"depend\\\": [\\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A writer creating realistic fight scenes for a medieval fantasy book", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medieval Weapon Damage Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the potential damage that different medieval weapons could cause to various targets. It helps writers to create more realistic fight scenes in their stories.\\\",\\n\\\"function_name\\\": \\\"weapon_damage_estimation\\\",\\n\\\"input_args\\\": [\\\"weapon_type\\\", \\\"target\\\"],\\n\\\"return\\\": \\\"An estimation of the damage (a non-negative integer).\\\",\\n\\\"depend\\\": \\\"Python standard library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow carpet installer who knew Robert Wilson through industry engagements.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carpet Area Estimator Interface\\\",\\n\\\"description\\\": \\\"This interface takes the length and width of a room and calculates the area, helping carpet installers estimate how much carpet they will need.\\\",\\n\\\"function_name\\\": \\\"calculate_carpet_area\\\",\\n\\\"input_args\\\": [\\\"length\\\", \\\"width\\\"],\\n\\\"return\\\": \\\"Area of the room\\\",\\n\\\"depend\\\": \\\"Python's built-in functionalities\\\"\\n}\"", "description": "tool development"}
{"input persona": "A epidemiologist studying the patterns and factors contributing to the opioid crisis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Opioid Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that accepts CSV files with opioid-related data and returns a dictionary with some initial analysis (sum, mean, median, min, and max of opioid usage).\\\",\\n\\\"function_name\\\": \\\"analyze_opioid_data\\\",\\n\\\"input_args\\\": \\\"path_to_csv - A string representing the path to the CSV file\\\",\\n\\\"return\\\": \\\"A dictionary with the sum, mean, median, min, and max of opioid usage from the input data.\\\",\\n\\\"depend\\\": \\\"Pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young child who dreams of being a roller coaster designer and asks the ride operator endless questions about the rides", "synthesized text": "\"{\\n\\\"name\\\": \\\"Roller Coaster Speed Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the maximum speed a roller coaster can achieve given its initial height, using the principles of conservation of energy.\\\",\\n\\\"function_name\\\": \\\"calculate_max_speed\\\",\\n\\\"input_args\\\": \\\"initial_height - the initial height of the roller coaster in meters\\\",\\n\\\"return\\\": \\\"The maximum speed the roller coaster can achieve in km/hr, rounded to two decimal places\\\",\\n\\\"depend\\\": \\\"Python's built-in math library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Formula 1 driver who demands perfection and personalized service at every step", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weather Condition Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the weather condition for an upcoming race. This can help the driver plan their strategies effectively. Users only need to input the location and date of the race, and the interface will return the predicted weather condition.\\\",\\n  \\\"function_name\\\": \\\"get_weather_prediction\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"string (name of the location)\\\",\\n    \\\"date\\\": \\\"string (date in 'YYYY-MM-DD' format)\\\"\\n  },\\n  \\\"return\\\": \\\"string (predicted weather condition)\\\",\\n  \\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservation biologist studying the impact of motorbike usage on the environment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the carbon footprint of a motorcycle journey based on total distance travelled and the fuel efficiency of the motorcycle.\\\",\\n\\\"function_name\\\": \\\"calculate_motorbike_footprint\\\",\\n\\\"input_args\\\": [\\\"distance_km\\\", \\\"fuel_efficiency_km_per_l\\\"],\\n\\\"return\\\": \\\"Estimated Carbon Footprint in kgCO2e\\\",\\n\\\"depend\\\": \\\"The function leverages the CarbonFootprint API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired judge who believes that the war on drugs has done more harm than good and advocates for alternative approaches to drug policy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Policy Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes Google Trends data for a specified keyword related to drug policy over a specified time frame\\\",\\n\\\"function_name\\\": \\\"plot_trend_data\\\",\\n\\\"input_args\\\": {\\n    \\\"keyword\\\": \\\"A keyword related to an alternative approach to drug policy\\\",\\n    \\\"timeframe\\\": \\\"A time frame in the format accepted by the Google Trends API\\\"\\n    },\\n\\\"return\\\": \\\"A graph showing the interest in the specified keyword over the specified time frame, according to Google Trends data\\\",\\n\\\"depend\\\": \\\"Python libraries: pytrends, pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "The owner of a nearby franchise who enjoys the benefits of corporate support in regulatory compliance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Franchise Regulatory Compliance Interface\\\",\\n\\\"description\\\": \\\"An interface to get regulatory compliance data for a specific franchise type and location.\\\",\\n\\\"function_name\\\": \\\"get_regulatory_compliance_info\\\",\\n\\\"input_args\\\": [\\\"franchise_type\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"Regulatory compliance information in json format\\\",\\n\\\"depend\\\": \\\"Regulatory data provider API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired lawyer who practiced alongside the judge and reminisces about high-profile cases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Case Details Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a Named Entity Recognition (NER) model to extract details about high-profile cases from a given text. Returns a dictionary with names of people and organizations involved, as well as the dates mentioned.\\\",\\n\\\"function_name\\\": \\\"extract_case_details\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"string\\\"\\n},\\n\\\"return\\\": {\\n    \\\"details\\\": {\\n        \\\"people\\\": \\\"list of strings\\\",\\n        \\\"organizations\\\": \\\"list of strings\\\",\\n        \\\"dates\\\": \\\"list of strings\\\"\\n    }\\n},\\n\\\"depend\\\": \\\"HuggingFace Transformers library (dslim/bert-base-NER model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dock laborer who assists with loading and unloading cargo from ships", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cargo Weight Balancer Interface\\\",\\n\\\"description\\\": \\\"This interface optimizes the distribution of cargo weights across a ship's cargo hold. It uses linear programming to evenly distribute the weights while ensuring the total weight does not exceed the ship's capacity.\\\",\\n\\\"function_name\\\": \\\"distribute_cargo_weight\\\",\\n\\\"input_args\\\": [\\\"cargo_weights\\\", \\\"cargo_locations\\\", \\\"ship_capacity\\\"],\\n\\\"return\\\": \\\"A dictionary mapping cargo locations to weights.\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hacker advocating for decentralization of the internet and open access to information", "synthesized text": "\"{\\n\\\"name\\\": \\\"Web Scraping Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes the content of a webpage and returns the text content. Users only need to input the URL of a webpage.\\\",\\n\\\"function_name\\\": \\\"get_webpage_content\\\",\\n\\\"input_args\\\": \\\"url\\\",\\n\\\"return\\\": \\\"content\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, Requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A motivated Ph.D. candidate working on protocols for secure multi-party computation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure Multi-party Computation Protocol Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to perform computations in a secure multi-party environment without revealing their private inputs to others. It uses the Charm-Crypto library to distribute the data into shares and then compute the result from these shares.\\\",\\n\\\"function_name\\\": \\\"secure_computation\\\",\\n\\\"input_args\\\": [\\\"data\\\"],\\n\\\"return\\\": \\\"The computation result of the input data in a secure multi-party environment.\\\",\\n\\\"depend\\\": [\\\"Charm-Crypto library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A friendly and knowledgeable conductor who shares interesting facts about the train routes and technology", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Train Route Information Interface\\\",\\n  \\\"description\\\": \\\"This interface provides the train routes, times, and other information from origin to destination. It also shares some interesting facts about the route.\\\",\\n  \\\"function_name\\\": \\\"get_train_route_info\\\",\\n  \\\"input_args\\\": [\\\"origin\\\", \\\"destination\\\"],\\n  \\\"return\\\": [\\\"routes\\\", \\\"interesting_facts\\\"],\\n  \\\"depend\\\": [\\\"requests\\\", \\\"RailAPI\\\", \\\"LLM\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a close friend and college roommate of Jalila Baccar", "synthesized text": "\"{\\n\\\"name\\\": \\\"Play Info Extraction\\\",\\n\\\"description\\\": \\\"This interface extracts information about a play by Jalila Baccar from the web. It returns the publication date, the main characters, and a brief summary of the play.\\\",\\n\\\"function_name\\\": \\\"get_play_info\\\",\\n\\\"input_args\\\": [\\\"play_name\\\"],\\n\\\"return\\\": {\\\"Publication Date\\\": \\\"string\\\", \\\"Characters\\\": \\\"list of string\\\", \\\"Summary\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"bs4\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A lawyer representing the fossil fuel industry, challenging the climatologist's findings in court", "synthesized text": "\"{\\n\\\"name\\\": \\\"Climate Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a CSV file with climate data, returns a detailed statistical summary and visualizations of the data.\\\",\\n\\\"function_name\\\": [\\\"load_and_process_data\\\", \\\"get_statistical_summary\\\", \\\"plot_data\\\"],\\n\\\"input_args\\\": {\\\"load_and_process_data\\\": \\\"file_path (str)\\\", \\\"get_statistical_summary\\\": \\\"file_path (str)\\\", \\\"plot_data\\\": \\\"file_path (str)\\\"},\\n\\\"return\\\": {\\\"load_and_process_data\\\": \\\"DataFrame\\\", \\\"get_statistical_summary\\\": \\\"DataFrame\\\", \\\"plot_data\\\": \\\"None, displays a plot\\\"},\\n\\\"depend\\\": \\\"Python libraries: pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "Um escritor de ficção científica que está interessado em cenários pós-apocalípticos e comunidades isoladas.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Population Density Interface\\\",\\n\\\"description\\\": \\\"An interface that estimates the population density for a given location using data from OpenStreetMap API and a machine learning model.\\\",\\n\\\"function_name\\\": \\\"get_population_density\\\",\\n\\\"input_args\\\": {\\n    \\\"lat\\\": \\\"Latitude of the location (float)\\\",\\n    \\\"lon\\\": \\\"Longitude of the location (float)\\\"\\n},\\n\\\"return\\\": \\\"Estimated population density (float) or 'No data available' (string) if there's no data for the specified location.\\\",\\n\\\"depend\\\": \\\"requests, json, sklearn.ensemble.RandomForestRegressor, OpenStreetMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a humanitarian worker based in Turkey with a primary focus on displaced people", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Refugee Camp Population Estimation Interface\\\",\\n  \\\"description\\\": \\\"An interface that estimates the population of a refugee camp using satellite imagery and a machine learning model.\\\",\\n  \\\"function_name\\\": \\\"estimate_population\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to a satellite image of a refugee camp.\\\"\\n  },\\n  \\\"return\\\": \\\"An estimated population size\\\",\\n  \\\"depend\\\": \\\"TensorFlow Hub model: https://tfhub.dev/google/remote_sensing/population_estimation/1\\\"\\n}\"", "description": "tool development"}
{"input persona": "a cybersecurity analyst who is familiar with the legalities around electronic money entities (EMEs).", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Cyber Threat Intelligence Interface\\\",\\n  \\\"description\\\": \\\"Uses the VirusTotal API to retrieve detailed information about a potential cyber threat. The input is a URL, domain, IP address, file hash, or other resource, and the output is a JSON object with information about the resource.\\\",\\n  \\\"function_name\\\": \\\"get_threat_intelligence\\\",\\n  \\\"input_args\\\": [\\\"api_key\\\", \\\"resource\\\"],\\n  \\\"return\\\": \\\"JSON object with threat intelligence data\\\",\\n  \\\"depend\\\": \\\"VirusTotal API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young Costa Rican literature lover who idolizes Eulalia Bernard", "synthesized text": "\"{\\n\\\"name\\\": \\\"Literary Style Emulation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a seed phrase as input and uses a GPT-2 model from HuggingFace to generate a paragraph of text that emulates the style of Eulalia Bernard.\\\",\\n\\\"function_name\\\": \\\"generate_in_style_of_eulalia\\\",\\n\\\"input_args\\\": {\\n    \\\"seed_phrase\\\": \\\"A string that serves as the starting point for the generated text.\\\"\\n},\\n\\\"return\\\": \\\"A string that contains a paragraph of text generated in the style of Eulalia Bernard.\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library (GPT2LMHeadModel, GPT2Tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a university professor who used to teach Ella", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n\\\"description\\\": \\\"This interface takes two pieces of text as input and returns a similarity score between them. A higher score indicates higher similarity, thus suggesting a potential case of plagiarism.\\\",\\n\\\"function_name\\\": \\\"compute_similarity\\\",\\n\\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n\\\"return\\\": \\\"A single-value list containing the computed cosine similarity score, ranging from -1 (completely dissimilar) to 1 (completely similar).\\\",\\n\\\"depend\\\": [\\\"Huggingface's Transformers library (AutoTokenizer, AutoModel)\\\", \\\"PyTorch\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A parent with a child about to attend E.C. Adams Middle School in Guilford.", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Rating Interface\\\",\\n\\\"description\\\": \\\"Fetch the ratings of a particular school using GreatSchools API\\\",\\n\\\"function_name\\\": \\\"get_school_rating\\\",\\n\\\"input_args\\\": {\\\"school_name\\\": \\\"string\\\", \\\"city\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": \\\"requests, xml.etree.ElementTree, GreatSchools API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical sales manager making the case for drug therapies over invasive interventions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Cost Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface to compare the average costs of drug therapies and invasive interventions using APIs from the U.S. Department of Health & Human Services.\\\",\\n\\\"function_name\\\": \\\"compare_costs\\\",\\n\\\"input_args\\\": [\\\"drug_name\\\", \\\"procedure_name\\\"],\\n\\\"return\\\": \\\"A dictionary containing the average costs of the input drug therapy and invasive intervention, or an error message if the data cannot be fetched.\\\",\\n\\\"depend\\\": \\\"requests library, U.S. Department of Health & Human Services' Drug and Procedure Cost APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a seasoned animator and VFX artist, well-versed in multimedia applications including Adobe After Effects and 3D modeling software.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Frame Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface can be used to extract frames from a video file for further analysis or modification.\\\",\\n\\\"function_name\\\": \\\"extract_frames\\\",\\n\\\"input_args\\\": \\\"video_path: str -> A path to the video file\\\",\\n\\\"return\\\": \\\"A list of images which represent the frames of the video.\\\",\\n\\\"depend\\\": \\\"Python Library: OpenCV\\\"\\n}\"", "description": "tool development"}
{"input persona": "A truck driver affected by the Celadon bankruptcy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Maps Directions API to calculate the most efficient route between multiple destinations. The user inputs a list of locations (start point, waypoints, and end point), and the interface returns an optimized route with the sequence of waypoints to visit.\\\",\\n\\\"function_name\\\": \\\"optimize_route\\\",\\n\\\"input_args\\\": {\\n    \\\"api_key\\\": \\\"The API key for Google Maps Directions API\\\",\\n    \\\"locations\\\": \\\"A list of locations including start point, waypoints, and end point\\\"\\n },\\n\\\"return\\\": \\\"An optimized route with the sequence of waypoints to visit\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A React.js library maintainer responsible for coordinating and overseeing the development and improvement of the libraries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dependency Audit Interface\\\",\\n\\\"description\\\": \\\"An interface for checking outdated dependencies in a Python project. The user input is the path to the project directory. The function returns a list of outdated dependencies.\\\",\\n\\\"function_name\\\": \\\"check_outdated_dependencies\\\",\\n\\\"input_args\\\": \\\"project_directory\\\",\\n\\\"return\\\": \\\"List of strings, each representing an outdated dependency in the project\\\",\\n\\\"depend\\\": \\\"Python library: os, subprocess\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Japanese historian specializing in the Showa period", "synthesized text": "\"{\\n\\\"name\\\": \\\"Showa Period Event Timeline Interface\\\", \\n\\\"description\\\": \\\"This interface fetches and presents a list of major events during the Showa period in Japan from Wikipedia. Users only need to input the year they are interested in, and our interface will return a list of major events that happened in that year.\\\", \\n\\\"function_name\\\": \\\"get_showa_period_events\\\", \\n\\\"input_args\\\": [\\\"year\\\"], \\n\\\"return\\\": \\\"List of major events that happened in the Showa period in Japan in the given year.\\\", \\n\\\"depend\\\": [\\\"requests, Wikipedia API, Large Language Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A detail-oriented event planner managing exclusive events for the airline's most frequent flyer program members", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Event Management Interface\\\",\\n\\\"description\\\": \\\"This interface manages events for the airline's most frequent flyer program members. It can create, update, and delete events, as well as retrieve a list of events.\\\",\\n\\\"function_name\\\": \\\"manage_events\\\",\\n\\\"input_args\\\": [\\\"operation\\\", \\\"event_id\\\", \\\"event_details\\\"],\\n\\\"return\\\": \\\"Response from the server after performing the operation\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Event Management API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am an archery coach passionate about the sport but frustrated with incomplete information and missing results.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Archery Results Compilation Interface\\\",\\n  \\\"description\\\": \\\"Scrapes archery tournament results from a website and returns them in a structured format.\\\",\\n  \\\"function_name\\\": \\\"get_archery_results\\\",\\n  \\\"input_args\\\": {\\n    \\\"year\\\": \\\"The year of the tournament. (integer)\\\",\\n    \\\"tournament\\\": \\\"The name of the tournament. (string)\\\"\\n  },\\n  \\\"return\\\": \\\"A list of dictionaries, each representing a competitor's results. Each dictionary has keys for the competitor's name, their country, and their score.\\\",\\n  \\\"depend\\\": \\\"Python libraries: requests, beautifulsoup4\\\"\\n}\"", "description": "tool development"}
{"input persona": "a professional IT troubleshooter and window 10 expert", "synthesized text": "\"{\\n  \\\"name\\\": \\\"System Information Retrieval Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to retrieve important system information with a single function call. It provides details like OS, CPU count, memory information, and disk usage.\\\",\\n  \\\"function_name\\\": \\\"get_system_info\\\",\\n  \\\"input_args\\\": [],\\n  \\\"return\\\": \\\"A dictionary containing system info such as OS details, CPU count, memory information, and disk usage.\\\",\\n  \\\"depend\\\": \\\"Python libraries: platform, psutil\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medieval scribe who's trying to comprehend these numeric incantations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Roman Numeral Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface that converts Roman numerals to their corresponding decimal values.\\\",\\n\\\"function_name\\\": \\\"roman_to_int\\\",\\n\\\"input_args\\\": \\\"A string of Roman numerals\\\",\\n\\\"return\\\": \\\"The corresponding decimal number\\\",\\n\\\"depend\\\": \\\"Python built-in libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "an amateur astronomer, having a distinctive interest in binary stars.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Binary Star System Visualization Interface\\\",\\n\\\"description\\\": \\\"Visualize the orbital paths of a binary star system given the masses of the two stars, the distance between them, and the time period for visualization.\\\",\\n\\\"function_name\\\": \\\"visualize_binary_star_orbit\\\",\\n\\\"input_args\\\": {\\n    \\\"mass1\\\": \\\"The mass of the first star\\\",\\n    \\\"mass2\\\": \\\"The mass of the second star\\\",\\n    \\\"distance\\\": \\\"The distance between the two stars\\\",\\n    \\\"time_period\\\": \\\"The time period for which the orbit is to be visualized\\\"\\n},\\n\\\"return\\\": \\\"A plot showing the orbits of the stars around their center of mass\\\",\\n\\\"depend\\\": \\\"Matplotlib, Numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a top-tier real estate agent for commercial properties in Anchorage, Alaska", "synthesized text": "\"{\\n\\\"name\\\": \\\"Commercial Property Price Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the location, size, and amenities of a commercial property in Anchorage, Alaska, and returns an estimated price for the property.\\\",\\n\\\"function_name\\\": \\\"estimate_property_price\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"The location of the commercial property in Anchorage, Alaska.\\\",\\n    \\\"size\\\": \\\"The size (in square footage) of the commercial property.\\\",\\n    \\\"amenities\\\": \\\"The amenities provided by the commercial property.\\\"\\n},\\n\\\"return\\\": \\\"The estimated price of the commercial property.\\\",\\n\\\"depend\\\": \\\"Sklearn library, RandomForestRegressor model, Commercial properties dataset in Anchorage, Alaska\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner who's been selling boutique tea online for 7 years.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Inventory Management Interface\\\",\\n  \\\"description\\\": \\\"This interface provides useful statistics on inventory such as total inventory value, potential sales value and most stocked item.\\\",\\n  \\\"function_name\\\": \\\"get_inventory_statistics\\\",\\n  \\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"Path to the inventory data CSV file. The CSV file should include columns for 'product_name', 'quantity_in_stock', 'cost_price', and 'selling_price'.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"total_inventory_value\\\": \\\"Total cost of all items in inventory\\\",\\n    \\\"potential_sales_value\\\": \\\"Total revenue if all items in inventory are sold at their selling price\\\",\\n    \\\"most_stocked_item\\\": \\\"The item with the most quantity in stock\\\"\\n  },\\n  \\\"depend\\\": \\\"This function leverages the pandas Python library for data handling and calculations.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A reporter interested in featuring the acclaimed statistician's work in an article about data-driven decision-making", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Pandas library to perform basic statistical analysis on a given column in a CSV file. The user provides the path to the CSV file and the name of the column, and the interface returns the mean, median, mode, standard deviation, and variance of the column.\\\",\\n\\\"function_name\\\": \\\"get_statistics\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"Path to the CSV file\\\",\\n    \\\"column_name\\\": \\\"Name of the column to analyze\\\"\\n    },\\n\\\"return\\\": {\\n    \\\"mean\\\": \\\"Mean of the column\\\",\\n    \\\"median\\\": \\\"Median of the column\\\",\\n    \\\"mode\\\": \\\"Mode of the column\\\",\\n    \\\"standard deviation\\\": \\\"Standard deviation of the column\\\",\\n    \\\"variance\\\": \\\"Variance of the column\\\"\\n    },\\n\\\"depend\\\": \\\"Pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Nickelback superfan from Calgary, Alberta", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Lyrics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the lyrics for any given song using the Genius API\\\",\\n\\\"function_name\\\": \\\"get_song_lyrics\\\",\\n\\\"input_args\\\": \\n  {\\n    \\\"song_name\\\": \\\"The name of the song to fetch the lyrics for\\\"\\n  },\\n\\\"return\\\": \\\"The lyrics of the specified song\\\",\\n\\\"depend\\\": \\\"This function depends on the Genius API, and the python requests and json libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old acquaintance of Bess Grucz from Imlay City, who loved to spend leisure time with her.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text to Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts the given text into speech and saves the output as an mp3 file.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"The text you want to convert to speech.\\\", \\\"lang\\\": \\\"The language you want the text to be spoken in. Default is English.\\\", \\\"slow\\\": \\\"Whether or not you want the speech to be slow. Default is False.\\\"},\\n\\\"return\\\": \\\"The name of the mp3 file where the speech is saved.\\\",\\n\\\"depend\\\": \\\"Python gtts library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An envious colleague of John who aspires to also be a top real estate developer.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real Estate Data Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetch and process real estate data for a specific location. The data includes real estate prices and growth rates.\\\",\\n\\\"function_name\\\": \\\"get_real_estate_data\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"Statistical description of real estate data in the requested location.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"bs4\\\"], \\\"web APIs\\\": [\\\"Zillow API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A person who eats only organically grown vegan food and is severely allergic to molds and fungi.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Allergen Detector Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to detect various allergens and other substances in food images. The user only needs to input the image file of the food, and the interface will return a list of detected substances that may be harmful to the user.\\\",\\n\\\"function_name\\\": \\\"detect_allergens\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"detected_allergens\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history enthusiast who is a descendent of Pierre Esprit Radisson", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historical Ancestor Search Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface that uses an API from a genealogical website to return the historical records related to the ancestor input by the user.\\\",\\n  \\\"function_name\\\": \\\"get_historical_records\\\",\\n  \\\"input_args\\\": [\\\"ancestor_name\\\"],\\n  \\\"return\\\": \\\"Historical records related to the ancestor in JSON format\\\",\\n  \\\"depend\\\": \\\"requests library, Ancestry API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Ukrainian businesswoman who is considering partnering with a Japanese company", "synthesized text": "\"{\\n\\\"name\\\": \\\"Company Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves basic information about a company using the OpenCorporates API. It takes the name of the company as input and returns its name, jurisdiction, incorporation date, dissolution date, company number, company type, registered address, and a link to its page on the registry.\\\",\\n\\\"function_name\\\": \\\"get_company_info\\\",\\n\\\"input_args\\\": \\\"company_name\\\",\\n\\\"return\\\": \\\"A dictionary containing the company's basic information.\\\",\\n\\\"depend\\\": \\\"OpenCorporates API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A foreign exchange student with firsthand experience of the impact of trade policies on their home country's economy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Exchange Rate Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Exchange Rates API to provide the current exchange rate of a specified home currency against other major world currencies. This can help students understand the impact of global trade policies on their home country's economy.\\\",\\n\\\"function_name\\\": \\\"get_currency_exchange_rates\\\",\\n\\\"input_args\\\": \\\"home_currency_code\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are the currency codes of other countries and the values are the current exchange rates.\\\",\\n\\\"depend\\\": \\\"requests library, Exchange Rates API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A worried parent seeking information on the job prospects and earning potential in the technology field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Prospects and Earning Potential Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about job prospects, growth, and median pay for different occupations in the technology field from the U.S. Department of Labor's Bureau of Labor Statistics (BLS) data API.\\\",\\n\\\"function_name\\\": \\\"get_job_prospects_and_earning_potential\\\",\\n\\\"input_args\\\": \\\"occupation - the name of the occupation in the technology field\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'Job Prospects', 'Growth Rate', and 'Median Pay' and corresponding values.\\\",\\n\\\"depend\\\": \\\"Python's 'requests' and 'json' libraries, U.S. Department of Labor's Bureau of Labor Statistics (BLS) data API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Arab historian who is particularly interested in the study of nomenclature (naming system)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Arabic Transliteration Interface\\\",\\n\\\"description\\\": \\\"This interface helps in transliterating Arabic words to Latin script.\\\",\\n\\\"function_name\\\": \\\"arabic_to_latin\\\",\\n\\\"input_args\\\": [\\\"word\\\"],\\n\\\"return\\\": \\\"Latin script transliteration of the Arabic word\\\",\\n\\\"depend\\\": [\\\"arabic_reshaper\\\", \\\"bidi\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer responsible for implementing the search algorithm changes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Semantic Text Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained SentenceTransformer model to perform semantic search. It accepts a query and a list of documents, and returns the documents sorted by their semantic similarity to the query.\\\",\\n\\\"function_name\\\": \\\"semantic_search\\\",\\n\\\"input_args\\\": [\\\"query\\\", \\\"documents\\\"],\\n\\\"return\\\": \\\"A list of tuples, with each tuple containing a document and its semantic similarity score to the query, sorted in descending order of similarity.\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"sentence_transformers\\\"],\\n    \\\"machine learning models\\\": [\\\"all-MiniLM-L6-v2\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A representative from the Environmental Protection Agency (EPA) who sets fuel efficiency standards for vehicles", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Fuel Efficiency Comparison Interface\\\",\\n  \\\"description\\\": \\\"Fetches and compares the fuel efficiencies of two vehicle models using the EPA's Vehicle Fuel Economy Data API.\\\",\\n  \\\"function_name\\\": \\\"compare_fuel_efficiency\\\",\\n  \\\"input_args\\\": {\\n    \\\"make1\\\": \\\"Make of the first vehicle\\\",\\n    \\\"model1\\\": \\\"Model of the first vehicle\\\",\\n    \\\"make2\\\": \\\"Make of the second vehicle\\\",\\n    \\\"model2\\\": \\\"Model of the second vehicle\\\"\\n  },\\n  \\\"return\\\": \\\"A string comparing the fuel efficiencies of the two vehicles.\\\",\\n  \\\"depend\\\": \\\"EPA's Vehicle Fuel Economy Data API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A progressive director who supports the implementation of encryption technologies to safeguard communication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure Communication Interface\\\",\\n\\\"description\\\": \\\"Interface for encryption and decryption of messages using a shared secret key.\\\",\\n\\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_message\\\", \\\"decrypt_message\\\"],\\n\\\"input_args\\\": {\\\"generate_key\\\": [], \\\"encrypt_message\\\": [\\\"message\\\", \\\"key\\\"], \\\"decrypt_message\\\": [\\\"cipher_text\\\", \\\"key\\\"]},\\n\\\"return\\\": {\\\"generate_key\\\": \\\"key\\\", \\\"encrypt_message\\\": \\\"cipher_text\\\", \\\"decrypt_message\\\": \\\"plain_text\\\"},\\n\\\"depend\\\": [\\\"cryptography library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A rural pastor who respects their child's passion for science but holds conflicting views on evolution and creation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Reconcile Science and Religion Interface\\\",\\n\\\"description\\\": \\\"This interface takes in user's religious beliefs and scientific doubts, and returns a balanced perspective that respects both views.\\\",\\n\\\"function_name\\\": \\\"reconcile_science_and_religion\\\",\\n\\\"input_args\\\": [\\\"religious_belief\\\", \\\"scientific_doubts\\\"],\\n\\\"return\\\": \\\"A balanced perspective text that respects both religious beliefs and scientific understanding.\\\",\\n\\\"depend\\\": \\\"openai GPT-3 API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful nature documentary filmmaker inspired by the mysteries of animal genetic evolution", "synthesized text": "\"{\\n\\\"name\\\": \\\"Animal Gene Sequence Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface accepts two gene sequences in FASTA format and returns a comparison between them based on a similarity score.\\\",\\n\\\"function_name\\\": \\\"compare_gene_sequences\\\",\\n\\\"input_args\\\": [\\\"file_path1\\\", \\\"file_path2\\\"],\\n\\\"return\\\": \\\"A string representation of the best alignment between the two sequences, including the similarity score.\\\",\\n\\\"depend\\\": \\\"Biopython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skilled well tester who collects and analyzes data to evaluate well performance", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Well Performance Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface to predict well performance based on the provided data using a machine learning model.\\\",\\n  \\\"function_name\\\": \\\"predict_well_performance\\\",\\n  \\\"input_args\\\": \\\"file_path - Path to the CSV file containing well data\\\",\\n  \\\"return\\\": \\\"Predicted performance of the well\\\",\\n  \\\"depend\\\": \\\"Python's pandas and scikit-learn libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "a lifelong fan of Pedro the Lion, familiar with their discography and the personal nature of David Bazan's songwriting.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Recommendation Interface\\\",\\n\\\"description\\\": \\\"Generate song recommendations based on a user's favorite artist using the Spotify Web API.\\\",\\n\\\"function_name\\\": \\\"recommend_songs\\\",\\n\\\"input_args\\\": {\\n    \\\"artist_name\\\": \\\"Name of the artist based on whom recommendations are to be made.\\\",\\n    \\\"token\\\": \\\"An access token for the Spotify Web API.\\\"\\n},\\n\\\"return\\\": \\\"A list of related artists as song recommendations.\\\",\\n\\\"depend\\\": \\\"Uses the Spotify Web API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A law professor who voted for Brett Kavanaugh.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Case Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to compute the semantic similarity between two different legal cases. It uses the Universal Sentence Encoder from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"compute_similarity\\\",\\n\\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n\\\"return\\\": \\\"A similarity score indicating the semantic similarity between the two input legal cases.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Universal Sentence Encoder Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a YouTuber who previously had a sponsorship contract with Established Titles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes YouTube videos using Google's Speech-to-Text API. It downloads the audio from the YouTube video, transcribes it, and returns the transcription.\\\",\\n\\\"function_name\\\": \\\"get_youtube_video_transcription\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"transcription\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"subprocess\\\", \\\"google.cloud.speech_v1p1beta1\\\"]\\n}\"", "description": "tool development"}
{"input persona": "As a Ukrainian social activist, humanitarian efforts, particularly concerning children and national defense, resonate deeply with me.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Charity Donation Classifier Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name and mission of a charity and uses a text classification model to classify the charity's focus.\\\",\\n\\\"function_name\\\": \\\"classify_charity\\\",\\n\\\"input_args\\\": {\\n    \\\"name\\\": \\\"The name of the charity\\\",\\n    \\\"mission\\\": \\\"A brief description of the charity's mission\\\"\\n},\\n\\\"return\\\": \\\"A dictionary containing the name and mission of the charity, along with the classification of the charity's focus.\\\",\\n\\\"depend\\\": \\\"Python library: transformers, Hugging Face Model: 'distilbert-base-uncased-finetuned-sst-2-english'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young adult with a history of trauma who is hesitant and resistant to follow treatment plans", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mental Health Assessment Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained BERT model to assess the mental health status of a user based on the text inputs they provide.\\\",\\n\\\"function_name\\\": \\\"mental_health_assessment\\\",\\n\\\"input_args\\\": \\\"user_text\\\",\\n\\\"return\\\": \\\"mental_health_status\\\",\\n\\\"depend\\\": \\\"transformers library(BertForSequenceClassification, BertTokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A huge Alice Cooper fan who is also fascinated by supernatural lore and tales of Dracula.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Lyrics Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the lyrics of a song and identify supernatural entities in the lyrics using Named Entity Recognition.\\\",\\n\\\"function_name\\\": \\\"identify_supernatural_entities\\\",\\n\\\"input_args\\\": \\\"song_name - The name of the song to analyze.\\\",\\n\\\"return\\\": \\\"List of identified supernatural entities in the song lyrics.\\\",\\n\\\"depend\\\": \\\"Genius API for fetching lyrics, HuggingFace transformers for Named Entity Recognition\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports statistician who provides in-depth analysis and insights on the Broncos", "synthesized text": "\"{\\n\\\"name\\\": \\\"NFL Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and returns various statistics like passing yards, rushing yards, touchdowns, etc. for a specified NFL team. It uses the sportsradar API.\\\",\\n\\\"function_name\\\": \\\"get_nfl_team_statistics\\\",\\n\\\"input_args\\\": {\\n    \\\"team_name\\\": \\\"The name of the NFL team for which the statistics are to be fetched.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Passing Yards\\\": \\\"Total passing yards by the team in the season.\\\",\\n    \\\"Rushing Yards\\\": \\\"Total rushing yards by the team in the season.\\\",\\n    \\\"Total Touchdowns\\\": \\\"Total touchdowns by the team in the season.\\\",\\n    \\\"Total Field Goals\\\": \\\"Total field goals by the team in the season.\\\"\\n},\\n\\\"depend\\\": \\\"Sportsradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A radio astronomer who explores the mysteries of the universe through electromagnetic radiation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Radio Spectrum Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input a path to a file containing radio spectrum data and outputs a visual plot of the radio spectrum using Python's Matplotlib and Numpy libraries.\\\",\\n\\\"function_name\\\": \\\"visualize_radio_spectrum\\\",\\n\\\"input_args\\\": \\\"data_file_path\\\",\\n\\\"return\\\": \\\"A plot of the radio spectrum is displayed.\\\",\\n\\\"depend\\\": \\\"Python libraries: Matplotlib, Numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular food blogger with a large following, looking for strategies to promote pastry shops", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pastry Shop Promotion Strategy Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Yelp Fusion API to analyze the reviews and ratings of similar pastry shops. It helps in formulating a promotion strategy based on what customers appreciate about these shops.\\\",\\n\\\"function_name\\\": \\\"analyze_reviews_of_shops\\\",\\n\\\"input_args\\\": [\\\"shop_names\\\"],\\n\\\"return\\\": \\\"A dictionary. The keys are shop names and the values are lists of key features extracted from the reviews of each shop.\\\",\\n\\\"depend\\\": \\\"Yelp Fusion API, Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports equipment specialist who has extensive knowledge of different brands and models", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Equipment Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface leverages a machine learning model trained on a large dataset of sports equipment reviews and ratings to recommend equipment based on user's sport interest and skill level.\\\",\\n\\\"function_name\\\": \\\"get_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"sport\\\": \\\"The sport the user is interested in\\\",\\n    \\\"skill_level\\\": \\\"The user's skill level in the sport\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended sports equipment\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas\\\", \\\"sklearn\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "a resident of Washington Heights, New York", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Air Quality Index Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the IQAir API to get real-time air quality index in any city. Takes the city and state as inputs and returns the air quality index.\\\",\\n  \\\"function_name\\\": \\\"get_air_quality\\\",\\n  \\\"input_args\\\": [\\\"city\\\", \\\"state\\\"],\\n  \\\"return\\\": \\\"Real-time air quality index (int)\\\",\\n  \\\"depend\\\": \\\"IQAir API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A screenwriter who incorporates cityscapes as a central theme in their film scripts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cityscape Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to analyze and classify cityscape images. The user inputs the path to an image file, and the interface returns the categories and probabilities of each category that the image falls into.\\\",\\n\\\"function_name\\\": \\\"analyze_cityscape\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"dictionary with categories as keys and probabilities as values\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a web development mentor teaching z-index and CSS stacking context", "synthesized text": "\"{\\n\\\"name\\\": \\\"CSS Z-Index Visualizer Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the CSS rules from a web page and creates a visual representation of the stacking context of different elements on the page.\\\",\\n\\\"function_name\\\": \\\"visualize_z_index\\\",\\n\\\"input_args\\\": \\\"url\\\",\\n\\\"return\\\": \\\"A visual representation of the CSS stacking context.\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests, pyppeteer; Web APIs: None; Machine Learning Models: None\\\"\\n}\"", "description": "tool development"}
{"input persona": "A classical music professor who believes that improvisation has no place in formal music education", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Style Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow for music genre classification. It allows users to classify the style of a piece of music based on a provided audio file.\\\",\\n\\\"function_name\\\": \\\"classify_music_style\\\",\\n\\\"input_args\\\": [\\\"audio_file_path\\\"],\\n\\\"return\\\": \\\"The classified genre of the music.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, librosa\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former light-welterweight boxer who has represented his country in previous Commonwealth Games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Boxing Match Statistics Interface\\\",\\n\\\"description\\\": \\\"Fetches boxing match statistics for a given boxer using Sportradar API. Returns a JSON object with match statistics.\\\", \\n\\\"function_name\\\": \\\"get_boxing_statistics\\\", \\n\\\"input_args\\\": [\\\"boxer_name\\\"], \\n\\\"return\\\": \\\"JSON object with boxing match statistics.\\\", \\n\\\"depend\\\": \\\"requests library, Sportradar API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A restaurant owner committed to creating a welcoming environment for all customers, regardless of their abilities or backgrounds", "synthesized text": "\"{\\n\\\"name\\\": \\\"Restaurant Accessibility Evaluation Interface\\\",\\n\\\"description\\\": \\\"An interface that evaluates the accessibility of a given restaurant, providing information about entrance accessibility, bathroom accessibility, parking, and braille menus availability.\\\",\\n\\\"function_name\\\": \\\"evaluate_restaurant_accessibility\\\",\\n\\\"input_args\\\": \\\"restaurant_name, location\\\",\\n\\\"return\\\": \\\"A dictionary containing the restaurant's name and its accessibility information\\\",\\n\\\"depend\\\": \\\"Google Places API, Google Maps API, BeautifulSoup Python Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biology major who shares study tips and resources for difficult courses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Protein Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analyzing a protein sequence. Returns molecular weight, amino acid composition, and isoelectric point.\\\",\\n\\\"function_name\\\": \\\"analyze_protein_sequence\\\",\\n\\\"input_args\\\": {\\n  \\\"sequence\\\": \\\"A string of amino acids that represents the protein sequence to be analyzed.\\\"\\n},\\n\\\"return\\\": {\\n  \\\"Molecular Weight\\\": \\\"The molecular weight of the protein.\\\",\\n  \\\"Amino Acid Composition\\\": \\\"A dictionary with amino acids as keys and their counts as values.\\\",\\n  \\\"Isoelectric Point\\\": \\\"The isoelectric point of the protein.\\\"\\n},\\n\\\"depend\\\": \\\"This function uses the Biopython library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle aged Persian woman who was born and raised in Teheran and has never heard about this village.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Village Information Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches information about a village, town, or city\\\",\\n\\\"function_name\\\": \\\"get_place_info\\\",\\n\\\"input_args\\\": \\\"place_name\\\",\\n\\\"return\\\": \\\"A dictionary with information about the place\\\",\\n\\\"depend\\\": \\\"GeoNames API, requests library, datetime library, pytz library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Een Nederlandse geschiedenisleraar met een passie voor Franse dorpen.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historische Foto's Zoekinterface\\\",\\n\\\"description\\\": \\\"Zoekt historische foto's van een specifiek Frans dorp met behulp van de Europeana API.\\\",\\n\\\"function_name\\\": \\\"zoek_historische_fotos\\\",\\n\\\"input_args\\\": {\\\"dorp_naam\\\": \\\"Een string die de naam van het dorp aangeeft\\\"},\\n\\\"return\\\": \\\"Een lijst met URL's naar historische foto's van het opgegeven dorp.\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"requests\\\"], \\\"APIs\\\": [\\\"Europeana API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "The persona is a software developer with extensive experience in working with Kubernetes, particularly its automation and scaling functionalities.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Kubernetes Pod Scaling Interface\\\",\\n  \\\"description\\\": \\\"An interface that allows users to scale Kubernetes deployments programmatically.\\\",\\n  \\\"function_name\\\": \\\"scale_kubernetes_deployment\\\",\\n  \\\"input_args\\\": [\\\"deployment_name\\\", \\\"namespace\\\", \\\"num_replicas\\\"],\\n  \\\"return\\\": \\\"The current number of replicas in the deployment after the scaling operation.\\\",\\n  \\\"depend\\\": \\\"kubernetes.client Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher studying transitional justice mechanisms and their effectiveness in post-conflict societies", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Transitional Justice Research Interface\\\",\\n  \\\"description\\\": \\\"Retrieves recent news articles related to a specified transitional justice mechanism in a given country.\\\",\\n  \\\"function_name\\\": \\\"get_news_articles\\\",\\n  \\\"input_args\\\": [\\\"country\\\", \\\"mechanism\\\"],\\n  \\\"return\\\": \\\"List of URLs to news articles\\\",\\n  \\\"depend\\\": \\\"GDELT Project's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Chicago resident who prides himself on being a city expert, dislikes tourists and loves restoration projects.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historical Building Information Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the National Register of Historic Places API to provide information about a historic place. Users input the name of the place and the interface returns its information such as location, significance, architectural style, and more.\\\",\\n  \\\"function_name\\\": \\\"get_historical_building_info\\\",\\n  \\\"input_args\\\": [\\\"name\\\"],\\n  \\\"return\\\": \\\"Information about the historic place or a message indicating no information was found\\\",\\n  \\\"depend\\\": [\\\"Python Requests Library\\\", \\\"National Register of Historic Places API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am an independent documentary filmmaker, particularly fascinated by stories of innovation and unconventional thinking within technology and science.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes an audio file using a pre-trained model from HuggingFace's Transformer library.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"A transcription of the audio file.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformer library, soundfile library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sociologist studying the socio-cultural dynamics of African communities affected by international aid", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aid Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the World Bank API to gather data on international aid and its impact on various socio-economic indicators. User inputs the country and indicator of interest, and the interface returns the historical data for that indicator.\\\",\\n\\\"function_name\\\": \\\"get_world_bank_data\\\",\\n\\\"input_args\\\": {\\n    \\\"country_code\\\": \\\"A 2 or 3 character country abbreviation as per World Bank standards.\\\",\\n    \\\"indicator_code\\\": \\\"A World Bank specific code for socio-economic indicators.\\\"\\n},\\n\\\"return\\\": \\\"A pandas DataFrame containing historical data for the specified indicator for the specified country.\\\",\\n\\\"depend\\\": \\\"python libraries: requests, pandas; Web API: World Bank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical industry veteran who has successfully developed several drugs using computational methods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Similarity Search Interface\\\",\\n\\\"description\\\": \\\"An interface that accepts a SMILES string of a known drug and returns a list of the top 10 similar drugs in the database.\\\",\\n\\\"function_name\\\": \\\"get_similarity\\\",\\n\\\"input_args\\\": \\\"smiles_string, database_smiles_strings\\\",\\n\\\"return\\\": \\\"List of SMILES strings of the top 10 similar drugs\\\",\\n\\\"depend\\\": \\\"RDKit library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A video streaming platform executive seeking to improve user experience and reduce buffering", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Quality Optimization Interface\\\",\\n\\\"description\\\": \\\"Predicts the optimal video quality based on user's network speed and device type to improve user experience and reduce buffering.\\\",\\n\\\"function_name\\\": \\\"predict_video_quality\\\",\\n\\\"input_args\\\": [\\\"network_speed\\\", \\\"device_type\\\"],\\n\\\"return\\\": \\\"Optimal video quality to stream without buffering.\\\",\\n\\\"depend\\\": \\\"TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated and experienced branch manager who is resistant to change and prefers to run their branch independently", "synthesized text": "\"{\\n\\\"name\\\": \\\"Branch Financial Performance Interface\\\",\\n\\\"description\\\": \\\"An interface to visualize the financial performance of a bank branch. It reads financial data from a given file path and creates a line plot for a specified time period.\\\",\\n\\\"function_name\\\": \\\"visualize_financial_performance\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"A line plot showing the financial performance (Profit over time) of the branch.\\\",\\n\\\"depend\\\": [\\\"Pandas library\\\", \\\"Seaborn library\\\", \\\"Matplotlib library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A historian who researches the origins and influences of science fiction in popular culture", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\", \\n\\\"description\\\": \\\"This interface recommends a list of books based on a given topic. The list includes the title of the book, its authors, and the publication date.\\\", \\n\\\"function_name\\\": \\\"get_recommended_books\\\", \\n\\\"input_args\\\": \\\"topic\\\", \\n\\\"return\\\": \\\"list of tuples (title, authors, publishedDate)\\\", \\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a committed Hindu nationalist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hindu Scripture Reader Interface\\\",\\n\\\"description\\\": \\\"This interface fetches specific verses from important Hindu scriptures like the Vedas, Upanishads, and Bhagavad Gita.\\\",\\n\\\"function_name\\\": \\\"get_scripture_verse\\\",\\n\\\"input_args\\\": [\\\"scripture_name\\\", \\\"verse_number\\\"],\\n\\\"return\\\": \\\"The text of the requested scripture verse, or an error message if the scripture name or verse number is invalid.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"BeautifulSoup library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A graduate student working on an innovative project developing a software-hardware co-design platform", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hardware Information Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to gather system information, including CPU utilization, memory usage, disk usage, and network statistics, using the Python library psutil.\\\",\\n\\\"function_name\\\": \\\"get_system_info\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A dictionary containing the CPU utilization, virtual memory usage, disk usage, and network I/O statistics.\\\",\\n\\\"depend\\\": \\\"Python library: psutil\\\"\\n}\"", "description": "tool development"}
{"input persona": "a person named Greg Peters who enjoys humour", "synthesized text": "\"{\\n\\\"name\\\": \\\"Joke Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses JokeAPI to generate a random joke from a specified category.\\\",\\n\\\"function_name\\\": \\\"generate_joke\\\",\\n\\\"input_args\\\": \\\"category\\\",\\n\\\"return\\\": \\\"A random joke from the specified category\\\",\\n\\\"depend\\\": \\\"JokeAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am Helga, a 65-year-old conservative woman who has lived all her life in a small village in Bavaria, Germany. I am a devout Catholic and deeply rooted in traditional values.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Daily Bible Verse Interface\\\",\\n\\\"description\\\": \\\"This interface fetches a daily bible verse from an online API. Users simply need to call the function to receive the verse and its reference from the Bible.\\\",\\n\\\"function_name\\\": \\\"get_daily_bible_verse\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A dictionary containing the daily bible verse and its reference.\\\",\\n\\\"depend\\\": \\\"requests library, ourmanna.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student who loves motorcycles but can't afford high-end models", "synthesized text": "\"{\\n\\\"name\\\": \\\"Used Motorcycle Price Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface takes the make, model and year of a motorcycle and returns an estimated price for a used version of that motorcycle by leveraging the Edmunds Vehicle API.\\\",\\n\\\"function_name\\\": \\\"get_used_motorcycle_price\\\",\\n\\\"input_args\\\": [\\\"make\\\", \\\"model\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"Estimated price for a used motorcycle of the specified make, model and year.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Edmunds Vehicle API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A music historian focused on 20th century British soundtracks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface uses the ACRCloud Music Recognition API to identify songs from an audio file.\\\",\\n\\\"function_name\\\": \\\"recognize_music\\\",\\n\\\"input_args\\\": [\\\"path_to_audio\\\"],\\n\\\"return\\\": \\\"Dictionary containing information about the recognized song, such as its title, artist, album, and release date.\\\",\\n\\\"depend\\\": \\\"acrcloud\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical doctor specializing in the therapeutic area of the drug being tested", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clinical Trial Search Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about clinical trials based on the disease and drug name from the clinicaltrials.gov API.\\\",\\n\\\"function_name\\\": \\\"fetch_clinical_trials\\\",\\n\\\"input_args\\\": {\\n    \\\"disease\\\": \\\"Name of the disease (string)\\\",\\n    \\\"drug\\\": \\\"Name of the drug (string)\\\"\\n},\\n\\\"return\\\": \\\"List of dictionaries with each dictionary containing details of a clinical trial (id, title, status, description, phase, intervention, and condition).\\\",\\n\\\"depend\\\": \\\"requests, json\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged local resident living near Grant Park who isn't a fan of music festivals.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Noise Level Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the noise level at a specific time and location by using data from local noise level sensors and the event schedule from local music festivals.\\\",\\n\\\"function_name\\\": \\\"forecast_noise_level\\\",\\n\\\"input_args\\\": [\\\"sensor_id\\\", \\\"festival_id\\\", \\\"datetime_str\\\"],\\n\\\"return\\\": [\\\"noise_level\\\", \\\"event_happening\\\"],\\n\\\"depend\\\": [\\\"requests library\\\", \\\"local government's public noise level sensor API\\\", \\\"local music festival schedule API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A technical project manager responsible for overseeing the development of a new video codec, seeking the senior engineer's advice on implementation challenges", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Codec Implementation Challenges Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the current challenges in developing a new video codec and returns the potential solutions or advice on these challenges.\\\",\\n\\\"function_name\\\": \\\"generate_advice_on_codec_implementation\\\",\\n\\\"input_args\\\": \\\"challenges - string detailing the current challenges in codec development\\\",\\n\\\"return\\\": \\\"string containing potential solutions or advice on the challenges\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers library and GPT2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A real estate developer seeking accurate geocoding data for site selection and market analysis", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Geocoding Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface to get the latitude and longitude of a given address using the Google Maps Geocoding API. It can be used for site selection and market analysis in real estate.\\\",\\n  \\\"function_name\\\": \\\"get_geocode_from_address\\\",\\n  \\\"input_args\\\": \\\"address\\\",\\n  \\\"return\\\": \\\"latitude and longitude as a tuple, or None if an error occurs\\\",\\n  \\\"depend\\\": \\\"Google Maps Geocoding API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmacologist working in a doping control laboratory continuously updating the list of prohibited substances", "synthesized text": "\"{\\n\\\"name\\\": \\\"Substance Verification Interface\\\",\\n\\\"description\\\": \\\"Verify if a substance is prohibited or not using APIs from PubChem, a public repository for information about chemical substances and their activities.\\\",\\n\\\"function_name\\\": \\\"is_prohibited_substance\\\",\\n\\\"input_args\\\": \\\"substance_name - the name of the substance to verify\\\",\\n\\\"return\\\": \\\"True if the substance is prohibited, False otherwise\\\",\\n\\\"depend\\\": \\\"PubChem APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A recent lottery winner who is overwhelmed by managing their sudden wealth", "synthesized text": "\"{\\n\\\"name\\\": \\\"Investment Portfolio Allocation Interface\\\",\\n\\\"description\\\": \\\"This interface provides an optimal allocation of a user's wealth across different assets to maximize their expected return based on historical data. The user provides their total wealth and their risk tolerance level, and the interface will return an optimal portfolio allocation.\\\",\\n\\\"function_name\\\": \\\"get_optimal_portfolio\\\",\\n\\\"input_args\\\": [\\\"total_wealth\\\", \\\"risk_tolerance\\\"],\\n\\\"return\\\": \\\"A dictionary with the optimal number of shares to hold for each stock in the portfolio.\\\",\\n\\\"depend\\\": [\\\"PyPortfolioOpt library\\\", \\\"yfinance library\\\", \\\"Efficient Frontier Theory in Modern Portfolio Theory\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A proud family member bearing the surname Yanos", "synthesized text": "\"{\\n\\\"name\\\": \\\"Family Tree Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Ancestry API to retrieve a family tree based on the user's input surname. The user only needs to provide their surname, and the interface will return the family tree associated with that surname.\\\",\\n\\\"function_name\\\": \\\"get_family_tree\\\",\\n\\\"input_args\\\": \\\"surname - The user's surname as a string.\\\",\\n\\\"return\\\": \\\"A JSON object representing the family tree associated with the input surname.\\\",\\n\\\"depend\\\": \\\"Ancestry API\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a mid-level manager at a large manufacturing company in the US, I'm concerned about the potential impacts of trade disputes on our business.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trade Dispute Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the PyTrends API to analyze the impact of trade disputes on your business by tracking the trend of specific keywords over time.\\\",\\n\\\"function_name\\\": \\\"get_trend_over_time\\\",\\n\\\"input_args\\\": \\\"keywords - a list of keywords related to your business and the trade dispute\\\",\\n\\\"return\\\": \\\"A pandas dataframe showing the trend of these keywords over the past 5 years.\\\",\\n\\\"depend\\\": \\\"PyTrends API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A competitor who also has a network of connections in the sports memorabilia industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Memorabilia Price Predicting Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the price of sports memorabilia based on various features like age, rarity, condition, player, etc.\\\",\\n\\\"function_name\\\": \\\"predict_price\\\",\\n\\\"input_args\\\": [\\\"details\\\"],\\n\\\"return\\\": \\\"predicted_price\\\",\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"pandas\\\", \\\"joblib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "As a Japanese journalist specializing in names, linguistics, and cultural heritage in Japan, I have extensive knowledge of Japanese names, including the surname 'Tanaka', which is one of the most common surnames in Japan.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Japanese Name Information Interface\\\",\\n\\\"description\\\": \\\"This interface uses the unofficial MyAnimeList API to find information about anime characters with a given Japanese name.\\\",\\n\\\"function_name\\\": \\\"get_anime_characters_by_name\\\",\\n\\\"input_args\\\": {\\\"name\\\": \\\"A Japanese name (either first name or surname)\\\"},\\n\\\"return\\\": {\\\"Anime Characters\\\": \\\"A list of anime characters with the input name\\\"},\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python library to handle requests\\\", \\\"jikan.moe\\\": \\\"Unofficial MyAnimeList API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "a retired high school Alumna, aged 67, who loves to keep tabs on the achievements of the alumni of her school, Technical University of Sofia.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alumni Achievement Tracker Interface\\\",\\n\\\"description\\\": \\\"Fetches the profiles of alumni from a particular university and extracts key achievements such as promotions, publications, or entrepreneurial ventures.\\\",\\n\\\"function_name\\\": \\\"track_alumni_achievements\\\",\\n\\\"input_args\\\": [\\\"university_name\\\"],\\n\\\"return\\\": \\\"List of alumni achievements\\\",\\n\\\"depend\\\": \\\"LinkedIn APIs, Python's re module, and LLM\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person considering plastic surgery who seeks non-surgical alternatives first", "synthesized text": "\"{\\n\\\"name\\\": \\\"Non-Surgical Alternatives Interface\\\",\\n\\\"description\\\": \\\"Suggests non-surgical alternatives for a given surgical procedure.\\\",\\n\\\"function_name\\\": \\\"suggest_non_surgical_alternatives\\\",\\n\\\"input_args\\\": \\\"surgical_procedure - the name of the surgical procedure being considered.\\\",\\n\\\"return\\\": \\\"A list of non-surgical alternatives for the given surgical procedure.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A resident of Cook County who has the habit of organizing everything in a detailed manner.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Tax Payment Interface\\\",\\n  \\\"description\\\": \\\"Fetch tax payment details from Cook County's Property Tax Portal given a Property Index Number (PIN)\\\",\\n  \\\"function_name\\\": \\\"get_tax_payment_details\\\",\\n  \\\"input_args\\\": [\\\"PIN\\\"],\\n  \\\"return\\\": \\\"json object containing tax payment details for the specified property\\\",\\n  \\\"depend\\\": \\\"Cook County's Property Tax Portal API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elder native resident of Tor-Kamysh", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Weather Forecast Interface\\\",\\n  \\\"description\\\": \\\"This interface provides a 5-day weather forecast for the specified city using the OpenWeather API. It returns a list of dictionaries, each containing the date, temperature, and weather description.\\\",\\n  \\\"function_name\\\": \\\"get_5_day_forecast\\\",\\n  \\\"input_args\\\": \\\"city_name - string\\\",\\n  \\\"return\\\": \\\"List of dictionaries with keys 'date', 'temp', 'description'\\\",\\n  \\\"depend\\\": \\\"requests library, OpenWeather API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An apiarist who loves to include figures of speech and idioms in her speech.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Idiom Generation Interface\\\",\\n\\\"description\\\": \\\"Generates idioms or figures of speech related to a given word by leveraging synonyms and a large language model.\\\",\\n\\\"function_name\\\": \\\"generate_idioms\\\",\\n\\\"input_args\\\": \\\"word\\\",\\n\\\"return\\\": \\\"Idiom or figure of speech related to the input word.\\\",\\n\\\"depend\\\": \\\"PyDictionary API, Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A government official working on digital transformation policies for Bangladesh", "synthesized text": "\"{\\n\\\"name\\\": \\\"Digital Transformation Policy Analyzer\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from the Hugging Face Transformers library to analyze digital transformation policy documents. It takes as input the path to a policy document and returns information about the policy area, the policy instruments used, and the sectors affected.\\\",\\n\\\"function_name\\\": \\\"analyze_policy\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"policy_info\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "一位因童年看过水木一郎配音的动画而对其抱有深厚感情的广播员", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u8bed\\u97f3\\u5408\\u6210\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u5c06\\u8f93\\u5165\\u7684\\u6587\\u672c\\u8f6c\\u5316\\u4e3a\\u8bed\\u97f3\\u8f93\\u51fa\\uff0c\\u6a21\\u62df\\u6c34\\u6728\\u4e00\\u90ce\\u7684\\u58f0\\u97f3\\u3002\\u8f93\\u5165\\u9700\\u8981\\u8f6c\\u5316\\u7684\\u6587\\u672c\\uff0c\\u8fd4\\u56de\\u97f3\\u9891\\u6587\\u4ef6\\u3002\\\",\\n\\\"function_name\\\": \\\"convert_text_to_speech\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"\\u97f3\\u9891\\u6587\\u4ef6\\\",\\n\\\"depend\\\": \\\"gtts\\u5e93\\\"\\n}\"", "description": "tool development"}
{"input persona": "An event planner organizing a symposium on global economic interdependence with a focus on China and the United States", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Management Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Eventbrite API to create an event based on the provided details.\\\",\\n\\\"function_name\\\": \\\"create_event\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"start_time\\\", \\\"end_time\\\", \\\"description\\\", \\\"currency\\\", \\\"online_event\\\"],\\n\\\"return\\\": \\\"The ID of the created event if successful, or a failure message otherwise.\\\",\\n\\\"depend\\\": \\\"Eventbrite API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A financially irresponsible sibling who constantly asks for loans and financial help", "synthesized text": "\"{\\n\\\"name\\\": \\\"Personal Loan Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the probability of loan repayment based on historical financial data. It formats the data into a form that the model can understand, then feeds it into the model to get a prediction. The model returns a label, which represents the probability of loan repayment.\\\",\\n\\\"function_name\\\": \\\"loan_repayment_probability\\\",\\n\\\"input_args\\\": {\\\"historical_data\\\": \\\"A string representing the historical financial data of the person.\\\"},\\n\\\"return\\\": \\\"A string representing the probability of loan repayment.\\\",\\n\\\"depend\\\": \\\"Huggingface 'distilbert-base-uncased-finetuned-sst-2-english' model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A medical transcriptionist responsible for transcribing the pathologist's dictated reports", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Transcription Interface\\\",\\n\\\"description\\\": \\\"Transcribes the pathologist's dictated audio reports into text using Google Speech-to-Text API\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"Transcribed text\\\",\\n\\\"depend\\\": \\\"Google Cloud Speech-to-Text API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The owner of a traditional taxi company, resistant to the changes brought by the app-based service", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traffic Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the traffic situation for a given route using the Google Directions API\\\",\\n\\\"function_name\\\": \\\"get_predicted_traffic\\\",\\n\\\"input_args\\\": [\\\"origin\\\", \\\"destination\\\", \\\"departure_time\\\"],\\n\\\"return\\\": \\\"Estimated duration of the journey considering the current traffic\\\",\\n\\\"depend\\\": \\\"Google Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Panicky royal fan who does not like changes or uncertainties", "synthesized text": "\"{\\n\\\"name\\\": \\\"Royal Engagement Alert Interface\\\",\\n\\\"description\\\": \\\"An interface that tracks royal family members' social media accounts or royal news websites and alerts the user whenever there is an engagement announcement.\\\",\\n\\\"function_name\\\": \\\"check_engagement_announcement\\\",\\n\\\"input_args\\\": {\\\"url\\\": \\\"URL of a royal family member's social media account or a royal news website\\\"},\\n\\\"return\\\": {\\\"bool\\\": \\\"True if there is an engagement announcement, False otherwise\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\", \\\"transformers\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An undecided voter in Arkansas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voter Issue Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface that compares the voting records of two politicians on a specific issue. The user inputs the names of two politicians and the issue they are interested in, and the interface returns a comparison of the politicians' voting records on that issue.\\\",\\n\\\"function_name\\\": \\\"compare_politicians_on_issue\\\",\\n\\\"input_args\\\": [\\\"politician1\\\", \\\"politician2\\\", \\\"issue\\\"],\\n\\\"return\\\": \\\"A comparison of politician1's and politician2's voting records on the specified issue.\\\",\\n\\\"depend\\\": \\\"The ProPublica Represent API is used to access information on the voting behavior of senators and representatives.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small-town girl who just got accepted into her dream school.", "synthesized text": "\"{\\n\\\"name\\\": \\\"University Acceptance Letter Analysis Interface\\\",\\n\\\"description\\\": \\\"Extracts important details from the acceptance letter such as the university name, department, admission date, and any conditions.\\\",\\n\\\"function_name\\\": \\\"extract_university_details\\\",\\n\\\"input_args\\\": \\\"letter_text\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'university', 'department', 'admission_date', 'conditions', and corresponding sentences as their values.\\\",\\n\\\"depend\\\": \\\"TextBlob library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A younger brother who draws retro game-themed artwork and designs custom game cases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Classic Game Cover Art Generation Interface\\\",\\n\\\"description\\\": \\\"Generates cover art for a classic video game based on a supplied title and description.\\\",\\n\\\"function_name\\\": \\\"generate_game_cover_art\\\",\\n\\\"input_args\\\": [\\\"title\\\", \\\"description\\\"],\\n\\\"return\\\": \\\"A PIL Image object representing the generated cover art.\\\",\\n\\\"depend\\\": [\\\"Python libraries: PIL, requests, transformers\\\", \\\"Machine learning model: BigGAN from Hugging Face\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A delivery driver responsible for transporting goods from the warehouse to the store", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to find the optimal route for delivering goods from a warehouse to multiple stores. It uses the OpenRouteService API for route optimization.\\\",\\n\\\"function_name\\\": \\\"get_optimized_route\\\",\\n\\\"input_args\\\": [\\\"warehouse_location\\\", \\\"store_locations\\\"],\\n\\\"return\\\": \\\"optimized_route\\\",\\n\\\"depend\\\": \\\"Python's built-in libraries, requests, json, and the OpenRouteService API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A horror film buff who likes to compare American remakes with foreign originals.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Movie Comparison Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches and compares data for the original and remake versions of a movie. The user inputs the names of the two movies and the interface returns a comparison of the two movies including director, cast, release date, rating, and box office.\\\",\\n  \\\"function_name\\\": \\\"compare_movies\\\",\\n  \\\"input_args\\\": [\\\"original_movie_name\\\", \\\"remake_movie_name\\\"],\\n  \\\"return\\\": \\\"A dictionary with information on the original and remake versions of the input movies\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"OMDb API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A professor of computer science researching the impact of cloud computing on business processes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cloud Availability Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check the current status of a given cloud service. It is useful for researchers or businesses who want to monitor the availability of cloud services.\\\",\\n\\\"function_name\\\": \\\"get_cloud_service_status\\\",\\n\\\"input_args\\\": \\\"service_name\\\",\\n\\\"return\\\": \\\"The current status of the specified cloud service\\\",\\n\\\"depend\\\": \\\"UptimeRobot API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a noted football commentator based in Japan who is an outspoken critic of Urawa Red Diamonds", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n    \\\"description\\\": \\\"This interface fetches detailed football match statistics using the Sportradar's API. The user inputs the match_id and the interface returns detailed match statistics.\\\",\\n    \\\"function_name\\\": \\\"get_football_match_statistics\\\",\\n    \\\"input_args\\\": {\\n        \\\"match_id\\\": \\\"A unique identifier for a football match as per the Sportradar's API.\\\"\\n    },\\n    \\\"return\\\": \\\"Detailed match statistics as a JSON object, including data like ball possession, shots on goal, passes, fouls, etc.\\\",\\n    \\\"depend\\\": \\\"Sportradar's API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a nostalgic fan of global music, especially the genre of Rai", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rai Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Spotify's Web API to create a recommendation system for Rai music. The user inputs their favorite Rai song, and the interface returns a list of recommended Rai songs that are similar to the user's favorite.\\\",\\n\\\"function_name\\\": \\\"get_rai_recommendations\\\",\\n\\\"input_args\\\": [\\\"favorite_song\\\"],\\n\\\"return\\\": \\\"List of song names\\\",\\n\\\"depend\\\": [\\\"spotipy, Spotify Web API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A resident of Chicago who doesn't have an air conditioner in their apartment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast and Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenWeatherMap API to fetch the weather forecast for a given city. It then calculates the average of the maximum temperatures for the forecast period and provides a recommendation on whether an air conditioner might be needed based on this average temperature.\\\",\\n\\\"function_name\\\": \\\"get_forecast_and_recommendation\\\",\\n\\\"input_args\\\": {\\n    \\\"city_name\\\": \\\"Name of the city for which the weather forecast and recommendation are to be provided.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"average_high_temperature\\\": \\\"The average of the maximum temperatures for the forecast period.\\\",\\n    \\\"recommendation\\\": \\\"A recommendation on whether an air conditioner might be needed based on the average temperature.\\\"\\n},\\n\\\"depend\\\": \\\"requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A marketing consultant who helps the baker develop effective pricing strategies and target new markets", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitive Price Suggestion Interface\\\",\\n\\\"description\\\": \\\"An interface that scrapes prices of bakery items from competitors' websites and suggests a competitive price.\\\",\\n\\\"function_name\\\": \\\"suggest_prices\\\",\\n\\\"input_args\\\": [\\\"urls\\\"],\\n\\\"return\\\": \\\"Suggested price for bakery items that undercuts the competition by 5%.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A handbag designer specializing in vegan and sustainable materials", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Sustainability Scoring Interface\\\",\\n\\\"description\\\": \\\"An interface to extract the environmental impact score of a material from the Material Sustainability Index (MSI) database.\\\",\\n\\\"function_name\\\": \\\"get_material_sustainability_score\\\",\\n\\\"input_args\\\": [\\\"material_name\\\", \\\"msi_db\\\"],\\n\\\"return\\\": \\\"The environmental impact score of the input material. Lower scores indicate more sustainable materials.\\\",\\n\\\"depend\\\": \\\"Python's pandas library and the Material Sustainability Index (MSI) database in CSV format from the Sustainable Apparel Coalition's Higg Index.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fintech company seeking to optimize their data processing and storage using Java and Alluxio", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alluxio Data Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses Alluxio's distributed storage system to optimize data storage and retrieval. The user inputs the file paths and data and the interface handles the data storage and retrieval.\\\",\\n\\\"function_name\\\": [\\\"write_to_alluxio\\\", \\\"read_from_alluxio\\\"],\\n\\\"input_args\\\": [\\\"path\\\", \\\"data\\\"],\\n\\\"return\\\": [\\\"None for write_to_alluxio function\\\", \\\"data for read_from_alluxio function\\\"],\\n\\\"depend\\\": [\\\"alluxio\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a final-year graduate student focused on e-Learning technologies who is eagerly looking for job opportunities within this field.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Search Interface\\\",\\n\\\"description\\\": \\\"This interface helps users find job opportunities based on their job title and location by leveraging job search APIs.\\\",\\n\\\"function_name\\\": \\\"get_job_opportunities\\\",\\n\\\"input_args\\\": {\\n    \\\"job_title\\\": \\\"A string specifying the job title. For example, 'Software Engineer'.\\\",\\n    \\\"location\\\": \\\"A string specifying the location. For example, 'San Francisco'.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, with each dictionary containing the job title, company, location, and a URL for more information.\\\",\\n\\\"depend\\\": \\\"requests library, GitHub Jobs API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Filipino farmer who has a small farm growing sugarcane, corn and rice.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crop Health Monitoring Interface\\\",\\n\\\"description\\\": \\\"An interface to monitor the health of crops using the Normalized Difference Vegetation Index (NDVI) obtained from Sentinel-2 satellite images.\\\",\\n\\\"function_name\\\": \\\"get_ndvi\\\",\\n\\\"input_args\\\": [\\\"longitude\\\", \\\"latitude\\\"],\\n\\\"return\\\": \\\"The average NDVI of the input farm coordinates which indicates the health of the crops.\\\",\\n\\\"depend\\\": \\\"Sentinel Hub API, numpy, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "a modern history undergraduate student with a considerable interest in the development of polymer sciences.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Article Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for and retrieve scientific articles on a given topic using the Europe PMC API. The interface returns a list of articles, each with its title, authors, journal, and publication date.\\\",\\n\\\"function_name\\\": \\\"get_scientific_articles\\\",\\n\\\"input_args\\\": {\\\"topic\\\": \\\"The topic to search for\\\", \\\"results_limit\\\": \\\"The maximum number of results to return (default is 10)\\\"},\\n\\\"return\\\": \\\"A list of dictionaries, each containing the title, authors, journal, and publication date of a relevant article.\\\",\\n\\\"depend\\\": \\\"requests library, Europe PMC API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a recently inducted member of the International Protection Appeals Tribunal (IPAT) who believes in following policies and protocols strictly.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Generator\\\",\\n\\\"description\\\": \\\"This interface generates a legal document in Word format (.docx) based on user-provided case details. Each detail consists of a title and content which represent a section in the legal document.\\\",\\n\\\"function_name\\\": \\\"create_legal_document\\\",\\n\\\"input_args\\\": [{\\\"case_details\\\": \\\"A list of dictionaries where each dictionary contains a 'title' and 'content' pair representing a section of the legal document.\\\"}],\\n\\\"return\\\": \\\"A Word document named 'legal_document.docx' is saved in the current directory.\\\",\\n\\\"depend\\\": \\\"python libraries: docx\\\"\\n}\"", "description": "tool development"}
{"input persona": "Orthodox and high minded Entomologist (Insect Scientist)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Insect Classification Interface\\\",\\n\\\"description\\\": \\\"Classify the species of insects from an image\\\",\\n\\\"function_name\\\": \\\"classify_insect\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\"],\\n\\\"return\\\": \\\"predicted_class\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, pre-trained model: https://tfhub.dev/google/imagenet/inception_v3/classification/4\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是位天文爱好者，也对流行音乐保持一定兴趣，特别是喜欢那些在歌曲中融入天文元素的作品。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"\\u661f\\u7a7a\\u6b4c\\u66f2\\u63a8\\u8350\\u63a5\\u53e3\\\",\\n  \\\"description\\\": \\\"\\u6839\\u636e\\u7528\\u6237\\u7684Spotify\\u7528\\u6237id\\uff0c\\u63a8\\u8350\\u4e00\\u4e9b\\u6d41\\u884c\\u7684\\u3001\\u6b4c\\u8bcd\\u4e2d\\u542b\\u6709\\u5929\\u6587\\u5143\\u7d20\\u7684\\u6b4c\\u66f2\\u3002\\\",\\n  \\\"function_name\\\": \\\"recommend_astronomy_songs\\\",\\n  \\\"input_args\\\": [\\\"user_id\\\"],\\n  \\\"return\\\": \\\"\\u8fd4\\u56de\\u4e00\\u4e9b\\u6d41\\u884c\\u7684\\u3001\\u6b4c\\u8bcd\\u4e2d\\u542b\\u6709\\u5929\\u6587\\u5143\\u7d20\\u7684\\u6b4c\\u66f2\\u7684\\u540d\\u5b57\\u3002\\\",\\n  \\\"depend\\\": \\\"Python\\u5e93: requests; Web APIs: Spotify Web API, Lyrics.ovh API; Machine Learning Models: Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An international group of photographers who organize virtual photo walks in different urban locations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Street View Image Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to generate street view images from specified location coordinates using the Google Street View Image API. It is useful for virtual photo walks, allowing participants to explore urban locations virtually.\\\",\\n\\\"function_name\\\": \\\"get_street_view_image\\\",\\n\\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\", \\\"api_key\\\"],\\n\\\"return\\\": \\\"A PIL Image object of a street view image that can be displayed or saved.\\\",\\n\\\"depend\\\": \\\"Python's requests and PIL libraries, Google Street View Image API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a star-struck Kevin Kline fan residing in Las Vegas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Showtime Finder Interface\\\",\\n\\\"description\\\": \\\"Given an actor's name and a location, this interface returns the latest movie by the actor and its showtimes in local theaters.\\\",\\n\\\"function_name\\\": \\\"find_movie_showtimes\\\",\\n\\\"input_args\\\": {\\n    \\\"actor_name\\\": \\\"Name of the actor\\\",\\n    \\\"location\\\": \\\"User's location\\\"\\n},\\n\\\"return\\\": \\\"A dictionary where the keys are the names of local theaters and the values are the showtimes of the actor's latest movie in those theaters.\\\",\\n\\\"depend\\\": \\\"Python's requests library, The Movie Database (TMDB) API, Fandango API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A television talent show judge who favors instant fame over long-term career development", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Youtube Trending Video Analysis Interface\\\",\\n  \\\"description\\\": \\\"Fetches data about the top 50 trending YouTube videos in a specified region using the YouTube Data API. Returns a pandas DataFrame with details including the video's title, description, channel title, publish time, view count, like count, dislike count, comment count, and more.\\\",\\n  \\\"function_name\\\": \\\"get_trending_videos\\\",\\n  \\\"input_args\\\": \\\"region_code - The region to fetch trending videos for. Defaults to 'US'.\\\",\\n  \\\"return\\\": \\\"A pandas DataFrame with details of the top 50 trending videos in the specified region.\\\",\\n  \\\"depend\\\": \\\"Python's requests and pandas libraries, and YouTube Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Chinese exchange student who is preparing to get a driving license in the UK.", "synthesized text": "\"{\\n\\\"name\\\": \\\"UK Driving License Test Preparation Interface\\\",\\n\\\"description\\\": \\\"Fetches questions from the DVSA API that are often asked in the UK driving license theory test for practice.\\\",\\n\\\"function_name\\\": \\\"get_driving_license_questions\\\",\\n\\\"input_args\\\": [\\\"num_questions\\\"],\\n\\\"return\\\": \\\"List of tuples, each containing a question, possible answers, and the correct answer\\\",\\n\\\"depend\\\": \\\"DVSA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A health official responsible for approving and regulating vaccines for animal use", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vaccine Clinical Trial Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that processes CSV files containing vaccine clinical trial data and returns a summary of the findings, including the mean, variance, standard deviation, min and max values for the dataset, as well as a t-test comparing the effects of the vaccine to a control group if one is present.\\\",\\n\\\"function_name\\\": \\\"analyse_clinical_trial_data\\\",\\n\\\"input_args\\\": \\\"path_to_csv: string of the csv file's path\\\",\\n\\\"return\\\": \\\"A dictionary containing the summary statistics of the dataset and optionally a t-test result comparing the vaccine and control group effect\\\",\\n\\\"depend\\\": \\\"Python's pandas and scipy libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local dentist who visits the kindergarten class to teach about oral hygiene", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interactive Dental Advice Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model for natural language processing (like GPT-3 from OpenAI) to create an interactive chatbot that provides dental advice.\\\",\\n\\\"function_name\\\": \\\"dental_advice\\\",\\n\\\"input_args\\\": \\\"question - A string containing the user's question about dental health.\\\",\\n\\\"return\\\": \\\"A string containing the response to the user's question.\\\",\\n\\\"depend\\\": \\\"OpenAI's GPT-3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A security guard who shares tips and strategies for staying alert during night shifts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sleep Pattern Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Python's Pandas and Matplotlib libraries to analyze and visualize sleep patterns based on a sleep log file provided by the user. This can help in understanding and optimizing sleep schedules for staying alert during night shifts.\\\",\\n\\\"function_name\\\": \\\"analyze_sleep_patterns\\\",\\n\\\"input_args\\\": \\\"sleep_log_file - A CSV file with each row representing a sleep session and two columns: 'start_time' and 'end_time', both in ISO 8601 format (YYYY-MM-DDTHH:MM:SS).\\\",\\n\\\"return\\\": \\\"A plot showing sleep duration over time, helping to visualize the user's sleep patterns.\\\",\\n\\\"depend\\\": \\\"Python's Pandas and Matplotlib libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skeptical student who believes that gun control measures limit personal freedom and self-defense", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gun Laws Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"Uses data from the Gun Violence Archive and machine learning to predict the impact of different gun control measures on the number of gun violence incidents.\\\",\\n\\\"function_name\\\": \\\"predict_impact_of_gun_control\\\",\\n\\\"input_args\\\": [\\\"measure\\\"],\\n\\\"return\\\": \\\"Predicted reduction in gun violence incidents\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"sklearn.ensemble.RandomForestRegressor\\\", \\\"Gun Violence Archive API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an immunodeficient high school student in Australia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Virus Outbreak Alert Interface\\\",\\n\\\"description\\\": \\\"This interface uses APIs from health organizations or disease control centers to provide the latest outbreak information about a specified virus in the user's location.\\\",\\n\\\"function_name\\\": \\\"get_virus_outbreak_info\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"virus\\\"],\\n\\\"return\\\": \\\"A json object containing outbreak information, including case numbers, hotspots, and other relevant data.\\\",\\n\\\"depend\\\": \\\"requests library, Disease Outbreak Alert Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A World War II historian with a focus on the Danish resistance movement and the role of women in wartime humanitarian efforts.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Events Data Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface uses Wikipedia's API to extract data about historical events. The user only needs to input the event's name, and our interface will return the summary of that event.\\\",\\n\\\"function_name\\\": \\\"get_event_summary\\\",\\n\\\"input_args\\\": \\\"event_name\\\",\\n\\\"return\\\": \\\"a brief summary of the event or a message indicating that no data was found\\\",\\n\\\"depend\\\": \\\"Wikipedia's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a student who is preparing an essay for a mathematics course", "synthesized text": "\"{\\n\\\"name\\\": \\\"LaTeX Equation Converter Interface\\\",\\n\\\"description\\\": \\\"Converts a mathematical expression to LaTeX format\\\",\\n\\\"function_name\\\": \\\"convert_to_latex\\\",\\n\\\"input_args\\\": [\\\"expression\\\"],\\n\\\"return\\\": \\\"LaTeX formatted string representing the input mathematical expression\\\",\\n\\\"depend\\\": [\\\"sympy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Canadian millennial who can't afford to buy a house yet", "synthesized text": "\"{\\n\\\"name\\\": \\\"Housing Affordability Interface\\\",\\n\\\"description\\\": \\\"This interface uses Zillow API to fetch the latest real estate pricing data and uses your current income and expense details to check if you can afford to buy a house in a given Canadian city.\\\",\\n\\\"function_name\\\": \\\"can_i_afford_a_house\\\",\\n\\\"input_args\\\": [\\\"city\\\", \\\"annual_income\\\", \\\"monthly_expenses\\\"],\\n\\\"return\\\": \\\"boolean (True if the user can afford a house in the given city, False otherwise)\\\",\\n\\\"depend\\\": \\\"Zillow API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Ukrainian agriculture business owner who is thinking about implementing biogas systems on his farmland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Biogas Potential Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the potential biogas production based on input parameters such as type of feedstock, quantity, temperature, pH, and retention time.\\\",\\n\\\"function_name\\\": \\\"estimate_biogas_production\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_model\\\": \\\"The path to the pre-trained model file\\\",\\n    \\\"feedstock_type\\\": \\\"The type of feedstock to be used\\\",\\n    \\\"quantity\\\": \\\"The quantity of feedstock\\\",\\n    \\\"temperature\\\": \\\"The temperature at which the feedstock is processed\\\",\\n    \\\"pH\\\": \\\"The pH level of the feedstock\\\",\\n    \\\"retention_time\\\": \\\"The retention time for the feedstock\\\"\\n},\\n\\\"return\\\": \\\"The estimated biogas production\\\",\\n\\\"depend\\\": \\\"scikit-learn, pandas, numpy, pickle\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Nissan Kaikan exhibition tour guide in Japan who is not very interested in Renault brand cars.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car Brand Filtering Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Huggingface 'sentence-transformers/bert-base-nli-mean-tokens' model to filter phrases or sentences based on semantic similarity. Users only need to input a list of sentences or phrases and a keyword they are not interested in. Our interface will return the sentences or phrases that are semantically unrelated to the keyword.\\\",\\n\\\"function_name\\\": \\\"filter_unrelated_sentences\\\",\\n\\\"input_args\\\": [\\\"sentences\\\", \\\"keyword\\\"],\\n\\\"return\\\": \\\"List of sentences or phrases that are semantically unrelated to the keyword.\\\",\\n\\\"depend\\\": [\\\"Huggingface: sentence-transformers/bert-base-nli-mean-tokens\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A wellness coach always looking for new insights to integrate into clients' fitness programs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fitness Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface provides personalized workout recommendations based on user's fitness activity data from a fitness tracking platform.\\\",\\n\\\"function_name\\\": \\\"predict_workout\\\",\\n\\\"input_args\\\": {\\n    \\\"user_id\\\": \\\"The user's ID on the fitness tracking platform.\\\"\\n},\\n\\\"return\\\": \\\"A recommended workout based on the user's fitness activity data.\\\",\\n\\\"depend\\\": \\\"This function utilizes the API from a fitness tracking platform and a RandomForestRegressor model from sklearn.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local community activist in Exeter passionate about ensuring everyone gets the help and information they need during the COVID19 pandemic.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"COVID19 Information Interface\\\",\\n    \\\"description\\\": \\\"Provides information about COVID19 cases, deaths and recovered cases based on location\\\",\\n    \\\"function_name\\\": \\\"get_covid_info\\\",\\n    \\\"input_args\\\": \\\"location\\\",\\n    \\\"return\\\": \\\"A dictionary with keys 'Total Cases', 'Total Deaths' and 'Total Recovered'\\\",\\n    \\\"depend\\\": \\\"requests library, disease.sh API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Python developer who maintains a comprehensive blog on mastering unit testing with pytest", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Automated Test Result Interface\\\",\\n  \\\"description\\\": \\\"This interface runs all unit tests in a specified directory using pytest and returns the number of tests passed, number of tests failed, and the pass rate.\\\",\\n  \\\"function_name\\\": \\\"run_tests\\\",\\n  \\\"input_args\\\": [\\\"directory\\\"],\\n  \\\"return\\\": {\\\"num_passed\\\": \\\"Integer\\\", \\\"num_failed\\\": \\\"Integer\\\", \\\"pass_rate\\\": \\\"Float\\\"},\\n  \\\"depend\\\": [\\\"pytest\\\", \\\"os\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a competitive professional cyclist who participated in the 2023 Deutschland Tour", "synthesized text": "\"{\\n\\\"name\\\": \\\"Elevation Profile Interface\\\",\\n\\\"description\\\": \\\"This interface returns the elevation profile along a cycling route, given the start and end locations. The elevation profile can be used by cyclists to plan their training or strategies.\\\",\\n\\\"function_name\\\": \\\"get_route_elevation\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\", \\\"api_key\\\"],\\n\\\"return\\\": \\\"A list of tuples, each containing a latitude/longitude pair and the corresponding elevation in meters.\\\",\\n\\\"depend\\\": \\\"Google Maps Elevation API, Google Maps Directions API, polyline Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Soy un programador full-stack con más de 10 años de experiencia en JavaScript y React.js.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input the source currency, destination currency, and the amount to be converted, and returns the amount in the destination currency.\\\",\\n\\\"function_name\\\": \\\"convert_currency\\\",\\n\\\"input_args\\\": [\\\"source_currency\\\", \\\"destination_currency\\\", \\\"amount\\\"],\\n\\\"return\\\": \\\"The converted amount in the destination currency.\\\",\\n\\\"depend\\\": \\\"Python requests library, Foreign exchange rates API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A restaurant owner who relies on the airport for a steady stream of customers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Airport Flight Arrival Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches upcoming flight arrival information for a given airport. It uses the aviationstack API to get flight data.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_arrivals\\\",\\n\\\"input_args\\\": [\\\"airport_code\\\"],\\n\\\"return\\\": \\\"A list of active flight numbers arriving at the given airport.\\\",\\n\\\"depend\\\": \\\"requests library, aviationstack API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Chief Financial Officer who collaborates with the CEO to ensure financial decisions align with legal requirements", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Financial Regulations Compliance Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch regulations applied to a specific financial action using Intrinio API.\\\",\\n  \\\"function_name\\\": \\\"get_financial_regulations\\\",\\n  \\\"input_args\\\": {\\n    \\\"financial_action\\\": \\\"The type of financial action (e.g. investment, loan, acquisition, etc.)\\\"\\n  },\\n  \\\"return\\\": \\\"A list of regulations related to the provided financial action.\\\",\\n  \\\"depend\\\": \\\"Intrinio API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced programmer skilled in creating websites with accurate time zone conversion functionalities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Time Zone Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface to convert a given time from one time zone to another.\\\",\\n\\\"function_name\\\": \\\"convert_time_zone\\\",\\n\\\"input_args\\\": [\\\"source_time\\\", \\\"source_time_zone\\\", \\\"target_time_zone\\\"],\\n\\\"return\\\": \\\"target_time (string)\\\",\\n\\\"depend\\\": [\\\"datetime\\\", \\\"pytz\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I'm a loud and familial person; a Texan, homesteader, and uncompromising libertian. I believe in human rights, democracy and I am passionate about matters related to criminal justice.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Criminal Case Information Retrieval Interface\\\",\\n    \\\"description\\\": \\\"This interface retrieves essential information about a criminal case from the PACER Case Locator given a case number.\\\",\\n    \\\"function_name\\\": \\\"get_case_information\\\",\\n    \\\"input_args\\\": [\\\"case_number\\\"],\\n    \\\"return\\\": \\\"Dictionary with case_name, court_name, date_filed, judge_name, parties\\\",\\n    \\\"depend\\\": [\\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a proud colleague who worked with Carol House in the National Agricultural Statistics Service", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Crop Yield Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the yield of crops based on various factors like rainfall, temperature and pH level of soil.\\\",\\n  \\\"function_name\\\": \\\"predict_crop_yield\\\",\\n  \\\"input_args\\\": [\\\"rainfall\\\", \\\"temperature\\\", \\\"ph_level\\\"],\\n  \\\"return\\\": \\\"Predicted crop yield\\\",\\n  \\\"depend\\\": [\\\"scikit-learn library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "一个兰州本地的摄影爱好者，对城市的发展以及新兴建筑充满了兴趣。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Recognition Interface\\\",\\n\\\"description\\\": \\\"Recognize the buildings in the image and return their names and related information.\\\",\\n\\\"function_name\\\": \\\"recognize_building\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"Dictionary with building names as keys and their recognition scores as values.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, pre-trained object detection model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a social justice activist based in Downey, California", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Petition Creation Interface\\\",\\n\\\"description\\\": \\\"Generates a draft petition text based on inputs such as the cause, target, and desired action.\\\",\\n\\\"function_name\\\": \\\"generate_petition\\\",\\n\\\"input_args\\\": {\\\"cause\\\": \\\"The social issue that the petition is about\\\", \\\"target\\\": \\\"The entity that the petition is addressed to\\\", \\\"desired_action\\\": \\\"The change that the petition aims to achieve\\\"},\\n\\\"return\\\": \\\"A string containing the draft petition text.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A new mom sharing her positive experience with prenatal yoga and its impact on her postpartum recovery", "synthesized text": "\"{\\n\\\"name\\\": \\\"Prenatal Yoga Poses Recommender Interface\\\",\\n\\\"description\\\": \\\"This interface inputs a category of yoga poses and returns a list of recommended yoga poses along with their brief descriptions and benefits.\\\",\\n\\\"function_name\\\": \\\"get_yoga_poses\\\",\\n\\\"input_args\\\": [\\\"category\\\"],\\n\\\"return\\\": \\\"List of dictionaries. Each dictionary contains 'name', 'description' and 'benefits' of a yoga pose.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, requests library and yoga poses API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A frequent guest who appreciates the efforts made to reduce the homestay's carbon footprint", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Calculator\\\",\\n\\\"description\\\": \\\"An interface that calculates the carbon footprint based on details of energy consumption.\\\",\\n\\\"function_name\\\": \\\"calculate_carbon_footprint\\\",\\n\\\"input_args\\\": [\\\"electricity_units\\\", \\\"gas_units\\\", \\\"miles_driven\\\"],\\n\\\"return\\\": \\\"The carbon footprint in kilograms\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Carbon Interface API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An established saxophonist performing in local jazz clubs and teaching music theory", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Sheet Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes music audio files into sheet music using a pre-trained TensorFlow model.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio_to_midi\\\",\\n\\\"input_args\\\": [\\\"path_to_audio\\\"],\\n\\\"return\\\": \\\"A piano roll representation of the transcribed music.\\\",\\n\\\"depend\\\": [\\\"TensorFlow\\\", \\\"pretty_midi\\\", \\\"pypianoroll\\\", \\\"Magenta's Onsets and Frames transcription model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a person who had been unfairly treated because of their immigration status", "synthesized text": "\"{\\n\\\"name\\\": \\\"Immigration Status Verification Interface\\\",\\n\\\"description\\\": \\\"An interface to verify the immigration status of a case using the provided case number. It makes a GET request to the U.S. Citizenship and Immigration Services (USCIS) API.\\\",\\n\\\"function_name\\\": \\\"verify_immigration_status\\\",\\n\\\"input_args\\\": {\\\"case_number\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"status\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python library\\\", \\\"USCIS API\\\": \\\"Web API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "An aspiring finance Ph.D. student who deeply admires Robert Goldstein and has always dreamt of working with him.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the stock price for the next day using a pre-trained TensorFlow model.\\\",\\n\\\"function_name\\\": \\\"stock_price_prediction\\\",\\n\\\"input_args\\\": \\\"symbol - The stock symbol of the company\\\",\\n\\\"return\\\": \\\"Predicted stock price for the next day\\\",\\n\\\"depend\\\": \\\"Yahoo Finance API for fetching stock data, TensorFlow for the predictive model, sklearn for data preprocessing\\\"\\n}\"", "description": "tool development"}
{"input persona": "A coastal community organization fighting against offshore drilling", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sea Noise Level Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the path to an audio file recorded from the ocean and returns a spectrogram showing the noise level of the sea.\\\",\\n\\\"function_name\\\": \\\"analyze_sea_noise\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"A spectrogram visualizing the noise level of the sea.\\\",\\n\\\"depend\\\": \\\"Python libraries: librosa, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "a tourist visiting Hangzhou for the first time and interested in using public transportation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Public Transportation Route Planner Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Baidu Map API to provide public transit search services. It helps users figure out the best way to travel from one location to another by public transport in Hangzhou.\\\",\\n\\\"function_name\\\": \\\"get_public_transit_route\\\",\\n\\\"input_args\\\": {\\n    \\\"start_location\\\": \\\"The location where the journey begins.\\\",\\n    \\\"end_location\\\": \\\"The destination of the journey.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"duration\\\": \\\"The total travel time in seconds.\\\",\\n    \\\"instructions\\\": \\\"Step-by-step instructions for the entire journey.\\\"\\n},\\n\\\"depend\\\": \\\"Baidu Map API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A generous donor who is passionate about supporting STEM education and providing technology resources to schools", "synthesized text": "\"{\\n\\\"name\\\": \\\"Schools Technology Grant Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to find STEM projects in need of funding in a specific state within their donation budget. The data is pulled from the DonorsChoose API.\\\",\\n\\\"function_name\\\": \\\"get_stem_projects\\\",\\n\\\"input_args\\\": {\\\"donation_amount\\\": \\\"The amount the user wants to donate.\\\", \\\"state\\\": \\\"The state where the user wants to support schools.\\\"},\\n\\\"return\\\": \\\"A list of titles of STEM projects that need funding in the specific state within the user's donation budget.\\\",\\n\\\"depend\\\": {\\\"API\\\": \\\"DonorsChoose API\\\", \\\"Python Library\\\": \\\"requests\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A married individual seeking advice on whether to pursue a legal separation or try therapy first", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Marriage Decision Support Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to predict the probability of a positive outcome for each option (legal separation or therapy) based on the user's situation.\\\",\\n  \\\"function_name\\\": \\\"predict_outcome\\\",\\n  \\\"input_args\\\": {\\n    \\\"details\\\": \\\"A string detailing the user's situation.\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary with keys 'separation' and 'therapy', each associated with a predicted outcome.\\\",\\n  \\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cultural ambassador who organizes African heritage festivals in European cities", "synthesized text": "\"{\\n\\\"name\\\": \\\"African Music Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze African music using Spotify's Web API. It provides insights like average danceability, energy, tempo, etc., of the given tracks.\\\",\\n\\\"function_name\\\": \\\"analyze_african_music\\\",\\n\\\"input_args\\\": \\\"track_ids - A list of Spotify track IDs.\\\",\\n\\\"return\\\": \\\"A dictionary containing the descriptive statistics (mean, std, min, 25%, 50%, 75%, max) of various audio features of the tracks.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas; Web API: Spotify\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local environmental activist in South Kivu Province, DRC.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Monitoring Interface\\\", \\n\\\"description\\\": \\\"This interface provides the latest air quality data for a specified location using the OpenAQ API.\\\", \\n\\\"function_name\\\": \\\"get_air_quality\\\", \\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"}, \\n\\\"return\\\": {\\\"pm25\\\": \\\"float\\\", \\\"pm10\\\": \\\"float\\\", \\\"o3\\\": \\\"float\\\", \\\"no2\\\": \\\"float\\\", \\\"so2\\\": \\\"float\\\", \\\"co\\\": \\\"float\\\"}, \\n\\\"depend\\\": \\\"OpenAQ API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The Director of Energy Policy within the European Union, monitoring harmonized energy policies among member states", "synthesized text": "\"{\\n\\\"name\\\": \\\"Energy Policy Harmonization Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch and analyze energy data from different EU countries, allowing to monitor and compare energy policies across the member states.\\\",\\n\\\"function_name\\\": \\\"analyze_harmonization\\\",\\n\\\"input_args\\\": \\\"year\\\",\\n\\\"return\\\": \\\"A dataframe containing harmonized energy data from all EU countries in the specified year.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas. Web APIs: Eurostat API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software company that provides animation software and support to the YouTuber", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Thumbnail Generation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a deep learning model to extract key frames from a video and generate a thumbnail.\\\",\\n\\\"function_name\\\": \\\"generate_thumbnail\\\",\\n\\\"input_args\\\": [\\\"path_to_video\\\"],\\n\\\"return\\\": \\\"An instance of PIL.Image representing the thumbnail for the video.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"PIL\\\"], \\\"machine learning models\\\": [\\\"https://tfhub.dev/deepmind/mil-nce/s3d/1\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I'm a car enthusiast with a special fondness for SUVs.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car Model Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Edmunds API to recommend SUV models based on user-specified criteria such as price range, MPG, and brand.\\\",\\n\\\"function_name\\\": \\\"get_suv_recommendations\\\",\\n\\\"input_args\\\": [\\\"price_range\\\", \\\"mpg\\\", \\\"brand\\\"],\\n\\\"return\\\": [\\\"list of recommended SUV models\\\"],\\n\\\"depend\\\": \\\"Edmunds API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ambitious undergrad studying communication who balances their academic work with running a popular meme page", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meme Generation Interface\\\",\\n\\\"description\\\": \\\"This interface uses GPT-3 to generate captions for memes. The user only needs to input the context or the idea they want the meme to convey, and our interface will return a suitable caption for a meme.\\\",\\n\\\"function_name\\\": \\\"generate_meme_caption\\\",\\n\\\"input_args\\\": \\\"context - a string that describes the context or idea for the meme\\\",\\n\\\"return\\\": \\\"A string that can be used as a caption for a meme based on the provided context.\\\",\\n\\\"depend\\\": \\\"GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A food connoisseur residing in the Canary Islands", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Recommendation Interface\\\", \\n\\\"description\\\": \\\"This interface takes a user's food preferences as input and returns a list of recommended recipes.\\\", \\n\\\"function_name\\\": \\\"get_recipe_recommendations\\\", \\n\\\"input_args\\\": \\n    {\\n    \\\"food_preferences\\\": \\\"A string that describes the user's food preferences.\\\"\\n    }, \\n\\\"return\\\": \\\"A list of the top 10 recommended recipes based on the user's food preferences.\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a person who doesn't have any knowledge in BDSM or mathematics.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Math Formula Explanation Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies and solves complex math formulas provided as strings. It uses the SymPy library to parse, simplify, expand and solve the formulas.\\\",\\n\\\"function_name\\\": [\\\"simplify_math_formula\\\", \\\"solve_equation\\\"],\\n\\\"input_args\\\": [\\\"formula_str\\\", \\\"equation_str\\\"],\\n\\\"return\\\": [\\\"{'original': formula_str, 'simplified': str(simplified_formula), 'expanded': str(expanded_formula)}\\\", \\\"{'equation': equation_str, 'solution': str(solutions)}\\\"],\\n\\\"depend\\\": [\\\"SymPy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a Tanzanian student studying telecommunications in college.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Network Latency Measurement Interface\\\",\\n    \\\"description\\\": \\\"An interface to measure the round-trip time (RTT) from the user to a specific server. Useful for network troubleshooting and performance optimization.\\\",\\n    \\\"function_name\\\": \\\"measure_rtt\\\",\\n    \\\"input_args\\\": {\\n        \\\"server_hostname\\\": \\\"The hostname of the server to measure RTT to.\\\",\\n        \\\"port\\\": \\\"The port to connect to on the server. Default is 80.\\\",\\n        \\\"count\\\": \\\"The number of times to measure the RTT. Default is 4.\\\"\\n    },\\n    \\\"return\\\": \\\"The average RTT to the server in seconds. Returns None if all connection attempts fail.\\\",\\n    \\\"depend\\\": \\\"Python's socket and time libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professor of toxicology who is skeptical about the purported shift in the field toward mechanistic toxicology.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Toxic Substance Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches detailed information about a toxic substance using the PubChem API. The user only needs to input the name of the substance.\\\",\\n\\\"function_name\\\": \\\"get_substance_info\\\",\\n\\\"input_args\\\": [\\\"substance_name\\\"],\\n\\\"return\\\": {\\\"properties\\\": \\\"object\\\", \\\"hazards\\\": \\\"object\\\", \\\"safety measures\\\": \\\"object\\\", \\\"related literature\\\": \\\"object\\\"},\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python library\\\", \\\"PubChem API\\\": \\\"Web API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "a wellness expert who thinks there's a 'right' and a 'wrong' way to detox", "synthesized text": "\"{\\n\\\"name\\\": \\\"Detox Plan Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a user's current diet, allergies, and preferences, and returns a personalized detox plan using a pre-trained model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"get_detox_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"current_diet\\\": \\\"A string representing the current diet of the user\\\",\\n    \\\"allergies\\\": \\\"A string representing any allergies the user has\\\",\\n    \\\"preferences\\\": \\\"A string representing the user's dietary preferences\\\"\\n},\\n\\\"return\\\": \\\"A string representing a personalized detox plan\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A theoretical physicist who sees unsolvable problems as opportunities for innovative thinking", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum Circuit Simulator Interface\\\",\\n\\\"description\\\": \\\"This interface simulates a quantum circuit and returns the counts of the qubit measurement results.\\\",\\n\\\"function_name\\\": \\\"simulate_quantum_circuit\\\",\\n\\\"input_args\\\": {\\\"qc\\\": \\\"A QuantumCircuit object representing the quantum circuit to be simulated.\\\"},\\n\\\"return\\\": \\\"A dictionary where the keys represent possible qubit states and the values represent the counts of these states in the simulation results.\\\",\\n\\\"depend\\\": \\\"This interface leverages the Qiskit Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced editor specialized in academic writing, familiar with dissertation requirements", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Plagiarism Check Interface\\\",\\n  \\\"description\\\": \\\"An interface that takes in the path of a document file and returns the plagiarism check results including the percentage of plagiarism detected and the potential sources of plagiarism if any.\\\",\\n  \\\"function_name\\\": \\\"check_plagiarism\\\",\\n  \\\"input_args\\\": \\\"document_path\\\",\\n  \\\"return\\\": {\\\"plagiarism_detected\\\": \\\"percentage of plagiarism detected\\\", \\\"potential_sources\\\": \\\"potential sources of plagiarism\\\"},\\n  \\\"depend\\\": [\\\"pycopyleaks library (Python wrapper for the Copyleaks API)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a beginner in Forex trading still learning the ropes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Pair Correlation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OANDA API to retrieve current prices of different currency pairs and then calculates the correlation coefficients between these currency pairs. This information helps a beginner in Forex trading to understand the relationships between different currency pairs and to develop a trading strategy.\\\",\\n\\\"function_name\\\": \\\"get_currency_pair_correlation\\\",\\n\\\"input_args\\\": {\\n  \\\"currency_pairs\\\": \\\"A list of currency pairs in the format 'Currency1_Currency2', e.g., ['EUR_USD', 'GBP_USD', 'AUD_USD']\\\"\\n},\\n\\\"return\\\": \\\"A pandas DataFrame showing the correlation coefficients between the input currency pairs.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, pandas; Web APIs: OANDA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一个拥有强烈民族自豪感的英国自行车俱乐部经理。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u81ea\\u884c\\u8f66\\u8def\\u7ebf\\u89c4\\u5212\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u8fd9\\u4e2a\\u63a5\\u53e3\\u4f7f\\u7528Google Maps\\u7684Directions API\\uff0c\\u7528\\u6237\\u53ea\\u9700\\u8981\\u8f93\\u5165\\u8d77\\u70b9\\u548c\\u7ec8\\u70b9\\uff0c\\u63a5\\u53e3\\u5c31\\u4f1a\\u8fd4\\u56de\\u4e00\\u6761\\u9002\\u5408\\u9a91\\u81ea\\u884c\\u8f66\\u7684\\u8def\\u7ebf\\u3002\\\",\\n\\\"function_name\\\": \\\"get_bike_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"\\u4e00\\u6761\\u9002\\u5408\\u9a91\\u81ea\\u884c\\u8f66\\u7684\\u8def\\u7ebf\\uff08\\u4e00\\u4e2a\\u5305\\u542b\\u8bb8\\u591a\\u70b9\\u7684Polyline\\uff09\\uff0c\\u5982\\u679c\\u627e\\u4e0d\\u5230\\u9002\\u5408\\u7684\\u8def\\u7ebf\\uff0c\\u5219\\u8fd4\\u56de'No suitable bike route found.'\\u3002\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young adult who has recently been released from prison and is struggling to adjust to life outside", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Opening Search Interface\\\",\\n\\\"description\\\": \\\"An interface that uses job search platforms APIs to provide a list of job openings based on user's location and desired job role\\\",\\n\\\"function_name\\\": \\\"get_job_openings\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"job_role\\\"],\\n\\\"return\\\": \\\"List of job openings\\\",\\n\\\"depend\\\": \\\"requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A technology consultant seeking guidance on implementing BIML in their organization's data infrastructure", "synthesized text": "\"{\\n\\\"name\\\": \\\"BIML Code Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a BIML (Business Intelligence Markup Language) script for creating an SSIS package to transfer data from a source table to a target table in a different database.\\\",\\n\\\"function_name\\\": \\\"generate_biml_script\\\",\\n\\\"input_args\\\": [\\\"source_db\\\", \\\"source_table\\\", \\\"target_db\\\", \\\"target_table\\\"],\\n\\\"return\\\": \\\"BIML script as a string\\\",\\n\\\"depend\\\": \\\"Python's xml library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a resident of the slightly larger neighbouring town of Zuidhorn", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get the current weather forecast for their town. It uses the OpenWeatherMap API to fetch this data.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\n    \\\"town\\\": \\\"The name of the town for which the user wants to get the weather forecast.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"description\\\": \\\"A brief description of the current weather conditions.\\\",\\n    \\\"temperature\\\": \\\"The current temperature in Kelvin.\\\",\\n    \\\"humidity\\\": \\\"The current humidity percentage.\\\",\\n    \\\"wind_speed\\\": \\\"The current wind speed in meter/sec.\\\"\\n},\\n\\\"depend\\\": [\\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mortgage broker who provides valuable insights on financing options for luxury property buyers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mortgage Rate Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface fetches and compares the latest mortgage rates from different lenders. Users need to input the loan amount, loan term, and type of loan (fixed or variable), and the interface will return a comparison of mortgage rates.\\\",\\n\\\"function_name\\\": \\\"get_mortgage_rate_comparison\\\",\\n\\\"input_args\\\": {\\\"loan_amount\\\": \\\"loan amount in dollars\\\", \\\"loan_term\\\": \\\"loan term in years\\\", \\\"loan_type\\\": \\\"type of loan (fixed or variable)\\\"},\\n\\\"return\\\": {\\\"lender1\\\": \\\"rate1\\\", \\\"lender2\\\": \\\"rate2\\\", ...},\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python library for making HTTP requests\\\"}\\n}\"", "description": "tool development"}
{"input persona": "I am a young PhD candidate in physics who has heard of Jagodzinski's theories in her studies.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mathematical Equation Solver Interface\\\",\\n\\\"description\\\": \\\"This interface wraps SymPy, a Python library for symbolic mathematics, to provide an easy way to solve mathematical equations.\\\",\\n\\\"function_name\\\": \\\"solve_equation\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"equation\\\": \\\"A string representing the mathematical equation to solve. The equation should be arranged such that all terms are on one side and it equals zero on the other side.\\\",\\n    \\\"variable\\\": \\\"The variable to solve for.\\\"\\n    },\\n\\\"return\\\": \\\"A list of solutions to the equation.\\\",\\n\\\"depend\\\": \\\"This function leverages the SymPy Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film journalist covering international film festivals and niche genres", "synthesized text": "\"{\\n\\\"name\\\": \\\"Subtitle Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates film subtitles from one language to another using the OpenAI API.\\\",\\n\\\"function_name\\\": \\\"translate_subtitles\\\",\\n\\\"input_args\\\": [\\\"subtitles\\\", \\\"target_language\\\"],\\n\\\"return\\\": \\\"Translated subtitles\\\",\\n\\\"depend\\\": \\\"huggingface/transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired couple from France who recently purchased a residential property and seeks guidance from the property manager on local regulations and property management practices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Regulation Search Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes data from local government or real estate websites to get information on local regulations and property management practices. The user only needs to input their property location, and the interface will return the relevant regulations and practices.\\\",\\n\\\"function_name\\\": \\\"get_property_regulations\\\",\\n\\\"input_args\\\": \\\"location\\\",\\n\\\"return\\\": \\\"A list of strings, each string being a regulation or a practice relevant to the property.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history major interning at the museum and learning from the curator's expertise", "synthesized text": "\"{\\n\\\"name\\\": \\\"Artwork Identification Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Vision API to identify objects in an image. Useful for identifying artworks or historical artifacts.\\\", \\n\\\"function_name\\\": \\\"identify_artwork\\\", \\n\\\"input_args\\\": [\\\"path_to_image\\\"], \\n\\\"return\\\": [\\\"List of identified objects in the image\\\"], \\n\\\"depend\\\": [\\\"Google Vision API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local community resident and long-time supporter of the 1st Burnmoor Scout Group", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Reminder Interface\\\",\\n\\\"description\\\": \\\"An interface to help users set reminders for upcoming Scout Group events. It creates an event in the user's Google Calendar and sets a reminder.\\\",\\n\\\"function_name\\\": \\\"add_scout_event_to_calendar\\\",\\n\\\"input_args\\\": {\\n    \\\"event_name\\\": \\\"The name of the event (a string)\\\",\\n    \\\"event_date\\\": \\\"The date of the event (in 'mm-dd-yyyy' format)\\\",\\n    \\\"event_time\\\": \\\"The time of the event (in 24-hour 'HH:MM' format)\\\"\\n},\\n\\\"return\\\": \\\"A string confirming that the event has been created, along with a link to the event on Google Calendar.\\\",\\n\\\"depend\\\": \\\"Google Calendar API, Python's built-in datetime and pytz modules\\\"\\n}\"", "description": "tool development"}
{"input persona": "A leather goods artisan who struggles to balance their craft with their partner's beliefs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sustainable Material Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface provides suggestions for sustainable materials that can be used as a replacement for leather in crafting various items. It takes as input the type of item being crafted (wallet, belt, bag, etc.) and returns a list of sustainable materials suitable for crafting that item.\\\",\\n\\\"function_name\\\": \\\"get_sustainable_materials\\\",\\n\\\"input_args\\\": [\\\"item_type\\\"],\\n\\\"return\\\": \\\"List of sustainable materials\\\",\\n\\\"depend\\\": \\\"Web API from sustainablematerials.com\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fan of Luk thung music who admires successful artists transitioning into politics", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Artist Music Analytics Interface\\\",\\n  \\\"description\\\": \\\"Retrieves comprehensive music data for a given artist, including their albums, top tracks, and related artists, from Spotify.\\\",\\n  \\\"function_name\\\": \\\"get_artist_data\\\",\\n  \\\"input_args\\\": \\\"artist_id\\\",\\n  \\\"return\\\": \\\"A dictionary containing lists of the artist's albums, top tracks, and artists related to them.\\\",\\n  \\\"depend\\\": \\\"Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another AI language model trained on different genres, providing diverse perspectives and genres for the story ideas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Story Idea Generator Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained GPT-3 model to generate story ideas based on a given genre and prompt.\\\",\\n\\\"function_name\\\": \\\"generate_story_idea\\\",\\n\\\"input_args\\\": {\\n    \\\"genre\\\": \\\"The genre of the story idea to be generated.\\\",\\n    \\\"prompt\\\": \\\"A prompt to guide the generation of the story idea.\\\"\\n},\\n\\\"return\\\": \\\"A generated story idea.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A homeowner who is in need of an immediate garage door replacement due to a malfunction", "synthesized text": "\"{\\n\\\"name\\\": \\\"Garage Door Replacement Cost Estimator Interface\\\",\\n\\\"description\\\": \\\"This interface uses multiple web APIs to estimate the cost of replacing a garage door. It takes into account the user's location to find local price averages, the dimensions of the garage door, and the material the user wants to use for the replacement.\\\",\\n\\\"function_name\\\": \\\"estimate_garage_door_replacement_cost\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"width\\\", \\\"height\\\", \\\"material\\\"],\\n\\\"return\\\": \\\"Estimated cost of garage door replacement\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"priceaverage.com API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Middle-aged, male, long-time resident of the Village of Hopkins and a former members of the council.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Council Meeting Minutes Fetcher\\\",\\n\\\"description\\\": \\\"An interface to fetch council meeting minutes from the Village of Hopkins Government's API. Returns the minutes for a specified year and month.\\\",\\n\\\"function_name\\\": \\\"get_council_minutes\\\",\\n\\\"input_args\\\": {\\\"year\\\": \\\"The year for which the meeting minutes are needed (integer)\\\",\\n               \\\"month\\\": \\\"The month for which the meeting minutes are needed (integer)\\\"},\\n\\\"return\\\": \\\"The minutes of the council meeting for the specified year and month (string)\\\",\\n\\\"depend\\\": \\\"requests library, Hopkins Village Government's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A certified Ayurvedic practitioner who guides them in understanding and implementing Ayurvedic principles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ayurvedic Diet Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to predict a person's Ayurvedic dosha based on their characteristics and provides a diet recommendation accordingly.\\\",\\n\\\"function_name\\\": \\\"get_diet_recommendation\\\",\\n\\\"input_args\\\": [\\\"height\\\", \\\"weight\\\", \\\"skin_type\\\", \\\"hair_type\\\", \\\"digestion\\\", \\\"sleep_pattern\\\"],\\n\\\"return\\\": \\\"A string containing the diet recommendation according to the predicted dosha.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\", \\\"dosha_model.pkl\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A frustrated web developer who has dealt with this same issue of SharePoint business connectivity services (BCS)", "synthesized text": "\"{\\n\\\"name\\\": \\\"SharePoint BCS Connection Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that encapsulates the SharePoint BCS connection process. Users input their SharePoint site URL, BCS name, username, and password, and the interface will return a connection object to the BCS, simplifying the connection process which usually troubles developers.\\\",\\n\\\"function_name\\\": \\\"connect_to_sharepoint_bcs\\\",\\n\\\"input_args\\\": {\\n  \\\"site_url\\\": \\\"The SharePoint site URL\\\",\\n  \\\"bcs_name\\\": \\\"The name of the BCS\\\",\\n  \\\"username\\\": \\\"The user's username\\\",\\n  \\\"password\\\": \\\"The user's password\\\"\\n},\\n\\\"return\\\": \\\"A connection object to the Business Connectivity Services (BCS).\\\",\\n\\\"depend\\\": \\\"SharePlum Python library, SharePoint BCS\\\"\\n}\"", "description": "tool development"}
{"input persona": "A farmer who uses diesel-powered machinery for agricultural operations on their land", "synthesized text": "\"{\\n\\\"name\\\": \\\"Diesel Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained LSTM model to predict the diesel prices for the next few days. The user needs to input the file path to the historical diesel price data, and the interface will return the predicted diesel prices.\\\",\\n\\\"function_name\\\": \\\"predict_diesel_prices\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"string\\\"\\n},\\n\\\"return\\\": \\\"numpy array\\\",\\n\\\"depend\\\": \\\"pandas, sklearn, keras\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个兴趣广泛但并不了解羽毛球运动的音乐老师", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u7fbd\\u6bdb\\u7403\\u6bd4\\u8d5b\\u7edf\\u8ba1\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u63d0\\u4f9b\\u4e00\\u573a\\u7279\\u5b9a\\u7fbd\\u6bdb\\u7403\\u6bd4\\u8d5b\\u7684\\u8be6\\u7ec6\\u7edf\\u8ba1\\u6570\\u636e\\\",\\n\\\"function_name\\\": \\\"get_badminton_match_stats\\\",\\n\\\"input_args\\\": \\\"match_name\\\",\\n\\\"return\\\": \\\"\\u4e00\\u4e2a\\u5305\\u542b\\u6bd4\\u8d5b\\u7edf\\u8ba1\\u6570\\u636e\\u7684\\u5b57\\u5178\\\",\\n\\\"depend\\\": \\\"requests\\u5e93\\uff0c\\u641c\\u72d0\\u4f53\\u80b2API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hesitant male physical therapist who is considerate but not good with changes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physical Therapy Session Planner Interface\\\", \\n\\\"description\\\": \\\"This interface predicts the effectiveness of various exercises for the patient based on their medical history and physical condition, and recommends a set of exercises.\\\", \\n\\\"function_name\\\": \\\"plan_physical_therapy_session\\\", \\n\\\"input_args\\\": {\\\"medical_history\\\": \\\"A string representing the patient's medical history.\\\", \\n\\\"physical_condition\\\": \\\"A string representing the patient's current physical condition.\\\"}, \\n\\\"return\\\": {\\\"recommended_exercises\\\": \\\"A list of strings, each string representing a recommended exercise.\\\"}, \\n\\\"depend\\\": {\\\"tensorflow\\\": \\\"A Python library for fast numerical computing created and released by Google.\\\"}\\n}\"", "description": "tool development"}
{"input persona": "The owner of a radio equipment store providing insights on the economic impact of regulations for amateur radio operators", "synthesized text": "\"{\\n\\\"name\\\": \\\"Radio Regulations Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes the impact of regulations on the sales of radio equipment. It takes in a CSV file with data about radio operators, their equipment purchases, and whether the purchase was made after a new regulation was implemented. It then calculates and plots the total sales before and after the regulation, and returns the percentage impact of the regulation on sales.\\\",\\n\\\"function_name\\\": \\\"analyze_regulation_impact\\\",\\n\\\"input_args\\\": [\\\"data_file\\\"],\\n\\\"return\\\": \\\"A dictionary with the 'Impact (%)', 'Before Regulation Sales' and 'After Regulation Sales'\\\",\\n\\\"depend\\\": [\\\"Python's pandas, numpy and matplotlib libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Radiohead fan who loves their music but doesn't know much about film and was surprised to learn that Jonny Greenwood composed movie scores", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Score Search Interface\\\",\\n\\\"description\\\": \\\"An interface to find the movies for which a given composer has composed the score.\\\",\\n\\\"function_name\\\": \\\"get_movies_by_composer\\\",\\n\\\"input_args\\\": \\\"composer_name\\\",\\n\\\"return\\\": \\\"List of movie names\\\",\\n\\\"depend\\\": \\\"OMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A leading banker at a multinational bank managing cross-border transactions and adhering to international banking laws", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface to convert an amount from one currency to another using the Open Exchange Rates API.\\\",\\n\\\"function_name\\\": \\\"convert_currency\\\",\\n\\\"input_args\\\": [\\\"amount\\\", \\\"from_currency\\\", \\\"to_currency\\\"],\\n\\\"return\\\": \\\"The amount converted into the desired currency.\\\",\\n\\\"depend\\\": \\\"requests library, Open Exchange Rates API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Italian food lover just moved to Portland", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Restaurant Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches information about Italian restaurants in a given city using Yelp's Fusion API. It returns a list of recommended restaurants along with their ratings.\\\",\\n  \\\"function_name\\\": \\\"get_restaurant_recommendations\\\",\\n  \\\"input_args\\\": {\\n    \\\"cuisine\\\": \\\"Type of cuisine (e.g., Italian)\\\",\\n    \\\"city\\\": \\\"City name (e.g., Portland)\\\"\\n  },\\n  \\\"return\\\": \\\"List of dictionaries, each containing the 'name' and 'rating' of a restaurant\\\",\\n  \\\"depend\\\": \\\"Yelp Fusion API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data scientist who specializes in analyzing and optimizing MySQL databases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Query Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface that connects to a MySQL database, receives a query, and returns an optimized version of the query.\\\",\\n\\\"function_name\\\": \\\"optimize_query\\\",\\n\\\"input_args\\\": {\\n    \\\"host\\\": \\\"The hostname of the MySQL server\\\",\\n    \\\"user\\\": \\\"The username to connect to the MySQL server\\\",\\n    \\\"password\\\": \\\"The password to connect to the MySQL server\\\",\\n    \\\"database\\\": \\\"The database name to connect to on the MySQL server\\\",\\n    \\\"query\\\": \\\"The SQL query to optimize\\\"\\n},\\n\\\"return\\\": \\\"A dictionary representing the optimized SQL query\\\",\\n\\\"depend\\\": [\\\"mysql.connector\\\", \\\"pymysql.cursors\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young researcher fascinated by the intersections of folklore and psychology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Folktales Classification Interface\\\",\\n\\\"description\\\": \\\"This module classifies a folktale based on its psychological aspects using a pre-trained BERT model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"classify_folktale\\\",\\n\\\"input_args\\\": \\\"folktale - A string containing the folktale to be classified\\\",\\n\\\"return\\\": \\\"A string classifying the folktale as 'Positive' or 'Negative' based on its psychological aspects.\\\",\\n\\\"depend\\\": \\\"This function depends on the transformers and tensorflow python libraries, specifically the BertTokenizer, TFBertForSequenceClassification classes and a pre-trained BERT model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A game developer creating a space-themed game and wants to incorporate realistic astrophysics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Astrophysics Interface\\\",\\n\\\"description\\\": \\\"This interface uses the NASA's API to provide information about celestial bodies. It returns the body's name, a description, and a URL to an image of it.\\\",\\n\\\"function_name\\\": \\\"get_celestial_body_info\\\",\\n\\\"input_args\\\": \\\"body_name - The name of the celestial body\\\",\\n\\\"return\\\": \\\"A dictionary containing the celestial body's name, a description of it, and a URL to an image of it.\\\",\\n\\\"depend\\\": \\\"NASA's API and Python's requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young couple starting their first garden and seeking advice on plant care", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant Care Advice Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Trefle API to provide users with care instructions for a specific plant, including watering needs, growth period, soil needs, light needs, temperature needs, and humidity needs. Users only need to input the name of the plant.\\\",\\n\\\"function_name\\\": \\\"get_plant_care_info\\\",\\n\\\"input_args\\\": [\\\"plant_name\\\"],\\n\\\"return\\\": \\\"A dictionary containing care information about the plant, including its name, scientific name, growth period, watering needs, soil needs, light needs, temperature needs, and humidity needs.\\\",\\n\\\"depend\\\": \\\"Python's requests library, Trefle API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a loyal Chick-fil-A employee working part-time while nursing dreams to continue her higher education.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scholarship Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Scholarships.com API to provide a list of available scholarships based on a specified field of study.\\\",\\n\\\"function_name\\\": \\\"get_scholarships\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"field_of_study\\\": \\\"The desired field of study for which the user wants to find scholarships.\\\"\\n    },\\n\\\"return\\\": \\n    {\\n    \\\"scholarships\\\": \\\"A list of dictionaries, each containing information about a scholarship, including its name, amount, deadline, and a URL for more information.\\\"\\n    },\\n\\\"depend\\\": \\\"Web API (Scholarships.com)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diplomat who emphasizes preserving national heritage and improving global understanding of Cyprus's history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cultural Heritage Information Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves information about a specific cultural heritage item from Cyprus using the Europeana APIs.\\\",\\n\\\"function_name\\\": \\\"get_cultural_heritage_info\\\",\\n\\\"input_args\\\": \\\"item_name - the name of the cultural heritage item\\\",\\n\\\"return\\\": \\\"Title, link, and description of the cultural heritage item\\\",\\n\\\"depend\\\": \\\"Europeana APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A psychology major who wants to revamp the club's website to attract more members", "synthesized text": "\"{\\n\\\"name\\\": \\\"Website SEO Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to generate SEO-friendly content for the meta tags of a website, which can help attract more visitors.\\\",\\n\\\"function_name\\\": \\\"optimize_website_seo\\\",\\n\\\"input_args\\\": \\\"url - The URL of the website\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are the names of the meta tags and the values are the new SEO-friendly content.\\\",\\n\\\"depend\\\": \\\"Python libraries: BeautifulSoup, requests, transformers; Machine learning model: GPT-3 from Hugging Face\\\"\\n}\"", "description": "tool development"}
{"input persona": "ein Reiseführer, der sich auf spirituelle Touren in Rom spezialisiert hat", "synthesized text": "\"{\\n\\\"name\\\": \\\"Monastery Visit Planner Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a list of monasteries near the user's current location using the Google Places API.\\\",\\n\\\"function_name\\\": \\\"get_nearby_monasteries\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"A string of the user's current geocoordinates in the form 'latitude,longitude'\\\"\\n},\\n\\\"return\\\": \\\"A list of nearby monasteries.\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Malaysian local sports journalist reflecting on the country's participation in winter sports", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Olympic Medal Count Interface\\\",\\n  \\\"description\\\": \\\"Fetches the total number of medals won by a country in Winter Olympics.\\\",\\n  \\\"function_name\\\": \\\"get_winter_olympics_medals\\\",\\n  \\\"input_args\\\": {\\\"country\\\": \\\"The name of the country.\\\"},\\n  \\\"return\\\": \\\"The total number of medals won by the country in Winter Olympics.\\\",\\n  \\\"depend\\\": \\\"Olympics API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a freshman field hockey player at Wayne Hills High School", "synthesized text": "\"{\\n\\\"name\\\": \\\"Workout Plan Generation Interface\\\",\\n\\\"description\\\": \\\"Generates a personalized workout plan based on the user's experience level, the specific sport they're training for, and the number of days per week they're available to train.\\\",\\n\\\"function_name\\\": \\\"generate_workout_plan\\\",\\n\\\"input_args\\\": [\\\"experience_level\\\", \\\"sport\\\", \\\"training_days_per_week\\\"],\\n\\\"return\\\": \\\"A personalized workout plan\\\",\\n\\\"depend\\\": \\\"Python (Gym, Numpy), Pre-trained Gym Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired engineer who lives in Bristol and frequently used the Gaol Ferry Bridge.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bridge Traffic Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the traffic on a bridge at a given time based on historical traffic data.\\\",\\n\\\"function_name\\\": \\\"predict_traffic\\\",\\n\\\"input_args\\\": \\\"date_time - The date and time for which the user wants to predict the traffic.\\\",\\n\\\"return\\\": \\\"A prediction of the traffic on the bridge at the specified time.\\\",\\n\\\"depend\\\": \\\"TensorFlow, pandas, numpy, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Sri Lankan business person in heavy mineral sands industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mineral Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained Machine Learning model to predict the future price of a specific mineral.\\\",\\n\\\"function_name\\\": [\\\"train_model\\\", \\\"predict_mineral_price\\\"],\\n\\\"input_args\\\": [\\\"mineral_data_csv\\\", \\\"mineral\\\"],\\n\\\"return\\\": \\\"The future price of the specified mineral.\\\",\\n\\\"depend\\\": \\\"pandas, sklearn, pickle\\\"\\n}\"", "description": "tool development"}
{"input persona": "Dr. Sophia L. Turner, an accomplished economist specializing in international trade and economic development, with a passion for teaching and mentoring young researchers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Data Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve economic data from the World Bank's database. Users only need to specify the country and the indicator of interest, and the interface will return the relevant data.\\\",\\n\\\"function_name\\\": \\\"retrieve_economic_data\\\",\\n\\\"input_args\\\": [\\\"country\\\", \\\"indicator\\\"],\\n\\\"return\\\": \\\"Pandas DataFrame containing the requested data\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"pandas_datareader\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an Israeli tween who loves TikTok and idolizes Gidon Lev", "synthesized text": "\"{\\n\\\"name\\\": \\\"TikTok Video Downloader Interface\\\",\\n\\\"description\\\": \\\"An interface to download a TikTok video by providing TikTok video URL and the path to save the video on local device.\\\",\\n\\\"function_name\\\": \\\"download_tiktok_video\\\",\\n\\\"input_args\\\": {\\n    \\\"tiktok_url\\\": \\\"URL of the TikTok video to download\\\",\\n    \\\"save_path\\\": \\\"Path where the downloaded video should be saved\\\"\\n  },\\n\\\"return\\\": \\\"A string indicating the path where the video has been saved.\\\",\\n\\\"depend\\\": \\\"TikTokApi Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A legislative print clerk working in Ireland's Oireachtas, responsible for printing and preparing legislative documents", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legislative Document Formatting Interface\\\", \\n\\\"description\\\": \\\"This interface takes raw text of a legislative document and creates a Word document with the text formatted in Times New Roman, 12 point font. Paragraphs are automatically recognized and formatted correctly.\\\", \\n\\\"function_name\\\": \\\"create_legislative_document\\\", \\n\\\"input_args\\\": [\\\"raw_text\\\", \\\"output_file\\\"], \\n\\\"return\\\": \\\"A Word document with the input text, formatted according to legislative document standards.\\\", \\n\\\"depend\\\": \\\"Python's 'docx' library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Red Cross disaster relief specialist working in Southeast Asia.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-Time Disaster Information Interface\\\",\\n\\\"description\\\": \\\"An interface to get real-time information about recent earthquakes within a specified geographic area from the USGS Earthquake Hazards Program API.\\\",\\n\\\"function_name\\\": \\\"get_recent_earthquakes\\\",\\n\\\"input_args\\\": [\\\"min_latitude\\\", \\\"min_longitude\\\", \\\"max_latitude\\\", \\\"max_longitude\\\"],\\n\\\"return\\\": \\\"A list of dictionaries, each representing a recent earthquake and containing its magnitude, location, and time.\\\",\\n\\\"depend\\\": \\\"USGS Earthquake Hazards Program API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nosy neighbor from Uganda who loves community gossip.", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Aggregator Interface\\\",\\n\\\"description\\\": \\\"Aggregates the latest news articles from a list of given local news websites\\\",\\n\\\"function_name\\\": \\\"aggregate_news\\\",\\n\\\"input_args\\\": [\\\"urls\\\"],\\n\\\"return\\\": \\\"List of latest news articles\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An author who incorporates the medieval trade routes into their novels", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Trade Route Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about historical trade routes, such as its starting location, ending location, goods traded, and historical significance.\\\",\\n\\\"function_name\\\": \\\"get_trade_route_info\\\",\\n\\\"input_args\\\": {\\n    \\\"route_name\\\": \\\"The name of the trade route.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with keys 'Start Location', 'End Location', 'Goods Traded', 'Historical Significance' and their corresponding values. If no information is found, it returns a message saying so.\\\",\\n\\\"depend\\\": \\\"Web API: DBpedia SPARQL endpoint\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired Australian theatre director who values cultural heritage and environmental conservation.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Cultural Heritage Site Information Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches information about UNESCO's world heritage sites in a specific country. The user inputs the name of the country and gets a list of world heritage sites in return.\\\",\\n  \\\"function_name\\\": \\\"get_world_heritage_sites\\\",\\n  \\\"input_args\\\": {\\\"country\\\": \\\"The name of the country (string)\\\"},\\n  \\\"return\\\": \\\"A list of world heritage sites (list of strings)\\\",\\n  \\\"depend\\\": \\\"Python's requests library and the World Heritage Site API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner in a rural town prone to power outages.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Power Outage Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the likelihood of a power outage in the specified location within the next 24 hours, based on current weather data and a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_power_outage\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"The likelihood of a power outage in the next 24 hours, represented as a number between 0 (no chance of an outage) and 1 (certain outage)\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"requests\\\", \\\"weatherapi.com\\\", \\\"pre-trained machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Jack Hagerman, Vice President of Outreach & Communications at Pasadena Humane Society & SPCA, who is passionate about animal welfare and education.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Adoption Interface\\\",\\n\\\"description\\\": \\\"Provides a list of adoptable pets based on location and animal type\\\",\\n\\\"function_name\\\": \\\"get_adoptable_pets\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"animal_type\\\"],\\n\\\"return\\\": \\\"List of dictionaries, where each dictionary contains the name, breed, age, and gender of a pet, and a link to a photo of the pet\\\",\\n\\\"depend\\\": \\\"Petfinder API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A historian specialized in industrial accidents with a high sensitivity to loss of human lives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Accident Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface extracts important details about industrial accidents such as location, time, cause, number of casualties from a given text.\\\",\\n\\\"function_name\\\": \\\"extract_accident_info\\\", \\n\\\"input_args\\\": \\\"text\\\", \\n\\\"return\\\": \\\"Dictionary containing the location, date, number of lives lost, and causes of the accident\\\", \\n\\\"depend\\\": \\\"Spacy, en_core_web_sm\\\"\\n}\"", "description": "tool development"}
{"input persona": "A determinist philosopher who asserts that all human actions are predetermined", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Simplification Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies complex text into simpler language. It is ideal for users who struggle with understanding complex philosophical, scientific, or legal language.\\\",\\n\\\"function_name\\\": \\\"simplify_text\\\",\\n\\\"input_args\\\": [\\\"complex_text\\\"],\\n\\\"return\\\": \\\"simplified_text\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library (T5 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A linguist fascinated by semantic structure both in human languages and coding languages", "synthesized text": "\"{\\n\\\"name\\\": \\\"Syntax Highlighting Interface\\\",\\n\\\"description\\\": \\\"This interface highlights the syntax of a given piece of code in a specified programming language. It uses the Pygments library to support a wide variety of languages.\\\",\\n\\\"function_name\\\": \\\"syntax_highlighting\\\",\\n\\\"input_args\\\": [\\\"code_string\\\", \\\"language\\\"],\\n\\\"return\\\": \\\"A string of HTML that represents the input code with syntax highlighting.\\\",\\n\\\"depend\\\": {\\\"Python library\\\": [\\\"pygments\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A creative writer who turns to their tech-savvy buddy for help with managing their blog on a Linux server", "synthesized text": "\"{\\n\\\"name\\\": \\\"Remote Blog Post Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that connects to a remote Linux server via SSH and creates a new blog post.\\\",\\n\\\"function_name\\\": \\\"post_blog_via_ssh\\\",\\n\\\"input_args\\\": [\\\"server_ip\\\", \\\"username\\\", \\\"password\\\", \\\"blog_title\\\", \\\"blog_content\\\"],\\n\\\"return\\\": \\\"None. The function operates on the server and does not return any value. However, it will raise an exception if there are any SSH connection issues.\\\",\\n\\\"depend\\\": \\\"Python's Paramiko library, which implements the SSHv2 protocol.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A vegetarian food blogger who, surprisingly, finds the hot dog stand's veggie hot dogs to be absolutely delicious", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vegetarian Food Ingredient Analyzer Interface\\\",\\n\\\"description\\\": \\\"This interface takes a list of food ingredients and returns a breakdown of the nutritional information and possible health benefits of the food item.\\\",\\n\\\"function_name\\\": \\\"get_nutritional_info\\\",\\n\\\"input_args\\\": [\\\"ingredients\\\"],\\n\\\"return\\\": \\\"A json object containing the nutritional information and possible health benefits of the food item.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Spoonacular's Food API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An insurance agent who offers discounts and incentives for homeowners with smart security systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Security Discount Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input the type of security system installed and the original insurance premium, and returns the discounted premium.\\\",\\n\\\"function_name\\\": \\\"calculate_discounted_premium\\\",\\n\\\"input_args\\\": {\\n    \\\"security_system\\\": \\\"Type of the security system, e.g., 'smart_lock', 'security_camera', 'alarm_system', 'full_system'\\\",\\n    \\\"original_premium\\\": \\\"The original insurance premium, e.g., 1000\\\"\\n},\\n\\\"return\\\": \\\"The discounted insurance premium, e.g., 750\\\",\\n\\\"depend\\\": \\\"Python built-in functionality\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nurse working in a Catholic hospital committed to providing quality care for all patients", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Health Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes patient health data to provide average age, gender distribution, and most common diagnosis.\\\",\\n\\\"function_name\\\": \\\"analyze_patient_data\\\",\\n\\\"input_args\\\": {\\\"data_file_path\\\": \\\"Path to the patient health data file\\\"},\\n\\\"return\\\": {\\\"Average Age\\\": \\\"average age of patients\\\", \\\"Gender Distribution\\\": \\\"percentage distribution of genders\\\", \\\"Most Common Diagnosis\\\": \\\"most common diagnosis among patients\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A die-hard Marvel Comics fan who prefers the original Steve Rogers' Captain America", "synthesized text": "\"{\\n\\\"name\\\": \\\"Comic Character Details Interface\\\", \\n\\\"description\\\": \\\"An interface to get details of a comic character using the Marvel Comics API.\\\", \\n\\\"function_name\\\": \\\"get_character_details\\\", \\n\\\"input_args\\\": \\\"character_name\\\", \\n\\\"return\\\": \\\"A dictionary containing the character's name, description, and a list of comics in which the character appears.\\\", \\n\\\"depend\\\": \\\"requests, hashlib, time, Marvel Comics API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an old-school Trekkie, meticulous about series details, and resistant to changes that challenge established canon.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Star Trek Episode Summarizer Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a Star Trek series and an episode number as input and returns a brief summary of the episode.\\\",\\n\\\"function_name\\\": \\\"summarize_episode\\\",\\n\\\"input_args\\\": [\\\"series_name\\\", \\\"episode_number\\\"],\\n\\\"return\\\": \\\"A brief summary of the specified Star Trek episode.\\\",\\n\\\"depend\\\": {\\\"Web APIs\\\": [\\\"TVMaze API\\\"], \\\"python libraries\\\": [\\\"requests\\\", \\\"transformers\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A financial advisor who is optimistic about the high yield bond market", "synthesized text": "\"{\\n\\\"name\\\": \\\"High Yield Bond Information Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about high yield bond ETFs from Alpha Vantage. It returns the most recent closing price, open price, high price, and low price.\\\",\\n\\\"function_name\\\": \\\"get_bond_info\\\",\\n\\\"input_args\\\": {\\\"symbol\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"open\\\": \\\"string\\\", \\\"high\\\": \\\"string\\\", \\\"low\\\": \\\"string\\\", \\\"close\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"Alpha Vantage API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chief financial officer seeking guidance on implementing corporate governance best practices", "synthesized text": "\"{\\n\\\"name\\\": \\\"Corporate Governance Guideline Interface\\\",\\n\\\"description\\\": \\\"This interface extracts best practices in corporate governance from the recent filings of a given company, leveraging the EDGAR API from the U.S. Securities and Exchange Commission and a summarization model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"extract_governance_practices\\\",\\n\\\"input_args\\\": [\\\"company_name\\\"],\\n\\\"return\\\": \\\"A list of summarized best practices in corporate governance from the company's recent filings.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, transformers; Web APIs: EDGAR API; Machine learning models: Hugging Face summarization model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a safari tour operator in Kenya", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wildlife Sightings Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the likelihood of seeing different wildlife species in a specific location at a specific time. It uses a machine learning model trained on past wildlife sightings data.\\\",\\n\\\"function_name\\\": \\\"predict_wildlife_sightings\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"date\\\", \\\"path_to_model\\\", \\\"path_to_data\\\"],\\n\\\"return\\\": \\\"A dictionary mapping wildlife species to their sighting probabilities.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn.ensemble.RandomForestClassifier\\\", \\\"Trained machine learning model\\\", \\\"Wildlife sightings data\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a North Korean who defected to South Korea", "synthesized text": "\"{\\n\\\"name\\\": \\\"Machine Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates text from one language to another using HuggingFace's Transformers.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"source_lang\\\", \\\"target_lang\\\"],\\n\\\"return\\\": \\\"Translated text\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner struggling financially and seeking guidance on bankruptcy options", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bankruptcy Options Guidance Interface\\\",\\n\\\"description\\\": \\\"This interface provides a text-based guidance on bankruptcy options based on the user's current financial situation. It uses a Large Language Model (LLM) to provide the guidance.\\\",\\n\\\"function_name\\\": \\\"bankruptcy_options_guidance\\\",\\n\\\"input_args\\\": [\\\"financial_situation\\\"],\\n\\\"return\\\": \\\"A string containing the guidance on bankruptcy options.\\\",\\n\\\"depend\\\": \\\"Large Language Model (LLM)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seed distributor who provides the farmer with crop-specific planting recommendations based on weather patterns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecasting and Planting Recommendations Interface\\\",\\n\\\"description\\\": \\\"This interface uses weather forecast data and a pre-trained machine learning model to provide crop-specific planting recommendations.\\\",\\n\\\"function_name\\\": \\\"make_planting_recommendation\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"A tuple containing the latitude and longitude of the location.\\\",\\n    \\\"crop\\\": \\\"The type of crop the user intends to plant.\\\"\\n},\\n\\\"return\\\": \\\"The optimal planting dates for the specified crop at the specified location.\\\",\\n\\\"depend\\\": \\\"Python's requests and pickle libraries, OpenWeatherMap API, and a pre-trained RandomForestRegressor model from sklearn.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An emotional and overwhelmed family member of Henry Segerstrom.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Colorization Interface\\\", \\n\\\"description\\\": \\\"This interface uses a pre-trained model from DeOldify to colorize grayscale images. Users need to input the path to their grayscale image, and the interface will return a colorized version of the image.\\\", \\n\\\"function_name\\\": \\\"colorize_image\\\", \\n\\\"input_args\\\": \\\"path_to_img\\\", \\n\\\"return\\\": \\\"A colorized version of the grayscale image\\\", \\n\\\"depend\\\": \\\"DeOldify\\\"\\n}\"", "description": "tool development"}
{"input persona": "A junior architect also gaining practical experience on construction sites", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Material Quantity Estimator\\\",\\n\\\"description\\\": \\\"Estimates the quantity of building materials (bricks, cement bags, rebars) needed for construction based on a CSV file of the house plan.\\\",\\n\\\"function_name\\\": \\\"calculate_materials\\\",\\n\\\"input_args\\\": [\\\"csv_file\\\"],\\n\\\"return\\\": [\\\"total_bricks\\\", \\\"total_cement_bags\\\", \\\"total_rebars\\\"],\\n\\\"depend\\\": [\\\"pandas\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A senior executive at a tech company interested in integrating reinforcement learning into their products", "synthesized text": "\"{\\n\\\"name\\\": \\\"Reinforcement Learning Model Training Interface\\\",\\n\\\"description\\\": \\\"This interface uses the stable-baselines3 library to train a reinforcement learning model. The user needs to specify the environment, the model type ('ppo', 'a2c', or 'dqn'), and the number of training steps. The interface will return the trained model.\\\",\\n\\\"function_name\\\": \\\"train_rl_model\\\",\\n\\\"input_args\\\": [\\\"env_name\\\", \\\"model_type\\\", \\\"total_timesteps\\\"],\\n\\\"return\\\": \\\"Trained reinforcement learning model\\\",\\n\\\"depend\\\": [\\\"stable-baselines3\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An independent political analyst who resides in Santa Rosa, Philippines and is passionate about local politics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Election Result Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch and visualize election results from a specific year and location.\\\",\\n\\\"function_name\\\": \\\"get_election_results\\\",\\n\\\"input_args\\\": [\\\"year\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A bar chart visualizing the election results.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"pandas library\\\", \\\"matplotlib library\\\", \\\"AP Elections API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a math-loving geologist who is an industry consultant and a vocal advocate for applying mathematics in geology.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Geological Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface reads a CSV file containing geological data, performs statistical analysis on this data and generates histograms for each data column.\\\",\\n  \\\"function_name\\\": \\\"read_and_analyze_geological_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"Path to the CSV file containing the geological data\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"summary_stats\\\": \\\"A dictionary containing summary statistics (mean, median, etc.) for each column in the data\\\",\\n    \\\"skewness\\\": \\\"A list containing the skewness measure for each column in the data\\\",\\n    \\\"histograms\\\": \\\"A dictionary where each key is a column name and the value is the path to a PNG file containing the histogram of this column's data\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"scipy\\\", \\\"matplotlib\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A Vinyl Record Store Owner in the 70s", "synthesized text": "\"{\\n\\\"name\\\": \\\"Record Sales Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the sales data of a vinyl record store and plot a bar chart showing the sales of different records.\\\",\\n\\\"function_name\\\": \\\"plot_sales\\\",\\n\\\"input_args\\\": \\\"csv_file\\\",\\n\\\"return\\\": \\\"A bar chart showing the sales of different records.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young professional seeking guidance on how to navigate and mediate conflicts in a workplace environment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conflict Resolution Advice Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained GPT-2 model to generate advice or recommendations on how to navigate and mediate conflicts in a workplace environment.\\\",\\n\\\"function_name\\\": \\\"generate_advice\\\",\\n\\\"input_args\\\": {\\n\\\"scenario\\\": \\\"A string that describes a conflict situation in a workplace environment.\\\"\\n},\\n\\\"return\\\": {\\n\\\"advice\\\": \\\"A string that provides advice or recommended actions to handle the conflict.\\\"\\n},\\n\\\"depend\\\": {\\n\\\"python libraries\\\": [\\\"transformers\\\"],\\n\\\"machine learning models\\\": [\\\"GPT2LMHeadModel, GPT2Tokenizer from Hugging Face's transformers\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "Uma engenheira de software que lidera uma equipe de desenvolvedores de blockchain com foco em finanças descentralizadas", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interface de Pre\\u00e7o de Criptomoedas\\\",\\n  \\\"description\\\": \\\"Esta interface retorna o pre\\u00e7o atual de uma criptomoeda espec\\u00edfica em d\\u00f3lares americanos.\\\",\\n  \\\"function_name\\\": \\\"get_crypto_price\\\",\\n  \\\"input_args\\\": \\\"crypto_id\\\",\\n  \\\"return\\\": \\\"Pre\\u00e7o atual da criptomoeda em d\\u00f3lares americanos.\\\",\\n  \\\"depend\\\": \\\"CoinGecko API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An innovative engineer developing automated car washing systems for quick and efficient cleaning", "synthesized text": "\"{\\n\\\"name\\\": \\\"Car Wash Scheduling Interface\\\",\\n\\\"description\\\": \\\"This interface schedules a car wash appointment for the given date and time using Google Calendar API.\\\",\\n\\\"function_name\\\": \\\"schedule_car_wash\\\",\\n\\\"input_args\\\": \\\"date_time_str - The desired date and time for the car wash in the format 'YYYY-MM-DDTHH:MM:SS'.\\\",\\n\\\"return\\\": \\\"Prints out a message indicating that the event has been created and provides a link to the event on the user's Google Calendar.\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Rui Osako's middle-aged football-loving mother", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Football Match Result Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to get the latest match result of a specific football team by providing the team name.\\\",\\n  \\\"function_name\\\": \\\"get_latest_match_result\\\",\\n  \\\"input_args\\\": [\\\"team_name\\\"],\\n  \\\"return\\\": \\\"A dictionary with the names of the home and away teams and the number of goals scored by each team in the latest match.\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"Football Data API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A renowned expert in risk management and project governance", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Risk Assessment Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Monte Carlo simulation to estimate the risk of a project. The user provides the mean, standard deviation of the project's net present value (NPV), and the number of simulations. The interface returns the probability of failure (i.e., NPV < 0).\\\",\\n  \\\"function_name\\\": \\\"monte_carlo_risk_assessment\\\",\\n  \\\"input_args\\\": [\\\"mean\\\", \\\"std_dev\\\", \\\"num_simulations\\\"],\\n  \\\"return\\\": \\\"probability_failure\\\",\\n  \\\"depend\\\": [\\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A researcher studying the impact of intersectionality on academic achievement", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Analysis Interface for Intersectionality Study\\\",\\n\\\"description\\\": \\\"This interface accepts a path to a CSV file containing the data, a list of feature columns, and a target column. It returns a trained RandomForestRegressor model that can predict academic achievement based on the given features, as well as the mean absolute error of the model.\\\",\\n\\\"function_name\\\": \\\"train_model\\\",\\n\\\"input_args\\\": [\\\"csv_file_path\\\", \\\"feature_columns\\\", \\\"target_column\\\"],\\n\\\"return\\\": {\\\"model\\\": \\\"Trained RandomForestRegressor model\\\", \\\"mae\\\": \\\"Mean absolute error of the model\\\"},\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a Paralympic swimming coach who is passionate about training athletes with disabilities and always stays abreast of the latest developments in the Paralympic community.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Paralympic Records Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes data from the International Paralympic Committee's website and returns the current record for a specified event.\\\",\\n\\\"function_name\\\": \\\"get_paralympic_record\\\",\\n\\\"input_args\\\": \\\"event_type - The type of Paralympic event for which the user wants to know the current record.\\\",\\n\\\"return\\\": \\\"A dictionary containing the event, the record holder's name, the record time, and the record holder's country. If the record is not found, it returns 'Record not found'.\\\",\\n\\\"depend\\\": \\\"This function leverages the Python requests and BeautifulSoup libraries to scrape data from a website.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local Karmarong language guide", "synthesized text": "\"{\\n\\\"name\\\": \\\"Karmarong Language Learning Interface\\\",\\n\\\"description\\\": \\\"This interface translates English text to Karmarong using an online translation service.\\\",\\n\\\"function_name\\\": \\\"translate_to_karmarong\\\",\\n\\\"input_args\\\": [\\\"english_text\\\"],\\n\\\"return\\\": \\\"Translated text in Karmarong.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Online Translation Service API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "泰国电视迷和时尚化妆师", "synthesized text": "\"{\\n\\\"name\\\": \\\"Thai Drama Synopsis Search and Makeup Style Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to fetch the synopsis for a given Thai TV drama and recommend a suitable makeup style based on a given face image.\\\",\\n\\\"function_name\\\": [\\\"get_thai_drama_synopsis\\\", \\\"recommend_makeup_style\\\"],\\n\\\"input_args\\\": [\\\"title\\\", \\\"path_to_img\\\"],\\n\\\"return\\\": [\\\"synopsis\\\", \\\"stylized_image\\\"],\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"The Movie Database API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Graham Ritchie's high school physical education teacher", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Exercise Recommendation Interface\\\",\\n    \\\"description\\\": \\\"This interface recommends the ideal exercise for a user based on their activity data and fitness goals.\\\",\\n    \\\"function_name\\\": \\\"recommend_exercise\\\",\\n    \\\"input_args\\\": [\\n        {\\n            \\\"name\\\": \\\"user_id\\\",\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"The unique identifier for the user.\\\"\\n        },\\n        {\\n            \\\"name\\\": \\\"goal\\\",\\n            \\\"type\\\": \\\"float\\\",\\n            \\\"description\\\": \\\"The user's fitness goal. This could be a target weight, number of steps, distance to run, etc.\\\"\\n        }\\n    ],\\n    \\\"return\\\": {\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"description\\\": \\\"The recommended exercise for the user.\\\"\\n    },\\n    \\\"depend\\\": {\\n        \\\"resources\\\": [\\n            {\\n                \\\"name\\\": \\\"requests\\\",\\n                \\\"type\\\": \\\"Python library\\\",\\n                \\\"description\\\": \\\"A simple HTTP library for Python, used to make requests to the fitness tracker API.\\\"\\n            },\\n            {\\n                \\\"name\\\": \\\"pandas\\\",\\n                \\\"type\\\": \\\"Python library\\\",\\n                \\\"description\\\": \\\"A data manipulation library for Python, used to process the user's activity data.\\\"\\n            },\\n            {\\n                \\\"name\\\": \\\"scikit-learn\\\",\\n                \\\"type\\\": \\\"Python library\\\",\\n                \\\"description\\\": \\\"A machine learning library for Python, used to train a model that recommends exercises.\\\"\\n            },\\n            {\\n                \\\"name\\\": \\\"Fitness Tracker API\\\",\\n                \\\"type\\\": \\\"Web API\\\",\\n                \\\"description\\\": \\\"An API that provides user activity data from a fitness tracker.\\\"\\n            }\\n        ]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "A passionate fan of Rauw Alejandro, but who couldn't go to any of the Vice Versa tour's concerts due to scheduling conflicts.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Concert Recording Search Interface\\\",\\n  \\\"description\\\": \\\"An interface to search for concert recordings on YouTube. Users input the artist and tour name, and receive a list of top 5 video links of the tour.\\\",\\n  \\\"function_name\\\": \\\"get_concert_videos\\\",\\n  \\\"input_args\\\": [\\\"artist_name\\\", \\\"tour_name\\\"],\\n  \\\"return\\\": \\\"List of YouTube video links\\\",\\n  \\\"depend\\\": \\\"YouTube Data API v3\\\"\\n}\"", "description": "tool development"}
{"input persona": "an exchange student from Argentina currently living in Montaigu-Vendée", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Currency Conversion Interface\\\",\\n    \\\"description\\\": \\\"This interface returns the current exchange rate between two specified currencies.\\\",\\n    \\\"function_name\\\": \\\"get_exchange_rate\\\",\\n    \\\"input_args\\\": [\\\"home_currency\\\", \\\"foreign_currency\\\"],\\n    \\\"return\\\": \\\"A float representing the current exchange rate from the home currency to the foreign currency.\\\",\\n    \\\"depend\\\": \\\"This function leverages the ExchangeRate-API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical scientist specializing in drug formulation and delivery mechanisms, exploring the potential of essential oils in dermatological applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Essential Oil Property Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface to predict certain properties of essential oil compounds from their SMILES representation using a machine learning model trained on drug discovery datasets.\\\",\\n\\\"function_name\\\": \\\"predict_drug_properties\\\",\\n\\\"input_args\\\": \\n    {\\\"smiles_string\\\": \\\"A string representing the molecular structure of the compound in SMILES format\\\"},\\n\\\"return\\\": \\\"A dictionary with predicted properties and their respective values.\\\" ,\\n\\\"depend\\\": \\\"AutoTokenizer, AutoModelForSequenceClassification from huggingface's transformers library and a pretrained model seyonec/PubChem10M_SMILES_BPE_450k\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate tour guide from Cyprus", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Landmark Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides a brief summary about a specific historical landmark. It uses the Wikipedia REST API to fetch the information.\\\",\\n\\\"function_name\\\": \\\"get_landmark_summary\\\",\\n\\\"input_args\\\": {\\\"landmark_name\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": \\\"Wikipedia REST API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an African American parent living in Charlottesville", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Learning Interface\\\",\\n\\\"description\\\": \\\"This interface connects to the Duolingo API to fetch a lesson in the desired language at the user's level.\\\",\\n\\\"function_name\\\": \\\"get_language_lesson\\\",\\n\\\"input_args\\\": {\\\"language\\\": \\\"string\\\", \\\"level\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"lesson\\\": \\\"json\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"], \\\"Web APIs\\\": [\\\"Duolingo API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am an up-and-coming biomedical engineer, fresh out of grad school, excited about innovating in the field of nanomedicine. I've been following Prof. Michel Meunier's work since undergrad and consider his contributions to be borderline magical in their ingenuity and potential impact on humanity.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nanoparticle Size Distribution Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate and visualize the size distribution of a list of nanoparticles.\\\",\\n\\\"function_name\\\": \\\"nanoparticle_size_distribution\\\",\\n\\\"input_args\\\": \\\"A list of the diameters of the nanoparticles\\\",\\n\\\"return\\\": \\\"The mean and standard deviation of the nanoparticle diameters, and a plot of the size distribution\\\",\\n\\\"depend\\\": \\\"numpy, matplotlib, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A supplier of innovative and eco-friendly forestry equipment that maximizes timber yields while minimizing environmental impact", "synthesized text": "\"{\\n\\\"name\\\": \\\"Timber Volume Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the volume of timber that can be yielded from a tree given its diameter and height. This aids in maximizing timber yields while minimizing environmental impact.\\\",\\n\\\"function_name\\\": \\\"calculate_timber_volume\\\",\\n\\\"input_args\\\": {\\n    \\\"diameter\\\": \\\"The diameter of the tree in meters.\\\",\\n    \\\"height\\\": \\\"The height of the tree in meters.\\\"\\n    },\\n\\\"return\\\": \\\"The estimated volume of timber that can be yielded from the tree in cubic meters.\\\",\\n\\\"depend\\\": \\\"Python libraries: math, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aviation enthusiast living in Xinjiang province, China.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that tracks the status of a flight (such as its location, speed, and altitude) in real time using the aviationstack API.\\\",\\n\\\"function_name\\\": \\\"get_flight_status\\\",\\n\\\"input_args\\\": [\\\"flight_number\\\"],\\n\\\"return\\\": \\\"A dictionary containing the airline name, departure and arrival airports, flight status, and live data (latitude, longitude, altitude, and speed).\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"aviationstack API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A local radio host who invites the retired electrical engineer as a guest to discuss electronic repairs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Electrical Component Identifier Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to recognize electronic components from images. The user inputs the path to the image file, and the interface returns the identified electrical component.\\\",\\n\\\"function_name\\\": \\\"identify_electrical_component\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"Electronic component identified from the image\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, ImageNet labels, and a pre-trained model to recognize electrical components\\\"\\n}\"", "description": "tool development"}
{"input persona": "Aspiring Brazilian neuroscientist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brain Activity Visualizer Interface\\\",\\n\\\"description\\\": \\\"This interface uses MNE Python library to load and visualize EEG (Electroencephalography) data. Users only need to input the path to an EEG file, and the interface will return a plot of the brain activity data.\\\",\\n\\\"function_name\\\": \\\"plot_brain_activity\\\",\\n\\\"input_args\\\": \\\"path_to_file - a string representing the path to the EEG file\\\",\\n\\\"return\\\": \\\"This function does not return a value, it directly plots the brain activity data.\\\",\\n\\\"depend\\\": \\\"This interface uses MNE Python library to work with EEG data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An online betting platform owner seeking to switch customers to digital betting", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Betting Odds Calculator Interface\\\",\\n    \\\"description\\\": \\\"This interface calculates the betting odds based on the input probabilities.\\\",\\n    \\\"function_name\\\": \\\"calculate_odds\\\",\\n    \\\"input_args\\\": [\\\"probability\\\"],\\n    \\\"return\\\": \\\"odds\\\",\\n    \\\"depend\\\": [\\\"Python's math library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A luxury tailor who caters to high-profile clients, including the lawyer, with their exquisite craftsmanship", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Doc2Vec model from the Gensim library to find documents similar to a given document.\\\",\\n\\\"function_name\\\": \\\"find_similar_documents\\\",\\n\\\"input_args\\\": {\\\"input_doc\\\": \\\"Text of the document for which to find similar documents\\\", \\\"documents\\\": \\\"List of all documents in the corpus\\\"},\\n\\\"return\\\": \\\"List of documents most similar to the input document\\\",\\n\\\"depend\\\": \\\"Gensim Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wildlife biologist specializing in studying the migration patterns of mountain goats", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wildlife Migration Tracking Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Movebank API to retrieve animal migration data. The user just needs to input the species of the animal.\\\",\\n\\\"function_name\\\": \\\"get_migration_data\\\",\\n\\\"input_args\\\": \\\"species - the species of the animal\\\",\\n\\\"return\\\": \\\"A list of dictionaries containing the tracking data for each individual of the specified species\\\",\\n\\\"depend\\\": \\\"requests library, Movebank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic biology student who just learned about the Zombis genus", "synthesized text": "\"{\\n\\\"name\\\": \\\"Species Information Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve scientific information about a species using the Encyclopedia of Life (EOL) APIs. The user needs to input the name of a species, and the interface will return the scientific name and the taxon hierarchy of that species.\\\",\\n\\\"function_name\\\": \\\"retrieve_species_info\\\",\\n\\\"input_args\\\": \\\"species_name\\\",\\n\\\"return\\\": \\\"{'scientific_name': 'Zombis zombis', 'taxon_hierarchy': ''}\\\",\\n\\\"depend\\\": \\\"requests library, Encyclopedia of Life (EOL) APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "a professional cyclist who did not participate in the 2023 Coppa Sabatini", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-Time Race Results Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch real time race results using TheSportsDB API. Users need to input the race name and the interface will return the race results.\\\",\\n\\\"function_name\\\": \\\"get_race_results\\\",\\n\\\"input_args\\\": \\\"race_name\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the race name, date and result.\\\",\\n\\\"depend\\\": \\\"TheSportsDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A postal regulator interested in implementing technology-driven solutions to improve postal services", "synthesized text": "\"{\\n\\\"name\\\": \\\"Postal Code Validation Interface\\\",\\n\\\"description\\\": \\\"This interface validates a postal code and returns the location corresponding to that postal code.\\\",\\n\\\"function_name\\\": \\\"validate_postal_code\\\",\\n\\\"input_args\\\": {\\\"postal_code\\\": \\\"A string representing the postal code\\\", \\\"country_code\\\": \\\"A string representing the country code\\\"},\\n\\\"return\\\": \\\"Returns the location corresponding to the postal code if it's valid, else returns 'Invalid postal code'\\\",\\n\\\"depend\\\": \\\"This function leverages the Zippopotam.us API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud former player of the Russia women's national rugby union team", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface to get team performance statistics using the Sports Open Data API. The user inputs the team name, and the interface returns the team's performance statistics, including wins, draws, losses, points, goals for, and goals against.\\\",\\n\\\"function_name\\\": \\\"get_team_performance\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"{ 'wins': int, 'draws': int, 'losses': int, 'points': int, 'goals_for': int, 'goals_against': int }\\\",\\n\\\"depend\\\": \\\"requests library, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a geographer who is specialized in the former Soviet Union region", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cyrillic to Latin Transliteration Interface\\\",\\n\\\"description\\\": \\\"This interface converts Cyrillic text into Latin. It's particularly useful for users who need to read or process text in languages that use the Cyrillic script.\\\",\\n\\\"function_name\\\": \\\"cyrillic_to_latin\\\",\\n\\\"input_args\\\": \\\"cyrillic_text\\\",\\n\\\"return\\\": \\\"Transliterated Latin text\\\",\\n\\\"depend\\\": \\\"Python library - transliterate\\\"\\n}\"", "description": "tool development"}
{"input persona": "a professor from Pittsburg State University", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Plagiarism Detection Interface\\\",\\n    \\\"description\\\": \\\"An interface to detect plagiarism in text documents using a pre-trained model from Hugging Face.\\\",\\n    \\\"function_name\\\": \\\"detect_plagiarism\\\",\\n    \\\"input_args\\\": \\\"file_path - The path to the text file\\\",\\n    \\\"return\\\": \\\"plagiarism_score - A score indicating the likelihood of plagiarism\\\",\\n    \\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a local resident living near the Arasawa No.2 Dam", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Dam Water Level Monitoring Interface\\\",\\n  \\\"description\\\": \\\"An interface to monitor dam water level using the public API provided by the management organization or government. User needs to provide the dam's ID and the interface will return its current water level.\\\",\\n  \\\"function_name\\\": \\\"get_dam_water_level\\\",\\n  \\\"input_args\\\": \\\"dam_id\\\",\\n  \\\"return\\\": \\\"Current water level of the dam or an error message in case of an invalid dam ID or server error.\\\",\\n  \\\"depend\\\": \\\"requests library, Public API for dam water level data\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a conservatory-trained classical pianist who specializes in the interpretation of 18th to 20th-century Russian composers. I hold a keen interest in musicology and follow the impact experts in the field have had on the current understanding of classical music.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sheet Music Transcription Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve and download sheet music of the specified composer and composition from MuseScore in PDF format.\\\",\\n\\\"function_name\\\": \\\"get_sheet_music\\\",\\n\\\"input_args\\\": {\\n    \\\"composer\\\": \\\"The name of the composer\\\",\\n    \\\"title\\\": \\\"The title of the composition\\\"\\n},\\n\\\"return\\\": \\\"A string message indicating whether the sheet music has been successfully downloaded or not.\\\",\\n\\\"depend\\\": \\\"requests library, MuseScore API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A battery manufacturer committed to providing high-quality and affordable batteries for electric vehicles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Battery Life Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the battery life of electric vehicle batteries based on certain parameters.\\\",\\n\\\"function_name\\\": \\\"predict_battery_life\\\",\\n\\\"input_args\\\": [\\\"model\\\", \\\"temperature\\\", \\\"charging_speed\\\", \\\"discharge_speed\\\", \\\"cycle_count\\\"],\\n\\\"return\\\": \\\"Estimated battery life of the battery.\\\",\\n\\\"depend\\\": \\\"TensorFlow, Keras, and a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fan of Michelle Obama who values efforts in promoting healthy lifestyles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Healthy Recipes Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spoonacular API to provide users with a list of healthy recipes based on their specified diet type. The user will need to input their preferred diet type (e.g., vegan, vegetarian, gluten-free, etc.) and the number of recipes they want.\\\",\\n\\\"function_name\\\": \\\"get_healthy_recipes\\\",\\n\\\"input_args\\\": {\\n    \\\"diet_type\\\": \\\"a string representing the user's diet type\\\",\\n    \\\"number_of_recipes\\\": \\\"an integer specifying the number of recipes the user wants\\\"\\n},\\n\\\"return\\\": \\\"a list of dictionaries, where each dictionary contains the title and the link to a recipe\\\",\\n\\\"depend\\\": \\\"requests, Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired history professor who knew Daniel Heradstveit personally", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface uses the BERT model from Hugging Face's transformers library to measure the semantic similarity between two pieces of text.\\\",\\n\\\"function_name\\\": \\\"text_similarity\\\",\\n\\\"input_args\\\": [\\\"text1\\\", \\\"text2\\\"],\\n\\\"return\\\": \\\"A similarity score between 0 (completely dissimilar) and 1 (completely similar).\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library (AutoTokenizer, AutoModel)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a veteran German novelist who values the role of translation in literature", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translation Quality Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface uses machine learning to assess the quality of a translation.\\\",\\n\\\"function_name\\\": \\\"assess_translation_quality\\\",\\n\\\"input_args\\\": [\\\"source_text\\\", \\\"translated_text\\\", \\\"source_lang\\\", \\\"target_lang\\\"],\\n\\\"return\\\": \\\"A score representing the quality of the translation.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hardcore track and field fan from Glasgow, Scotland.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Running Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to input the ID of a Strava athlete and returns their running statistics, including recent runs, total distance covered, average pace, and personal records.\\\",\\n\\\"function_name\\\": \\\"get_athlete_stats\\\",\\n\\\"input_args\\\": {\\n    \\\"athlete_id\\\": \\\"The ID of the Strava athlete.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with the following keys: 'recent_runs' (a summary of the athlete's recent runs), 'total_distance' (the total distance the athlete has run), 'average_pace' (the athlete's average pace), and 'personal_records' (the athlete's personal records).\\\",\\n\\\"depend\\\": \\\"Python's requests library and Strava's API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated fan of contemporary poetry who appreciates Kaveh Akbar's works", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poetry Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a random poem by a given poet. The poem is retrieved from the poetrydb.org API.\\\",\\n\\\"function_name\\\": \\\"get_random_poem_by_poet\\\",\\n\\\"input_args\\\": [\\\"poet_name\\\"],\\n\\\"return\\\": [\\\"poem_title\\\", \\\"poem_lines\\\"],\\n\\\"depend\\\": [\\\"requests\\\", \\\"random\\\", \\\"poetrydb.org API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a young musician who is considering copyrighting his first song", "synthesized text": "\"{\\n\\\"name\\\": \\\"Copyright Registration Interface\\\",\\n\\\"description\\\": \\\"An interface to check whether a song title is already registered in the U.S. Copyright Office's online Public Catalog.\\\",\\n\\\"function_name\\\": \\\"check_copyright_registration\\\",\\n\\\"input_args\\\": [\\\"song_title\\\"],\\n\\\"return\\\": \\\"A message indicating whether the song title is already registered or not.\\\",\\n\\\"depend\\\": [\\\"Python Beautiful Soup library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A government official working on formulating policies to mitigate the impact of demographic trends on socio-economic issues", "synthesized text": "\"{\\n\\\"name\\\": \\\"Demographic Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"Interface for analyzing and visualizing demographic data from the World Bank's API. Returns a dataframe of the data and a plot showing the trend of the indicator over time.\\\",\\n\\\"function_name\\\": \\\"plot_demographic_trends\\\",\\n\\\"input_args\\\": [\\\"country\\\", \\\"indicator\\\"],\\n\\\"return\\\": \\\"Dataframe and plot\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"seaborn\\\", \\\"matplotlib\\\", \\\"requests\\\", \\\"World Bank API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I'm an aspiring young kickboxer, and Khalid Bourdif is one of my sports heroes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Kickboxing Move Analyzer Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze and break down kickboxing moves from videos using a pre-trained pose estimation model from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"analyze_moves\\\",\\n\\\"input_args\\\": [\\\"path_to_video\\\"],\\n\\\"return\\\": \\\"Array of keypoints representing the pose in each frame of the video\\\",\\n\\\"depend\\\": \\\"TensorFlow Hub, OpenCV (cv2), TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired carpenter who volunteers their time to renovate and improve the church's shelter facilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Material Estimator Interface\\\",\\n\\\"description\\\": \\\"An interface that provides an estimate of construction materials needed for a given renovation project.\\\",\\n\\\"function_name\\\": \\\"estimate_materials\\\",\\n\\\"input_args\\\": {\\n    \\\"project_type\\\": \\\"Type of the project - can be 'wall' or 'floor'.\\\",\\n    \\\"dimensions\\\": \\\"Dimensions of the project - a dictionary with keys 'length', 'width', 'height'.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with keys as the material names and values as the amount of each material needed.\\\",\\n\\\"depend\\\": \\\"Python's Pandas library, a predefined materials database.\\\"\\n}\"", "description": "tool development"}
{"input persona": "加拿大的赛车粉丝，自1977年起就没错过在家乡举办的任何一届大奖赛", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Race Result Interface\\\",\\n  \\\"description\\\": \\\"An interface to get the results of a specific F1 race from a specific year.\\\",\\n  \\\"function_name\\\": \\\"get_race_results\\\",\\n  \\\"input_args\\\": [\\\"year\\\", \\\"race_name\\\"],\\n  \\\"return\\\": \\\"A list of dictionaries containing the position, driver name, constructor name, and time (if available) of all the drivers in the race.\\\",\\n  \\\"depend\\\": \\\"Ergast API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a timid college girl who's just started watching baseball", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Baseball Game Summary Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch and summarize recent baseball games of a specified team using the SportsRadar API.\\\",\\n  \\\"function_name\\\": \\\"get_recent_game_summary\\\",\\n  \\\"input_args\\\": [\\\"team\\\"],\\n  \\\"return\\\": \\\"List of summaries for recent games of the specified team.\\\",\\n  \\\"depend\\\": \\\"SportsRadar API, requests python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional wrestler who is also part of the AEW roster", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Wrestler Match Statistics Interface\\\", \\n  \\\"description\\\": \\\"This interface provides detailed match statistics for a professional wrestler. It uses ProWrestlingAPI to fetch the data.\\\", \\n  \\\"function_name\\\": \\\"get_wrestler_match_statistics\\\", \\n  \\\"input_args\\\": \\\"wrestler_name\\\", \\n  \\\"return\\\": \\\"A json representing the match statistics for the provided wrestler.\\\", \\n  \\\"depend\\\": \\\"requests library, ProWrestlingAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent who initially doubted their career choice but now proudly supports and promotes their sustainable fashion brand", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Sustainable Fashion Brand Promotion Interface\\\",\\n  \\\"description\\\": \\\"An interface that simplifies the process of adding new products to a Shopify store. Users can input details about a product and the interface will automatically add the product to their store.\\\",\\n  \\\"function_name\\\": \\\"create_product_in_shopify_store\\\",\\n  \\\"input_args\\\": [\\\"title\\\", \\\"description\\\", \\\"images\\\", \\\"price\\\"],\\n  \\\"return\\\": \\\"The ID of the created product.\\\",\\n  \\\"depend\\\": \\\"Shopify API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A school teacher passionate about teaching children the importance of staying hydrated", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Hydration Reminder Interface\\\",\\n  \\\"description\\\": \\\"An interface that sends reminders about drinking water at regular intervals. The user inputs the starting time, ending time, and the frequency of reminders. The interface will return reminders during that duration at the specified frequency.\\\",\\n  \\\"function_name\\\": \\\"hydration_reminder\\\",\\n  \\\"input_args\\\": {\\n    \\\"start_time\\\": \\\"The starting time for the reminders in 24-hour format (e.g., '08:00')\\\",\\n    \\\"end_time\\\": \\\"The ending time for the reminders in 24-hour format (e.g., '16:00')\\\",\\n    \\\"frequency_in_minutes\\\": \\\"The frequency of reminders in minutes (e.g., 30)\\\"\\n  },\\n  \\\"return\\\": \\\"Prints a reminder to drink water every 'frequency_in_minutes' minutes between 'start_time' and 'end_time'\\\",\\n  \\\"depend\\\": \\\"Python's built-in libraries (time, datetime)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of the Old Dominion University basketball team who is known for their impressive shooting skills", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Basketball Shot Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the likelihood of a basketball shot being successful based on parameters such as player's shooting skills, shooting angle, distance from hoop etc.\\\",\\n  \\\"function_name\\\": \\\"predict_shot_success\\\",\\n  \\\"input_args\\\": [\\\"player_skill\\\", \\\"shooting_angle\\\", \\\"distance_from_hoop\\\"],\\n  \\\"return\\\": \\\"Probability of shot being successful\\\",\\n  \\\"depend\\\": \\\"huggingface transformers library and a pre-trained model for shot prediction\\\"\\n}\"", "description": "tool development"}
{"input persona": "A technology company recruiter impressed by the engineer's expertise in Aurelia's routing, considering them for a senior developer position", "synthesized text": "\"{\\n\\\"name\\\": \\\"Resume Keywords Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts important keywords from a resume. Users input the path to a PDF file of the resume, and the interface returns a list of keywords.\\\",\\n\\\"function_name\\\": \\\"extract_keywords_from_resume\\\",\\n\\\"input_args\\\": [\\\"pdf_path\\\"],\\n\\\"return\\\": \\\"List of keywords\\\",\\n\\\"depend\\\": \\\"Python's NLTK and TextBlob libraries, PyPDF2 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An older sibling who was once a top college basketball player but had their career cut short by injury", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Shot Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained TensorFlow model to predict whether a basketball shot will be successful based on the shot's position and the player's shooting percentage.\\\",\\n\\\"function_name\\\": \\\"predict_shot_success\\\",\\n\\\"input_args\\\": [\\\"x_position\\\", \\\"y_position\\\", \\\"shooting_percentage\\\"],\\n\\\"return\\\": \\\"A prediction of 'Successful' or 'Unsuccessful' for the shot.\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"a pre-trained TensorFlow model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A real estate investor looking to maximize profits by renovating properties before selling", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Renovation Profit Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Zillow's API and a pre-trained machine learning model to predict the increase in property value after renovation. The user needs to input the property address and the budget for renovation, and the interface will return an estimation of the profit after renovation.\\\",\\n\\\"function_name\\\": \\\"estimate_renovation_profit\\\",\\n\\\"input_args\\\": {\\n    \\\"address\\\": \\\"The address of the property to be renovated\\\",\\n    \\\"renovation_budget\\\": \\\"The budget for the renovation\\\"\\n},\\n\\\"return\\\": \\\"An estimation of the profit after renovation\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"sklearn.externals.joblib\\\"],\\n    \\\"web_apis\\\": [\\\"Zillow's API\\\"],\\n    \\\"ml_models\\\": [\\\"A pre-trained machine learning model for predicting property value increase\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A freshman studying sociology at Estrella Mountain Community College", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Sociology Article Summarization Interface\\\",\\n  \\\"description\\\": \\\"This interface takes in the text of a sociology article and returns a summarized version of the article. This can help students quickly understand the key points of the article.\\\",\\n  \\\"function_name\\\": \\\"summarize_article\\\",\\n  \\\"input_args\\\": {\\n    \\\"article_text\\\": \\\"The full text of the sociology article.\\\"\\n  },\\n  \\\"return\\\": \\\"A summarized version of the article text.\\\",\\n  \\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An alien from another galaxy who is fascinated by Earth's way of monitoring and protecting itself from celestial bodies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Near-Earth Object Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses NASA's Near-Earth Object Web Service (NeoWS) API to provide information about asteroids that come close to Earth, their size, velocity, distance from Earth, and whether they are potentially hazardous.\\\",\\n\\\"function_name\\\": \\\"get_near_earth_objects\\\",\\n\\\"input_args\\\": [\\\"start_date\\\", \\\"end_date\\\"],\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary includes the name, estimated maximum size in meters, relative velocity in kilometers per hour, miss distance in kilometers, and a boolean indicating whether the object is potentially hazardous.\\\",\\n\\\"depend\\\": \\\"NASA's Near-Earth Object Web Service (NeoWS) API and the requests Python library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tourism and city development blogger who recently moved to Dalian.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Attractions Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses TripAdvisor's API to recommend top attractions or sightseeing spots based on user's input city name.\\\",\\n\\\"function_name\\\": \\\"get_recommended_attractions\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"str\\\"},\\n\\\"return\\\": \\\"List of attraction names\\\",\\n\\\"depend\\\": \\\"requests library, TripAdvisor API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gamer and fan of virtual weapon designs, who provides feedback and suggestions to the 3D artist", "synthesized text": "\"{\\n  \\\"name\\\": \\\"3D Model Visual Inspection Interface\\\",\\n  \\\"description\\\": \\\"An interface to allow users to input the path to a 3D model file, and the interface will render and display the 3D model for inspection.\\\",\\n  \\\"function_name\\\": \\\"visualize_3D_model\\\",\\n  \\\"input_args\\\": \\\"path_to_file\\\",\\n  \\\"return\\\": \\\"3D model visualization\\\",\\n  \\\"depend\\\": \\\"trimesh library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm a cynical, world-weary barista with a hidden love for classic arcade games.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Classic Arcade Game Score Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to play the classic game 'MsPacman' and get the score.\\\",\\n\\\"function_name\\\": \\\"play_pacman\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"Returns the score of the game as a float.\\\",\\n\\\"depend\\\": \\\"This function depends on the OpenAI's Gym library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "The mayor of the town who recognizes and commends the firefighter's bravery", "synthesized text": "\"{\\n\\\"name\\\": \\\"Firefighter Recognition Interface\\\", \\n\\\"description\\\": \\\"This interface generates a personalized recognition certificate for a firefighter.\\\", \\n\\\"function_name\\\": \\\"generate_certificate\\\", \\n\\\"input_args\\\": [\\\"name\\\", \\\"act_of_bravery\\\", \\\"filename\\\"], \\n\\\"return\\\": \\\"PDF file with the certificate of bravery\\\", \\n\\\"depend\\\": \\\"Python library: FPDF\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud former schoolmate of Josh Dolling who always believed in his potential to succeed.", "synthesized text": "\"{\\n\\\"name\\\": \\\"YouTube Video Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface extracts information like view count, likes, dislikes and comments count from a given YouTube video URL.\\\",\\n\\\"function_name\\\": \\\"get_youtube_video_statistics\\\",\\n\\\"input_args\\\": \\\"url\\\",\\n\\\"return\\\": \\\"{viewCount: , likeCount: , dislikeCount: , commentCount: }\\\",\\n\\\"depend\\\": \\\"requests, urllib.parse, YouTube Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wholesale distributor of textile machinery and equipment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inventory Management Interface\\\",\\n\\\"description\\\": \\\"An interface for managing the inventory of a wholesale distributor of textile machinery and equipment. Allows adding items, removing items, and checking item quantities.\\\",\\n\\\"function_name\\\": [\\\"add_item\\\", \\\"remove_item\\\", \\\"check_quantity\\\"],\\n\\\"input_args\\\": [\\\"item\\\", \\\"quantity\\\"],\\n\\\"return\\\": \\\"The updated inventory after adding or removing items, or the quantity of an item in the inventory.\\\",\\n\\\"depend\\\": [\\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A person who strongly believes the government should not interfere in people's lives more than necessary.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Government Activity Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches latest data for a specific type of government activity from the public APIs provided by US government.\\\",\\n\\\"function_name\\\": \\\"get_government_activity_info\\\",\\n\\\"input_args\\\": \\\"activity_type\\\",\\n\\\"return\\\": \\\"Latest updates and information about the inputted government activity.\\\",\\n\\\"depend\\\": \\\"requests library, Government Data Public APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A producer responsible for programming decisions and ratings", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to recommend TV shows based on a user's prior viewing history and demographic information.\\\",\\n\\\"function_name\\\": \\\"recommend_tv_shows\\\",\\n\\\"input_args\\\": {\\n    \\\"watched_shows\\\": \\\"list of previously watched shows\\\",\\n    \\\"demographic_info\\\": \\\"dictionary containing information about the user's age, gender, and location\\\"\\n},\\n\\\"return\\\": \\\"numpy array of recommended shows\\\",\\n\\\"depend\\\": \\\"Tensorflow, Tensorflow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A car wash owner who collaborates with the gas station owner to offer discounted services for customers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Discounted Service Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the discounted price for car wash services for customers who buy a certain amount of gas.\\\",\\n\\\"function_name\\\": \\\"calculate_discounted_price\\\",\\n\\\"input_args\\\": {\\n    \\\"original_price\\\": \\\"The original price of the car wash service.\\\",\\n    \\\"gas_purchased\\\": \\\"The amount of gas purchased by the customer in liters.\\\"\\n},\\n\\\"return\\\": \\\"The discounted price for the car wash service.\\\",\\n\\\"depend\\\": \\\"Python built-in functions\\\"\\n}\"", "description": "tool development"}
{"input persona": "Odissi classical singer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Transcription Interface\\\",\\n\\\"description\\\": \\\"An interface that uses machine learning to transcribe a music file into MIDI notes. Useful for musicians who want to transcribe their music.\\\",\\n\\\"function_name\\\": \\\"transcribe_music\\\",\\n\\\"input_args\\\": [\\\"path_to_wav\\\"],\\n\\\"return\\\": \\\"Path to the output MIDI file\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"magenta\\\", \\\"note_seq\\\"], \\\"Machine Learning Models\\\": [\\\"Onsets and Frames model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged Russian man who learned English as a second language and is now tutoring his niece for her English Olympiad.", "synthesized text": "\"{\\n\\\"name\\\": \\\"English Vocabulary Enhancement Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained word2vec model to find and return similar words or synonyms for a given word. This helps to enrich the user's vocabulary.\\\",\\n\\\"function_name\\\": \\\"get_similar_words\\\",\\n\\\"input_args\\\": {\\\"input_word\\\": \\\"The word for which the user wants to find similar words or synonyms\\\", \\\"topn\\\": \\\"Number of similar words to return. Default is 10.\\\"},\\n\\\"return\\\": \\\"A list of similar words or synonyms for the given word.\\\",\\n\\\"depend\\\": \\\"Gensim Python Library, Word2Vec model from Google News vectors\\\"\\n}\"", "description": "tool development"}
{"input persona": "A community advocate working to improve the drainage system in Staffordshire", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flood Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Flood Risk API from Environment Agency, UK to determine the flood risk for a given location. The user only needs to input their postcode and the interface will return the flood risk assessment for that area.\\\",\\n\\\"function_name\\\": \\\"get_flood_risk_assessment\\\",\\n\\\"input_args\\\": \\\"postcode\\\",\\n\\\"return\\\": \\\"A dictionary containing the flood risk assessment for each station in the area. Each key is a station's name and each value is the station's latest rainfall reading.\\\",\\n\\\"depend\\\": \\\"requests library, Environment Agency Flood Risk API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young child who is eager to learn how to ride a bike and stay safe on the roads", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bike Safety Guidelines Interface\\\",\\n\\\"description\\\": \\\"This interface returns a set of bike safety guidelines suitable for the input age. It uses a (hypothetical) BikeSafetyAPI to retrieve this information.\\\",\\n\\\"function_name\\\": \\\"get_bike_safety_guidelines\\\",\\n\\\"input_args\\\": \\\"age - the age of the child who is learning to ride a bike\\\",\\n\\\"return\\\": \\\"A list of bike safety guidelines suitable for the input age.\\\",\\n\\\"depend\\\": \\\"requests library, BikeSafetyAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pastor in the missionary's destination country who ensures their safety and provides updates to the parent", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Missionary Safety Update Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a text classification model to analyze the safety level of a specific area based on the content of news articles. It returns a safety score, with higher scores indicating safer areas.\\\",\\n  \\\"function_name\\\": \\\"classify_safety_level\\\",\\n  \\\"input_args\\\": \\\"news_article\\\",\\n  \\\"return\\\": \\\"safety_level\\\",\\n  \\\"depend\\\": \\\"tensorflow, tensorflow_hub, tensorflow_text\\\"\\n}\"", "description": "tool development"}
{"input persona": "A game developer seeking assistance in optimizing their game engine using C++ and Qt", "synthesized text": "\"{\\n\\\"name\\\": \\\"C++ Code Profiling Interface\\\",\\n\\\"description\\\": \\\"An interface to profile the performance of a C++ code using Python's cProfile and pstats libraries. Returns a detailed report of the C++ code performance.\\\",\\n\\\"function_name\\\": \\\"cplusplus_code_profiling\\\",\\n\\\"input_args\\\": {\\\"path_to_cpp\\\": \\\"The path to the C++ file to be profiled.\\\"},\\n\\\"return\\\": {\\\"stats_file\\\": \\\"The path to the text file containing the profiling report.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"subprocess\\\", \\\"cProfile\\\", \\\"pstats\\\", \\\"os\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am an experienced sysadmin and have faced similar cluster synchronization issues. I can definitely empathize with the frustration of trying to set up a new system and encountering such snags, especially when the solution isn't immediately obvious.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cluster Node Synchronization Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to execute a command on a cluster of machines by providing the IP addresses of the nodes, the username and password, and the command to be executed. It returns the output of the command from each node.\\\",\\n\\\"function_name\\\": \\\"execute_on_cluster\\\",\\n\\\"input_args\\\": [\\\"cluster_ips\\\", \\\"username\\\", \\\"password\\\", \\\"command\\\"],\\n\\\"return\\\": \\\"A dictionary where the keys are the IP addresses and the values are the respective outputs of the executed command.\\\",\\n\\\"depend\\\": \\\"Python's paramiko library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gritty electric guitarist who's been playing gritty Chicago blues for decades", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chord Progression Generator Interface\\\",\\n\\\"description\\\": \\\"Generates a list of chords for a given key and roman numeral progression\\\",\\n\\\"function_name\\\": \\\"generate_chord_progression\\\",\\n\\\"input_args\\\": [\\\"key\\\", \\\"progression\\\"],\\n\\\"return\\\": \\\"List of chords\\\",\\n\\\"depend\\\": [\\\"music21 library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A cognitive psychologist who often shares insights about the power of discipline and routine", "synthesized text": "\"{\\n\\\"name\\\": \\\"Habit Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to track a new habit and mark any day as completed. It returns a DataFrame showing the progress of the habit.\\\",\\n\\\"function_name\\\": [\\\"start_new_habit\\\", \\\"mark_habit_as_completed\\\"],\\n\\\"input_args\\\": {\\n    \\\"start_new_habit\\\": [\\\"name\\\", \\\"start_date\\\"],\\n    \\\"mark_habit_as_completed\\\": [\\\"habit_df\\\", \\\"day\\\"]\\n},\\n\\\"return\\\": {\\n    \\\"start_new_habit\\\": \\\"A DataFrame showing the habit's progress from the start date to the current date.\\\",\\n    \\\"mark_habit_as_completed\\\": \\\"The updated DataFrame with the specified day marked as completed.\\\"\\n},\\n\\\"depend\\\": \\\"Python's datetime and pandas libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Argentine football fan who's been following Thiago Ojeda's career since his Vélez Sarsfield days.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Player Stats Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches the latest stats of a specified football player using the Sports Open Data API.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": {\\\"player_name\\\": \\\"Name of the player\\\"},\\n\\\"return\\\": { \\\"name\\\": \\\"Player's name\\\", \\\"team\\\": \\\"Player's current team\\\", \\\"position\\\": \\\"Player's field position\\\", \\\"appearances\\\": \\\"Number of matches the player has appeared in\\\", \\\"goals\\\": \\\"Number of goals scored by the player\\\", \\\"assists\\\": \\\"Number of assists by the player\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"web APIs\\\": [\\\"Sports Open Data API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A young enthusiast responsible for promoting the magazine and organizing subscription drives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Magazine Subscription Management Interface\\\",\\n\\\"description\\\": \\\"An interface to manage subscribers of a magazine. Users can add a new subscriber to the subscription list.\\\",\\n\\\"function_name\\\": \\\"add_subscriber_to_magazine\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"email\\\", \\\"magazine_name\\\"],\\n\\\"return\\\": \\\"A message indicating the success or failure of the operation.\\\",\\n\\\"depend\\\": \\\"Web APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A firefighter who relies on physical fitness to perform their duties effectively", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fitness Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface to get daily fitness summary from a user's Fitbit account.\\\",\\n\\\"function_name\\\": \\\"get_daily_fitness_summary\\\",\\n\\\"input_args\\\": [\\\"user_id\\\"],\\n\\\"return\\\": {\\\"steps\\\": \\\"int\\\", \\\"distance\\\": \\\"float\\\", \\\"caloriesBurned\\\": \\\"int\\\", \\\"activeMinutes\\\": \\\"int\\\"},\\n\\\"depend\\\": [\\\"Fitbit Web API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a descendant of Sir Kenneth Anderson", "synthesized text": "\"{\\n\\\"name\\\": \\\"Family Tree Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch family tree information of a person using the FamilySearch API.\\\",\\n\\\"function_name\\\": \\\"get_family_tree\\\",\\n\\\"input_args\\\": \\\"name\\\",\\n\\\"return\\\": \\\"A dictionary containing family tree information for the input name.\\\",\\n\\\"depend\\\": \\\"FamilySearch API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced projectionist who has been working in theaters for decades and has valuable tips and tricks to share", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Movie Projectionist Tips Interface\\\",\\n  \\\"description\\\": \\\"An interface to generate tips for movie projectionists using a large language model from Hugging Face transformers.\\\",\\n  \\\"function_name\\\": \\\"generate_projectionist_tips\\\",\\n  \\\"input_args\\\": {\\n    \\\"topic\\\": \\\"A string representing the topic the user wants tips on. For example, 'film loading', 'equipment maintenance', 'lighting adjustment', etc.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of strings. Each string is a tip related to the input topic.\\\",\\n  \\\"depend\\\": \\\"Hugging Face transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Python developer who argues that Python is a superior language for its readability and simplicity", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Code Formatting Interface\\\",\\n    \\\"description\\\": \\\"An interface that uses the 'black' Python library to automatically format Python code to conform to the PEP 8 style guide.\\\",\\n    \\\"function_name\\\": \\\"format_python_code\\\",\\n    \\\"input_args\\\": [\\\"code\\\"],\\n    \\\"return\\\": \\\"Formatted Python code.\\\",\\n    \\\"depend\\\": [\\\"black Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "The owner of an archery equipment company who supplies specialized adaptive equipment and supports the athlete's competitions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Archery Score Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the score of an archery athlete in a future competition based on the athlete's and competition's details\\\",\\n\\\"function_name\\\": \\\"predict_archery_score\\\",\\n\\\"input_args\\\": [\\\"athlete_details\\\", \\\"competition_details\\\"],\\n\\\"return\\\": \\\"Predicted score (integer)\\\",\\n\\\"depend\\\": \\\"PyTorch library, trained model file (trained_archery_model.pth)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A digital marketing specialist who provides strategies for promoting copyright-protected content", "synthesized text": "\"{\\n\\\"name\\\": \\\"Content Promotion Strategy Interface\\\",\\n\\\"description\\\": \\\"This interface provides the user with a list of popular subreddits or hashtags related to the provided content's title, allowing a digital marketing specialist to effectively plan a promotion strategy for copyright-protected content.\\\",\\n\\\"function_name\\\": [\\\"get_popular_subreddits\\\", \\\"get_popular_hashtags\\\"],\\n\\\"input_args\\\": [\\\"title\\\"],\\n\\\"return\\\": \\\"List of popular subreddits or hashtags.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup (Python library)\\\", \\\"Reddit (Web API)\\\", \\\"DataGemba Hashtag API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A PhD student spending long hours in the library doing research for their thesis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts text into speech, generating an mp3 file.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"String - The text to convert to speech\\\",\\n    \\\"filename\\\": \\\"String - The name of the output mp3 file\\\"\\n},\\n\\\"return\\\": \\\"None - The function saves the speech as an mp3 file with the name provided by the user\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS) library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A structural engineer who believes that geotechnical engineering is not as significant in building design as structural engineering", "synthesized text": "\"{\\n\\\"name\\\": \\\"Soil Liquefaction Risk Estimator\\\",\\n\\\"description\\\": \\\"An interface that predicts the risk of soil liquefaction at a site given soil parameters. The interface uses a machine learning model trained on geotechnical data.\\\",\\n\\\"function_name\\\": \\\"predict_liquefaction_risk\\\",\\n\\\"input_args\\\": \\\"A dictionary of soil parameters. For example: {'depth': 10, 'water table depth': 5, 'fines content': 20, 'mean grain size': 0.06}\\\",\\n\\\"return\\\": \\\"The predicted probability of soil liquefaction at the given site.\\\",\\n\\\"depend\\\": \\\"A pickle file of a trained sklearn model. The model should be capable of predicting soil liquefaction based on relevant soil parameters.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A visionary leader who sets the overall direction and goals for the healthcare organization", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Patient Readmission Risk Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predict the risk of patients being readmitted within 30 days based on their medical records\\\",\\n  \\\"function_name\\\": \\\"predict_readmission_risk\\\",\\n  \\\"input_args\\\": \\\"medical_record\\\",\\n  \\\"return\\\": \\\"risk\\\",\\n  \\\"depend\\\": \\\"Hugging Face's transformers library and a pre-trained model for patient readmission prediction\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a mother with a child who also suffers from sickle cell disease.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sickle Cell Disease Severity Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the severity of sickle cell disease based on a patient's age, hemoglobin level, and the number of crisis events in the past year.\\\",\\n\\\"function_name\\\": \\\"predict_scd_severity\\\",\\n\\\"input_args\\\": [\\n    {\\\"name\\\": \\\"model_path\\\", \\\"type\\\": \\\"str\\\", \\\"description\\\": \\\"Path to the pre-trained machine learning model.\\\"},\\n    {\\\"name\\\": \\\"age\\\", \\\"type\\\": \\\"int\\\", \\\"description\\\": \\\"The child's age.\\\"},\\n    {\\\"name\\\": \\\"hemoglobin_level\\\", \\\"type\\\": \\\"float\\\", \\\"description\\\": \\\"The child's hemoglobin level.\\\"},\\n    {\\\"name\\\": \\\"crisis_events\\\", \\\"type\\\": \\\"int\\\", \\\"description\\\": \\\"The number of crisis events in the past year.\\\"}\\n],\\n\\\"return\\\": {\\\"type\\\": \\\"float\\\", \\\"description\\\": \\\"Predicted severity of the sickle cell disease.\\\"},\\n\\\"depend\\\": [\\\"sklearn\\\", \\\"pickle\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A database administrator responsible for managing large datasets used in the AI models", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Data Cleaning Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface that automates the data cleaning process using Pandas library. It fills missing values with appropriate values, removes outliers, and converts data types into appropriate types.\\\",\\n  \\\"function_name\\\": \\\"clean_data\\\",\\n  \\\"input_args\\\": \\\"path_to_data - The path to the csv file containing the data.\\\",\\n  \\\"return\\\": \\\"A cleaned dataframe where missing values are filled, outliers are removed, and data types are converted into appropriate types.\\\",\\n  \\\"depend\\\": \\\"Python library - Pandas, Scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a member of a whitewater kayaking club who looks up to Benny Marr as a well-loved idol", "synthesized text": "\"{\\n\\\"name\\\": \\\"River Difficulty Evaluation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the USGS Water Data API and a pre-trained TensorFlow model to predict the difficulty of a river section based on its current water flow rate. Users only need to input the USGS site number of the river section, and the interface will return the predicted difficulty of the river section.\\\",\\n\\\"function_name\\\": \\\"evaluate_river_difficulty\\\",\\n\\\"input_args\\\": {\\\"site_number\\\": \\\"String\\\"},\\n\\\"return\\\": \\\"Float\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"USGS Water Data API\\\", \\\"Pre-trained TensorFlow model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an Australian music producer who worked in the music industry during the 2000s", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Feature Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts key features from a music file, including tempo, beat frames, mel-scaled spectrogram, and MFCCs.\\\",\\n\\\"function_name\\\": \\\"extract_music_features\\\",\\n\\\"input_args\\\": {\\\"music_path\\\": \\\"Path to the music file\\\"},\\n\\\"return\\\": {\\\"tempo\\\": \\\"Tempo of the music track\\\", \\\"beat_frames\\\": \\\"Beat frames of the music track\\\", \\\"mel_spectrogram\\\": \\\"Mel-scaled spectrogram of the music track\\\", \\\"mfcc\\\": \\\"MFCCs of the music track\\\"},\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"librosa\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A young child with a chronic illness who could benefit from the use of synthetic biomaterials", "synthesized text": "\"{\\n\\\"name\\\": \\\"Biomaterial Compatibility Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to predict the compatibility of a synthetic biomaterial with a specific illness.\\\",\\n\\\"function_name\\\": \\\"predict_biomaterial_compatibility\\\",\\n\\\"input_args\\\": [\\\"illness_description\\\", \\\"biomaterial_description\\\"],\\n\\\"return\\\": {\\\"compatibility_score\\\": \\\"float\\\", \\\"predicted_class\\\": \\\"int\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"torch\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"bert-base-cased-finetuned-mrpc from HuggingFace\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "an aspiring young rapper from New York, always hungry for the newest trends in Hip-Hop", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hip-Hop Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Spotify Web API to identify trending topics in the Hip-Hop scene by analyzing the titles of top Hip-Hop playlists.\\\",\\n\\\"function_name\\\": \\\"get_trending_hip_hop_topics\\\",\\n\\\"input_args\\\": \\\"None\\\",\\n\\\"return\\\": \\\"A dictionary of the top 10 most common words in the titles of the top Hip-Hop playlists, along with their frequencies.\\\",\\n\\\"depend\\\": \\\"Spotify Web API, Python libraries: requests, json, re, collections.Counter\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skilled jazz musician who draws inspiration from the unique sound of Blood, Sweat & Tears", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Feature Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to extract key features from a piece of music. The user only needs to provide the music's file path, and the interface will return the tempo, beat frames, and chroma feature of the music.\\\",\\n\\\"function_name\\\": \\\"music_feature_extraction\\\",\\n\\\"input_args\\\": {\\\"music_file_path\\\": \\\"string representing the path of the music file\\\"},\\n\\\"return\\\": {\\\"tempo\\\": \\\"float representing the estimated tempo\\\", \\\"beat_frames\\\": \\\"list of integers representing the beat frames\\\", \\\"chroma_feature\\\": \\\"2D list of floats representing the chroma feature\\\"},\\n\\\"depend\\\": {\\\"python library\\\": [\\\"librosa\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A hardcore gamer convinced that video games have a greater cultural impact than movies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Game Details Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the details about a specific video game using the RAWG Video Game Database API.\\\",\\n\\\"function_name\\\": \\\"get_game_details\\\",\\n\\\"input_args\\\": \\\"game_name - The name of the video game whose details are to be fetched.\\\",\\n\\\"return\\\": \\\"A dictionary with the game's name, description, release date, developer, and rating.\\\",\\n\\\"depend\\\": \\\"requests, RAWG API\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个研究冲突解决与国际法的学者，专长在于分析亚美尼亚和阿塞拜疆的历时冲突。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conflict Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get conflict data between two countries from a specified time interval using the GDELT Project's API.\\\",\\n\\\"function_name\\\": \\\"get_conflict_data\\\",\\n\\\"input_args\\\": {\\n    \\\"country1\\\": \\\"Name of the first country involved in the conflict.\\\",\\n    \\\"country2\\\": \\\"Name of the second country involved in the conflict.\\\",\\n    \\\"start_date\\\": \\\"Start date of the time interval. Format: YYYYMMDDHHMMSS.\\\",\\n    \\\"end_date\\\": \\\"End date of the time interval. Format: YYYYMMDDHHMMSS.\\\"\\n},\\n\\\"return\\\": \\\"A pandas DataFrame containing the conflict data between the two countries in the specified time interval.\\\",\\n\\\"depend\\\": \\\"Python's requests and pandas libraries, GDELT Project's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A property valuer who provides expert advice on the worth of various land holdings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Valuation Interface\\\",\\n\\\"description\\\": \\\"An interface that provides an estimate of a property's market value based on its address. The estimate is a range with a low and high value.\\\",\\n\\\"function_name\\\": \\\"get_property_value\\\",\\n\\\"input_args\\\": {\\\"address\\\": \\\"A string indicating the property's address\\\", \\\"citystatezip\\\": \\\"A string indicating the city, state, and ZIP code where the property is located\\\"},\\n\\\"return\\\": {\\\"low\\\": \\\"A string indicating the lower estimate of the property's value\\\", \\\"high\\\": \\\"A string indicating the higher estimate of the property's value\\\"},\\n\\\"depend\\\": {\\\"requests\\\": \\\"Python library for making HTTP requests\\\", \\\"xml.etree.ElementTree\\\": \\\"Python library for parsing and creating XML data\\\", \\\"Zillow's Real Estate API\\\": \\\"Web API for accessing property and real estate data\\\"}\\n}\"", "description": "tool development"}
{"input persona": "An automotive engineer providing technical analysis and testimony in automotive-related lawsuits", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Crash Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the severity of a car crash based on various parameters like speed, type of vehicles involved, and weather conditions.\\\",\\n\\\"function_name\\\": \\\"predict_crash_severity\\\",\\n\\\"input_args\\\": {\\n    \\\"speed\\\": \\\"The speed of the vehicle(s) at the time of the crash.\\\",\\n    \\\"vehicle_type\\\": \\\"The type of vehicle(s) involved in the crash.\\\",\\n    \\\"weather_condition\\\": \\\"The weather condition at the time of the crash.\\\"\\n},\\n\\\"return\\\": \\\"The predicted severity of the crash.\\\",\\n\\\"depend\\\": \\\"This function requires the python libraries pandas, xgboost and sklearn; and a pre-trained machine learning model named 'crash_severity_model.model'.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A digital forensics expert who competes in CTFs (Capture the Flag) as a hobby", "synthesized text": "\"{\\n\\\"name\\\": \\\"Password Hash Cracker Interface\\\",\\n\\\"description\\\": \\\"This interface takes a hashed password and its hash type (md5, sha1, or sha256), and attempts to crack it using a dictionary attack. It returns the cracked password if it exists in the dictionary, otherwise it returns 'Password not found in dictionary'.\\\",\\n\\\"function_name\\\": \\\"hash_cracker\\\",\\n\\\"input_args\\\": {\\\"hash_type\\\": \\\"string\\\", \\\"hashed_password\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"hashlib\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A renowned food scientist and author of books on fermentation and food preservation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Recipe Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spoonacular API to generate recipes based on the ingredients provided by the user.\\\",\\n\\\"function_name\\\": \\\"get_recipes\\\",\\n\\\"input_args\\\": \\\"ingredients - A list of ingredients the user has on hand\\\",\\n\\\"return\\\": \\\"A list of recipes that can be made using the provided ingredients, each recipe includes the title, number of used ingredients, and number of missed ingredients.\\\",\\n\\\"depend\\\": \\\"Spoonacular API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A gaming journalist who is passionate about science and dinosaurs.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dinosaur Facts Interface\\\",\\n\\\"description\\\": \\\"This interface fetches interesting facts about dinosaurs using the Dinopedia API.\\\",\\n\\\"function_name\\\": \\\"get_dinosaur_fact\\\",\\n\\\"input_args\\\": {\\n    \\\"dinosaur_name\\\": \\\"string - The name of the dinosaur\\\"\\n},\\n\\\"return\\\": \\\"string - A fact about the dinosaur or a message if the dinosaur is not found.\\\",\\n\\\"depend\\\": \\\"requests library, Dinopedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A First Order BB unit tasked with hunting down and disabling BB-8", "synthesized text": "\"{\\n\\\"name\\\": \\\"Star Wars Character Info Interface\\\",\\n\\\"description\\\": \\\"This interface fetches details about a specific Star Wars character from the Star Wars API (SWAPI).\\\",\\n\\\"function_name\\\": \\\"get_star_wars_character_info\\\",\\n\\\"input_args\\\": \\\"character_name - name of the Star Wars character\\\",\\n\\\"return\\\": \\\"A dictionary with information about the character, including name, height, mass, hair color, skin color, eye color, birth year, gender, home world, species, vehicles, and starships. If the character is not found, returns a message stating that no character was found for the provided character name.\\\",\\n\\\"depend\\\": \\\"requests library, Star Wars API (SWAPI)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A playwright who excels in character-driven dramas set in ordinary, everyday situations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Character Name Generator Interface\\\",\\n  \\\"description\\\": \\\"This interface generates unique character names based on a given culture or nationality using a transformer-based language model from Hugging Face.\\\",\\n  \\\"function_name\\\": \\\"generate_character_names\\\",\\n  \\\"input_args\\\": \\\"culture\\\",\\n  \\\"return\\\": \\\"A list of 10 unique names\\\",\\n  \\\"depend\\\": \\\"Hugging Face's transformer-based language model (GPT-2)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former sailor who became a music teacher after retiring from the navy.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Sheet Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to an image file of a music sheet as input and returns the recognized music notations in a standardized format like MusicXML or MIDI.\\\",\\n\\\"function_name\\\": \\\"music_sheet_recognition\\\",\\n\\\"input_args\\\": \\\"path_to_image\\\",\\n\\\"return\\\": \\\"music_notation\\\",\\n\\\"depend\\\": \\\"Python library: cv2, Machine Learning model: Audiveris\\\"\\n}\"", "description": "tool development"}
{"input persona": "A stickler for chronological order", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Timeline Verification Interface\\\",\\n  \\\"description\\\": \\\"This interface verifies if a list of events with dates are in chronological order. If not, it returns the first event that is out of order.\\\",\\n  \\\"function_name\\\": \\\"verify_chronological_order\\\",\\n  \\\"input_args\\\": [\\\"events\\\"],\\n  \\\"return\\\": [\\\"Boolean indicating if events are in order\\\", \\\"First event out of order, if any\\\"],\\n  \\\"depend\\\": [\\\"datetime\\\", \\\"dateutil.parser\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a hemp farmer who has recently made a significant investment in expanding CBD production on their farm", "synthesized text": "\"{\\n\\\"name\\\": \\\"CBD Potency Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the CBD potency of a Hemp crop given inputs like the strain of hemp, the soil composition, amount of sunlight, amount of water, etc.\\\",\\n\\\"function_name\\\": \\\"predict_cbd_potency\\\",\\n\\\"input_args\\\": [\\\"strain\\\", \\\"soil_composition\\\", \\\"sunlight_hours\\\", \\\"water_ml\\\"],\\n\\\"return\\\": \\\"A float that represents the predicted CBD potency of the crop.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, and a pre-trained model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A U.S. senator who opposes dialogue with Iran and advocates for a more aggressive approach", "synthesized text": "\"{\\n\\\"name\\\": \\\"Iran Sanctioned Entities Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search the U.S. Department of the Treasury's Specially Designated Nationals List (SDN List) to find out if a certain entity is sanctioned by the U.S.\\\",\\n\\\"function_name\\\": \\\"search_sanctioned_entities\\\",\\n\\\"input_args\\\": \\\"entity_name\\\",\\n\\\"return\\\": \\\"A list of sanctioned entities that match the input name.\\\",\\n\\\"depend\\\": \\\"U.S. Department of the Treasury's SDN List API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an active community member and parent from Marysville", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Child Safe Search Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Google's SafeSearch API to return safe and relevant search results. It's particularly useful for parents who want to ensure their children are accessing appropriate content.\\\",\\n  \\\"function_name\\\": \\\"child_safe_search\\\",\\n  \\\"input_args\\\": \\\"query - The search query as a string.\\\",\\n  \\\"return\\\": \\\"A list of safe and relevant search results.\\\",\\n  \\\"depend\\\": \\\"Google SafeSearch API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Dutch expat residing in the United States who toggles between nostalgia for her home country and a fascination with American cinema.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dutch to English Movie Title Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates Dutch movie titles to English using the Google Cloud Translation API. It allows Dutch expats in the US to easily find and watch the American versions of their favorite Dutch films.\\\",\\n\\\"function_name\\\": \\\"translate_movie_title\\\",\\n\\\"input_args\\\": \\\"dutch_title - A string representing the Dutch title of a movie\\\",\\n\\\"return\\\": \\\"A string representing the English translation of the Dutch movie title\\\",\\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A stressed-out corporate executive looking to relieve stress and improve fitness through boxing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Boxing Workout Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a personalized boxing workout based on the user's fitness level (beginner, intermediate, advanced) and their goal (stress relief, weight loss, strength building).\\\",\\n\\\"function_name\\\": \\\"generate_boxing_workout\\\",\\n\\\"input_args\\\": [\\\"fitness_level\\\", \\\"goal\\\"],\\n\\\"return\\\": \\\"A list of 5 selected workouts for boxing.\\\",\\n\\\"depend\\\": \\\"Python's built-in library 'random'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A huge fan of Vietnamese game shows and music.", "synthesized text": "\"{\\n\\\"name\\\": \\\"YouTube Video Downloader Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to download YouTube videos by providing the video URL and the save directory path.\\\",\\n\\\"function_name\\\": \\\"download_youtube_video\\\",\\n\\\"input_args\\\": {\\n    \\\"video_url\\\": \\\"The URL of the YouTube video.\\\",\\n    \\\"save_path\\\": \\\"The directory path to save the downloaded video.\\\"\\n},\\n\\\"return\\\": \\\"A message indicating the save location upon successful download.\\\",\\n\\\"depend\\\": \\\"Pytube Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an immigrant who came to the United States with nothing,", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Market Analysis Interface\\\", \\n\\\"description\\\": \\\"An interface that fetches and returns 5 years of historical data for a given stock from Yahoo Finance.\\\", \\n\\\"function_name\\\": \\\"get_historical_data\\\", \\n\\\"input_args\\\": [\\\"stock_symbol\\\"], \\n\\\"return\\\": \\\"A DataFrame containing historical stock data for the past 5 years.\\\", \\n\\\"depend\\\": [\\\"yfinance library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a graduate student specializing in materials science with a focus on piezoelectric materials.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Property Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the piezoelectric constant of a material given its chemical formula. It uses a machine learning model trained on materials data.\\\",\\n\\\"function_name\\\": \\\"predict_piezoelectric_constant\\\",\\n\\\"input_args\\\": \\\"formula - A string representing the chemical formula of the material\\\",\\n\\\"return\\\": \\\"A float representing the predicted piezoelectric constant of the material\\\",\\n\\\"depend\\\": \\\"This function depends on the Python libraries matminer, scikit-learn, joblib, pandas, and pymatgen. It also leverages a pre-trained machine learning model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional butcher who is resistant to change and views veganism as a threat to their business", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vegan Product Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface to recommend vegan products that a traditional butcher might consider selling. The recommendation is based on a pre-trained model from TensorFlow Recommender System (TFRS).\\\",\\n\\\"function_name\\\": \\\"recommend_vegan_products\\\",\\n\\\"input_args\\\": [\\\"product_list - a list of product names (strings) currently sold by the butcher.\\\"],\\n\\\"return\\\": [\\\"A list of recommended vegan product names (strings) that the butcher might consider selling.\\\"],\\n\\\"depend\\\": [\\\"TensorFlow\\\", \\\"TensorFlow Recommender System (TFRS)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow doctoral candidate studying the socio-cultural impact of Ottoman architecture in the Balkans", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Building Recognition Interface\\\", \\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to identify historical buildings from images. It is useful for researchers studying architecture.\\\", \\n\\\"function_name\\\": \\\"detect_buildings\\\", \\n\\\"input_args\\\": \\\"path_to_image: The path to the image file\\\", \\n\\\"return\\\": \\\"Returns a string indicating whether a building was detected in the image and the model's confidence score if a building was detected\\\", \\n\\\"depend\\\": \\\"Python libraries: PIL, requests, io, numpy, tensorflow, tensorflow_hub; Machine learning model: Faster R-CNN from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A politician who recognizes the importance of diversity in the tech sector and actively pushes for policies to promote it", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Detection Interface\\\", \\n\\\"description\\\": \\\"This interface uses a pre-trained model from HuggingFace to detect the language of a given text. This can be useful for understanding language diversity in different online tech communities.\\\", \\n\\\"function_name\\\": \\\"detect_language\\\", \\n\\\"input_args\\\": \\\"text\\\", \\n\\\"return\\\": \\\"Detected language of the input text\\\", \\n\\\"depend\\\": \\\"HuggingFace Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curious grandchild who is learning to play the cello and often asks for tips and stories about the orchestra", "synthesized text": "\"{\\n\\\"name\\\": \\\"Orchestra Instrument Recognition Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that uses a TensorFlow Hub model to identify the musical instruments in an audio file.\\\",\\n\\\"function_name\\\": \\\"recognize_instruments\\\",\\n\\\"input_args\\\": \\\"file_path - The path to the audio file.\\\",\\n\\\"return\\\": \\\"A string representing the musical instrument that is most prominent in the audio file.\\\",\\n\\\"depend\\\": \\\"Python's TensorFlow and TensorFlow Hub libraries, and a pre-trained YAMNet model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A climate scientist who is particularly interested in the African Monsoon", "synthesized text": "\"{\\n\\\"name\\\": \\\"Climate Data Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts climate data for a specified area and time period from the C3S Climate Data Store (CDS) using their API. The user specifies the type of data ('product'), the geographic area of interest, the temporal resolution, and the time period.\\\",\\n\\\"function_name\\\": \\\"get_climate_data\\\",\\n\\\"input_args\\\": {\\n    \\\"product\\\": \\\"string\\\",\\n    \\\"area\\\": \\\"list of 4 floats\\\",\\n    \\\"temporal_resolution\\\": \\\"string\\\",\\n    \\\"time_period\\\": \\\"dictionary with 'year', 'month', 'day'\\\"\\n  },\\n\\\"return\\\": \\\"Downloaded data file in NetCDF format.\\\",\\n\\\"depend\\\": \\\"cdsapi Python library, C3S Climate Data Store (CDS) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Code reviewer with a focus on Django models and migrations.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Django Migration Checker Interface\\\",\\n\\\"description\\\": \\\"This interface checks if all Django migrations are applied and if there are any changes that require migrations. It uses Django's management commands internally.\\\",\\n\\\"function_name\\\": \\\"check_django_migrations\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A string message indicating whether all migrations are applied, if there are any changes that require migrations, or if an error occurred.\\\",\\n\\\"depend\\\": [\\\"python subprocess module\\\", \\\"Django management commands\\\"]\\n}\"", "description": "tool development"}
{"input persona": "As an aspiring Canadian musician trying to break into the indie scene, I'm deeply inspired by local success stories.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Genre Classification Interface\\\", \\n\\\"description\\\": \\\"This interface uses a TensorFlow model to classify music genres from an audio file. The user inputs the path to an audio file, and the interface returns the likely genre of the music.\\\", \\n\\\"function_name\\\": \\\"classify_music_genre\\\", \\n\\\"input_args\\\": \\\"file_path\\\", \\n\\\"return\\\": \\\"string (music genre)\\\", \\n\\\"depend\\\": {\\\"Python libraries\\\": [\\\"tensorflow\\\", \\\"pydub\\\", \\\"numpy\\\", \\\"librosa\\\"], \\\"Machine Learning Model\\\": \\\"pre-trained TensorFlow model for music genre classification\\\"}\\n}\"", "description": "tool development"}
{"input persona": "一个在澳门长大但现在居住在别国的澳门土生葡人，对家乡的新闻保持关注", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u65b0\\u95fb\\u7ffb\\u8bd1\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u83b7\\u53d6\\u6fb3\\u95e8\\u7684\\u6700\\u65b0\\u65b0\\u95fb\\uff0c\\u7136\\u540e\\u5c06\\u65b0\\u95fb\\u4ece\\u4e2d\\u6587\\u7ffb\\u8bd1\\u6210\\u8461\\u8404\\u7259\\u8bed\\u3002\\\",\\n\\\"function_name\\\": \\\"translate_news\\\",\\n\\\"input_args\\\": {\\n    \\\"category\\\": \\\"\\u7528\\u6237\\u611f\\u5174\\u8da3\\u7684\\u65b0\\u95fb\\u7c7b\\u522b\\\"\\n},\\n\\\"return\\\": \\\"\\u4e00\\u7cfb\\u5217\\u4ee5\\u8461\\u8404\\u7259\\u8bed\\u5448\\u73b0\\u7684\\u65b0\\u95fb\\u6807\\u9898\\\",\\n\\\"depend\\\": \\\"python\\u5e93\\uff1arequests\\uff0ctransformers\\uff1bWeb API\\uff1aNewsAPI\\uff1b\\u673a\\u5668\\u5b66\\u4e60\\u6a21\\u578b\\uff1aHelsinki-NLP/opus-mt-zh-pt\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software company CEO looking to revamp the user interface of their flagship .NET application", "synthesized text": "\"{\\n\\\"name\\\": \\\"UI Theme Change Interface\\\",\\n\\\"description\\\": \\\"An interface to update the theme of a .NET application. User inputs the path to the .NET application, the theme name, and the color scheme, and the interface updates the theme of the .NET application.\\\",\\n\\\"function_name\\\": \\\"change_ui_theme\\\",\\n\\\"input_args\\\": [\\\"application_path\\\", \\\"theme_name\\\", \\\"color_scheme\\\"],\\n\\\"return\\\": \\\"A string confirming that the theme has been updated.\\\",\\n\\\"depend\\\": [\\\"clr\\\", \\\"System.IO\\\", \\\"System.Windows.Forms\\\", \\\"System.Drawing\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Een wiskundeleraar op een middelbare school die interesse heeft in beroemde wiskundigen en hun bijdragen aan de wiskunde.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wiskundige Informatie Interface\\\",\\n\\\"description\\\": \\\"Haalt informatie op over een beroemde wiskundige van hun Wikipedia-pagina.\\\",\\n\\\"function_name\\\": \\\"get_mathematician_info\\\",\\n\\\"input_args\\\": {\\n    \\\"mathematician_name\\\": \\\"De naam van de wiskundige.\\\"\\n},\\n\\\"return\\\": \\\"Een samenvatting van de Wikipedia-pagina van de wiskundige.\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Jewish synagogue member from Florida who values community participation", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Event Finder Interface\\\",\\n  \\\"description\\\": \\\"Finds local events based on the user's location and interest category. The events are retrieved from the Eventbrite API.\\\",\\n  \\\"function_name\\\": \\\"find_local_events\\\",\\n  \\\"input_args\\\": [\\\"location\\\", \\\"event_category\\\"],\\n  \\\"return\\\": \\\"A list of tuples, each containing the event name, start time, and URL.\\\",\\n  \\\"depend\\\": \\\"Eventbrite API and requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a fellow demographer and friend of Samuel J. Clark", "synthesized text": "\"{\\n\\\"name\\\": \\\"Population Growth Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the future population growth using a Bayesian model. It takes as input the current population, birth rate, death rate, and the number of years for which the estimation should be made.\\\",\\n\\\"function_name\\\": \\\"estimate_population_growth\\\",\\n\\\"input_args\\\": [\\\"current_population\\\", \\\"birth_rate\\\", \\\"death_rate\\\", \\\"years\\\"],\\n\\\"return\\\": \\\"Estimate of the population after the given number of years.\\\",\\n\\\"depend\\\": [\\\"PyMC3\\\", \\\"NumPy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a former Green Pastures Elementary School gym teacher, who was born and raised in Oklahoma", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the current weather forecast for a specified city using OpenWeatherMap API. Users only need to input their city name.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\n    \\\"city\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"The name of the city to fetch the weather forecast for.\\\"}\\n},\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"dictionary\\\",\\n    \\\"description\\\": \\\"A dictionary with description, temperature and humidity of the city's weather.\\\",\\n    \\\"structure\\\": {\\n        \\\"description\\\": {\\\"type\\\": \\\"string\\\", \\\"description\\\": \\\"Weather conditions in the city.\\\"},\\n        \\\"temperature\\\": {\\\"type\\\": \\\"float\\\", \\\"description\\\": \\\"Current temperature in the city.\\\"},\\n        \\\"humidity\\\": {\\\"type\\\": \\\"int\\\", \\\"description\\\": \\\"Current humidity in the city.\\\"}\\n    }\\n},\\n\\\"depend\\\": {\\\"Web API\\\": \\\"OpenWeatherMap API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A tireless director known for his innovative approach to sitcom productions", "synthesized text": "\"{\\n\\\"name\\\" : \\\"Script Analysis Interface\\\",\\n\\\"description\\\" : \\\"An interface that uses a pre-trained NLP model to analyze a script and predict the type of humor in it.\\\",\\n\\\"function_name\\\" : \\\"analyze_script\\\",\\n\\\"input_args\\\" : \\\"script : str\\\",\\n\\\"return\\\" : \\\"str (Humor type)\\\",\\n\\\"depend\\\" : \\\"huggingface's transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physicist conducting experiments to understand the structural properties of polymers at the atomic level", "synthesized text": "\"{\\n\\\"name\\\": \\\"Polymer Property Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from HuggingFace to predict the properties of molecules, including polymers. The user inputs the SMILES representation of the polymer, and the interface returns the predicted properties.\\\",\\n\\\"function_name\\\": \\\"predict_polymer_properties\\\",\\n\\\"input_args\\\": [\\\"smiles_string\\\"],\\n\\\"return\\\": \\\"Dictionary with predicted properties of the polymer molecule (molar_refractivity, polar_surface_area, bioavailability, lipophilicity)\\\",\\n\\\"depend\\\": \\\"HuggingFace transformers library, PyTorch\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wrongly convicted man who has spent years in prison for a crime he did not commit", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequence Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface uses BioPython to compare DNA sequences, aiming to aid in the exoneration process for wrongly convicted individuals.\\\",\\n\\\"function_name\\\": \\\"compare_dna_sequences\\\",\\n\\\"input_args\\\": {\\\"seq1\\\": \\\"string\\\", \\\"seq2\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": [\\\"BioPython\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A grandparent who grew up in a time when strict discipline and memorization were the foundations of education", "synthesized text": "\"{\\n\\\"name\\\": \\\"Math Problem Solver Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a mathematical equation as a string and returns the solution.\\\",\\n\\\"function_name\\\": \\\"solve_math_problem\\\",\\n\\\"input_args\\\": \\\"equation - a string representing a mathematical equation. For example, 'x + 2 - 3 = 0'\\\",\\n\\\"return\\\": \\\"The solution to the equation. For example, [1]\\\",\\n\\\"depend\\\": \\\"This function leverages the SymPy library, a Python library for symbolic mathematics.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A programmer who relies on stable server environments to deploy applications", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Server Health Check Interface\\\",\\n    \\\"description\\\": \\\"An interface to monitor system usage metrics such as CPU, memory, disk usage, and network.\\\",\\n    \\\"function_name\\\": \\\"check_server_health\\\",\\n    \\\"input_args\\\": [],\\n    \\\"return\\\": {\\n        \\\"cpu_usage\\\": \\\"Percentage of CPU usage\\\",\\n        \\\"mem_usage\\\": \\\"Percentage of memory usage\\\",\\n        \\\"disk_usage\\\": \\\"Percentage of disk usage\\\",\\n        \\\"network_info\\\": {\\n            \\\"bytes_sent\\\": \\\"Number of bytes sent\\\",\\n            \\\"bytes_recv\\\": \\\"Number of bytes received\\\"\\n        }\\n    },\\n    \\\"depend\\\": [\\\"psutil\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired civil servant who volunteered for the Salt Lake Branch of the NAACP for many years", "synthesized text": "\"{\\n\\\"name\\\": \\\"Civil Rights Event Locator\\\",\\n\\\"description\\\": \\\"This interface uses Eventbrite's API to provide users with a list of upcoming civil rights events in their area.\\\",\\n\\\"function_name\\\": \\\"get_civil_rights_events\\\",\\n\\\"input_args\\\": \\\"city\\\",\\n\\\"return\\\": \\\"[{'name': 'event name', 'start': 'event start time', 'url': 'event url'},...]\\\",\\n\\\"depend\\\": \\\"Eventbrite API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business development executive focused on strategic partnerships to boost the user base", "synthesized text": "\"{\\n\\\"name\\\": \\\"Twitter Follower Data Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to extract the follower count of a given Twitter handle using Twitter's API\\\",\\n\\\"function_name\\\": \\\"get_twitter_followers_count\\\",\\n\\\"input_args\\\": \\\"twitter_handle - The Twitter handle of the account to analyze\\\",\\n\\\"return\\\": \\\"The number of followers of the specified Twitter account\\\",\\n\\\"depend\\\": \\\"Python library: tweepy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dedicated volunteer who coordinates logistics and manages the synagogue's administrative tasks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Scheduling Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Calendar API to create events on a user's Google Calendar. Users only need to input event details like summary, location, start time, end time, and attendees, and the interface will create an event in the specified Google Calendar.\\\",\\n\\\"function_name\\\": \\\"create_google_calendar_event\\\",\\n\\\"input_args\\\": {\\n    \\\"summary\\\": \\\"String - The summary or title of the event\\\",\\n    \\\"location\\\": \\\"String - The location of the event\\\",\\n    \\\"start_time\\\": \\\"String - The start time of the event in the format 'mm/dd/yyyy, HH:MM:SS'\\\",\\n    \\\"end_time\\\": \\\"String - The end time of the event in the format 'mm/dd/yyyy, HH:MM:SS'\\\",\\n    \\\"attendees\\\": \\\"List of Strings - The emails of the attendees\\\"\\n},\\n\\\"return\\\": \\\"String - A message confirming the creation of the event with a link to the event\\\",\\n\\\"depend\\\": \\\"Google Calendar API, datetime, pytz\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm an avid role-player and enthusiast of vampire lore, especially within the World of Darkness setting created by White Wolf Publishing.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Sheet Generation Interface\\\",\\n\\\"description\\\": \\\"Generates a character sheet for a new vampire character in the World of Darkness setting with randomly assigned attributes and abilities.\\\",\\n\\\"function_name\\\": \\\"generate_character_sheet\\\",\\n\\\"input_args\\\": {\\\"character_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"Character Name\\\": \\\"string\\\", \\\"Attributes\\\": {\\\"Attribute\\\": \\\"int\\\"}, \\\"Abilities\\\": {\\\"Ability\\\": \\\"int\\\"}},\\n\\\"depend\\\": [\\\"Python's random library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a cybersecurity professor from the Sofia Technical University", "synthesized text": "\"{\\n\\\"name\\\": \\\"Malware Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses the pre-trained MalConv model from the Endgame Malware Bazaar to classify whether a given file is malware or not.\\\",\\n\\\"function_name\\\": \\\"is_malware\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A string indicating if the file is malware or not\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"os\\\", \\\"numpy\\\", \\\"tensorflow\\\", \\\"keras.models\\\"], \\\"machine learning models\\\": [\\\"MalConv model from the Endgame Malware Bazaar\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A Tongan local who respects the law and admires Justice Whitten", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Driving License Verification Interface\\\",\\n  \\\"description\\\": \\\"An interface to verify the status of a driving license using DMV's API. It takes a driving license number as input and returns the validity status of the license.\\\",\\n  \\\"function_name\\\": \\\"verify_driving_license\\\",\\n  \\\"input_args\\\": {\\n    \\\"license_number\\\": \\\"A unique identifier for the driver's license\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"validity_status\\\": \\\"The validity status of the driving license (valid or invalid)\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Web APIs\\\": \\\"Department of Motor Vehicles (DMV) API\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "墨西哥足球迷，热衷于国家队和在海外效力的墨西哥球员的成就", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u58a8\\u897f\\u54e5\\u8db3\\u7403\\u6bd4\\u8d5b\\u7ed3\\u679c\\u67e5\\u8be2\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u6839\\u636e\\u8f93\\u5165\\u7684\\u58a8\\u897f\\u54e5\\u7403\\u961f\\u6216\\u7403\\u5458\\u7684\\u540d\\u5b57\\uff0c\\u8fd4\\u56de\\u4ed6\\u4eec\\u7684\\u6700\\u65b0\\u6bd4\\u8d5b\\u7ed3\\u679c\\\",\\n\\\"function_name\\\": \\\"get_latest_match_results\\\",\\n\\\"input_args\\\": \\\"team_or_player_name\\\",\\n\\\"return\\\": \\\"\\u4e00\\u4e2a\\u5b57\\u5178\\uff0c\\u5305\\u542b\\u6700\\u65b0\\u6bd4\\u8d5b\\u7684\\u65e5\\u671f\\uff08'date'\\uff09\\uff0c\\u5bf9\\u624b\\uff08'opponent'\\uff09\\u548c\\u6bd4\\u5206\\uff08'score'\\uff09\\\",\\n\\\"depend\\\": \\\"Football-Data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow work-from-home mom who is part of a childcare co-op, taking turns watching each other's children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Childcare Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface uses pandas to manage and update a shared childcare schedule. Users input their name and the date they are available to take care of the children, and the interface would update the schedule accordingly.\\\",\\n\\\"function_name\\\": \\\"update_childcare_schedule\\\",\\n\\\"input_args\\\": { \\\"name\\\": \\\"Name of the person\\\", \\\"date\\\": \\\"Date when the person is available\\\" },\\n\\\"return\\\": \\\"A message indicating whether the schedule was updated successfully or not.\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A district attorney prosecuting individuals involved in organized gambling operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gambling Records Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that loads gambling records from a CSV file, calculates and returns a summary of the records, and plots winnings and losses over time.\\\",\\n\\\"function_name\\\": \\\"analyze_records\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_csv\\\": \\\"The path to the CSV file containing the gambling records.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"summary\\\": \\\"A dictionary containing the total bets, total winnings, and total losses.\\\"\\n},\\n\\\"depend\\\": \\\"Python libraries: pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "An individual wrongfully denied the right to vote due to outdated and discriminatory laws", "synthesized text": "\"{\\n\\\"name\\\": \\\"Voter Registration Eligibility Check Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a hypothetical API to check a person's eligibility to register to vote based on their state, age, citizenship status, residency status, and criminal record.\\\",\\n\\\"function_name\\\": \\\"check_voter_registration_eligibility\\\",\\n\\\"input_args\\\": {\\n\\\"state\\\": \\\"string representing the state in which the person resides\\\",\\n\\\"age\\\": \\\"integer representing the person's age\\\",\\n\\\"citizenship_status\\\": \\\"boolean representing whether the person is a citizen\\\",\\n\\\"residency_status\\\": \\\"boolean representing whether the person is a resident of the state\\\",\\n\\\"criminal_record\\\": \\\"boolean representing whether the person has a criminal record\\\"\\n},\\n\\\"return\\\": \\\"A string representing the person's eligibility to register to vote\\\",\\n\\\"depend\\\": \\\"requests library, a hypothetical voter eligibility API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A 30 years old Syrian woman who is currently going through the process of asylum seeking in the U.K.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Asylum Application Status Check Interface\\\",\\n  \\\"description\\\": \\\"An interface for checking the status of an asylum application in the U.K. Users need to input their application number, and the interface will return the current status of their application.\\\",\\n  \\\"function_name\\\": \\\"check_asylum_application_status\\\",\\n  \\\"input_args\\\": \\\"application_number\\\",\\n  \\\"return\\\": \\\"The current status of the asylum application\\\",\\n  \\\"depend\\\": \\\"UK government's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graphic designer who finds inspiration for their designs through the energy and rhythm of salsa classes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Salsa Dance Pose Recognition Interface\\\",\\n\\\"description\\\": \\\"A high-level interface for recognizing salsa dance poses in images, useful for graphic designers looking for inspiration in dance movement.\\\",\\n\\\"function_name\\\": \\\"get_salsa_pose\\\",\\n\\\"input_args\\\": \\\"path_to_img - The path to the image file\\\",\\n\\\"return\\\": \\\"An array of keypoints representing the pose of the dancer in the image\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, PoseNet model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud parent of one of the Bellarmine College of Liberal Arts (BCLA) students featured in the article", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts input text to speech and saves it as an mp3 file using the gTTS library.\\\",\\n\\\"function_name\\\": \\\"convert_text_to_speech\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"filename\\\"],\\n\\\"return\\\": \\\"A string indicating that the text has been successfully converted to speech and saved as the provided filename.\\\",\\n\\\"depend\\\": [\\\"gTTS library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An urban planner who believes that nightlife establishments contribute to the cultural vibrancy of the city", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nightlife Establishment Density Interface\\\",\\n\\\"description\\\": \\\"This interface returns the number of nightlife establishments in a specified city, using the Yelp Fusion API.\\\",\\n\\\"function_name\\\": \\\"get_nightlife_density\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"a string representing the city of interest\\\"},\\n\\\"return\\\": \\\"an integer indicating the number of nightlife establishments in the city\\\",\\n\\\"depend\\\": \\\"Yelp Fusion API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmacist specializing in medication management for patients with metabolic disorders", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medication Side Effect Interface\\\",\\n\\\"description\\\": \\\"An interface to get the side effects of a medication using the OpenFDA API. Users input the name of the drug, and the interface returns the side effects associated with that drug.\\\",\\n\\\"function_name\\\": \\\"get_drug_side_effects\\\",\\n\\\"input_args\\\": [\\\"drug_name\\\"],\\n\\\"return\\\": \\\"List of side effects associated with the drug. If there's an error in retrieving data, returns an error message.\\\",\\n\\\"depend\\\": \\\"OpenFDA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The proud principal of Mount Mary's Higher Secondary School", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Language Translation Interface\\\",\\n  \\\"description\\\": \\\"This interface translates input text into the desired language using Google's Cloud Translation API.\\\",\\n  \\\"function_name\\\": [\\\"initialize_translation_client\\\", \\\"translate_text\\\"],\\n  \\\"input_args\\\": {\\n    \\\"initialize_translation_client\\\": [],\\n    \\\"translate_text\\\": [\\\"text\\\", \\\"target_language\\\", \\\"client\\\"]\\n  },\\n  \\\"return\\\": \\\"Translated text in the desired language.\\\",\\n  \\\"depend\\\": [\\\"google.cloud.translate_v2\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A mechanical engineer who collaborates with the software engineer to design and build custom-made telescope mounts", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Telescope Mount Design Interface\\\",\\n  \\\"description\\\": \\\"An interface that takes the specifications of a telescope and returns an optimized design for the mount using a deep learning model.\\\",\\n  \\\"function_name\\\": \\\"telescope_mount_design\\\",\\n  \\\"input_args\\\": {\\n    \\\"spec\\\": \\\"An object of class 'TelescopeSpecification' that contains the weight, size, and desired rotation range of the telescope.\\\"\\n  },\\n  \\\"return\\\": \\\"An object of class 'TelescopeMountDesign' that contains the material, thickness, base diameter, and arm length of the optimized mount design.\\\",\\n  \\\"depend\\\": \\\"tensorflow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A shy and inexperienced squash player who is determined to improve their skills and overcome their fears on the court", "synthesized text": "\"{\\n\\\"name\\\": \\\"Squash Shot Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to recommend the optimal squash shot based on the player's position, their opponent's position, and the direction of the incoming ball.\\\",\\n\\\"function_name\\\": \\\"recommend_shot\\\",\\n\\\"input_args\\\": [\\\"player_position\\\", \\\"opponent_position\\\", \\\"ball_direction\\\"],\\n\\\"return\\\": \\\"recommended_shot\\\",\\n\\\"depend\\\": {\\\"Machine Learning Model\\\": \\\"Path to the pretrained model\\\",\\n           \\\"Python Libraries\\\": [\\\"pickle\\\", \\\"numpy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A fashion stylist who curates outfits inspired by the local fashion trends in each destination", "synthesized text": "\"{\\n\\\"name\\\": \\\"Local Fashion Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyzes the latest fashion trends in a specific location using Instagram's API and TensorFlow\\\",\\n\\\"function_name\\\": \\\"analyze_fashion_trends\\\",\\n\\\"input_args\\\": \\\"location - the location to analyze fashion trends for\\\",\\n\\\"return\\\": \\\"a list of labels representing the fashion trends in the specified location\\\",\\n\\\"depend\\\": [\\\"InstagramAPI\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A vintner who maintains that the complexity of wine cannot be replicated in beer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Beer Flavor Complexity Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface uses a pre-trained deep learning model to analyze the complexity of flavors in beer. It returns a list of flavor notes recognized in the beer.\\\", \\n\\\"function_name\\\": \\\"get_beer_flavor_complexity\\\", \\n\\\"input_args\\\": \\\"beer_name\\\", \\n\\\"return\\\": \\\"List of flavor notes\\\", \\n\\\"depend\\\": \\\"TensorFlow Hub, Google's Universal Sentence Encoder\\\"\\n}\"", "description": "tool development"}
{"input persona": "A person who just started using the need of the digital calendar for scheduling activities.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Google Calendar Event Creation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to create events on their Google Calendar by specifying details like event name, start time, end time, and attendees' email addresses.\\\",\\n\\\"function_name\\\": \\\"create_google_calendar_event\\\",\\n\\\"input_args\\\": [\\\"event_name\\\", \\\"start_time_str\\\", \\\"end_time_str\\\", \\\"attendees_emails\\\"],\\n\\\"return\\\": \\\"A string containing the link to the created event.\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A disillusioned individual who once believed in the psychic's abilities but has since discovered the truth", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Psychic Prediction Verification Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Wikipedia API to fetch information about a given prediction and checks if it has come true or not.\\\",\\n  \\\"function_name\\\": \\\"verify_psychic_prediction\\\",\\n  \\\"input_args\\\": [\\\"prediction\\\", \\\"year\\\"],\\n  \\\"return\\\": \\\"A string stating whether the prediction has come true or not.\\\",\\n  \\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a newly married woman dreaming about her own house", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Mortgage Calculator Interface\\\",\\n  \\\"description\\\": \\\"This interface takes in a loan amount, annual interest rate, and loan period (in years) and calculates the monthly payment for the mortgage.\\\",\\n  \\\"function_name\\\": \\\"calculate_monthly_payment\\\",\\n  \\\"input_args\\\": {\\n    \\\"principal\\\": \\\"Loan amount (int or float)\\\",\\n    \\\"annual_interest_rate\\\": \\\"Annual interest rate (int or float)\\\",\\n    \\\"years\\\": \\\"Loan period in years (int)\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"monthly_payment\\\": \\\"Monthly payment amount for the mortgage (float)\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"math\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A medical student interested in specializing in maternal-fetal medicine", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fetal Health Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from huggingface to predict the health status of a fetus based on certain medical parameters.\\\",\\n\\\"function_name\\\": \\\"fetal_health_classification\\\",\\n\\\"input_args\\\": [\\\"baseline_value\\\", \\\"accelerations\\\", \\\"fetal_movement\\\", \\\"uterine_contractions\\\", \\\"light_decelerations\\\", \\\"severe_decelerations\\\", \\\"prolongued_decelerations\\\", \\\"abnormal_short_term_variability\\\", \\\"mean_value_of_short_term_variability\\\", \\\"percentage_of_time_with_abnormal_long_term_variability\\\", \\\"mean_value_of_long_term_variability\\\", \\\"histogram_width\\\", \\\"histogram_min\\\", \\\"histogram_max\\\", \\\"histogram_number_of_peaks\\\", \\\"histogram_number_of_zeroes\\\", \\\"histogram_mode\\\", \\\"histogram_mean\\\", \\\"histogram_median\\\", \\\"histogram_variance\\\", \\\"histogram_tendency\\\"],\\n\\\"return\\\": \\\"The predicted health status of the fetus (1: Normal, 2: Suspect, 3: Pathological)\\\",\\n\\\"depend\\\": [\\\"huggingface transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I’m a middle-aged British literature professor who prefers original novels and dislikes adaptations and simplifications.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends original novels in a specified genre by a specified author. The results are sorted by popularity.\\\",\\n\\\"function_name\\\": \\\"recommend_books\\\",\\n\\\"input_args\\\": [\\\"genre\\\", \\\"author\\\"],\\n\\\"return\\\": \\\"A list of original novels by the specified author in the specified genre, sorted by popularity.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"Google Books API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "The manager of a local pizzeria who collaborates on special events and provides food for tournaments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Schedule Interface\\\",\\n\\\"description\\\": \\\"Google Calendar API interface for scheduling events and managing them efficiently.\\\",\\n\\\"function_name\\\": \\\"create_event\\\",\\n\\\"input_args\\\": [\\\"summary\\\", \\\"location\\\", \\\"description\\\", \\\"start_time\\\", \\\"end_time\\\"],\\n\\\"return\\\": \\\"Event ID for future reference\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diligent mine worker who aspires to move up the ranks and become a foreman one day", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rock Quality Designation (RQD) Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the Rock Quality Designation (RQD), a key index in geomechanics. The user inputs a list of rock core lengths and the total length of the core run, and the function returns the calculated RQD value.\\\",\\n\\\"function_name\\\": \\\"calculate_rqd\\\",\\n\\\"input_args\\\": {\\n  \\\"core_lengths\\\": \\\"A list of lengths (in cm) of each piece of rock core extracted from a drill run.\\\",\\n  \\\"total_length\\\": \\\"The total length (in cm) of the drill run.\\\"\\n},\\n\\\"return\\\": \\\"The RQD value, calculated as a percentage.\\\",\\n\\\"depend\\\": \\\"Python's numpy and pandas libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional animator who believes that hand-drawn animation is superior to digital effects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traditional Animation Frame Count Interface\\\",\\n\\\"description\\\": \\\"An interface that uses OpenCV to count the number of unique frames in a video. Useful for traditional animators who want to observe the frame count in their hand-drawn animations.\\\",\\n\\\"function_name\\\": \\\"count_unique_frames\\\",\\n\\\"input_args\\\": [\\\"video_path\\\"],\\n\\\"return\\\": \\\"Number of unique frames in the video.\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A single parent struggling to find an affordable health insurance plan for their children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Health Insurance Plan Search Interface\\\",\\n\\\"description\\\": \\\"This interface helps users to find affordable health insurance plans based on their state, income, and number of dependents. It uses the healthcare.gov API to retrieve the information.\\\",\\n\\\"function_name\\\": \\\"get_affordable_health_plans\\\",\\n\\\"input_args\\\": {\\n    \\\"state\\\": \\\"The state where the user resides\\\",\\n    \\\"income\\\": \\\"The user's annual income\\\",\\n    \\\"dependents\\\": \\\"The number of dependents the user has\\\"\\n},\\n\\\"return\\\": \\\"A list of names of affordable health insurance plans\\\",\\n\\\"depend\\\": \\\"requests library, healthcare.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A relay swimmer who relies on the veteran's ability to anchor the team to victory", "synthesized text": "\"{\\n\\\"name\\\": \\\"Swimming Performance Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the performance of a swimmer based on their age, gender, best past performance, and training hours per week. It uses a pre-trained RandomForestRegressor model to make the prediction. The input is a dictionary with keys 'age', 'gender', 'best_past_performance', and 'training_hours_per_week'. The output is a float representing the predicted performance in seconds.\\\",\\n\\\"function_name\\\": \\\"predict_swimming_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"swimmer_info\\\": {\\n        \\\"type\\\": \\\"dict\\\",\\n        \\\"description\\\": \\\"A dictionary containing information about a swimmer. Should include the keys 'age', 'gender', 'best_past_performance', and 'training_hours_per_week'.\\\"\\n    }\\n},\\n\\\"return\\\": {\\n    \\\"type\\\": \\\"float\\\",\\n    \\\"description\\\": \\\"Predicted swimming performance in seconds.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"sklearn\\\"],\\n    \\\"machine learning models\\\": [\\\"RandomForestRegressor\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A German preparation artist who is focused on his work and has no interest in music.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio to Text Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from HuggingFace to convert audio files to text. Users only need to input the path to an audio file, and the interface will return the transcribed text.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"transcription\\\",\\n\\\"depend\\\": \\\"HuggingFace Transformers, PyTorch, soundfile\\\"\\n}\"", "description": "tool development"}
{"input persona": "A veteran with post-traumatic stress disorder (PTSD) who finds solace in heavy metal music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface to recommend top heavy metal songs from a specified subgenre using the Spotify Web API.\\\",\\n\\\"function_name\\\": \\\"get_top_heavy_metal_songs\\\",\\n\\\"input_args\\\": {\\n    \\\"subgenre\\\": \\\"The user's preferred subgenre of heavy metal music. For example, 'thrash_metal', 'death_metal', etc.\\\",\\n    \\\"client_id\\\": \\\"The user's Spotify Web API client ID.\\\",\\n    \\\"client_secret\\\": \\\"The user's Spotify Web API client secret.\\\"\\n},\\n\\\"return\\\": \\\"A list of song names from the top playlist of the specified heavy metal subgenre.\\\",\\n\\\"depend\\\": \\\"Python's built-in 'requests' and 'base64' libraries, and the Spotify Web API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from the Small Business Administration knowledgeable about tax incentives and resources for artisans", "synthesized text": "\"{\\n\\\"name\\\": \\\"Business Tax Incentives Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about tax incentives and resources for small businesses using an API from IRS or a similar authoritative source.\\\",\\n\\\"function_name\\\": \\\"get_business_tax_incentives\\\",\\n\\\"input_args\\\": \\\"business_type\\\",\\n\\\"return\\\": \\\"A dictionary containing information about the tax incentives for the specified business type.\\\",\\n\\\"depend\\\": \\\"requests library, IRS API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer scientist who believes that replicating human consciousness is not scientifically possible", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI Model Training Monitoring Interface\\\",\\n\\\"description\\\": \\\"This interface uses TensorFlow to monitor the progress of a machine learning model's training. It provides a graphical visualization of the training loss and accuracy over time.\\\",\\n\\\"function_name\\\": \\\"monitor_model_training\\\",\\n\\\"input_args\\\": [\\\"model\\\", \\\"train_data\\\", \\\"epochs\\\"],\\n\\\"return\\\": \\\"A graphical visualization of the training loss and accuracy over time.\\\",\\n\\\"depend\\\": \\\"TensorFlow library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A contemporary author who pushes boundaries by incorporating made-up words and slang into their writings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text to Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts input text into speech and saves it into an mp3 file. It can be useful for authors to hear their text spoken aloud, which can help in refining their work.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"String of text to be converted into speech\\\",\\n    \\\"filename\\\": \\\"Name of the output mp3 file\\\"\\n},\\n\\\"return\\\": \\\"A string indicating the file where the speech has been saved\\\",\\n\\\"depend\\\": \\\"Google Text to Speech (gTTS) library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hot dog vendor who has worked at the Cincinnati Reds stadium for two decades", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hot Dog Sales Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the number of hot dogs that will be sold at a future Cincinnati Reds game based on the date and weather.\\\",\\n\\\"function_name\\\": \\\"predict_hot_dog_sales\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"weather\\\"],\\n\\\"return\\\": \\\"The predicted number of hot dogs that will be sold at the game.\\\",\\n\\\"depend\\\": \\\"scikit-learn library and a pre-trained hot dog sales prediction model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A patient software developer with experience in using TITokenField and preventing duplicate entries.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Duplicate Prevention Interface\\\",\\n\\\"description\\\": \\\"An interface for preventing duplicate entries in a TITokenField.\\\",\\n\\\"function_name\\\": \\\"add_entry\\\",\\n\\\"input_args\\\": \\\"entry - The entry to be added.\\\",\\n\\\"return\\\": \\\"None. Adds the entry to the TITokenField if it is not a duplicate.\\\",\\n\\\"depend\\\": \\\"Python's built-in set data structure.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow summer associate from a different practice area, known for their exceptional negotiation skills and client management abilities", "synthesized text": "\"{\\n\\\"name\\\": \\\"Contract Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface classifies sections of a given contract into various categories (such as Payment, Termination, Renewal, etc.) using a pre-trained model from Hugging Face.\\\",\\n\\\"function_name\\\": \\\"classify_contract_sections\\\",\\n\\\"input_args\\\": \\\"path_to_contract - a string representing the path to the contract file\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are the section numbers and the values are the predicted class categories for each section.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library (BertForSequenceClassification, BertTokenizerFast)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a civic-minded resident in Newham who voted for the mayor, Rokhsana Fiaz", "synthesized text": "\"{\\n\\\"name\\\": \\\"Neighbourhood Crime Data Interface\\\", \\n\\\"description\\\": \\\"An interface to access recent crime data for a given neighbourhood or postcode using the UK Police Data API\\\", \\n\\\"function_name\\\": \\\"get_crime_data\\\", \\n\\\"input_args\\\": \\\"postcode\\\", \\n\\\"return\\\": \\\"List of dictionaries. Each dictionary contains details of a crime reported in the area including the category, location, date, and status of investigation.\\\", \\n\\\"depend\\\": \\\"requests, UK Police Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skilled diplomat from the 18th century known for resolving border disputes between neighboring kingdoms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Map Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches historical maps based on a given year and place, and performs image analysis on them using a pre-trained model.\\\",\\n\\\"function_name\\\": \\\"get_map_and_analysis\\\",\\n\\\"input_args\\\": \\\"year, place\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'map' and 'analysis'. 'map' contains the historical map image and 'analysis' contains the top 3 predictions for what is in the image.\\\",\\n\\\"depend\\\": \\\"requests, PIL, tensorflow, Old Maps Online API, VGG16 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a senior Chinese journalist in the renewable energy industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Renewable Energy News Translation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest renewable energy news in English and translates it into Chinese.\\\",\\n\\\"function_name\\\": \\\"get_renewable_energy_news_in_chinese\\\",\\n\\\"input_args\\\": [\\\"news_api_key\\\", \\\"translate_api_key\\\"],\\n\\\"return\\\": \\\"A list of the latest renewable energy news articles in Chinese. Each article is a dictionary with 'title' and 'description' as keys.\\\",\\n\\\"depend\\\": {\\\"python library\\\": [\\\"requests\\\"], \\\"web API\\\": [\\\"NewsAPI\\\", \\\"Google Translate API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A recent graduate who is aspiring to become a project manager and seeks the project manager's advice on getting started in the field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mentorship Session Booking Interface\\\",\\n\\\"description\\\": \\\"This interface uses the LinkedIn API to find experienced project managers who are open to mentoring and schedule a session with them.\\\",\\n\\\"function_name\\\": \\\"get_mentors\\\",\\n\\\"input_args\\\": {\\n    \\\"credentials\\\": \\\"The LinkedIn credentials of the user\\\",\\n    \\\"time\\\": \\\"The preferred time for a mentorship session\\\"\\n    },\\n\\\"return\\\": \\\"A list of available mentors and their contact information\\\",\\n\\\"depend\\\": [\\\"linkedin\\\", \\\"requests\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A data science major who is skeptical about the impact of AI on job opportunities", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI Job Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes job postings from Indeed and analyses the job descriptions for mentions of AI, returning the percentage of jobs that require AI skills.\\\",\\n\\\"function_name\\\": \\\"analyse_ai_impact\\\",\\n\\\"input_args\\\": {\\n    \\\"query\\\": \\\"The type of job the user is interested in. E.g. 'Data Scientist', 'Software Engineer', etc.\\\",\\n    \\\"location\\\": \\\"The location the user is interested in. E.g. 'San Francisco, CA', 'New York, NY', etc.\\\"\\n    },\\n\\\"return\\\": \\\"The percentage of job postings that mention AI.\\\",\\n\\\"depend\\\": \\\"This function leverages the BeautifulSoup and TextBlob Python libraries, and Indeed's job search API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physician who relies on statistical analysis to evaluate the effectiveness of different treatment options", "synthesized text": "\"{\\n\\\"name\\\": \\\"Statistical Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface performs a Two-Sample T-Test to compare the means of two independent groups in order to evaluate the effectiveness of different treatment options.\\\",\\n\\\"function_name\\\": \\\"two_sample_t_test\\\",\\n\\\"input_args\\\": [\\\"group1\\\", \\\"group2\\\"],\\n\\\"return\\\": \\\"p_value\\\",\\n\\\"depend\\\": \\\"statsmodels Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer scientist presenting a paper on applying dynamical systems to artificial intelligence", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dynamical System Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simulates and visualizes a dynamical system given the system's initial conditions, parameters, time span, and the equations of motion.\\\",\\n\\\"function_name\\\": \\\"simulate_dynamical_system\\\",\\n\\\"input_args\\\": {\\n    \\\"equations\\\": \\\"A function of time, current state, and parameters that returns the derivatives of the state.\\\",\\n    \\\"parameters\\\": \\\"A list or array containing the parameters of the system.\\\",\\n    \\\"initial_conditions\\\": \\\"A list or array containing the initial state of the system.\\\",\\n    \\\"t_span\\\": \\\"A tuple containing the initial and final times for the simulation.\\\"\\n},\\n\\\"return\\\": \\\"A plot showing the evolution of the system over the specified time span.\\\",\\n\\\"depend\\\": \\\"scipy, numpy, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A basketball coach who emphasizes defensive strategies and relies on the point guard to set the tone", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Player Performance Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface to fetch and summarize a basketball player's stats. The stats include points, assists, rebounds, steals, and blocks.\\\",\\n  \\\"function_name\\\": \\\"get_player_stats\\\",\\n  \\\"input_args\\\": {\\n    \\\"player_name\\\": \\\"The name of the basketball player\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"points\\\": \\\"The total points scored by the player\\\",\\n    \\\"assists\\\": \\\"The total assists made by the player\\\",\\n    \\\"rebounds\\\": \\\"The total rebounds grabbed by the player\\\",\\n    \\\"steals\\\": \\\"The total steals made by the player\\\",\\n    \\\"blocks\\\": \\\"The total blocks made by the player\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_library\\\": [\\\"requests\\\"],\\n    \\\"web_APIs\\\": [\\\"SportsOpenData\\\"],\\n    \\\"ML_models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A member of the Capcom development team responsible for creating new characters and storylines in the Resident Evil series", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character and Storyline Generator Interface for Resident Evil Series\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from GPT-3 (huggingface) that generates detailed character profiles and storylines based on brief input descriptions or concepts.\\\",\\n\\\"function_name\\\": [\\\"character_generator\\\", \\\"story_generator\\\"],\\n\\\"input_args\\\": [\\\"description\\\", \\\"concept\\\"],\\n\\\"return\\\": [\\\"detailed character profile\\\", \\\"detailed storyline\\\"],\\n\\\"depend\\\": [\\\"huggingface's transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A popular sports commentator and YouTuber known for their comedic take on NFL games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the transcript from a video using Google's Video Intelligence API. Users input the URL of the video, and our interface returns a transcription of the video.\\\",\\n\\\"function_name\\\": \\\"video_to_text\\\",\\n\\\"input_args\\\": \\\"video_uri\\\",\\n\\\"return\\\": \\\"transcription\\\",\\n\\\"depend\\\": \\\"Google's Video Intelligence API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young woman working as a TV producer for a private broadcasting company in London", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Schedule Organizer Interface\\\",\\n\\\"description\\\": \\\"This tool allows the user to input the name and time of the show, and it will return the show's schedule in different time zones.\\\",\\n\\\"function_name\\\": \\\"get_show_time_in_timezone\\\",\\n\\\"input_args\\\": [\\\"show_time - The original airing time of the show in 'YYYY-MM-DD HH:MM:SS' format\\\",\\n                \\\"show_timezone - The timezone in which the show airs originally\\\",\\n                \\\"desired_timezone - The timezone in which the user wants to know the airing time\\\"],\\n\\\"return\\\": \\\"The airing time of the show in the desired timezone in 'YYYY-MM-DD HH:MM:SS' format\\\",\\n\\\"depend\\\": \\\"Python's datetime and pytz libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A contemporary friend and colleague of Don F. Page, who was also a patroller.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Paper Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for scientific papers authored or co-authored by a given researcher using the arXiv API.\\\",\\n\\\"function_name\\\": \\\"get_scientific_papers\\\",\\n\\\"input_args\\\": {\\n    \\\"researcher_name\\\": \\\"Name of the researcher whose papers are to be searched for.\\\"\\n  },\\n\\\"return\\\": \\\"A list of titles of the papers authored or co-authored by the researcher.\\\",\\n\\\"depend\\\": \\\"Python's requests library and arXiv API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An international donor providing financial support for girls' education programs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fund Disbursement Interface\\\",\\n\\\"description\\\": \\\"An interface for disbursing funds to girls' education programs using PayPal API\\\",\\n\\\"function_name\\\": \\\"disburse_funds\\\",\\n\\\"input_args\\\": [\\\"email\\\", \\\"amount\\\", \\\"currency\\\"],\\n\\\"return\\\": \\\"Confirmation of the successful transaction\\\",\\n\\\"depend\\\": \\\"PayPal REST SDK\\\"\\n}\"", "description": "tool development"}
{"input persona": "As the mayor of a diverse and inclusive city, my chief concern is to advocate for the rights and wellbeing of all citizens, including members of the LGBTQ community.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"LGBTQ Rights and Safety Information Interface\\\",\\n  \\\"description\\\": \\\"This interface retrieves information about legal protections for LGBTQ individuals, same-sex marriage laws, anti-discrimination laws, reported hate crimes, and community support structures for the LGBTQ community in a specified city and country.\\\",\\n  \\\"function_name\\\": \\\"get_lgbtq_rights_and_safety\\\",\\n  \\\"input_args\\\": [\\\"city\\\", \\\"country\\\"],\\n  \\\"return\\\": \\\"A dictionary with information on legal protections, same-sex marriage, anti-discrimination laws, reported hate crimes, and LGBTQ community support in the specified city and country.\\\",\\n  \\\"depend\\\": \\\"Python's requests library, LGBTQ rights API, and hate crime data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a audiophile music nerd who is a fan of Florent Schmitt's works.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends similar music to a given artist by leveraging Spotify's Web API.\\\",\\n\\\"function_name\\\": \\\"get_similar_artists\\\",\\n\\\"input_args\\\": \\\"artist_name\\\",\\n\\\"return\\\": \\\"A list of similar artists' names\\\",\\n\\\"depend\\\": \\\"Spotipy library, Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A top-level executive who maintains a traditional diet, yet exudes high energy and productivity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meal Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model to provide meal recommendations based on user-inputted dietary preferences, energy level needs, and food allergies. It takes in three string arguments: diet, energy_level, and allergies, and returns a string of recommended meals.\\\",\\n\\\"function_name\\\": \\\"get_meal_recommendations\\\",\\n\\\"input_args\\\": [\\\"diet\\\", \\\"energy_level\\\", \\\"allergies\\\"],\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": [\\\"huggingface pipeline\\\", \\\"EleutherAI/gpt-neo-2.7-1.5B model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A physics professor who regularly brings their students to the escape room as a fun educational outing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Escape Room Puzzle Solution Interface\\\",\\n\\\"description\\\": \\\"An interface to solve mathematical equations, which are often found in escape rooms. The user inputs the equation as a string, and the interface returns the solution to the equation.\\\",\\n\\\"function_name\\\": \\\"solve_escape_room_puzzle\\\",\\n\\\"input_args\\\": {\\n    \\\"equation\\\": \\\"A string representing the mathematical equation to be solved. The unknown variable should be denoted with 'x'.\\\",\\n    \\\"variable\\\": \\\"A string representing the variable in the equation.\\\"\\n},\\n\\\"return\\\": \\\"The solution to the input equation.\\\",\\n\\\"depend\\\": \\\"Python's sympy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "The owner of a newly formed professional basketball team seeking a captivating team name and mascot", "synthesized text": "\"{\\n\\\"name\\\": \\\"Team Name and Mascot Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a unique and captivating team name and mascot based on the input city name and a brief description or keywords about the city or team.\\\",\\n\\\"function_name\\\": \\\"generate_team_name_and_mascot\\\",\\n\\\"input_args\\\": {\\\"city_name\\\": \\\"string\\\", \\\"description\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"team_name\\\": \\\"string\\\", \\\"mascot\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"gpt2\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A project manager who is responsible for coordinating the implementation of the software architect's proposed monolithic architecture", "synthesized text": "\"{\\n    \\\"Module1\\\": [\\\"Module2\\\", \\\"Module3\\\"],\\n    \\\"Module2\\\": [\\\"Module4\\\"],\\n    \\\"Module3\\\": [],\\n    \\\"Module4\\\": [\\\"Module1\\\"]\\n}\"", "description": "tool development"}
{"input persona": "The organizer of a local STEM fair that showcases the achievements of girls in science, technology, engineering, and math", "synthesized text": "\"{\\n\\\"name\\\": \\\"STEM Fair Project Analyzer\\\",\\n\\\"description\\\": \\\"Analyze and grade a STEM project abstract using natural language processing\\\",\\n\\\"function_name\\\": \\\"analyze_project_abstract\\\",\\n\\\"input_args\\\": {\\n  \\\"abstract_text\\\": \\\"string\\\"\\n},\\n\\\"return\\\": {\\n  \\\"grade\\\": \\\"string\\\",\\n  \\\"suggestion\\\": \\\"string\\\"\\n},\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a local small-scale farmer in Namibia who is trying to stay updated with agricultural policies and ministry changes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Extraction Interface\\\",\\n\\\"description\\\": \\\"Fetches the latest agriculture-related news in a specified country using the News API.\\\",\\n\\\"function_name\\\": \\\"get_agriculture_news\\\",\\n\\\"input_args\\\": [\\\"country\\\", \\\"keyword\\\"],\\n\\\"return\\\": \\\"List of dictionaries, each containing the title, description, and URL of a news article.\\\",\\n\\\"depend\\\": \\\"News API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An oil company executive looking to secure drilling rights in previously preserved Arctic regions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Arctic Drilling Rights Acquisition Interface\\\",\\n  \\\"description\\\": \\\"This interface takes as input a region in the Arctic and generates a report detailing the estimated oil reserves in the region and the potential environmental impact of drilling.\\\",\\n  \\\"function_name\\\": \\\"generate_drilling_report\\\",\\n  \\\"input_args\\\": \\\"region\\\",\\n  \\\"return\\\": \\\"A report detailing the estimated oil reserves in the region and the potential environmental impact of drilling.\\\",\\n  \\\"depend\\\": [\\\"USGS API for oil and gas reserves\\\", \\\"HuggingFace's distilbert-base-uncased-finetuned-sst-2-english model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a university professor frustrated with budget cuts and staff layoffs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grant Finder Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to find available grants in their field of study by using the GrantSearch API.\\\",\\n\\\"function_name\\\": \\\"find_grants\\\",\\n\\\"input_args\\\": {\\n    \\\"field_of_study\\\": \\\"The user's field of study\\\"\\n},\\n\\\"return\\\": \\\"A list of available grants in the user's field of study.\\\",\\n\\\"depend\\\": \\\"Python requests library, GrantSearch API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A dietitian passionate about advocating for nutritious meal planning for astronauts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutrition Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a list of ingredients as input and returns detailed nutrition information about the meal. This includes calories, fat, protein, carbs, vitamins, minerals, and more.\\\",\\n\\\"function_name\\\": \\\"get_nutrition_analysis\\\",\\n\\\"input_args\\\": \\\"ingredients_list - A list of ingredients for a meal\\\",\\n\\\"return\\\": \\\"A dictionary containing detailed nutrition information about the meal.\\\",\\n\\\"depend\\\": \\\"Python Libraries: requests, json; Web API: Edamam Nutrition Analysis API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young Lithuanian farmer worried about the future of agriculture in the country.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecasting Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input their current city and returns a 5-day weather forecast, including daily temperature, rain forecast, and humidity.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"string\\\"},\\n\\\"return\\\": [{\\\"day\\\": \\\"string\\\", \\\"temp\\\": \\\"float\\\", \\\"rain\\\": \\\"float\\\", \\\"humidity\\\": \\\"float\\\"}],\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "British cricket fan who dislikes comedians", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Cricket Match Score Interface\\\",\\n  \\\"description\\\": \\\"Fetches the latest cricket match score between the two teams specified by the user from ESPNcricinfo.\\\",\\n  \\\"function_name\\\": \\\"get_cricket_match_score\\\",\\n  \\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\"],\\n  \\\"return\\\": \\\"Latest cricket match score between team1 and team2.\\\",\\n  \\\"depend\\\": [\\\"python libraries (requests, Beautiful Soup)\\\", \\\"Web APIs (ESPNcricinfo)\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A space industry professional organizing a symposium on the legal challenges of asteroid mining", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Asteroid Details Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to get the details of any asteroid by simply providing the name of the asteroid. The returned details include the asteroid's estimated diameter, speed, distance from earth, and estimated cost to reach it.\\\",\\n  \\\"function_name\\\": \\\"get_asteroid_details\\\",\\n  \\\"input_args\\\": \\\"asteroid_name\\\",\\n  \\\"return\\\": \\\"A dictionary of asteroid details or an error message string\\\",\\n  \\\"depend\\\": \\\"Asterank API (NASA)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A farmer who is passionate about creating accessible and inclusive spaces for people with disabilities in rural areas", "synthesized text": "\"{\\n\\\"name\\\": \\\"Accessibility Path Planning Interface\\\",\\n\\\"description\\\": \\\"This interface provides an accessible route between two points, tailored for people with disabilities in rural areas.\\\",\\n\\\"function_name\\\": \\\"get_accessible_route\\\",\\n\\\"input_args\\\": [\\n  {\\n    \\\"name\\\": \\\"start\\\",\\n    \\\"type\\\": \\\"string\\\",\\n    \\\"description\\\": \\\"The starting point of the route.\\\"\\n  },\\n  {\\n    \\\"name\\\": \\\"end\\\",\\n    \\\"type\\\": \\\"string\\\",\\n    \\\"description\\\": \\\"The ending point of the route.\\\"\\n  }\\n],\\n\\\"return\\\": {\\n  \\\"type\\\": \\\"map\\\",\\n  \\\"description\\\": \\\"A map with the shortest and most accessible route highlighted.\\\"\\n},\\n\\\"depend\\\": \\\"OpenStreetMap API, osmnx, networkx, geopy\\\"\\n}\"", "description": "tool development"}
{"input persona": "Sun Tzu, the ancient Chinese military strategist and philosopher, whose teachings on strategy and leadership are still relevant today", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface takes a quote, phrase, or sentence from Sun Tzu's 'The Art of War' as input and returns an audio file with the text read out loud.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"String of text to be converted to speech\\\",\\n    \\\"lang\\\": \\\"Language in which the text is written\\\",\\n    \\\"slow\\\": \\\"Boolean indicating whether the speech should be slow or not\\\"\\n},\\n\\\"return\\\": \\\"Path to the generated audio file\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech library (gTTS)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A quality assurance tester responsible for finding bugs and ensuring stability in Windows OS releases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Bug Reporting Interface\\\",\\n\\\"description\\\": \\\"This interface automates the process of reporting a bug. It inputs the description, screenshot, and steps to reproduce into the bug reporting tool, and submits the report.\\\",\\n\\\"function_name\\\": \\\"automate_bug_report\\\",\\n\\\"input_args\\\": [\\\"description\\\", \\\"screenshot_path\\\", \\\"steps_to_reproduce\\\"],\\n\\\"return\\\": \\\"No return value; the function performs actions on the user's computer.\\\",\\n\\\"depend\\\": [\\\"Python's pyautogui library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An environmental scientist who provides scientific evidence and analyses to support the investor's investment decisions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Environmental Impact Score Interface\\\",\\n\\\"description\\\": \\\"This interface provides the ESG (Environmental, Social, and Governance) score for a given company based on its ticker symbol. The score is a measure of the company's performance in areas like environmental responsibility, social responsibility, and governance.\\\",\\n\\\"function_name\\\": \\\"get_esg_score\\\",\\n\\\"input_args\\\": \\\"ticker_symbol - The ticker symbol of the company\\\",\\n\\\"return\\\": \\\"ESG score of the company or an error message if unable to fetch the score\\\",\\n\\\"depend\\\": \\\"ESG Enterprise API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rural homeowner who does not trust commercial offers and intense marketing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Panel Cost and Savings Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to calculate the cost and savings of installing solar panels. It uses the NREL API to provide accurate estimates based on the user's location and the specifications of the solar system.\\\",\\n\\\"function_name\\\": \\\"calculate_solar_savings\\\",\\n\\\"input_args\\\": \\\"address, system_capacity, system_cost, system_azimuth\\\",\\n\\\"return\\\": \\\"A dictionary with annual energy output, annual savings, and the return on investment.\\\",\\n\\\"depend\\\": \\\"uses the NREL API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A horse trainer seeking advice on equine medication and dosage for performance enhancement", "synthesized text": "\"{\\n\\\"name\\\": \\\"Equine Medication Dosage Interface\\\",\\n\\\"description\\\": \\\"Predicts the appropriate dosage for equine medication based on the horse's weight, age, and the specific medication type.\\\",\\n\\\"function_name\\\": \\\"calculate_equine_dosage\\\",\\n\\\"input_args\\\": {\\n    \\\"medication\\\": \\\"A numerical code representing the specific medication\\\",\\n    \\\"weight\\\": \\\"Weight of the horse in kg\\\",\\n    \\\"age\\\": \\\"Age of the horse in years\\\"\\n},\\n\\\"return\\\": \\\"Predicted dosage of the medication\\\",\\n\\\"depend\\\": \\\"A pre-trained machine learning model ('equine_dosage_model.pkl') and Scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A capitalist thinker who strongly believes in the 'pull yourself up by your bootstraps' philosophy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Trend Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses historical stock data and a pre-trained LSTM model to predict the future trend of a specific stock. The user only needs to input the stock symbol.\\\",\\n\\\"function_name\\\": \\\"predict_stock_trend\\\",\\n\\\"input_args\\\": {\\n    \\\"stock_symbol\\\": \\\"The symbol of the stock to predict\\\"\\n},\\n\\\"return\\\": \\\"Future trend prediction for the given stock\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"yfinance\\\", \\\"tensorflow\\\", \\\"sklearn.preprocessing\\\", \\\"numpy\\\"],\\n    \\\"machine learning models\\\": [\\\"LSTM model trained for stock prediction\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A professional triathlete seeking guidance on fueling for long-distance races", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutrition Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the amount of carbohydrates and protein a user should consume based on their weight, age, gender, and exercise intensity.\\\",\\n\\\"function_name\\\": \\\"predict_nutrients\\\",\\n\\\"input_args\\\": {\\n    \\\"weight\\\": \\\"The user's weight in kilograms.\\\",\\n    \\\"age\\\": \\\"The user's age in years.\\\",\\n    \\\"gender\\\": \\\"The user's gender. This can be 'male' or 'female'.\\\",\\n    \\\"intensity\\\": \\\"The intensity of the user's exercise. This can be 'low', 'medium', or 'high'.\\\"\\n},\\n\\\"return\\\": \\\"Returns a dictionary with the recommended intake of carbohydrates and protein in grams.\\\",\\n\\\"depend\\\": \\\"Depends on the sklearn.ensemble library for the RandomForestRegressor model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A superfan of Tony Wilbrand who used to watch his games in high school.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to retrieve game statistics of a particular sports player by simply inputting the player's name.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": [\\\"player_name\\\"],\\n\\\"return\\\": \\\"Player's game statistics or an error message if no data found\\\",\\n\\\"depend\\\": \\\"requests library, SportsOpenData API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A car salesman who doesn't believe in environmental protection", "synthesized text": "\"{\\n\\\"name\\\": \\\"CO2 Emission Calculator Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the CO2 emissions of a car given its specifications (fuel type, engine size, miles driven). The interface uses the CarbonKit API to compute the CO2 emissions.\\\",\\n\\\"function_name\\\": \\\"calculate_co2_emissions\\\",\\n\\\"input_args\\\": [\\\"fuel_type\\\", \\\"engine_size\\\", \\\"miles_driven\\\"],\\n\\\"return\\\": \\\"Estimated CO2 emissions.\\\",\\n\\\"depend\\\": \\\"requests library, CarbonKit API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An excited film enthusiast from the US who has always dreamed of visiting Cuba.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Location Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to find movies filmed in a specified location by interfacing with the Movie Database (TMDb) API.\\\",\\n\\\"function_name\\\": \\\"get_movies_filmed_in\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"movies\\\": \\\"list of strings\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"TMDb API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An award-winning medical doctor with a PhD in epidemiology. My research focuses primarily on vitamin and nutrient deficiencies in the population.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nutrient Deficiency Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the likelihood of a vitamin or nutrient deficiency given a person's demographic information and diet.\\\",\\n\\\"function_name\\\": \\\"predict_nutrient_deficiency\\\",\\n\\\"input_args\\\": {\\n    \\\"user_info\\\": \\\"A dictionary with keys as user info fields and values as corresponding values. Example: {'age': 30, 'gender': 'female', 'diet': 'vegetarian', 'exercise': 'moderate', 'location': 'urban', 'BMI': 22}\\\"\\n},\\n\\\"return\\\": \\\"A dictionary mapping each class ('low risk', 'medium risk', 'high risk') to its probability.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library and a pre-trained BERT model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer science researcher who explores new algorithms and techniques for optimizing real-time operating systems", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Real-Time Operating System Performance Analysis Interface\\\",\\n    \\\"description\\\": \\\"This interface helps to monitor and analyze the performance of a real-time operating system (RTOS). It provides a comprehensive report of system usage, including CPU, memory, disk, and network over a specified duration.\\\",\\n    \\\"function_name\\\": \\\"analyze_rtos_performance\\\",\\n    \\\"input_args\\\": {\\n        \\\"duration\\\": \\\"The duration (in seconds) of the monitoring period.\\\"\\n    },\\n    \\\"return\\\": \\\"A JSON report detailing the average CPU usage, average memory usage, average disk usage, and total network usage over the duration.\\\",\\n    \\\"depend\\\": \\\"Python psutil library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young child who is eager to learn the accordion and dance to the lively Zydeco tunes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Zydeco Dance Step Generator\\\",\\n\\\"description\\\": \\\"This interface takes the path to a music file as input and returns a sequence of dance steps that are in sync with the music. It leverages a machine learning model trained to generate dance steps based on given music.\\\",\\n\\\"function_name\\\": \\\"generate_dance_steps\\\",\\n\\\"input_args\\\": \\\"music_file_path\\\",\\n\\\"return\\\": \\\"A sequence of dance steps\\\",\\n\\\"depend\\\": \\\"librosa, sklearn.preprocessing.StandardScaler, tensorflow.keras.models.load_model, Machine learning model: 'zydeco_dance_step_generator.h5'\\\"\\n}\"", "description": "tool development"}
{"input persona": "a small business owner who borrowed money from JP Morgan Chase", "synthesized text": "\"{\\n\\\"name\\\": \\\"Loan Payment Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Plaid API to access the user's bank transactions and find out when the loan payment is due. It also sets a reminder a few days before the due date.\\\",\\n\\\"function_name\\\": \\\"loan_payment_reminder\\\",\\n\\\"input_args\\\": {\\n    \\\"account_id\\\": \\\"The user's Plaid account ID\\\",\\n    \\\"secret\\\": \\\"The user's Plaid secret\\\",\\n    \\\"public_key\\\": \\\"The user's Plaid public key\\\"\\n},\\n\\\"return\\\": \\\"A reminder of the loan payment due date, or a message indicating no upcoming loan payments were found.\\\",\\n\\\"depend\\\": \\\"Plaid API, Python's datetime library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A search and rescue specialist who works closely with the field medic to locate and extract survivors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Survivor Location Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the likely location of survivors based on current environmental conditions using a machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_survivor_location\\\",\\n\\\"input_args\\\": {\\n    \\\"weather\\\": \\\"Current weather conditions.\\\",\\n    \\\"time_of_day\\\": \\\"Current time of day.\\\",\\n    \\\"terrain\\\": \\\"Type of terrain in the search area.\\\"\\n},\\n\\\"return\\\": \\\"Returns the most likely location where survivors might be found.\\\",\\n\\\"depend\\\": \\\"Pandas library, Scikit-learn library, Pre-trained RandomForest Classifier model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic fan of 'Masked Singer' versions worldwide, who loves to keep track of different seasons and their unique features.", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Information Interface\\\",\\n\\\"description\\\": \\\"An interface that returns detailed information about a TV show using the TVMaze API. The user needs to provide the name of the TV show as input.\\\",\\n\\\"function_name\\\": \\\"get_show_info\\\",\\n\\\"input_args\\\": {\\\"show_name\\\": \\\"Name of the TV show\\\"},\\n\\\"return\\\": {\\n    \\\"name\\\": \\\"Name of the show\\\",\\n    \\\"genres\\\": \\\"List of genres\\\",\\n    \\\"language\\\": \\\"Language of the show\\\",\\n    \\\"runtime\\\": \\\"Runtime of the show in minutes\\\",\\n    \\\"premiered\\\": \\\"Date when the show premiered\\\",\\n    \\\"officialSite\\\": \\\"URL of the show's official site\\\",\\n    \\\"rating\\\": \\\"Average rating of the show\\\"\\n},\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"TVMaze API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a Russian literature teacher who adores Brodsky's works and emphasizes the importance of cultural context in understanding literature.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cultural Context Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface that takes text as input and returns the cultural, historical, and social context referenced in the text.\\\",\\n\\\"function_name\\\": \\\"extract_cultural_context\\\",\\n\\\"input_args\\\": \\\"text - a string representing a piece of literature\\\",\\n\\\"return\\\": \\\"a list of named entities that provide cultural, historical, and social context\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library with a pre-trained model like BERT or GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professor of electrical engineering conducting research on high-speed data transfer technologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Transfer Speed Test Interface\\\",\\n\\\"description\\\": \\\"An interface to test the download, upload, and ping speeds of the user's internet connection.\\\",\\n\\\"function_name\\\": \\\"internet_speed_test\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A dictionary that includes the download speed, upload speed, and ping.\\\",\\n\\\"depend\\\": \\\"speedtest-cli library\\\"\\n}\"", "description": "tool development"}
{"input persona": "终身五月天歌迷，震撼的现场音乐体验", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lyrics Fetch Interface\\\",\\n\\\"description\\\": \\\"This interface provides the lyrics of a specified song by using the Genius API.\\\",\\n\\\"function_name\\\": \\\"fetch_song_lyrics\\\",\\n\\\"input_args\\\": [\\\"song_name\\\"],\\n\\\"return\\\": \\\"lyrics of the specified song\\\",\\n\\\"depend\\\": \\\"Genius API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aerospace engineer working on developing technology to mitigate the effects of changing weather on aircraft", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Impact Mitigation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenWeatherMap API to retrieve current weather data based on location. It helps aerospace engineers to access real-time weather information for their research and development work.\\\",\\n\\\"function_name\\\": \\\"get_current_weather\\\",\\n\\\"input_args\\\": {\\n    \\\"lat\\\": \\\"Latitude of the location\\\",\\n    \\\"lon\\\": \\\"Longitude of the location\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Weather\\\": \\\"Current weather condition\\\",\\n    \\\"Temperature\\\": \\\"Current temperature\\\",\\n    \\\"Wind Speed\\\": \\\"Current wind speed\\\"\\n},\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film director who believes concentrating on diversity dilutes the artistic quality of productions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Automatic Movie Script Diversity Assessment Interface\\\",\\n  \\\"description\\\": \\\"Assess the diversity of characters in a movie script based on representation of different genders, ethnicities, and ages.\\\",\\n  \\\"function_name\\\": \\\"assess_script_diversity\\\",\\n  \\\"input_args\\\": {\\\"path_to_script\\\": \\\"string\\\"},\\n  \\\"return\\\": \\\"string\\\",\\n  \\\"depend\\\": \\\"HuggingFace's transformers library, tmills/roberta_sfda_sharpseed model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A established fashion designer always on the lookout for the next big trend", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Fashion Trend Forecasting Interface\\\",\\n  \\\"description\\\": \\\"This interface uses Google Trends data to identify emerging trends in the fashion industry.\\\",\\n  \\\"function_name\\\": \\\"get_fashion_trends\\\",\\n  \\\"input_args\\\": \\n    {\\n      \\\"start_date\\\": \\\"The start date of the date range to analyze. Format: 'YYYY-MM-DD'\\\",\\n      \\\"end_date\\\": \\\"The end date of the date range to analyze. Format: 'YYYY-MM-DD'\\\"\\n    },\\n  \\\"return\\\": \\\"A list of dates corresponding to the top trending fashion-related search terms during the specified date range.\\\",\\n  \\\"depend\\\": \\\"PyTrends API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former colleague and long-time friend of Dr. K. N. Ninan, with a specialization in polymer sciences within the space research field.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Molecule Property Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts properties of molecules using RDKit. The user inputs a SMILES string representation of the molecule, and the interface returns its molecular weight and LogP value.\\\",\\n\\\"function_name\\\": \\\"get_molecule_properties\\\",\\n\\\"input_args\\\": [\\\"smiles_string\\\"],\\n\\\"return\\\": \\\"Dictionary with molecular weight and LogP value\\\",\\n\\\"depend\\\": \\\"rdkit library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A moderator who specializes in promoting discussions on the evolution of stage lighting in theater", "synthesized text": "\"{\\n\\\"name\\\": \\\"Theatrical Lighting Evolution Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Google Books API to find books on the topic of 'stage lighting', and then uses NLP libraries and ML models to extract and summarize the evolution of stage lighting from the contents of these books. The user only needs to input a time period (e.g., '19th century'), and the interface will return a summarized evolution of stage lighting during that period.\\\",\\n\\\"function_name\\\": \\\"get_stage_lighting_evolution\\\",\\n\\\"input_args\\\": [\\\"time_period\\\"],\\n\\\"return\\\": \\\"A list of summaries describing the evolution of stage lighting during the input time period.\\\",\\n\\\"depend\\\": {\\\"python_libraries\\\": [\\\"requests\\\", \\\"nltk\\\", \\\"transformers\\\"], \\\"web_APIs\\\": [\\\"Google Books API\\\"], \\\"ML_models\\\": [\\\"Hugging Face summarization pipeline\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A metal fabrication shop owner who specializes in powder coating services and can provide advice on material selection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Selector Interface\\\", \\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict and return the best fitting metal for a given set of properties (hardness, tensile strength, yield strength).\\\", \\n\\\"function_name\\\": \\\"get_best_fitting_metal\\\", \\n\\\"input_args\\\": {\\\"hardness\\\": \\\"a float value representing the hardness of the desired metal\\\", \\\"tensile_strength\\\": \\\"a float value representing the tensile strength of the desired metal\\\", \\\"yield_strength\\\": \\\"a float value representing the yield strength of the desired metal\\\"}, \\n\\\"return\\\": \\\"a string representing the name of the best fitting metal\\\", \\n\\\"depend\\\": \\\"Scikit-learn for predictive modelling, Pandas for data handling, and a pre-trained machine learning model trained on a dataset of metals and their properties\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skilled editor who helps polish the poet's manuscripts and selects poems for publication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poem Quality Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained BERT model to classify poems as high or low quality.\\\",\\n\\\"function_name\\\": \\\"evaluate_poem\\\",\\n\\\"input_args\\\": [\\\"poem_text\\\"],\\n\\\"return\\\": \\\"A binary verdict: 1 for high quality, 0 for low quality.\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professor specializing in machine learning algorithms for mobile platforms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mobile Battery Life Prediction\\\",\\n\\\"description\\\": \\\"Predicts the remaining battery life of a mobile device based on current usage patterns.\\\",\\n\\\"function_name\\\": \\\"predict_battery_life\\\",\\n\\\"input_args\\\": [\\\"battery_percentage\\\", \\\"screen_brightness\\\", \\\"num_active_apps\\\", \\\"network_type\\\"],\\n\\\"return\\\": \\\"Predicted remaining battery life in hours.\\\",\\n\\\"depend\\\": \\\"TensorFlow, NumPy, and a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cryptocurrency journalist reporting on the legal landscape of NFT tokenization", "synthesized text": "\"{\\n\\\"name\\\": \\\"NFT Tokenization Legal Landscape Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the OpenAI GPT-3 model to gather information and summarize the legal landscape of NFT tokenization based on the latest news articles and publications.\\\",\\n\\\"function_name\\\": \\\"summarize_legal_landscape_of_nft\\\",\\n\\\"input_args\\\": [\\\"urls\\\"],\\n\\\"return\\\": \\\"A summarized text containing the legal landscape of NFT tokenization.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"huggingface/transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Turkish miner strongly advocating for safer working conditions in mines.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Monitoring Interface\\\",\\n\\\"description\\\": \\\"An interface to get the most recent air quality index from a specified city. Useful for monitoring air conditions in mining locations.\\\",\\n\\\"function_name\\\": \\\"get_air_quality\\\",\\n\\\"input_args\\\": {\\n    \\\"city\\\": \\\"The city where the mine is located\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with air quality parameters and their respective values, or a message indicating that there's no data available for the input city.\\\",\\n\\\"depend\\\": \\\"OpenAQ API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a mathematician specializing in the study of growth and fragmentation dynamics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fractal Dimension Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates the fractal dimension of an image, which is a key feature in understanding the growth and fragmentation dynamics.\\\",\\n\\\"function_name\\\": \\\"fractal_dimension\\\",\\n\\\"input_args\\\": \\\"image_path: The path to the image file.\\\",\\n\\\"return\\\": \\\"The fractal dimension of the image.\\\",\\n\\\"depend\\\": \\\"Python libraries: numpy, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A collage artist who incorporates the photographer's images of medieval villages into their mixed media projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Color Transfer Interface\\\",\\n\\\"description\\\": \\\"This interface applies the color theme of one image (the source image) to another (the target image) using color transfer methods. The user inputs the paths to both the source and target image files, and the interface returns the target image modified with the color scheme of the source image.\\\",\\n\\\"function_name\\\": \\\"color_transfer\\\",\\n\\\"input_args\\\": [\\\"source_image_path\\\", \\\"target_image_path\\\"],\\n\\\"return\\\": \\\"The modified target image with the color scheme of the source image.\\\",\\n\\\"depend\\\": {\\\"python library\\\": [\\\"cv2\\\", \\\"numpy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a UK resident who is unfamiliar with trade unions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trade Union Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides information about a specific UK trade union, including the number of members and the date it was established. It uses the UK government's Trade Union Certification Officer API.\\\",\\n\\\"function_name\\\": \\\"get_trade_union_info\\\",\\n\\\"input_args\\\": \\\"union_name\\\",\\n\\\"return\\\": \\\"A dictionary with information about the union.\\\",\\n\\\"depend\\\": \\\"requests, Certification Officer API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired engineer who invented a low-cost weather station and shares data with local farmers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Data Processing Interface\\\",\\n\\\"description\\\": \\\"This interface processes the raw weather data from a local weather station and returns a pandas dataframe with useful weather information.\\\",\\n\\\"function_name\\\": \\\"process_weather_data\\\",\\n\\\"input_args\\\": {\\n    \\\"raw_data_path\\\": \\\"The file path to the raw weather data csv file.\\\"\\n},\\n\\\"return\\\": \\\"A pandas dataframe with daily weather information.\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个对手机尤其是折叠屏手机具有强烈兴趣的科技爱好者", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Review Interface\\\", \\n\\\"description\\\": \\\"This interface uses the Amazon Product API to fetch the product's rating and total reviews. The user only needs to input the product name.\\\", \\n\\\"function_name\\\": \\\"get_product_reviews\\\", \\n\\\"input_args\\\": \\\"product_name\\\", \\n\\\"return\\\": \\\"A list of tuples, with each tuple containing the product's average rating and total reviews.\\\",\\n\\\"depend\\\": \\\"requests, json, Amazon Product API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an insurance broker who specializes in workers' compensation", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Workers' Compensation Premium Calculation Interface\\\",\\n  \\\"description\\\": \\\"This interface calculates the workers' compensation insurance premium given the payroll, classification code, and experience modifier. The calculation is based on the rules and regulations from the National Council on Compensation Insurance (NCCI).\\\",\\n  \\\"function_name\\\": \\\"calculate_premium\\\",\\n  \\\"input_args\\\": {\\n    \\\"payroll\\\": \\\"Total payroll of the company\\\",\\n    \\\"class_code\\\": \\\"Classification code of the company's industry\\\",\\n    \\\"experience_modifier\\\": \\\"Experience modifier of the company\\\"\\n  },\\n  \\\"return\\\": \\\"Estimated workers' compensation insurance premium\\\",\\n  \\\"depend\\\": \\\"NCCI rules and regulations\\\"\\n}\"", "description": "tool development"}
{"input persona": "An archaeologist exploring ancient prison sites and their cultural significance", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Historical Prison Site Information Interface\\\",\\n    \\\"description\\\": \\\"An interface to get information about a historical prison site using the Wikidata API. It returns key information such as location, instance of (like museum, heritage site, etc.), and an image of the site if available.\\\",\\n    \\\"function_name\\\": \\\"get_prison_info\\\",\\n    \\\"input_args\\\": \\\"prison_name\\\",\\n    \\\"return\\\": {\\n        \\\"coordinates\\\": \\\"[latitude, longitude]\\\",\\n        \\\"instance_of\\\": \\\"description of the site\\\",\\n        \\\"image\\\": \\\"image file name\\\"\\n    },\\n    \\\"depend\\\": \\\"Wikidata API, Large Language Model for description processing\\\"\\n}\"", "description": "tool development"}
{"input persona": "a professional athletics trainer in the United States", "synthesized text": "\"{\\n\\\"name\\\": \\\"Athlete Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the performance data of an athlete and provide useful insights.\\\",\\n\\\"function_name\\\": \\\"analyze_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to a CSV file containing the athlete's performance data.\\\"\\n},\\n\\\"return\\\": \\\"A graph showing the performance trend and a dictionary containing the maximum, minimum, and average performance of the athlete.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A tech-savvy college student studying healthcare informatics and digital health solutions", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Patient Health Record Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the FHIR API to fetch patient's health records securely and provide a simplified view of the patient's information.\\\",\\n  \\\"function_name\\\": \\\"get_patient_record\\\",\\n  \\\"input_args\\\": [\\n    {\\n      \\\"name\\\": \\\"patient_id\\\",\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"description\\\": \\\"The unique ID of the patient whose health record we want to fetch.\\\"\\n    }\\n  ],\\n  \\\"return\\\": {\\n    \\\"type\\\": \\\"Dictionary or string\\\",\\n    \\\"description\\\": \\\"A dictionary containing the patient's simplified health record or a string message in case no patient was found with the provided ID.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"FHIR API\\\"],\\n    \\\"Machine Learning Models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A mother struggling to understand and support her child with severe separation anxiety", "synthesized text": "\"{\\n\\\"name\\\": \\\"Anxiety Level Analysis Interface\\\",\\n\\\"description\\\" : \\\"This interface takes a textual description of a child's behavior and returns a score indicating the severity of separation anxiety. It leverages a pre-trained NLP model from huggingface that's trained to classify text based on anxiety levels.\\\",\\n\\\"function_name\\\" : \\\"analyze_anxiety_level\\\",\\n\\\"input_args\\\" : \\\"description - A textual description of the child's behavior\\\",\\n\\\"return\\\" : \\\"Score indicating the severity of separation anxiety. A higher score indicates higher anxiety levels.\\\",\\n\\\"depend\\\" : \\\"Huggingface's transformers library and a pre-trained model 'cardiffnlp/twitter-roberta-base-anxiety'\\\"\\n}\"", "description": "tool development"}
{"input persona": "A university department chair with a background in geochemistry and a focus on securing research funding", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grant Proposal Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the GPT-3 model from OpenAI to analyze grant proposals. The user provides the path to a grant proposal file (in text format), and the interface returns an analysis of the proposal, including clarity of presentation, research significance, methodology soundness, and budget justification.\\\",\\n\\\"function_name\\\": \\\"analyze_grant_proposal\\\",\\n\\\"input_args\\\": {\\\"path_to_txt\\\": \\\"The path to the grant proposal file in text format.\\\"},\\n\\\"return\\\": \\\"A list of strings, each string is an analysis of the grant proposal generated by the GPT-3 model.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"GPT2LMHeadModel, GPT2Tokenizer from OpenAI\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A junior faculty member seeking advice on tenure-track requirements and navigating department politics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Academic Position Requirements Lookup Interface\\\",\\n\\\"description\\\": \\\"This interface provides the general requirements for the user's tenure-track or next academic position along with any available advice or resources on department politics within their institution.\\\",\\n\\\"function_name\\\": \\\"get_position_requirements\\\",\\n\\\"input_args\\\": [\\\"position\\\", \\\"institution\\\"],\\n\\\"return\\\": \\\"A dictionary with the requirements for the tenure-track or next academic position (a list of strings) and advice on department politics (a string).\\\",\\n\\\"depend\\\": \\\"requests, bs4, LLM\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pilot who provides feedback on the airport's runway conditions and navigational aids", "synthesized text": "\"{\\n\\\"name\\\": \\\"Airport Weather Condition and Navigational Aids Interface\\\",\\n\\\"description\\\": \\\"This interface returns the weather conditions and status of navigational aids of a specific airport when provided with the airport's ICAO code.\\\",\\n\\\"function_name\\\": \\\"get_airport_conditions\\\",\\n\\\"input_args\\\": \\\"icao_code - a string representing the ICAO code of the airport\\\",\\n\\\"return\\\": \\\"A dictionary with two keys: 'weather_conditions' - a dictionary containing the current weather conditions at the airport, and 'navigational_aids' - a dictionary containing the status of the airport's navigational aids.\\\",\\n\\\"depend\\\": \\\"Python's requests library and the AviationStack API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A technical support specialist who troubleshoots and resolves issues with the database software", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Connection Troubleshooting Interface\\\",\\n\\\"description\\\": \\\"This interface attempts to establish a connection to a PostgreSQL database using the provided details and returns a success message if the connection is successful, or the error message if the connection fails.\\\",\\n\\\"function_name\\\": \\\"troubleshoot_db_connection\\\",\\n\\\"input_args\\\": {\\n    \\\"db_name\\\": \\\"Name of the database\\\",\\n    \\\"user\\\": \\\"Username for the database\\\",\\n    \\\"password\\\": \\\"Password for the database\\\",\\n    \\\"host\\\": \\\"Host address of the database\\\",\\n    \\\"port\\\": \\\"Port number for the database connection\\\"\\n},\\n\\\"return\\\": \\\"A success message if the connection is successful, or the error message if the connection fails.\\\",\\n\\\"depend\\\": \\\"psycopg2 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rising star in the tennis world who disagrees with the idea that tennis has moved beyond individual stars", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tennis Player Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches a tennis player's historical match data and statistics. The user inputs a player's name, and the interface returns the player's win-loss record and key statistics.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": \\\"player_name - the name of the tennis player\\\",\\n\\\"return\\\": \\\"A dictionary with the player's win-loss record, total titles won, and grand slam titles won.\\\",\\n\\\"depend\\\": \\\"API from tennis-match-data.com\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud mother of the film director, Josh Guffey", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Director's Movie Rating Interface\\\",\\n\\\"description\\\": \\\"Fetches the list of movies directed by a specific director along with their IMDb ratings using the OMDb API.\\\",\\n\\\"function_name\\\": \\\"get_director_movies_and_ratings\\\",\\n\\\"input_args\\\": \\\"director_name\\\",\\n\\\"return\\\": \\\"List of tuples where each tuple contains the movie title and its IMDb rating.\\\",\\n\\\"depend\\\": \\\"requests, OMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A programming language tutor specialized in Rust", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rust Code Compilation Interface\\\", \\n\\\"description\\\": \\\"This interface accepts Rust code as a string, compiles and executes it, and returns the output or any error messages.\\\", \\n\\\"function_name\\\": \\\"compile_and_run_rust_code\\\", \\n\\\"input_args\\\": {\\\"code\\\": \\\"string\\\"}, \\n\\\"return\\\": {\\\"output\\\": \\\"string\\\", \\\"error\\\": \\\"string\\\"}, \\n\\\"depend\\\": [\\\"subprocess (Python Standard Library)\\\", \\\"Rust Compiler\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Um brasileiro que adora sair com amigos para bares, mas detesta a hora de dividir a conta.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bill Splitting Interface\\\",\\n\\\"description\\\": \\\"This interface receives the total bill, the list of each person's orders and the percentage of tip to be added. The interface then returns a fair split of the bill among everyone.\\\",\\n\\\"function_name\\\": \\\"calculate_individual_bill\\\",\\n\\\"input_args\\\": [\\\"total_bill\\\", \\\"orders\\\", \\\"tip_percentage\\\"],\\n\\\"return\\\": \\\"A dictionary with the amount each person should pay.\\\",\\n\\\"depend\\\": \\\"Python built-in functions and data structures\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful podcast host hosting a show exploring the science and technology behind political campaigns", "synthesized text": "\"{\\n\\\"name\\\": \\\"Transcription Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes podcast episodes and extracts names of technologies or scientific terms mentioned in the episode.\\\",\\n\\\"function_name\\\": \\\"extract_technologies\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"List of technologies and scientific terms discussed in the episode\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"google.cloud\\\", \\\"transformers\\\"], \\\"Web APIs\\\": [\\\"Google's Speech-to-Text API\\\"], \\\"machine learning models\\\": [\\\"Huggingface's NLP library\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A policy director developing an African strategic plan based on data analysis", "synthesized text": "\"{\\n\\\"name\\\": \\\"African Development Indicator Interface\\\",\\n\\\"description\\\": \\\"Fetches and returns a specified indicator data for a specified African country from the World Bank API.\\\",\\n\\\"function_name\\\": \\\"get_african_development_indicator\\\",\\n\\\"input_args\\\": {\\n    \\\"country\\\": \\\"A string representing the ISO-3166-1 alpha-3 country code, e.g., 'NGA' for Nigeria\\\",\\n    \\\"indicator\\\": \\\"A string representing the World Bank indicator code, e.g., 'SP.POP.TOTL' for Total Population\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with years as keys and the corresponding indicator values as values.\\\",\\n\\\"depend\\\": \\\"World Bank API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmacy technician responsible for accurately dispensing medications for pediatric patients", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pediatric Dosage Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the dosage of medication for pediatric patients based on their body weight.\\\",\\n\\\"function_name\\\": \\\"pediatric_dosage_calculator\\\",\\n\\\"input_args\\\": {\\n    \\\"medication_name\\\": \\\"Name of the medication\\\",\\n    \\\"dosage_per_kg\\\": \\\"Dosage per kilogram of body weight (in mg/kg)\\\",\\n    \\\"patient_weight\\\": \\\"Weight of the patient in kilograms\\\"\\n},\\n\\\"return\\\": \\\"String stating the recommended dosage of the medication for the given patient\\\",\\n\\\"depend\\\": \\\"No dependencies\\\"\\n}\"", "description": "tool development"}
{"input persona": "A geographer who studies the spatial distribution of populations and their characteristics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Population Density Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the population density of a given location using APIs from OpenCage to get the geographical area of the location and APIs from census.gov to get the population of that area.\\\",\\n\\\"function_name\\\": \\\"calculate_population_density\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"population density (population per square kilometer)\\\",\\n\\\"depend\\\": \\\"requests library, OpenCage API, census.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A TV sports journalist with a strategic mind and an amazing ability to present complex game tactics in a straightforward way", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Play Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the next play in a basketball match given the current game state. The current game state includes the positions of the players and the ball.\\\",\\n\\\"function_name\\\": \\\"predict_next_play\\\",\\n\\\"input_args\\\": \\\"game_state - The current state of the game, which includes the positions of the players and the ball.\\\",\\n\\\"return\\\": \\\"The predicted next play in the basketball match.\\\",\\n\\\"depend\\\": \\\"TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "The home janitor at the Hagan Arena where the Saint Joseph's Hawks play their basketball games.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cleaning Schedule Interface\\\", \\n\\\"description\\\": \\\"This interface creates a cleaning schedule in the user's Google Calendar for the specified dates and areas of the Hagan Arena.\\\", \\n\\\"function_name\\\": \\\"create_cleaning_schedule\\\",\\n\\\"input_args\\\": [\\\"dates_areas\\\"], \\n\\\"return\\\": \\\"Cleaning schedule created\\\",\\n\\\"depend\\\": [\\\"googleapiclient.discovery\\\", \\\"google_auth_oauthlib.flow\\\", \\\"datetime\\\", \\\"pytz\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A proud Wisconsin local who has her son enlisted in the Army National Guard", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Personnel Status Interface\\\",\\n\\\"description\\\": \\\"An interface to confirm whether an individual is currently serving in the military. The user needs to input the service member's first name, last name, and date of birth. The interface will return the status of the service member.\\\",\\n\\\"function_name\\\": \\\"verify_military_status\\\",\\n\\\"input_args\\\": [\\\"first_name\\\", \\\"last_name\\\", \\\"dob\\\"],\\n\\\"return\\\": \\\"The status of the service member\\\",\\n\\\"depend\\\": \\\"Defense Manpower Data Center's (DMDC) Military Verification service\\\"\\n}\"", "description": "tool development"}
{"input persona": "A vocal taxpayer advocating for increased government spending on community projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Community Project Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"Estimates the cost of a community project based on its type, location, and size\\\",\\n\\\"function_name\\\": \\\"estimate_project_cost\\\",\\n\\\"input_args\\\": [\\\"project_type\\\", \\\"location\\\", \\\"size\\\"],\\n\\\"return\\\": \\\"Estimated cost of the project\\\",\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"sklearn\\\", \\\"joblib\\\"], \\\"models\\\": [\\\"pretrained machine learning model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A stakeholder of London Transport Authority", "synthesized text": "\"{\\n\\\"name\\\": \\\"Public Transport Route Planner Interface\\\",\\n\\\"description\\\": \\\"This interface provides the best public transportation route between two locations in London using the TFL API.\\\",\\n\\\"function_name\\\": \\\"get_public_transport_route\\\",\\n\\\"input_args\\\": {\\\"start_location\\\": \\\"The user's current location (a postcode or name of location)\\\", \\\"end_location\\\": \\\"The user's destination (a postcode or name of location)\\\"},\\n\\\"return\\\": \\\"A list of instructions for the route, including details such as the mode of transportation, the route number, the direction, and the stops.\\\",\\n\\\"depend\\\": \\\"This function relies on the Transport for London (TFL) API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A web developer with limited knowledge on macOS system architecture", "synthesized text": "\"{\\n\\\"name\\\": \\\"MacOS System Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides key system information about the macOS, such as machine type, macOS version, processor architecture, and hostname.\\\",\\n\\\"function_name\\\": \\\"get_macos_system_info\\\",\\n\\\"input_args\\\": \\\"None\\\",\\n\\\"return\\\": \\\"A dictionary containing key system information\\\",\\n\\\"depend\\\": \\\"Python built-in libraries: platform, socket\\\"\\n}\"", "description": "tool development"}
{"input persona": "A book club organizer who includes the artist's handmade bookmarks as part of the club's monthly subscription box", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Cover Color Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow to identify the dominant color in the book cover image. The user only needs to input the URL to a book cover image, and our interface will return the dominant color in the image.\\\",\\n\\\"function_name\\\": \\\"get_dominant_color\\\",\\n\\\"input_args\\\": [\\\"url_to_img\\\"],\\n\\\"return\\\": \\\"dominant_color\\\",\\n\\\"depend\\\": [\\\"PIL\\\", \\\"requests\\\", \\\"tensorflow\\\", \\\"numpy\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a classically trained lute player", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sheet Music Transposition Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to transpose a music sheet file to a different key.\\\",\\n\\\"function_name\\\": \\\"transpose_sheet_music\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_sheet_music\\\": \\\"string representing the path of the music sheet file (in MusicXML format)\\\",\\n    \\\"target_key\\\": \\\"string representing the desired key to transpose to\\\"\\n},\\n\\\"return\\\": \\\"string representing the path of the transposed music sheet file (in MusicXML format)\\\",\\n\\\"depend\\\": \\\"Python music21 library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A social justice advocate who supports decriminalization and shares research on its potential benefits", "synthesized text": "\"{\\n\\\"name\\\": \\\"Decriminalization Stats Interface\\\",\\n\\\"description\\\": \\\"Predicts the crime rate for a specified type of crime for the next five years.\\\",\\n\\\"function_name\\\": \\\"predict_crime_rate\\\",\\n\\\"input_args\\\": {\\n    \\\"crime_type\\\": \\\"The type of crime to predict the rate for.\\\",\\n    \\\"year\\\": \\\"The year to begin the prediction from.\\\"\\n},\\n\\\"return\\\": \\\"A list of predicted crime rates for the next five years.\\\",\\n\\\"depend\\\": \\\"Criminal Justice API from data.gov, Python's requests and pandas libraries, PyCaret Machine Learning Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An active duty military member concerned about family law", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Analyzer\\\",\\n\\\"description\\\": \\\"This interface identifies and returns all the legal terms present in a legal document related to family law.\\\",\\n\\\"function_name\\\": \\\"identify_legal_terms\\\",\\n\\\"input_args\\\": \\\"document\\\",\\n\\\"return\\\": \\\"legal_terms\\\",\\n\\\"depend\\\": \\\"Hugging Face transformers library, dslim/bert-base-NER model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chef who comes from a long line of culinary experts, carrying on the family's traditional recipes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Substitution Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a list of substitute ingredients for a given ingredient. It uses the Spoonacular Food API.\\\",\\n\\\"function_name\\\": \\\"get_substitute_ingredients\\\",\\n\\\"input_args\\\": [\\\"ingredient\\\"],\\n\\\"return\\\": \\\"List of substitute ingredients or a message if no substitutes found\\\",\\n\\\"depend\\\": \\\"Spoonacular's Food API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A national park ranger diligently enforcing guidelines to minimize artificial lighting at the park", "synthesized text": "\"{\\n\\\"name\\\": \\\"Starlight Preservation Interface\\\",\\n\\\"description\\\": \\\"This interface detects artificial light sources in the image provided by the user to help park rangers enforce guidelines to minimize artificial lighting at the park.\\\",\\n\\\"function_name\\\": \\\"detect_artificial_lights\\\",\\n\\\"input_args\\\": \\\"path_to_img - path to the image file\\\",\\n\\\"return\\\": \\\"A list of coordinates of detected artificial light sources.\\\",\\n\\\"depend\\\": \\\"Tensorflow, Tensorflow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A freelance content writer seeking advice on optimizing their articles for search engines", "synthesized text": "\"{\\n  \\\"name\\\": \\\"SEO Keyword Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches potential keywords for a given topic using SEMRush API, then it uses Google Trends API to compare their popularity over time. This helps content writers optimize their articles for search engines by incorporating the most relevant and popular keywords.\\\",\\n  \\\"function_name\\\": \\\"get_seo_keywords\\\",\\n  \\\"input_args\\\": {\\n    \\\"topic\\\": \\\"The topic for which the user wants to fetch and analyze potential SEO keywords.\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary of potential keywords and their average popularity over the last 12 months. The higher the average popularity, the more effective the keyword could be for SEO.\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"pytrends\\\"],\\n    \\\"Web APIs\\\": [\\\"SEMRush API\\\", \\\"Google Trends API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "Yemeni villager from Al-Ghanaya", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"Provides the current weather conditions for a specific city using the OpenWeatherMap API\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": \\\"city_name\\\",\\n\\\"return\\\": \\\"A dictionary containing the current temperature, pressure, humidity, and weather report for the specified city\\\",\\n\\\"depend\\\": \\\"requests library, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "The butcher from the shop next door who often indulges in historical novels based on local tales", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Novel Text Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input the path to a text file of a novel and returns a summary of the novel's themes, characters, and plot points.\\\",\\n\\\"function_name\\\": \\\"analyze_novel\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"{'entities': entities, 'noun_phrases': noun_phrases}\\\",\\n\\\"depend\\\": \\\"Python's textacy and nltk libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tourism promoter for the Nigerian city Gwandum", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tourist Attraction Recommendations Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends top tourist attractions near the provided location in Gwandum, Nigeria.\\\",\\n\\\"function_name\\\": \\\"get_tourist_attractions_in_Gwandum\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": [\\\"List of top tourist attractions near the provided location.\\\"],\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Google Places API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Charmaine Vincent, the CEO of Baltimore Consulting, who is strongly passionate about her work.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts input text into spoken words and generates an audio file, which is useful for listening to documents or reports while multitasking.\\\",\\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": [\\\"text\\\", \\\"language\\\", \\\"slow_audio_speed\\\"],\\n\\\"return\\\": \\\"An audio file that reads out the input text\\\",\\n\\\"depend\\\": [\\\"gtts\\\", \\\"os\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer developing data systems and processes to meet compliance standards", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Anonymization Interface\\\",\\n\\\"description\\\": \\\"An interface to anonymize sensitive data in a CSV file. The user only needs to input the path to a CSV file and the column names that need to be anonymized. The interface will return a new CSV file with the anonymized data.\\\",\\n\\\"function_name\\\": \\\"anonymize_data\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"Path to the CSV file\\\",\\n    \\\"columns_to_anonymize\\\": \\\"List of columns in the CSV file that need to be anonymized\\\"\\n},\\n\\\"return\\\": \\\"Path to the new CSV file with anonymized data\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"pandas\\\", \\\"Faker\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A professional rugby player known for his aggressive playing style and high injury rate", "synthesized text": "\"{\\n\\\"name\\\": \\\"Injury Risk Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the injury risk of a rugby player based on various factors such as player's age, total years of playing, aggressive playing style, average game time, training intensity etc.\\\",\\n\\\"function_name\\\": \\\"predict_injury_risk\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"years_of_playing\\\", \\\"aggressive_style\\\", \\\"avg_game_time\\\", \\\"training_intensity\\\"],\\n\\\"return\\\": \\\"A float representing the injury risk in percentage.\\\",\\n\\\"depend\\\": \\\"tensorflow\\\"\\n}\"", "description": "tool development"}
{"input persona": "A government official advocating for legislative reforms to remove barriers for individuals with criminal records in the job market", "synthesized text": "\"{\\n\\\"name\\\": \\\"Criminal Records Check Interface\\\",\\n\\\"description\\\": \\\"Scrape job postings from a provided URL, and return a summary of the number and percentage of job postings that require a criminal record check.\\\",\\n\\\"function_name\\\": \\\"scrape_job_postings\\\",\\n\\\"input_args\\\": \\\"url\\\",\\n\\\"return\\\": \\\"Dictionary with total_jobs, criminal_check_jobs, and percentage\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup, re\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retail worker who is constantly inspired by the latest fashion trends and utilizes them in their personal style", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fashion Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes a specified fashion blog or website to identify and return a list of the latest fashion trends.\\\",\\n\\\"function_name\\\": \\\"get_fashion_trends\\\",\\n\\\"input_args\\\": \\\"url - a string that represents the URL of the fashion blog or website\\\",\\n\\\"return\\\": \\\"A list of strings where each string is a trending fashion item.\\\",\\n\\\"depend\\\": \\\"Python's BeautifulSoup and requests libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rheologist who studies the effects of drag and turbulence on high-speed vehicles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aerodynamic Drag Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the aerodynamic drag on an object moving at a certain speed. It takes in the speed of the object, its cross-sectional area, the air density, and the drag coefficient, and returns the calculated drag force.\\\",\\n\\\"function_name\\\": \\\"calculate_aerodynamic_drag\\\",\\n\\\"input_args\\\": [\\\"speed\\\", \\\"cross_sectional_area\\\", \\\"air_density\\\", \\\"drag_coefficient\\\"],\\n\\\"return\\\": \\\"Drag force in Newtons\\\",\\n\\\"depend\\\": [\\\"Scipy library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A county health officer responsible for implementing public health measures on a local level", "synthesized text": "\"{\\n\\\"name\\\": \\\"COVID-19 Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to quickly analyze the current situation of COVID-19 in their county by inputting their county and state name. The interface will return the total cases, deaths, and recovered patients.\\\",\\n\\\"function_name\\\": \\\"get_covid_data\\\",\\n\\\"input_args\\\": [\\\"county\\\", \\\"state\\\"],\\n\\\"return\\\": {\\\"County\\\": \\\"string\\\", \\\"State\\\": \\\"string\\\", \\\"Total Cases\\\": \\\"int\\\", \\\"Deaths\\\": \\\"int\\\", \\\"Recovered\\\": \\\"int\\\"},\\n\\\"depend\\\": \\\"Python libraries: requests, pandas; Web API: CSSE at Johns Hopkins University\\\"\\n}\"", "description": "tool development"}
{"input persona": "Compiler Designer", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Source Code to Abstract Syntax Tree (AST) Conversion\\\",\\n  \\\"description\\\": \\\"This interface converts a string of Python source code into an Abstract Syntax Tree (AST), which is a tree representation of the abstract syntactic structure of the source code.\\\",\\n  \\\"function_name\\\": \\\"source_code_to_ast\\\",\\n  \\\"input_args\\\": [\\\"source_code\\\"],\\n  \\\"return\\\": \\\"AST\\\",\\n  \\\"depend\\\": [\\\"Python's built-in ast module\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a prison inmate who is about to file a lawsuit and trying to figure out legal procedures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses a GPT-3 model to generate a legal document based on the provided document type and situation description.\\\",\\n\\\"function_name\\\": \\\"generate_legal_document\\\",\\n\\\"input_args\\\": {\\n    \\\"document_type\\\": \\\"The type of document to generate (e.g., 'complaint', 'motion', etc.)\\\",\\n    \\\"description\\\": \\\"A brief description of the user's situation\\\"\\n},\\n\\\"return\\\": \\\"A generated legal document text.\\\",\\n\\\"depend\\\": \\\"Hugging Face's GPT-3 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a regular Ghana Premier League (GPL) spectator from Tarkwa", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to predict the outcome of football matches based on historical data. Users simply need to input the names of the two football teams (home team and away team), and the interface will return the predicted outcome of the match.\\\",\\n\\\"function_name\\\": \\\"predict_match\\\",\\n\\\"input_args\\\": [\\\"home_team\\\", \\\"away_team\\\"],\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": [\\\"transformers\\\", \\\"torch\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a member of the Dutch Resistance in WWII", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Download WWII Resistance Files Interface\\\",\\n  \\\"description\\\": \\\"Download WWII Resistance files related to a specific member from an online archive.\\\",\\n  \\\"function_name\\\": \\\"download_resistance_files\\\",\\n  \\\"input_args\\\": \\\"resistance_member_name\\\",\\n  \\\"return\\\": \\\"filename of the downloaded file\\\",\\n  \\\"depend\\\": \\\"Python 'requests' and 'os' libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "Daichi Omori's childhood friend, who is now a sports journalist specialized in football.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface fetches statistics for a specific football match between two teams on a given date using the Sportradar API.\\\",\\n\\\"function_name\\\": \\\"get_football_match_statistics\\\",\\n\\\"input_args\\\": [\\\"team1\\\", \\\"team2\\\", \\\"match_date\\\"],\\n\\\"return\\\": \\\"A dictionary containing detailed match statistics if the match was found, otherwise a message indicating that no match was found.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"datetime\\\", \\\"Sportradar API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A policy studies student who believes that market solutions and voluntary initiatives are the best approach to environmental protection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the carbon footprint of certain activities or products using the Carbon Interface API. The user inputs the type of activity and other necessary parameters based on the activity type, and the interface returns the estimated carbon emissions.\\\",\\n\\\"function_name\\\": \\\"calculate_carbon_footprint\\\",\\n\\\"input_args\\\": {\\\"activity_type\\\": \\\"string\\\", \\\"**kwargs\\\": \\\"various types based on activity\\\"},\\n\\\"return\\\": \\\"float (carbon emissions in grams)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"web APIs\\\": [\\\"Carbon Interface API\\\"], \\\"machine learning models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "A professor emeritus who supervised Davis' early research and continues to provide guidance on his literary career", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"An interface to convert text to speech using Google's Text-to-Speech API\\\",\\n\\\"function_name\\\": \\\"convert_text_to_speech\\\",\\n\\\"input_args\\\": [\\\"input_text\\\", \\\"language\\\"],\\n\\\"return\\\": \\\"Path to the audio file containing the spoken text\\\",\\n\\\"depend\\\": \\\"gtts library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A talented graphic designer who is looking to improve their conversational skills in the local language", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Language Translation Interface\\\",\\n  \\\"description\\\": \\\"This interface translates the English text into the target language using Google Cloud's Translation API.\\\",\\n  \\\"function_name\\\": \\\"translate_text\\\",\\n  \\\"input_args\\\": [\\n    {\\n      \\\"name\\\": \\\"text\\\",\\n      \\\"type\\\": \\\"str\\\",\\n      \\\"description\\\": \\\"The English text to be translated.\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"target_language\\\",\\n      \\\"type\\\": \\\"str\\\",\\n      \\\"description\\\": \\\"The language code of the target language.\\\"\\n    },\\n    {\\n      \\\"name\\\": \\\"translate_client\\\",\\n      \\\"type\\\": \\\"google.cloud.translate_v2.client.Client\\\",\\n      \\\"description\\\": \\\"The Google Cloud Translation API client.\\\"\\n    }\\n  ],\\n  \\\"return\\\": {\\n    \\\"type\\\": \\\"str\\\",\\n    \\\"description\\\": \\\"The translated text.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python\\\": [\\n      \\\"google.cloud.translate_v2\\\"\\n    ],\\n    \\\"web_APIs\\\": [\\n      \\\"Google Cloud Translation API\\\"\\n    ],\\n    \\\"ML_models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "Um proprietário de uma empresa de comércio eletrônico que busca aumentar as taxas de conversão", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interface de Recomenda\\u00e7\\u00e3o de Produtos\\\",\\n  \\\"description\\\": \\\"Recomenda produtos aos usu\\u00e1rios com base em seu hist\\u00f3rico de compras, utilizando o algoritmo LightFM para treinar um modelo de recomenda\\u00e7\\u00e3o.\\\",\\n  \\\"function_name\\\": \\\"recommend_products\\\",\\n  \\\"input_args\\\": {\\n    \\\"user_product_dict\\\": \\\"Um dicion\\u00e1rio onde as chaves s\\u00e3o IDs de usu\\u00e1rios e os valores s\\u00e3o listas de IDs de produtos que o usu\\u00e1rio comprou no passado.\\\",\\n    \\\"user_id\\\": \\\"O ID do usu\\u00e1rio para o qual as recomenda\\u00e7\\u00f5es de produtos devem ser geradas.\\\"\\n  },\\n  \\\"return\\\": \\\"Uma lista dos IDs de produtos recomendados para o usu\\u00e1rio.\\\",\\n  \\\"depend\\\": {\\n    \\\"python library\\\": [\\\"lightfm\\\", \\\"numpy\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An organized and ethical accountant who shares the same faith and ensures the financial transparency of the business", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Automated Financial Report Generation Interface\\\",\\n  \\\"description\\\": \\\"This interface takes in the path to a CSV file containing financial transactions, and returns a comprehensive financial report including total revenue, total cost, and total profit.\\\",\\n  \\\"function_name\\\": \\\"generate_financial_report\\\",\\n  \\\"input_args\\\": \\\"csv_path\\\",\\n  \\\"return\\\": \\\"A dictionary containing total revenue, total cost, and total profit.\\\",\\n  \\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic young trumpet student who admires Joe Burgstaller", "synthesized text": "\"{\\n\\\"name\\\": \\\"Trumpet Fingerings Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the trumpet fingering for a given note.\\\",\\n\\\"function_name\\\": \\\"get_fingering\\\",\\n\\\"input_args\\\": \\\"note\\\",\\n\\\"return\\\": \\\"Fingering for the input note\\\",\\n\\\"depend\\\": \\\"Python dictionary\\\"\\n}\"", "description": "tool development"}
{"input persona": "a student who admires Nico Schüler's academic achievements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the Spotify Web API to analyze a specific song's musical features. The user inputs the song's Spotify ID, and the interface returns a detailed analysis of the song's musical features.\\\",\\n\\\"function_name\\\": \\\"get_song_features\\\",\\n\\\"input_args\\\": \\\"song_id\\\",\\n\\\"return\\\": \\\"A dictionary of the song's musical features with keys such as 'danceability', 'energy', 'key', 'loudness', 'mode', 'acousticness', 'instrumentalness', 'liveness', 'valence', and 'tempo'.\\\",\\n\\\"depend\\\": \\\"spotipy Python library, Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A loyal customer of Caberg helmets living in a small supervised suburb outside Houston, Texas. He enjoys weekend motorcycle trips within the state and is a graphic designer by profession.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Helmet Design Interface\\\",\\n\\\"description\\\": \\\"Generates new helmet designs using a pre-trained Generative Adversarial Network (GAN) model from TensorFlow Hub.\\\",\\n\\\"function_name\\\": \\\"generate_helmet_design\\\",\\n\\\"input_args\\\": [\\\"seed\\\"],\\n\\\"return\\\": \\\"An image of a new helmet design.\\\",\\n\\\"depend\\\": [\\\"TensorFlow\\\", \\\"TensorFlow Hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A financial institution looking to implement blockchain technology in their existing systems to increase efficiency and security", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Transaction Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to create, sign, and send transactions on the Ethereum blockchain network.\\\",\\n\\\"function_name\\\": \\\"send_eth_transaction\\\",\\n\\\"input_args\\\": {\\n    \\\"private_key\\\": \\\"The private key of the sender's Ethereum account.\\\",\\n    \\\"to_address\\\": \\\"The Ethereum address of the recipient.\\\",\\n    \\\"value\\\": \\\"The amount of Ether to send.\\\",\\n    \\\"gas_price\\\": \\\"The price of gas to use for this transaction.\\\"\\n    },\\n\\\"return\\\": \\\"The transaction hash of the sent transaction.\\\",\\n\\\"depend\\\": \\\"Python libraries: web3.py, eth_account\\\"\\n}\"", "description": "tool development"}
{"input persona": "A social media influencer known for their expertise in creating viral animated content", "synthesized text": "\"{\\n\\\"name\\\": \\\"GIF Frame Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts frames from a GIF file and saves them as separate image files\\\",\\n\\\"function_name\\\": \\\"extract_gif_frames\\\",\\n\\\"input_args\\\": {\\\"path_to_gif\\\": \\\"str\\\", \\\"output_dir\\\": \\\"str\\\"},\\n\\\"return\\\": \\\"str\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"PIL\\\", \\\"os\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A Costa Rican high school history teacher who is proud of his country's contributions to international law and justice.", "synthesized text": "\"{\\n\\\"name\\\": \\\"International Law Event Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained NER pipeline from HuggingFace Transformers library to extract entities and events related to international law from a given text.\\\",\\n\\\"function_name\\\": \\\"extract_international_law_events\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"A string containing a text about international law.\\\"},\\n\\\"return\\\": {\\\"events\\\": \\\"A list of dictionaries. Each dictionary contains information about an entity or event extracted from the text.\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"dbmdz/bert-large-cased-finetuned-conll03-english\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A legislator who is open to understanding the sociologist's research and incorporating it into lawmaking", "synthesized text": "\"{\\n\\\"name\\\": \\\"Social Research Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that reads and analyzes social research data, extracts and summarizes the key findings which can be used for lawmaking or policy decisions.\\\",\\n\\\"function_name\\\": \\\"analyse_social_research\\\",\\n\\\"input_args\\\": [\\\"file_path\\\", \\\"file_format\\\"],\\n\\\"return\\\": \\\"A list of summarized key findings from the social research data.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"HuggingFace's transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A laid-back government employee who has mastered the art of 'working to live' and not living to work", "synthesized text": "\"{\\n\\\"name\\\": \\\"Public Holiday Checker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to check whether a specific date is a public holiday in their country. It takes two inputs that are the country and the specific date, and returns a boolean indicating if the date is a public holiday.\\\",\\n\\\"function_name\\\": \\\"is_public_holiday\\\",\\n\\\"input_args\\\": [\\\"country\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"Boolean (True if the date is a public holiday, False otherwise)\\\",\\n\\\"depend\\\": \\\"Abstract API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An environmental non-profit organization that educates couples on eco-conscious wedding options", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the estimated carbon footprint of a wedding based on the number of guests, their average travel distance, and the type of meal served.\\\",\\n\\\"function_name\\\": \\\"calculate_wedding_footprint\\\",\\n\\\"input_args\\\": [\\\"number_of_guests\\\", \\\"average_travel_distance\\\", \\\"meal_type\\\"],\\n\\\"return\\\": \\\"The estimated carbon footprint of the wedding.\\\",\\n\\\"depend\\\": \\\"This function uses the carbon footprint calculation formula and various assumptions about average values.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a passionate SC Rheindorf Altach fan and local blogger from Altach, Austria.", "synthesized text": "\"{\\n    \\\"match\\\": {\\n        \\\"id\\\": 1234,\\n        \\\"competition\\\": {\\n            \\\"name\\\": \\\"Premier League\\\"\\n        },\\n        \\\"homeTeam\\\": {\\n            \\\"name\\\": \\\"Team 1\\\",\\n            \\\"goals\\\": 2\\n        },\\n        \\\"awayTeam\\\": {\\n            \\\"name\\\": \\\"Team 2\\\",\\n            \\\"goals\\\": 1\\n        },\\n        \\\"status\\\": \\\"FINISHED\\\",\\n        \\\"lastUpdated\\\": \\\"2020-01-01T00:00:00Z\\\"\\n    },\\n    \\\"timeline\\\": [\\n        {\\n            \\\"minute\\\": \\\"1\\\",\\n            \\\"type\\\": \\\"KICK_OFF\\\",\\n            \\\"team\\\": \\\"Team 1\\\"\\n        },\\n        ...\\n    ]\\n}\"", "description": "tool development"}
{"input persona": "a construction engineering student in Rhode Island", "synthesized text": "\"[\\n    {\\n        'date': '2021-11-30 12:00:00',\\n        'temperature': 280.15,\\n        'weather': 'light rain'\\n    },\\n    {\\n        'date': '2021-11-30 15:00:00',\\n        'temperature': 279.6,\\n        'weather': 'overcast clouds'\\n    },\\n    ...\\n]\"", "description": "tool development"}
{"input persona": "我是一个心理学讲师，专注于人际关系和自我认知的研究。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u60c5\\u611f\\u5206\\u6790\\u754c\\u9762\\\",\\n\\\"description\\\": \\\"\\u4f7f\\u7528Huggingface\\u7684Transformers\\u5e93\\u4e2d\\u7684\\u9884\\u8bad\\u7ec3\\u6a21\\u578b\\u8fdb\\u884c\\u60c5\\u611f\\u5206\\u6790\\u3002\\u7528\\u6237\\u53ea\\u9700\\u8f93\\u5165\\u4e00\\u6bb5\\u6587\\u672c\\uff0c\\u5c31\\u80fd\\u83b7\\u53d6\\u8fd9\\u6bb5\\u6587\\u672c\\u7684\\u60c5\\u611f\\u5206\\u6790\\u7ed3\\u679c\\u3002\\\",\\n\\\"function_name\\\": \\\"analyze_emotion\\\",\\n\\\"input_args\\\": \\\"\\u4e00\\u6bb5\\u6587\\u672c\\\",\\n\\\"return\\\": \\\"\\u60c5\\u611f\\u5206\\u6790\\u7684\\u7ed3\\u679c\\uff0c\\u5305\\u62ec\\u60c5\\u611f\\u7684\\u7c7b\\u522b\\u548c\\u8be5\\u7c7b\\u522b\\u7684\\u5f97\\u5206\\\",\\n\\\"depend\\\": \\\"Huggingface\\u7684Transformers\\u5e93\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local trail coordinator who assists in maintaining and promoting safe cycling routes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bike Route Safety Score Interface\\\",\\n  \\\"description\\\": \\\"This interface returns a safety score for a given bike route, based on its distance, elevation, and the current weather.\\\",\\n  \\\"function_name\\\": \\\"bike_route_safety_score\\\",\\n  \\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n  \\\"return\\\": \\\"A safety score for the given bike route, with higher scores indicating safer routes.\\\",\\n  \\\"depend\\\": [\\\"Google Maps Directions API\\\", \\\"OpenWeatherMap API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A developer planning to build a quarry in the Burren, which poses a threat to the conservation of the limestone formations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Environmental Impact Assessment Interface\\\",\\n\\\"description\\\": \\\"This interface utilizes a pre-trained machine learning model to analyze satellite imagery of an area before and after a certain event (e.g., building a quarry) and estimates the environmental impact.\\\",\\n\\\"function_name\\\": \\\"calculate_environmental_impact\\\",\\n\\\"input_args\\\": {\\n    \\\"before_img_path\\\": \\\"The path to the satellite image of the area before the event.\\\",\\n    \\\"after_img_path\\\": \\\"The path to the satellite image of the area after the event.\\\"\\n},\\n\\\"return\\\": \\\"The environmental impact as a percentage. A negative value means a decrease in the environmental feature (e.g., limestone formations) and a positive value means an increase.\\\",\\n\\\"depend\\\": \\\"TensorFlow for the machine learning model, and skimage for image reading and processing.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow Ukrainian physicist inspired by Iryna Adamenko's work and legacy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Particle Physics Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes a CSV file of experimental data, processes it, and returns the mean, median, and standard deviation of the data\\\",\\n\\\"function_name\\\": \\\"analyze_particle_physics_data\\\",\\n\\\"input_args\\\": \\\"file_path - a string that represents the path to a CSV file\\\",\\n\\\"return\\\": \\\"a dictionary that contains the mean, median, and standard deviation of the data\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "Current law student specializing in property law", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Price Prediction Interface\\\", \\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the price of a property based on its features.\\\", \\n\\\"function_name\\\": \\\"predict_property_price\\\", \\n\\\"input_args\\\": {\\n    \\\"features\\\": \\\"A dictionary with keys as feature names and values as feature values\\\"\\n    }, \\n\\\"return\\\": \\\"The predicted price of the property.\\\", \\n\\\"depend\\\": [\\\"scikit-learn\\\", \\\"pandas\\\", \\\"pickle\\\", \\\"pre-trained machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a software developer currently working on a Runelite plugin.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Old School RuneScape (OSRS) Grand Exchange Price Checker Interface\\\",\\n  \\\"description\\\": \\\"Fetches the current price of any item in the Old School RuneScape (OSRS) Grand Exchange using the OSRS Grand Exchange API. User needs to input the item name.\\\",\\n  \\\"function_name\\\": \\\"get_item_price\\\",\\n  \\\"input_args\\\": \\\"item_name\\\",\\n  \\\"return\\\": \\\"current price of the item in the Old School RuneScape (OSRS) Grand Exchange\\\",\\n  \\\"depend\\\": \\\"requests, OSRS Grand Exchange API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular online reseller who primarily utilizes social media platforms to advertise and sell their items", "synthesized text": "\"{\\n\\\"name\\\": \\\"Social Media Ad Analytics Interface\\\",\\n\\\"description\\\": \\\"An interface to pull ad performance data from Facebook's Marketing API, returning impressions, reach, clicks, and spend for a specified ad.\\\",\\n\\\"function_name\\\": \\\"get_ad_analytics\\\",\\n\\\"input_args\\\": {\\n    \\\"ad_id\\\": \\\"The ID of the ad for which to get analytics.\\\",\\n    \\\"access_token\\\": \\\"The access token for the Facebook Marketing API.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Impressions\\\": \\\"The total number of times the ad was shown.\\\",\\n    \\\"Reach\\\": \\\"The number of unique users who saw the ad.\\\",\\n    \\\"Clicks\\\": \\\"The number of clicks on the ad.\\\",\\n    \\\"Spend\\\": \\\"The total amount of money spent on the ad.\\\"\\n},\\n\\\"depend\\\": \\\"Facebook's Marketing API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a professor in mathematics, with a particular interest in complex analysis, and I always feel delighted to discuss and reflect on the beautiful results in the field like Matsaev's theorem.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Complex Number Operations Interface\\\",\\n\\\"description\\\": \\\"Perform complex number operations such as addition, subtraction, multiplication and division\\\",\\n\\\"function_name\\\": \\\"complex_number_operations\\\",\\n\\\"input_args\\\": [\\\"operation\\\", \\\"complex_number1\\\", \\\"complex_number2\\\"],\\n\\\"return\\\": \\\"The result of the operation as a string representing a complex number\\\",\\n\\\"depend\\\": \\\"mpmath Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Polish Jew, who feels a strong connection to my Jewish heritage and roots.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hebrew Text Transliteration Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes Hebrew text into Latin characters, allowing users to read Hebrew text even if they are unfamiliar with the Hebrew alphabet.\\\",\\n\\\"function_name\\\": \\\"transliterate_hebrew\\\",\\n\\\"input_args\\\": {\\n    \\\"hebrew_text\\\": \\\"The Hebrew text that needs to be transcribed into Latin characters.\\\"\\n    },\\n\\\"return\\\": {\\n    \\\"description\\\": \\\"The transcription of the Hebrew text into Latin characters.\\\",\\n    \\\"type\\\": \\\"string\\\"\\n    },\\n\\\"depend\\\": \\\"hebalpha Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A horse owner who is interested in adopting a rescued horse and seeks guidance on care and training", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horse Care and Training Guide Interface\\\",\\n\\\"description\\\": \\\"This interface uses a large language model to generate a care and training guide for horse owners. The user inputs the horse's age, breed, and any known behavioral issues, and the interface returns a guide providing advice on feeding, grooming, exercise, and training.\\\",\\n\\\"function_name\\\": \\\"generate_horse_care_and_training_guide\\\",\\n\\\"input_args\\\": {\\n    \\\"age\\\": \\\"The age of the horse in years\\\",\\n    \\\"breed\\\": \\\"The breed of the horse\\\",\\n    \\\"behavioral_issues\\\": \\\"Any known behavioral issues the horse has\\\"\\n},\\n\\\"return\\\": \\\"A guide providing advice on feeding, grooming, exercise, and training for the horse.\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst analyzing patterns of technological adoption among different demographics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Technology Adoption Analysis Interface\\\",\\n\\\"description\\\": \\\"Analyze patterns of technology adoption among different demographics by using Kmeans clustering. The function standardizes the technology adoption metrics, performs k-means clustering, and adds a new 'cluster' column to the original data, indicating which cluster each demographic belongs to.\\\",\\n\\\"function_name\\\": \\\"tech_adoption_cluster\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"Path to the CSV file with demographic and technology adoption data\\\",\\n    \\\"n_clusters\\\": \\\"Number of clusters to create\\\"\\n    },\\n\\\"return\\\": \\\"A list of dictionaries, each representing a row in the original data, but with an added 'cluster' key-value pair\\\",\\n\\\"depend\\\": \\\"Pandas, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single mother struggling with noise complaints from her next-door neighbor's loud parties", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Noise Detection and Reporting Interface\\\",\\n  \\\"description\\\": \\\"This interface uses sound analysis to monitor and analyze ambient noise. When the noise level crosses a certain threshold, it automatically generates and sends a complaint email to the relevant authorities or the building manager.\\\",\\n  \\\"function_name\\\": \\\"send_complaint_email\\\",\\n  \\\"input_args\\\": {\\n    \\\"audio_file\\\": \\\"The path to the audio file to be analyzed\\\",\\n    \\\"recipient_email\\\": \\\"The email address of the recipient of the complaint email\\\"\\n  },\\n  \\\"return\\\": \\\"A string message indicating whether a complaint email was sent or if the noise level was within acceptable limits.\\\",\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"librosa\\\", \\\"smtplib\\\", \\\"email.message\\\"],\\n    \\\"web_apis\\\": [],\\n    \\\"machine_learning_models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A transportation system planner from a right-hand-traffic region (like the US)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Left Turn Delay Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the delay in left turns (as compared to right turns) in right-hand-traffic regions using traffic data from Google's Distance Matrix API.\\\",\\n\\\"function_name\\\": \\\"calculate_left_turn_delay\\\",\\n\\\"input_args\\\": {\\\"current_location\\\": \\\"string (latitude,longitude)\\\", \\\"destination\\\": \\\"string (latitude,longitude)\\\", \\\"departure_time\\\": \\\"datetime object\\\"},\\n\\\"return\\\": \\\"float (delay in minutes)\\\",\\n\\\"depend\\\": \\\"requests library, Google's Distance Matrix API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An oncologist critical of alternative medicine claims without scientific backing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clinical Trial Finder Interface\\\",\\n\\\"description\\\": \\\"This interface takes a medical condition as input and returns a list of ongoing clinical trials related to that condition. It fetches data from the U.S. National Library of Medicine's ClinicalTrials.gov.\\\",\\n\\\"function_name\\\": \\\"get_clinical_trials\\\",\\n\\\"input_args\\\": \\\"condition\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains information about a clinical trial, including its ID, title, condition, type, phase, enrollment count, start date, primary completion date, last update post date, and location country.\\\",\\n\\\"depend\\\": \\\"requests library, ClinicalTrials.gov API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Gen Z music critic with little understanding of Frank Zappa's music.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Music Feature Extraction Interface\\\",\\n    \\\"description\\\": \\\"Extracts audio features from a song such as tempo, beat frames, and spectral contrast using the librosa library.\\\",\\n    \\\"function_name\\\": \\\"analyze_song\\\",\\n    \\\"input_args\\\": {\\\"path_to_song\\\": \\\"string\\\"},\\n    \\\"return\\\": {\\\"tempo\\\": \\\"float\\\", \\\"beat_frames\\\": \\\"list\\\", \\\"spectral_contrast\\\": \\\"list\\\"},\\n    \\\"depend\\\": {\\\"python libraries\\\": [\\\"librosa\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A fanatic of carousels", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carousel Music Player Interface\\\",\\n\\\"description\\\": \\\"Creates a Spotify playlist of popular carousel music for a specified user.\\\",\\n\\\"function_name\\\": \\\"create_carousel_music_playlist\\\",\\n\\\"input_args\\\": [\\\"username\\\"],\\n\\\"return\\\": \\\"A Spotify playlist ID that contains a list of popular carousel music.\\\",\\n\\\"depend\\\": \\\"spotipy Python library, Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An advocate for preserving and showcasing the stories of unsung heroes in an interactive and engaging way", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interactive Timeline Creation Interface\\\",\\n\\\"description\\\": \\\"This interface generates an interactive timeline from a CSV file. The timeline includes key life events, accomplishments, and other notable moments of unsung heroes.\\\",\\n\\\"function_name\\\": \\\"create_timeline\\\",\\n\\\"input_args\\\": [\\\"csv_file\\\"],\\n\\\"return\\\": \\\"HTML needed to create the interactive timeline\\\",\\n\\\"depend\\\": [\\\"pandas library\\\", \\\"Knight Lab's TimelineJS library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fiercely competitive baseball pitcher who is deeply invested in his sport and continuously strives to improve his skill", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pitch Speed Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a video of a baseball pitch and calculates the speed of the pitch in mph.\\\",\\n\\\"function_name\\\": \\\"calculate_pitch_speed\\\",\\n\\\"input_args\\\": {\\n    \\\"video_file\\\": \\\"The path to the video file of the pitch.\\\",\\n    \\\"distance\\\": \\\"The distance from the pitcher's mound to home plate in feet. The default value is 60.5 feet.\\\",\\n    \\\"frame_rate\\\": \\\"The frame rate of the video in frames per second. The default value is 30 frames per second.\\\"\\n},\\n\\\"return\\\": \\\"The speed of the pitch in mph.\\\",\\n\\\"depend\\\": \\\"OpenCV, a Python library for real-time computer vision.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cybersecurity expert who explains the security measures and vulnerabilities associated with blockchain technology", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Blockchain Vulnerability Scanner Interface\\\",\\n  \\\"description\\\": \\\"This interface scans a piece of smart contract code for potential vulnerabilities by leveraging the Mythril API.\\\",\\n  \\\"function_name\\\": \\\"scan_blockchain_vulnerabilities\\\",\\n  \\\"input_args\\\": [\\\"smart_contract_code\\\"],\\n  \\\"return\\\": \\\"A list of potential security vulnerabilities, if any, in the contract code.\\\",\\n  \\\"depend\\\": \\\"Mythril API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A documentary filmmaker inspired by the storytelling techniques used in the Up series", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts a given text into an audio file using Google's Text-to-Speech service. It's useful for documentary filmmakers who need to create voiceovers for their films.\\\",\\n\\\"function_name\\\": \\\"convert_text_to_speech\\\",\\n\\\"input_args\\\": {\\n    \\\"script_text\\\": \\\"The text to be converted to speech.\\\",\\n    \\\"save_path\\\": \\\"The path where the audio file should be saved.\\\"\\n},\\n\\\"return\\\": \\\"A string that specifies where the audio file is saved.\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS) library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a passionate play-by-mail (PBM) game strategist and enthusiast who was an avid player in the 1990s", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chess Move Validator Interface\\\",\\n\\\"description\\\": \\\"An interface to validate a proposed chess move based on the current state of the game. It takes the current board position in FEN format and a move in UCI format, and returns whether the move is valid or not.\\\",\\n\\\"function_name\\\": \\\"is_valid_move\\\",\\n\\\"input_args\\\": [\\\"fen\\\", \\\"move\\\"],\\n\\\"return\\\": \\\"Boolean indicating if the move is valid or not\\\",\\n\\\"depend\\\": \\\"python-chess library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A climber trying to conquer the highest peaks in each continent", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mountain Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface for retrieving the current weather conditions for a given mountain. The user provides the name of the mountain, and the interface returns a detailed weather report, including temperature, humidity, pressure, and wind speed.\\\",\\n\\\"function_name\\\": \\\"get_mountain_weather\\\",\\n\\\"input_args\\\": \\\"mountain_name - a string representing the name of the mountain\\\",\\n\\\"return\\\": \\\"A dictionary with the current weather conditions at the location of the given mountain\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A competitor helmet manufacturer constantly trying to outdo their limited edition designs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Helmet Design Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface compares two helmet designs and returns a similarity score. A higher score indicates that the two designs are more similar.\\\",\\n\\\"function_name\\\": \\\"compare_helmet_designs\\\",\\n\\\"input_args\\\": [\\\"img_path1\\\", \\\"img_path2\\\"],\\n\\\"return\\\": \\\"similarity_score\\\",\\n\\\"depend\\\": [\\\"tensorflow.keras.applications.resnet50\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A youth football coach who has seen Jakub Sypek play in his early years.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Performance Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts a football player's future performance based on their current performance data.\\\",\\n\\\"function_name\\\": \\\"predict_future_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"player_data\\\": \\\"A dictionary with keys matching the model's features. This should include the player's current performance data.\\\",\\n    \\\"model_path\\\": \\\"The path to the saved machine learning model file.\\\"\\n},\\n\\\"return\\\": \\\"A prediction of the player's future performance.\\\",\\n\\\"depend\\\": [\\\"Python's pandas library\\\", \\\"Python's numpy library\\\", \\\"Python's sklearn library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A busy council member who appreciates detailed agendas.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meeting Agenda Parsing Interface\\\",\\n\\\"description\\\": \\\"This interface parses a text agenda and returns a structured format with details about each item like item number, title, and description.\\\",\\n\\\"function_name\\\": \\\"parse_agenda\\\",\\n\\\"input_args\\\": \\\"agenda_text - raw text of the meeting agenda\\\",\\n\\\"return\\\": \\\"A pandas DataFrame with columns: item_number, title. Each row represents an agenda item.\\\",\\n\\\"depend\\\": \\\"Python libraries: re, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A tech startup developing autonomous delivery robots to disrupt the traditional logistics industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Path Planning Interface\\\",\\n\\\"description\\\": \\\"This interface uses the A* path-finding algorithm to find the shortest path from the current location to the goal location. It can be used in robotics and video games for path planning.\\\",\\n\\\"function_name\\\": \\\"get_shortest_path\\\",\\n\\\"input_args\\\": [\\\"current_location\\\", \\\"goal_location\\\"],\\n\\\"return\\\": \\\"The shortest path from the current location to the goal location.\\\",\\n\\\"depend\\\": \\\"numpy, heapq\\\"\\n}\"", "description": "tool development"}
{"input persona": "李文华（生态学家）", "synthesized text": "\"{\\n\\\"name\\\": \\\"Species Distribution Modelling Interface\\\",\\n\\\"description\\\": \\\"An interface for predicting the distribution of a given species in a specific area, using the GBIF's species occurrence data API and the RandomForestClassifier from scikit-learn.\\\",\\n\\\"function_name\\\": \\\"predict_species_distribution\\\",\\n\\\"input_args\\\": {\\\"species_name\\\": \\\"string\\\", \\\"area\\\": \\\"list of float\\\"},\\n\\\"return\\\": \\\"list of float predicting the likely distribution of the species across the given area\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"numpy\\\", \\\"sklearn.ensemble\\\", \\\"sklearn.model_selection\\\", \\\"pygbif.species\\\", \\\"pygbif.occurrences\\\"], \\\"web APIs\\\": [\\\"GBIF's species occurrence data API\\\"], \\\"machine learning models\\\": [\\\"RandomForestClassifier\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A highly accomplished research scientist with decades of experience in the field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Protein Sequence Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface takes a protein sequence as input and returns the molecular weight and isoelectric point of the protein.\\\", \\n\\\"function_name\\\": \\\"analyse_protein\\\", \\n\\\"input_args\\\": {\\\"sequence\\\": \\\"string\\\"}, \\n\\\"return\\\": {\\\"molecular_weight\\\": \\\"float\\\", \\\"isoelectric_point\\\": \\\"float\\\"}, \\n\\\"depend\\\": {\\\"BioPython\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A thrifty librarian who advocates for responsible financial management and often discusses monetary policy with library visitors.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Currency Conversion Interface\\\",\\n\\\"description\\\": \\\"An interface that converts an amount from one currency to another.\\\",\\n\\\"function_name\\\": \\\"convert_currency\\\",\\n\\\"input_args\\\": {\\n    \\\"amount\\\": \\\"The amount of money to be converted.\\\",\\n    \\\"from_currency\\\": \\\"The current currency of the amount.\\\",\\n    \\\"to_currency\\\": \\\"The currency to which the amount should be converted.\\\"\\n},\\n\\\"return\\\": \\\"The converted amount in the desired currency.\\\",\\n\\\"depend\\\": \\\"ExchangeRate-API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a mother from France who loves reading children's books to her kids.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Children's Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends popular children's books using the Goodreads API. The user just needs to input the number of recommendations she wants.\\\",\\n\\\"function_name\\\": \\\"get_childrens_book_recommendations\\\",\\n\\\"input_args\\\": {\\\"num_recommendations\\\": \\\"int\\\"},\\n\\\"return\\\": \\\"List of book titles\\\",\\n\\\"depend\\\": \\\"Goodreads API, xml.etree.ElementTree, requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow athlete who practices dynamic warm-up exercises before training sessions and games", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Exercise Recommendation Interface\\\",\\n  \\\"description\\\": \\\"An interface that recommends a sequence of dynamic warm-up exercises based on the user's chosen sport. The users only need to input the sport type they are training for, and the interface will return a list of recommended dynamic warm-up exercises.\\\",\\n  \\\"function_name\\\": \\\"get_exercise_sequence\\\",\\n  \\\"input_args\\\": {\\n    \\\"sport_type\\\": \\\"The type of sport the user is training for, e.g., 'soccer', 'basketball', 'baseball', 'swimming', 'running', 'cycling'\\\"\\n  },\\n  \\\"return\\\": \\\"A list of recommended dynamic warm-up exercises for the given sport type.\\\",\\n  \\\"depend\\\": \\\"TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A helpful friend who is familiar with IRS procedures.", "synthesized text": "\"{\\n\\\"name\\\": \\\"IRS Tax Calculator Interface\\\",\\n\\\"description\\\": \\\"An Interface to calculate IRS taxes based on income, filing status and year using the tax-calculator package from PyPI. The user inputs their income, filing status and the year, and the interface returns the estimated tax.\\\",\\n\\\"function_name\\\": \\\"calculate_tax\\\",\\n\\\"input_args\\\": {\\n    \\\"income\\\": \\\"The total income of the user in USD.\\\",\\n    \\\"filing_status\\\": \\\"The filing status of the user. Can be 'single', 'married_jointly', 'married_separately', or 'head_of_household'.\\\",\\n    \\\"year\\\": \\\"The tax year for which the user wants to calculate the tax. Should be a four digit year.\\\"\\n},\\n\\\"return\\\": \\\"The estimated tax in USD.\\\",\\n\\\"depend\\\": \\\"Python taxcalculator library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A frustrated local resident who is concerned about the noise and foot traffic caused by the club", "synthesized text": "\"{\\n\\\"name\\\": \\\"Noise Level Tracking Interface\\\",\\n\\\"description\\\": \\\"An interface to get real-time noise level data. The user inputs their location, and the interface returns the current noise level in decibels (dB).\\\",\\n\\\"function_name\\\": \\\"get_current_noise_level\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"Current noise level in decibels (dB)\\\",\\n\\\"depend\\\": \\\"Sound Level Meter API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from the Federal Aviation Administration responsible for overseeing and addressing concerns related to helicopter activity", "synthesized text": "\"{\\n \\\"name\\\": \\\"Helicopter Flight Data Analysis Interface\\\",\\n \\\"description\\\": \\\"This interface uses the OpenSky API to fetch real-time flight data, filters out helicopter-related data based on the callsign, and returns it in the form of a dictionary for further analysis.\\\",\\n \\\"function_name\\\": \\\"get_helicopter_flight_data\\\",\\n \\\"input_args\\\": {\\n   \\\"start_time\\\": \\\"The start time of the time range for which the flight data is required, in UNIX timestamp format\\\",\\n   \\\"end_time\\\": \\\"The end time of the time range for which the flight data is required, in UNIX timestamp format\\\"\\n },\\n \\\"return\\\": \\\"A dictionary containing helicopter flight data including callsign, icao24, origin_country, time_position, last_contact, longitude, latitude, baro_altitude, on_ground, velocity, true_track, vertical_rate, sensors, geo_altitude, squawk, spi, position_source, and many more parameters.\\\",\\n \\\"depend\\\": \\\"This function leverages the OpenSky API and Python's requests and pandas libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A PCB manufacturer who provides top-quality printed circuit boards for various applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"PCB Gerber File Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface reads a Gerber file of a PCB design and returns an analysis of the design, including the number of layers, the number of pads, and the number of traces.\\\",\\n\\\"function_name\\\": \\\"analyze_gerber_file\\\",\\n\\\"input_args\\\": \\\"gerber_file_path\\\",\\n\\\"return\\\": \\\"A dictionary containing the number of layers, pads and traces in the PCB design\\\",\\n\\\"depend\\\": \\\"gerber Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Italian mom who knows nothing about cycling", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bike Route Recommendation Interface\\\", \\n\\\"description\\\": \\\"This interface provides bike route recommendations for users. It leverages the Google Maps API to find the best route between two locations.\\\", \\n\\\"function_name\\\": \\\"get_bike_route\\\", \\n\\\"input_args\\\": {\\\"start_location\\\": \\\"string representing the starting location\\\", \\\"end_location\\\": \\\"string representing the destination\\\"}, \\n\\\"return\\\": \\\"A list of instructions for the best bike route.\\\",\\n\\\"depend\\\": \\\"requests library, Google Maps API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am Jimmy Cricket, the CEO of Mudge Paper Company.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Business Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides a simple way for users to analyze business performance by calculating basic sales statistics.\\\",\\n\\\"function_name\\\": \\\"analyze_business_performance\\\",\\n\\\"input_args\\\": \\\"data_file_path - a string representing the path to the CSV file containing the sales data.\\\",\\n\\\"return\\\": \\\"A dictionary containing the total, average, maximum, and minimum sales.\\\",\\n\\\"depend\\\": \\\"This function uses the pandas library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Alabama citizen who is furthering studies in mental health", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Mental Health Articles Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a mental health topic as input and returns the top 5 most relevant articles related to that topic from a trusted mental health website.\\\",\\n  \\\"function_name\\\": \\\"recommend_articles\\\",\\n  \\\"input_args\\\": \\\"topic\\\",\\n  \\\"return\\\": \\\"top 5 most relevant articles\\\",\\n  \\\"depend\\\": \\\"BeautifulSoup for web scraping, transformers for BERT model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired genealogist who has extensively researched and documented the Minard family tree", "synthesized text": "\"{\\n\\\"name\\\": \\\"Family Tree Generation Interface\\\",\\n\\\"description\\\": \\\"Generates a visual representation of a family tree given a family name and a path to a GEDCOM file\\\",\\n\\\"function_name\\\": \\\"generate_family_tree\\\",\\n\\\"input_args\\\": [\\\"family_name\\\", \\\"path_to_gedcom\\\"],\\n\\\"return\\\": \\\"A dictionary representing the family tree, where each entry has a person's name as the key and their descendants as the value.\\\",\\n\\\"depend\\\": [\\\"Gramps genealogy software\\\"]\\n}\"", "description": "tool development"}
{"input persona": "As a history enthusiast with a passion for Welsh culture and politics, I find myself compelled to uncover the history of the First Ministers who have led Wales from the inception of the position in 1999, following the devolution referendum that marked a significant shift in the way Wales was governed.", "synthesized text": "\"{\\n\\\"name\\\": \\\"First Minister Info Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Wikidata Query Service API to provide detailed information about the Welsh First Ministers. It returns their birth date, birth place, period of office, and political party.\\\",\\n\\\"function_name\\\": \\\"get_minister_info\\\",\\n\\\"input_args\\\": [\\\"name\\\"],\\n\\\"return\\\": \\\"A dictionary with keys 'name', 'birth_date', 'birth_place', 'start_time', 'end_time', 'political_party'\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Wikidata Query Service API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A member of the US congress who is not interested in animal rights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bill Tracking Interface\\\", \\n\\\"description\\\": \\\"This interface uses ProPublica's Congress API to track the progress of a specific bill. It returns the bill's latest major action and the date of that action.\\\", \\n\\\"function_name\\\": \\\"track_bill_progress\\\",\\n\\\"input_args\\\": {\\n    \\\"bill_slug\\\": \\\"The slug (short name) of the bill to track.\\\", \\n    \\\"congress_number\\\": \\\"The number of the congress in which the bill is/was proposed.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"latest_major_action_date\\\": \\\"The date of the latest major action on the bill.\\\", \\n    \\\"latest_major_action\\\": \\\"The latest major action that has been taken on the bill.\\\"\\n},\\n\\\"depend\\\": \\\"ProPublica's Congress API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fashion photographer who needs regular treatment for dry eyes due to long hours of work", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Dry Eye Symptom Tracker\\\",\\n  \\\"description\\\": \\\"A high-level interface that tracks the severity and frequency of dry eye symptoms based on user's descriptions\\\",\\n  \\\"function_name\\\": [\\\"record_symptom\\\", \\\"analyze_symptoms\\\"],\\n  \\\"input_args\\\": [\\\"description\\\"],\\n  \\\"return\\\": \\\"A summary of symptom frequencies for each date\\\",\\n  \\\"depend\\\": [\\\"python libraries: pandas, datetime, sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A highly successful app store entrepreneur who shares valuable insights into the market trends", "synthesized text": "\"{\\n\\\"name\\\": \\\"App Store Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"Fetches review data from the Google Play Store for apps in a particular category and visualizes the number of reviews over time\\\",\\n\\\"function_name\\\": \\\"plot_app_trend\\\",\\n\\\"input_args\\\": [\\\"app_category\\\"],\\n\\\"return\\\": \\\"A plot showing the number of reviews for apps in the specified category over time\\\",\\n\\\"depend\\\": \\\"Google Play Store Scraper, pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A biochemist with a groundbreaking idea for a new drug to treat cancer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Similarity Search Interface\\\",\\n\\\"description\\\": \\\"This interface compares the molecular fingerprint of a new drug to existing drugs to identify potentially similar drugs. This can provide insights into the new drug's efficacy, side effects, and mechanism of action.\\\",\\n\\\"function_name\\\": \\\"calculate_similarity\\\",\\n\\\"input_args\\\": [\\\"new_drug_smiles\\\", \\\"reference_drug_smiles\\\"],\\n\\\"return\\\": \\\"similarity\\\",\\n\\\"depend\\\": [\\\"RDKit library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Un agricoltore biologico che coltiva ingredienti di alta qualità e offre prodotti freschi", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interface di previsione del raccolto\\\",\\n  \\\"description\\\": \\\"Un'interfaccia per prevedere la produzione di un raccolto su un campo agricolo in base alle condizioni meteorologiche, al tipo di terreno e alla produzione precedente. Utilizza un modello di apprendimento automatico pre-addestrato.\\\",\\n  \\\"function_name\\\": \\\"predict_yield\\\",\\n  \\\"input_args\\\": {\\n    \\\"weather_conditions\\\": \\\"Condizioni meteorologiche rilevate sul campo (es. temperatura, precipitazioni, umidit\\u00e0).\\\",\\n    \\\"soil_type\\\": \\\"Il tipo di terreno del campo (es. sabbioso, argilloso, limoso).\\\",\\n    \\\"previous_yield\\\": \\\"La produzione del raccolto precedente su quel campo.\\\"\\n  },\\n  \\\"return\\\": \\\"Una stima della produzione del raccolto.\\\",\\n  \\\"depend\\\": \\\"Librerie Python: tensorflow, pandas, sklearn. Modello di apprendimento automatico: un modello pre-addestrato su TensorFlow Hub o un modello personalizzato.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A newbie programmer who is struggling with string manipulation in C#", "synthesized text": "\"{\\n\\\"name\\\": \\\"C# String Manipulation Interface\\\",\\n\\\"description\\\": \\\"This interface accepts a C# code snippet and a string manipulation operation, and returns the modified C# code snippet with the desired string manipulation.\\\",\\n\\\"function_name\\\": \\\"manipulate_string_in_csharp\\\",\\n\\\"input_args\\\": [\\\"code\\\", \\\"operation\\\"],\\n\\\"return\\\": \\\"Modified C# code snippet as a string.\\\",\\n\\\"depend\\\": \\\"Python's built-in string manipulation methods\\\"\\n}\"", "description": "tool development"}
{"input persona": "An introverted physics major who is gaining confidence through participation in debates and has built a drone from scratch", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drone Flight Path Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface for calculating the optimal flight path for a drone given the current location, target location, wind speed and wind direction. The optimal path is calculated by minimizing the total distance of the path plus the effect of wind.\\\",\\n\\\"function_name\\\": \\\"calculate_drone_flight_path\\\",\\n\\\"input_args\\\": [\\\"current_location\\\", \\\"target_location\\\", \\\"wind_speed\\\", \\\"wind_direction\\\"],\\n\\\"return\\\": \\\"Optimal flight path for the drone\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A personal trainer who promotes the use of antiperspirants during intense workout sessions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sweat Analysis Interface\\\",\\n\\\"description\\\": \\\"Predicts the level of perspiration under different conditions like temperature, humidity, and workout intensity\\\",\\n\\\"function_name\\\": \\\"predict_perspiration\\\",\\n\\\"input_args\\\": [\\\"temp\\\", \\\"humidity\\\", \\\"workout_intensity\\\"],\\n\\\"return\\\": \\\"Estimated perspiration level\\\",\\n\\\"depend\\\": \\\"Scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former high school classmate of Takeshi Nakano who isn't interested in politics or economics", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Summarization Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the URL of a news article and returns a summarized version of it. Useful for people who want to keep up with the news without reading entire articles.\\\",\\n\\\"function_name\\\": \\\"summarize_news_article\\\",\\n\\\"input_args\\\": \\\"url\\\",\\n\\\"return\\\": \\\"Summarized text of the news article\\\",\\n\\\"depend\\\": \\\"huggingface/transformers, requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physicist who investigates the scientific evidence for or against the existence of a creator", "synthesized text": "\"{\\n\\\"name\\\": \\\"Universe Age Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the age of the universe using astrophysical observations and the Flat Lambda-CDM cosmology model.\\\",\\n\\\"function_name\\\": \\\"calculate_universe_age\\\",\\n\\\"input_args\\\": [\\\"Hubble_constant\\\", \\\"atom_density\\\", \\\"matter_density\\\", \\\"dark_energy_density\\\"],\\n\\\"return\\\": \\\"The age of the universe in billion years.\\\",\\n\\\"depend\\\": \\\"Astropy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow internet user who shares similar interests in debunking conspiracy theories and provides additional evidence", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conspiracy Theory Debunking Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the trustworthiness score of a website and predicts the truth value of a statement. It is useful for debunking conspiracy theories.\\\",\\n\\\"function_name\\\": \\\"debunk_conspiracy_theory\\\",\\n\\\"input_args\\\": [\\\"url\\\", \\\"statement\\\"],\\n\\\"return\\\": {\\\"trustworthiness_score\\\": \\\"Trustworthiness score of the website out of 100\\\", \\\"veracity\\\": \\\"Predicted truth value of the statement\\\"},\\n\\\"depend\\\": {\\\"Web API\\\": \\\"Web of Trust (WOT)\\\", \\\"Machine Learning Models\\\": \\\"Hugging Face's fact-checking model\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A healthcare professional who relies on the accuracy and efficiency of the machine learning system to make clinical decisions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Breast Cancer Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a trained machine learning model to predict whether a breast cancer is benign or malignant, given the features of a cell nucleus in a digitized image of a fine needle aspirate of a breast mass.\\\",\\n\\\"function_name\\\": \\\"predict_breast_cancer\\\",\\n\\\"input_args\\\": \\\"features - an array of 30 numeric values representing the features of a cell nucleus\\\",\\n\\\"return\\\": \\\"A string indicating whether the cancer is 'Benign' or 'Malignant'\\\",\\n\\\"depend\\\": \\\"sklearn.datasets.load_breast_cancer, sklearn.ensemble.RandomForestClassifier, sklearn.model_selection.train_test_split\\\"\\n}\"", "description": "tool development"}
{"input persona": "A MMA fighter who cross-trains in various martial arts to improve technique and discipline", "synthesized text": "\"{\\n\\\"name\\\": \\\"Martial Art Technique Analyzer\\\",\\n\\\"description\\\": \\\"This interface uses a pose estimation model to analyze a user's martial arts technique from a video.\\\",\\n\\\"function_name\\\": \\\"analyze_technique\\\",\\n\\\"input_args\\\": {\\\"path_to_video\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"List of key points of user's body in each video frame\\\",\\n\\\"depend\\\": {\\\"python_libraries\\\": [\\\"cv2\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"numpy\\\"], \\\"models\\\": \\\"https://tfhub.dev/google/movenet/singlepose/lightning/1\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A regional governor with a strong reputation for law and order", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crime Rate Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to predict the crime rate based on given factors like population, unemployment rate, and percentage of people with higher education.\\\",\\n\\\"function_name\\\": \\\"predict_crime_rate\\\",\\n\\\"input_args\\\": {\\n    \\\"model_name\\\": \\\"Name of the pre-trained ML model\\\",\\n    \\\"population\\\": \\\"Population of the region\\\",\\n    \\\"unemployment_rate\\\": \\\"Unemployment rate of the region\\\",\\n    \\\"higher_education_rate\\\": \\\"Percentage of people with higher education in the region\\\"\\n},\\n\\\"return\\\": \\\"Predicted crime rate\\\",\\n\\\"depend\\\": \\\"HuggingFace Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A patent holder accusing others of patent infringement and seeking damages", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Patent Infringement Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface compares two patents and highlights their similarities and differences. It is useful for preliminary analysis in patent infringement cases.\\\",\\n  \\\"function_name\\\": \\\"patent_comparison\\\",\\n  \\\"input_args\\\": [\\\"patent1\\\", \\\"patent2\\\"],\\n  \\\"return\\\": \\\"A dictionary with the comparison results of the two patents.\\\",\\n  \\\"depend\\\": \\\"Google Patent Scraper library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An insurance company IT manager seeking guidance on integrating Apache POI into their document processing workflow", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to convert a Word document to a PDF file using Apache POI in Python via the JPype library. Users only need to provide the paths to the input Word document and the output PDF file.\\\",\\n\\\"function_name\\\": \\\"word_to_pdf\\\",\\n\\\"input_args\\\": [\\\"input_path\\\", \\\"output_path\\\"],\\n\\\"return\\\": \\\"No return value but a PDF file is generated at the specified output path.\\\",\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"jpype\\\"],\\n    \\\"java_libraries\\\": [\\\"Apache POI\\\"]\\n    }\\n}\"", "description": "tool development"}
{"input persona": "一个对地下建筑非常着迷的建筑专栏作家", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u5730\\u4e0b\\u5efa\\u7b51\\u7269\\u8bc6\\u522b\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u8be5\\u63a5\\u53e3\\u53ef\\u4ee5\\u8bc6\\u522b\\u7279\\u5b9a\\u533a\\u57df\\u7684\\u5730\\u4e0b\\u5efa\\u7b51\\u7269\\uff0c\\u8fd4\\u56de\\u4e00\\u4e2a\\u5730\\u4e0b\\u5efa\\u7b51\\u7269\\u7684\\u540d\\u79f0\\u5217\\u8868\\u3002\\\",\\n\\\"function_name\\\": \\\"get_underground_buildings\\\",\\n\\\"input_args\\\": \\\"location: \\u7528\\u6237\\u60f3\\u8981\\u641c\\u7d22\\u7684\\u5730\\u70b9\\\",\\n\\\"return\\\": \\\"\\u8fd4\\u56de\\u4e00\\u4e2a\\u5730\\u4e0b\\u5efa\\u7b51\\u7269\\u7684\\u540d\\u79f0\\u5217\\u8868\\\",\\n\\\"depend\\\": \\\"Google\\u5730\\u56feAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "An eager and curious hot dog eating contest enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"Hot Dog Eating Contest Statistics Interface\\\",\\n\\\"description\\\": \\\"Retrieves the statistics of a given hot dog eating contest participant from a website.\\\",\\n\\\"function_name\\\": \\\"get_contestant_stats\\\",\\n\\\"input_args\\\": {\\n    \\\"contestant_name\\\": \\\"The name of the contestant whose statistics are to be fetched.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary of the contestant's statistics with statistic types as keys and the corresponding statistics as values.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An author of historical non-fiction who admires the writer's storytelling skills but suggests they try writing about true events", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Genre Transition Interface\\\",\\n\\\"description\\\": \\\"This interface assists authors in transitioning from storytelling to writing about true events. It suggests ways to incorporate historical facts into a narrative framework, making the story engaging while keeping it grounded in real events.\\\",\\n\\\"function_name\\\": \\\"add_historical_context\\\",\\n\\\"input_args\\\": {\\n    \\\"story\\\": \\\"a string representing the story to be transformed\\\"\\n},\\n\\\"return\\\": \\\"a string representing the transformed story with historical context\\\",\\n\\\"depend\\\": \\\"a large language model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fierce advocate for poverty eradication, studying for their Master’s in Social Justice", "synthesized text": "\"{\\n\\\"name\\\": \\\"Poverty Index Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches data related to income, employment, and education for a certain region from the World Bank API and uses this data to calculate a poverty index.\\\",\\n\\\"function_name\\\": \\\"calculate_poverty_index\\\",\\n\\\"input_args\\\": \\\"region - The name of the region for which the poverty index is to be calculated.\\\",\\n\\\"return\\\": \\\"The calculated poverty index for the input region.\\\",\\n\\\"depend\\\": \\\"This interface uses the World Bank API to fetch data and Python's requests and pandas libraries to process the data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a rocker who is into 90s Dutch rap metal bands", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Genre Identification Interface\\\",\\n\\\"description\\\": \\\"This interface identifies the music genre from a given music file. It accepts the path to a music file and returns the identified genre of the music.\\\",\\n\\\"function_name\\\": \\\"identify_music_genre\\\",\\n\\\"input_args\\\": \\\"file_name\\\",\\n\\\"return\\\": \\\"genre\\\",\\n\\\"depend\\\": \\\"Python libraries (librosa, torch), a pre-trained model for music genre identification\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a retired librarian who has recently taken up photography and started learning Photoshop to enhance my pictures, but I sometimes find technical instructions overwhelming.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Background Removal Interface\\\",\\n\\\"description\\\": \\\"This interface utilizes the remove.bg API to remove the background from an input image. The user just needs to provide the path to the image file.\\\",\\n\\\"function_name\\\": \\\"remove_image_background\\\",\\n\\\"input_args\\\": [\\\"image_path\\\"],\\n\\\"return\\\": \\\"An image file with the background removed ('no-bg.png') will be saved in the same directory as the script.\\\",\\n\\\"depend\\\": \\\"Python requests library, remove.bg API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A CGI expert specializing in creating realistic naval battle sequences for films and documentaries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ship Movement Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simulates the movement of a ship given its initial position, direction, speed, and a number of time steps. It uses the Pygame library to perform the necessary vector operations.\\\",\\n\\\"function_name\\\": \\\"simulate_ship_movement\\\",\\n\\\"input_args\\\": {\\n    \\\"initial_position\\\": \\\"A tuple representing the initial position of the ship (x, y).\\\",\\n    \\\"initial_direction\\\": \\\"A tuple representing the initial direction of the ship (x, y). This does not need to be a unit vector.\\\",\\n    \\\"speed\\\": \\\"The speed of the ship.\\\",\\n    \\\"time_steps\\\": \\\"The number of time steps to run the simulation for.\\\"\\n},\\n\\\"return\\\": \\\"A list of tuples, each representing the position of the ship at a different time step.\\\",\\n\\\"depend\\\": \\\"Pygame library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior congressional staff member who believes in a strong centralized government and prioritizes funding for the legislative branch", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legislation Drafting Assistant Interface\\\",\\n\\\"description\\\": \\\"This interface uses a language model to assist in drafting legislation. The user inputs a title, purpose, and key provisions and the assistant returns an outline or draft for the legislation.\\\",\\n\\\"function_name\\\": \\\"draft_legislation\\\",\\n\\\"input_args\\\": [\\\"title\\\", \\\"purpose\\\", \\\"key_provisions\\\"],\\n\\\"return\\\": \\\"An outline or draft for the proposed legislation.\\\",\\n\\\"depend\\\": \\\"openai's GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "Professor of Medical Studies based in Beijing, China", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Image Segmentation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to segment medical images, such as CT scans, to identify specific body parts or issues. The user inputs the path to a medical image file, and the interface returns a segmented version of the image highlighting specific features.\\\",\\n\\\"function_name\\\": \\\"segment_medical_image\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A numpy array representing the segmented medical image.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of a tight-knit community who has experienced conflicts arising from cultural differences", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cross-Cultural Conflict Resolution Interface\\\",\\n\\\"description\\\": \\\"This interface uses NLTK and a pre-trained model from huggingface to help identify and resolve potential cross-cultural conflicts arising from communication.\\\",\\n\\\"function_name\\\": \\\"resolve_cross_cultural_conflict\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"A culturally sensitive resolution to the conflict\\\",\\n\\\"depend\\\": [\\\"NLTK\\\", \\\"huggingface pipeline\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A military historian writing a book on the impact of military leaders on shaping discipline and leadership", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Leader Influence Analyzer Interface\\\",\\n\\\"description\\\": \\\"Uses topic modeling to analyze the most common themes in a corpus of documents about military leaders.\\\",\\n\\\"function_name\\\": \\\"analyze_military_leader_influence\\\",\\n\\\"input_args\\\": [\\\"doc_paths\\\"],\\n\\\"return\\\": \\\"A list of the most common topics in the input documents.\\\",\\n\\\"depend\\\": \\\"python Gensim library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A program officer responsible for supporting research in emerging energy technologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Emerging Energy Technologies Research Support Interface\\\",\\n\\\"description\\\": \\\"This interface returns the latest research papers in a specified category from the arXiv database. It is designed to support a program officer responsible for supporting research in emerging energy technologies.\\\",\\n\\\"function_name\\\": \\\"get_latest_research_papers\\\",\\n\\\"input_args\\\": \\\"category - a specific category in the arXiv database\\\",\\n\\\"return\\\": \\\"A list of tuples, where each tuple contains the ID and title of a research paper\\\",\\n\\\"depend\\\": \\\"Python's requests and feedparser libraries, arXiv API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged mom who loves holidays and is trying to plan a family-friendly 4th of July for her kids.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Firework Display Finder Interface\\\",\\n\\\"description\\\": \\\"Finds upcoming firework displays in a user-specified city by leveraging the Eventful API.\\\",\\n\\\"function_name\\\": \\\"get_firework_displays\\\",\\n\\\"input_args\\\": \\\"city\\\",\\n\\\"return\\\": \\\"a list of upcoming firework displays\\\",\\n\\\"depend\\\": \\\"Eventful API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow learner in an online study group who values the reformed criminal's perspective and appreciates their unique insights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Criminal Record Lookup Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input the name of an individual and returns a summary of the individual's criminal record if available.\\\",\\n\\\"function_name\\\": \\\"lookup_criminal_record\\\",\\n\\\"input_args\\\": \\\"name\\\",\\n\\\"return\\\": \\\"A string summarizing the individual's criminal record, or a message stating that no record was found.\\\",\\n\\\"depend\\\": \\\"Public APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A theoretical physicist debating the implications of quantum mechanics for the formation of solar systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to simulate the time evolution of a quantum system given initial parameters.\\\",\\n\\\"function_name\\\": \\\"simulate_quantum_system\\\",\\n\\\"input_args\\\": [\\\"N - number of quantum states\\\", \\\"omega - frequency of the system\\\", \\\"gamma - decay rate\\\", \\\"t_list - list of time points\\\"],\\n\\\"return\\\": \\\"List of expectation values of the number operator at each time point\\\",\\n\\\"depend\\\": [\\\"qutip - Quantum Toolbox in Python\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged man living in Bhatinda who rarely sends flowers and gifts.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flower and Gift Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that suggests personalized gifts and flowers based on the recipient's details.\\\",\\n\\\"function_name\\\": \\\"get_gift_and_flower_recommendations\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"location\\\", \\\"interests\\\"],\\n\\\"return\\\": \\\"A list of suitable flower and gift recommendations.\\\",\\n\\\"depend\\\": \\\"Hugging Face's GPT-2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A historical curator focused on the timeline and significance of astronomical discoveries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Astronomy Event Timeline Interface\\\",\\n\\\"description\\\": \\\"This interface fetches significant astronomical events that happened during a specified time period using the NASA API.\\\",\\n\\\"function_name\\\": \\\"get_astronomy_events\\\",\\n\\\"input_args\\\": {\\\"start_date\\\": \\\"string in 'YYYY-MM-DD' format\\\", \\\"end_date\\\": \\\"string in 'YYYY-MM-DD' format\\\"},\\n\\\"return\\\": \\\"list of dictionaries, each containing date, title, and description of an astronomical event\\\",\\n\\\"depend\\\": \\\"requests library, NASA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An older adult with arthritis seeking relief and improved mobility through aqua therapy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aqua Therapy Exercise Recommender Interface\\\",\\n\\\"description\\\": \\\"This interface recommends appropriate aqua therapy exercises based on a user's age, condition, and mobility level. These factors are used to find similar records in a historical dataset using a nearest neighbors model, and the exercises corresponding to the most similar records are recommended to the user.\\\",\\n\\\"function_name\\\": \\\"recommend_aqua_therapy_exercises\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"condition\\\", \\\"mobility\\\"],\\n\\\"return\\\": \\\"List of recommended aqua therapy exercises\\\",\\n\\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sneaker designer who creates unique and limited edition shoe releases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sneaker Design Preview Interface\\\",\\n\\\"description\\\": \\\"Generates a preview of a sneaker design based on the input design specifications.\\\",\\n\\\"function_name\\\": \\\"sneaker_design_preview\\\",\\n\\\"input_args\\\": [\\\"color\\\", \\\"style\\\", \\\"size\\\"],\\n\\\"return\\\": \\\"A numpy array representing the generated sneaker image\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A data scientist from a different university who is working on a multi-institutional research project and needs help with data cleaning and visualization", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Data Cleaning and Visualization Interface\\\",\\n  \\\"description\\\": \\\"An interface for data cleaning and visualization. It removes duplicates and missing values from the dataset and plots a correlation matrix.\\\",\\n  \\\"function_name\\\": {\\n    \\\"clean_data\\\": \\\"clean_data(path_to_csv)\\\",\\n    \\\"plot_correlation_matrix\\\": \\\"plot_correlation_matrix(path_to_csv)\\\"\\n  },\\n  \\\"input_args\\\": {\\n    \\\"clean_data\\\": \\\"path_to_csv: Path to the csv file\\\",\\n    \\\"plot_correlation_matrix\\\": \\\"path_to_csv: Path to the csv file\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"clean_data\\\": \\\"Cleaned Pandas DataFrame\\\",\\n    \\\"plot_correlation_matrix\\\": \\\"A correlation matrix plot\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"pandas\\\", \\\"matplotlib\\\", \\\"seaborn\\\"],\\n    \\\"Web APIs\\\": [],\\n    \\\"Machine Learning Models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A comic book store owner who recommends various graphic novels to the teacher, discussing their storytelling techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends books based on a user's preference or requirement using a text classification model from Huggingface.\\\",\\n\\\"function_name\\\": \\\"recommend_books\\\",\\n\\\"input_args\\\": \\\"description - a brief description of user's preference or requirement\\\",\\n\\\"return\\\": \\\"A list of recommended books sorted by relevance to the input description.\\\",\\n\\\"depend\\\": \\\"Huggingface Transformers Library, DistilBERT text classification model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a bilingual, Russian-speaking Ukrainian with profound deafness", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech-to-Text Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates spoken language in an audio file from one language to another. It uses Google Speech-to-Text API to convert speech to text, and Google Cloud Translation API to translate the text.\\\",\\n\\\"function_name\\\": \\\"translate_audio_file\\\",\\n\\\"input_args\\\": {\\n    \\\"audio_file_path\\\": \\\"The path to the audio file to be translated.\\\"\\n},\\n\\\"return\\\": \\\"The translated text.\\\",\\n\\\"depend\\\": \\\"Google Cloud Speech-to-Text API, Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a male parent of a teenage boy, slightly disappointed with both Kevin Spacey and Hollywood", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that returns movie recommendations based on user's favorite actors, genres, etc., excluding certain actors and genres upon user's request.\\\",\\n\\\"function_name\\\": \\\"get_movie_recommendations\\\",\\n\\\"input_args\\\": [\\\"liked_actors\\\", \\\"disliked_actors\\\", \\\"preferred_genres\\\"],\\n\\\"return\\\": \\\"A list of movie titles.\\\",\\n\\\"depend\\\": \\\"TMDb (The Movie Database) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A homeowner who believes that graffiti devalues property and decreases neighborhood safety", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Graffiti Removal Suggestion Interface\\\",\\n  \\\"description\\\": \\\"Identifies whether there is graffiti in an image. Useful for homeowners to determine if a cleanup is necessary.\\\",\\n  \\\"function_name\\\": \\\"detect_graffiti\\\",\\n  \\\"input_args\\\": \\\"path_to_img - a string which is the path to the image file\\\",\\n  \\\"return\\\": \\\"True if graffiti is detected, False otherwise\\\",\\n  \\\"depend\\\": \\\"tensorflow, tensorflow_hub, and a pre-trained object detection model from TensorFlow Hub ('https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1')\\\"\\n}\"", "description": "tool development"}
{"input persona": "An IDF veteran who has experienced the reality of conflict and is now studying psychology", "synthesized text": "\"{\\n\\\"name\\\": \\\"PTSD Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from Hugging Face to analyze text and predict if the author might be showing symptoms of Post-Traumatic Stress Disorder (PTSD). The user only needs to input a text (e.g., a diary entry, an email, a social media post).\\\",\\n\\\"function_name\\\": \\\"predict_PTSD_from_text\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"A boolean value indicating whether the author of the input text might be showing symptoms of PTSD.\\\",\\n\\\"depend\\\": \\\"Hugging Face\\\"\\n}\"", "description": "tool development"}
{"input persona": "台湾中年上班族，对于公共交通很依赖，经常需要跨县市通勤。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Public Transit Route Planning Interface\\\",\\n\\\"description\\\": \\\"\\u63d0\\u4f9b\\u4e00\\u4e2a\\u63a5\\u53e3\\uff0c\\u7528\\u6237\\u53ea\\u9700\\u8f93\\u5165\\u4ed6\\u4eec\\u7684\\u5f00\\u59cb\\u548c\\u7ed3\\u675f\\u4f4d\\u7f6e\\uff0c\\u6211\\u4eec\\u7684\\u63a5\\u53e3\\u5c06\\u8fd4\\u56de\\u6700\\u4f18\\u7684\\u516c\\u5171\\u4ea4\\u901a\\u8def\\u7ebf\\u3002\\\",\\n\\\"function_name\\\": \\\"get_optimal_transit_route\\\",\\n\\\"input_args\\\": {\\n    \\\"start_location\\\": \\\"\\u5f00\\u59cb\\u4f4d\\u7f6e\\uff08\\u5730\\u5740\\u6216\\u5750\\u6807\\uff09\\\",\\n    \\\"end_location\\\": \\\"\\u7ed3\\u675f\\u4f4d\\u7f6e\\uff08\\u5730\\u5740\\u6216\\u5750\\u6807\\uff09\\\"\\n},\\n\\\"return\\\": \\\"\\u8fd4\\u56de\\u4e00\\u4e2a\\u5305\\u542b\\u591a\\u4e2a\\u6b65\\u9aa4\\u7684\\u5217\\u8868\\uff0c\\u6bcf\\u4e2a\\u6b65\\u9aa4\\u90fd\\u5305\\u542b\\u4e86\\u5230\\u8fbe\\u76ee\\u7684\\u5730\\u6240\\u9700\\u7684\\u8be6\\u7ec6\\u516c\\u5171\\u4ea4\\u901a\\u4fe1\\u606f\\u3002\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Belgian environmental activist who is dismayed by Flanders' lack of climate policy ambition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carbon Footprint Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the carbon footprint for a specific amount of electricity consumed. It uses the API from Carbon Interface, which provides carbon footprint data for various activities.\\\",\\n\\\"function_name\\\": \\\"get_carbon_footprint\\\",\\n\\\"input_args\\\": \\\"kwh: The amount of electricity consumed in kilowatt-hours\\\",\\n\\\"return\\\": \\\"The carbon footprint equivalent of the electricity consumed, in kilograms of CO2\\\",\\n\\\"depend\\\": \\\"Web API: Carbon Interface\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aspiring Afrikaans musician and songwriter.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lyrics Translation Interface\\\",\\n\\\"description\\\": \\\"This interface takes lyrics in one language and translates them to another language using the Google Translation API.\\\",\\n\\\"function_name\\\": \\\"translate_lyrics\\\",\\n\\\"input_args\\\": [\\\"lyrics\\\", \\\"target_language\\\"],\\n\\\"return\\\": [\\\"original_lyrics\\\", \\\"translated_lyrics\\\", \\\"detected_source_language\\\"],\\n\\\"depend\\\": \\\"Google Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A theologian questioning the influence of cosmology on religious and spiritual beliefs", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Cosmology Influence Analysis Interface\\\",\\n    \\\"description\\\": \\\"An interface to analyze the influence of cosmology on religious and spiritual beliefs. It uses a pre-trained BERT model for text classification.\\\",\\n    \\\"function_name\\\": \\\"analyze_influence\\\",\\n    \\\"input_args\\\": [\\\"text\\\"],\\n    \\\"return\\\": \\\"A string indicating the potential influence ('High', 'Medium', 'Low', 'None')\\\",\\n    \\\"depend\\\": [\\\"HuggingFace Transformers (BertModel, BertTokenizer)\\\", \\\"pre-trained model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An aggressive tank player who relies on the support main to keep them alive during intense battles", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Riot Games API to fetch the game statistics for a given user on a specific platform. It returns information like average health, damage dealt, support received, total games played and win rate.\\\",\\n\\\"function_name\\\": \\\"get_game_statistics\\\",\\n\\\"input_args\\\": [\\\"username\\\", \\\"platform\\\"],\\n\\\"return\\\": \\\"A dictionary containing game statistics: average health, damage dealt, support received, total games played and win rate.\\\",\\n\\\"depend\\\": \\\"Riot Games API\\\"\\n}\"", "description": "tool development"}
{"input persona": "IT manager unfamiliar with Google Cloud and tech lingo", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cloud Storage File Upload Interface\\\",\\n\\\"description\\\": \\\"An interface for uploading a file to Google Cloud Storage. Users only need to input the path to a local file, the desired name for the file in the cloud, and the name of the bucket where the file should be stored.\\\",\\n\\\"function_name\\\": \\\"upload_blob\\\",\\n\\\"input_args\\\": {\\\"bucket_name\\\": \\\"The name of the bucket where the file should be stored.\\\", \\\"source_file_name\\\": \\\"The path to the local file.\\\", \\\"destination_blob_name\\\": \\\"The desired name for the file in the cloud.\\\"},\\n\\\"return\\\": \\\"Uploads the file to Google Cloud Storage and prints a confirmation message.\\\",\\n\\\"depend\\\": \\\"Google Cloud Storage Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A zealous and by-the-book officer who believes in the importance of maintaining the Department of Mysteries' secrecy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Magical Artifact Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that recognizes the most probable objects in an image. It uses a pre-trained model from TensorFlow Hub, which is trained to recognize a wide range of objects. The user only needs to input the path to an image of a potential magical artifact.\\\",\\n\\\"function_name\\\": \\\"recognize_artifact\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"The most probable object that the image contains\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, a pre-trained model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bestselling author who was wrongly convicted and seeks the book agent's representation to tell their story", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Agent Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Books APIs to search for books with similar themes or storylines to the user's query. Then, it finds out who the agents for those books are and recommends them to the user.\\\",\\n\\\"function_name\\\": \\\"get_book_agents\\\",\\n\\\"input_args\\\": \\\"query - a string representing the theme or storyline of the user's book\\\",\\n\\\"return\\\": \\\"A list of agents who represented books with similar themes or storylines to the user's query.\\\",\\n\\\"depend\\\": \\\"requests, Google Books API, Book Agent API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an everyday consumer of personal computers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Virus Scan Interface\\\",\\n\\\"description\\\": \\\"This interface uses ClamAV, an open-source antivirus software, to scan a specified file or folder for viruses and returns a report indicating if any malicious items were detected.\\\",\\n\\\"function_name\\\": \\\"virus_scan\\\",\\n\\\"input_args\\\": \\\"path_to_scan: The path to the file or folder to scan.\\\",\\n\\\"return\\\": \\\"A string representing the result of the scan, indicating if any malicious items were detected.\\\",\\n\\\"depend\\\": \\\"Python built-in libraries os and subprocess, ClamAV antivirus software\\\"\\n}\"", "description": "tool development"}
{"input persona": "Un ilustrador con habilidades artísticas que complementan y enriquecen los diseños de UX", "synthesized text": "\"{\\n\\\"name\\\": \\\"Color Palette Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the main color palette from an image, which could be useful for an illustrator who wants to understand and replicate the color palette of a specific UX design.\\\",\\n\\\"function_name\\\": \\\"get_main_color_palette\\\",\\n\\\"input_args\\\": {\\n    \\\"image_path\\\": \\\"The path to the image file\\\",\\n    \\\"color_count\\\": \\\"The number of colors to include in the palette (default is 6)\\\"\\n},\\n\\\"return\\\": {\\n    \\\"main_colors\\\": \\\"The main color of the image\\\",\\n    \\\"palette\\\": \\\"The main color palette of the image\\\"\\n},\\n\\\"depend\\\": \\\"This function leverages the colorthief Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a junior associate at the Reed Smith law firm.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Contract Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes a contract and produces a summary of the contract including key clauses, obligations, and rights.\\\",\\n\\\"function_name\\\": \\\"analyze_contract\\\",\\n\\\"input_args\\\": {\\\"contract_text\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"summary\\\": \\\"string\\\"},\\n\\\"depend\\\": {\\\"libraries\\\": [\\\"transformers\\\"], \\\"models\\\": [\\\"google/pegasus-legal_contract\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A social scientist who argues that relying solely on quantitative data overlooks the nuances and human factors in policy analysis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Natural Language Understanding Interface\\\",\\n\\\"description\\\": \\\"This high-level interface uses a pre-trained model from HuggingFace's transformers library to extract semantic roles from a sentence. Semantic roles provide a more nuanced understanding of a sentence by identifying the actors and actions.\\\",\\n\\\"function_name\\\": \\\"get_semantic_roles\\\",\\n\\\"input_args\\\": \\\"text\\\",\\n\\\"return\\\": \\\"A dictionary with the input sentence as the key and a list of dictionaries as the value. Each dictionary in the list represents a semantic role with the role type as the key and the role description as the value.\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A distinguished statistician who is renowned for their revolutionary predictions in the medical field", "synthesized text": "\"{\\n\\\"name\\\": \\\"Predict Disease Occurrence Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the likelihood of a disease occurrence based on a patient's medical history\\\",\\n\\\"function_name\\\": \\\"predict_disease_occurrence\\\",\\n\\\"input_args\\\": [\\\"patient_history\\\"],\\n\\\"return\\\": \\\"The predicted likelihood of the disease occurrence\\\",\\n\\\"depend\\\": \\\"Scikit-learn Python library, Pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer who works in a Java environment and enjoys mapping dependencies and familiar with Guice, an open-source software provided by Google to aid in Java dependency injection.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dependency Graph Interface\\\",\\n\\\"description\\\": \\\"This interface uses Java's reflection API and Google's Guice to map out the dependency graph of a given object. The user provides the fully qualified class name, and the interface returns a visual representation of the dependency graph.\\\",\\n\\\"function_name\\\": \\\"map_dependency_graph\\\",\\n\\\"input_args\\\": \\\"fully_qualified_class_name: A string that represents the fully qualified name of the class to analyse.\\\",\\n\\\"return\\\": \\\"A string that represents the path to the generated Graphviz file.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"graphviz\\\"], \\\"Java APIs\\\": [\\\"Reflection\\\", \\\"Google Guice\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A third-party logistics (3PL) broker", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Freight Rate Quote Interface\\\",\\n    \\\"description\\\": \\\"This interface allows 3PL brokers to obtain real-time freight rate quotes. Users input source and destination locations, weight, and dimensions of the package, and the interface returns the freight rate.\\\",\\n    \\\"function_name\\\": \\\"get_freight_rate\\\",\\n    \\\"input_args\\\": {\\n        \\\"source\\\": \\\"Source location (string)\\\",\\n        \\\"destination\\\": \\\"Destination location (string)\\\",\\n        \\\"weight\\\": \\\"Weight of the package (float)\\\",\\n        \\\"length\\\": \\\"Length of the package (float)\\\",\\n        \\\"width\\\": \\\"Width of the package (float)\\\",\\n        \\\"height\\\": \\\"Height of the package (float)\\\"\\n    },\\n    \\\"return\\\": \\\"Freight rate (float) or None if the API request fails\\\",\\n    \\\"depend\\\": \\\"This function depends on an API from a freight service provider, and the Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Jeannie Mai's stan from Australia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Subtitle Translation Interface\\\",\\n\\\"description\\\": \\\"Interface to fetch and translate YouTube video subtitles into a preferred language.\\\",\\n\\\"function_name\\\": \\\"translate_subtitles\\\",\\n\\\"input_args\\\": [\\\"video_id\\\", \\\"language\\\"],\\n\\\"return\\\": \\\"Translated subtitles as a string\\\",\\n\\\"depend\\\": \\\"YouTube API, Google Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a 10-year-old boy who loves playing sports and hates studying", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sport Activity Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to recommend sports activities based on the user's interests.\\\",\\n\\\"function_name\\\": \\\"get_sport_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"interests\\\": \\\"A string describing the user's interests. For example, 'loves playing in the park and running'.\\\"\\n},\\n\\\"return\\\": \\\"A list of sports activities that the user might enjoy. For example, ['Running', 'Playing in the park'].\\\",\\n\\\"depend\\\": \\\"This function depends on the transformers library from Hugging Face, specifically the 'google/tapas-base-finetuned-sports' model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An independent blockchain developer who values the importance of open-source projects", "synthesized text": "\"{\\n\\\"name\\\":\\\"Blockchain Transaction Verification Interface\\\",\\n\\\"description\\\":\\\"This interface checks if a given Ethereum transaction has been confirmed\\\",\\n\\\"function_name\\\":\\\"is_transaction_confirmed\\\",\\n\\\"input_args\\\":{\\\"transaction_hash\\\":\\\"The hash of the transaction to be checked\\\"},\\n\\\"return\\\":\\\"Boolean value indicating whether the transaction has been confirmed\\\",\\n\\\"depend\\\":{\\\"python libraries\\\":[\\\"web3\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a cautious observer who doesn't trust rumors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fact Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks the veracity of a statement using a fact-checking API and returns the result along with a reference.\\\",\\n\\\"function_name\\\": \\\"check_fact\\\",\\n\\\"input_args\\\": {\\\"statement\\\": \\\"The statement that the user wants to fact-check.\\\"},\\n\\\"return\\\": {\\\"statement\\\": \\\"The input statement.\\\", \\\"fact_check_result\\\": \\\"The fact-checking result of the statement.\\\", \\\"reference\\\": \\\"The source of the fact-checking result.\\\"},\\n\\\"depend\\\": [\\\"requests library\\\", \\\"fact-checking API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A high school student who benefits from the software engineer's innovative system by easily accessing and updating their academic records", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Academic Record Interface\\\",\\n\\\"description\\\": \\\"An interface to help high school students easily update their academic records in a SQLite database.\\\",\\n\\\"function_name\\\": \\\"update_grade\\\",\\n\\\"input_args\\\": [\\\"student_id\\\", \\\"new_grade\\\"],\\n\\\"return\\\": \\\"None. The function directly updates the grade in the SQLite database.\\\",\\n\\\"depend\\\": [\\\"sqlite3\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A grandson who is a current football player, seeking advice and inspiration from the coach's stories", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Coach Story Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses a large language model (GPT-3) to generate inspiring stories from a football coach's perspective. The user inputs a specific topic, and the interface returns a story reflecting the coach's wisdom and experiences on that topic.\\\",\\n\\\"function_name\\\": \\\"generate_coach_story\\\",\\n\\\"input_args\\\": [\\\"topic\\\"],\\n\\\"return\\\": \\\"A generated story from a football coach's perspective on the input topic.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"machine learning models\\\": [\\\"GPT-3 from Hugging Face's Transformers\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A solar energy company representative providing green energy solutions for outdoor lighting in garden designs", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Solar Energy Production Estimator Interface\\\",\\n    \\\"description\\\": \\\"Estimates the energy production of a grid-connected photovoltaic (PV) energy system based on the given latitude, longitude, system capacity, tilt, and azimuth. Leverages the PVWatts API from NREL.\\\",\\n    \\\"function_name\\\": \\\"estimate_solar_production\\\",\\n    \\\"input_args\\\": {\\n        \\\"lat\\\": \\\"Latitude of the location where the system will be installed.\\\",\\n        \\\"lon\\\": \\\"Longitude of the location where the system will be installed.\\\",\\n        \\\"system_capacity\\\": \\\"DC system capacity in kilowatts.\\\",\\n        \\\"tilt\\\": \\\"Tilt of the solar panel in degrees.\\\",\\n        \\\"azimuth\\\": \\\"Azimuth angle of the solar panel in degrees.\\\"\\n    },\\n    \\\"return\\\": \\\"Estimated annual energy production of the system in kilowatt-hours (kWh).\\\",\\n    \\\"depend\\\": \\\"The function depends on the 'requests' Python library and the PVWatts API from NREL.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An indie radio show host in New Zealand who has been operating a community-based music and talk show for the past 10 years.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface generates music recommendations based on the user's favorite genres, artists, and tracks using the Spotify Web API.\\\",\\n\\\"function_name\\\": \\\"get_music_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"favorite_genres\\\": \\\"A list of favorite genres (e.g., ['rock', 'pop']).\\\",\\n    \\\"favorite_artists\\\": \\\"A list of favorite artists (e.g., ['The Beatles', 'Michael Jackson']).\\\",\\n    \\\"favorite_tracks\\\": \\\"A list of favorite tracks (e.g., ['Let It Be', 'Thriller']).\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended tracks.\\\",\\n\\\"depend\\\": \\\"Spotify Web API, spotipy python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a regular customer at Cockburn ARC who practises a consistent fitness routine", "synthesized text": "\"{\\n\\\"name\\\": \\\"Workout Schedule Reminder\\\",\\n\\\"description\\\": \\\"This interface provides reminders for the next workout given a regular workout schedule.\\\",\\n\\\"function_name\\\": \\\"next_workout_reminder\\\",\\n\\\"input_args\\\": {\\n    \\\"workout_schedule\\\": \\\"A dictionary mapping days of the week to workout times in 24-hour format.\\\"\\n},\\n\\\"return\\\": \\\"A string indicating the day and time of the next workout.\\\",\\n\\\"depend\\\": \\\"Python's built-in datetime module\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm an aspiring actor who has just moved to Hollywood and is eager to learn about the journey and successes of others in the industry.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Actor Information Extraction Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the IMDbPY package to find and return information about a specified actor, including their biography, filmography, and awards.\\\",\\n  \\\"function_name\\\": \\\"get_actor_info\\\",\\n  \\\"input_args\\\": \\\"actor_name\\\",\\n  \\\"return\\\": \\\"A dictionary containing the actor's bio, filmography, and awards, or a message indicating the actor was not found.\\\",\\n  \\\"depend\\\": \\\"IMDbPY\\\"\\n}\"", "description": "tool development"}
{"input persona": "A huge fan of both Deadpool and MCUs (Marvel Cinematic Universe)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Marvel Character Information Interface\\\",\\n\\\"description\\\": \\\"Fetches basic information about a Marvel character, including a brief description and the comics they appear in, by using the Marvel Comics API\\\",\\n\\\"function_name\\\": \\\"get_character_info\\\",\\n\\\"input_args\\\": {\\n    \\\"character_name\\\": \\\"Name of the Marvel character\\\"\\n},\\n\\\"return\\\": {\\n    \\\"description\\\": \\\"Brief description of the character\\\",\\n    \\\"comics\\\": \\\"List of comics the character appears in\\\"\\n},\\n\\\"depend\\\": \\\"Marvel Comics API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A painter looking for a light-filled and versatile studio space", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Studio Space Finder Interface\\\",\\n  \\\"description\\\": \\\"Finds studio spaces that meet a user's criteria in a given location.\\\",\\n  \\\"function_name\\\": \\\"get_studio_spaces\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"the user's current location as a string\\\",\\n    \\\"min_sqft\\\": \\\"the minimum square footage requirement as an integer\\\",\\n    \\\"light_requirement\\\": \\\"the lighting requirement as a string (e.g., 'natural light', 'large windows', etc.)\\\"\\n  },\\n  \\\"return\\\": \\\"A list of addresses for suitable studio spaces.\\\",\\n  \\\"depend\\\": \\\"Realtor.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an episcopal priest who has been serving in the church for more than two decades.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bible Verse Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface recommends relevant Bible verses based on the input text. It uses an NLP model to understand the context of the input text and map it to corresponding Bible verses.\\\",\\n  \\\"function_name\\\": \\\"get_relevant_bible_verses\\\",\\n  \\\"input_args\\\": [\\\"input_text\\\"],\\n  \\\"return\\\": \\\"List of relevant Bible verses.\\\",\\n  \\\"depend\\\": [\\\"HuggingFace transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A music producer looking to incorporate augmented reality elements in their upcoming tour", "synthesized text": "\"{\\n\\\"name\\\": \\\"AR Element Creation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to add an AR element to a video.\\\",\\n\\\"function_name\\\": \\\"add_ar_element\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"Path to the input video file\\\",\\n    \\\"image_path\\\": \\\"Path to the image file to be superimposed onto the video\\\",\\n    \\\"output_path\\\": \\\"Path for the output video file\\\"\\n},\\n\\\"return\\\": \\\"Path to the output video file with the AR element added\\\",\\n\\\"depend\\\": [\\\"OpenCV\\\", \\\"Pygame\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An IT security analyst interested in the impacts of GDPR", "synthesized text": "\"{\\n\\\"name\\\": \\\"Personal Data Anonymizer Interface\\\",\\n\\\"description\\\": \\\"An interface to anonymize personal data in a CSV file. Users provide the path to the CSV file and the columns to be anonymized, and the interface will return a new CSV file with the personal data replaced by fake data.\\\",\\n\\\"function_name\\\": \\\"anonymize_personal_data\\\",\\n\\\"input_args\\\": {\\n    \\\"csv_file_path\\\": \\\"The path to the CSV file\\\",\\n    \\\"columns_to_anonymize\\\": \\\"The columns in the CSV file to be anonymized\\\"\\n},\\n\\\"return\\\": \\\"The path to the new CSV file with anonymized data\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"faker\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Public Relations Manager for Metro Transit", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-Time Transit Information Interface\\\",\\n\\\"description\\\": \\\"This interface provides real-time transit information for a specific stop or location. It outputs the next arriving buses or trains and their expected arrival times.\\\",\\n\\\"function_name\\\": \\\"get_real_time_transit_info\\\",\\n\\\"input_args\\\": \\\"stop_id\\\",\\n\\\"return\\\": \\\"List of dictionaries, each containing the 'route' and 'predictedArrivalTime' for each arriving bus or train.\\\",\\n\\\"depend\\\": \\\"OneBusAway API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skeptical politician who raises concerns about the cost and feasibility of implementing secure voting systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure Voting System Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface to estimate the cost of implementing a secure voting system based on factors such as population size, technology infrastructure, and training requirements.\\\",\\n\\\"function_name\\\": \\\"estimate_voting_system_cost\\\",\\n\\\"input_args\\\": {\\n    \\\"population_size\\\": \\\"The size of the population that will use the voting system\\\",\\n    \\\"tech_infrastructure\\\": \\\"The current level of technology infrastructure (scale of 1-10)\\\",\\n    \\\"training_needs\\\": \\\"The estimated training needs for staff and users (scale of 1-10)\\\"\\n},\\n\\\"return\\\": \\\"Estimated cost for implementing a secure voting system\\\",\\n\\\"depend\\\": \\\"Scikit-learn library and a pre-trained regression model ('voting_system_cost_model.pkl') for cost prediction\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Ukrainian grandmother who has a wealth of knowledge in traditional recipes and cooking techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recipe Ingredient Substitution Interface\\\", \\n\\\"description\\\": \\\"An interface that suggests alternatives for ingredients in recipes. This would be helpful for users who may not have a certain ingredient on hand or are looking to modify a recipe due to dietary restrictions or personal preferences.\\\", \\n\\\"function_name\\\": \\\"get_recipe_substitutions\\\", \\n\\\"input_args\\\": [\\\"ingredient\\\", \\\"recipe\\\"], \\n\\\"return\\\": \\\"A list of potential alternative ingredients.\\\", \\n\\\"depend\\\": [\\\"requests library\\\", \\\"BeautifulSoup library\\\", \\\"sklearn library\\\", \\\"www.food.com\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A nostalgic retired nurse who knew of Sister Patricia Mary Hook", "synthesized text": "\"{\\n\\\"name\\\": \\\"Digital Scrapbook\\\",\\n\\\"description\\\": \\\"An interface to collect and organize available public data about a person of interest into a digital scrapbook. The data includes news articles and images.\\\",\\n\\\"function_name\\\": \\\"create_digital_scrapbook\\\",\\n\\\"input_args\\\": \\\"name - The name of the person of interest.\\\",\\n\\\"return\\\": \\\"A dictionary containing 'articles' (title, link, and publication date) and 'images' (description and URL) related to the person.\\\",\\n\\\"depend\\\": \\\"Python's requests library for sending HTTP requests, BeautifulSoup for parsing XML data, and Unsplash and Google News APIs for fetching images and news articles respectively.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired Freemason who guides and imparts wisdom about the principles and rituals of the organization", "synthesized text": "\"{\\n\\\"name\\\": \\\"Masonic Cipher Decoder Interface\\\",\\n\\\"description\\\": \\\"This interface decodes messages encoded in the Freemason's Cipher, also known as the Pigpen Cipher. Users input the encoded message and the interface returns the decoded text.\\\",\\n\\\"function_name\\\": \\\"freemason_cipher_decoder\\\",\\n\\\"input_args\\\": [\\\"cipher_text\\\"],\\n\\\"return\\\": \\\"A string representing the decoded message.\\\",\\n\\\"depend\\\": [\\\"Python's built-in functions\\\"]\\n}\"", "description": "tool development"}
{"input persona": "As a realtor who specializes in luxury coastal properties in Maine.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coastal Property Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the price of a coastal property in Maine based on various features such as property size, proximity to the coast, and year of construction.\\\",\\n\\\"function_name\\\": \\\"predict_property_price\\\",\\n\\\"input_args\\\": {\\n    \\\"property_features\\\": \\\"A dictionary with keys: 'size', 'proximity_to_coast', 'year_built'. Example: {'size': 2500, 'proximity_to_coast': 0.5, 'year_built': 2000}\\\"\\n},\\n\\\"return\\\": \\\"The estimated price of the property.\\\",\\n\\\"depend\\\": \\\"This function depends on the scikit-learn Python library and a pre-trained model 'coastal_property_model.pkl', which is assumed to be present in the same directory.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Tongva tribe elder lamenting the loss of cultural heritage.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Language Translation Interface\\\",\\n  \\\"description\\\": \\\"An interface to translate English text to Tongva, a Native American language, using a pre-trained model from Huggingface Transformers.\\\",\\n  \\\"function_name\\\": \\\"translate_english_to_tongva\\\",\\n  \\\"input_args\\\": [\\\"text\\\"],\\n  \\\"return\\\": \\\"The translated Tongva text\\\",\\n  \\\"depend\\\": \\\"Huggingface Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mother who advocates for lower speed limits in residential areas for child safety", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Traffic Speed Data Collection Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained model from TensorFlow to detect and recognize vehicles in a video stream, and calculate their speed. Return a report with the number and percentage of vehicles exceeding a certain speed limit.\\\",\\n  \\\"function_name\\\": \\\"detect_and_calculate_speed\\\",\\n  \\\"input_args\\\": [\\\"video_url\\\", \\\"speed_limit\\\"],\\n  \\\"return\\\": \\\"A dictionary with the total number of vehicles, the number of vehicles exceeding the speed limit, and the percentage of vehicles exceeding the speed limit.\\\",\\n  \\\"depend\\\": [\\\"cv2\\\", \\\"numpy\\\", \\\"scipy\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"pre-trained model from TensorFlow Hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A social network analyst studying the properties of interconnected systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Network Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that receives a list of edges that represent a network and returns various properties of the network such as the number of nodes, the number of edges, average degree, and whether the graph is connected.\\\",\\n\\\"function_name\\\": \\\"analyze_network\\\",\\n\\\"input_args\\\": \\\"List of tuples. Each tuple represents an edge between two nodes (e.g., [(1,2), (2,3), (3,4), (4,5)])\\\",\\n\\\"return\\\": \\\"Dictionary. Keys are the names of network properties and values are the respective property values (e.g., {'Number of Nodes': 5, 'Number of Edges': 4, 'Average Degree': 1.6, 'Is Connected': True})\\\",\\n\\\"depend\\\": \\\"NetworkX library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student who creates sports highlight videos and shares them on YouTube", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Highlight Extraction Interface\\\",\\n\\\"description\\\": \\\"Extracts the highlight reel from a sports video based on movement intensity.\\\",\\n\\\"function_name\\\": \\\"extract_highlights\\\",\\n\\\"input_args\\\": \\\"path_to_video: String - The path to the video file\\\",\\n\\\"return\\\": \\\"highlight_reel: VideoFileClip - The highlight reel extracted from the original video\\\",\\n\\\"depend\\\": \\\"Python libraries: moviepy, tensorflow; Machine learning model: TensorFlow's MoveNet SinglePose model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A loyal Atlanta United 2 fan with a passionate love for soccer", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Soccer Match Statistics Analysis Interface\\\",\\n  \\\"description\\\": \\\"Provide detailed statistics about a soccer match given the match id.\\\",\\n  \\\"function_name\\\": \\\"get_match_statistics\\\",\\n  \\\"input_args\\\": [\\\"match_id\\\"],\\n  \\\"return\\\": {\\n    \\\"match_id\\\": \\\"string\\\",\\n    \\\"home_team\\\": \\\"string\\\",\\n    \\\"away_team\\\": \\\"string\\\",\\n    \\\"home_goals\\\": \\\"int\\\",\\n    \\\"away_goals\\\": \\\"int\\\",\\n    \\\"possession_percentage_home\\\": \\\"float\\\",\\n    \\\"possession_percentage_away\\\": \\\"float\\\",\\n    \\\"total_shots_home\\\": \\\"int\\\",\\n    \\\"total_shots_away\\\": \\\"int\\\"\\n  },\\n  \\\"depend\\\": [\\\"Sportradar Soccer API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A materials science professor investigating the potential of nanotechnology in reducing microfiber shedding", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Microfiber Shedding Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained VGG16 model to analyze images of microfiber samples before and after nanotechnology treatment. The model detects and counts the microfibers shed from the sample. The user inputs the paths to two image files (before and after treatment) and the interface returns the difference in microfiber shedding.\\\",\\n  \\\"function_name\\\": \\\"analyze_microfiber_shedding\\\",\\n  \\\"input_args\\\": [\\\"before_img_path\\\", \\\"after_img_path\\\"],\\n  \\\"return\\\": \\\"Difference in the number of shed microfibers before and after treatment\\\",\\n  \\\"depend\\\": \\\"TensorFlow, Keras, NumPy, VGG16 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A factory worker who relies on the income from the plastic-producing company to support their family", "synthesized text": "\"{\\n\\\"name\\\": \\\"Recycling Rate Interface\\\",\\n\\\"description\\\": \\\"An interface to get the recycling rate of different types of plastics, useful for factory workers in plastic-producing companies and environmental researchers.\\\",\\n\\\"function_name\\\": \\\"get_recycling_rate\\\",\\n\\\"input_args\\\": \\\"plastic_type - A string representing the type of plastic.\\\",\\n\\\"return\\\": \\\"The recycling rate of the inputted type of plastic.\\\",\\n\\\"depend\\\": \\\"Web API from a database like Statista\\\"\\n}\"", "description": "tool development"}
{"input persona": "a semi-retired novelist who values high-quality and substantial drama content", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Recommendation Interface\\\",\\n\\\"description\\\": \\\"Provides recommendations for TV shows based on the user's favorite drama TV show\\\",\\n\\\"function_name\\\": \\\"get_tv_show_recommendations\\\",\\n\\\"input_args\\\": {\\\"favorite_show\\\": \\\"The user's favorite drama TV show\\\"},\\n\\\"return\\\": \\\"A list of recommended TV shows of the same genre\\\",\\n\\\"depend\\\": \\\"TasteDive API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nostalgic former teammate of Oleksandr Tsybenko, reminiscing about the old days on the field.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Statistics Interface\\\", \\n\\\"description\\\": \\\"An interface to get a football player's career stats. This includes appearances, goals, assists, yellow cards, red cards, etc.\\\", \\n\\\"function_name\\\": \\\"get_player_stats\\\", \\n\\\"input_args\\\": \\\"player_name\\\", \\n\\\"return\\\": \\\"A dictionary containing player's career stats\\\", \\n\\\"depend\\\": \\\"Football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A floor manager resistant to change, valuing manual craftsmanship over automated processes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Inventory Management Interface\\\", \\n\\\"description\\\": \\\"An interface that provides a summary of an inventory stored in an Excel file. The summary includes the total value of the inventory, the item with the highest quantity, and the item with the lowest quantity.\\\", \\n\\\"function_name\\\": \\\"inventory_summary\\\", \\n\\\"input_args\\\": {\\\"inventory_file\\\": \\\"path to the Excel inventory file\\\"}, \\n\\\"return\\\": {\\\"total_value\\\": \\\"total value of the inventory\\\", \\\"max_quantity_item\\\": \\\"item name with the highest quantity\\\", \\\"min_quantity_item\\\": \\\"item name with the lowest quantity\\\"}, \\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"openpyxl\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "在校羽球社社长，渴望追随羽坛明星的脚步，对国际羽毛球大赛日程和运动员成就非常关注。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u7fbd\\u6bdb\\u7403\\u8d5b\\u4e8b\\u67e5\\u8be2\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u901a\\u8fc7\\u8d5b\\u4e8b\\u540d\\u79f0\\u67e5\\u8be2\\u7fbd\\u6bdb\\u7403\\u8d5b\\u4e8b\\u7684\\u65e5\\u7a0b\\u548c\\u53c2\\u8d5b\\u8fd0\\u52a8\\u5458\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\\",\\n\\\"function_name\\\": \\\"get_badminton_tournament_details\\\",\\n\\\"input_args\\\": \\\"tournament_name - \\u5f85\\u67e5\\u8be2\\u7684\\u7fbd\\u6bdb\\u7403\\u8d5b\\u4e8b\\u540d\\u79f0\\\",\\n\\\"return\\\": \\\"\\u8d5b\\u4e8b\\u7684\\u8be6\\u7ec6\\u4fe1\\u606f\\uff0c\\u5305\\u62ec\\u65e5\\u671f\\u3001\\u5730\\u70b9\\u3001\\u53c2\\u8d5b\\u8fd0\\u52a8\\u5458\\u7b49\\\",\\n\\\"depend\\\": \\\"Sportradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a passionate fan of drum and bass music and follow the DnB scene closely.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Drum and Bass Music Discovery Interface\\\",\\n  \\\"description\\\": \\\"An interface for discovering similar artists and their top tracks based on a favorite drum and bass artist. This is achieved by leveraging the Spotify Web API.\\\",\\n  \\\"function_name\\\": \\\"get_similar_artists_top_tracks\\\",\\n  \\\"input_args\\\": {\\n    \\\"artist_name\\\": \\\"The name of the user's favorite drum and bass artist.\\\",\\n    \\\"client_id\\\": \\\"The client ID of the user's Spotify developer account.\\\",\\n    \\\"client_secret\\\": \\\"The client secret of the user's Spotify developer account.\\\"\\n  },\\n  \\\"return\\\": \\\"A dictionary with two keys: 'similar_artists', which maps similar artists to their popularity scores, and 'top_tracks', which is a list of the user's favorite artist's top tracks.\\\",\\n  \\\"depend\\\": \\\"Python's requests and base64 libraries, and the Spotify Web API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A technologically-illiterate elderly man who got this message by accident", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text to Speech Interface\\\",\\n\\\"description\\\": \\\"This interface converts text to speech using Google's Text-to-Speech API. It creates an audio file with the spoken version of the text.\\\", \\n\\\"function_name\\\": \\\"text_to_speech\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"The text to be converted to speech\\\", \\\"language\\\": \\\"The language to be used for the speech (default is 'en')\\\", \\\"slow\\\": \\\"Whether to slow down the speech (default is False)\\\"},\\n\\\"return\\\": \\\"An audio file named 'output.mp3' that contains the text spoken in the specified language and speed.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"gtts\\\", \\\"os\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "一个爱好角色扮演游戏且特别喜欢二次元水彩画风的玩家", "synthesized text": "\"{\\n\\\"name\\\": \\\"Role-Playing Game Character Generator Interface\\\",\\n\\\"description\\\": \\\"An interface that generates a unique character description and background story for a role-playing game based on the user's specified character type.\\\",\\n\\\"function_name\\\": \\\"generate_rpg_character\\\",\\n\\\"input_args\\\": [\\\"character_type\\\"],\\n\\\"return\\\": \\\"A unique character description and background story for the specified character type.\\\",\\n\\\"depend\\\": \\\"Huggingface's GPT2 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a current high school student who struggles understanding older movie references", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Reference Explanation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a movie reference as input and returns the movie's details including title, release date, overview, and popularity using the Movie Database API.\\\",\\n\\\"function_name\\\": \\\"get_movie_details\\\",\\n\\\"input_args\\\": [\\\"reference\\\"],\\n\\\"return\\\": \\\"Dictionary containing movie details\\\",\\n\\\"depend\\\": \\\"requests library, TMDb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an ancient history scholar specialized in the Antikythera mechanism", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Antikythera Mechanism Simulation Interface\\\",\\n  \\\"description\\\": \\\"Simulate the astronomical predictions of the Antikythera mechanism for a given date.\\\",\\n  \\\"function_name\\\": \\\"simulate_antikythera\\\",\\n  \\\"input_args\\\": {\\n    \\\"date\\\": \\\"A string representing the date for which to simulate the Antikythera mechanism's predictions.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"type\\\": \\\"dict\\\",\\n    \\\"description\\\": \\\"A dictionary where the keys are the names of celestial bodies and the values are the positions of the celestial bodies as predicted by the mechanism.\\\"\\n  },\\n  \\\"depend\\\": \\\"antikythera_simulation library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Aspiring professional racing driver from Argentina, currently competing in a lower category with dreams of setting lap records at circuits like Autódromo Ciudad de La Rioja.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lap Time Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained regression model to predict the lap time based on various parameters such as weather conditions, track conditions, car specifications etc.\\\",\\n\\\"function_name\\\": \\\"predict_lap_time\\\",\\n\\\"input_args\\\": [\\\"model_path\\\", \\\"weather_condition\\\", \\\"track_condition\\\", \\\"car_specifications\\\"],\\n\\\"return\\\": \\\"Predicted lap time as a float\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"pandas\\\", \\\"trained regression model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A British navigator and explorer who charted the eastern coastline of Australia and claimed it for the British Empire", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Map Generation\\\",\\n\\\"description\\\": \\\"Generates a map of a specified region during the time of a given explorer\\\",\\n\\\"function_name\\\": \\\"get_historical_map\\\",\\n\\\"input_args\\\": [\\\"explorer\\\", \\\"region\\\"],\\n\\\"return\\\": \\\"A map plot\\\",\\n\\\"depend\\\": [\\\"geopandas\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A University of South Carolina alumni who was a member of the men's swimming and diving team.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Swimming Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that analyzes swimming performance data from a CSV file and provides a summary and visualization of the data.\\\",\\n\\\"function_name\\\": \\\"analyze_swimming_performance\\\",\\n\\\"input_args\\\": \\\"file_path - Path to a CSV file containing swimming performance data.\\\",\\n\\\"return\\\": \\\"A statistical summary of the swimming performance data and a plot visualizing the data over time.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced product manager overseeing the development and deployment of decentralized applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Smart Contract Interaction Interface\\\",\\n\\\"description\\\": \\\"An interface to interact with a function of a deployed smart contract on the Ethereum blockchain.\\\",\\n\\\"function_name\\\": \\\"interact_with_contract\\\",\\n\\\"input_args\\\": [\\\"infura_url\\\", \\\"contract_address\\\", \\\"contract_abi\\\", \\\"function_name\\\", \\\"function_args\\\"],\\n\\\"return\\\": \\\"Transaction receipt after contract interaction.\\\",\\n\\\"depend\\\": [\\\"web3 Python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A cybersecurity expert who specializes in setting up secure mobile networks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mobile Network Security Verification Interface\\\",\\n\\\"description\\\": \\\"An interface to verify the security of a mobile network using Shodan's Rest API. It returns security-related information about the network, such as vulnerabilities, open ports, services running, etc.\\\",\\n\\\"function_name\\\": \\\"mobile_network_security_check\\\",\\n\\\"input_args\\\": \\\"ip_address\\\",\\n\\\"return\\\": \\\"A dictionary containing security-related information about the mobile network.\\\",\\n\\\"depend\\\": \\\"Shodan's Rest API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports enthusiast and a law student in Poland, currently researching sports law for my thesis.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Legal Case Search Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to search for legal cases based on a keyword or case name. It returns the case name and court for each matching case.\\\",\\n  \\\"function_name\\\": \\\"get_legal_cases\\\",\\n  \\\"input_args\\\": [\\\"case_name\\\"],\\n  \\\"return\\\": \\\"A list of dictionaries, each dictionary contains the case name and court for a matching case.\\\",\\n  \\\"depend\\\": \\\"Python requests library, CourtListener REST API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A security manager responsible for overseeing the surveillance operation and coordinating with other departments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface recognizes faces from an image and matches them with known faces.\\\",\\n\\\"function_name\\\": \\\"recognize_face\\\",\\n\\\"input_args\\\": \\\"image_path\\\",\\n\\\"return\\\": \\\"List of names of recognized faces\\\",\\n\\\"depend\\\": \\\"OpenCV, dlib, face_recognition\\\"\\n}\"", "description": "tool development"}
{"input persona": "A defense official responsible for identifying materials for military equipment in harsh conditions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Property Search Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve all the physical properties of a specific material from the MatWeb database.\\\",\\n\\\"function_name\\\": \\\"get_material_properties\\\",\\n\\\"input_args\\\": {\\\"material_name\\\": \\\"Name of the material\\\"},\\n\\\"return\\\": {\\\"Data\\\": \\\"A list of material properties such as hardness, strength, and temperature resistance\\\"},\\n\\\"depend\\\": \\\"MatWeb API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Bruneian local with a deep knowledge of Brunei's royal family history and traditions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Royal Family Trivia Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch brief information about a member of Brunei's royal family from Wikipedia.\\\",\\n\\\"function_name\\\": \\\"get_royal_family_member_info\\\",\\n\\\"input_args\\\": \\\"name - A string that is the name of a member of Brunei's royal family\\\",\\n\\\"return\\\": \\\"A string that is a brief summary about the input royal family member, or a message stating no information was found\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "an aged retired school principal who remembers using the Holton-Curry Reader as a child", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Text Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts text from an image of a book page. It uses OCR technology and image processing methods to optimize the text extraction process.\\\",\\n\\\"function_name\\\": \\\"extract_text_from_image\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"Extracted text from the image in the form of a string\\\",\\n\\\"depend\\\": \\\"Python's OpenCV, PIL and PyTesseract libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A website owner who wants to improve user experience by reducing page loading time", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Website Speed Test Interface\\\",\\n  \\\"description\\\": \\\"Analyze the performance of a webpage and get suggestions to make it faster\\\",\\n  \\\"function_name\\\": \\\"analyze_webpage_performance\\\",\\n  \\\"input_args\\\": \\\"url - The URL of the webpage to analyze\\\",\\n  \\\"return\\\": \\\"A JSON object with the performance report of the webpage\\\",\\n  \\\"depend\\\": \\\"PageSpeed Insights API from Google\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young couple who brings their beloved rescue dog for regular check-ups and vaccinations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Health Record Interface\\\",\\n\\\"description\\\": \\\"This interface uses a simple SQLite database to store and retrieve a pet's health records, such as their vaccinations and vet visits.\\\",\\n\\\"function_name\\\": [\\\"add_health_event\\\", \\\"get_pet_health_history\\\"],\\n\\\"input_args\\\": {\\n    \\\"add_health_event\\\": [\\\"pet_name\\\", \\\"event_date\\\", \\\"event_type\\\", \\\"event_details\\\", \\\"(optional) database_name\\\"],\\n    \\\"get_pet_health_history\\\": [\\\"pet_name\\\", \\\"(optional) database_name\\\"]\\n    },\\n\\\"return\\\": {\\n    \\\"add_health_event\\\": \\\"None, but a record is added in the database.\\\",\\n    \\\"get_pet_health_history\\\": \\\"A list of tuples containing the pet's health history.\\\"\\n    },\\n\\\"depend\\\": \\\"SQLite3 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lifeguard who grew up in rural Ireland but never followed any sort of sports", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Live Sports Score Updates Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches live sports scores for a given sport and teams using the Sports Open Data API.\\\",\\n  \\\"function_name\\\": \\\"get_live_scores\\\",\\n  \\\"input_args\\\": [\\\"sport\\\", \\\"team1\\\", \\\"team2\\\"],\\n  \\\"return\\\": \\\"A JSON object containing the live scores between the two teams in the given sport.\\\",\\n  \\\"depend\\\": [\\\"requests library\\\", \\\"Sports Open Data API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A turfgrass scientist specializing in developing resilient grass varieties for various climates", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grass Health Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the health of a grass variety given certain weather conditions and soil composition, using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_grass_health\\\",\\n\\\"input_args\\\": {\\n  \\\"model_path\\\": \\\"Path to the pre-trained model file\\\",\\n  \\\"climate_data\\\": \\\"Numpy array of climate data (temperature, rainfall, sunlight hours, etc.)\\\",\\n  \\\"soil_data\\\": \\\"Numpy array of soil data (pH level, organic matter content, nutrient levels, etc.)\\\"\\n},\\n\\\"return\\\": \\\"A string stating the predicted health of the grass under the given conditions.\\\",\\n\\\"depend\\\": \\\"tensorflow, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是一名花样滑冰爱好者，同时也热衷于各种艺术形式和表演。", "synthesized text": "\"{\\n\\\"name\\\": \\\"\\u821e\\u8e48\\u52a8\\u4f5c\\u8bc6\\u522b\\u63a5\\u53e3\\\",\\n\\\"description\\\": \\\"\\u7528\\u6237\\u8f93\\u5165\\u4e00\\u4e2a\\u89c6\\u9891\\u6587\\u4ef6\\u8def\\u5f84\\uff0c\\u8fd4\\u56de\\u89c6\\u9891\\u4e2d\\u7684\\u821e\\u8e48\\u52a8\\u4f5c\\u4ee5\\u53ca\\u76f8\\u5e94\\u7684\\u65f6\\u95f4\\u6233.\\\",\\n\\\"function_name\\\": \\\"identify_dance_moves\\\",\\n\\\"input_args\\\": \\\"video_file_path\\\",\\n\\\"return\\\": \\\"\\u4e00\\u4e2a\\u5305\\u542b\\u821e\\u8e48\\u52a8\\u4f5c\\u548c\\u76f8\\u5e94\\u65f6\\u95f4\\u6233\\u7684\\u5217\\u8868\\\",\\n\\\"depend\\\": \\\"OpenPose\\u5e93\\uff0cOpenCV\\u5e93\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traffic helicopter pilot who provides a bird's eye view of the I-91 traffic", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Traffic Information Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get real-time traffic information for a specific route or highway. The function makes a request to the Bing Maps Traffic API and returns a list of traffic incidents, each with a description, severity level, road closure status, and potential detour information when available.\\\",\\n\\\"function_name\\\": \\\"get_traffic_info\\\",\\n\\\"input_args\\\": {\\\"route\\\": \\\"A string that represents the specific route or highway (like 'I-91')\\\"},\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary represents a traffic incident and contains the keys: 'description', 'severity', 'road_closed', 'detour'.\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"requests\\\", \\\"json\\\"], \\\"web_APIs\\\": [\\\"Bing Maps Traffic API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A financial institution seeking legal advice on compliance with new regulatory requirements", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Analysis Interface\\\",\\n\\\"description\\\": \\\"Interface to summarize legal regulatory documents, highlighting compliance points.\\\",\\n\\\"function_name\\\": \\\"summarize_legal_document\\\",\\n\\\"input_args\\\": \\\"path_to_document - path to the regulatory document that needs to be analyzed\\\",\\n\\\"return\\\": \\\"A summary of the document highlighting the key compliance points.\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers library and a pre-trained summarization model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a beginner programmer who has been trying to figure out how to manage overflow in CSS", "synthesized text": "\"{\\n\\\"name\\\": \\\"CSS Overflow Management Interface\\\",\\n\\\"description\\\": \\\"This interface uses BeautifulSoup and requests libraries in Python to scrape a relevant StackOverflow discussion thread and parse out the highest voted answer. The user inputs the CSS problem they're facing, and the interface returns a helpful answer from the StackOverflow community.\\\",\\n\\\"function_name\\\": \\\"get_best_stackoverflow_answer\\\",\\n\\\"input_args\\\": {\\n    \\\"query\\\": \\\"A string representing the user's CSS problem.\\\"\\n},\\n\\\"return\\\": \\\"A string containing the highest voted answer from the StackOverflow community for the user's query.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A comedy writer who collaborates with the stand-up comedian to create humorous yet educational content about HIV/AIDS", "synthesized text": "\"{\\n\\\"name\\\": \\\"HIV Educational Fun Facts Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Open Trivia Database API to generate a specified number of HIV/AIDS related questions and answers. These can be used by a comedy writer to create humorous yet educational content.\\\",\\n\\\"function_name\\\": \\\"get_hiv_educational_fun_facts\\\",\\n\\\"input_args\\\": \\\"number_of_facts - An integer specifying the number of facts to generate.\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing a question and its related answers about HIV/AIDS.\\\",\\n\\\"depend\\\": \\\"This function depends on the Open Trivia Database API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "an irritated recipient of the said call", "synthesized text": "\"{\\n\\\"name\\\": \\\"Telemarketing Call Blocker Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to block telemarketing calls by adding their phone number to a block list using Twilio API.\\\",\\n\\\"function_name\\\": \\\"block_telemarketing_calls\\\",\\n\\\"input_args\\\": \\\"phone_number\\\",\\n\\\"return\\\": \\\"No return value. The function acts by updating the status of the incoming phone number to 'busy' in the Twilio system.\\\",\\n\\\"depend\\\": \\\"Twilio API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A historian who has dedicated their life to unraveling the mysteries behind Stonehenge", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stonehenge Stone Alignment Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the alignment of the stones in Stonehenge with celestial bodies at a given date and time. It returns a list of celestial bodies that the stones align with.\\\",\\n\\\"function_name\\\": \\\"calculate_stonehenge_alignment\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"time\\\"],\\n\\\"return\\\": \\\"List of celestial bodies that Stonehenge aligns with\\\",\\n\\\"depend\\\": \\\"PyEphem library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a major fan of Ryan Gosling and Rachel McAdams' on-screen chemistry and a believer in their behind-the-scenes romance.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Celebrity Relationship Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a celebrity relationship database to analyze the relationship between two celebrities. It takes as input the names of two celebrities, and returns their relationship status.\\\",\\n  \\\"function_name\\\": \\\"get_celebrity_relationship\\\",\\n  \\\"input_args\\\": [\\\"celebrity1\\\", \\\"celebrity2\\\"],\\n  \\\"return\\\": \\\"Relationship status of the celebrities\\\",\\n  \\\"depend\\\": \\\"Web API: Celebrity Relationship Database\\\"\\n}\"", "description": "tool development"}
{"input persona": "a motorbike mechanic with no religious affiliation living in Ponoka", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fault Diagnosis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model to diagnose faults in motorbikes based on the symptoms described by the user.\\\",\\n\\\"function_name\\\": \\\"diagnose_fault\\\",\\n\\\"input_args\\\": \\\"symptoms - A string describing the symptoms observed in the motorbike.\\\",\\n\\\"return\\\": \\\"The possible fault in the motorbike.\\\",\\n\\\"depend\\\": \\\"TensorFlow, Keras\\\"\\n}\"", "description": "tool development"}
{"input persona": "A scholar specializing in the traditions and customs of the man's ancestral heritage, offering insights into their cultural identity", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ancestry Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface leverages the OpenCage Geocoding API to trace the geographical origins of a person's ancestors and a pre-trained model from huggingface's transformer library to gather information about the customs and traditions of different cultures globally. The user inputs their ancestral last names, and the interface will return a summary of the traditions and customs associated with those family names.\\\",\\n\\\"function_name\\\": \\\"analyze_ancestry\\\",\\n\\\"input_args\\\": \\\"last_names - a list of ancestral last names\\\",\\n\\\"return\\\": \\\"cultural_info - a dictionary with last names as keys and information about the customs and traditions of the associated regions as values\\\",\\n\\\"depend\\\": \\\"Python's requests library, huggingface's transformer library, OpenCage Geocoding API, and a large language model (e.g., GPT-3)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A philosophy student who takes a deontological approach to ethics and believes in adhering to moral rules", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Moral Rule Evaluation Interface\\\",\\n  \\\"description\\\": \\\"An interface that evaluates whether a proposed action is in compliance with a set of predefined deontological rules. The interface leverages a pre-trained textual analysis model from Huggingface.\\\",\\n  \\\"function_name\\\": \\\"evaluate_deontological_compliance\\\",\\n  \\\"input_args\\\": \\\"action_text - A string describing the proposed action.\\\",\\n  \\\"return\\\": \\\"A dictionary where the keys are the rules and the values are True if the action is in compliance with the rule, and False otherwise.\\\",\\n  \\\"depend\\\": \\\"Huggingface 'transformers' library and a fine-tuned text classification model (e.g., 'distilbert-base-uncased-finetuned-sst-2-english').\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diligent student who seeks help from their older relative for science projects and homework", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Element Information Interface\\\",\\n\\\"description\\\": \\\"Provides information about a chemical element\\\",\\n\\\"function_name\\\": \\\"get_element_info\\\",\\n\\\"input_args\\\": \\\"element_symbol - the symbol of the chemical element\\\",\\n\\\"return\\\": \\\"A json with key details about the element\\\",\\n\\\"depend\\\": \\\"Periodic Table API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A laboratory technician who specializes in genetic engineering.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Gene Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the GC content of a given DNA sequence. The GC content is a key factor in the stability of the molecule and the protein it encodes.\\\",\\n\\\"function_name\\\": \\\"calculate_gc_content\\\",\\n\\\"input_args\\\": {\\\"sequence\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"float\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"Biopython\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An average income worker who loves football and feel having difficulty with balancing personal finance.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Personal Finance Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface takes the user's income and expenses as input, analyzes the data, and returns a detailed financial report.\\\",\\n\\\"function_name\\\": \\\"analyze_finances\\\",\\n\\\"input_args\\\": {\\n    \\\"income\\\": \\\"The total income of the user.\\\",\\n    \\\"expenses\\\": \\\"A list of expenses, where each expense is represented as a tuple. The first element of the tuple is the category of the expense and the second element is the amount of the expense.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with the total income, total expenses, and balance, and a pie chart showing the distribution of expenses.\\\",\\n\\\"depend\\\": \\\"This interface leverages the pandas and matplotlib Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A library consultant with extensive knowledge of different database systems, providing guidance on software selection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a knowledge graph of different database systems, their features, use-cases, and performance metrics to recommend the most suitable databases based on user requirements.\\\",\\n\\\"function_name\\\": \\\"recommend_database\\\",\\n\\\"input_args\\\": \\\"A list of requirements\\\",\\n\\\"return\\\": \\\"A list of top 3 recommended databases\\\",\\n\\\"depend\\\": \\\"networkx, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A new employee at Trilogy, just graduated from university.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Document Similarity Interface\\\",\\n\\\"description\\\": \\\"This interface compares two documents and returns a similarity score between 0 and 1. The higher the score, the more similar the documents are.\\\",\\n\\\"function_name\\\": \\\"document_similarity\\\",\\n\\\"input_args\\\": [\\\"path_to_doc1\\\", \\\"path_to_doc2\\\"],\\n\\\"return\\\": \\\"Similarity score between 0 and 1\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"gensim\\\", \\\"nltk\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A manager who ensures that the colleague's workload is manageable during Ramadan and allows for flexible work hours", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Employee Workload Balancing Interface during Ramadan\\\",\\n  \\\"description\\\": \\\"This interface adjusts the deadlines of tasks for employees during Ramadan to ensure manageable workload and flexible work hours. It takes a csv file with tasks and their deadlines as input and returns a csv file with adjusted deadlines.\\\",\\n  \\\"function_name\\\": \\\"adjust_workload_during_ramadan\\\",\\n  \\\"input_args\\\": \\\"csv_file_path\\\",\\n  \\\"return\\\": \\\"A csv file with adjusted deadlines\\\",\\n  \\\"depend\\\": \\\"Python libraries: pandas, datetime\\\"\\n}\"", "description": "tool development"}
{"input persona": "An average Vietnamese citizen who values historical facts and the territorial integrity of his/her country.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vietnamese Historical Fact Checking Interface\\\",\\n\\\"description\\\": \\\"This interface fetches information about a historical event or figure from Wikipedia using its API. The user can input a historical event or figure's name, and the interface will return a summary of the information fetched.\\\",\\n\\\"function_name\\\": \\\"get_historical_facts\\\",\\n\\\"input_args\\\": \\\"A string representing the historical event or figure's name\\\",\\n\\\"return\\\": \\\"A string representing a summary of the information fetched from Wikipedia\\\",\\n\\\"depend\\\": \\\"Wikipedia API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A blockchain developer seeking guidance on implementing cryptography in decentralized applications", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cryptography Interface\\\",\\n\\\"description\\\": \\\"This interface provides basic encryption and decryption functionality using the Advanced Encryption Standard (AES) algorithm.\\\",\\n\\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_data\\\", \\\"decrypt_data\\\"],\\n\\\"input_args\\\": [\\\"data\\\", \\\"key\\\"],\\n\\\"return\\\": [\\\"key\\\", \\\"ciphered_data\\\", \\\"data\\\"],\\n\\\"depend\\\": [\\\"PyCryptodome\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A female professional javelin thrower and a two-time European champion.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Javelin Throw Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to analyze the throwing technique of a javelin thrower and provide feedback on how to improve.\\\",\\n\\\"function_name\\\": \\\"analyze_javelin_throw\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"The path to the video file of the javelin throw.\\\"\\n},\\n\\\"return\\\": \\\"Feedback on the user's javelin throw technique and suggestions on how to improve.\\\",\\n\\\"depend\\\": \\\"TensorFlow, OpenCV, and a pre-trained machine learning model for analyzing javelin throw technique.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired professional tennis player and avid tennis history enthusiast who idolized Arthur Ashe.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tennis Match Stats Aggregator Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the statistics of all matches played by a specified tennis player. It uses the ATP World Tour tennis data API.\\\",\\n\\\"function_name\\\": \\\"get_match_stats\\\",\\n\\\"input_args\\\": {\\n    \\\"player_name\\\": \\\"Name of the player\\\"\\n},\\n\\\"return\\\": \\\"A list of matches with their respective statistics\\\",\\n\\\"depend\\\": \\\"requests library, ATP World Tour tennis data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rival drone pilot offering similar aerial imagery services in the same geographic area", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Drone Flight Path Optimization Interface\\\",\\n  \\\"description\\\": \\\"This interface takes the starting point, ending point and the list of points of interest (latitude and longitude) that the drone needs to cover in between. It returns the optimized flight path which minimizes the total travel distance.\\\",\\n  \\\"function_name\\\": \\\"optimize_drone_flight_path\\\",\\n  \\\"input_args\\\": {\\n    \\\"start\\\": \\\"Tuple of the form (latitude, longitude) representing the starting point.\\\",\\n    \\\"end\\\": \\\"Tuple of the form (latitude, longitude) representing the ending point.\\\",\\n    \\\"points\\\": \\\"List of Tuples, each of the form (latitude, longitude) representing points of interest.\\\"\\n  },\\n  \\\"return\\\": \\\"List of Tuples of the form (latitude, longitude) representing the optimized flight path.\\\",\\n  \\\"depend\\\": \\\"This function depends on the geopy and random Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A beginner-level student learning Golang", "synthesized text": "\"{\\n\\\"name\\\": \\\"Go Code Formatter Interface\\\",\\n\\\"description\\\": \\\"This interface takes a string of Go code as input and returns a formatted version of the code using the gofmt tool from the Go programming language.\\\",\\n\\\"function_name\\\": \\\"format_go_code\\\",\\n\\\"input_args\\\": [\\\"code\\\"],\\n\\\"return\\\": \\\"A string of formatted Go code.\\\",\\n\\\"depend\\\": [\\\"gofmt tool (Go programming language)\\\", \\\"Python subprocess module\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a recruitment officer from southern Europe", "synthesized text": "\"{\\n\\\"name\\\": \\\"Candidate Skill Matching Interface\\\",\\n\\\"description\\\": \\\"An interface that matches a candidate's skills with the requirements of a job description. It uses the LinkedIn API to fetch the candidate's skills and an NLP model from HuggingFace to analyze the job description.\\\",\\n\\\"function_name\\\": \\\"match_skills\\\",\\n\\\"input_args\\\": {\\n    \\\"job_description\\\": \\\"A string that describes the job requirements.\\\",\\n    \\\"username\\\": \\\"The LinkedIn username of the candidate.\\\"\\n},\\n\\\"return\\\": \\\"A percentage that represents how well the candidate's skills match the job description.\\\",\\n\\\"depend\\\": \\\"LinkedIn API, HuggingFace NLP Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A shop owner who benefits from increased security measures and collaborates with the coordinator to organize crime prevention events", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenCV and a pre-trained deep learning model from OpenFace to implement a face recognition system. The user inputs the path to a video file, and the interface returns the video with recognized faces highlighted.\\\",\\n\\\"function_name\\\": \\\"recognize_faces_in_video\\\",\\n\\\"input_args\\\": [\\\"video_path\\\", \\\"face_recognizer\\\", \\\"face_predictor_path\\\"],\\n\\\"return\\\": \\\"Video playback with recognized faces highlighted.\\\",\\n\\\"depend\\\": [\\\"OpenCV library\\\", \\\"OpenFace library\\\", \\\"Trained face recognizer model\\\", \\\"Face predictor model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A naval intelligence officer gathering information on pirate networks and their operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pirate Network Analysis Interface\\\", \\n\\\"description\\\": \\\"This interface creates a NetworkX Graph object from a CSV file that contains pirate network data. Each row of the CSV file should represent a connection between two pirates.\\\", \\n\\\"function_name\\\": \\\"create_pirate_network_graph\\\", \\n\\\"input_args\\\": [\\\"csv_path\\\"], \\n\\\"return\\\": \\\"NetworkX Graph object representing the pirate network.\\\", \\n\\\"depend\\\": [\\\"networkx\\\", \\\"pandas\\\", \\\"csv file containing pirate network data\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A dynamic aquarium director competing for the same city budget allocation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aquarium Visitor Forecasting Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a time series model to predict future visitor numbers at the aquarium based on past visitor data.\\\",\\n\\\"function_name\\\": \\\"forecast_visitors\\\",\\n\\\"input_args\\\": \\\"path_to_csv - The path to a CSV file with past visitor numbers. The CSV file must have two columns: 'ds' for the date and 'y' for the visitor count.\\\",\\n\\\"return\\\": \\\"A dataframe with the predicted visitor numbers for the next 30 days, including the lower and upper bounds of the predictions.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"prophet\\\", \\\"Hugging Face\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A former lawyer turned senator who advocates for the rights of the disabled", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disability Rights Legislation Database Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches all legislation related to disability rights from a specific Congress session using the ProPublica Congress API.\\\",\\n\\\"function_name\\\": \\\"get_disability_rights_legislation\\\",\\n\\\"input_args\\\": {\\n    \\\"congress_number\\\": \\\"An integer representing the Congress number (e.g., 117 for the 117th Congress).\\\"\\n    },\\n\\\"return\\\": \\\"A list of bill slugs (identifiers) related to disability rights.\\\",\\n\\\"depend\\\": \\\"ProPublica Congress API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student studying music production with an interest in digital sampling of classic jazz tunes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Digital Music Sample Extraction Interface\\\",\\n  \\\"description\\\": \\\"This interface extracts a specific segment from an audio file and saves it as a new file. It is useful for music producers and students who want to sample specific parts of tunes.\\\",\\n  \\\"function_name\\\": \\\"extract_sample\\\",\\n  \\\"input_args\\\": {\\n    \\\"path_to_audio_file\\\": \\\"The path to the original audio file.\\\", \\n    \\\"start_time\\\": \\\"The start time of the segment to be extracted, in seconds.\\\", \\n    \\\"end_time\\\": \\\"The end time of the segment to be extracted, in seconds.\\\", \\n    \\\"output_file\\\": \\\"The path to save the extracted audio segment.\\\"\\n  },\\n  \\\"return\\\": \\\"No return value. The extracted audio segment is saved as a new file in the specified path.\\\",\\n  \\\"depend\\\": \\\"Librosa, SoundFile\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior developer experienced with using MediaRecorder in JavaScript", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Recording Interface\\\",\\n\\\"description\\\": \\\"This interface records audio for a specified duration and saves it in a .wav file at the specified path.\\\",\\n\\\"function_name\\\": \\\"record_audio\\\",\\n\\\"input_args\\\": {\\n  \\\"duration\\\": \\\"The duration of the audio recording in seconds.\\\",\\n  \\\"output_path\\\": \\\"The path where the recorded audio file will be saved.\\\"\\n},\\n\\\"return\\\": \\\"No return value. The function saves the recorded audio to a local file.\\\",\\n\\\"depend\\\": \\\"This function depends on the 'sounddevice' and 'scipy' Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An industrial plant manager overseeing the installation of a large-scale pumping system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pump Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes the performance of a pump based on the data from the pump like flow rate, head, and efficiency. It uses the SciPy and numpy libraries to fit a curve to the pump's performance data and returns the pump curve parameters and the fitted performance curve.\\\",\\n\\\"function_name\\\": \\\"pump_performance_curve\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the csv file containing the pump performance data. The file should contain three columns, with the first column being the flow rate, the second column being the head, and the third column being the efficiency.\\\"},\\n\\\"return\\\": {\\n    \\\"H0\\\": \\\"The head at zero flow rate\\\",\\n    \\\"Q_opt\\\": \\\"The flow rate at the maximum head\\\",\\n    \\\"n\\\": \\\"The curve fitting parameter\\\",\\n    \\\"fitted_head\\\": \\\"The head values of the fitted performance curve\\\",\\n    \\\"actual_head\\\": \\\"The actual head values from the data\\\",\\n    \\\"flow_rate\\\": \\\"The flow rate values from the data\\\",\\n    \\\"efficiency\\\": \\\"The efficiency values from the data\\\"\\n},\\n\\\"depend\\\": \\\"Python libraries: SciPy, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graphic designer with absolutely no background in industrial machinery or powder coatings.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coating Material Properties Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Material Project's API to get information about different coating materials. The user provides the name of a material, and the interface returns key properties of that material.\\\",\\n\\\"function_name\\\": \\\"get_material_properties\\\",\\n\\\"input_args\\\": {\\\"material_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"density\\\": \\\"float\\\", \\\"energy\\\": \\\"float\\\", \\\"energy_per_atom\\\": \\\"float\\\", \\\"volume\\\": \\\"float\\\", \\\"formation_energy_per_atom\\\": \\\"float\\\", \\\"nsites\\\": \\\"int\\\", \\\"unit_cell_volume\\\": \\\"float\\\"},\\n\\\"depend\\\": \\\"requests library, Material Project's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a vocal secular humanist and active member of a secular society.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Secular Society Event Organizer Interface\\\",\\n  \\\"description\\\": \\\"Interface to create new events for a secular society on Meetup.\\\",\\n  \\\"function_name\\\": \\\"create_meetup_event\\\",\\n  \\\"input_args\\\": {\\n    \\\"title\\\": \\\"string\\\",\\n    \\\"description\\\": \\\"string\\\",\\n    \\\"datetime\\\": \\\"string in ISO 8601 format\\\",\\n    \\\"duration\\\": \\\"integer (duration in hours)\\\",\\n    \\\"location\\\": \\\"string\\\"\\n  },\\n  \\\"return\\\": \\\"string (success or error message)\\\",\\n  \\\"depend\\\": \\\"Meetup API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Nicholas Ma's classmate from Harvard University", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Harvard Classmate Information Interface\\\",\\n  \\\"description\\\": \\\"Returns a list of people who studied with Nicholas Ma at Harvard University in the same year.\\\",\\n  \\\"function_name\\\": \\\"get_harvard_classmates\\\",\\n  \\\"input_args\\\": \\\"year_of_graduation\\\",\\n  \\\"return\\\": \\\"List of classmates' names\\\",\\n  \\\"depend\\\": \\\"LinkedIn API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local government official struggling to balance public services and tax cuts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Budget Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface optimizes the allocation of public services to maximize public satisfaction under a given budget constraint. The user needs to provide the budget limit, the cost of each service, and the benefit (in terms of public satisfaction) of each service.\\\",\\n\\\"function_name\\\": \\\"budget_optimizer\\\",\\n\\\"input_args\\\": {\\n    \\\"budget_limit\\\": \\\"The total available budget for public services\\\",\\n    \\\"service_costs\\\": \\\"A list of costs for each public service\\\",\\n    \\\"service_benefits\\\": \\\"A list of benefits for each public service\\\"\\n},\\n\\\"return\\\": \\\"A list of optimal allocations for each service.\\\",\\n\\\"depend\\\": \\\"SciPy's linear programming function linprog\\\"\\n}\"", "description": "tool development"}
{"input persona": "一名对滑雪完全不了解的平面设计师", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ski Resort Recommendation Interface\\\",\\n\\\"description\\\": \\\"\\u8be5\\u63a5\\u53e3\\u63a5\\u53d7\\u7528\\u6237\\u7684\\u4f4d\\u7f6e\\u548c\\u6ed1\\u96ea\\u6c34\\u5e73\\u4f5c\\u4e3a\\u8f93\\u5165\\uff0c\\u5e76\\u8fd4\\u56de\\u63a8\\u8350\\u7684\\u6ed1\\u96ea\\u5ea6\\u5047\\u6751\\u53ca\\u5176\\u8be6\\u7ec6\\u4fe1\\u606f\\u3002\\\",\\n\\\"function_name\\\": \\\"get_ski_resort_recommendations\\\",\\n\\\"input_args\\\": {\\n\\\"location\\\": \\\"\\u7528\\u6237\\u7684\\u4f4d\\u7f6e\\uff0c\\u53ef\\u4ee5\\u662f\\u57ce\\u5e02\\u540d\\u6216\\u7ecf\\u7eac\\u5ea6\\\",\\n\\\"ski_level\\\": \\\"\\u7528\\u6237\\u7684\\u6ed1\\u96ea\\u6c34\\u5e73\\uff0c\\u53ef\\u4ee5\\u662f\\u521d\\u7ea7\\u3001\\u4e2d\\u7ea7\\u6216\\u9ad8\\u7ea7\\\"\\n},\\n\\\"return\\\": \\\"\\u8fd4\\u56de\\u4e00\\u4e2a\\u5305\\u542b\\u63a8\\u8350\\u7684\\u6ed1\\u96ea\\u5ea6\\u5047\\u6751\\u53ca\\u5176\\u8be6\\u7ec6\\u4fe1\\u606f\\u7684\\u5217\\u8868\\\",\\n\\\"depend\\\": \\\"\\u8be5\\u51fd\\u6570\\u5229\\u7528\\u4e86 Ski Resort Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a lifelong successful entrepreneur who sold several companies and retired early.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow to predict the next trading day's stock price. The user inputs a stock symbol, and the interface returns the predicted price.\\\",\\n\\\"function_name\\\": \\\"predict_next_day_stock_price\\\",\\n\\\"input_args\\\": [\\\"stock_symbol\\\"],\\n\\\"return\\\": \\\"Predicted price for the next trading day\\\",\\n\\\"depend\\\": \\\"TensorFlow, pandas_datareader, sklearn, Yahoo Finance API, pre-trained TensorFlow model (trained_model.h5)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a senior politician who had participated in the 1986 North Hertfordshire District Council election", "synthesized text": "\"{\\n\\\"name\\\": \\\"Election Result Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes election data and provides results for a specified candidate, including total votes, vote percentage, and whether they won or lost.\\\",\\n\\\"function_name\\\": \\\"analyze_election_results\\\",\\n\\\"input_args\\\": [\\\"candidate_name\\\", \\\"path_to_file\\\"],\\n\\\"return\\\": \\\"A dictionary containing the candidate's total votes, their vote percentage, and the election result (won or lost).\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "a shift manager in a large bookstore", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Inventory Update Interface\\\",\\n\\\"description\\\": \\\"This interface updates the quantities of books in a bookstore's inventory. It takes the path to a CSV file with the inventory data and a dictionary with book title and quantity updates, and updates the quantities in the CSV file.\\\",\\n\\\"function_name\\\": \\\"update_book_inventory\\\",\\n\\\"input_args\\\": {\\\"csv_file_path\\\": \\\"The path to the CSV file with the inventory data.\\\", \\\"book_updates\\\": \\\"A dictionary with book title and quantity updates.\\\"},\\n\\\"return\\\": \\\"A pandas DataFrame with the updated inventory.\\\",\\n\\\"depend\\\": \\\"Python Library: pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports betting company that relies on the analyst's models to optimize their odds", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Odds Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from sklearn for regression analysis to predict the odds for sports events based on historical data.\\\",\\n\\\"function_name\\\": \\\"predict_future_odds\\\",\\n\\\"input_args\\\": \\\"csv_file_path\\\",\\n\\\"return\\\": \\\"Predicted future odds\\\",\\n\\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A client-focused professional who understands the benefits of integrating .NET technologies for the project's success", "synthesized text": "\"{\\n\\\"name\\\": \\\".NET Assembly Information Fetching Interface\\\",\\n\\\"description\\\": \\\"This interface fetches metadata of .NET assemblies using the System.Reflection namespace from .NET Framework. Users input the path to the .NET assembly, and the interface returns the assembly's information including its name, version, culture, and public key token.\\\",\\n\\\"function_name\\\": \\\"get_assembly_info\\\",\\n\\\"input_args\\\": [\\\"path_to_assembly\\\"],\\n\\\"return\\\": \\\"Dictionary with assembly's information\\\",\\n\\\"depend\\\": [\\\"PythonNET\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A teacher who incorporates personal finance lessons into their curriculum and shares teaching strategies with the parent", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Market Data Interface\\\",\\n\\\"description\\\": \\\"This interface returns the latest closing price and volume of a stock. Users only need to input a stock symbol.\\\",\\n\\\"function_name\\\": \\\"get_stock_data\\\",\\n\\\"input_args\\\": \\\"symbol\\\",\\n\\\"return\\\": \\\"{date: 'latest date', closing_price: 'latest closing price', volume: 'latest volume'}\\\",\\n\\\"depend\\\": \\\"Alpha Vantage API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a die-hard fan of Les Misérables, the musical, and Victor Hugo, the French novelist.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Identification and Description Interface\\\",\\n\\\"description\\\": \\\"This interface identifies characters from Les Mis\\u00e9rables mentioned in a given text and generates a brief description of each character.\\\",\\n\\\"function_name\\\": \\\"identify_and_describe_characters\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"string\\\"\\n},\\n\\\"return\\\": \\\"Dictionary. Keys are character names and values are character descriptions.\\\",\\n\\\"depend\\\": \\\"HuggingFace's Transformers library for Named Entity Recognition, and GPT-3 for text generation.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A foreign affairs minister advocating for greater state sovereignty and minimal international intervention", "synthesized text": "\"{\\n\\\"name\\\": \\\"International Organization Membership Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of international organizations that a given country is a member of using APIs from the United Nations or other international organization databases.\\\",\\n\\\"function_name\\\": \\\"get_country_organization_membership\\\",\\n\\\"input_args\\\": {\\n    \\\"country\\\": \\\"The name of the country to analyze.\\\"\\n},\\n\\\"return\\\": \\\"A list of names of international organizations that the country is a member of.\\\",\\n\\\"depend\\\": \\\"requests library, International Government Organization API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a potential descendant of John Tavener Martin", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Ancestor Descendant Verification Interface\\\",\\n  \\\"description\\\": \\\"This interface enables the user to verify if they are a descendant of a specific ancestor. It retrieves information from the FamilySearch API, a genealogy website, to cross-check lineage\\\",\\n  \\\"function_name\\\": \\\"verify_ancestor_descendant_relation\\\",\\n  \\\"input_args\\\": {\\n    \\\"ancestor_name\\\": \\\"The name of the ancestor to verify lineage from. Must be a string.\\\",\\n    \\\"potential_descendant_name\\\": \\\"The name of the potential descendant. Must be a string.\\\"\\n  },\\n  \\\"return\\\": \\\"Returns a boolean value. True if the user is a descendant of the ancestor, False otherwise.\\\",\\n  \\\"depend\\\": \\\"This function relies on the FamilySearch Web API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical company seeking innovative and informative visualizations for their products", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Interaction Visualization Interface\\\", \\n\\\"description\\\": \\\"This interface takes the name of a drug as input and returns a graph visualization showing all the interactions of the drug with others.\\\", \\n\\\"function_name\\\": \\\"visualize_drug_interactions\\\", \\n\\\"input_args\\\": [\\\"drug_name\\\"], \\n\\\"return\\\": \\\"A graph visualization\\\", \\n\\\"depend\\\": {\\\"libraries\\\": [\\\"requests\\\", \\\"networkx\\\", \\\"matplotlib.pyplot\\\"], \\\"Web APIs\\\": [\\\"RxNorm Drug Interactions API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A parent with young children who wants to simplify their living space for easier organization and maintenance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Organization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a deep learning model to recognize objects in an image, to help users in identifying and categorizing their items for easier home organization.\\\",\\n\\\"function_name\\\": \\\"identify_objects_in_image\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"List of recognized objects in the image\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Google's openimages_v4 model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A citizen lobbying for stronger protection of minority rights in Bosnia and Herzegovina", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legislation Search Interface\\\",\\n\\\"description\\\": \\\"Interface to search for specific legislation related to a certain country and topic.\\\",\\n\\\"function_name\\\": \\\"get_legislation\\\",\\n\\\"input_args\\\": \\n    {\\n        \\\"country\\\": \\\"The country to search legislation for\\\",\\n        \\\"topic\\\": \\\"The legal topic to search legislation for\\\"\\n    },\\n\\\"return\\\": \\\"List of relevant legislation titles\\\",\\n\\\"depend\\\": \\\"requests and openlegaldata.io API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful binary options trader who provides a real-world perspective to financial laws", "synthesized text": "\"{\\n\\\"name\\\": \\\"Option Price Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the price of a binary option using the Black-Scholes model.\\\",\\n\\\"function_name\\\": \\\"calculate_option_price\\\",\\n\\\"input_args\\\": [\\\"stock_price\\\", \\\"strike_price\\\", \\\"interest_rate\\\", \\\"time_to_expiry\\\", \\\"volatility\\\"],\\n\\\"return\\\": \\\"Predicted option price\\\",\\n\\\"depend\\\": [\\\"Python's math library\\\", \\\"Scipy's stats library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A university research professor exploring network security issues in 5G", "synthesized text": "\"{\\n  \\\"name\\\": \\\"IP Address Geolocation Interface\\\",\\n  \\\"description\\\": \\\"This interface provides geolocation information for a given IP address, including country, city, ISP, latitude, and longitude.\\\",\\n  \\\"function_name\\\": \\\"get_ip_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"ip_address\\\": \\\"The IP address to get information about.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"data\\\": \\\"A dictionary containing information about the IP address, including country, city, ISP, latitude, and longitude.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"json\\\"],\\n    \\\"web_APIs\\\": [\\\"IPGeolocation API\\\"],\\n    \\\"machine_learning_models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "An orthodontist who has worked in a neighbouring town for many years and knows Dr. Steven Cook professionally.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Appointment Scheduling Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google Calendar API to schedule patient appointments. Users only need to input the patient's name, available time slot, and the duration of the appointment, and our interface will return a confirmation of the appointment.\\\",\\n\\\"function_name\\\": \\\"schedule_appointment\\\",\\n\\\"input_args\\\": {\\n    \\\"patient_name\\\": \\\"Name of the patient for whom the appointment is being booked\\\",\\n    \\\"available_time_slot\\\": \\\"Time slot when Dr. Steven Cook is available. The time format is in ISO 8601 format (YYYY-MM-DDTHH:MM:SS)\\\",\\n    \\\"duration\\\": \\\"Duration of the appointment in hours\\\"\\n},\\n\\\"return\\\": \\\"A confirmation message with the Google Calendar event link for the appointment\\\",\\n\\\"depend\\\": \\\"Google Calendar API, datetime, google-auth-oauthlib, google-api-python-client\\\"\\n}\"", "description": "tool development"}
{"input persona": "A film scholar who provides insights and suggestions on silent films to enhance the pianist's compositions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Silent Film Score Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to a silent film file as input and returns a list of piano compositions that would enhance the film based on its themes.\\\",\\n\\\"function_name\\\": \\\"get_score_suggestions\\\",\\n\\\"input_args\\\": {\\\"path_to_film\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"suggested_compositions\\\": \\\"list\\\"},\\n\\\"depend\\\": {\\\"tensorflow\\\", \\\"cv2\\\", \\\"numpy\\\", \\\"a pre-trained model\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A lobbyist representing a major casino corporation who opposes any regulations that could restrict the gambling industry's operations and profits.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Regulations Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface scrapes proposed regulations from a given website and predicts their potential impact on the gambling industry using a pre-trained BERT model.\\\",\\n\\\"function_name\\\": \\\"analyze_regulations\\\",\\n\\\"input_args\\\": {\\n    \\\"url\\\": \\\"The URL of a webpage that lists proposed regulations.\\\"\\n    },\\n\\\"return\\\": \\\"A list of tuples, with each tuple containing the text of a proposed regulation and a prediction of its potential impact on the gambling industry.\\\",\\n\\\"depend\\\": \\\"BeautifulSoup, requests, torch, transformers (BERT)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A senior professor known for their expertise in survey design and sampling techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Survey Sample Size Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the necessary sample size for a survey, given the total population size, the desired margin of error, the desired confidence level, and the expected response rate.\\\",\\n\\\"function_name\\\": \\\"calculate_sample_size\\\",\\n\\\"input_args\\\": [\\\"population_size\\\", \\\"margin_error\\\", \\\"confidence_level\\\", \\\"response_rate\\\"],\\n\\\"return\\\": \\\"required sample size\\\",\\n\\\"depend\\\": [\\\"math\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A videographer who captures and documents the process of preserving and exhibiting artwork", "synthesized text": "\"{\\n\\\"name\\\": \\\"Video Metadata Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to extract metadata from a video file, including its duration, frames per second, and resolution.\\\",\\n\\\"function_name\\\": \\\"get_video_metadata\\\",\\n\\\"input_args\\\": {\\\"video_file_path\\\": \\\"The path to the video file.\\\"},\\n\\\"return\\\": {\\\"duration\\\": \\\"The duration of the video in seconds.\\\", \\\"fps\\\": \\\"The frames per second of the video.\\\", \\\"resolution\\\": \\\"The resolution [width, height] of the video.\\\"},\\n\\\"depend\\\": {\\\"python library\\\": [\\\"moviepy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A racehorse trainer who is renowned for training multiple Kentucky Derby winners", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Racehorse Health Analysis Interface\\\",\\n    \\\"description\\\": \\\"This interface uses a pre-trained tensorflow model to analyze a racehorse's health based on heart rate, speed, exercise routine, etc. It returns an analysis of the horse's health.\\\",\\n    \\\"function_name\\\": \\\"health_analysis\\\",\\n    \\\"input_args\\\": {\\n        \\\"model_path\\\": \\\"Path to the saved tensorflow model\\\",\\n        \\\"horse_data\\\": \\\"A list of parameters related to the horse's health\\\"\\n    },\\n    \\\"return\\\": \\\"A string indicating the health status of the horse.\\\",\\n    \\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"pandas\\\"], \\\"machine learning models\\\": [\\\"a pre-trained tensorflow model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A podcast host who discusses the greatest running backs in NFL history, including Eric Dickerson", "synthesized text": "\"{\\n\\\"name\\\": \\\"NFL Player Stats Interface\\\",\\n\\\"description\\\": \\\"Fetch comprehensive statistics about an NFL player's career\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": {\\\"player_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"player_stats\\\": \\\"json\\\"},\\n\\\"depend\\\": {\\\"Web APIs\\\": \\\"NFL public API\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A software development hobbyist who has recently started using RAPIDS and loves to simplify technical concepts for beginners.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Dataframe Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts a CSV file into a cuDF DataFrame, leveraging GPU computing for high-speed data processing.\\\",\\n\\\"function_name\\\": \\\"csv_to_cudf\\\",\\n\\\"input_args\\\": \\\"path_to_csv\\\",\\n\\\"return\\\": \\\"A cuDF DataFrame corresponding to the input CSV file.\\\",\\n\\\"depend\\\": \\\"RAPIDS cuDF library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a person who is not interested in the media industry and dislike radio broadcasters", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Audio to Text Transcription Interface\\\",\\n    \\\"description\\\":\\\"This interface uses the speech recognition library to transcribe the spoken words in an audio file to text. It's especially useful for users who prefer reading text over listening to audio.\\\",\\n    \\\"function_name\\\":\\\"transcribe_audio_to_text\\\",\\n    \\\"input_args\\\": {\\\"audio_file_path\\\": \\\"String - path to the audio file\\\"},\\n    \\\"return\\\": \\\"String - the transcribed text from the audio\\\",\\n    \\\"depend\\\": \\\"Python library: SpeechRecognition\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bassist in a classic rock cover band looking for the perfect guitar rig", "synthesized text": "\"{\\n\\\"name\\\": \\\"Guitar Rig Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in user's preferences and returns the best matching guitar rig.\\\",\\n\\\"function_name\\\": \\\"recommend_guitar_rig\\\",\\n\\\"input_args\\\": {\\\"preference\\\": \\\"A string that describes the user's preference.\\\"},\\n\\\"return\\\": \\\"The name of the recommended guitar rig.\\\",\\n\\\"depend\\\": \\\"Scikit-learn's TfidfVectorizer and cosine_similarity for calculating similarity between user's preference and guitar rig descriptions.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A loom operator skillful in weaving intricate patterns and textures into fabric", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fabric Pattern Generation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Generative Adversarial Networks (GANs) to generate images of intricate fabric patterns.\\\",\\n\\\"function_name\\\": \\\"generate_pattern\\\",\\n\\\"input_args\\\": \\\"pattern_type - A string that specifies the type of pattern to generate.\\\",\\n\\\"return\\\": \\\"A numpy array that represents the generated image of the fabric pattern.\\\",\\n\\\"depend\\\": \\\"TensorFlow\\\"\\n}\"", "description": "tool development"}
{"input persona": "An employee of the store responsible for managing social media influencers and coordinating merchandise giveaways", "synthesized text": "\"{\\n\\\"name\\\": \\\"Influencer and Giveaway Management Interface\\\",\\n\\\"description\\\": \\\"This interface fetches an Instagram influencer's stats and manages merchandise giveaways among their followers.\\\",\\n\\\"function_name\\\": \\\"manage_giveaway\\\",\\n\\\"input_args\\\": [\\\"username\\\", \\\"num_items\\\", \\\"access_token\\\"],\\n\\\"return\\\": \\\"A dictionary with the influencer's stats and the usernames of the giveaway winners.\\\",\\n\\\"depend\\\": \\\"Instagram Graph API, Python's requests and random libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "An AI researcher who has limited knowledge in Docker and Gmail", "synthesized text": "\"{\\n\\\"name\\\": \\\"Docker Image Status Notification Interface\\\",\\n\\\"description\\\": \\\"Fetches the status of a Docker image and sends an email notification if the image encounters an error.\\\",\\n\\\"function_name\\\": \\\"docker_image_status_notifier\\\",\\n\\\"input_args\\\": [\\\"gmail_user\\\", \\\"gmail_pwd\\\", \\\"docker_image_id\\\", \\\"recipient\\\"],\\n\\\"return\\\": \\\"No return value. Sends an email to the recipient if the Docker image encounters an error.\\\",\\n\\\"depend\\\": \\\"Python libraries: docker, smtplib, email.mime.multipart.MIMEMultipart, email.mime.text.MIMEText\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young couple expecting their first child and eager to create a comprehensive family tree", "synthesized text": "\"{\\n\\\"name\\\": \\\"Family Tree Creation Interface\\\",\\n\\\"description\\\": \\\"An interface that receives a dictionary representing family relationships and returns a Graphviz object that visualizes the family tree.\\\",\\n\\\"function_name\\\": \\\"create_family_tree\\\",\\n\\\"input_args\\\": \\\"family_dict\\\",\\n\\\"return\\\": \\\"Graphviz object representing the family tree\\\",\\n\\\"depend\\\": \\\"Python's Graphviz library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An artist who assists in the aesthetic restoration, capturing the essence of the 1950s farming era", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vintage Photo Effect Interface\\\",\\n\\\"description\\\": \\\"This interface applies a vintage effect to a modern photo, making it look like it's from the 1950s farming era.\\\",\\n\\\"function_name\\\": \\\"vintage_photo_effect\\\",\\n\\\"input_args\\\": \\\"path_to_img - a string that represents the path to the image file\\\",\\n\\\"return\\\": \\\"A numpy array representing the vintage styled image.\\\",\\n\\\"depend\\\": \\\"This function depends on the tensorflow and tensorflow_hub Python libraries, and a TensorFlow Hub pre-trained model.\\\"\\n}\"", "description": "tool development"}
{"input persona": "an anxious mom who often shops at Wal-Mart with her children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Shopping List Reminder Interface\\\",\\n\\\"description\\\": \\\"This interface checks the availability of a list of items at a specific Wal-Mart store and informs the user of items currently out of stock.\\\",\\n\\\"function_name\\\": \\\"check_item_availability\\\",\\n\\\"input_args\\\": {\\n    \\\"store_id\\\": \\\"The ID of the Wal-Mart store the user usually shops at.\\\",\\n    \\\"item_list\\\": \\\"A list of items the user usually buys.\\\"\\n    },\\n\\\"return\\\": \\\"A list of items currently out of stock.\\\",\\n\\\"depend\\\": \\\"Wal-Mart Open API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A PhD in Computer Science diving into research on optimizing blockchain algorithms", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to simulate a blockchain network and calculate the average block propagation time.\\\",\\n\\\"function_name\\\": \\\"simulate_blockchain\\\",\\n\\\"input_args\\\": [\\\"num_nodes\\\", \\\"transaction_rate\\\", \\\"block_generation_rate\\\"],\\n\\\"return\\\": \\\"Average block propagation time in the network.\\\",\\n\\\"depend\\\": [\\\"Simpy Python Library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A self-proclaimed psychic who claims their abilities are misunderstood by science", "synthesized text": "\"{\\n\\\"name\\\": \\\"Psychic Hotspot Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface generates a heatmap visualization of psychic energy hotspots based on a list of coordinates provided by the user.\\\",\\n\\\"function_name\\\": \\\"generate_heatmap\\\",\\n\\\"input_args\\\": \\\"a list of tuples, where each tuple represents a 2D coordinate (x, y)\\\",\\n\\\"return\\\": \\\"a heatmap visualization\\\",\\n\\\"depend\\\": [\\\"matplotlib\\\", \\\"SciPy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A decision-maker who evaluates and approves risk mitigation plans based on the project's strategic goals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Risk Mitigation Plan Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface evaluates the quality of a risk mitigation plan by scoring it. The input is the text of the risk mitigation plan, and the output is a score indicating the quality of the plan.\\\",\\n\\\"function_name\\\": \\\"evaluate_risk_mitigation_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"plan_text\\\": \\\"The text of the risk mitigation plan to be evaluated\\\"\\n},\\n\\\"return\\\": \\\"A score indicating the quality of the risk mitigation plan\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformer pipeline and a fine-tuned text classification model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced diplomat who has been trained to recognize and deflect attempts at intelligence gathering", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lie Detector Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to predict whether a given statement is a lie or not. It is useful for diplomats who need to detect attempts at intelligence gathering.\\\",\\n\\\"function_name\\\": \\\"detect_lie\\\",\\n\\\"input_args\\\": \\\"statement - A text statement that needs to be evaluated for truthfulness.\\\",\\n\\\"return\\\": \\\"A string representing the likelihood of the statement being a lie: 'false', 'half-true', 'mostly-true', 'true', 'barely-true', 'pants-fire'.\\\",\\n\\\"depend\\\": \\\"This function depends on the Python library 'transformers' and 'torch', and the pre-trained model from Hugging Face 'verloop/Hinglish-LIAR'.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A shooting guard from another team known for their lockdown defense", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Stephen Curry\\\",\\n    \\\"team\\\": \\\"Golden State Warriors\\\",\\n    \\\"games_played\\\": 80,\\n    \\\"minutes_per_game\\\": \\\"34.2\\\",\\n    \\\"field_goals_attempted_per_game\\\": \\\"20.2\\\",\\n    \\\"field_goals_made_per_game\\\": \\\"9.2\\\",\\n    \\\"field_goal_percentage\\\": \\\"45.4\\\",\\n    \\\"free_throw_percentage\\\": \\\"91.6\\\",\\n    \\\"three_point_attempted_per_game\\\": \\\"11.2\\\",\\n    \\\"three_point_made_per_game\\\": \\\"5.1\\\",\\n    \\\"three_point_percentage\\\": \\\"45.4\\\",\\n    \\\"points_per_game\\\": \\\"27.3\\\",\\n    \\\"offensive_rebounds_per_game\\\": \\\"0.7\\\",\\n    \\\"defensive_rebounds_per_game\\\": \\\"4.7\\\",\\n    \\\"rebounds_per_game\\\": \\\"5.3\\\",\\n    \\\"assists_per_game\\\": \\\"5.2\\\",\\n    \\\"steals_per_game\\\": \\\"1.8\\\",\\n    \\\"blocks_per_game\\\": \\\"0.2\\\",\\n    \\\"turnovers_per_game\\\": \\\"3.1\\\",\\n    \\\"player_efficiency_rating\\\": \\\"28.2\\\"\\n}\"", "description": "tool development"}
{"input persona": "A naturopathic doctor who incorporates EMF protection into their holistic treatment plans", "synthesized text": "\"{\\n \\\"name\\\": \\\"EMF Level Detection Interface\\\",\\n \\\"description\\\": \\\"An interface to fetch EMF (Electromagnetic Field) level details for a given location. Useful for naturopathic doctors who incorporate EMF protection into their holistic treatment plans.\\\",\\n \\\"function_name\\\": \\\"get_emf_levels\\\",\\n \\\"input_args\\\": \\\"location - a string representing the location\\\",\\n \\\"return\\\": \\\"EMF level for the given location\\\",\\n \\\"depend\\\": \\\"requests library, EMF Data Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a young aspiring Mexican scientist deeply inspired by the legacy of Ruy Pérez Tamayo.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scientific Paper Fetching Interface\\\",\\n\\\"description\\\": \\\"Fetch the latest scientific papers based on input keywords\\\",\\n\\\"function_name\\\": \\\"fetch_latest_scientific_papers\\\",\\n\\\"input_args\\\": [\\\"keywords\\\", \\\"results_limit\\\"],\\n\\\"return\\\": \\\"List of tuples where each tuple contains the title and DOI of a paper\\\",\\n\\\"depend\\\": \\\"Europe PubMed Central APIs\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner who wants to integrate a Telegram bot for customer support", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Telegram Bot Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to set up a command for a Telegram bot.\\\",\\n\\\"function_name\\\": \\\"set_bot_command\\\",\\n\\\"input_args\\\": {\\n    \\\"bot_token\\\": \\\"The token of the Telegram bot, provided by BotFather on Telegram.\\\",\\n    \\\"command\\\": \\\"The command that the bot should respond to.\\\",\\n    \\\"message\\\": \\\"The message that the bot should send when the command is triggered.\\\"\\n},\\n\\\"return\\\": \\\"The function does not return a value but starts the Telegram bot and keeps it running until the program is terminated, responding to the specified command with the specified message.\\\",\\n\\\"depend\\\": \\\"This interface relies on the python-telegram-bot library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow British documentary photographer and contemporary of Mik Critchlow, with a focus on industrial heritage and the working class.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that utilizes pre-trained models from TensorFlow Hub to analyze images, including object detection and scene classification. The user inputs the path to an image file, and the interface returns a list of objects detected in the image and a classification of the scene.\\\",\\n\\\"function_name\\\": \\\"analyze_image\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'objects' (a list of objects detected in the image) and 'scene' (a classification of the scene).\\\",\\n\\\"depend\\\": \\\"This function depends on the TensorFlow, TensorFlow Hub, and NumPy libraries, as well as pre-trained models from TensorFlow Hub for object detection (openimages_v4/ssd/mobilenet_v2) and scene classification (tf2-preview/inception_v3/classification).\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long-time fan of Final Fantasy VII who shares tips and tricks about the game's classic version on the PlayStation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Strategy Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates strategies for specific challenges in Final Fantasy VII using a large language model.\\\",\\n\\\"function_name\\\": \\\"generate_game_strategy\\\",\\n\\\"input_args\\\": \\\"game_challenge - a specific situation or challenge in Final Fantasy VII\\\",\\n\\\"return\\\": \\\"A suggested strategy for the inputted game challenge\\\",\\n\\\"depend\\\": \\\"Large Language Model\\\"\\n}\"", "description": "tool development"}
{"input persona": "a proud alumna of Government College for Women Shahrah-e-Liaquat", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alumni Donation Interface\\\",\\n\\\"description\\\": \\\"This interface allows alumni to donate to their alma mater by processing payments with their card details.\\\",\\n\\\"function_name\\\": \\\"process_donation\\\",\\n\\\"input_args\\\": [\\\"amount\\\", \\\"card_number\\\", \\\"card_exp_month\\\", \\\"card_exp_year\\\", \\\"card_cvc\\\"],\\n\\\"return\\\": \\\"Transaction ID or error message\\\",\\n\\\"depend\\\": [\\\"Stripe API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A patient with autoimmune diseases seeking guidance on how to incorporate the Mediterranean diet into their lifestyle", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mediterranean Diet Meal Plan Interface\\\",\\n\\\"description\\\": \\\"An interface that generates a weekly Mediterranean diet meal plan tailored to the user's caloric needs and dietary restrictions. The meal plan includes recipes and nutritional information for each meal.\\\",\\n\\\"function_name\\\": \\\"get_mediterranean_diet_plan\\\",\\n\\\"input_args\\\": {\\n    \\\"calories\\\": \\\"The target daily calorie intake.\\\",\\n    \\\"diet\\\": \\\"The user's dietary preferences (vegetarian, vegan, etc.).\\\",\\n    \\\"intolerances\\\": \\\"Any food intolerances or allergies the user has.\\\"\\n},\\n\\\"return\\\": \\\"A JSON object containing a weekly meal plan, with each day containing a list of meals. Each meal includes a recipe and nutritional information.\\\",\\n\\\"depend\\\": \\\"Spoonacular's Recipe - Food - Nutrition API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bank manager looking to improve their organization's credit scoring models", "synthesized text": "\"{\\n\\\"name\\\": \\\"Credit Scoring Model Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pretrained model to predict credit scores based on borrowers' financial and personal information. The input is a CSV file and the output is a DataFrame with the predicted credit scores.\\\",\\n\\\"function_name\\\": \\\"predict_credit_scores\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"DataFrame with predicted credit scores\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"transformers\\\", \\\"torch\\\", \\\"Hugging Face Model Hub\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A tech startup that develops software to optimize the utilization of smart materials in manufacturing", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Property Prediction Interface\\\",\\n\\\"description\\\": \\\"A high-level interface for predicting the properties of materials based on their features using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_property\\\",\\n\\\"input_args\\\": \\\"material_features - A list of features describing the material.\\\",\\n\\\"return\\\": \\\"The predicted property of the material.\\\",\\n\\\"depend\\\": \\\"scikit-learn, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer working in a startup utilizing crowdsourcing techniques for data annotation", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Crowdsourcing Job Posting Interface\\\",\\n  \\\"description\\\": \\\"An interface that makes it easy to post a new data annotation job on Mechanical Turk. Users only need to specify the task details, the number of tasks, and the payment per task.\\\",\\n  \\\"function_name\\\": \\\"post_annotation_job\\\",\\n  \\\"input_args\\\": {\\n    \\\"task\\\": \\\"A string representing the task details\\\",\\n    \\\"num_tasks\\\": \\\"An integer representing the number of tasks\\\",\\n    \\\"payment_per_task\\\": \\\"A float representing the payment per task\\\"\\n  },\\n  \\\"return\\\": \\\"A string representing the job ID for managing the task\\\",\\n  \\\"depend\\\": \\\"boto3, AWS Mechanical Turk API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A smoker who unintentionally starts fires due to careless disposal of cigarette butts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fire Risk Detection Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained EfficientNet model from TensorFlow Hub to detect fire risks in an image. It returns whether the image contains objects that present a fire risk.\\\",\\n\\\"function_name\\\": \\\"detect_fire_risk\\\",\\n\\\"input_args\\\": \\\"image_path: The path to the image file you want to analyze.\\\",\\n\\\"return\\\": \\\"Boolean: True if the image contains fire risks, False otherwise.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A junk food truck owner who capitalizes on consumers’ cravings for fast food", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Demand Forecasting Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the demand for a certain type of food based on historical data. It is designed for use by a food truck owner who wants to optimize their food preparation based on predicted demand.\\\",\\n\\\"function_name\\\": \\\"predict_demand\\\",\\n\\\"input_args\\\": [\\\"data_path\\\", \\\"food_item\\\", \\\"date\\\"],\\n\\\"return\\\": \\\"Estimated number of servings to prepare\\\",\\n\\\"depend\\\": \\\"pandas library, Scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a locally renowned acoustic guitar teacher residing in Ocean City", "synthesized text": "\"{\\n\\\"name\\\": \\\"Guitar Chord Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface to recognize guitar chords from an audio file using a pre-trained model from TensorFlow. The user only needs to input the path to the audio file, and the interface returns the recognized guitar chords.\\\",\\n\\\"function_name\\\": \\\"recognize_guitar_chords\\\",\\n\\\"input_args\\\": {\\\"audio_file_path\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"list of recognized guitar chords\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"numpy\\\", \\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"scipy\\\"], \\\"machine learning models\\\": [\\\"CREPE from TensorFlow Hub\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A supermarket owner who regularly hosts community meetings at his premises", "synthesized text": "\"{\\n\\\"name\\\": \\\"Event Scheduling Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to schedule events on Google Calendar by inputting the name, date, start time, end time, and description of the event.\\\",\\n\\\"function_name\\\": \\\"google_calendar_event\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"date\\\", \\\"start_time\\\", \\\"end_time\\\", \\\"description\\\"],\\n\\\"return\\\": \\\"URL to the created event on Google Calendar\\\",\\n\\\"depend\\\": [\\\"Google Calendar API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A pet owner who wants an easy and convenient way to keep track of their pets' medical history", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pet Medical History Interface\\\",\\n\\\"description\\\": \\\"An interface to manage and search a pet's medical history stored in a CSV file.\\\",\\n\\\"function_name\\\": [\\\"add_entry\\\", \\\"get_history\\\", \\\"search_entry\\\"],\\n\\\"input_args\\\": [\\\"pet_name\\\", \\\"date\\\", \\\"description\\\", \\\"file_path\\\"],\\n\\\"return\\\": \\\"For add_entry: None. For get_history and search_entry: Prints out the relevant entries from the medical history.\\\",\\n\\\"depend\\\": [\\\"csv\\\", \\\"datetime\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a single mother who was Anna Nicole Smith's biggest fan during her heydays", "synthesized text": "\"{\\n\\\"name\\\": \\\"Face Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface using a face recognition model from dlib to verify if the person in an image is Anna Nicole Smith.\\\",\\n\\\"function_name\\\": \\\"is_Anna_Nicole_Smith\\\",\\n\\\"input_args\\\": {\\\"anna_img_path\\\": \\\"Path to a known image of Anna Nicole Smith\\\", \\\"unknown_img_path\\\": \\\"Path to an image of an unknown person\\\", \\\"model_path\\\": \\\"Path to the dlib face recognition model\\\"},\\n\\\"return\\\": \\\"True if the person in the unknown image is likely to be Anna Nicole Smith, False otherwise.\\\",\\n\\\"depend\\\": {\\\"python library\\\": [\\\"dlib\\\", \\\"skimage\\\"], \\\"machine learning model\\\": [\\\"dlib face recognition model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A long-term employee of IRCICA (Research Centre for Islamic History, Art and Culture) who handles guests and organizes visits.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Visitor Schedule Optimization Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Google Calendar API to create an optimized schedule for upcoming visits at IRCICA. It takes a list of visit details and returns the IDs of the scheduled events.\\\",\\n  \\\"function_name\\\": \\\"optimize_schedule\\\",\\n  \\\"input_args\\\": {\\n    \\\"visits\\\": \\\"A list of dictionaries. Each dictionary represents a visit and contains details such as 'summary', 'location', 'description', 'start_time', 'end_time', 'attendees'. 'start_time' and 'end_time' should be datetime objects. 'attendees' is a list of email addresses.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of event IDs of the scheduled visits.\\\",\\n  \\\"depend\\\": \\\"googleapiclient.discovery, google.oauth2.service_account\\\"\\n}\"", "description": "tool development"}
{"input persona": "A devoutly religious scholar interested in the etymology and historical significance of divine names in Abrahamic religions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Divine Name Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a divine entity from Abrahamic religions as input, and returns the summarized etymology and historical significance of the name based on Wikipedia.\\\",\\n\\\"function_name\\\": \\\"analyze_divine_name\\\",\\n\\\"input_args\\\": \\\"name\\\",\\n\\\"return\\\": \\\"A summary text containing the etymology and historical significance of the divine name.\\\",\\n\\\"depend\\\": {\\n  \\\"python libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n  \\\"Web APIs\\\": [\\\"Wikipedia API\\\"],\\n  \\\"machine learning models\\\": [\\\"huggingface's transformer models\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A former gang member who benefited from Yablonsky's work", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sociogram Interface\\\", \\n\\\"description\\\": \\\"This interface uses the networkx Python library to create sociograms, which are visual representations of social networks. It is useful for visualizing and understanding the social dynamics within a group.\\\", \\n\\\"function_name\\\": \\\"create_sociogram\\\", \\n\\\"input_args\\\": \\\"edges: A list of tuples, where each tuple represents an edge in the network. Each edge is a pair of nodes where each node is a member of the group.\\\", \\n\\\"return\\\": \\\"A sociogram representing the social network of the group is displayed.\\\", \\n\\\"depend\\\": [\\\"networkx\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a lawyer in California who values the legal principle \"innocent until proven guilty.\"", "synthesized text": "\"{\\n \\\"name\\\": \\\"Legal Case Predictor Interface\\\",\\n \\\"description\\\": \\\"This interface uses a pre-trained BERT model to predict the outcome of a legal case based on the details provided.\\\",\\n \\\"function_name\\\": \\\"predict_case_outcome\\\",\\n \\\"input_args\\\": {\\\"case_text\\\": \\\"string\\\"},\\n \\\"return\\\": \\\"string (guilty or not guilty)\\\",\\n \\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"bert-base-uncased\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A respected scholar who challenges the poet's innovative approach and offers insightful analysis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text Complexity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a text (poem) as input and returns the Flesch Reading Ease score, Flesch-Kincaid Grade, and Gunning Fog Index which are standard metrics for measuring text complexity.\\\",\\n\\\"function_name\\\": \\\"analyze_text_complexity\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"A dictionary with keys being the name of the metric and values being the score.\\\",\\n\\\"depend\\\": \\\"Python textstat library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Russian speech therapist who works with children with developmental delays", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Recognition and Text Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes an audio file as input and returns a transcription of the speech and simple text analysis like word count and frequency of words.\\\",\\n\\\"function_name\\\": \\\"process_speech\\\",\\n\\\"input_args\\\": \\\"audio_file_path\\\",\\n\\\"return\\\": \\\"A list of tuples, where each tuple contains a unique word from the transcript and its corresponding frequency.\\\",\\n\\\"depend\\\": \\\"Google Speech-to-Text API, NLTK\\\"\\n}\"", "description": "tool development"}
{"input persona": "Un escritor aficionado a la jerga y al lenguaje callejero.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Jerga a Est\\u00e1ndar\\\",\\n\\\"description\\\": \\\"Interfaz que traduce el texto en jerga o lenguaje callejero a un lenguaje est\\u00e1ndar utilizando la API de DeepL.\\\",\\n\\\"function_name\\\": \\\"translate_slang_to_standard\\\",\\n\\\"input_args\\\": \\\"slang_text\\\",\\n\\\"return\\\": \\\"Texto en lenguaje est\\u00e1ndar\\\",\\n\\\"depend\\\": \\\"DeepL Translate API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a middle-aged person living in rural Canada looking for natural health treatments", "synthesized text": "\"{\\n\\\"name\\\": \\\"Natural Health Treatment Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for natural health treatments for a specified condition using OpenFDA API\\\",\\n\\\"function_name\\\": \\\"get_natural_treatments\\\",\\n\\\"input_args\\\": {\\n    \\\"condition\\\": \\\"The health condition to treat\\\"\\n},\\n\\\"return\\\": \\\"A list of natural health treatments for the specified condition\\\",\\n\\\"depend\\\": \\\"requests library, OpenFDA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mathematician who helps develop math worksheets and activities for students", "synthesized text": "\"{\\n\\\"name\\\": \\\"Math Problem Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates algebraic problems and their solutions. The user inputs the number of problems they want and the highest degree of the polynomial, and the module returns a list of problems and their corresponding solutions.\\\",\\n\\\"function_name\\\": \\\"generate_math_problems\\\",\\n\\\"input_args\\\": {\\n    \\\"num_problems\\\": \\\"Number of problems to generate\\\",\\n    \\\"highest_degree\\\": \\\"Highest degree of the polynomial in the problems\\\"\\n},\\n\\\"return\\\": {\\n    \\\"problems\\\": \\\"List of problems in string format\\\",\\n    \\\"solutions\\\": \\\"List of solutions to the problems\\\"\\n},\\n\\\"depend\\\": \\\"Python libraries: sympy, random\\\"\\n}\"", "description": "tool development"}
{"input persona": "an avid reader and fan of Norman Maclean’s works, particularly \"A River Runs Through It\"", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes the title and author of a book and returns a list of recommended books with similar themes or writing styles.\\\",\\n\\\"function_name\\\": \\\"get_book_recommendations\\\",\\n\\\"input_args\\\": [\\\"title\\\", \\\"author\\\"],\\n\\\"return\\\": \\\"A list of recommended book titles.\\\",\\n\\\"depend\\\": \\\"Hugging Face's 'bert-base-nli-mean-tokens' model for sentence embeddings, sklearn library for calculating cosine similarity\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced project manager with knowledge of the latest trends in industrial services", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Risk Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses Monte Carlo simulations to analyze project risks and predict the possible project completion timelines.\\\",\\n\\\"function_name\\\": \\\"simulate_project_completion\\\",\\n\\\"input_args\\\": [\\\"project_tasks\\\"],\\n\\\"return\\\": \\\"A list with the 5th, 50th (median), and 95th percentile of the project completion time, representing a 90% confidence interval.\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"pymc3\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A seasoned software engineer specializing in front-end development, providing guidance on improving HTML email templates", "synthesized text": "\"{\\n\\\"name\\\": \\\"HTML Email Template Validation Interface\\\",\\n\\\"description\\\": \\\"An interface to validate and transform HTML email content into an email-ready format by converting CSS into inline styles.\\\",\\n\\\"function_name\\\": \\\"validate_and_improve_html_email\\\",\\n\\\"input_args\\\": [\\\"html_content\\\"],\\n\\\"return\\\": \\\"A string of HTML content that is ready for sending as an email.\\\",\\n\\\"depend\\\": [\\\"Premailer library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A voracious young reader who eagerly devours every book recommended by their grandparent", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to track the books they have read. It provides functions to add a finished book to a list and check if a book is already in the list.\\\",\\n\\\"function_name\\\": [\\\"add_book_to_read_list\\\", \\\"check_if_book_already_read\\\"],\\n\\\"input_args\\\": [\\\"book_name\\\"],\\n\\\"return\\\": [\\\"None for add_book_to_read_list, Boolean (True if book is already read, False otherwise) for check_if_book_already_read\\\"],\\n\\\"depend\\\": [\\\"Python file I/O operations\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A single father who understands the challenges of raising an adrenaline-seeking child", "synthesized text": "\"{\\n\\\"name\\\": \\\"Adventure Activity Finder Interface\\\",\\n\\\"description\\\": \\\"This interface takes a user's current location as input and returns a list of nearby adventure activities suitable for children.\\\",\\n\\\"function_name\\\": \\\"get_nearby_adventure_activities\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"A list of adventure activity locations\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A passionate supporter of Prince who often debates about the two stars' legacies", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Prince vs Michael Jackson Comparison Interface\\\",\\n  \\\"description\\\": \\\"This interface takes two artist names as input, and returns a comparison of their popularity, followers, and top tracks on Spotify.\\\",\\n  \\\"function_name\\\": \\\"compare_artists\\\",\\n  \\\"input_args\\\": [\\\"artist1\\\", \\\"artist2\\\"],\\n  \\\"return\\\": \\\"A comparison dictionary with the artists' popularity, followers, and top tracks.\\\",\\n  \\\"depend\\\": \\\"This function leverages the Spotify Web API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A proud alumnus of International Indian School Jubail (IISJ)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Alumni Contact Information Update Interface\\\",\\n\\\"description\\\": \\\"An interface for IISJ alumni to easily update their contact information. The interface is a form where alumni can input their name, email, and contact number.\\\",\\n\\\"function_name\\\": \\\"update_info\\\",\\n\\\"input_args\\\": {\\n    \\\"form\\\": \\\"An instance of the AlumniUpdateForm class filled with the alumni's information\\\"\\n},\\n\\\"return\\\": \\\"None. The function updates the alumni's information in the IISJ alumni database.\\\",\\n\\\"depend\\\": \\\"Flask, WTForms\\\"\\n}\"", "description": "tool development"}
{"input persona": "a young Brazilian who cannot afford top-tier traveling accommodations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Budget Accommodation Finder Interface\\\",\\n  \\\"description\\\": \\\"An interface to find budget accommodations using the Booking.com API. The user inputs their destination, check-in date, check-out date, and maximum budget, and the interface returns a list of available accommodations within their budget.\\\",\\n  \\\"function_name\\\": \\\"find_budget_accommodation\\\",\\n  \\\"input_args\\\": {\\n    \\\"destination\\\": \\\"string\\\",\\n    \\\"check_in_date\\\": \\\"string in YYYY-MM-DD format\\\",\\n    \\\"check_out_date\\\": \\\"string in YYYY-MM-DD format\\\",\\n    \\\"max_budget\\\": \\\"integer\\\"\\n  },\\n  \\\"return\\\": \\\"list of strings (hotel names)\\\",\\n  \\\"depend\\\": \\\"requests library, Booking.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young Jewish-American woman who is trying to trace her roots", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Jewish Ancestry Trace Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses the JewishGen's API or any other genealogy API to trace Jewish ancestry. Users need to provide their family name and optionally a location, and the interface will return a list of potential ancestors.\\\",\\n  \\\"function_name\\\": \\\"trace_jewish_ancestry\\\",\\n  \\\"input_args\\\": {\\n    \\\"family_name\\\": \\\"User's family name\\\",\\n    \\\"location\\\": \\\"Optional. User's location\\\"\\n  },\\n  \\\"return\\\": \\\"A list of potential ancestors.\\\",\\n  \\\"depend\\\": \\\"JewishGen's API or any other genealogy API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A construction worker who appreciates clear and timely communication about their child's academic progress", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Email Summarizer Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest emails from a specified sender in the user's Gmail account, and summarizes the content of the emails using a pre-trained summarization model from HuggingFace. The user inputs their Gmail credentials and the sender's email address.\\\",\\n\\\"function_name\\\": \\\"summarize_email\\\",\\n\\\"input_args\\\": [\\\"credentials_file\\\", \\\"sender_email\\\"],\\n\\\"return\\\": \\\"A summary of the latest email from the specified sender\\\",\\n\\\"depend\\\": {\\\"python library\\\": [\\\"googleapiclient\\\", \\\"google_auth_oauthlib\\\", \\\"base64\\\", \\\"BeautifulSoup\\\", \\\"transformers\\\"],\\n            \\\"web APIs\\\": [\\\"Gmail API\\\"],\\n            \\\"machine learning models\\\": [\\\"Summarization model from HuggingFace\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Разработчик ПО с опытом работы с Microsoft SQL Server и CLR интеграцией", "synthesized text": "\"{\\n  \\\"name\\\": \\\"CLR Stored Procedure Interface\\\",\\n  \\\"description\\\": \\\"An interface to call CLR stored procedures in Microsoft SQL Server from Python.\\\",\\n  \\\"function_name\\\": \\\"call_clr_stored_procedure\\\",\\n  \\\"input_args\\\": {\\n    \\\"server_name\\\": \\\"The name of the SQL Server.\\\",\\n    \\\"database_name\\\": \\\"The name of the database in SQL Server.\\\",\\n    \\\"procedure_name\\\": \\\"The name of the CLR stored procedure.\\\",\\n    \\\"params\\\": \\\"The parameters to the CLR stored procedure.\\\"\\n  },\\n  \\\"return\\\": \\\"The results of the CLR stored procedure.\\\",\\n  \\\"depend\\\": \\\"pyodbc library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A patient who has suffered from an eye infection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Eye Infection Diagnosis Interface\\\",\\n\\\"description\\\": \\\"An interface using a pre-trained model from TensorFlow Hub for image classification to recognize various types of eye infections. User only needs to input the path to a photo of their eye, and the interface will return the predicted type of eye infection.\\\",\\n\\\"function_name\\\": \\\"diagnose_eye_infection\\\",\\n\\\"input_args\\\": \\\"image_path - a string that is the path to the eye image\\\",\\n\\\"return\\\": \\\"Predicted class of eye infection - a string that could be 'Normal', 'Cataract', 'Glaucoma', or 'Retinal Disease'.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, a pre-trained machine learning model from TensorFlow Hub for image classification\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged software engineer who has been using Java and is curious about the changes in ARX's API documentation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"API Documentation Change Detection Interface\\\",\\n\\\"description\\\": \\\"This interface compares different versions of API documentation and returns the changes.\\\",\\n\\\"function_name\\\": \\\"get_changes_in_documentation\\\",\\n\\\"input_args\\\": {\\n    \\\"old_doc_path\\\": \\\"Path to the old version of the API documentation\\\",\\n    \\\"new_doc_path\\\": \\\"Path to the new version of the API documentation\\\"\\n},\\n\\\"return\\\": \\\"A list of changes in the new documentation compared to the old one. Each element is a string, starting with '-' if the line is removed from the old documentation, and '+' if the line is added to the new documentation.\\\",\\n\\\"depend\\\": \\\"Python difflib library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nephew who is starting their own business and seeks advice on branding strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Logo Generation Interface\\\",\\n\\\"description\\\": \\\"This interface generates a logo based on a user-provided description. It uses a pre-trained generative adversarial network (GAN) model from TensorFlow Hub to generate the logo.\\\",\\n\\\"function_name\\\": \\\"generate_logo\\\",\\n\\\"input_args\\\": \\\"description: A string description of the logo to be generated.\\\",\\n\\\"return\\\": \\\"An image of the generated logo.\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "an African American female who enjoys sports but has no knowledge of rugby", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rugby Match Summary Interface\\\",\\n\\\"description\\\": \\\"This interface provides a summary of a rugby match on a specific date by scraping data from a sports news website. It simplifies the process of obtaining and understanding rugby match information for users unfamiliar with the sport.\\\",\\n\\\"function_name\\\": \\\"get_rugby_match_summary\\\",\\n\\\"input_args\\\": \\\"match_date - The date of the rugby match. Format: YYYYMMDD\\\",\\n\\\"return\\\": \\\"A string containing a summary of the rugby match that took place on the input date.\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup (Python libraries)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A union representative for emergency medical service personnel.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Shift Scheduling Interface\\\",\\n\\\"description\\\": \\\"This interface optimizes the assignment of staff to shifts based on their preferences and the shifts required.\\\",\\n\\\"function_name\\\": \\\"schedule_shifts\\\",\\n\\\"input_args\\\": {\\n    \\\"staff\\\": \\\"A list of staff members.\\\",\\n    \\\"preferences\\\": \\\"A 2D list representing the preference of each staff member for each shift. preferences[i][j] is the preference of the ith staff member for the jth shift.\\\",\\n    \\\"required_shifts\\\": \\\"A list of shifts that need to be covered.\\\"\\n},\\n\\\"return\\\": \\\"A dictionary where the keys are the names of the staff and the values are lists of assigned shifts.\\\",\\n\\\"depend\\\": \\\"This function uses the Python library pulp to formulate and solve the shift scheduling problem as a linear program.\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Indian shopkeeper who sells products on Amazon.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface fetches prices of a given product from different vendors on Amazon using the Amazon Product Advertising API.\\\",\\n\\\"function_name\\\": \\\"get_product_prices\\\",\\n\\\"input_args\\\": \\\"product_id - The unique identifier for the product on Amazon\\\",\\n\\\"return\\\": \\\"A list of prices from different vendors for the product.\\\",\\n\\\"depend\\\": \\\"Python's bottlenose library for Amazon Product Advertising API, and xml.etree.ElementTree for parsing XML responses\\\"\\n}\"", "description": "tool development"}
{"input persona": "a sports commentator who is bad at math.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Statistics Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface provides easy calculation of sports statistics such as batting average of a cricketer or scoring average of a basketball player.\\\",\\n\\\"function_name\\\": [\\\"calculate_batting_average\\\", \\\"calculate_scoring_average\\\"],\\n\\\"input_args\\\": [\\\"runs, matches\\\", \\\"points, games\\\"],\\n\\\"return\\\": \\\"The calculated average (float)\\\",\\n\\\"depend\\\": \\\"Python built-in functions\\\"\\n}\"", "description": "tool development"}
{"input persona": "a professional football player from Ligue 1 Stade de Reims", "synthesized text": "\"{\\n\\\"name\\\": \\\"Injury Risk Assessment Interface\\\",\\n\\\"description\\\": \\\"Predicts the risk of injury for a football player based on player statistics and match data\\\",\\n\\\"function_name\\\": \\\"predict_injury_risk\\\",\\n\\\"input_args\\\": [\\\"player_name\\\", \\\"file_path\\\"],\\n\\\"return\\\": \\\"A float value which represents the probability of the player getting injured in the next match\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn.externals.joblib\\\", \\\"machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A night owl gamer who appreciates the support main's late-night gaming sessions and healing expertise", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Riot Games API to provide game statistics of a League of Legends player. It returns details such as win rate, kill/death/assist ratio, average gold earned, and most played champions.\\\",\\n\\\"function_name\\\": \\\"get_player_statistics\\\",\\n\\\"input_args\\\": \\\"username\\\",\\n\\\"return\\\": \\\"game_details\\\",\\n\\\"depend\\\": \\\"Riot Games API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic New Age follower who believes wholeheartedly in the concepts and practices associated with it.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Astrological Birth Chart Interface\\\",\\n\\\"description\\\": \\\"This interface obtains astrological birth chart information for a user based on their date, time, and place of birth. It makes use of the Astro-Seek API to fetch this data.\\\",\\n\\\"function_name\\\": \\\"get_astrological_birth_chart\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"time\\\", \\\"lat\\\", \\\"lng\\\"],\\n\\\"return\\\": \\\"The function returns the user's astrological birth chart information as a JSON object.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Astro-Seek API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A veteran member of ISTAT and aviation enthusiast", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aircraft Valuation Interface\\\",\\n\\\"description\\\": \\\"This interface provides an estimated value of an aircraft based on its model, age, and condition. It simplifies the process of fetching data from aviation APIs like ISTAT.\\\",\\n\\\"function_name\\\": \\\"get_aircraft_value\\\",\\n\\\"input_args\\\": {\\n    \\\"model\\\": \\\"The specific model of the aircraft.\\\",\\n    \\\"age\\\": \\\"The age of the aircraft in years.\\\",\\n    \\\"condition\\\": \\\"The condition of the aircraft. Can be 'new', 'used' or 'refurbished'.\\\"\\n},\\n\\\"return\\\": \\\"The estimated value of the aircraft.\\\",\\n\\\"depend\\\": \\\"ISTAT API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student who is fascinated by the social and philosophical themes explored in The Twilight Zone", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses IMDb's API and the BERT NER model from Huggingface to extract themes/topics from episode descriptions of The Twilight Zone TV series.\\\",\\n\\\"function_name\\\": \\\"analyze_episode_themes\\\",\\n\\\"input_args\\\": {\\\"season_number\\\": \\\"The number of the season\\\", \\\"episode_number\\\": \\\"The number of the episode\\\"},\\n\\\"return\\\": \\\"A list of themes/topics of the episode\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"requests\\\", \\\"transformers\\\"], \\\"Web APIs\\\": [\\\"IMDb's API\\\"], \\\"Machine Learning Models\\\": [\\\"BERT NER model from Huggingface\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An aspiring 16-year-old freeskier from Queenstown, New Zealand, who idolizes Jess Hotter", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ski Jump Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that takes in a video of a ski jump and returns a new video with the ski jumps analyzed, showing the pose of the skier at specific points in time.\\\",\\n\\\"function_name\\\": \\\"analyze_ski_jump\\\",\\n\\\"input_args\\\": \\\"path_to_video\\\",\\n\\\"return\\\": \\\"Path to the output video with analyzed ski jumps\\\",\\n\\\"depend\\\": \\\"OpenCV, TensorFlow, TensorFlow Hub, MoveNet model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An entry-level investment banker who's also a Disney fan.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Stock Market Data Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to get the latest stock market data by simply providing the stock symbol. It returns details such as the latest closing price, opening price, volume, and other important data related to the stock.\\\",\\n  \\\"function_name\\\": \\\"get_stock_details\\\",\\n  \\\"input_args\\\": \\\"symbol\\\",\\n  \\\"return\\\": \\\"A dictionary containing the latest stock market data for the provided symbol\\\",\\n  \\\"depend\\\": \\\"Alpha Vantage API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Close friend of Sara Josselyn who lives in Toronto", "synthesized text": "\"{\\n\\\"name\\\": \\\"Toronto Public Transit Route Planning Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google Maps API to find the best public transit route. Users need to input their start and destination addresses, and the interface will return the optimal route using Toronto's public transit system.\\\",\\n\\\"function_name\\\": \\\"get_transit_route\\\",\\n\\\"input_args\\\": [\\\"start_address\\\", \\\"destination_address\\\"],\\n\\\"return\\\": \\\"A dictionary containing the start address, end address, estimated duration, and the detailed steps of the route.\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A university student who downloads and shares files using peer-to-peer (P2P) software.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Torrent File Download Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of downloading files from a torrent. It uses the libtorrent library to download a torrent either from a magnet link or a .torrent file.\\\",\\n\\\"function_name\\\": \\\"download_torrent\\\",\\n\\\"input_args\\\": [\\\"torrent_info - the magnet link or path to the .torrent file\\\"],\\n\\\"return\\\": \\\"The name of the downloaded file.\\\",\\n\\\"depend\\\": \\\"libtorrent library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A competitor in the same industry who sees the divorce as an opportunity to gain an advantage", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitor Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches recent news about a given competitor from Google News.\\\",\\n\\\"function_name\\\": \\\"get_competitor_news\\\",\\n\\\"input_args\\\": \\\"competitor_name: The name of the competitor to fetch news for.\\\",\\n\\\"return\\\": \\\"A list of recent news items about the competitor, each represented as a dictionary with 'title' and 'link' keys.\\\",\\n\\\"depend\\\": \\\"This function depends on the 'requests' and 'beautifulsoup4' Python libraries, and the Google News web API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A public health nurse working on the ground to implement and monitor interventions", "synthesized text": "\"{\\n\\\"name\\\": \\\"COVID-19 Data Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the COVID-19 data including cases, deaths and recoveries for all countries or for a specific country using the APIs provided by disease.sh.\\\",\\n\\\"function_name\\\": \\\"get_covid_data\\\",\\n\\\"input_args\\\": \\\"country\\\",\\n\\\"return\\\": \\\"A dictionary with the number of cases, deaths and recoveries.\\\",\\n\\\"depend\\\": \\\"requests library, disease.sh API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An acclaimed local actress who always orders her special pasta dish before her opening night", "synthesized text": "\"{\\n\\\"name\\\": \\\"Food Ordering Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to find and order their favorite dish from a restaurant. It uses the JustEat API to find restaurants that have the desired dish and place an order.\\\",\\n\\\"function_name\\\": \\\"find_and_order_food\\\",\\n\\\"input_args\\\": {\\n    \\\"dish_name\\\": \\\"The name of the dish the user wishes to order.\\\"\\n},\\n\\\"return\\\": \\\"A string containing the name of the restaurant and the order id, or an error message if the dish could not be found.\\\",\\n\\\"depend\\\": \\\"This function relies on the JustEat API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "an independent critical thinker with slight conspiratorial leanings", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Web Article Fact Check Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches the content of a webpage and uses a pre-trained model for fact-checking. The users only need to input the URL of the article, and the interface will return a fact-check score that represents the reliability of the information in the article.\\\",\\n  \\\"function_name\\\": \\\"fact_check_article\\\",\\n  \\\"input_args\\\": \\\"url\\\",\\n  \\\"return\\\": \\\"Fact-check score (string)\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"transformers\\\"],\\n    \\\"web APIs\\\": [],\\n    \\\"machine learning models\\\": [\\\"Hugging Face: facebook/bart-large-mnli\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "an amateur music producer who is interested in Greek Orthodox chant", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Genre Conversion Interface\\\",\\n\\\"description\\\": \\\"This interface converts the genre of a music file to a target genre using a pre-trained machine learning model. In this case, the target genre is Greek Orthodox chant.\\\",\\n\\\"function_name\\\": \\\"convert_music_genre\\\",\\n\\\"input_args\\\": [\\\"path_to_audio\\\", \\\"target_genre\\\"],\\n\\\"return\\\": \\\"A .wav file with the music converted to the target genre.\\\",\\n\\\"depend\\\": \\\"Python libraries: tensorflow, tensorflow_hub, librosa; Machine learning model: Universal Sentence Encoder from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A violinist studying at the same music conservatory but focusing on chamber music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Tempo Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the tempo of a music file. The tempo is estimated in beats per minute.\\\",\\n\\\"function_name\\\": \\\"estimate_tempo\\\",\\n\\\"input_args\\\": \\\"path_to_music\\\",\\n\\\"return\\\": \\\"Estimated tempo in beats per minute\\\",\\n\\\"depend\\\": \\\"librosa library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A propulsion engineer responsible for designing and optimizing rocket engines", "synthesized text": "\"{\\n\\\"name\\\": \\\"Thrust-to-Weight Ratio Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface to calculate the thrust-to-weight ratio of a rocket, aircraft or spacecraft engine. This is a key indicator of the performance of the engine.\\\",\\n\\\"function_name\\\": \\\"calculate_thrust_to_weight_ratio\\\",\\n\\\"input_args\\\": {\\n    \\\"thrust\\\": \\\"The thrust of the engine in Newtons\\\",\\n    \\\"weight\\\": \\\"The weight of the rocket in kilograms\\\"\\n    },\\n\\\"return\\\": \\\"The thrust-to-weight ratio rounded to two decimal places\\\",\\n\\\"depend\\\": \\\"Python's built-in functions\\\"\\n}\"", "description": "tool development"}
{"input persona": "A conservative member of Kuwait's parliamentary council resistant to political change", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Foreign News Translation Interface\\\",\\n  \\\"description\\\": \\\"This interface extracts news from a foreign website and translates the text into English. It is useful for users who need to read foreign news in English.\\\",\\n  \\\"function_name\\\": \\\"translate_news\\\",\\n  \\\"input_args\\\": [\\n    {\\n      \\\"name\\\": \\\"url\\\",\\n      \\\"description\\\": \\\"The URL of the foreign news website.\\\",\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  ],\\n  \\\"return\\\": {\\n    \\\"description\\\": \\\"The translated news in English\\\",\\n    \\\"type\\\": \\\"string\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"bs4\\\", \\\"google_trans_new\\\"],\\n    \\\"web APIs\\\": [],\\n    \\\"machine learning models\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A college student studying econometrics and often turns to their grandparent for tutoring", "synthesized text": "\"{\\n\\\"name\\\": \\\"Econometric Equation Solver Interface\\\",\\n\\\"description\\\": \\\"This interface uses the sympy Python library to solve econometric equations. The user inputs an econometric equation as a string and the function returns the solution.\\\",\\n\\\"function_name\\\": \\\"solve_econometric_equation\\\",\\n\\\"input_args\\\": {\\n    \\\"equation_string\\\": \\\"A string representation of the econometric equation to be solved. Symbols used must be any of the following: x, y, a, b, c, d, e, f, g, h, i, j, k, l.\\\",\\n    \\\"solve_for\\\": \\\"The symbol to solve the equation for.\\\"\\n},\\n\\\"return\\\": \\\"The solution to the econometric equation.\\\",\\n\\\"depend\\\": \\\"Python's sympy library for symbolic mathematics\\\"\\n}\"", "description": "tool development"}
{"input persona": "A diaspora Sri Lankan artist who uses their platform to promote Sri Lankan heritage and traditions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sinhala Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface translates English text into Sinhala using Google's Cloud Translation API. It's useful for anyone who needs to translate text, particularly useful for diaspora Sri Lankan artists promoting Sri Lankan heritage and traditions to Sinhala-speaking communities.\\\",\\n\\\"function_name\\\": \\\"translate_to_sinhala\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"string\\\"\\n},\\n\\\"return\\\": {\\n    \\\"translatedText\\\": \\\"string\\\"\\n},\\n\\\"depend\\\": \\\"Google Cloud Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst responsible for providing clean and structured data for training machine learning models", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Data Cleaning Interface\\\",\\n  \\\"description\\\": \\\"A high-level interface for cleaning and preprocessing a dataset from a CSV file. This interface imputes missing values, scales numerical features and one-hot encodes categorical features.\\\",\\n  \\\"function_name\\\": \\\"clean_data\\\",\\n  \\\"input_args\\\": [\\\"csv_file_path\\\", \\\"target_column\\\"],\\n  \\\"return\\\": \\\"A pandas DataFrame with preprocessed data\\\",\\n  \\\"depend\\\": [\\\"pandas\\\", \\\"sklearn.preprocessing\\\", \\\"sklearn.impute\\\", \\\"sklearn.compose\\\", \\\"sklearn.pipeline\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A cycling forum administrator seeking the digital marketer's expertise in growing their online community", "synthesized text": "\"{\\n\\\"name\\\": \\\"Google Trends Interface\\\",\\n\\\"description\\\": \\\"Fetches Google Trends interest over time data for given keywords.\\\",\\n\\\"function_name\\\": \\\"get_trends\\\",\\n\\\"input_args\\\": [\\\"keywords\\\"],\\n\\\"return\\\": \\\"A pandas DataFrame with Google Trends interest over time data for each keyword.\\\",\\n\\\"depend\\\": [\\\"pytrends\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A handyman who finds internet ads and overly florid language annoying when searching for practical information", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ad Simplification Interface\\\",\\n\\\"description\\\": \\\"An interface to scrape the content from a webpage and simplify the language, removing any ads and complex language.\\\",\\n\\\"function_name\\\": \\\"simplify_webpage\\\",\\n\\\"input_args\\\": {\\\"url\\\": \\\"The URL of the webpage to be simplified.\\\"},\\n\\\"return\\\": \\\"A string of simplified webpage content.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"BeautifulSoup\\\", \\\"requests\\\", \\\"transformers\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "Sou um desenvolvedor de software experiente, familiarizado com diferentes linguagens de programação e suas peculiaridades, inclusive Delphi/Pascal.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Delphi/Pascal to Python Conversion Interface\\\",\\n  \\\"description\\\": \\\"Converts Delphi/Pascal code to equivalent Python code\\\",\\n  \\\"function_name\\\": \\\"convert_delphi_to_python\\\",\\n  \\\"input_args\\\": \\\"delphi_code\\\",\\n  \\\"return\\\": \\\"Equivalent Python code\\\",\\n  \\\"depend\\\": \\\"gast Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A physics conference organizer inviting the professor to give a keynote speech on computational physics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Conference Invitation Email Interface\\\",\\n\\\"description\\\": \\\"An interface for sending a formal conference invitation email to a professor\\\",\\n\\\"function_name\\\": \\\"send_invitation_email\\\",\\n\\\"input_args\\\": {\\\"recipient_email\\\": \\\"The recipient's email address.\\\", \\\"conference_name\\\": \\\"The name of the conference.\\\", \\\"date\\\": \\\"The date of the conference.\\\", \\\"keynote_topic\\\": \\\"The topic of the keynote speech.\\\"},\\n\\\"return\\\": \\\"No return value. The function sends an email and terminates.\\\",\\n\\\"depend\\\": \\\"Python's built-in smtplib and email.mime libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "a person who is skeptical of top-down approach in developing technologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Machine Learning Model Evaluation Interface\\\",\\n\\\"description\\\": \\\"An interface to evaluate the performance of a machine learning model based on test data and the model's predictions. Returns a classification report including precision, recall, f1-score, and support for each class.\\\",\\n\\\"function_name\\\": \\\"evaluate_model\\\",\\n\\\"input_args\\\": {\\\"test_data\\\": \\\"actual labels of the test dataset\\\", \\\"predictions\\\": \\\"labels predicted by the model\\\"},\\n\\\"return\\\": \\\"classification report\\\",\\n\\\"depend\\\": [\\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Independented Java developer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Java Code Formatter Interface\\\",\\n\\\"description\\\": \\\"This interface formats unformatted Java code using the Google Java Format tool\\\",\\n\\\"function_name\\\": \\\"format_java_code\\\",\\n\\\"input_args\\\": \\\"unformatted_code - Unformatted Java code as a string\\\",\\n\\\"return\\\": \\\"Formatted Java code as a string\\\",\\n\\\"depend\\\": \\\"Python's subprocess module, Google Java Format tool\\\"\\n}\"", "description": "tool development"}
{"input persona": "A policy analyst working closely with the immunologist to shape national strategies for immunotherapy funding and implementation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Immunotherapy Clinical Trials Search Interface\\\",\\n\\\"description\\\": \\\"An interface to search for immunotherapy clinical trials for a specific type of cancer using the U.S. National Library of Medicine\\u2019s clinical trials database API.\\\",\\n\\\"function_name\\\": \\\"get_immunotherapy_trials\\\",\\n\\\"input_args\\\": {\\\"cancer_type\\\": \\\"A string that represents the type of cancer.\\\"},\\n\\\"return\\\": \\\"A list of dictionaries, where each dictionary contains the clinical trial id ('nct_id'), the title of the trial ('title'), and the condition being treated ('condition').\\\",\\n\\\"depend\\\": \\\"requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Colombian Gold Miner at Gran Colombia Gold", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Gold Price Forecasting Interface\\\", \\n  \\\"description\\\": \\\"Forecast future gold prices based on historical data using a pre-trained model\\\", \\n  \\\"function_name\\\": \\\"forecast_gold_price\\\", \\n  \\\"input_args\\\": \\\"path_to_csv\\\", \\n  \\\"return\\\": \\\"logits, a numpy array that represents the forecasted gold prices\\\", \\n  \\\"depend\\\": \\\"huggingface's transformers, torch, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned graphic designer who worked for major record labels in the 80s", "synthesized text": "\"{\\n\\\"name\\\": \\\"Album Cover Design Classifier Interface\\\",\\n\\\"description\\\": \\\"An interface that takes the path to an album cover image file and returns the probable decade of the design.\\\",\\n\\\"function_name\\\": \\\"classify_album_cover\\\",\\n\\\"input_args\\\": [\\\"path_to_img\\\"],\\n\\\"return\\\": \\\"Decade of the album cover design (e.g. '80s')\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"PIL\\\", \\\"requests\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"google/vit-base-patch16-224-in21k\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a teenage girl native to Bakhmutske", "synthesized text": "\"{\\n\\\"name\\\": \\\"Meteor Shower Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that uses NASA's API to predict the next meteor shower visible from a specified location.\\\",\\n\\\"function_name\\\": \\\"get_next_meteor_shower\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"Returns the name and peak date of the next meteor shower visible from the input location, or a message if no such meteor shower is found.\\\",\\n\\\"depend\\\": \\\"requests, datetime, NASA API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A grizzled veteran biker who has attended Jõgevatreff since the early years", "synthesized text": "\"{\\n\\\"name\\\": \\\"Motorcycle Route Planner Interface\\\",\\n\\\"description\\\": \\\"This interface provides a function to plan the most scenic route for a motorcycle journey between two locations.\\\",\\n\\\"function_name\\\": \\\"plan_scenic_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"The most scenic route between the start and end location as a list of latitude and longitude coordinates.\\\",\\n\\\"depend\\\": [\\\"GraphHopper Directions API\\\", \\\"ScenicOrNot API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A glass artist drawing inspiration from physical theories to create aesthetically appealing and scientifically accurate pieces", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fractal Image Generation Interface\\\",\\n\\\"description\\\": \\\"Generates a fractal image using the Mandelbrot set, which exhibits patterns similar to those seen in physical theories. Useful for artists drawing inspiration from scientific concepts.\\\",\\n\\\"function_name\\\": \\\"generate_fractal\\\",\\n\\\"input_args\\\": [\\\"iterations\\\"],\\n\\\"return\\\": \\\"A pyplot object representing the fractal image\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A lifelong Markham resident who lives near a rail crossing and struggles with the constant train whistling.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Train Schedule Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the train schedules at the nearest station based on the user's location. This way, users can plan their activities around the train whistling times.\\\",\\n\\\"function_name\\\": \\\"get_train_schedule\\\",\\n\\\"input_args\\\": [\\\"lat\\\", \\\"lon\\\"],\\n\\\"return\\\": \\\"List of train departure times\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Transport API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a second-year student at Berkeley who believes firmly in keeping traditions and respecting history.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Historical Event Search Interface\\\",\\n  \\\"description\\\": \\\"An interface to get the major historical events that happened on a specific date. The user inputs a month and a day, and the function outputs a list of strings, each containing a year and a description of a major event that happened in that year.\\\",\\n  \\\"function_name\\\": \\\"get_historical_events\\\",\\n  \\\"input_args\\\": {\\n    \\\"month\\\": \\\"an integer representing the month (from 1 to 12)\\\",\\n    \\\"day\\\": \\\"an integer representing the day (from 1 to 31)\\\"\\n  },\\n  \\\"return\\\": \\\"A list of strings, each containing a year and a description of a major event that happened in that year.\\\",\\n  \\\"depend\\\": \\\"This function depends on the 'requests' Python library and the 'Today in History' API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a volunteer community organizer in the Netherlands", "synthesized text": "\"{\\n\\\"name\\\": \\\"Community Event Planner Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch community events based on category and location using Meetup API.\\\",\\n\\\"function_name\\\": \\\"get_community_events\\\",\\n\\\"input_args\\\": {\\n    \\\"category\\\": \\\"Type of event (String)\\\",\\n    \\\"location\\\": \\\"Geographical coordinates (Tuple)\\\"\\n},\\n\\\"return\\\": \\\"List of event names (List)\\\",\\n\\\"depend\\\": \\\"requests library, Meetup API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a former student who was taught biology by Manuel Osvaldo Velez.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Gene Sequence Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface to analyze a DNA sequence. It returns basic information about the sequence such as its length, GC content, and transcription.\\\",\\n  \\\"function_name\\\": \\\"analyze_dna_sequence\\\",\\n  \\\"input_args\\\": {\\n    \\\"dna_sequence\\\": \\\"A string of the DNA sequence.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"Length\\\": \\\"The length of the DNA sequence.\\\",\\n    \\\"GC Content\\\": \\\"The percentage of guanine and cytosine in the DNA molecule.\\\",\\n    \\\"Transcription\\\": \\\"The process by which DNA is copied into RNA.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"Bio.Seq\\\", \\\"Bio.Alphabet\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A project manager responsible for overseeing the implementation of the bureaucratic restructuring plan", "synthesized text": "\"{\\n\\\"name\\\": \\\"Task Assignment Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to predict the time required for a task based on its description, and then assigns the task to the person with the most appropriate skills and availability.\\\",\\n\\\"function_name\\\": \\\"assign_task\\\",\\n\\\"input_args\\\": [\\\"task_description\\\", \\\"team_members\\\"],\\n\\\"return\\\": \\\"The name of the assigned team member or a message if no suitable team member is found.\\\",\\n\\\"depend\\\": \\\"A pre-trained machine learning model for task time prediction, joblib, and sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "An apolitical elderly woman who is firmly pro-life.", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Filtering Interface\\\",\\n\\\"description\\\": \\\"Filters out political articles from a given news website URL.\\\",\\n\\\"function_name\\\": \\\"get_articles_without_politics\\\",\\n\\\"input_args\\\": \\\"url - A string that represents the URL of a news website.\\\",\\n\\\"return\\\": \\\"A list of strings, where each string represents a non-political article found on the website.\\\",\\n\\\"depend\\\": \\\"Uses the BeautifulSoup and NLTK Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A customer support representative experienced in handling website performance-related inquiries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Website Speed Test Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the WebPageTest API to run a performance test on a website and return the performance metrics.\\\",\\n\\\"function_name\\\": \\\"get_website_speed_metrics\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"A dictionary containing the performance metrics of the website\\\",\\n\\\"depend\\\": \\\"requests library, WebPageTest API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A study-abroad student from Japan who is now studying journalism in California, USA. I tend to be very curious and keen on immersing myself in a local society when I am abroad studying. I am also someone who always double-checks the validity of information on digital media.", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Verification Interface\\\",\\n\\\"description\\\": \\\"This interface uses the FakeBox API to verify the authenticity of a piece of news. Users need to input the title and content of the news, and the function will return a verdict on the authenticity of the news.\\\",\\n\\\"function_name\\\": \\\"verify_news\\\",\\n\\\"input_args\\\": [\\\"title\\\", \\\"content\\\"],\\n\\\"return\\\": \\\"A string representing the category of the news according to FakeBox API: 'unknown', 'clickbait', 'bias', 'political', 'fabricated', etc.\\\",\\n\\\"depend\\\": \\\"Python requests library, FakeBox API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A global supply chain manager specializing in logistics and distribution in the Asia-Pacific region", "synthesized text": "\"{\\n\\\"name\\\": \\\"Freight Cost Calculator Interface\\\",\\n\\\"description\\\": \\\"An interface to estimate the freight cost between two locations based on the current fuel price and the distance between the two locations.\\\",\\n\\\"function_name\\\": \\\"calculate_freight_cost\\\",\\n\\\"input_args\\\": [\\\"origin\\\", \\\"destination\\\"],\\n\\\"return\\\": \\\"Estimated freight cost in USD\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"Google Distance Matrix API\\\", \\\"Oil Price API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "an old-school poker player who prefers traditional cash games over tournaments", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Poker Hand Evaluation Interface\\\",\\n  \\\"description\\\": \\\"An interface that evaluates the strength of a poker hand using the 'poker' Python library. Users input their hand and the community cards, and the interface returns the strength of the hand.\\\",\\n  \\\"function_name\\\": \\\"evaluate_poker_hand\\\",\\n  \\\"input_args\\\": {\\n    \\\"player_hand\\\": \\\"string - The player's cards. Must be a string of card codes, e.g., 'AhKh' represents Ace and King of hearts.\\\",\\n    \\\"community_cards\\\": \\\"string - The community cards. Must be a string of card codes, e.g., 'QhJhTh9h8h' represents Queen, Jack, Ten, Nine and Eight of hearts.\\\"\\n  },\\n  \\\"return\\\": \\\"string - The strength of the hand, e.g., 'RoyalFlush'.\\\",\\n  \\\"depend\\\": \\\"poker - A Python library for evaluating poker hands\\\"\\n}\"", "description": "tool development"}
{"input persona": "A robotics researcher working on developing humanoid robots for practical use in industries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Motion Planning Interface for Humanoid Robots\\\",\\n\\\"description\\\": \\\"An interface that plans the motions for a humanoid robot to move its arm to a specific position in a 3D space.\\\",\\n\\\"function_name\\\": \\\"plan_motion_to_position\\\",\\n\\\"input_args\\\": [\\\"x\\\", \\\"y\\\", \\\"z\\\"],\\n\\\"return\\\": \\\"A planned trajectory for the robot's arm to reach the target position.\\\",\\n\\\"depend\\\": \\\"MoveIt Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a liberal western scholar", "synthesized text": "\"{\\n\\\"name\\\": \\\"Arabic Text Transliteration Interface\\\",\\n\\\"description\\\": \\\"An interface that translates Arabic script to Latin (Roman) script using the python-bidi library. This allows users to study Arabic literature without knowing Arabic script.\\\",\\n\\\"function_name\\\": \\\"arabic_to_latin\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": \\\"Latin (Roman) script equivalent of the Arabic text\\\",\\n\\\"depend\\\": [\\\"python-bidi\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Venezuelan economist working for the Organization of the Petroleum Exporting Countries (OPEC)", "synthesized text": "\"{\\n\\\"name\\\": \\\"Oil Price Forecasting Interface\\\",\\n\\\"description\\\": \\\"This interface uses the ARIMA model from the statsmodels library to predict future oil prices.\\\",\\n\\\"function_name\\\": \\\"predict_oil_prices\\\",\\n\\\"input_args\\\": {\\n    \\\"historical_prices\\\": \\\"A list of historical oil prices.\\\",\\n    \\\"p\\\": \\\"The number of lag observations included in the model, also called the lag order. Default is 5.\\\",\\n    \\\"d\\\": \\\"The number of times that the raw observations are differenced, also called the degree of differencing. Default is 1.\\\",\\n    \\\"q\\\": \\\"The size of the moving average window, also called the order of moving average. Default is 0.\\\"\\n},\\n\\\"return\\\": \\\"A list of predicted oil prices for the next few periods.\\\",\\n\\\"depend\\\": \\\"pandas, statsmodels\\\"\\n}\"", "description": "tool development"}
{"input persona": "A long-term fan of Christine Santelli who has a limited budget", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"Fetch music recommendations based on a seed artist using Spotify's Web API.\\\",\\n\\\"function_name\\\": \\\"get_music_recommendations\\\",\\n\\\"input_args\\\": \\\"access_token\\\",\\n\\\"return\\\": \\\"A list of recommended tracks based on the user's favorite artist.\\\",\\n\\\"depend\\\": \\\"Spotify's Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A village chief in a rural area actively seeking innovative energy solutions to improve living conditions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Power Feasibility Interface\\\",\\n\\\"description\\\": \\\"This interface uses NASA's POWER Data Access Viewer API to determine the annual average amount of solar energy available at a given location.\\\",\\n\\\"function_name\\\": \\\"get_solar_power_feasibility\\\",\\n\\\"input_args\\\": {\\n    \\\"lat\\\": \\\"The latitude of the location\\\",\\n    \\\"lon\\\": \\\"The longitude of the location\\\"\\n},\\n\\\"return\\\": \\\"The annual average amount of solar energy available at the given location in kWh/m^2/day.\\\",\\n\\\"depend\\\": \\\"requests library, NASA's POWER Data Access Viewer API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful entrepreneur whose business flourished thanks to the implementation of high-performance computing", "synthesized text": "\"{\\n\\\"name\\\": \\\"High-Performance Computing Resource Usage Interface\\\",\\n\\\"description\\\": \\\"This interface provides a summary of the usage of high-performance computing resources during a specified time duration.\\\",\\n\\\"function_name\\\": \\\"monitor_system_usage\\\",\\n\\\"input_args\\\": \\\"duration: The time duration, in seconds, for which the system usage should be monitored.\\\",\\n\\\"return\\\": \\\"A dictionary containing the usage of CPU (%), memory (MB), disk (MB), and network (MB) during the specified time duration.\\\",\\n\\\"depend\\\": \\\"This function leverages the psutil library in Python.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A health minister seeking guidance on implementing effective measures to control disease outbreaks", "synthesized text": "\"{\\n\\\"name\\\": \\\"Predictive Disease Outbreak Interface\\\",\\n\\\"description\\\": \\\"This interface uses the SEIR model to predict the spread of a disease given the current number of susceptible, exposed, infected, and recovered individuals.\\\",\\n\\\"function_name\\\": \\\"predict_disease_spread\\\",\\n\\\"input_args\\\": {\\n\\\"S0\\\": \\\"The current number of susceptible individuals\\\",\\n\\\"E0\\\": \\\"The current number of exposed individuals\\\",\\n\\\"I0\\\": \\\"The current number of infected individuals\\\",\\n\\\"R0\\\": \\\"The current number of recovered individuals\\\",\\n\\\"beta\\\": \\\"The effective contact rate of the disease\\\",\\n\\\"gamma\\\": \\\"The mean recovery rate\\\",\\n\\\"delta\\\": \\\"The incubation rate\\\",\\n\\\"days\\\": \\\"The number of days to forecast\\\"\\n},\\n\\\"return\\\": \\\"A dictionary with the predicted number of susceptible, exposed, infected, and recovered individuals for each day\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"scipy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a cheerful Christmas baby who loves making connections with others born on the same day.", "synthesized text": "\"{\\n\\\"name\\\": \\\"People Connection Interface\\\",\\n\\\"description\\\": \\\"An interface to connect people who were born on the same day. The interface generates profiles of people born on the same day as the user.\\\",\\n\\\"function_name\\\": \\\"get_people_born_on_same_day\\\",\\n\\\"input_args\\\": {\\\"birth_date\\\": \\\"A date object representing a person's birthdate.\\\"},\\n\\\"return\\\": \\\"A list of profiles with their first name, last name, gender, email, and country. Each profile is represented as a dictionary.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"datetime\\\"], \\\"Web APIs\\\": [\\\"Random User Generator API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am a local resident of Yangfangdian Subdistrict.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Air Quality Index Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the real-time air quality index of a given location by leveraging the AQICN API.\\\",\\n\\\"function_name\\\": \\\"get_air_quality_index\\\",\\n\\\"input_args\\\": \\\"location: a string representing the city or area\\\",\\n\\\"return\\\": \\\"Air quality index of the given location as a numerical value. Returns a string starting with 'Error: ' in case of any error.\\\",\\n\\\"depend\\\": \\\"Python library: requests; Web API: AQICN\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mother who has lost her child to childhood cancer and seeks support in coping with grief", "synthesized text": "\"{\\n\\\"name\\\": \\\"Grief Support Group Finder Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Meetup API to find local support groups based on the user's location. It's specifically designed to help individuals find grief support groups in their local area.\\\",\\n\\\"function_name\\\": \\\"get_support_groups\\\",\\n\\\"input_args\\\": \\\"location - a string that represents the user's location\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the name of a support group and a corresponding link to the group's Meetup page.\\\",\\n\\\"depend\\\": \\\"requests, Meetup API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Spencer, a marquee supplier known for excellent customer service and with a sharp memory for faces and events.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Customer Recognition Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained machine learning model to recognize customers from their pictures\\\",\\n\\\"function_name\\\": \\\"recognize_customer\\\",\\n\\\"input_args\\\": \\\"path_to_img - The path to the image file of the customer\\\",\\n\\\"return\\\": \\\"The name of the customer if they exist in the database, or 'Unknown' otherwise\\\",\\n\\\"depend\\\": \\\"TensorFlow Hub, Numpy, Pickle, Pre-trained face recognition model from TensorFlow Hub, Customer face database\\\"\\n}\"", "description": "tool development"}
{"input persona": "A retired redneck high school football coach from southern United States.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Game Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the outcome of a football game based on team strength, player performance, and other factors.\\\",\\n\\\"function_name\\\": \\\"predict_game_outcome\\\",\\n\\\"input_args\\\": {\\n    \\\"teams\\\": \\\"A list of two team names.\\\",\\n    \\\"current_standings\\\": \\\"A dictionary where keys are team names and values are their current standings.\\\",\\n    \\\"player_stats\\\": \\\"A list of lists where each sublist contains the stats for a player on the corresponding team.\\\"\\n},\\n\\\"return\\\": \\\"The predicted outcome of the game.\\\",\\n\\\"depend\\\": \\\"sklearn, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "a visitor planning to photograph sunrise and sunset in Brockhall", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sunrise and Sunset Time Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Sunrise-Sunset API to provide the sunrise and sunset times for a given location and date.\\\",\\n\\\"function_name\\\": \\\"get_sunrise_sunset\\\",\\n\\\"input_args\\\": {\\n\\\"location\\\": \\\"A tuple representing the latitude and longitude of the location.\\\",\\n\\\"date\\\": \\\"An optional argument representing the date. Defaults to today's date.\\\"\\n},\\n\\\"return\\\": {\\n\\\"sunrise\\\": \\\"The time of sunrise.\\\",\\n\\\"sunset\\\": \\\"The time of sunset.\\\"\\n},\\n\\\"depend\\\": {\\n\\\"requests\\\": \\\"A Python library for making HTTP requests.\\\",\\n\\\"Sunrise-Sunset API\\\": \\\"A web API for getting sunrise and sunset times.\\\"\\n}\\n}\"", "description": "tool development"}
{"input persona": "A defense attorney specializing in property crimes in Wisconsin", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Crime Statistics Interface\\\",\\n\\\"description\\\": \\\"Fetches property crime data for a specific year in Wisconsin using the FBI's UCR Program API\\\",\\n\\\"function_name\\\": \\\"get_property_crimes_in_wisconsin\\\",\\n\\\"input_args\\\": \\\"year - The year for which to retrieve property crime data\\\",\\n\\\"return\\\": \\\"The total number of property crimes reported in Wisconsin for the given year\\\",\\n\\\"depend\\\": \\\"requests library, FBI's Uniform Crime Reporting (UCR) Program API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A working mother who is a member of FEME in the entertainment industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Content Rating Interface\\\",\\n\\\"description\\\": \\\"An interface that rates a script based on its appropriateness, violent language, and adult content. Useful for individuals in the entertainment industry to quickly assess if a script is suitable for a certain audience.\\\",\\n\\\"function_name\\\": \\\"evaluate_script_content\\\",\\n\\\"input_args\\\": [\\\"script_text\\\"],\\n\\\"return\\\": \\\"A dictionary with percentages of appropriate content, violent language, and adult content.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a composer from Mongolia who specializes in orchestral music and respects Hungarian music", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Style Transfer Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to generate music in Hungarian style using a melody as input. It uses a pre-trained model from Magenta's Music Transformer that has been fine-tuned with Hungarian orchestral music.\\\",\\n\\\"function_name\\\": \\\"generate_hungarian_style_music\\\",\\n\\\"input_args\\\": \\\"melody - a Melody object or a string representing a melody in MIDI format\\\",\\n\\\"return\\\": \\\"a MIDI file representing a music piece in Hungarian style\\\",\\n\\\"depend\\\": \\\"Magenta's Music Transformer\\\"\\n}\"", "description": "tool development"}
{"input persona": "A multilingual South Carolina business owner who has used translation services in the past", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Translation Interface\\\",\\n  \\\"description\\\": \\\"This interface translates the input text to the target language using a pre-trained model from HuggingFace's Transformers library.\\\",\\n  \\\"function_name\\\": \\\"translate_text\\\",\\n  \\\"input_args\\\": [\\n    {\\\"input_text\\\": \\\"The text you want to translate.\\\"},\\n    {\\\"target_lang\\\": \\\"The target language you want to translate to. For example, 'en' for English, 'fr' for French, etc.\\\"}\\n  ],\\n  \\\"return\\\": \\\"The translated text.\\\",\\n  \\\"depend\\\": \\\"HuggingFace's Transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A service station owner who values timely and reliable towing services for their customers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tow Truck Request Interface\\\",\\n\\\"description\\\": \\\"An interface for requesting tow trucks using the Uber API. Users only need to input the location of the broken-down vehicle and the interface will request a tow truck from the nearest service provider.\\\",\\n\\\"function_name\\\": \\\"request_tow_truck\\\",\\n\\\"input_args\\\": \\\"location: a tuple or list containing two elements: the latitude and longitude of the vehicle's location\\\",\\n\\\"return\\\": \\\"JSON response from the Uber API, detailing the status of the request\\\",\\n\\\"depend\\\": \\\"Uber for Business API, requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A financial advisor always keen on negotiating the best deal for the family's business interests", "synthesized text": "\"{\\n\\\"name\\\": \\\"Stock Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Alpha Vantage API to fetch historical stock data and a pre-trained model from TensorFlow to predict future stock prices.\\\",\\n\\\"function_name\\\": \\\"predict_stock_price\\\",\\n\\\"input_args\\\": {\\\"symbol\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"float\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"numpy\\\", \\\"tensorflow\\\"],\\\"Web APIs\\\": [\\\"Alpha Vantage API\\\"], \\\"machine learning models\\\": [\\\"tensorflow model\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am a softball player who idolizes Coach Hays and dreams of being coached by him.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Game Strategy Simulation Interface\\\",\\n\\\"description\\\": \\\"Simulate a game of softball and suggest the most strategic move based on the current state of the game.\\\",\\n\\\"function_name\\\": \\\"predict_next_move\\\",\\n\\\"input_args\\\": {\\\"game_state\\\": \\\"A dictionary representing the current state of the game.\\\"},\\n\\\"return\\\": \\\"The predicted most strategic move.\\\",\\n\\\"depend\\\": \\\"Python libraries: pybaseball, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "邵国华的忠实粉丝，喜欢收集他的相关资讯。", "synthesized text": "\"{\\n  \\\"name\\\": \\\"\\u65b0\\u95fb\\u6293\\u53d6\\u63a5\\u53e3\\\",\\n  \\\"description\\\": \\\"\\u8c03\\u7528\\u65b0\\u95fbAPI\\u83b7\\u53d6\\u4e0e\\u5173\\u952e\\u8bcd\\u76f8\\u5173\\u7684\\u6700\\u65b0\\u65b0\\u95fb\\\",\\n  \\\"function_name\\\": \\\"get_latest_news\\\",\\n  \\\"input_args\\\": \\\"keyword\\\",\\n  \\\"return\\\": \\\"\\u4e00\\u4e2a\\u5305\\u542b\\u6700\\u65b0\\u65b0\\u95fb\\u6807\\u9898\\u3001\\u63cf\\u8ff0\\u548c\\u94fe\\u63a5\\u7684\\u5217\\u8868\\\",\\n  \\\"depend\\\": \\\"requests\\u5e93, GNews API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Um proprietário de restaurante interessado em promover seu estabelecimento através do aplicativo de entrega de comida", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface de Promo\\u00e7\\u00e3o de Restaurante\\\",\\n\\\"description\\\": \\\"Cria uma promo\\u00e7\\u00e3o para um restaurante no aplicativo JustEat. O usu\\u00e1rio precisa fornecer o nome e a localiza\\u00e7\\u00e3o do restaurante.\\\",\\n\\\"function_name\\\": \\\"create_promotion\\\",\\n\\\"input_args\\\": {\\n    \\\"restaurant_name\\\": \\\"O nome do restaurante.\\\",\\n    \\\"restaurant_location\\\": \\\"A localiza\\u00e7\\u00e3o do restaurante.\\\"\\n},\\n\\\"return\\\": \\\"Um booleano indicando se a promo\\u00e7\\u00e3o foi criada com sucesso.\\\",\\n\\\"depend\\\": \\\"API JustEat\\\"\\n}\"", "description": "tool development"}
{"input persona": "a construction worker who has previously worked on hospital projects.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Material Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the amount of building materials required for a new hospital construction project based on data from previously completed projects.\\\",\\n\\\"function_name\\\": \\\"estimate_materials\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"A path to a csv file with 'project_size' and 'material_amount' columns\\\",\\n    \\\"new_project_size\\\": \\\"The size of the new project for which we want to estimate the materials\\\"\\n},\\n\\\"return\\\": \\\"The estimated amount of materials required for the new project\\\",\\n\\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "中国深圳的一名电动车狂热爱好者和有30年驾驶经验的老司机", "synthesized text": "\"{\\n  \\\"name\\\": \\\"\\u7535\\u52a8\\u8f66\\u5145\\u7535\\u7ad9\\u67e5\\u8be2\\u63a5\\u53e3\\\",\\n  \\\"description\\\": \\\"\\u6839\\u636e\\u7528\\u6237\\u7684\\u4f4d\\u7f6e\\uff0c\\u8fd4\\u56de\\u9644\\u8fd1\\u7684\\u7535\\u52a8\\u8f66\\u5145\\u7535\\u7ad9\\u3002\\\",\\n  \\\"function_name\\\": \\\"get_nearby_ev_charging_stations\\\",\\n  \\\"input_args\\\": [\\\"location\\\"],\\n  \\\"return\\\": \\\"\\u9644\\u8fd1\\u7684\\u7535\\u52a8\\u8f66\\u5145\\u7535\\u7ad9\\u540d\\u79f0\\u5217\\u8868\\\",\\n  \\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner in need of .htaccess optimization for their e-commerce website", "synthesized text": "\"{\\n\\\"name\\\": \\\"htaccess Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface uses Python's os, pathlib, and re libraries to handle file operations and regular expressions. Users only need to input the path to their .htaccess file, and our interface will perform common optimizations and return the optimized .htaccess content.\\\",\\n\\\"function_name\\\": \\\"optimize_htaccess\\\",\\n\\\"input_args\\\": \\\"path_to_htaccess\\\",\\n\\\"return\\\": \\\"A message indicating that the optimized .htaccess content has been written back to the file\\\",\\n\\\"depend\\\": \\\"Python's os, pathlib, and re libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A paranormal investigator who provides real-life inspiration and spooky stories for the screenplays", "synthesized text": "\"{\\n\\\"name\\\": \\\"Ghost Activity Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a machine learning model to analyze audio files for potential EVPs (Electronic Voice Phenomena).\\\",\\n\\\"function_name\\\": \\\"detect_evp\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A list of timestamps in the audio file where potential EVPs occur.\\\",\\n\\\"depend\\\": [\\\"librosa library\\\", \\\"tensorflow.keras\\\", \\\"pre-trained machine learning model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A technophobe uncle who questions the authenticity and artistic integrity of digital effects in movies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Deepfake Detection Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model to detect if a video has been digitally manipulated, i.e., is a deepfake.\\\",\\n\\\"function_name\\\": \\\"is_deepfake\\\",\\n\\\"input_args\\\": {\\n    \\\"video_path\\\": \\\"The path to the video file to be analyzed.\\\"\\n},\\n\\\"return\\\": \\\"True if the video is a deepfake, False otherwise.\\\",\\n\\\"depend\\\": \\\"DeepFace library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A meticulous classic car restorer who debates the value of four wheels vs. two with their motorcycle enthusiast counterpart", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Price Comparison Interface\\\",\\n\\\"description\\\" : \\\"This interface allows users to input the make, model, and year of a vehicle to get its current estimated price. Ideal for car and motorcycle enthusiasts who want to compare the value of different vehicles.\\\",\\n\\\"function_name\\\" : \\\"get_vehicle_price\\\",\\n\\\"input_args\\\" : [\\\"make\\\", \\\"model\\\", \\\"year\\\"],\\n\\\"return\\\" : \\\"Estimated price of the vehicle\\\",\\n\\\"depend\\\" : \\\"Web API: Vehicle Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A client who relies on the optimized performance of the embedded systems for their product", "synthesized text": "\"{\\n\\\"name\\\": \\\"Embedded System Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to return the current system's performance metrics using the psutil library\\\",\\n\\\"function_name\\\": \\\"get_system_performance_metrics\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"Dictionary containing system performance metrics such as CPU usage percentage, virtual memory usage percentage, disk usage percentage, and boot time in seconds.\\\",\\n\\\"depend\\\": \\\"psutil library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A lifelong city dweller who loves the convenience of apartment living and has never thought about chicken raising", "synthesized text": "\"{\\n\\\"name\\\": \\\"Egg Production Predictor Interface\\\",\\n\\\"description\\\": \\\"Predict the egg production of a chicken based on its breed, age, and health condition.\\\",\\n\\\"function_name\\\": \\\"predict_egg_production\\\",\\n\\\"input_args\\\": [\\\"breed\\\", \\\"age\\\", \\\"health\\\"],\\n\\\"return\\\": \\\"Estimated number of eggs that the chicken will produce in a week.\\\",\\n\\\"depend\\\": \\\"Scikit-learn library, a pre-trained machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An environmental scientist who studies the impact of 3D printing on waste reduction and carbon footprint", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model File Size Estimation Interface\\\",\\n\\\"description\\\": \\\"Estimates the volume of a 3D model from an STL file. This can be used to estimate the amount of 3D print material needed, which is useful for environmental scientists studying waste reduction and carbon footprint associated with 3D printing.\\\",\\n\\\"function_name\\\": \\\"estimate_3D_model_volume\\\",\\n\\\"input_args\\\": \\\"stl_file_path\\\",\\n\\\"return\\\": \\\"Volume of the 3D model in cubic units consistent with the units used in the STL file.\\\",\\n\\\"depend\\\": \\\"numpy-stl Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful entrepreneur who wants to donate to the university but disagrees with the funding priority", "synthesized text": "\"{\\n\\\"name\\\": \\\"University Donation Distribution Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to distribute their donations to specific departments or projects at a university. The function communicates with a hypothetical web API provided by the university.\\\",\\n\\\"function_name\\\": \\\"distribute_donation\\\",\\n\\\"input_args\\\": {\\\"amount\\\": \\\"float or int\\\", \\\"distribution\\\": \\\"dict\\\"},\\n\\\"return\\\": \\\"str\\\",\\n\\\"depend\\\": \\\"requests library, university's web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A criminal justice major with firsthand experience in the criminal justice system, providing a unique perspective to the research", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Crime Rate Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the crime rate for a given number of future periods based on historical crime data.\\\",\\n  \\\"function_name\\\": \\\"predict_crime_rate\\\",\\n  \\\"input_args\\\": [\\\"file_path\\\", \\\"periods\\\"],\\n  \\\"return\\\": \\\"Dataframe with columns 'ds' (date), 'yhat' (predicted crime count), 'yhat_lower' (lower bound of prediction), 'yhat_upper' (upper bound of prediction)\\\",\\n  \\\"depend\\\": [\\\"pandas\\\", \\\"fbprophet\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An orthodontist who’s been out of the loop with industry updates.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Dental Research Abstracts Interface\\\",\\n  \\\"description\\\": \\\"This interface fetches the abstracts of the most recent research papers on a list of specified dental topics from PubMed.\\\",\\n  \\\"function_name\\\": \\\"get_pubmed_abstracts\\\",\\n  \\\"input_args\\\": [\\\"topics\\\", \\\"num_papers\\\"],\\n  \\\"return\\\": \\\"A dictionary where the keys are the topics of interest, and the values are lists of the most recent abstracts on that topic\\\",\\n  \\\"depend\\\": \\\"Python requests library, PubMed API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A determined entrepreneur developing an application for efficient childcare management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Activity Recognition Interface\\\",\\n\\\"description\\\": \\\"Recognize children's activities from a video file using a pre-trained deep learning model.\\\",\\n\\\"function_name\\\": \\\"recognize_child_activity\\\",\\n\\\"input_args\\\": \\\"path_to_video: The path to the video file.\\\",\\n\\\"return\\\": \\\"A list of recognized activities from the video.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, NumPy, the 'i3d-kinetics-400' model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research scientist consistently submitting research papers for publication", "synthesized text": "\"{\\n\\\"name\\\": \\\"Automated Research Paper Submission Interface\\\",\\n\\\"description\\\": \\\"An interface to automate the process of submitting research papers to arXiv. Users input the title, authors, abstract, comments, journal reference, and the path to the paper (pdf), and the interface returns the submission status.\\\",\\n\\\"function_name\\\": \\\"submit_paper_to_arxiv\\\",\\n\\\"input_args\\\": [\\\"title\\\", \\\"authors\\\", \\\"abstract\\\", \\\"comments\\\", \\\"journal_reference\\\", \\\"paper_path\\\"],\\n\\\"return\\\": \\\"Submission status (HTTP response code)\\\",\\n\\\"depend\\\": \\\"arXiv API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Western classical musician who is not familiar with Indian classical music.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Raga Recognition Interface\\\",\\n\\\"description\\\": \\\"Recognizes the raga of a piece of Indian classical music given the path to an audio file\\\",\\n\\\"function_name\\\": \\\"predict_raga\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"Name of the recognized raga\\\",\\n\\\"depend\\\": \\\"tensorflow, pydub, numpy, a pre-trained Raga recognition model (raga_model.h5)\\\"\\n}\"", "description": "tool development"}
{"input persona": "a devops engineer familiar with PHP-FPM and Linux server operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Server Load Monitor Interface\\\",\\n\\\"description\\\": \\\"This interface provides server load details such as CPU usage, memory usage, disk usage, network statistics, and number of PHP-FPM processes.\\\",\\n\\\"function_name\\\": \\\"get_server_load\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A dictionary with keys 'cpu_percent', 'memory_percent', 'disk_percent', 'bytes_sent', 'bytes_recv', and 'php_fpm_process_count'.\\\",\\n\\\"depend\\\": [\\\"psutil\\\", \\\"subprocess\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a young aspiring biologist admiring Wayne Nicholson's career", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequencing Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to count the occurrence of each nucleotide in a DNA sequence. The user inputs a DNA sequence file in FASTA format, and the interface returns a dictionary with the count of each nucleotide (A, T, C, G). It's built using Biopython.\\\",\\n\\\"function_name\\\": \\\"count_nucleotides_in_sequence\\\",\\n\\\"input_args\\\": {\\n    \\\"fasta_file\\\": \\\"String (path to the FASTA file)\\\"\\n},\\n\\\"return\\\": \\\"Dictionary (counts of each nucleotide in the sequence)\\\",\\n\\\"depend\\\": \\\"BioPython library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An IT professional living in South Gloucestershire", "synthesized text": "\"{\\n\\\"name\\\": \\\"Internet Speed Test Interface\\\",\\n\\\"description\\\": \\\"This interface measures the download speed, upload speed, and ping latency of the user's current internet connection.\\\",\\n\\\"function_name\\\": \\\"test_internet_speed\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A dictionary with keys 'Download Speed (Mbit/s)', 'Upload Speed (Mbit/s)', and 'Ping Latency (ms)', and their corresponding values.\\\",\\n\\\"depend\\\": \\\"speedtest-cli Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skeptical Australian journalist who is critical of the honors system", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Honor System Validation Interface\\\",\\n  \\\"description\\\": \\\"An interface that checks whether a person has received an honor from the official Australian Honours System.\\\",\\n  \\\"function_name\\\": \\\"check_honor_awarded\\\",\\n  \\\"input_args\\\": {\\\"name\\\": \\\"Name of the person to validate\\\"},\\n  \\\"return\\\": {\\\"status\\\": \\\"Boolean indicating if the person has been awarded\\\", \\\"award_detail\\\": \\\"Details of the award if person has been awarded, otherwise None\\\"},\\n  \\\"depend\\\": {\\\"python libraries\\\": [\\\"BeautifulSoup\\\", \\\"requests\\\"],\\n             \\\"Web APIs\\\": [\\\"https://www.pmc.gov.au/government/its-honour\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An old student of Harper College who is a big patriot (very proud of their own culture and resistant to interact with other cultures).", "synthesized text": "\"{\\n\\\"name\\\": \\\"International Culture Understanding Interface\\\",\\n\\\"description\\\": \\\"This interface translates a given text from the specified source language to the target language, default is from French to English.\\\",\\n\\\"function_name\\\": \\\"translate_text\\\",\\n\\\"input_args\\\": \\\"text - The text in source language to be translated. src_lang - The source language (default is 'fr' for French). trg_lang - The target language (default is 'en' for English).\\\",\\n\\\"return\\\": \\\"Translated text in the target language.\\\",\\n\\\"depend\\\": \\\"Hugging Face's Transformer library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A non-English speaking tour operator from Spain who has a niece residing in the Fort Calhoun School District.", "synthesized text": "\"{\\n\\\"name\\\": \\\"School District Information Interface\\\",\\n\\\"description\\\": \\\"Interface to gather data about a specific school district from the National Center for Education Statistics (NCES)\\\",\\n\\\"function_name\\\": \\\"get_school_district_info\\\",\\n\\\"input_args\\\": {\\n    \\\"district_id\\\": \\\"The ID of the school district\\\"\\n},\\n\\\"return\\\": {\\n    \\\"total_students\\\": \\\"The total number of students in the district\\\",\\n    \\\"total_teachers\\\": \\\"The total number of teachers in the district\\\",\\n    \\\"total_schools\\\": \\\"The total number of schools in the district\\\"\\n},\\n\\\"depend\\\": [\\\"requests\\\", \\\"json\\\", \\\"National Center for Education Statistics (NCES) API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a Turkish marine engineer interested in oil exploration technologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Seismic Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to visualize seismic data for oil exploration.\\\",\\n\\\"function_name\\\": \\\"plot_seismic_data\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the seismic data file in miniSEED format.\\\"},\\n\\\"return\\\": \\\"A plot of the seismic waveforms is displayed.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"obspy\\\", \\\"matplotlib.pyplot\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A field operations coordinator who works closely with affected communities to implement the organization's projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Implementation Progress Tracking Interface\\\",\\n\\\"description\\\": \\\"An interface to track the progress of project implementations. It fetches real-time data from a specified Google Sheet and returns a progress report including the total number of projects, the number of completed projects, and the project completion percentage.\\\",\\n\\\"function_name\\\": \\\"project_progress_report\\\",\\n\\\"input_args\\\": [\\\"sheet_id\\\", \\\"sheet_name\\\"],\\n\\\"return\\\": {\\\"Total Projects\\\": \\\"int\\\", \\\"Completed Projects\\\": \\\"int\\\", \\\"Project Completion Percentage\\\": \\\"float\\\"},\\n\\\"depend\\\": [\\\"pandas\\\", \\\"gspread\\\", \\\"Google Sheets API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A reporter documenting the impact of humanitarian efforts in Nigeria and sharing stories of resilience and hope", "synthesized text": "\"{\\n\\\"name\\\": \\\"Translation Interface\\\",\\n\\\"description\\\": \\\"This interface takes text in a local Nigerian language (Hausa, Yoruba, Igbo) and translates it to English using a model from Hugging Face Transformers.\\\",\\n\\\"function_name\\\": \\\"translate_nigerian_to_english\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"string\\\", \\\"language\\\": \\\"string (hausa, yoruba, igbo)\\\"},\\n\\\"return\\\": \\\"string (translated text)\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A vintage gas station owner who provides the event organizer with authentic signage and props to enhance the nostalgic atmosphere", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vintage Signage and Props Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the eBay Finding API to search for vintage gas station signs and props. The user only needs to input the desired decade, and our interface will return a list of vintage gas station signs and props from that decade available for purchase on eBay.\\\",\\n\\\"function_name\\\": \\\"get_vintage_signs_props\\\",\\n\\\"input_args\\\": \\\"decade\\\",\\n\\\"return\\\": \\\"A list of tuples, each containing the title of an item and a link to its eBay page.\\\",\\n\\\"depend\\\": \\\"eBay Finding API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A 24-year-old pregnant woman who is seeking wellness services for her first pregnancy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pregnancy Wellness Services Finder\\\",\\n\\\"description\\\": \\\"This interface takes a user's location and returns a list of nearby wellness services perfect for pregnant women, such as prenatal yoga classes, maternity clinics, or nutritionists.\\\",\\n\\\"function_name\\\": \\\"get_pregnancy_wellness_services\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"a string of latitude and longitude separated by a comma\\\"},\\n\\\"return\\\": \\\"a dictionary where the keys are the wellness services and the values are lists of the nearby service providers\\\",\\n\\\"depend\\\": \\\"requests library and Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a beginner PHP developer interested in Cairo, a 2D graphics library.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cairo Graphics Library Interface\\\",\\n\\\"description\\\": \\\"An interface that wraps the pycairo library, a Python bindings for the cairo graphics library. It allows users to create 2D graphics just by providing the type of shape (circle, rectangle, line, etc.), its dimensions, and the file path where the image will be saved.\\\",\\n\\\"function_name\\\": \\\"create_shape\\\",\\n\\\"input_args\\\": {\\n  \\\"shape\\\": \\\"Type of shape (circle, rectangle, line, etc.)\\\",\\n  \\\"dimensions\\\": \\\"Dimensions of the shape. For rectangle it's [x, y, width, height], for circle it's [x, y, radius], for line it's [start_x, start_y, end_x, end_y]\\\",\\n  \\\"file_path\\\": \\\"The file path where the final image will be saved\\\"\\n},\\n\\\"return\\\": \\\"A png image of the specified shape is saved to the provided file path.\\\",\\n\\\"depend\\\": \\\"pycairo library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiast about central bank digital currencies (CBDCs) and blockchain technology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Transaction Verification Interface\\\",\\n\\\"description\\\": \\\"This interface takes a blockchain transaction hash as input and returns the details of that transaction, such as the transaction amount, sender and receiver addresses, etc. It is particularly useful for users who want to verify a transaction without having to understand the complexities of blockchain technology.\\\",\\n\\\"function_name\\\": \\\"get_transaction_details\\\",\\n\\\"input_args\\\": \\\"hash\\\",\\n\\\"return\\\": \\\"A dictionary with details of the transaction\\\",\\n\\\"depend\\\": \\\"requests library, Blockchain.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A startup founder in need of a secure and user-friendly login system, seeking the expertise of the web developer to implement Devise", "synthesized text": "\"{\\n\\\"name\\\": \\\"Secure Login System Interface\\\",\\n\\\"description\\\": \\\"This interface provides a secure and user-friendly login system for web applications. It includes register, login, and logout functions.\\\",\\n\\\"function_name\\\": [\\\"register\\\", \\\"login\\\", \\\"logout\\\"],\\n\\\"input_args\\\": {\\\"register\\\": [\\\"username\\\", \\\"password\\\"], \\\"login\\\": [\\\"username\\\", \\\"password\\\"], \\\"logout\\\": []},\\n\\\"return\\\": {\\\"register\\\": \\\"None\\\", \\\"login\\\": \\\"Boolean\\\", \\\"logout\\\": \\\"None\\\"},\\n\\\"depend\\\": [\\\"Flask\\\", \\\"Flask-SQLAlchemy\\\", \\\"Werkzeug\\\", \\\"Flask-Login\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a librarian at a university library who advises students on citation practices.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Citation Format Converter Interface\\\",\\n\\\"description\\\": \\\"This interface converts bibliographical references among different citation styles. Users only need to input the citation string and the target citation style, and the interface will return the converted citation string.\\\",\\n\\\"function_name\\\": \\\"convert_citation_style\\\",\\n\\\"input_args\\\": [\\\"citation_string\\\", \\\"target_style\\\"],\\n\\\"return\\\": \\\"The converted citation string in the target citation style.\\\",\\n\\\"depend\\\": \\\"The function leverages the Python library 'citeproc-py' to convert between citation styles.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computer engineer who encourages the student's problem-solving skills and guides them towards using their logical thinking in real-life situations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Python Code Problem Generation Interface\\\",\\n  \\\"description\\\": \\\"An interface that generates Python code problems. The user specifies the difficulty level (easy, medium, hard), and the interface returns a problem statement.\\\",\\n  \\\"function_name\\\": \\\"generate_problem\\\",\\n  \\\"input_args\\\": {\\n    \\\"difficulty\\\": \\\"A string that specifies the difficulty level of the problem (easy, medium, hard).\\\"\\n  },\\n  \\\"return\\\": \\\"A string that contains the problem statement.\\\",\\n  \\\"depend\\\": \\\"Python standard library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An openly gay man working in a big tech company, who used to hide his identity in various social situations.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Identity Protection Interface\\\",\\n\\\"description\\\": \\\"This interface generates fake data to help protect the identity of individuals in online environments.\\\",\\n\\\"function_name\\\": \\\"generate_fake_data\\\",\\n\\\"input_args\\\": {\\n  \\\"data_type\\\": \\\"The type of data the user wants to generate (e.g., 'name', 'address', 'email', 'job', 'company', 'text').\\\"\\n},\\n\\\"return\\\": \\\"The generated fake data. If the user specifies a data type that is not supported, the function returns a message saying 'Data type not supported'.\\\",\\n\\\"depend\\\": [\\\"Faker python library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A data scientist who specializes in federated learning and secure multi-party computation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Federated Learning Model Training Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input a path to a dataset file and returns a trained federated learning model.\\\",\\n\\\"function_name\\\": \\\"train_federated_model\\\",\\n\\\"input_args\\\": \\\"path_to_csv\\\",\\n\\\"return\\\": \\\"Trained Federated Learning Model\\\",\\n\\\"depend\\\": \\\"TensorFlow Federated, Pandas, TensorFlow, Scikit-Learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A textile and clothing industry analyst from a developing country", "synthesized text": "\"{\\n\\\"name\\\": \\\"Textile Fabric Property Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts certain properties of a fabric given its composition and manufacturing process details. The users have to input a dictionary with key-value pairs representing the fabric content (like cotton %, polyester %, etc.) and manufacturing process (like yarn count, weave type, etc.), and our interface will return the predicted properties (like durability, breathability, etc.).\\\",\\n\\\"function_name\\\": \\\"predict_fabric_properties\\\",\\n\\\"input_args\\\": {\\\"fabric_info\\\": \\\"A dictionary with keys being fabric composition and manufacturing details, and values being the corresponding details about the fabric.\\\"},\\n\\\"return\\\": \\\"A dictionary with the predicted properties of the fabric.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn.externals.joblib\\\", \\\"Pre-trained Machine Learning Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A technology incubator manager who offers mentorship and resources to help the innovative database management system succeed", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Schema Visualization Interface\\\",\\n\\\"description\\\": \\\"An interface to visualize the structure of a database. The user provides a database URI, and the interface will return a graph representing the schema.\\\",\\n\\\"function_name\\\": \\\"visualize_database_schema\\\",\\n\\\"input_args\\\": {\\\"db_uri\\\": \\\"Database connection string in the form of 'postgresql+psycopg2://user:password@localhost/mydatabase'.\\\"},\\n\\\"return\\\": \\\"The path of the image file ('output.png') representing the database schema.\\\",\\n\\\"depend\\\": \\\"Python libraries (sqlalchemy, eralchemy)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A modern progressive who champions for reform within the Armenian Church", "synthesized text": "\"{\\n\\\"name\\\": \\\"Armenian Church Calendar Interface\\\",\\n\\\"description\\\": \\\"This interface provides the Armenian Church calendar for a given year and month.\\\",\\n\\\"function_name\\\": \\\"get_armenian_church_calendar\\\",\\n\\\"input_args\\\": [\\\"year\\\", \\\"month\\\"],\\n\\\"return\\\": \\\"A dictionary that contains the detailed Armenian Church calendar for the given month\\\",\\n\\\"depend\\\": \\\"requests library and Armenian Church Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data analyst who ensures that all financial transactions are accurately recorded and transparently reported", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Transaction Checker Interface\\\",\\n\\\"description\\\": \\\"This interface takes as input a CSV file of financial transactions, checks the balance of each transaction, ensuring the starting balance minus the amount equals the ending balance. If any discrepancies are found, it returns the incorrect entries.\\\",\\n\\\"function_name\\\": \\\"check_financial_transactions\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"A DataFrame containing any financial transactions with discrepancies\\\",\\n\\\"depend\\\": \\\"pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A reliable and efficient individual with extensive knowledge in property maintenance and tenant management", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Review Interface\\\",\\n\\\"description\\\": \\\"An interface to get a quick overview of a property using the Zillow API. The user inputs the property address and receives the market value, number of bedrooms and bathrooms, square footage, year built, and lot size.\\\",\\n\\\"function_name\\\": \\\"get_property_overview\\\",\\n\\\"input_args\\\": {\\n    \\\"address\\\": \\\"The address of the property. Format: '1600 Amphitheatre Pkwy, Mountain View, CA'\\\"\\n    },\\n\\\"return\\\": {\\n    \\\"market_value\\\": \\\"The current market value of the property.\\\",\\n    \\\"bedrooms\\\": \\\"The number of bedrooms in the property.\\\",\\n    \\\"bathrooms\\\": \\\"The number of bathrooms in the property.\\\",\\n    \\\"square_feet\\\": \\\"The square footage of the property.\\\",\\n    \\\"year_built\\\": \\\"The year the property was built.\\\",\\n    \\\"lot_size\\\": \\\"The size of the property lot in square feet.\\\"\\n    },\\n\\\"depend\\\": \\\"Python's requests library, Zillow API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A supportive teacher who provides extra practice and personalized attention to improve multiplication skills", "synthesized text": "\"{\\n\\\"name\\\": \\\"Multiplication Practice Interface\\\",\\n\\\"description\\\": \\\"Generate a set of multiplication problems for practice\\\",\\n\\\"function_name\\\": \\\"generate_multiplication_problems\\\",\\n\\\"input_args\\\": \\\"number_of_problems - The number of multiplication problems to generate\\\",\\n\\\"return\\\": \\\"A list of tuples, where each tuple represents a multiplication problem (num1, num2, num1*num2)\\\",\\n\\\"depend\\\": \\\"Python's random library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A podcast host who explores the history and impact of classic albums", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Album Information Retrieval Interface\\\",\\n  \\\"description\\\": \\\"This interface retrieves detailed information about a specific album using the Spotify Web API. It returns the album name, artists, release date, total track count, and a list of tracks with their durations.\\\",\\n  \\\"function_name\\\": \\\"get_album_info\\\",\\n  \\\"input_args\\\": [\\\"album_name\\\"],\\n  \\\"return\\\": {\\n    \\\"name\\\": \\\"string\\\",\\n    \\\"artists\\\": \\\"list of strings\\\",\\n    \\\"release_date\\\": \\\"string\\\",\\n    \\\"total_tracks\\\": \\\"integer\\\",\\n    \\\"tracks\\\": \\\"list of objects (name: string, duration: integer)\\\"\\n  },\\n  \\\"depend\\\": [\\\"python library: requests, base64, json\\\", \\\"Web API: Spotify\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An older sibling who has experience in the field of computer science and provides guidance on AI implementation in robotics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Robot Movement Control Interface\\\",\\n\\\"description\\\": \\\"An interface for controlling the movements of a robot. Given a target position for the robot's arm, it calculates the angles to set for each joint to reach this position.\\\",\\n\\\"function_name\\\": \\\"calculate_joint_angles\\\",\\n\\\"input_args\\\": {\\n    \\\"robot\\\": \\\"A pypot Robot object representing the robot to control.\\\",\\n    \\\"target_position\\\": \\\"A list of three numbers representing the desired position of the robot's arm in 3D space (x, y, z).\\\"\\n},\\n\\\"return\\\": \\\"A dictionary where the keys are the names of the motors in the robot's arm and the values are the angles (in degrees) to set for each joint.\\\",\\n\\\"depend\\\": \\\"This interface uses the pypot library for robot control and the numpy library for mathematical operations.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bitter Legia Warsaw fan who can't forget the team's past losses", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match History Interface\\\",\\n\\\"description\\\": \\\"Provides information about past matches of a football team. Users only need to input the team's name, and the interface will return the match results and opponents.\\\",\\n\\\"function_name\\\": \\\"get_past_matches\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing the date, opponent, and result of a past match.\\\",\\n\\\"depend\\\": \\\"football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An advocate for Aboriginal rights who recognizes the truck driver's contributions to the community and seeks their support in raising awareness", "synthesized text": "\"{\\n\\\"name\\\": \\\"Truck Route Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface takes user's current location and destination, then returns the optimal route. It can be used by truck drivers or anyone planning a long journey, and can also be used to plan routes that include stops at Aboriginal communities for awareness campaigns.\\\",\\n\\\"function_name\\\": \\\"get_optimized_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"A dictionary with details of the optimal route including duration, distance, start address and end address. If there's an error it will return an error message with the status returned by the Google Maps Directions API.\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young singer-songwriter seeking guidance on breaking into the Chicago music scene", "synthesized text": "\"{\\n\\\"name\\\": \\\"Live Music Venues Search Interface\\\",\\n\\\"description\\\": \\\"An interface that returns the top-rated live music venues in a specified city. This can help aspiring musicians find places to perform and connect with the local music scene.\\\",\\n\\\"function_name\\\": \\\"get_top_music_venues\\\",\\n\\\"input_args\\\": {\\\"city\\\": \\\"a string representing the city where the user wants to find live music venues\\\"},\\n\\\"return\\\": \\\"a list of dictionaries, each containing the name, address, and rating of a top-rated live music venue in the specified city\\\",\\n\\\"depend\\\": \\\"Yelp Fusion API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A SETI scientist dedicated to searching for signals from intelligent extraterrestrial civilizations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Radio Signal Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analyzing radio signals to search for potential extraterrestrial intelligence. It returns the Fourier transform of the signal.\\\",\\n\\\"function_name\\\": \\\"analyze_signal\\\",\\n\\\"input_args\\\": \\\"path_to_wav_file - a string that is the path to a WAV file containing radio signal data\\\",\\n\\\"return\\\": \\\"A dictionary containing the frequencies and Fourier transform of the signal.\\\",\\n\\\"depend\\\": \\\"Python libraries: numpy, scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young researcher passionate about understanding the role of stereotypes in decision making", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Top Stereotype Words Extraction Interface\\\",\\n  \\\"description\\\": \\\"Extracts and counts the most common stereotype-related words in a given text file using a pre-trained Natural Language Processing (NLP) model from Hugging Face.\\\",\\n  \\\"function_name\\\": \\\"extract_top_stereotype_words\\\",\\n  \\\"input_args\\\": \\\"a path to a text file\\\",\\n  \\\"return\\\": \\\"a list of tuples, where each tuple contains a stereotype word and its frequency of occurrence in the text\\\",\\n  \\\"depend\\\": \\\"Hugging Face's 'dslim/bert-base-NER' NLP model, Counter from collections library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chemical engineer seeking advice on the feasibility of scaling up production for a new compound", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Reaction Feasibility Interface\\\",\\n\\\"description\\\": \\\"This interface uses a cheminformatics model to predict the feasibility of a given chemical reaction under standard conditions. It is useful for chemical engineers considering scaling up production for a new compound.\\\",\\n\\\"function_name\\\": \\\"evaluate_reaction_feasibility\\\",\\n\\\"input_args\\\": \\\"A string representing the chemical reaction in SMILES notation\\\",\\n\\\"return\\\": \\\"A boolean value, True if the reaction is predicted to be feasible and False otherwise\\\",\\n\\\"depend\\\": \\\"RDKit library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner looking for a simple and lightweight website without complex build processes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Static Website Generator Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to generate a simple static website using the Flask library. Users input the contents for the home page, about page, and contact page, and the interface generates the HTML files for these pages.\\\",\\n\\\"function_name\\\": \\\"create_static_website\\\",\\n\\\"input_args\\\": [\\\"homepage_content\\\", \\\"about_content\\\", \\\"contact_content\\\"],\\n\\\"return\\\": \\\"None, but runs a local server that serves the generated website.\\\",\\n\\\"depend\\\": \\\"Python Flask library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a single mother who identifies as a lesbian", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Mental Health Tips Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to provide mental health advice. Users only need to input their feeling or situation, and the interface will return some mental health tips.\\\",\\n  \\\"function_name\\\": \\\"mental_health_tips\\\",\\n  \\\"input_args\\\": \\\"input_feeling\\\",\\n  \\\"return\\\": \\\"Mental health advice string\\\",\\n  \\\"depend\\\": \\\"Hugging Face transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A wildlife biologist researching how these autonomous robots can help in monitoring and conserving endangered species", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Wildlife Monitoring Interface\\\",\\n  \\\"description\\\": \\\"An interface to identify and count different animal species in images taken by autonomous robots. The input is the path to an image file, and the output is the identified species and the number of individuals in the image.\\\",\\n  \\\"function_name\\\": \\\"wildlife_identification\\\",\\n  \\\"input_args\\\": [\\\"path_to_img\\\"],\\n  \\\"return\\\": \\\"A numpy array containing the identified species class.\\\",\\n  \\\"depend\\\": \\\"tensorflow, tensorflow_hub, a pre-trained model from TensorFlow Hub for wildlife identification\\\"\\n}\"", "description": "tool development"}
{"input persona": "a lifelong employee at a competing construction firm in Turkey", "synthesized text": "\"{\\n\\\"name\\\": \\\"Competitor Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface extracts important information from a competitor's website such as their projects, services, and news.\\\",\\n\\\"function_name\\\": \\\"get_competitor_info\\\",\\n\\\"input_args\\\": \\\"url - the URL of the competitor's website.\\\",\\n\\\"return\\\": \\\"A dictionary containing lists of the company's projects, services, and news.\\\",\\n\\\"depend\\\": \\\"Python's BeautifulSoup and requests libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced agricultural extension agent who provides guidance on optimizing potato yields", "synthesized text": "\"{\\n\\\"name\\\": \\\"Potato Crop Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the yield of a potato crop based on features like soil quality, rainfall, and temperature by using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_potato_yield\\\",\\n\\\"input_args\\\": {\\n    \\\"feature_dict\\\": \\\"A dictionary with keys 'soil_quality', 'rainfall', 'temperature' and their corresponding values.\\\",\\n    \\\"model_path\\\": \\\"The path to the pre-trained machine learning model. (optional)\\\"\\n},\\n\\\"return\\\": \\\"The predicted potato yield.\\\",\\n\\\"depend\\\": \\\"scikit-learn, pickle\\\"\\n}\"", "description": "tool development"}
{"input persona": "a homeless person living in a big city in the US who does not have access to the internet", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Free Food Locations Interface\\\",\\n  \\\"description\\\": \\\"Interface to retrieve information on free food locations such as food banks or soup kitchens based on a given location\\\",\\n  \\\"function_name\\\": \\\"get_free_food_locations\\\",\\n  \\\"input_args\\\": {\\n    \\\"city\\\": \\\"string representing the city\\\",\\n    \\\"state\\\": \\\"string representing the state\\\"\\n  },\\n  \\\"return\\\": \\\"list of dictionaries containing the names and addresses of free food locations\\\",\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\"],\\n    \\\"web APIs\\\": [\\\"US Department of Agriculture's Food and Nutrition Service API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "a devoted fan of Dr. Holly Atkinson who stays updated with her appearances and writings", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Dr. Holly Atkinson Event Tracker Interface\\\",\\n  \\\"description\\\": \\\"This interface searches for recent events or publications related to Dr. Holly Atkinson. Users only need to supply a search term related to Dr. Holly Atkinson, and the interface will return a list of recent activities associated with her.\\\",\\n  \\\"function_name\\\": \\\"get_recent_holly_atkinson_activities\\\",\\n  \\\"input_args\\\": {\\n    \\\"search_term\\\": \\\"A string containing the search term related to Dr. Holly Atkinson\\\"\\n  },\\n  \\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the title and link of a recent activity related to Dr. Holly Atkinson.\\\",\\n  \\\"depend\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\", \\\"Google's Programmable Search Engine API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I'm a Russian programmer who prefers working with CLI tools rather than GUI ones.", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Twitter Stream Interface\\\",\\n    \\\"description\\\": \\\"Monitors a real-time stream of tweets containing specific keywords.\\\",\\n    \\\"function_name\\\": \\\"stream_tweets\\\",\\n    \\\"input_args\\\": [\\\"keywords\\\"],\\n    \\\"return\\\": \\\"None, but prints tweets containing the specified keywords in real-time.\\\",\\n    \\\"depend\\\": \\\"Tweepy library and Twitter API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an ardent supporter of Bohemians, a Dublin-based football club with a long and storied history, a deep connection to my community, and an underdog spirit that resonates with me.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n\\\"description\\\": \\\"An interface that uses RapidAPI's football data API to retrieve detailed statistics of a football team's recent matches.\\\",\\n\\\"function_name\\\": \\\"get_football_match_statistics\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"A list of dictionaries that contain detailed statistics of the team's recent matches.\\\",\\n\\\"depend\\\": \\\"RapidAPI's Football Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A knowledgeable Las Vegas local who can show them the hidden gems and history of the city", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Site and Hidden Gems Locator\\\",\\n\\\"description\\\": \\\"This interface uses APIs from Google Places to return the historical sites and hidden gems around a user's current location.\\\",\\n\\\"function_name\\\": \\\"get_historical_sites_and_hidden_gems\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"A dictionary with two keys: 'Historical Sites' and 'Hidden Gems'. Each key maps to a list of places of the corresponding type.\\\",\\n\\\"depend\\\": \\\"Google Places API\\\"\\n}\"", "description": "tool development"}
{"input persona": "Soy una persona hispanohablante con conocimientos intermedios de bases de datos y SQL.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Interfaz de Consulta SQL\\\",\\n  \\\"description\\\": \\\"Permite a los usuarios ejecutar consultas SQL en una base de datos SQLite y devuelve los resultados de la consulta.\\\",\\n  \\\"function_name\\\": \\\"execute_sql_query\\\",\\n  \\\"input_args\\\": {\\n    \\\"database_path\\\": \\\"Ruta al archivo de la base de datos SQLite.\\\",\\n    \\\"sql_query\\\": \\\"Consulta SQL a ejecutar.\\\"\\n  },\\n  \\\"return\\\": \\\"Resultados de la consulta SQL como una lista de tuplas.\\\",\\n  \\\"depend\\\": \\\"Biblioteca sqlite3 en Python\\\"\\n}\"", "description": "tool development"}
{"input persona": "A craft supply company that provides materials and tools to the content creator in exchange for promotion", "synthesized text": "\"{\\n\\\"name\\\": \\\"Promotion Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves popularity metrics for a YouTube video using the YouTube's Data API v3, which can be used to measure the effectiveness of a promotion.\\\",\\n\\\"function_name\\\": \\\"get_video_metrics\\\",\\n\\\"input_args\\\": \\\"video_id - The ID of the YouTube video\\\",\\n\\\"return\\\": \\\"A dictionary containing the view count, like count, dislike count, and comment count for the video or None if the video does not exist.\\\",\\n\\\"depend\\\": \\\"YouTube's Data API v3\\\"\\n}\"", "description": "tool development"}
{"input persona": "一位產品經理，依賴軟件工程師的專業知識來領導項目開發", "synthesized text": "\"{\\n\\\"name\\\": \\\"Project Dependency Graph Interface\\\",\\n\\\"description\\\": \\\"An interface that generates a project dependency graph using NetworkX. The user inputs a list of tasks and their dependencies, and the interface outputs a graphical representation of the project's dependencies.\\\",\\n\\\"function_name\\\": \\\"create_dependency_graph\\\",\\n\\\"input_args\\\": {\\n    \\\"tasks\\\": \\\"A list of tasks\\\",\\n    \\\"dependencies\\\": \\\"A list of tuples representing dependencies between tasks\\\"\\n},\\n\\\"return\\\": \\\"A graphical representation of the project's dependencies\\\",\\n\\\"depend\\\": \\\"Python libraries: NetworkX, matplotlib.pyplot\\\"\\n}\"", "description": "tool development"}
{"input persona": "A foreign affairs reporter analyzing the role of global governance in addressing pressing global challenges", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Global Governance Document Analysis Interface\\\",\\n    \\\"description\\\": \\\"An interface that extracts and classifies geopolitical entities from a given text document.\\\",\\n    \\\"function_name\\\": \\\"extract_geopolitical_entities\\\",\\n    \\\"input_args\\\": {\\\"text_file_path\\\": \\\"string\\\"},\\n    \\\"return\\\": {\\\"geopolitical_entities\\\": \\\"set\\\"},\\n    \\\"depend\\\": {\\\"python libraries\\\": [\\\"nltk\\\", \\\"transformers from huggingface\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An e-commerce store owner looking to increase sales through effective email marketing strategies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Email Marketing Campaign Interface\\\",\\n\\\"description\\\": \\\"This interface allows a user to send marketing emails to a list of customers using the SendGrid API. It simplifies the process of sending multiple emails and allows the user to manage email marketing campaigns directly from their Python environment.\\\",\\n\\\"function_name\\\": \\\"send_marketing_email\\\",\\n\\\"input_args\\\": {\\n    \\\"sendgrid_api_key\\\": \\\"Your SendGrid API Key\\\",\\n    \\\"from_email\\\": \\\"The sender's email address\\\",\\n    \\\"to_emails\\\": \\\"A list of recipient email addresses\\\",\\n    \\\"subject\\\": \\\"The subject of the email\\\",\\n    \\\"content\\\": \\\"The content of the email\\\"\\n},\\n\\\"return\\\": \\\"This function does not return a value. It sends emails to the provided list of customers and prints the HTTP response status, body, and headers for each email sent.\\\",\\n\\\"depend\\\": \\\"SendGrid API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A devoted gospel choir member and Christian music enthusiast based in Chicago, Illinois.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Christian Music Lyrics Generator\\\",\\n  \\\"description\\\": \\\"Generates Christian music lyrics based on a seed line provided by the user\\\",\\n  \\\"function_name\\\": \\\"generate_christian_music_lyrics\\\",\\n  \\\"input_args\\\": [\\\"seed_line\\\", \\\"max_length\\\"],\\n  \\\"return\\\": \\\"A string containing the generated lyrics\\\",\\n  \\\"depend\\\": \\\"Huggingface's transformers library (GPT2LMHeadModel, GPT2Tokenizer)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Indonesian Air Force officer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Path Optimization Interface\\\",\\n\\\"description\\\": \\\"An interface for optimizing flight paths based on current and predicted weather conditions. The user inputs the source and destination airport ICAO codes, and the desired departure time. The interface returns the recommended flight path.\\\",\\n\\\"function_name\\\": \\\"optimize_flight_path\\\",\\n\\\"input_args\\\": [\\\"source\\\", \\\"destination\\\", \\\"departure_time\\\"],\\n\\\"return\\\": \\\"Optimal flight path\\\",\\n\\\"depend\\\": [\\\"OpenSky API\\\", \\\"TensorFlow Hub\\\", \\\"Machine Learning Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A defense technology developer testing new virtual reality combat systems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Virtual Reality Combat Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to setup and run a virtual reality combat simulation. Users input a configuration file that specifies the battle scene, number of AI enemies, their behavior, and the player's weapons.\\\",\\n\\\"function_name\\\": \\\"run_simulation\\\",\\n\\\"input_args\\\": \\\"config_file - A string that specifies the path to the configuration file\\\",\\n\\\"return\\\": \\\"Starts the Unity game loop, beginning the VR simulation\\\",\\n\\\"depend\\\": \\\"This function uses the Unity3D engine's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A personal trainer who emphasizes the importance of financial stability for overall well-being", "synthesized text": "\"{\\n\\\"name\\\": \\\"Financial Health Check Interface\\\",\\n\\\"description\\\": \\\"Fetches user's financial data and calculates financial indicators.\\\",\\n\\\"function_name\\\": \\\"calculate_debt_to_income_ratio\\\",\\n\\\"input_args\\\": [\\\"client_id\\\", \\\"secret\\\", \\\"public_token\\\"],\\n\\\"return\\\": \\\"A float representing the user's debt-to-income ratio.\\\",\\n\\\"depend\\\": \\\"Plaid API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional responsible for implementing the technical aspects of the park design, such as drainage and irrigation systems", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Irrigation System Design Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Epanet toolkit to simulate and manage water distribution networks. It allows users to input their irrigation system parameters and returns the optimal design for the system.\\\",\\n  \\\"function_name\\\": \\\"get_optimal_irrigation_system\\\",\\n  \\\"input_args\\\": {\\n    \\\"nodes\\\": \\\"The number of nodes in the network\\\",\\n    \\\"demand\\\": \\\"The flow at each node\\\",\\n    \\\"pipes\\\": \\\"The number of pipes in the network\\\",\\n    \\\"diameter\\\": \\\"The diameter of each pipe\\\",\\n    \\\"length\\\": \\\"The length of each pipe\\\",\\n    \\\"roughness\\\": \\\"The roughness coefficient of each pipe\\\",\\n    \\\"pumps\\\": \\\"The performance curve of the pump\\\",\\n    \\\"curve\\\": \\\"The ID of the pump curve\\\"\\n  },\\n  \\\"return\\\": \\\"The pressure at each node in the network after solving\\\",\\n  \\\"depend\\\": \\\"Epanet toolkit\\\"\\n}\"", "description": "tool development"}
{"input persona": "A web developer who implements tracking cookies and pixels to collect user data", "synthesized text": "\"{\\n \\\"name\\\": \\\"Cookie Management Interface\\\",\\n \\\"description\\\": \\\"This interface creates and manages HTTP cookies using the 'http.cookies' library in Python. Users input the name and value of the cookie, and the interface returns the formatted cookie string that can be set in the response header.\\\",\\n \\\"function_name\\\": \\\"create_cookie\\\",\\n \\\"input_args\\\": {\\n   \\\"name\\\": \\\"The name of the cookie\\\",\\n   \\\"value\\\": \\\"The value of the cookie\\\"\\n },\\n \\\"return\\\": \\\"A string that can be added to the 'Set-Cookie' header of an HTTP response to set a new cookie on the client's browser.\\\",\\n \\\"depend\\\": [\\\"Python 'http.cookies' library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a middle-aged Swedish diplomat living in Lebanon who was a close friend of Hubert Fattal", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Summarization Interface\\\",\\n\\\"description\\\": \\\"An interface that receives the URL of a news article and returns a summarized version of it using Huggingface's transformers library.\\\",\\n\\\"function_name\\\": \\\"summarize_article\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"A string containing the summarized version of the news article.\\\",\\n\\\"depend\\\": [\\\"Huggingface's transformers library\\\", \\\"requests library\\\", \\\"BeautifulSoup library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A former construction worker who knows John Michael Stroud personally", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Construction Site Safety Analysis Interface\\\",\\n  \\\"description\\\": \\\"Detect safety violations in construction site images using a pre-trained object detection model.\\\",\\n  \\\"function_name\\\": \\\"detect_safety_violations\\\",\\n  \\\"input_args\\\": \\\"path_to_img - path to the construction site image file\\\",\\n  \\\"return\\\": \\\"List of detected safety violations in the image\\\",\\n  \\\"depend\\\": \\\"Python libraries: torch, PIL; Machine learning model: fasterrcnn_resnet50_fpn from torchvision.models.detection\\\"\\n}\"", "description": "tool development"}
{"input persona": "A junior colleague who worked under Sang-Mok Suh at Korea National Council on Social Welfare.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Text-to-Speech Conversion Interface\\\",\\n\\\"description\\\": \\\"Converts a string of text into an audio file of the text being spoken.\\\",\\n\\\"function_name\\\": \\\"text_to_speech_conversion\\\",\\n\\\"input_args\\\": {\\n    \\\"text\\\": \\\"The text you want to convert into speech.\\\"\\n    },\\n\\\"return\\\": \\\"The name of the .mp3 file where the speech is saved.\\\",\\n\\\"depend\\\": \\\"Google Text-to-Speech (gTTS)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A brand owner seeking to integrate a compelling company story into their product packaging", "synthesized text": "\"{\\n\\\"name\\\": \\\"Story Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the GPT-3 model from OpenAI's huggingface library to generate a compelling company story given the company's name and description.\\\",\\n\\\"function_name\\\": \\\"generate_company_story\\\",\\n\\\"input_args\\\": [\\\"company_name\\\", \\\"company_description\\\"],\\n\\\"return\\\": \\\"A compelling story about the company.\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local business owner in Parwanoo who has been struggling to find an investor.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Investor Search Interface\\\",\\n\\\"description\\\": \\\"An interface that returns a list of potential investors who have previously invested in similar businesses, based on the business type. The data is fetched from the Crunchbase API.\\\",\\n\\\"function_name\\\": \\\"find_potential_investors\\\",\\n\\\"input_args\\\": \\\"business_type\\\",\\n\\\"return\\\": \\\"List of investor names\\\",\\n\\\"depend\\\": \\\"requests library, Crunchbase API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A stubborn school board member unconvinced by the importance of STEAM education in the curriculum", "synthesized text": "\"{\\n\\\"name\\\": \\\"STEAM Education Impact Report Interface\\\",\\n\\\"description\\\": \\\"This interface summarizes a list of text documents (reports, articles, studies, etc.) related to the impact of STEAM education and generates a single summarized report.\\\",\\n\\\"function_name\\\": \\\"generate_steam_impact_report\\\",\\n\\\"input_args\\\": [\\\"doc_list\\\"],\\n\\\"return\\\": \\\"A string of summarized report.\\\",\\n\\\"depend\\\": [\\\"Huggingface Transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a university music history professor specializing in American musical genres, particularly the influences and evolution of soul, rock, and blues.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Song Feature Extraction Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the audio features of a song from Spotify using the track ID. Features include danceability, energy, key, loudness, mode, speechiness, acousticness, instrumentalness, liveness, valence, and tempo.\\\",\\n\\\"function_name\\\": \\\"get_song_features\\\",\\n\\\"input_args\\\": \\\"track_id\\\",\\n\\\"return\\\": \\\"A dictionary with audio features of the song as keys and their respective values.\\\",\\n\\\"depend\\\": \\\"Spotipy library, Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A computational scientist developing simulations to understand atomic behavior in extreme conditions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Molecular Dynamics Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of setting up and running a molecular dynamics simulation. The user inputs the type of atoms, number of atoms, and simulation conditions, and the interface runs the simulation and returns the results.\\\",\\n\\\"function_name\\\": \\\"run_molecular_dynamics_simulation\\\",\\n\\\"input_args\\\": {\\n    \\\"atom_type\\\": \\\"Type of atom for the simulation (e.g., 'H' for hydrogen)\\\",\\n    \\\"num_atoms\\\": \\\"Number of atoms in the simulation\\\",\\n    \\\"simulation_conditions\\\": \\\"Dictionary with keys 'temperature' and 'pressure' specifying the simulation conditions\\\"\\n    },\\n\\\"return\\\": \\\"The potential energy of the system after the simulation\\\",\\n\\\"depend\\\": \\\"This function leverages the ASE (Atomic Simulation Environment) and LAMMPS (Large-scale Atomic/Molecular Massively Parallel Simulator) Python libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow oceanographer who appreciates the contributions made by the renowned oceanographer but finds their mentoring style challenging", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sea Data Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to analyze sea data. Users only need to input the path to the sea data file (CSV format), and the specific column they want to analyze, and our interface will return a descriptive statistics and a histogram of the data.\\\",\\n\\\"function_name\\\": \\\"analyze_sea_data\\\",\\n\\\"input_args\\\": [\\\"path_to_file\\\", \\\"column\\\"],\\n\\\"return\\\": \\\"A dictionary of descriptive statistics and a histogram of the data\\\",\\n\\\"depend\\\": \\\"Python libraries: Pandas, Matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A colleague of George Bailey who secretly brews up some good-natured competition", "synthesized text": "\"{\\n\\\"name\\\": \\\"Beer Recipe Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface analyzes beer recipe data and returns the important factors that affect the taste. The user only needs to input the path to a CSV file containing the beer recipe data.\\\",\\n\\\"function_name\\\": \\\"analyze_recipe\\\",\\n\\\"input_args\\\": {\\\"path_to_csv\\\": \\\"The path to the CSV file containing the beer recipe data.\\\"},\\n\\\"return\\\": \\\"A list of important factors that affect the taste.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An electronic store owner, who despite selling TVs and other gadgets prefers spending time outdoors", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"Get the current weather forecast for a specific location\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": {\\\"location\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"main_weather\\\": \\\"string\\\", \\\"description\\\": \\\"string\\\", \\\"temp\\\": \\\"float\\\"},\\n\\\"depend\\\": \\\"requests, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner looking to incorporate jQueryUI components into their website for a more dynamic user experience", "synthesized text": "\"{\\n\\\"name\\\": \\\"jQueryUI Interaction Interface\\\", \\n\\\"description\\\": \\\"Interacts with jQueryUI components on a webpage using selenium webdriver.\\\", \\n\\\"function_name\\\": \\\"interact_with_jqueryui\\\", \\n\\\"input_args\\\": [\\\"url\\\", \\\"jqueryui_actions\\\"], \\n\\\"return\\\": \\\"None, interacts with the webpage as per jqueryui_actions.\\\", \\n\\\"depend\\\": \\\"Python's Selenium WebDriver library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An old school grocer in a small Malaysian town.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Price Comparison Interface\\\",\\n\\\"description\\\": \\\"This interface allows a grocer to compare prices for a specific product from different online shopping platforms.\\\",\\n\\\"function_name\\\": \\\"get_product_prices\\\",\\n\\\"input_args\\\": \\\"product_name - The name of the product to compare prices for.\\\",\\n\\\"return\\\": \\\"A dictionary with platform names as keys and the corresponding prices as values. If the product is not found on a platform or there is an error fetching the price, the value will be a relevant string message.\\\",\\n\\\"depend\\\": \\\"Python's built-in requests library and APIs from different online shopping platforms.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A researcher studying the impact of urbanization on native plant species", "synthesized text": "\"{\\n\\\"name\\\": \\\"Species Distribution Model Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow along with environmental data and species occurrence records to predict the spatial distribution of species.\\\",\\n\\\"function_name\\\": \\\"species_distribution_model\\\",\\n\\\"input_args\\\": [\\\"species_data_path\\\", \\\"environmental_data_path\\\"],\\n\\\"return\\\": \\\"Spatial distribution map of the species\\\",\\n\\\"depend\\\": [\\\"tensorflow\\\", \\\"geopandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A numerologist who believes in the power and significance of numbers in personal and spiritual growth", "synthesized text": "\"{\\n\\\"name\\\": \\\"Numerology Life Path Number Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface that calculates a user's life path number based on their birth date. The life path number is a key aspect of numerology and is believed to represent the path of one's life and the challenges, lessons, and opportunities they will encounter.\\\",\\n\\\"function_name\\\": \\\"calculate_life_path_number\\\",\\n\\\"input_args\\\": [\\\"birth_date\\\"],\\n\\\"return\\\": \\\"A single digit that represents the user's life path number.\\\",\\n\\\"depend\\\": \\\"Python's built-in functions\\\"\\n}\"", "description": "tool development"}
{"input persona": "A concert photographer who captures amazing shots of Tim McGraw and Faith Hill in action", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Colorization Interface\\\",\\n\\\"description\\\": \\\"This interface uses a deep learning model to add color to black and white images. The user simply needs to provide the path to a grayscale image, and the function will return a colorized version of that image.\\\",\\n\\\"function_name\\\": \\\"colorize_image\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to the grayscale image file. This should be a string.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"colorized_img\\\": \\\"A colorized version of the input image. This will be a 3D numpy array with shape (256, 256, 3), representing the height, width, and RGB color channels of the image, respectively.\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"Python library\\\": [\\\"keras\\\", \\\"numpy\\\", \\\"cv2\\\"],\\n    \\\"Machine Learning Model\\\": [\\\"A pre-trained image colorization model\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "An elementary school teacher who practices mindful meditation and enjoys discussing economic trends over the fence", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Trends Graph Plotting Interface\\\",\\n\\\"description\\\": \\\"This interface fetches economic data from the web and plots the graph for a selected economic indicator over a specified time range.\\\",\\n\\\"function_name\\\": \\\"plot_economic_trend\\\",\\n\\\"input_args\\\": [\\\"start_date\\\", \\\"end_date\\\", \\\"indicator\\\"],\\n\\\"return\\\": \\\"A plotted graph of the specified economic indicator over time.\\\",\\n\\\"depend\\\": [\\\"pandas_datareader library\\\", \\\"matplotlib library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a sophomore majoring in media studies who is a die-hard fan of Alicia Florrick in The Good Wife", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Episode Search Interface\\\",\\n\\\"description\\\": \\\"This interface returns a list of episodes where a specific character appears in a given TV show. It uses the TVMaze API to fetch this information.\\\",\\n\\\"function_name\\\": \\\"get_episodes_with_character\\\",\\n\\\"input_args\\\": [\\\"show_name\\\", \\\"character_name\\\"],\\n\\\"return\\\": \\\"List of episode names where the character appears\\\",\\n\\\"depend\\\": \\\"requests library, TVMaze API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Rotarian who is passionate about improving maternal and child health in developing countries", "synthesized text": "\"{\\n\\\"name\\\": \\\"Maternal and Child Health Improvement Project Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to input the path to a CSV file containing data from various health improvement projects, and it will return insightful analysis and visualizations.\\\",\\n\\\"function_name\\\": \\\"analyze_data\\\",\\n\\\"input_args\\\": \\\"path_to_csv - path to the CSV data file\\\",\\n\\\"return\\\": \\\"A summary of descriptive statistics and a heatmap of correlation matrix of the dataset\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, seaborn, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A team of researchers developing a computational model to study the spread of diseases in complex ecosystems", "synthesized text": "\"{\\n\\\"name\\\": \\\"Disease Spread Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to simulate the spread of diseases in a network. The inputs include total population, network edges, transmission rate, recovery rate, initial infected individuals, and maximum simulation time. The function returns time series of susceptible, infected, and recovered individuals.\\\",\\n\\\"function_name\\\": \\\"simulate_disease_spread\\\",\\n\\\"input_args\\\": [\\\"population\\\", \\\"edges\\\", \\\"trans_rate\\\", \\\"rec_rate\\\", \\\"init_infected\\\", \\\"tmax\\\"],\\n\\\"return\\\": [\\\"t\\\", \\\"S\\\", \\\"I\\\", \\\"R\\\"],\\n\\\"depend\\\": [\\\"EoN\\\", \\\"networkx\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a healthcare worker who recovered from a recent SARS-CoV-2 infection", "synthesized text": "\"{\\n\\\"name\\\": \\\"Viral Genome Sequencing Interface\\\",\\n\\\"description\\\": \\\"This interface uses Biopython to parse and analyze genetic sequences. It can determine the specific variant of SARS-CoV-2 that a user was infected with by comparing the user's viral genome sequence to the sequences of known variants.\\\",\\n\\\"function_name\\\": \\\"get_viral_variant\\\",\\n\\\"input_args\\\": \\\"genome_file\\\",\\n\\\"return\\\": \\\"variant\\\",\\n\\\"depend\\\": \\\"Biopython Library\\\"\\n}\"", "description": "tool development"}
{"input persona": "Another high-ranking government official who disagrees with the encryption methods used by the computer scientist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Encryption Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to decrypt messages encoded with common encryption methods (AES, 3DES, Blowfish). The user inputs the encryption method, a key, and the encrypted message; the interface returns the decrypted message.\\\",\\n\\\"function_name\\\": \\\"decrypt_message\\\",\\n\\\"input_args\\\": {\\n    \\\"method\\\": \\\"The encryption method used ('AES', '3DES', or 'Blowfish')\\\",\\n    \\\"key\\\": \\\"The key used for encryption\\\",\\n    \\\"ciphertext\\\": \\\"The encrypted message to be decrypted\\\"\\n},\\n\\\"return\\\": \\\"The decrypted message as a string, or a string indicating an unsupported encryption method\\\",\\n\\\"depend\\\": \\\"PyCryptodome\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an automotive enthusiast and gender equality advocate.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Specification Interface\\\",\\n\\\"description\\\": \\\"This interface takes the make, model, and year of a vehicle and returns detailed specifications of the vehicle. It leverages the carqueryapi to fetch the data.\\\",\\n\\\"function_name\\\": \\\"get_vehicle_spec\\\",\\n\\\"input_args\\\": [\\\"make\\\", \\\"model\\\", \\\"year\\\"],\\n\\\"return\\\": \\\"A dictionary containing the vehicle specifications or an error message if the data cannot be retrieved.\\\",\\n\\\"depend\\\": \\\"requests library, carqueryapi\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business student considering the family bakery as a potential case study for a university project", "synthesized text": "\"{\\n\\\"name\\\": \\\"Business Trend Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a stock symbol of a company in the bakery industry as input, retrieves the historical stock prices of the company, plots the closing prices, and displays the plot. This can be used for business analysis of comparable companies in the bakery industry.\\\",\\n\\\"function_name\\\": \\\"plot_trend\\\",\\n\\\"input_args\\\": \\\"symbol\\\",\\n\\\"return\\\": \\\"A plot showing the trend of the closing prices of the company's stock.\\\",\\n\\\"depend\\\": \\\"Alpha Vantage API, pandas, matplotlib\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional cellist hailing from Germany.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sheet Music Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface recognizes the musical notes in an image of sheet music. It utilizes the Optical Music Recognition (OMR) API from MuseScore.\\\",\\n\\\"function_name\\\": \\\"recognize_sheet_music\\\",\\n\\\"input_args\\\": {\\n    \\\"image_path\\\": \\\"The file path to the image of the sheet music.\\\"\\n},\\n\\\"return\\\": \\\"A string of the recognized musical notes.\\\",\\n\\\"depend\\\": \\\"Python's built-in 'requests' and 'base64' libraries, and the 'MuseScore' web API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A drug addict in recovery who has experienced the consequences of the judge's strict stance firsthand", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Drug Addiction Recovery Support Interface\\\",\\n  \\\"description\\\": \\\"This interface sends supportive text messages to those in drug recovery. The user inputs their phone number and the frequency at which they want to receive messages, and the interface sends messages accordingly.\\\",\\n  \\\"function_name\\\": \\\"send_supportive_messages\\\",\\n  \\\"input_args\\\": {\\n    \\\"phone_number\\\": \\\"The phone number of the user in recovery.\\\",\\n    \\\"frequency\\\": \\\"The number of times the user wants to receive messages.\\\"\\n  },\\n  \\\"return\\\": \\\"This function does not return a value but sends text messages to the user's phone.\\\",\\n  \\\"depend\\\": \\\"This function relies on the Twilio API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a gourmand who is deeply in love with French cuisine and passionate about trying new fusion dishes, I have a deep interest in keeping updates on Michelin-starred restaurants.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Michelin Restaurant Search Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Michelin Guide's API to provide information about Michelin-starred restaurants. Users can search by location or by restaurant name.\\\",\\n\\\"function_name\\\": \\\"get_michelin_restaurants\\\",\\n\\\"input_args\\\": {\\n  \\\"location\\\": \\\"String representing the location to search for restaurants. This is optional.\\\",\\n  \\\"restaurant_name\\\": \\\"String representing the name of a specific restaurant to search for. This is optional.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries where each dictionary contains information about a Michelin-starred restaurant.\\\",\\n\\\"depend\\\": \\\"requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "a hotel manager in San Martín de Los Andes, Argentina", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Hotel Occupancy Forecast Interface\\\",\\n  \\\"description\\\": \\\"This interface predicts hotel occupancy for the next 30 days based on historical data using the Prophet model.\\\",\\n  \\\"function_name\\\": \\\"occupancy_forecast\\\",\\n  \\\"input_args\\\": \\\"csv_path\\\",\\n  \\\"return\\\": \\\"A dataframe with the date, the predicted occupancy, and the lower and upper bounds of the prediction for the next 30 days\\\",\\n  \\\"depend\\\": \\\"fbprophet library, pandas library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A pharmaceutical sales rep constantly updating doctors on latest drugs in neonatal care", "synthesized text": "\"{\\n\\\"name\\\": \\\"Drug Update Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest drugs in a specified category from the U.S. Department of Health & Human Services' Drug API.\\\",\\n\\\"function_name\\\": \\\"get_latest_drugs_in_category\\\",\\n\\\"input_args\\\": \\\"category\\\",\\n\\\"return\\\": \\\"A list of the latest drugs in the specified category\\\",\\n\\\"depend\\\": \\\"requests library, U.S. Department of Health & Human Services' Drug API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A politician running on a platform of increased security measures at the expense of individual rights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Facial Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input the path to an image file, and it will return whether a face is detected in the image or not, and if detected, the coordinates of the face in the image.\\\",\\n\\\"function_name\\\": \\\"detect_face\\\",\\n\\\"input_args\\\": \\\"path_to_img - String (Path to the image file)\\\",\\n\\\"return\\\": \\\"Tuple (Boolean, List (coordinates of the box around the face if a face is detected))\\\",\\n\\\"depend\\\": \\\"tensorflow, tensorflow_hub, pretrained model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a devoted customer from Seattle who has a mild caffeine addiction", "synthesized text": "\"{\\n\\\"name\\\": \\\"Coffee Shop Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that makes use of the Yelp Fusion API to recommend highly rated coffee shops in the user's current location.\\\",\\n\\\"function_name\\\": \\\"recommend_coffee_shops\\\",\\n\\\"input_args\\\": \\\"location - a string representing the user's current location\\\",\\n\\\"return\\\": \\\"A list of names of highly rated coffee shops in the user's current location\\\",\\n\\\"depend\\\": \\\"Yelp Fusion API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A professional physiotherapist, who is a watch enthusiast.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Heart Rate Variability Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to a csv file containing heart rate data as input, and returns the time domain and frequency domain features of the Heart Rate Variability (HRV) data.\\\",\\n\\\"function_name\\\": \\\"process_hrv_data\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": \\\"time_domain_features, frequency_domain_features\\\",\\n\\\"depend\\\": \\\"Python library: biosppy, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "a shepherd with no interest in technology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sheep Counting Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained TensorFlow model to count the number of sheep in an image.\\\",\\n\\\"function_name\\\": \\\"count_sheep\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_img\\\": \\\"The path to the image file to count sheep in.\\\"\\n},\\n\\\"return\\\": \\\"The number of sheep in the image.\\\",\\n\\\"depend\\\": \\\"Python libraries: TensorFlow, TensorFlow Hub, PIL. ML models: Faster R-CNN model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sailor who has completed submarine tactic instructor training and can provide guidance and advice on the path to achieving the goal", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Submarine Tactics Learning Path Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained model to classify a user's knowledge level and provides a learning path to become a submarine tactic instructor.\\\",\\n  \\\"function_name\\\": \\\"get_learning_path\\\",\\n  \\\"input_args\\\": {\\n    \\\"user_input\\\": \\\"A string representing a user's knowledge and experience in submarine tactics.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"steps\\\": \\\"A list of courses the user needs to take.\\\",\\n    \\\"resources\\\": \\\"A list of URLs where the user can access these courses.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"transformers\\\"],\\n    \\\"machine_learning_models\\\": [\\\"distilbert-base-uncased-finetuned-sst-2-english\\\"],\\n    \\\"web_APIs\\\": []\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A cautious radio station manager who is always trying to maintain balance between audience engagement and regulatory compliance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Profanity Filter Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the 'profanity-check' Python library to determine if a given text is profane or not.\\\",\\n\\\"function_name\\\": \\\"is_text_profane\\\",\\n\\\"input_args\\\": \\\"input_text - a string representing the text to check for profanity.\\\",\\n\\\"return\\\": \\\"'Profane' if the text is considered profane, 'Clean' if it is not.\\\",\\n\\\"depend\\\": \\\"Python library - profanity-check\\\"\\n}\"", "description": "tool development"}
{"input persona": "A copyright lawyer representing a major record label, often competing against the attorney to secure exclusive rights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Plagiarism Detection Interface\\\",\\n\\\"description\\\": \\\"This interface takes in two audio files and computes a similarity score between them using a machine learning model, which can be used to detect potential music plagiarism.\\\",\\n\\\"function_name\\\": \\\"detect_music_plagiarism\\\",\\n\\\"input_args\\\": [\\\"audio_path1\\\", \\\"audio_path2\\\"],\\n\\\"return\\\": \\\"A similarity score between 0 and 1, where 1 indicates identical audio and 0 indicates completely dissimilar audio.\\\",\\n\\\"depend\\\": [\\\"numpy\\\", \\\"scipy\\\", \\\"pydub\\\", \\\"tensorflow\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A first-time parent seeking advice on natural remedies for their baby's colic", "synthesized text": "\"{\\n\\\"name\\\": \\\"Natural Remedies Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model to generate a list of natural remedies for a given symptom.\\\",\\n\\\"function_name\\\": \\\"get_natural_remedies\\\",\\n\\\"input_args\\\": {\\n    \\\"symptom\\\": \\\"The symptom the child is experiencing.\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended natural remedies for the inputted symptom.\\\",\\n\\\"depend\\\": \\\"Huggingface's Transformers library (GPT-2 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced Python software developer proficient in encoding and decoding Unicode characters", "synthesized text": "\"{\\n\\\"name\\\": \\\"Unicode Encoding and Decoding Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to easily encode a string of Unicode characters to UTF-8 and decode a UTF-8 encoded string back to Unicode.\\\",\\n\\\"function_name\\\": [\\\"encode_to_utf8\\\", \\\"decode_from_utf8\\\"],\\n\\\"input_args\\\": [\\\"input_string\\\", \\\"input_bytes\\\"],\\n\\\"return\\\": [\\\"UTF-8 encoded string\\\", \\\"Decoded Unicode string\\\"],\\n\\\"depend\\\": [\\\"Python built-in functions\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a college student from Australia who has OCPD (obsessive-compulsive personality disorder) and a knack for ordering things based on their merits.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Task Planner Interface\\\",\\n\\\"description\\\": \\\"This interface ranks tasks based on their urgency and importance. The user inputs a list of tasks, and the interface returns the tasks ordered by their priority.\\\",\\n\\\"function_name\\\": \\\"rank_tasks\\\",\\n\\\"input_args\\\": \\\"tasks - a list of tasks\\\",\\n\\\"return\\\": \\\"A list of tasks ordered by their priority\\\",\\n\\\"depend\\\": \\\"HuggingFace's transformers pipeline\\\"\\n}\"", "description": "tool development"}
{"input persona": "A crematorium operator responsible for facilitating the cremation process with dignity and respect", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cremation Process Timeline Interface\\\",\\n\\\"description\\\": \\\"This interface allows the crematorium operator to input the start time of a cremation, and get back a detailed timeline of the process.\\\",\\n\\\"function_name\\\": \\\"get_cremation_timeline\\\",\\n\\\"input_args\\\": \\\"start_time - The start time of the cremation process in the format 'YYYY-MM-DD HH:MM:SS'\\\",\\n\\\"return\\\": \\\"A dictionary containing the timeline of the cremation process, with each key being a step in the process and each value being the time that step is expected to end.\\\",\\n\\\"depend\\\": \\\"Python's datetime and time libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A textile wholesaler who provides the archaeologist with authentic replicas of ancient textiles for research and educational purposes", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Textile Pattern Generation Interface\\\",\\n  \\\"description\\\": \\\"An interface that generates unique textile patterns using a Generative Adversarial Network\\\",\\n  \\\"function_name\\\": \\\"generate_textile_pattern\\\",\\n  \\\"input_args\\\": \\n  {\\n    \\\"seed\\\": \\\"An integer that determines the randomness of the generated pattern\\\"\\n  },\\n  \\\"return\\\": \\\"A numpy array representing the generated textile pattern\\\",\\n  \\\"depend\\\": \\\"TensorFlow, TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fisheries manager responsible for implementing regulations and policies to protect and restore fish populations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Fish Population Prediction Interface\\\",\\n  \\\"description\\\": \\\"An interface for predicting fish populations based on input data. This interface uses RandomForestRegressor from sklearn.ensemble to train a model and predict future populations.\\\",\\n  \\\"function_name\\\": [\\\"train_fish_population_model\\\", \\\"predict_fish_population\\\"],\\n  \\\"input_args\\\": [\\\"data_path\\\", \\\"model\\\", \\\"new_data\\\"],\\n  \\\"return\\\": [\\\"trained model\\\", \\\"predicted population\\\"],\\n  \\\"depend\\\": [\\\"sklearn\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a small business owner who runs a petrol station in Midlands, England", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Competitor Fuel Price Comparison Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the PetrolPrices API to gather information about the prices at competing petrol stations. Users can input their petrol station's location and the type of fuel (e.g., unleaded, diesel, LPG), and the interface will return the current prices at nearby competitor petrol stations.\\\",\\n  \\\"function_name\\\": \\\"get_competitor_fuel_prices\\\",\\n  \\\"input_args\\\": {\\n    \\\"location\\\": \\\"The location of the petrol station (e.g., 'Birmingham, UK').\\\",\\n    \\\"fuel_type\\\": \\\"The type of fuel to compare (e.g., 'unleaded', 'diesel', 'LPG').\\\"\\n  },\\n  \\\"return\\\": \\\"A list of dictionaries, with each dictionary containing the name of a nearby petrol station and the price of the specified type of fuel at that station.\\\",\\n  \\\"depend\\\": \\\"Python library: requests, geopy; Web API: PetrolPrices API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A group of economists from around the world who engage in lively discussions and share valuable insights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Indicator Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get historical data for a specific economic indicator for a specific country using the Quandl API.\\\",\\n\\\"function_name\\\": \\\"get_economic_indicator\\\",\\n\\\"input_args\\\": {\\n    \\\"indicator_name\\\": \\\"The name of the economic indicator (e.g., 'UNRATE' for unemployment rate)\\\",\\n    \\\"country_code\\\": \\\"The ISO country code (e.g., 'USA' for the United States)\\\"\\n},\\n\\\"return\\\": \\\"A pandas DataFrame with the historical data for the specified economic indicator.\\\",\\n\\\"depend\\\": \\\"Quandl API, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small town local farmer who has sold his horse Thunder Echo to Jason", "synthesized text": "\"{\\n\\\"name\\\": \\\"Horse Sales Receipt Interface\\\",\\n\\\"description\\\": \\\"An interface to generate a detailed horse sales receipt using OpenAI GPT-3.\\\",\\n\\\"function_name\\\": \\\"create_horse_sales_receipt\\\",\\n\\\"input_args\\\": {\\n    \\\"seller_name\\\": \\\"Name of the seller\\\",\\n    \\\"seller_address\\\": \\\"Address of the seller\\\",\\n    \\\"buyer_name\\\": \\\"Name of the buyer\\\",\\n    \\\"buyer_address\\\": \\\"Address of the buyer\\\",\\n    \\\"horse_name\\\": \\\"Name of the horse\\\",\\n    \\\"horse_age\\\": \\\"Age of the horse\\\",\\n    \\\"horse_breed\\\": \\\"Breed of the horse\\\",\\n    \\\"price\\\": \\\"Price of the horse\\\"\\n    },\\n\\\"return\\\": \\\"A detailed sales receipt for the horse.\\\",\\n\\\"depend\\\": {\\\"openai\\\": \\\"OpenAI GPT-3\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A youth soccer league organizer working to provide affordable opportunities for kids to play soccer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Optimal Soccer Field Allocation Interface\\\",\\n\\\"description\\\": \\\"This interface optimally allocates soccer fields to teams based on their schedule. Users only need to input the team schedules and field availability, and our interface will return the best allocation of fields to teams.\\\",\\n\\\"function_name\\\": \\\"allocate_soccer_fields\\\",\\n\\\"input_args\\\": [\\\"team_schedules\\\", \\\"field_availability\\\"],\\n\\\"return\\\": \\\"A dictionary where keys are tuples (i, j) indicating team i is allocated to field j and values are 0 or 1 representing whether the field is allocated or not.\\\",\\n\\\"depend\\\": [\\\"PuLP library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A devotee of Vision Eternel who's counting the days to their next release.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Album Release Countdown Interface\\\",\\n\\\"description\\\": \\\"This interface uses the MusicBrainz API to fetch the release date of the artist's next album and calculates the number of days left until the release.\\\",\\n\\\"function_name\\\": \\\"get_next_album_release\\\",\\n\\\"input_args\\\": \\\"artist_name\\\",\\n\\\"return\\\": \\\"A string containing the number of days left until the release of the next album and the title of the album.\\\",\\n\\\"depend\\\": \\\"requests, datetime, MusicBrainz API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A digital artist and fellow student, creating unique pieces using generative adversarial networks", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Generative Art Interface\\\",\\n  \\\"description\\\": \\\"This interface generates unique pieces of art using a pre-trained generative adversarial network (GAN) model from TensorFlow Hub. The user only needs to input a seed number, and the interface will return a unique piece of art generated by the model.\\\",\\n  \\\"function_name\\\": \\\"generate_art\\\",\\n  \\\"input_args\\\": {\\n    \\\"seed\\\": \\\"An integer used to generate a random noise vector. The same seed will always produce the same piece of art.\\\"\\n  },\\n  \\\"return\\\": \\\"A PIL.Image object representing the generated piece of art.\\\",\\n  \\\"depend\\\": {\\n    \\\"tensorflow\\\": \\\"2.x\\\",\\n    \\\"tensorflow_hub\\\": \\\"0.12.0\\\",\\n    \\\"numpy\\\": \\\"1.19.5\\\",\\n    \\\"PIL\\\": \\\"8.2.0\\\"\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A fan of Carly Rae Jepsen who loves her music but never pays much attention to fashion.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Album Cover Color Palette Interface\\\",\\n\\\"description\\\": \\\"This interface extracts the dominant color palette from the album covers of a given artist.\\\",\\n\\\"function_name\\\": \\\"get_album_color_palettes\\\",\\n\\\"input_args\\\": \\\"artist_name\\\",\\n\\\"return\\\": \\\"A dictionary with album cover URL as keys and the dominant color (RGB values) as values.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"cv2\\\", \\\"numpy\\\", \\\"sklearn.cluster.KMeans\\\", \\\"Spotify API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A furniture maker who has had to adapt their designs and materials due to changing trade policies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the price of a given type of material based on past data.\\\",\\n\\\"function_name\\\": \\\"predict_material_price\\\",\\n\\\"input_args\\\": [\\\"material_type\\\"],\\n\\\"return\\\": \\\"Predicted price for the material.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\", \\\"tensorflow\\\", \\\"sklearn\\\"], \\\"CSV file\\\": [\\\"material_prices.csv\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A construction contractor looking to ensure compliance with the latest regulations in the plastic insulation industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plastic Insulation Standards Compliance Check Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the latest regulations related to plastic insulation from a specified regulatory body's website and returns them in a readable format.\\\",\\n\\\"function_name\\\": \\\"fetch_latest_insulation_standards\\\",\\n\\\"input_args\\\": \\\"No input arguments\\\",\\n\\\"return\\\": \\\"List of latest regulations related to plastic insulation\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A representative from a public transport company who prioritizes cost-cutting measures over improved working conditions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Optimization Interface\\\",\\n\\\"description\\\": \\\"Interface to find optimal routes for multiple vehicles that need to visit multiple locations\\\",\\n\\\"function_name\\\": \\\"get_optimal_routes\\\",\\n\\\"input_args\\\": \\\"locations: A list of locations that the vehicles need to visit\\\",\\n\\\"return\\\": \\\"A list of routes, each route is a list of locations that a single vehicle should visit in sequence\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API, ortools Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A research institute director looking for talented individuals to join their team", "synthesized text": "\"{\\n    \\\"name\\\": \\\"LinkedIn Profile Analyzer Interface\\\",\\n    \\\"description\\\": \\\"An interface to extract and analyze the information from a LinkedIn profile. It uses LinkedIn API to get the profile data and a pre-trained NLP model from Hugging Face to summarize the extracted text.\\\",\\n    \\\"function_name\\\": \\\"analyze_linkedin_profile\\\",\\n    \\\"input_args\\\": [\\\"profile_url\\\"],\\n    \\\"return\\\": \\\"A dictionary with summaries of the individual's experiences, skills, and interests.\\\",\\n    \\\"depend\\\": [\\\"LinkedIn API\\\", \\\"Hugging Face Transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A tech-savvy project manager who appreciates the efficiency and readability of code written with the Picocli command line parser", "synthesized text": "\"{\\n\\\"name\\\": \\\"Command Line Interface to Run Python Scripts\\\",\\n\\\"description\\\": \\\"This interface allows users to execute a Python script with specified arguments from the command line using the argparse library.\\\",\\n\\\"function_name\\\": \\\"run_python_script\\\",\\n\\\"input_args\\\": {\\n    \\\"script_name\\\": \\\"The name of the Python script to be executed, as a string. If the script is not in the same directory as this function, provide the full path to the script.\\\",\\n    \\\"script_args\\\": \\\"A list of arguments for the script, as strings, in the order that they are expected by the script. If the script does not require any arguments, this list can be empty.\\\"\\n},\\n\\\"return\\\": \\\"The standard output from the script, as a string. If there is an error in executing the script, the function prints the standard error and returns None.\\\",\\n\\\"depend\\\": [\\\"argparse\\\", \\\"subprocess\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A knowledgeable and understanding vet who specializes in geriatric feline care and can offer medical advice and treatment options", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cat Disease Diagnosis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained machine learning model to diagnose common diseases in geriatric cats based on a list of symptoms. It returns the most likely disease.\\\",\\n\\\"function_name\\\": \\\"diagnose_disease\\\",\\n\\\"input_args\\\": [\\\"symptoms\\\"],\\n\\\"return\\\": \\\"disease_name\\\",\\n\\\"depend\\\": \\\"tensorflow, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A recent graduate excited to learn and apply Python programming principles in real-world projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"An interface that fetches and returns current weather data for a specified city. The data includes the temperature, humidity, and a brief description of the current weather.\\\",\\n\\\"function_name\\\": \\\"get_weather\\\",\\n\\\"input_args\\\": \\\"city_name\\\",\\n\\\"return\\\": \\\"A dictionary containing the temperature, humidity, and weather description of the city, or a 'City Not Found' message.\\\",\\n\\\"depend\\\": \\\"requests, OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A data scientist analyzing patterns and correlations in research publication data", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Publication Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"Fetches and returns a dataset containing all of an author's publications, including title, year, citations, and co-authors.\\\",\\n  \\\"function_name\\\": \\\"fetch_author_publications\\\",\\n  \\\"input_args\\\": {\\n    \\\"author_name\\\": \\\"The name of the author whose publications are to be fetched\\\"\\n  },\\n  \\\"return\\\": \\\"A list containing dictionaries. Each dictionary represents a publication and includes the title, year, number of citations, and co-authors.\\\",\\n  \\\"depend\\\": \\\"Python library: scholarly\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged woman who wants to maintain a youthful appearance without going under the knife", "synthesized text": "\"{\\n\\\"name\\\": \\\"Facial Age Estimation Interface\\\",\\n\\\"description\\\": \\\"An interface to estimate the perceived age of a person based on a facial image. This can help users to track the effectiveness of their skincare routines or lifestyle changes.\\\",\\n\\\"function_name\\\": \\\"estimate_age\\\",\\n\\\"input_args\\\": \\\"image_path: The path to the image file.\\\",\\n\\\"return\\\": \\\"An estimated age based on the input facial image.\\\",\\n\\\"depend\\\": \\\"Tensorflow, Tensorflow Hub, OpenCV, Numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "uma aspirante à fotógrafa que adora música", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Album Cover Art Extraction Interface\\\",\\n\\\"description\\\": \\\"An interface to fetch the cover art of a music album using its Spotify ID.\\\",\\n\\\"function_name\\\": \\\"get_album_cover_art\\\",\\n\\\"input_args\\\": \\\"album_id : A string representing the Spotify ID of the album.\\\",\\n\\\"return\\\": \\\"A string representing the URL of the album's cover art.\\\",\\n\\\"depend\\\": \\\"Spotify Web API, Spotipy Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "an Indian parent whose child's school is currently occupied by the military", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Occupancy Status Check Interface\\\",\\n\\\"description\\\": \\\"This interface uses GDELT or other news data providers to check the recent news related to a school. If the news indicates military occupation, it alerts the parent.\\\",\\n\\\"function_name\\\": \\\"get_school_news\\\",\\n\\\"input_args\\\": {\\\"school_name\\\": \\\"the name of the school\\\", \\\"location\\\": \\\"the location of the school\\\"},\\n\\\"return\\\": \\\"An alert message and the URL of the news article if military presence is detected in the news related to the school. Otherwise, a reassuring message.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"json\\\"], \\\"Web APIs\\\": [\\\"GDELT\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An investigative reporter aiming to uncover any potential corruption or mismanagement in the naval projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Naval Projects Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface for analyzing the data related to naval projects. It identifies any potential anomalies that could indicate corruption or mismanagement.\\\",\\n\\\"function_name\\\": \\\"analyze_data\\\",\\n\\\"input_args\\\": {\\\"file_path\\\": \\\"The path to the CSV file containing the data for the naval projects.\\\"},\\n\\\"return\\\": \\\"A summary of the data and any identified anomalies.\\\",\\n\\\"depend\\\": \\\"pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mechanical engineer who designs and builds model airplanes as a hobby", "synthesized text": "\"{\\n\\\"name\\\": \\\"Material Strength Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the strength of a given material under specified temperature and humidity conditions using a machine learning model\\\",\\n\\\"function_name\\\": \\\"predict_material_strength\\\",\\n\\\"input_args\\\": [\\\"material_type\\\", \\\"temperature\\\", \\\"humidity\\\"],\\n\\\"return\\\": \\\"Predicted material strength\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "As a retired professor of economics at a Peruvian university, I am familiar with the economic landscape of Peru and know Oscar Graham Yamahuchi as a high-flyer in the economic sphere.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Indicator Retrieval Interface\\\",\\n\\\"description\\\": \\\"An interface to retrieve the most recent value of a specified economic indicator for a given country. Data is fetched from the World Bank API.\\\",\\n\\\"function_name\\\": \\\"get_economic_indicator\\\",\\n\\\"input_args\\\": [\\\"country_name\\\", \\\"indicator\\\"],\\n\\\"return\\\": \\\"The most recent value of the specified economic indicator for the given country.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"World Bank API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A high school principal deeply worried about the school closures due to COVID-19", "synthesized text": "\"{\\n\\\"name\\\": \\\"Online Learning Attendance Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface to get the attendance record of online classes from Google Classroom\\\",\\n\\\"function_name\\\": \\\"get_online_class_attendance\\\",\\n\\\"input_args\\\": \\\"courseId - The ID of the course in Google Classroom\\\",\\n\\\"return\\\": \\\"A dictionary with student names as keys and their email addresses as values\\\",\\n\\\"depend\\\": \\\"Google Classroom API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An active member of a Star Wars fan forum who shares tips and tricks for droid building", "synthesized text": "\"{\\n\\\"name\\\": \\\"Droid Parts Compatibility Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face that uses deep learning for text classification to determine if two droid parts are compatible for building.\\\",\\n\\\"function_name\\\": \\\"droid_parts_compatibility\\\",\\n\\\"input_args\\\": [\\\"part1\\\", \\\"part2\\\"],\\n\\\"return\\\": \\\"A string indicating whether the parts are compatible or not ('Compatible' or 'Not Compatible').\\\",\\n\\\"depend\\\": \\\"Hugging Face Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "a stay-at-home mom who’s the wife of a trucker", "synthesized text": "\"{\\n\\\"name\\\": \\\"Truck Route Planner Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the start and end location and returns the shortest truck legal route.\\\",\\n\\\"function_name\\\": \\\"get_truck_route\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"List of directions for the shortest truck legal route\\\",\\n\\\"depend\\\": \\\"Bing Maps API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An obituary writer specializing in the lives of politicians and public figures.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Politician Wiki Info Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Wikipedia and Wikidata APIs to return key information about a specified politician, including a Wikipedia summary and data points like date of birth, date of death, and offices held.\\\",\\n  \\\"function_name\\\": \\\"get_politician_info\\\",\\n  \\\"input_args\\\": {\\n    \\\"politician_name\\\": \\\"The name of the politician for whom to retrieve information.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"Summary\\\": \\\"A brief summary of the politician from Wikipedia.\\\",\\n    \\\"Birth Date\\\": \\\"The politician's date of birth.\\\",\\n    \\\"Death Date\\\": \\\"The politician's date of death, if applicable.\\\",\\n    \\\"Offices Held\\\": \\\"A list of offices held by the politician.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"wikipediaapi\\\"],\\n    \\\"web APIs\\\": [\\\"Wikipedia API\\\", \\\"Wikidata API\\\"],\\n    \\\"machine learning models\\\": null\\n  }\\n}\"", "description": "tool development"}
{"input persona": "MY favorite movie character is Sarah Connor from the Terminator franchise.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Character Dialogue Generator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the GPT-3 model from OpenAI to generate a dialogue that sounds like Sarah Connor from the Terminator franchise. Users input a starting sentence, and the interface returns a dialogue that continues from the input sentence.\\\",\\n\\\"function_name\\\": \\\"generate_character_dialogue\\\",\\n\\\"input_args\\\": [\\\"start_sentence\\\"],\\n\\\"return\\\": \\\"A dialogue that sounds like Sarah Connor from the Terminator franchise\\\",\\n\\\"depend\\\": \\\"OpenAI GPT-3\\\"\\n}\"", "description": "tool development"}
{"input persona": "A middle-aged pig farmer in Australia who poorly understands scientific jargon", "synthesized text": "\"{\\n\\\"name\\\": \\\"Pig Health Diagnosis Interface\\\",\\n\\\"description\\\": \\\"This interface takes a text description of a pig's condition and returns a diagnosis ('Healthy' or 'Sick').\\\",\\n\\\"function_name\\\": \\\"pig_health_diagnosis\\\",\\n\\\"input_args\\\": {\\n    \\\"description\\\": \\\"A description of the pig's condition. It can be a simple text that the farmer observes about the pig, such as 'The pig has been lying down all day and not eating.'\\\"\\n},\\n\\\"return\\\": {\\n    \\\"diagnosis\\\": \\\"A diagnosis of the pig's health condition based on the description provided. It will be either 'Healthy' or 'Sick'\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"transformers\\\", \\\"tensorflow\\\"],\\n    \\\"machine learning models\\\": [\\\"BERT from Huggingface\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A retired police officer in the UK who supports strict immigration policies.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"UK Immigration Statistics Interface\\\",\\n  \\\"description\\\": \\\"This interface provides access to the official UK immigration statistics. Users only need to specify the year and the type of data they want, and the interface will return the relevant statistics.\\\",\\n  \\\"function_name\\\": \\\"get_UK_immigration_statistics\\\",\\n  \\\"input_args\\\": {\\n    \\\"year\\\": \\\"The year for which the user wants to get immigration statistics.\\\",\\n    \\\"data_type\\\": \\\"The type of immigration data the user is interested in. Options include 'work', 'study', 'family', 'asylum' etc.\\\"\\n  },\\n  \\\"return\\\": \\\"A json containing the requested immigration statistics.\\\",\\n  \\\"depend\\\": \\\"This function leverages the UK Government's official API to get immigration data.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nurse who goes the extra mile to find and recommend the most comfortable shoes for long hours on their feet", "synthesized text": "\"{\\n\\\"name\\\": \\\"Shoe Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends shoes based on the user's size, preferred style, and budget. It uses the Shoe Store API to get the recommendations.\\\",\\n\\\"function_name\\\": \\\"recommend_shoes\\\",\\n\\\"input_args\\\": [\\\"size\\\", \\\"style\\\", \\\"budget\\\"],\\n\\\"return\\\": \\\"List of recommended shoes\\\",\\n\\\"depend\\\": \\\"requests library, Shoe Store API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A child psychologist who offers advice and resources on effective potty training techniques", "synthesized text": "\"{\\n\\\"name\\\": \\\"Potty Training Progress Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to track a child's progress in potty training. Users input the child's name, date, and whether the attempt was successful. The interface provides a summary of the child's progress over time.\\\",\\n\\\"function_name\\\": [\\\"track_potty_training\\\", \\\"get_potty_training_summary\\\"],\\n\\\"input_args\\\": [\\\"child_name\\\", \\\"date\\\", \\\"success\\\"],\\n\\\"return\\\": \\\"A dictionary containing the child's name, total number of potty training attempts, number of successful attempts, and success rate.\\\",\\n\\\"depend\\\": \\\"Python built-in dictionary\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Mongolian local who worked on the construction of the Durgun Hydro Power Station.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to fetch weather forecasts for a specified city or town. The forecast includes the temperature and weather conditions for the next 5 days.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": \\\"city_name\\\",\\n\\\"return\\\": \\\"Returns a list of dictionaries, each containing the date and time ('day'), temperature ('temperature'), and weather conditions ('weather') for the next 5 days.\\\",\\n\\\"depend\\\": \\\"Uses the OpenWeatherMap API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A baseball player turned sports broadcaster, sharing their love for the game", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baseball Stats Interface\\\",\\n\\\"description\\\": \\\"This interface takes a baseball player's first and last name as input and returns their career batting average, on base percentage, and slugging percentage.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": \\\"first, last\\\",\\n\\\"return\\\": \\\"{'Average': career_avg, 'On Base Percentage': career_obp, 'Slugging Percentage': career_slg}\\\",\\n\\\"depend\\\": [\\\"PyBaseball library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young aspiring frame builder eager to learn the art of crafting custom mountain bike frames", "synthesized text": "\"{\\n\\\"name\\\": \\\"Frame Geometry Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the ideal mountain bike frame geometry based on the rider's measurements and preferred riding style.\\\",\\n\\\"function_name\\\": \\\"calculate_frame_geometry\\\",\\n\\\"input_args\\\": [\\\"rider_height\\\", \\\"inseam_length\\\", \\\"riding_type\\\"],\\n\\\"return\\\": \\\"A dictionary with the calculated frame geometry including top tube length, seat tube length, head tube angle, and seat tube angle.\\\",\\n\\\"depend\\\": \\\"numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a junior engineer who's applying for a job at Tall Oak Midstream", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Resume Keyword Extractor Interface\\\",\\n  \\\"description\\\": \\\"Extracts the most frequently occurring keywords from a job description. This can help a job applicant ensure their resume aligns with the keywords in the job description.\\\",\\n  \\\"function_name\\\": \\\"extract_keywords_from_job_description\\\",\\n  \\\"input_args\\\": \\\"job_description\\\",\\n  \\\"return\\\": \\\"List of top 10 most frequently occurring keywords in the job description\\\",\\n  \\\"depend\\\": [\\\"NLTK library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "an Ethiopian Orthodox Tewahedo Priest", "synthesized text": "\"{\\n\\\"name\\\": \\\"Amharic Bible Verse Search Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to search for specific bible verses in the Amharic language. Users input the book, chapter, and verse, and the interface returns the corresponding verse in Amharic.\\\",\\n\\\"function_name\\\": \\\"get_amharic_bible_verse\\\",\\n\\\"input_args\\\": [\\\"book\\\", \\\"chapter\\\", \\\"verse\\\"],\\n\\\"return\\\": \\\"The corresponding verse in Amharic as a string, or a 'Verse not found.' message if the request was unsuccessful.\\\",\\n\\\"depend\\\": \\\"Web API: BibleAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A graduate student fascinated by the political intrigues and religious controversies of the Byzantine Empire", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Event Timeline Interface\\\",\\n\\\"description\\\": \\\"This interface returns a timeline of major events during a specific historical period, in this case, the Byzantine Empire.\\\",\\n\\\"function_name\\\": \\\"get_byzantine_empire_timeline\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": \\\"A list of major events during the Byzantine Empire.\\\",\\n\\\"depend\\\": \\\"Python libraries: requests, BeautifulSoup; Web APIs: Wikipedia\\\"\\n}\"", "description": "tool development"}
{"input persona": "a resident in Wellesley who appreciates older homes", "synthesized text": "\"{\\n \\\"name\\\": \\\"Historical Property Information Interface\\\",\\n \\\"description\\\": \\\"Interface to fetch information about historical properties in a specific area using the Zillow API.\\\",\\n \\\"function_name\\\": \\\"get_historical_properties\\\",\\n \\\"input_args\\\": [\\\"city\\\", \\\"state\\\"],\\n \\\"return\\\": \\\"List of tuples. Each tuple contains the address, year of construction, and estimated price of a historical property.\\\",\\n \\\"depend\\\": [\\\"requests\\\", \\\"xmltodict\\\", \\\"Zillow API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a solar energy advocate in Chennai, Tamil Nadu", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Irradiance Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts solar irradiance levels given a location and date. Solar irradiance is the power per unit area received from the Sun in the form of electromagnetic radiation in the wavelength range of the measuring instrument.\\\",\\n\\\"function_name\\\": \\\"get_solar_irradiance\\\",\\n\\\"input_args\\\": {\\n    \\\"location\\\": \\\"A list containing the latitude and longitude of the location\\\",\\n    \\\"date\\\": \\\"The date for which to predict the solar irradiance, as a string in the format 'YYYY-MM-DD'\\\"\\n},\\n\\\"return\\\": \\\"A list of predicted solar irradiance levels for each hour of the specified date\\\",\\n\\\"depend\\\": \\\"Python's pvlib library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local ice hockey fan from Porrentruy, Switzerland, who has been following HC Ajoie since childhood.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Live Hockey Game Score Interface\\\",\\n\\\"description\\\": \\\"This interface fetches the score of the most recent hockey game for the specified team. If the game is in progress, it returns the current score. If there's an upcoming game, it returns the opponent's name.\\\",\\n\\\"function_name\\\": \\\"get_hockey_game_score\\\",\\n\\\"input_args\\\": \\\"team_name - The name of the hockey team\\\",\\n\\\"return\\\": \\\"A string containing the score of the most recent game or details about the upcoming game\\\",\\n\\\"depend\\\": \\\"Python Library - requests, Web API - Sportradar's Hockey API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a successful architect who self-taught himself in business", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Cost Estimation Interface\\\",\\n\\\"description\\\": \\\"This interface estimates the cost of a building project based on total square footage, number of rooms, location, and materials used.\\\",\\n\\\"function_name\\\": \\\"estimate_building_cost\\\",\\n\\\"input_args\\\": [\\\"sq_footage\\\", \\\"num_rooms\\\", \\\"location\\\", \\\"materials\\\"],\\n\\\"return\\\": \\\"Estimated cost of the building project\\\",\\n\\\"depend\\\": [\\\"scikit-learn\\\", \\\"pandas\\\", \\\"trained model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An employee who just joined Clorox", "synthesized text": "\"{\\n\\\"name\\\": \\\"Employee Onboarding Document Generator Interface\\\",\\n\\\"description\\\": \\\"This interface generates a welcome document for new employees. The user inputs the employee's name, role, and department, and the interface returns a Word document with onboarding instructions and information personalized for the new employee.\\\",\\n\\\"function_name\\\": \\\"create_onboarding_document\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"role\\\", \\\"department\\\"],\\n\\\"return\\\": \\\"A Word document (.docx) containing personalized onboarding instructions and information for the new employee.\\\",\\n\\\"depend\\\": \\\"Python library: docx\\\"\\n}\"", "description": "tool development"}
{"input persona": "The current principal of Noosa District State High School – Pomona Campus.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-Time Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get the current weather conditions of a specified city. It returns a dictionary with the weather description, temperature, humidity, and wind speed.\\\",\\n\\\"function_name\\\": \\\"get_current_weather\\\",\\n\\\"input_args\\\": {\\\"city_name\\\": \\\"the name of the city\\\"},\\n\\\"return\\\": {\\\"description\\\": \\\"weather condition description\\\", \\\"temperature\\\": \\\"current temperature\\\", \\\"humidity\\\": \\\"current humidity\\\", \\\"wind_speed\\\": \\\"current wind speed\\\"},\\n\\\"depend\\\": {\\\"resources\\\": [\\\"OpenWeatherMap API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A politically engaged small business owner living in the 32nd State Senate District of Connecticut", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legislation Tracking Interface\\\",\\n\\\"description\\\": \\\"An interface to track the progress of a specific bill. Returns the current status, sponsor, summary, and last major action of the bill.\\\",\\n\\\"function_name\\\": \\\"get_bill_info\\\",\\n\\\"input_args\\\": \\\"bill_id - The ID of the bill to track\\\",\\n\\\"return\\\": \\\"A dictionary containing the current status, sponsor, summary, and last major action of the bill\\\",\\n\\\"depend\\\": \\\"ProPublica's Congress API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high-ranking government official seeking expert advice on navigating the challenges posed by Brexit", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brexit Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Named Entity Recognition (NER) and sentiment analysis to analyze the impact of Brexit. It identifies key entities in the text and the sentiment around them.\\\",\\n\\\"function_name\\\": \\\"brexit_impact_analysis\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": {\\\"entities\\\": \\\"Dictionary with entities as keys and their frequency as values\\\", \\\"sentiment\\\": \\\"Overall sentiment of the document (-1 to 1, negative to positive)\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"collections\\\", \\\"transformers\\\", \\\"textblob\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An ambassador representing a nation affected by post-WWII border changes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Historical Border Change Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to compare the borders of a country between two years.\\\",\\n\\\"function_name\\\": \\\"compare_borders\\\",\\n\\\"input_args\\\": [\\\"country\\\", \\\"year1\\\", \\\"year2\\\"],\\n\\\"return\\\": \\\"A plot showing the borders of the specified country in the two specified years.\\\",\\n\\\"depend\\\": [\\\"Geopandas\\\", \\\"Matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a friend of Romero's brother Quique, who was his former roommate in La Liga", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Player Career Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a football player as input and returns a brief career history of the given player, including their name, position, date of birth, nationality, role, current team, and former teams.\\\",\\n\\\"function_name\\\": \\\"get_football_player_career\\\",\\n\\\"input_args\\\": {\\\"player_name\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"name\\\": \\\"string\\\", \\\"position\\\": \\\"string\\\", \\\"dateOfBirth\\\": \\\"string\\\", \\\"nationality\\\": \\\"string\\\", \\\"role\\\": \\\"string\\\", \\\"currentTeam\\\": \\\"string\\\", \\\"formerTeams\\\": \\\"list of strings\\\"},\\n\\\"depend\\\": \\\"Web API: Football-Data.org\\\"\\n}\"", "description": "tool development"}
{"input persona": "A vape shop owner in the Philippines", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vape Liquid Flavor Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface suggests vape liquid flavors based on the user's past purchases and the purchases of similar users. It uses a recommendation engine, such as a collaborative filtering model.\\\",\\n\\\"function_name\\\": \\\"get_vape_flavors\\\",\\n\\\"input_args\\\": \\\"user_purchase_history - a list representing the user's purchase history\\\",\\n\\\"return\\\": \\\"A list of recommended vape liquid flavors\\\",\\n\\\"depend\\\": \\\"Python libraries (Scikit-Learn, Pandas)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A school nurse looking for information on how to manage allergies and asthma in students", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Condition Management Interface\\\",\\n\\\"description\\\": \\\"This interface fetches relevant articles about a specific medical condition from WebMD.\\\",\\n\\\"function_name\\\": \\\"fetch_medical_articles\\\",\\n\\\"input_args\\\": [\\\"condition\\\"],\\n\\\"return\\\": \\\"A list of dictionaries, each containing a 'title' and 'url' of a relevant article.\\\",\\n\\\"depend\\\": \\\"WebMD API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A successful graphic designer who has already made a name for themselves in the VR industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Model Converter Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to convert a 3D model to a different format. The user only needs to provide the path to the input 3D model file and the desired output format, and the interface will return a 3D model in the specified format.\\\",\\n\\\"function_name\\\": \\\"convert_3d_model\\\",\\n\\\"input_args\\\": {\\n    \\\"input_file_path\\\": \\\"The path to the input 3D model file. String.\\\",\\n    \\\"output_file_path\\\": \\\"The path to save the output 3D model file. String.\\\",\\n    \\\"output_format\\\": \\\"The desired output format. String.\\\"\\n},\\n\\\"return\\\": \\\"The path to the converted 3D model file. String.\\\",\\n\\\"depend\\\": \\\"PyMesh library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a mother of two young daughters who absolutely abhor crimes against children", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Safety Report Interface\\\",\\n\\\"description\\\": \\\"This interface uses Web APIs from local law enforcement agencies, news organizations, and child safety organizations to provide a report of recent crimes against children in a given area.\\\",\\n\\\"function_name\\\": \\\"get_child_safety_report\\\",\\n\\\"input_args\\\": \\\"location - a string that represents the user's location\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains details of a specific crime reported against children in the given location.\\\",\\n\\\"depend\\\": \\\"Web API from a child safety report provider\\\"\\n}\"", "description": "tool development"}
{"input persona": "Heather A. Cameron", "synthesized text": "\"{\\n\\\"name\\\": \\\"News Scraper Interface\\\",\\n\\\"description\\\": \\\"Scrapes news websites for the latest articles on a specific topic.\\\",\\n\\\"function_name\\\": \\\"get_latest_news\\\",\\n\\\"input_args\\\": \\\"topic\\\",\\n\\\"return\\\": \\\"A dictionary where the keys are the article headlines and the values are the URLs of the articles.\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A history teacher who is also a passionate Chelsea F.C. supporter", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface uses the football-data.org API to retrieve the most recent match statistics for a given football team. The statistics include the names of the home and away teams, the full-time scores, and the date of the match.\\\",\\n\\\"function_name\\\": \\\"get_recent_match_stats\\\",\\n\\\"input_args\\\": \\\"team_name - The name of the football team for which to retrieve the most recent match statistics.\\\",\\n\\\"return\\\": \\\"A dictionary containing the most recent match statistics for the given team.\\\",\\n\\\"depend\\\": \\\"requests, football-data.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular blogger writing about the impact of low wages on workers' lives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Living Wage Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface returns the calculated living wage for a given area, based on the zip code provided by the user.\\\",\\n\\\"function_name\\\": \\\"get_living_wage\\\",\\n\\\"input_args\\\": \\\"zip_code\\\",\\n\\\"return\\\": \\\"The calculated living wage in the given area\\\",\\n\\\"depend\\\": \\\"requests library, U.S. Bureau of Labor Statistics API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A highly respected and influential coach who adamantly denies any involvement in doping scandals", "synthesized text": "\"{\\n\\\"name\\\": \\\"Athlete Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze an athlete's performance over time and detect any suspicious sudden improvements that could indicate doping.\\\",\\n\\\"function_name\\\": \\\"analyze_performance\\\",\\n\\\"input_args\\\": \\\"csv_path\\\",\\n\\\"return\\\": \\\"A performance analysis report\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"pandas\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A young entrepreneur looking to diversify their investment portfolio with property", "synthesized text": "\"{\\n\\\"name\\\": \\\"Property Price Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the price of a property based on the number of bedrooms, bathrooms, square footage, and location.\\\",\\n\\\"function_name\\\": \\\"predict_property_price\\\",\\n\\\"input_args\\\": [\\\"num_bedrooms\\\", \\\"num_bathrooms\\\", \\\"sqft\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"Estimated price for the property.\\\",\\n\\\"depend\\\": \\\"Python libraries: pandas, numpy, scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "a software engineer who is specialized in cloud computing and Azure Functions.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Azure Functions Deployment Interface\\\",\\n\\\"description\\\": \\\"Deploy Azure Functions using Azure SDK for Python. Users only need to input their function code, resource group name, storage account name, function app name, and the required packages in a requirements.txt file. The interface will automatically deploy the function to Azure.\\\",\\n\\\"function_name\\\": \\\"deploy_function\\\",\\n\\\"input_args\\\": [\\\"resource_management_client\\\", \\\"storage_management_client\\\", \\\"site_management_client\\\", \\\"function_code\\\", \\\"resource_group_name\\\", \\\"storage_account_name\\\", \\\"function_app_name\\\", \\\"requirements_txt\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"No return value. The function directly deploys the Azure Function to the specified Azure resources.\\\",\\n\\\"depend\\\": \\\"This function depends on the 'azure-mgmt-resource', 'azure-mgmt-storage', and 'azure-mgmt-web' packages from the Azure SDK for Python.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a local historian in modern Russia with a deep interest in the demographics and administrative divisions of the Russian Empire.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Russian Administrative Division Interface\\\",\\n\\\"description\\\": \\\"This interface returns information about an administrative division in the Russian Empire, including its population, area, and the time it existed.\\\",\\n\\\"function_name\\\": \\\"get_administrative_info\\\",\\n\\\"input_args\\\": \\\"name - The name of the administrative division\\\",\\n\\\"return\\\": \\\"A list containing dictionaries. Each dictionary has five keys: 'item', 'itemLabel', 'population', 'area', 'start_time', 'end_time'. 'item' is the Wikidata item for the division. 'itemLabel' is the division's name. 'population' is the division's population. 'area' is the division's area in square kilometers. 'start_time' is the time the division was established. 'end_time' is the time the division was dissolved.\\\",\\n\\\"depend\\\": \\\"Python library: requests; Web API: Wikidata Query Service\\\"\\n}\"", "description": "tool development"}
{"input persona": "An older gambler with years of experience who advises against relying on betting systems for success", "synthesized text": "\"{\\n\\\"name\\\": \\\"Betting Odds Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface to compare betting odds from different betting platforms for a given sport event.\\\",\\n\\\"function_name\\\": \\\"get_betting_odds\\\",\\n\\\"input_args\\\": {\\\"sport_event\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"odds_comparison\\\": \\\"dictionary\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"BeautifulSoup\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A mayor who relies on the statistician's insights to make informed decisions for rural development programs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Rural Development Program Decision Support Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the success rate of a rural development program based on its details using a pre-trained machine learning model.\\\",\\n\\\"function_name\\\": \\\"predict_success_rate\\\",\\n\\\"input_args\\\": {\\n    \\\"program_details\\\": \\\"A dictionary where the keys are the feature names and the values are the corresponding feature values for the program.\\\"\\n},\\n\\\"return\\\": \\\"The predicted success rate of the program as a float.\\\",\\n\\\"depend\\\": \\\"scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A hospital CTO seeking to upgrade and secure the patient database system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Patient Data Encryption Interface\\\",\\n\\\"description\\\": \\\"An interface to encrypt and decrypt sensitive patient data using a secret key.\\\",\\n\\\"function_name\\\": [\\\"generate_key\\\", \\\"encrypt_patient_data\\\", \\\"decrypt_patient_data\\\"],\\n\\\"input_args\\\": [\\\"plaintext_data\\\", \\\"key\\\"],\\n\\\"return\\\": \\\"Encrypted/Decrypted data\\\",\\n\\\"depend\\\": \\\"Python cryptography library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A science journalist who investigates and debunks claims of alien encounters and UFO sightings", "synthesized text": "\"{\\n  \\\"name\\\": \\\"UFO Sightings Data Verification Interface\\\",\\n  \\\"description\\\": \\\"This interface verifies claims of UFO sightings by checking a 'ufo-sightings' dataset from data.gov or other reliable sources. It takes the date and location of the claimed sighting as inputs and returns whether there was a reported sighting at that location on that date.\\\",\\n  \\\"function_name\\\": \\\"verify_ufo_sighting\\\",\\n  \\\"input_args\\\": [\\\"date\\\", \\\"location\\\"],\\n  \\\"return\\\": \\\"Boolean value indicating whether there was a reported sighting at the given location on the given date.\\\",\\n  \\\"depend\\\": {\\\"libraries\\\": [\\\"pandas\\\"], \\\"dataset\\\": [\\\"'ufo-sightings' dataset from data.gov or other reliable sources\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A stern, traditionalist sergeant major who occasionally argues with their friend over progressive social issues", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fact-Check Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Google's Fact Check Tool API to provide fact-check results for a given statement\\\",\\n\\\"function_name\\\": \\\"fact_check\\\",\\n\\\"input_args\\\": \\\"statement\\\",\\n\\\"return\\\": \\\"A list of claims related to the input statement, each claim includes the text of the claim, a link to the fact-checking article, and the fact-checker's verdict on the claim\\\",\\n\\\"depend\\\": \\\"Google Fact Check Tool API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A superintendent who recognizes the impact of math events and supports the parent volunteer's initiatives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Math Event Schedule Interface\\\",\\n\\\"description\\\": \\\"This interface allows the user to schedule math events and automatically invites attendees via email. It creates a new event in the Google Calendar.\\\",\\n\\\"function_name\\\": \\\"add_math_event_to_calendar\\\",\\n\\\"input_args\\\": {\\n    \\\"event_name\\\": \\\"Name of the event\\\",\\n    \\\"event_description\\\": \\\"Description of the event\\\",\\n    \\\"start_time\\\": \\\"Start time of the event in ISO format\\\",\\n    \\\"end_time\\\": \\\"End time of the event in ISO format\\\",\\n    \\\"attendees_emails\\\": \\\"List of attendees' emails\\\"\\n},\\n\\\"return\\\": \\\"A link to the created event in Google Calendar\\\",\\n\\\"depend\\\": \\\"Google Calendar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a colleague of Ernst Kussul in artificial neural network research", "synthesized text": "\"{\\n\\\"name\\\": \\\"Neural Network Model Training Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of training a neural network model. Users need to provide the file paths to their training and testing datasets, specify the number of units in the hidden layer, and choose the activation function. The interface will then build and train a model based on these specifications, and return the trained model and its accuracy on the testing dataset.\\\",\\n\\\"function_name\\\": \\\"train_neural_network\\\",\\n\\\"input_args\\\": [\\\"train_path\\\", \\\"test_path\\\", \\\"units\\\", \\\"activation\\\"],\\n\\\"return\\\": \\\"Trained model, Test accuracy\\\",\\n\\\"depend\\\": \\\"TensorFlow, Keras, Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "Ahril, a Martu Aborigine from Western Australia who has a deep connection with the land and its creatures.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Aboriginal Star Map Interface\\\",\\n\\\"description\\\": \\\"This interface takes a date and a location as inputs and returns a star map according to the Aboriginal astronomical traditions.\\\",\\n\\\"function_name\\\": \\\"generate_aboriginal_star_map\\\",\\n\\\"input_args\\\": [\\\"date\\\", \\\"latitude\\\", \\\"longitude\\\"],\\n\\\"return\\\": \\\"An Aboriginal star map.\\\",\\n\\\"depend\\\": [\\\"Stellarium Web API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A brave young girl battling cancer with a positive attitude and determination", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cancer Support Interface\\\",\\n\\\"description\\\": \\\"This interface uses the WebMD API to fetch relevant information about specific types of cancer, treatments, doctors, and nearby hospitals.\\\",\\n\\\"function_name\\\": \\\"cancer_support_interface\\\",\\n\\\"input_args\\\": [\\\"cancer_type\\\", \\\"location\\\"],\\n\\\"return\\\": \\\"A dictionary with information about the cancer type, its treatments, and the contact details of doctors and hospitals near the user's location.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"WebMD API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A trade and industry officer who helps facilitate permits and regulations for the factory", "synthesized text": "\"{\\n\\\"name\\\": \\\"Factory Regulation Compliance Check Interface\\\",\\n\\\"description\\\": \\\"This interface checks if a particular factory complies with the necessary regulations based on its name, type, and location.\\\",\\n\\\"function_name\\\": \\\"check_factory_compliance\\\",\\n\\\"input_args\\\": {\\\"factory_name\\\": \\\"string\\\", \\\"factory_type\\\": \\\"string\\\", \\\"location\\\": \\\"string\\\"},\\n\\\"return\\\": {\\\"compliance_status\\\": \\\"string\\\"},\\n\\\"depend\\\": \\\"Web API (https://api.regulationcheck.com)\\\"\\n}\"", "description": "tool development"}
{"input persona": "Ein Automechaniker mit einer Vorliebe für Oldtimer-LKWs", "synthesized text": "\"{\\n\\\"name\\\": \\\"Vehicle Identification Number (VIN) Decoder Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input the VINs of vintage trucks. It then returns the details of the vehicle, including make, model, year of manufacture, engine type and more.\\\",\\n\\\"function_name\\\": \\\"decode_vin\\\",\\n\\\"input_args\\\": \\\"vin\\\",\\n\\\"return\\\": \\\"A dictionary containing the details of the vehicle.\\\",\\n\\\"depend\\\": \\\"requests library, NHTSA Vehicle API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A respiratory therapist who works alongside the pulmonologist, implementing treatment plans for patients with lung diseases", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lung Disease Classification Interface\\\",\\n\\\"description\\\": \\\"This interface takes a path to a chest X-ray image file as input and uses a pre-trained model from TensorFlow Hub to classify the image into various types of lung diseases.\\\",\\n\\\"function_name\\\": \\\"classify_lung_disease\\\",\\n\\\"input_args\\\": \\\"path_to_img: string - path to a chest X-ray image file\\\",\\n\\\"return\\\": \\\"string - the most likely lung disease the patient has\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, and a pre-trained model from AI Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "a competitive businessperson who runs an insurance brokerage in London", "synthesized text": "\"{\\n\\\"name\\\": \\\"Insurance Quote Comparison Interface\\\",\\n\\\"description\\\": \\\"An interface to compare insurance quotes from different providers. The user provides the necessary insurance details, and the interface returns a comparison of quotes from different insurance providers.\\\",\\n\\\"function_name\\\": \\\"compare_insurance_quotes\\\",\\n\\\"input_args\\\": \\\"details - a dictionary with information about the insurance. For example: {'age': 30, 'car_model': 'Tesla Model 3', 'driving_history': 'Clean'}\\\",\\n\\\"return\\\": \\\"A dictionary with the quotes from each provider. The providers' names are the keys, and the corresponding quotes are the values. For example: {'Provider1': 1000, 'Provider2': 1200, 'Provider3': 1100}\\\",\\n\\\"depend\\\": \\\"Python's requests library, APIs from different insurance providers\\\"\\n}\"", "description": "tool development"}
{"input persona": "A subject matter expert brought in to provide specialized guidance and support in implementing the technical aspects of the project", "synthesized text": "\"{\\n\\\"name\\\": \\\"Technical Implementation Guidance Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the GitHub API to fetch information about a given repository. It returns the number of open issues, open pull requests, and the latest commit message.\\\",\\n\\\"function_name\\\": \\\"get_github_repo_info\\\",\\n\\\"input_args\\\": \\\"repository_name - The name of the GitHub repository (format: 'owner/repository').\\\",\\n\\\"return\\\": \\\"A dictionary with the keys 'latest_commit_message', 'open_pull_requests', and 'open_issues', representing the latest commit message, the number of open pull requests, and the number of open issues, respectively.\\\",\\n\\\"depend\\\": \\\"Python requests library, GitHub API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a schoolmate of Luuk Admiraal and a non-football fan who moved to Dutch from Asia", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Summarizer Interface\\\",\\n\\\"description\\\": \\\"This interface provides a summary of a football match including scores and goal scorers. It can be used by someone who wants to keep up with football conversations without having to watch the matches.\\\",\\n\\\"function_name\\\": \\\"get_match_summary\\\",\\n\\\"input_args\\\": \\\"match_id - The ID of the match\\\",\\n\\\"return\\\": \\\"A string that summarizes the match result, including scores and goal scorers.\\\",\\n\\\"depend\\\": \\\"This function leverages the Football-Data.org API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An American student studying film and television production who recommends the best drama series to watch", "synthesized text": "\"{\\n  \\\"name\\\": \\\"TV Show Recommendation Interface\\\",\\n  \\\"description\\\": \\\"This interface recommends the top-rated drama TV series based on user ratings from The Movie Database (TMDB).\\\",\\n  \\\"function_name\\\": \\\"get_top_rated_drama_shows\\\",\\n  \\\"input_args\\\": {\\\"num_of_shows\\\": \\\"The number of top-rated shows to return. Defaults to 5.\\\"},\\n  \\\"return\\\": \\\"A list of dictionaries, where each dictionary contains the 'title' and 'overview' of a TV show.\\\",\\n  \\\"depend\\\": \\\"This function leverages the TMDB (The Movie Database) API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "Eu sou um apaixonado por fotografia da vida selvagem, especializado em macrofotografia de insetos.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interface de Identifica\\u00e7\\u00e3o de Insetos\\\",\\n\\\"description\\\": \\\"Identifica a esp\\u00e9cie de um inseto a partir de uma imagem usando um modelo pr\\u00e9-treinado de aprendizado de m\\u00e1quina.\\\",\\n\\\"function_name\\\": \\\"identify_insect\\\",\\n\\\"input_args\\\": \\\"path_to_img\\\",\\n\\\"return\\\": \\\"a string of the insect species name\\\",\\n\\\"depend\\\": \\\"tensorflow, numpy, json\\\"\\n}\"", "description": "tool development"}
{"input persona": "A winemaker who comes from a long line of vineyard owners in Bordeaux, France", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wine Quality Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the quality of wine from its physicochemical properties\\\",\\n\\\"function_name\\\": \\\"predict_wine_quality\\\",\\n\\\"input_args\\\": [\\\"fixed_acidity\\\", \\\"volatile_acidity\\\", \\\"citric_acid\\\", \\\"residual_sugar\\\", \\\"chlorides\\\", \\\"free_sulfur_dioxide\\\", \\\"total_sulfur_dioxide\\\", \\\"density\\\", \\\"pH\\\", \\\"sulphates\\\", \\\"alcohol\\\"],\\n\\\"return\\\": \\\"Predicted quality of the wine\\\",\\n\\\"depend\\\": {\\\"python library\\\": [\\\"pandas\\\", \\\"sklearn\\\"], \\\"machine learning model\\\": \\\"Random Forest Regressor\\\"}\\n}\"", "description": "tool development"}
{"input persona": "A software development manager seeking ways to decrease response time and increase efficiency", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Review Metrics Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Github API to fetch commit history of a repository and calculate the average time for code reviews.\\\",\\n\\\"function_name\\\": \\\"get_review_metrics\\\",\\n\\\"input_args\\\": \\n    {\\n    \\\"repo_name\\\": \\\"Name of the repository to fetch data from\\\",\\n    \\\"owner_name\\\": \\\"Name of the owner of the repository\\\",\\n    \\\"token\\\": \\\"Personal access token of the user\\\"\\n    },\\n\\\"return\\\": \\\"Average time taken for code reviews in seconds.\\\",\\n\\\"depend\\\": \\\"Github API and Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An interactive in-game character designed to teach the player the basics of the game", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Game Tutorial Bot Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a transformer model to generate responses for a game tutorial bot and executes user commands.\\\",\\n  \\\"function_name\\\": [\\\"TutorialBot.__init__\\\", \\\"TutorialBot.generate_response\\\", \\\"TutorialBot.execute_command\\\"],\\n  \\\"input_args\\\": {\\\"__init__\\\": [], \\\"generate_response\\\": [\\\"prompt\\\"], \\\"execute_command\\\": [\\\"command\\\"]},\\n  \\\"return\\\": {\\\"__init__\\\": \\\"None\\\", \\\"generate_response\\\": \\\"response\\\", \\\"execute_command\\\": \\\"None\\\"},\\n  \\\"depend\\\": [\\\"Pygame\\\", \\\"Huggingface Transformers\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software developer who researches about OpenLayers.js library.", "synthesized text": "\"{\\n\\\"name\\\": \\\"OpenLayers Map Display Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to display a map at a specified location using OpenLayers.js, embedded in a simple web server built with Flask.\\\",\\n\\\"function_name\\\": \\\"display_map\\\",\\n\\\"input_args\\\": \\\"lat, lon\\\",\\n\\\"return\\\": \\\"HTML page displaying a map centered at the specified location\\\",\\n\\\"depend\\\": \\\"Flask, OpenLayers.js\\\"\\n}\"", "description": "tool development"}
{"input persona": "A fellow classmate who has never heard of the St. Louis Browns and prefers other sports", "synthesized text": "\"{\\n    \\\"name\\\": \\\"St. Louis Browns\\\",\\n    \\\"description\\\": \\\"Fetch historical information about a baseball team from Sports Open Data API.\\\",\\n    \\\"function_name\\\": \\\"get_baseball_team_history\\\",\\n    \\\"input_args\\\": [\\\"team_name\\\"],\\n    \\\"return\\\": \\\"Dictionary with team's name, year of foundation, league, stadium, and number of championships won or a message indicating that no historical data was found.\\\",\\n    \\\"depend\\\": \\\"requests\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned intelligence officer who coordinates the operative's missions and provides strategic guidance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mission Briefing Generator\\\",\\n\\\"description\\\": \\\"This interface generates detailed mission briefings based on the mission objective and operative details. It leverages a large language model (GPT-2) to generate the briefing.\\\",\\n\\\"function_name\\\": \\\"generate_mission_briefing\\\",\\n\\\"input_args\\\": [\\\"mission_objective\\\", \\\"operative_details\\\"],\\n\\\"return\\\": \\\"A string of detailed mission briefing.\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library (GPT-2 model)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A train conductor who understands the importance of being on time and values a stress-free journey", "synthesized text": "\"{\\n\\\"name\\\": \\\"Train Time Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the arrival time of a train at a given station. Users only need to input the train number and the station code, and the interface will return the expected arrival time of the train at that station.\\\",\\n\\\"function_name\\\": \\\"get_expected_train_arrival\\\",\\n\\\"input_args\\\": [\\\"train_number\\\", \\\"station_code\\\"],\\n\\\"return\\\": \\\"Expected time of arrival (ETA) of the train at the specific station\\\",\\n\\\"depend\\\": \\\"Indian Railway API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A single mother seeking guidance on how to build a strong attachment bond with her infant", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Infant Attachment Advice Interface\\\",\\n  \\\"description\\\": \\\"This interface provides age-appropriate advice for building a strong attachment bond with an infant. The user inputs the age of the infant in months, and the interface returns a list of bonding strategies.\\\",\\n  \\\"function_name\\\": \\\"get_infant_attachment_advice\\\",\\n  \\\"input_args\\\": \\\"infant_age_in_months\\\",\\n  \\\"return\\\": \\\"List of bonding strategies\\\",\\n  \\\"depend\\\": \\\"Infant Attachment Strategies API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A statistical software provider who develops user-friendly tools specifically designed for engineers to easily apply statistical methods in their work", "synthesized text": "\"{\\n\\\"name\\\": \\\"Linear Regression Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the file paths of the dependent variable and independent variables and returns the intercept, coefficients and R-squared of the linear regression model.\\\",\\n\\\"function_name\\\": \\\"perform_linear_regression\\\",\\n\\\"input_args\\\": [\\\"dep_var_file\\\", \\\"indep_vars_files\\\"],\\n\\\"return\\\": {\\\"Intercept\\\": \\\"float\\\", \\\"Coefficients\\\": \\\"list of float\\\", \\\"R-squared\\\": \\\"float\\\"},\\n\\\"depend\\\": [\\\"pandas\\\", \\\"scikit-learn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Madrid-local who is a die-hard fan of James Heather's music.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Track Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Spotify Web API's recommendation endpoint to suggest tracks that are similar to the ones by a particular artist. Users only need to input their favorite track by the artist, and our interface will return a list of recommended tracks.\\\",\\n\\\"function_name\\\": \\\"get_track_recommendations\\\",\\n\\\"input_args\\\": \\\"track_id\\\",\\n\\\"return\\\": \\\"A list of recommended tracks' names\\\",\\n\\\"depend\\\": \\\"Python library 'spotipy' and Spotify Web API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small-town barber who has been cutting hair for years without the need for extensive licensing.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Haircut Style Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes a customer's photo and returns a suggested haircut style based on the customer's facial shape.\\\",\\n\\\"function_name\\\": \\\"recommend_haircut_style\\\",\\n\\\"input_args\\\": \\\"path_to_image\\\",\\n\\\"return\\\": \\\"Prediction (top predicted class and its confidence score)\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Pretrained Image Classification Model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A bioinformatics programmer skilled in developing algorithms for processing DNA sequences", "synthesized text": "\"{\\n\\\"name\\\": \\\"DNA Sequence Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the GC content of a given DNA sequence using the Biopython library.\\\",\\n\\\"function_name\\\": \\\"calculate_gc_content\\\",\\n\\\"input_args\\\": {\\n    \\\"dna_sequence\\\" : \\\"A string representing the DNA sequence, e.g. 'AGCTAGCTAGCT'\\\"\\n},\\n\\\"return\\\": {\\n    \\\"description\\\": \\\"The GC content of the DNA sequence, a float value representing the percentage of G and C in the DNA sequence.\\\",\\n    \\\"type\\\": \\\"float\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"Biopython\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A hiring manager who recognizes the value of the developer's skills and seeks to place them in top companies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Job Matching Interface\\\",\\n\\\"description\\\": \\\"A high-level interface that uses LinkedIn's Jobs API to match the user's skills with job postings\\\",\\n\\\"function_name\\\": \\\"get_job_postings\\\",\\n\\\"input_args\\\": \\\"A list of skills\\\",\\n\\\"return\\\": \\\"A list of job postings that require the input skills\\\",\\n\\\"depend\\\": \\\"LinkedIn's Jobs API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A US army veteran who served at the same time with Robert M. Collins.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Military Service Verification Interface\\\",\\n\\\"description\\\": \\\"An interface to verify the military service of an individual using the National Archives' Access to Archival Databases (AAD) system or any other relevant official database.\\\",\\n\\\"function_name\\\": \\\"get_military_service_records\\\",\\n\\\"input_args\\\": \\\"full_name\\\",\\n\\\"return\\\": \\\"military service records of the individual\\\",\\n\\\"depend\\\": \\\"requests library, National Archives' AAD system\\\"\\n}\"", "description": "tool development"}
{"input persona": "A loyal fan of Guillaume Domingue from Mauritius", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Genre Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face Transformers to classify the genre of a song based on its lyrics.\\\",\\n\\\"function_name\\\": \\\"classify_genre\\\",\\n\\\"input_args\\\": {\\\"lyrics\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\", \\\"torch\\\"], \\\"machine learning models\\\": [\\\"nateraw/bert-base-uncased-imdb\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "a Harvard-educated, boutique owner in Boston", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends similar products based on a given product. The underlying machine learning model is K-Nearest Neighbors from scikit-learn.\\\",\\n\\\"function_name\\\": \\\"recommend_products\\\",\\n\\\"input_args\\\": [\\\"product_id\\\", \\\"num_recommendations\\\"],\\n\\\"return\\\": \\\"List of recommended product IDs\\\",\\n\\\"depend\\\": \\\"scikit-learn library, pandas library, a preprocessed product feature dataframe\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business-minded entrepreneur seeking to maximize profitability through responsible logging operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Logging Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the optimal number of trees to cut in order to meet timber demand with the least number of trees, ensuring responsible logging.\\\",\\n\\\"function_name\\\": \\\"calculate_optimal_trees\\\",\\n\\\"input_args\\\": {\\n    \\\"timber_needed\\\": \\\"The amount of timber required (in cubic meters).\\\",\\n    \\\"num_trees\\\": \\\"The total number of trees available for cutting.\\\",\\n    \\\"yield_per_tree\\\": \\\"The average yield of timber per tree (in cubic meters).\\\"\\n},\\n\\\"return\\\": \\\"The optimal number of trees to cut in order to meet the timber demand.\\\",\\n\\\"depend\\\": \\\"PuLP library (A Python Linear Programming API)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A high school student participating in a logic competition, eager to learn new strategies", "synthesized text": "\"{\\n\\\"name\\\" : \\\"Logical Puzzle Solver Interface\\\",\\n\\\"description\\\" : \\\"This interface takes a logical puzzle in the form of a string and returns the solution to the puzzle using a SAT solver.\\\",\\n\\\"function_name\\\" : \\\"solve_logic_puzzle\\\",\\n\\\"input_args\\\" : \\\"puzzle : a string containing logical expressions (e.g., 'A and B or C')\\\",\\n\\\"return\\\" : \\\"A string representation of the logical model solution or 'No Solution' if there is no possible solution.\\\",\\n\\\"depend\\\" : \\\"pySMT library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a freelance education journalist with a degree in child psychology", "synthesized text": "\"{\\n\\\"name\\\": \\\"Child Emotion Recognition Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from Hugging Face to recognize the emotions in a children's text. The user only needs to input the text, and the interface will return the recognized emotion and its confidence score.\\\",\\n\\\"function_name\\\": \\\"recognize_emotion_in_text\\\",\\n\\\"input_args\\\": [\\\"text\\\"],\\n\\\"return\\\": {\\\"label\\\": \\\"EMOTION\\\", \\\"score\\\": \\\"confidence score\\\"},\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"transformers\\\"], \\\"Web APIs\\\": null, \\\"machine learning models\\\": [\\\"pre-trained model from Hugging Face\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "I am a law professor with expertise in administrative law and energy regulation.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that uses NLU to extract the entities and key topics from a legal document.\\\",\\n\\\"function_name\\\": \\\"analyze_legal_document\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_doc\\\": \\\"The path to the legal document to be analyzed.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries, where each dictionary represents an entity or topic. The 'word' key gives the actual entity, the 'entity_group' key gives the type of entity (e.g., 'ORG' for organization, 'PER' for person, 'LOC' for location), and the 'score' key gives the confidence of the model in its prediction.\\\",\\n\\\"depend\\\": \\\"Python library: transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个喜欢棒球的中年日本男性", "synthesized text": "\"{\\n  \\\"name\\\": \\\"\\u5b9e\\u65f6\\u68d2\\u7403\\u6bd4\\u5206\\u63a5\\u53e3\\\",\\n  \\\"description\\\": \\\"\\u8be5\\u63a5\\u53e3\\u5141\\u8bb8\\u7528\\u6237\\u8f93\\u5165\\u4ed6\\u4eec\\u611f\\u5174\\u8da3\\u7684\\u68d2\\u7403\\u6bd4\\u8d5b\\uff0c\\u8fd4\\u56de\\u5b9e\\u65f6\\u6bd4\\u5206\\u3002\\\",\\n  \\\"function_name\\\": \\\"get_baseball_scores\\\",\\n  \\\"input_args\\\": [\\\"match\\\"],\\n  \\\"return\\\": \\\"\\u5b9e\\u65f6\\u6bd4\\u5206\\\",\\n  \\\"depend\\\": \\\"Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm an offline tour guide based in California specializing in eco-tourism and local history.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Planning and ETA Interface\\\",\\n\\\"description\\\": \\\"Leverages Google Directions API to plan a tour route and provide an estimated time of arrival (ETA)\\\",\\n\\\"function_name\\\": \\\"get_route_and_eta\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\", \\\"waypoints (optional)\\\"],\\n\\\"return\\\": \\\"A dictionary containing the optimal route and ETA\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"Google Directions API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired nun who provides practical support and companionship to the abbess in their shared daily lives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Bible Verse Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenBible's Topical Bible API to recommend Bible verses based on a given topic.\\\",\\n\\\"function_name\\\": \\\"recommend_bible_verses\\\",\\n\\\"input_args\\\": {\\\"topic\\\": \\\"A string representing the topic the user is interested in.\\\"},\\n\\\"return\\\": \\\"A list of strings, each string represents a Bible verse relevant to the input topic.\\\",\\n\\\"depend\\\": \\\"Web API: OpenBible's Topical Bible API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a devoted fan of Setha Sirachaya from Thailand", "synthesized text": "\"{\\n\\\"name\\\": \\\"Setha Sirachaya Song Lyrics Interface\\\",\\n\\\"description\\\": \\\"This interface provides the lyrics of a song by Setha Sirachaya. The user needs to input the song title, and the interface will return the lyrics.\\\",\\n\\\"function_name\\\": \\\"get_song_lyrics\\\",\\n\\\"input_args\\\": [\\\"artist_name\\\", \\\"song_title\\\"],\\n\\\"return\\\": \\\"string (song lyrics)\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\", \\\"beautifulsoup4\\\"], \\\"web APIs\\\": [\\\"Genius API\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A freight forwarder who coordinates cargo shipments across multiple carriers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Freight Schedule Optimization Interface\\\",\\n\\\"description\\\": \\\"This interface optimizes the schedule for freight forwarding. It takes in a list of shipment details and returns an optimized schedule to minimize overall transit time.\\\",\\n\\\"function_name\\\": \\\"optimize_shipment_schedule\\\",\\n\\\"input_args\\\": \\\"shipment_details - a list of shipment details including origin, destination, and shipment time\\\",\\n\\\"return\\\": \\\"An optimized schedule for all shipments to minimize overall transit time\\\",\\n\\\"depend\\\": \\\"Google OR-Tools\\\"\\n}\"", "description": "tool development"}
{"input persona": "An ex-NASCAR driver who held records in his time.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lap Time Predictor Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the lap time of a NASCAR race based on various factors such as weather, car specifications, and track conditions.\\\",\\n\\\"function_name\\\": \\\"predict_lap_time\\\",\\n\\\"input_args\\\": {\\n    \\\"weather\\\": \\\"The current weather conditions.\\\",\\n    \\\"car_specs\\\": \\\"The specifications of the car.\\\",\\n    \\\"track_conditions\\\": \\\"The conditions of the track.\\\"\\n},\\n\\\"return\\\": \\\"Predicted lap time.\\\",\\n\\\"depend\\\": \\\"This function depends on the tensorflow library and a pre-trained machine learning model to make predictions.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced professional who can integrate state-of-the-art automation and entertainment systems into the penthouse", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Automation Interface\\\",\\n\\\"description\\\": \\\"Interface to control home automation devices like lights, thermostats, and entertainment systems through the Home Assistant API.\\\",\\n\\\"function_name\\\": \\\"control_home_device\\\",\\n\\\"input_args\\\": {\\\"device\\\": \\\"string\\\", \\\"action\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"JSON object with information about the execution of the action\\\",\\n\\\"depend\\\": \\\"Home Assistant API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A rising star in the racing world who competes in the same circuits and shares strategies and tips", "synthesized text": "\"{\\n\\\"name\\\": \\\"Lap Time Predictor Interface\\\",\\n\\\"description\\\": \\\"Predict the lap time for a race given current conditions using a machine learning model\\\",\\n\\\"function_name\\\": \\\"predict_lap_time\\\",\\n\\\"input_args\\\": [\\\"path_to_model\\\", \\\"current_conditions\\\"],\\n\\\"return\\\": \\\"Predicted lap time\\\",\\n\\\"depend\\\": \\\"Python libraries: sklearn, pandas, pickle; Machine learning model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A former Postgres database administrator who returned to college to pursue a degree in English Literature.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Database Query Interface\\\",\\n  \\\"description\\\": \\\"An interface that allows users to execute SQL queries on a PostgreSQL database and returns the result of the query.\\\",\\n  \\\"function_name\\\": \\\"execute_sql_query\\\",\\n  \\\"input_args\\\": [\\\"db_name\\\", \\\"user\\\", \\\"password\\\", \\\"host\\\", \\\"port\\\", \\\"sql_query\\\", \\\"params\\\"],\\n  \\\"return\\\": \\\"A list of rows that are the result of the query.\\\",\\n  \\\"depend\\\": \\\"psycopg2 Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A seasoned captain who has encountered the older orca multiple times while fishing in different ocean territories", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Marine Animal Tracking Interface\\\", \\n  \\\"description\\\": \\\"An interface that allows users to track the location of marine animals by using their ID. The interface leverages the Marine Traffic API.\\\",\\n  \\\"function_name\\\": \\\"get_marine_animal_location\\\",\\n  \\\"input_args\\\": \\\"animal_id - The unique ID assigned to the marine animal for tracking purposes.\\\",\\n  \\\"return\\\": \\\"Returns a dictionary containing the latitude and longitude of the animal's current location and the timestamp of the last recorded location.\\\",\\n  \\\"depend\\\": \\\"Python requests library, Marine Traffic API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An established filmmaker who has documented the neighborhood in the past and can offer guidance on the project", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Video Scene Detection Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a pre-trained model from TensorFlow Hub to detect scene changes in a video. The user only needs to input the path to a video file, and the interface will return timestamps where scene changes occur.\\\",\\n  \\\"function_name\\\": \\\"detect_scenes\\\",\\n  \\\"input_args\\\": \\\"path_to_video\\\",\\n  \\\"return\\\": \\\"timestamps\\\",\\n  \\\"depend\\\": \\\"tensorflow_hub, cv2, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am a die-hard QPR fan who attends every match.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Football Match Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface provides weather forecast for a given location on a specific date and time. It is useful for football fans who want to know the weather conditions for upcoming matches.\\\",\\n\\\"function_name\\\": \\\"get_weather_forecast\\\",\\n\\\"input_args\\\": [\\\"location\\\", \\\"match_date\\\"],\\n\\\"return\\\": \\\"String indicating the weather forecast or a message that no forecast is available for the given date and time\\\",\\n\\\"depend\\\": \\\"OpenWeatherMap API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A composer who creates modern arrangements of and compositions in the style of Gregorian chant", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Composition Interface\\\",\\n\\\"description\\\": \\\"Generates a Gregorian chant-styled arrangement of a given melody.\\\",\\n\\\"function_name\\\": \\\"generate_gregorian_chant\\\",\\n\\\"input_args\\\": [\\\"melody - a string of space-separated note names\\\"],\\n\\\"return\\\": \\\"A MIDI file containing the generated composition.\\\",\\n\\\"depend\\\": [\\\"music21\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A computer graphics hobbyist who is fascinated by 3D modeling and scripting, and someone who loves tinkering with Blender and bpy scripts.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blender 3D Model Export Interface\\\",\\n\\\"description\\\": \\\"This interface automates the process of exporting 3D models in Blender using bpy, the Blender Python API. The user inputs the path to the model and the desired export format, and the function attempts to export the model.\\\",\\n\\\"function_name\\\": \\\"export_3d_model\\\",\\n\\\"input_args\\\": {\\n    \\\"path_to_model\\\": \\\"The path where the model should be exported to. For instance, '/path/to/your/model.obj'\\\",\\n    \\\"export_format\\\": \\\"The format the model should be exported in. Can be 'obj', 'fbx', or 'stl'\\\"\\n},\\n\\\"return\\\": \\\"A success message if the export is successful, or an error message if it fails.\\\",\\n\\\"depend\\\": {\\\"python\\\": [\\\"bpy\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A television show producer who hires the retired police officer as a technical advisor for a crime drama series", "synthesized text": "\"{\\n\\\"name\\\": \\\"Crime Scene Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow to analyse images of crime scenes and provide a description or classification of the scene.\\\",\\n\\\"function_name\\\": \\\"analyze_crime_scene\\\",\\n\\\"input_args\\\": \\\"image_path - The path to the image file of the crime scene.\\\",\\n\\\"return\\\": \\\"A dictionary with the top 3 predicted labels and their probabilities. The labels are descriptions of the objects recognized in the image.\\\",\\n\\\"depend\\\": \\\"Python libraries: PIL, requests, tensorflow. Machine learning model: ResNet50 from TensorFlow.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A singer-songwriter who performs covers of classic songs from the same era as the favorite artist", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Lyrics Similarity Search Interface\\\",\\n  \\\"description\\\": \\\"This interface receives the title and artist of a user's favorite song and returns the titles and artists of songs with similar lyrics.\\\",\\n  \\\"function_name\\\": \\\"find_similar_songs\\\",\\n  \\\"input_args\\\": [\\\"title\\\", \\\"artist\\\"],\\n  \\\"return\\\": \\\"List of tuples with each tuple containing the title and artist of a song\\\",\\n  \\\"depend\\\": {\\\"Web APIs\\\": [\\\"Genius API\\\"], \\\"Python Libraries\\\": [\\\"requests\\\", \\\"sklearn\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A competitive Japanese beef producer in Japan", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Beef Quality Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the quality of beef given the age, weight, diet, and breed of the cattle\\\",\\n  \\\"function_name\\\": \\\"predict_quality\\\",\\n  \\\"input_args\\\": [\\\"age\\\", \\\"weight\\\", \\\"diet\\\", \\\"breed\\\"],\\n  \\\"return\\\": \\\"quality_class\\\",\\n  \\\"depend\\\": \\\"Huggingface Transformers\\\"\\n}\"", "description": "tool development"}
{"input persona": "一位AI科技新闻联播员", "synthesized text": "\"{\\n  \\\"name\\\": \\\"News Summarization Interface\\\",\\n  \\\"description\\\": \\\"This interface takes a news article as input and returns a summary of the article.\\\",\\n  \\\"function_name\\\": \\\"summarize_news\\\",\\n  \\\"input_args\\\": [\\\"news_text\\\"],\\n  \\\"return\\\": \\\"A summary string of the news article.\\\",\\n  \\\"depend\\\": \\\"Huggingface's transformers library and a pretrained model such as BART or T5.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A longtime fan of John Cheever's works", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that returns books by a specific author along with their title, published date, and description\\\",\\n\\\"function_name\\\": \\\"get_books_by_author\\\",\\n\\\"input_args\\\": [\\\"author\\\"],\\n\\\"return\\\": \\\"[('book_title', 'published_date', 'description'), ...]\\\",\\n\\\"depend\\\": \\\"Google Books API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a high school senior considering career options, particularly interested in public safety and health systems", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Career Information Interface\\\",\\n    \\\"description\\\": \\\"Provide job descriptions, typical tasks, tools and technology, and skills required for a given job using the U.S. Department of Labor's Open Skills API.\\\",\\n    \\\"function_name\\\": \\\"get_career_info\\\",\\n    \\\"input_args\\\": {\\n        \\\"career\\\": \\\"String representing the career of interest.\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"title\\\": \\\"Job title.\\\",\\n        \\\"description\\\": \\\"Job description.\\\",\\n        \\\"tasks\\\": \\\"Typical tasks for the job.\\\",\\n        \\\"tools_technology\\\": \\\"Tools and technology involved in the job.\\\",\\n        \\\"skills\\\": \\\"Skills required for the job.\\\"\\n    },\\n    \\\"depend\\\": \\\"U.S. Department of Labor's Open Skills API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A family-owned business that has been manufacturing similar products for generations, striving to maintain their market dominance", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Product Recommendation Interface\\\",\\n  \\\"description\\\": \\\"Given a product ID, recommend similar products that a customer might be interested in based on product descriptions. Useful for businesses that manufacture a variety of similar products.\\\",\\n  \\\"function_name\\\": \\\"get_product_recommendations\\\",\\n  \\\"input_args\\\": [\\\"file_path\\\", \\\"product_id\\\"],\\n  \\\"return\\\": \\\"List of 10 product IDs that are similar to the input product ID.\\\",\\n  \\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a classification biologists who is slightly impatient with imprecise information.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Species Classification Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to classify the species in a given image. The user only needs to input the path to an image file, and the interface will return the most probable species the model has identified in the image.\\\",\\n\\\"function_name\\\": \\\"classify_species\\\",\\n\\\"input_args\\\": \\\"path_to_img: str (The path to the image file.)\\\",\\n\\\"return\\\": \\\"predicted_class: int (The index of the predicted class. You may need to use an additional mapping from index to actual species names.)\\\",\\n\\\"depend\\\": \\\"This function depends on the tensorflow and tensorflow_hub Python libraries, and the MobileNetV2 model from TensorFlow Hub.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An aerospace engineer who designs the algorithms that control unmanned aerial vehicle's movements", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Path Planning Interface\\\",\\n  \\\"description\\\": \\\"This interface allows users to input starting and ending coordinates, and obstacle coordinates and sizes, and returns a planned path for an unmanned aerial vehicle.\\\",\\n  \\\"function_name\\\": \\\"path_planning\\\",\\n  \\\"input_args\\\": {\\n    \\\"start\\\": \\\"[tuple] The starting coordinate (x, y).\\\",\\n    \\\"end\\\": \\\"[tuple] The ending coordinate (x, y).\\\",\\n    \\\"obstacle_coords_sizes\\\": \\\"[list of tuples] Each tuple contains the top-left corner coordinates (x, y) and the size (width, height) of an obstacle.\\\"\\n  },\\n  \\\"return\\\": \\\"[list] Returns a list of coordinates (x, y) representing the shortest path from start to end, avoiding obstacles.\\\",\\n  \\\"depend\\\": \\\"This function uses the numpy and matplotlib Python libraries, and the A* path planning algorithm.\\\"\\n}\"", "description": "tool development"}
{"input persona": "a Rwandan music journalist who is a fan of Meddy.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Music Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses Spotify's Web API to provide song recommendations based on a user's favorite artist. The user only needs to input the name of the artist, and the interface will return a list of recommended songs.\\\",\\n\\\"function_name\\\": \\\"get_song_recommendations\\\",\\n\\\"input_args\\\": {\\n  \\\"artist_name\\\": \\\"The name of the user's favorite artist\\\",\\n  \\\"client_id\\\": \\\"The user's Spotify client_id\\\",\\n  \\\"client_secret\\\": \\\"The user's Spotify client_secret\\\"\\n},\\n\\\"return\\\": \\\"A list of song names recommended based on the user's favorite artist\\\",\\n\\\"depend\\\": \\\"This interface depends on the Spotify Web API and the 'requests' and 'base64' Python libraries.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I'm an international fan of Japanese idol groups and comedy shows, but not deeply familiar with the intricacies of Japanese popular culture.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Japanese Pop Culture Keyword Extraction Interface\\\",\\n  \\\"description\\\": \\\"Tokenize Japanese text and identify the most similar words to a given keyword in the context of Japanese pop culture.\\\",\\n  \\\"function_name\\\": [\\\"tokenize_japanese_text\\\", \\\"similar_keywords\\\"],\\n  \\\"input_args\\\": [\\\"text\\\", \\\"keyword\\\", \\\"topn\\\"],\\n  \\\"return\\\": \\\"A list of most similar words to the given keyword.\\\",\\n  \\\"depend\\\": [\\\"MeCab Python Library\\\", \\\"gensim\\\", \\\"Word2Vec Model\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A chief medical officer from Kansas City who had been serving in another medical institution when Saint Luke's South Hospital opened.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Medical Document Classification Interface\\\",\\n\\\"description\\\": \\\"This interface classifies medical documents into categories such as 'medical prescription', 'patient history', 'lab results', etc. The user needs to input the text of the document, and the interface will return a classification label.\\\",\\n\\\"function_name\\\": \\\"classify_medical_document\\\",\\n\\\"input_args\\\": {\\\"text\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (classification label)\\\",\\n\\\"depend\\\": \\\"Huggingface's transformers library (BERT model or similar pre-trained on medical document classification)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A programming novice trying to understand Scala and Minecraft Modding", "synthesized text": "\"{\\n\\\"name\\\": \\\"Scala Code Compilation and Execution Interface\\\",\\n\\\"description\\\": \\\"An interface to compile and run Scala code. The user provides Scala code as a string, and the function compiles and executes the code, returning the output or any error messages.\\\",\\n\\\"function_name\\\": \\\"compile_and_run_scala_code\\\",\\n\\\"input_args\\\": [\\\"scala_code - String of Scala code to be compiled and executed\\\", \\\"scala_file_name - Name of the file where the Scala code will be written. Default is 'MyScala.scala'\\\"],\\n\\\"return\\\": \\\"String - Output of the Scala code execution or any error messages.\\\",\\n\\\"depend\\\": [\\\"Python built-in libraries: os, subprocess\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A cybersecurity expert leaking information about privacy breaches", "synthesized text": "\"{\\n\\\"name\\\": \\\"Data Breach Information Interface\\\",\\n\\\"description\\\": \\\"This interface checks if an email address has been exposed in any known data breaches using the Have I Been Pwned API.\\\",\\n\\\"function_name\\\": \\\"check_data_breach\\\",\\n\\\"input_args\\\": \\\"email - The email address to check.\\\",\\n\\\"return\\\": \\\"A list of known data breaches associated with the email. If the email is not found in the database, the function will return None.\\\",\\n\\\"depend\\\": \\\"Web API: Have I Been Pwned\\\"\\n}\"", "description": "tool development"}
{"input persona": "A nurse manager who specializes in infection control and helps enforce safety measures", "synthesized text": "\"{\\n\\\"name\\\": \\\"Infection Rate Prediction Interface\\\",\\n\\\"description\\\": \\\"Predicts the infection rate based on given parameters (like the number of infected cases, population density, vaccination rate, etc.) using a pre-trained XGBoost model.\\\",\\n\\\"function_name\\\": \\\"predict_infection_rate\\\",\\n\\\"input_args\\\": {\\n  \\\"model\\\": \\\"A pre-trained XGBoost model\\\",\\n  \\\"infected_cases\\\": \\\"Number of infected cases\\\",\\n  \\\"population_density\\\": \\\"Population density of the region\\\",\\n  \\\"vaccination_rate\\\": \\\"Vaccination rate of the region\\\"\\n},\\n\\\"return\\\": \\\"Predicted infection rate\\\",\\n\\\"depend\\\": \\\"xgboost, pandas\\\"\\n}\"", "description": "tool development"}
{"input persona": "a prospect cruise passenger who is worried about safety onboard", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cruise Ship Safety Score Interface\\\",\\n\\\"description\\\": \\\"Fetches the safety score of a specified cruise ship from CruiseMapper.\\\",\\n\\\"function_name\\\": \\\"get_cruise_safety_score\\\",\\n\\\"input_args\\\": \\\"cruise_name - string\\\",\\n\\\"return\\\": \\\"safety_score - string\\\",\\n\\\"depend\\\": \\\"requests, BeautifulSoup\\\"\\n}\"", "description": "tool development"}
{"input persona": "A business owner looking to develop comprehensive crisis management plans for their organization", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Crisis Prediction Interface\\\",\\n  \\\"description\\\": \\\"An interface that uses a machine learning model to predict the probability of a crisis event based on economic and financial data.\\\",\\n  \\\"function_name\\\": \\\"predict_crisis\\\",\\n  \\\"input_args\\\": \\\"path_to_csv - a string that contains the path to a CSV file which contains the required economic and financial data\\\",\\n  \\\"return\\\": \\\"A numpy array that contains the predicted probabilities of a crisis event in the near future.\\\",\\n  \\\"depend\\\": \\\"Python libraries: pandas, torch, transformers from Hugging Face\\\"\\n}\"", "description": "tool development"}
{"input persona": "An elderly retiree concerned about the stability of Social Security benefits", "synthesized text": "\"{\\n\\\"name\\\": \\\"Social Security Benefits Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface uses data from the SSA's OASDI Trustees Report and the CPI to forecast the future of social security benefits. The user inputs their current age and expected retirement age, and the interface returns a prediction of their future social security benefits.\\\",\\n\\\"function_name\\\": \\\"forecast_SSA_benefits\\\",\\n\\\"input_args\\\": [\\\"current_age\\\", \\\"retirement_age\\\"],\\n\\\"return\\\": \\\"A prediction of the user's future social security benefits, adjusted for inflation.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"numpy\\\", \\\"sklearn.linear_model.LinearRegression\\\", \\\"SSA's OASDI Trustees Report\\\", \\\"CPI data\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A software engineer proficient in both Python and matrix manipulation", "synthesized text": "\"{\\n\\\"name\\\": \\\"Matrix Operations Interface\\\",\\n\\\"description\\\": \\\"This interface enables users to perform a variety of matrix operations including addition, subtraction, multiplication, and division.\\\",\\n\\\"function_name\\\": \\\"matrix_operations\\\",\\n\\\"input_args\\\": [\\\"matrix1\\\", \\\"matrix2\\\", \\\"operation\\\"],\\n\\\"return\\\": \\\"A list of lists representing the result of the operation.\\\",\\n\\\"depend\\\": \\\"numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "a client seeking a divorce in Ontario, Canada", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Generator Interface\\\",\\n\\\"description\\\": \\\"This interface helps users generate the legal document needed for filing a divorce in Ontario, Canada. It fills a Word document template with the required information based on user input.\\\",\\n\\\"function_name\\\": \\\"generate_divorce_form\\\",\\n\\\"input_args\\\": [\\\"name\\\", \\\"address\\\", \\\"spouse_name\\\", \\\"marriage_date\\\", \\\"separation_date\\\", \\\"reason_for_divorce\\\"],\\n\\\"return\\\": \\\"A filled Word document for divorce filing.\\\",\\n\\\"depend\\\": [\\\"Python Library: docxtpl\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A hardcore player who has mastered all the strategies and tricks in Federation Cruiser games", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Game Achievement Analysis Interface\\\",\\n    \\\"description\\\": \\\"This interface retrieves and provides a comprehensive analysis of a player's game achievements from the RAWG Video Game Database API.\\\",\\n    \\\"function_name\\\": \\\"get_player_achievements\\\",\\n    \\\"input_args\\\": {\\n        \\\"username\\\": \\\"The username of the player.\\\"\\n    },\\n    \\\"return\\\": {\\n        \\\"achievements\\\": \\\"A dictionary where the keys are the names of games and the values are lists of achievements for each game. Each achievement is represented as a dictionary with 'name' and 'description' keys.\\\"\\n    },\\n    \\\"depend\\\": [\\\"requests library\\\", \\\"RAWG Video Game Database API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "An interior designer who specialises in kitchen design.", "synthesized text": "\"{\\n\\\"name\\\": \\\"3D Room Visualization\\\",\\n\\\"description\\\": \\\"Generates a 3D visualization of a room based on user-provided dimensions.\\\",\\n\\\"function_name\\\": \\\"create_3D_room\\\",\\n\\\"input_args\\\": [\\\"length\\\", \\\"width\\\", \\\"height\\\"],\\n\\\"return\\\": \\\"A 3D visualization of a room displayed in a new window.\\\",\\n\\\"depend\\\": \\\"Pygame library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experimental psychologist based in Auckland, New Zealand", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Emotion Detection Interface\\\",\\n\\\"description\\\": \\\"An interface that takes an image file and returns the detected emotions from the image using the Affectiva Emotion SDK.\\\",\\n\\\"function_name\\\": \\\"detect_emotions\\\",\\n\\\"input_args\\\": \\\"path_to_image - The path to the image file\\\",\\n\\\"return\\\": \\\"A dictionary mapping detected emotions to their corresponding scores\\\",\\n\\\"depend\\\": \\\"OpenCV (cv2), Affectiva Emotion SDK\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young couple with a newborn baby who live next door to the retired couple and often join them for meals at the diner", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baby Cry Detection Interface\\\",\\n\\\"description\\\": \\\"This interface takes the path to an audio file as input and returns whether a baby cry is detected in the audio.\\\",\\n\\\"function_name\\\": \\\"detect_baby_cry\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"'Baby Cry Detected' if a baby cry is detected, otherwise 'No Baby Cry Detected'\\\",\\n\\\"depend\\\": \\\"librosa, numpy, torch, torchvision\\\"\\n}\"", "description": "tool development"}
{"input persona": "A science enthusiast who believes in the power of hands-on experiments and traditional learning methods", "synthesized text": "\"{\\n\\\"name\\\": \\\"Chemical Reaction Simulator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the RDKit library to simulate a chemical reaction. The user inputs the reaction in a string format, and the interface returns the products of the reaction.\\\",\\n\\\"function_name\\\": \\\"simulate_chemical_reaction\\\",\\n\\\"input_args\\\": \\\"reaction_string: A string representing the chemical reaction. Reactants and products are separated by '>>'. Each molecule within reactants and products is separated by '.'. Example: 'CCO.C(=O)O >> CC(=O)O'\\\",\\n\\\"return\\\": \\\"A list of strings, where each string represents a product of the reaction in SMILES (Simplified Molecular Input Line Entry System) notation.\\\",\\n\\\"depend\\\": \\\"RDKit library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports store owner whose peak sales coincide with game days", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Event Detector Interface\\\",\\n\\\"description\\\": \\\"This interface fetches upcoming sports events using the Sports Open Data API. It can be used by sports store owners to anticipate peak sales days.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_sports_events\\\",\\n\\\"input_args\\\": {\\\"sport\\\": \\\"string indicating the type of sport\\\", \\\"country\\\": \\\"string indicating the country\\\"},\\n\\\"return\\\": \\\"List of dictionaries, each containing the date and participating teams of an upcoming sports event.\\\",\\n\\\"depend\\\": \\\"requests library, Sports Open Data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager who relies on the web developer to ensure the API integration is successful", "synthesized text": "\"{\\n\\\"name\\\": \\\"API Integration Test Interface\\\",\\n\\\"description\\\": \\\"An interface to test the API integration by returning the response code of the API call.\\\",\\n\\\"function_name\\\": \\\"test_api_integration\\\",\\n\\\"input_args\\\": {\\n    \\\"api_endpoint\\\": \\\"URL of the API endpoint\\\",\\n    \\\"params\\\": \\\"Parameters to be sent with the API request as a dictionary\\\"\\n    },\\n\\\"return\\\": \\\"HTTP status code of the API response.\\\",\\n\\\"depend\\\": \\\"Python requests library\\\"\\n}\"", "description": "tool development"}
{"input persona": "An empathetic church member who recently moved from a big city to Tumbler Ridge, BC.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Bible Verse of the Day Interface\\\",\\n  \\\"description\\\": \\\"An interface that fetches and returns a randomly selected bible verse of the day when the function is called.\\\",\\n  \\\"function_name\\\": \\\"get_bible_verse_of_the_day\\\",\\n  \\\"input_args\\\": \\\"None\\\",\\n  \\\"return\\\": \\\"A string that is the bible verse of the day.\\\",\\n  \\\"depend\\\": \\\"Python requests library, Bible.org's NET Bible Web Service API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A mining operations manager with no prior experience in data analytics and simulation platforms.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Mining Operations Simulation Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the SimPy library to create a simulation of a mining operation based on user-inputted parameters. The simulation can be analyzed to identify bottlenecks and areas for improvement in the operation.\\\",\\n\\\"function_name\\\": \\\"mining_operation_simulation\\\",\\n\\\"input_args\\\": {\\n\\\"extraction_duration\\\": \\\"The duration of the extraction process in the mining operation.\\\",\\n\\\"processing_duration\\\": \\\"The duration of the processing process in the mining operation.\\\",\\n\\\"transportation_duration\\\": \\\"The duration of the transportation process in the mining operation.\\\"\\n},\\n\\\"return\\\": \\\"A SimPy Environment object representing the simulation of the mining operation.\\\",\\n\\\"depend\\\": \\\"Python's SimPy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of the national tax commission responsible for designing tax policies", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tax Burden Simulation Interface\\\",\\n\\\"description\\\": \\\"This interface simulates the change in tax burden for a given income distribution under a proposed tax rate compared to a current tax rate.\\\",\\n\\\"function_name\\\": \\\"simulate_tax_burden\\\",\\n\\\"input_args\\\": {\\n    \\\"income_distribution\\\": \\\"A list of incomes representing the income distribution.\\\",\\n    \\\"current_tax_rate\\\": \\\"The current tax rate as a decimal.\\\",\\n    \\\"proposed_tax_rate\\\": \\\"The proposed tax rate as a decimal.\\\"\\n},\\n\\\"return\\\": \\\"A list of changes in tax burden corresponding to the input income distribution.\\\",\\n\\\"depend\\\": \\\"Python's Pandas and NumPy libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young professional who values a classic look and relies on the barber for regular trims", "synthesized text": "\"{\\n\\\"name\\\": \\\"Haircut Appointment Scheduling Interface\\\",\\n\\\"description\\\": \\\"An interface to create recurring haircut appointments in Google Calendar. The user needs to provide a starting date, frequency of appointments in weeks, and a preferred time for the appointment.\\\",\\n\\\"function_name\\\": \\\"schedule_haircut_appointments\\\",\\n\\\"input_args\\\": {\\\"start_date\\\": \\\"A datetime object representing the starting date of the appointments.\\\", \\\"frequency_in_weeks\\\": \\\"An integer representing the frequency of appointments in weeks.\\\", \\\"preferred_time\\\": \\\"A string in the format 'HH:MM' representing the preferred time for the appointment.\\\"},\\n\\\"return\\\": \\\"A string containing a link to the created event in Google Calendar.\\\",\\n\\\"depend\\\": {\\\"python_libraries\\\": [\\\"googleapiclient.discovery\\\", \\\"google_auth_oauthlib.flow\\\", \\\"datetime\\\", \\\"dateutil.relativedelta\\\"], \\\"web_APIs\\\": [\\\"Google Calendar API\\\"], \\\"machine_learning_models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "a computer technician who specializes in Linux systems.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Linux System Health Check Interface\\\",\\n\\\"description\\\": \\\"This interface returns a dictionary containing information about the system's CPU usage, memory usage, disk usage, and network stats.\\\",\\n\\\"function_name\\\": \\\"linux_system_health_check\\\",\\n\\\"input_args\\\": [],\\n\\\"return\\\": {\\\"cpu_usage\\\": \\\"string\\\", \\\"memory_usage\\\": \\\"string\\\", \\\"disk_usage\\\": \\\"string\\\", \\\"network_stats\\\": {\\\"sent\\\": \\\"integer\\\", \\\"received\\\": \\\"integer\\\"}},\\n\\\"depend\\\": [\\\"psutil library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A group of fellow aviation students who share the same dream and motivate each other to succeed", "synthesized text": "\"{\\n\\\"name\\\": \\\"Flight Weather Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to get real-time weather information for a specific airport by inputting the airport's ICAO code.\\\",\\n\\\"function_name\\\": \\\"get_weather_information\\\",\\n\\\"input_args\\\": [\\\"icao_code\\\"],\\n\\\"return\\\": \\\"A string that represents the current weather at the airport.\\\",\\n\\\"depend\\\": \\\"Python 'requests' library, 'xml.etree.ElementTree' for parsing XML response, and Aviation Weather Center's METAR data API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A climatologist who holds an optimistic view regarding the capacity for human innovation to help us adapt and mitigate climate change.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Climate Change Data Analysis Interface\\\",\\n  \\\"description\\\": \\\"An interface for retrieving and analyzing climate data. Users specify the climate variable they are interested in and the period they want to analyze.\\\",\\n  \\\"function_name\\\": \\\"analyze_climate_data\\\",\\n  \\\"input_args\\\": {\\n    \\\"variable\\\": \\\"The type of climate data to retrieve (e.g., 'tas', 'pr', etc.)\\\",\\n    \\\"start_date\\\": \\\"The start date of the period to analyze (year, in 'YYYY' format)\\\",\\n    \\\"end_date\\\": \\\"The end date of the period to analyze (year, in 'YYYY' format)\\\"\\n  },\\n  \\\"return\\\": \\\"A statistical summary (mean, standard deviation, quartiles, etc.) of the specified climate variable for the given period.\\\",\\n  \\\"depend\\\": {\\n    \\\"Python libraries\\\": [\\\"requests\\\", \\\"pandas\\\"],\\n    \\\"Web APIs\\\": [\\\"Climate API from the European Climate Assessment & Dataset (ECAD)\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A high school junior debating between a career in anthropology or graphic design", "synthesized text": "\"{\\n\\\"name\\\": \\\"Career Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that provides a comparison between two chosen careers, providing information on job growth, median pay, and education requirements.\\\",\\n\\\"function_name\\\": \\\"compare_careers\\\",\\n\\\"input_args\\\": [\\n    {\\n    \\\"name\\\": \\\"career1\\\",\\n    \\\"type\\\": \\\"string\\\",\\n    \\\"description\\\": \\\"The name of the first career to compare\\\"\\n    },\\n    {\\n    \\\"name\\\": \\\"career2\\\",\\n    \\\"type\\\": \\\"string\\\",\\n    \\\"description\\\": \\\"The name of the second career to compare\\\"\\n    }\\n],\\n\\\"return\\\": \\\"A dictionary containing two sub-dictionaries, each with the career name as the key and the career information as the value.\\\",\\n\\\"depend\\\": \\\"U.S. Bureau of Labor Statistics (BLS) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A compiler who reads and translates code", "synthesized text": "\"{\\n\\\"name\\\": \\\"Python Code Compiler Interface\\\",\\n\\\"description\\\": \\\"This interface compiles and executes Python code dynamically.\\\",\\n\\\"function_name\\\": \\\"compile_and_execute_python_code\\\",\\n\\\"input_args\\\": [\\\"code\\\"],\\n\\\"return\\\": \\\"Python objects defined in the code\\\",\\n\\\"depend\\\": [\\\"Python built-in exec function\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A regional director overseeing multiple supermarket chains, relying on the category manager's negotiation skills to drive sales", "synthesized text": "\"{\\n\\\"name\\\": \\\"Product Sales Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the sales of a product based on the product description, category manager's negotiation skill rating, and the current market trend of the product category.\\\",\\n\\\"function_name\\\": \\\"predict_sales\\\",\\n\\\"input_args\\\": [\\\"product_description\\\", \\\"negotiation_skill_rating\\\", \\\"market_trend\\\"],\\n\\\"return\\\": \\\"String indicating the expected sales level ('Low Sales Expected', 'Moderate Sales Expected', or 'High Sales Expected')\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library (BertForSequenceClassification, BertTokenizerFast)\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sports betting company that advertises on the podcast and offers exclusive promotions for listeners", "synthesized text": "\"{\\n\\\"name\\\": \\\"Podcast Promotion Code Interface\\\",\\n\\\"description\\\": \\\"This interface generates unique promotion codes for podcast listeners.\\\",\\n\\\"function_name\\\": \\\"create_podcast_promo_codes\\\",\\n\\\"input_args\\\": [\\\"podcast_name\\\", \\\"num_listeners\\\"],\\n\\\"return\\\": \\\"A list of unique promotion codes for the specified podcast and number of listeners\\\",\\n\\\"depend\\\": [\\\"Python's random and string libraries\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A magician and neuroscientist who combines magic and brain imaging techniques to study attention and perception", "synthesized text": "\"{\\n\\\"name\\\": \\\"Brain Activity Visualization Interface\\\",\\n\\\"description\\\": \\\"An interface to generate a topographic map of brain activity from an EEG file. The map shows the distribution of electrical activity on the scalp at a specific time point.\\\",\\n\\\"function_name\\\": \\\"plot_topomap_from_eeg\\\",\\n\\\"input_args\\\": \\\"path_to_eeg_file: The path to an EEG file in .fif format.\\\",\\n\\\"return\\\": \\\"A topographic map of the evoked brain activity. The map is displayed directly and not returned as a value.\\\",\\n\\\"depend\\\": \\\"MNE-Python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "一位钟情于日式料理的香港美食家", "synthesized text": "\"{\\n\\\"name\\\": \\\"Japanese Recipe Translation and Understanding Interface\\\",\\n\\\"description\\\": \\\"This interface translates a Japanese recipe into English and then processes the translated recipe to understand the cooking steps. It uses the Google Translate API for translation and a GPT-2 model for recipe understanding.\\\",\\n\\\"function_name\\\": \\\"translate_and_understand_japanese_recipe\\\",\\n\\\"input_args\\\": {\\n    \\\"recipe\\\": \\\"The Japanese recipe you want to cook, in Japanese.\\\"\\n},\\n\\\"return\\\": \\\"The list of potential English interpretations of the cooking steps.\\\",\\n\\\"depend\\\": {\\n    \\\"python libraries\\\": [\\\"requests\\\", \\\"transformers\\\"],\\n    \\\"Web APIs\\\": [\\\"Google Translate API\\\"],\\n    \\\"machine learning models\\\": [\\\"GPT-2 model from Huggingface\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "a Canadian botanist who specilises in the classification of ferns.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Plant Classification Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to identify fern species from an image. Uses the Plant.id Plant Identification API.\\\",\\n\\\"function_name\\\": \\\"identify_fern\\\",\\n\\\"input_args\\\": [\\\"image_path\\\"],\\n\\\"return\\\": \\\"String - The likely name of the fern species in the image.\\\",\\n\\\"depend\\\": [\\\"requests\\\", \\\"base64\\\", \\\"Plant.id Plant Identification API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A popular rock band known for their high-energy performances and large following", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real Time Concert Ticket Availability Interface\\\",\\n\\\"description\\\": \\\"An interface that uses Ticketmaster API to check the availability of concert tickets for a specified artist in a specified city.\\\",\\n\\\"function_name\\\": \\\"check_concert_ticket_availability\\\",\\n\\\"input_args\\\": {\\n    \\\"artist_name\\\": \\\"The name of the artist or band for which to check ticket availability.\\\",\\n    \\\"city\\\": \\\"The city where the user wants to watch the concert.\\\"\\n    },\\n\\\"return\\\": \\\"A list of events with the name, date, and available tickets for each event.\\\",\\n\\\"depend\\\": \\\"Ticketmaster API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A web developer responsible for implementing the changes based on the user testing findings", "synthesized text": "\"{\\n\\\"name\\\": \\\"Website Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google's PageSpeed Insights API to analyze the performance of a given web page and returns a detailed report containing metrics like First Contentful Paint, Speed Index, Largest Contentful Paint, Time to Interactive, Total Blocking Time, and Cumulative Layout Shift.\\\",\\n\\\"function_name\\\": \\\"analyze_website_performance\\\",\\n\\\"input_args\\\": [\\\"url\\\"],\\n\\\"return\\\": \\\"A dictionary containing the performance score and various metrics of the web page.\\\",\\n\\\"depend\\\": \\\"requests library, Google PageSpeed Insights API\\\"\\n}\"", "description": "tool development"}
{"input persona": "我是新加坡田径发烧友，热衷于追踪国家队的表现。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Real-time Sports Score Query Interface\\\",\\n\\\"description\\\": \\\"An interface that calls the Sportradar API to get the latest match results and statistics of the sports team or athlete input by the user.\\\",\\n\\\"function_name\\\": \\\"get_sports_team_stats\\\",\\n\\\"input_args\\\": \\\"team_name\\\",\\n\\\"return\\\": \\\"The latest match results and statistics of the input team or athlete in json format.\\\",\\n\\\"depend\\\": \\\"requests library, Sportradar API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A corporate social responsibility (CSR) officer at a large company, looking to partner with nonprofits for volunteer initiatives", "synthesized text": "\"{\\n\\\"name\\\": \\\"Nonprofit Organization Search Interface\\\",\\n\\\"description\\\": \\\"An interface that leverages the GlobalGiving API to find suitable nonprofit organizations for collaboration based on a company's interests.\\\",\\n\\\"function_name\\\": \\\"get_nonprofits_by_interest\\\",\\n\\\"input_args\\\": {\\n  \\\"interest\\\": \\\"A string representing the company's interest, e.g., 'education' or 'health'.\\\"\\n},\\n\\\"return\\\": \\\"A list of dictionaries where each dictionary contains the 'name', 'mission', and 'theme' of a nonprofit organization.\\\",\\n\\\"depend\\\": \\\"GlobalGiving API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent who brings their child to the café after they finish playing Pokémon Go in the nearby park", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Pok\\u00e9mon Type Effectiveness Interface\\\",\\n  \\\"description\\\": \\\"This interface takes the name of a Pok\\u00e9mon and returns a dictionary that describes what types of Pok\\u00e9mon it is weak or strong against.\\\",\\n  \\\"function_name\\\": \\\"get_pokemon_type_effectiveness\\\",\\n  \\\"input_args\\\": [\\\"pokemon_name\\\"],\\n  \\\"return\\\": {\\\"pokemon_type\\\": {\\\"weaknesses\\\": [\\\"type1\\\", \\\"type2\\\", ...], \\\"strengths\\\": [\\\"type1\\\", \\\"type2\\\", ...]}},\\n  \\\"depend\\\": [\\\"requests\\\", \\\"Pok\\u00e9API\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A charismatic pastor who envisions a grand renovation of the church building", "synthesized text": "\"{\\n\\\"name\\\": \\\"Building Design Visualization Interface\\\",\\n\\\"description\\\": \\\"This interface uses the OpenAI's DALL-E model to generate images from textual descriptions to visualize building designs.\\\",\\n\\\"function_name\\\": \\\"generate_building_image\\\",\\n\\\"input_args\\\": \\\"description - A detailed textual description of the building.\\\",\\n\\\"return\\\": \\\"A generated image representing the textual description.\\\",\\n\\\"depend\\\": \\\"OpenAI's DALL-E model\\\"\\n}\"", "description": "tool development"}
{"input persona": "A franchise owner of a major retail brand planning to establish a branch in the town", "synthesized text": "\"{\\n\\\"name\\\": \\\"Location Demographics and Competitor Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface provides demographic information about a specified town and identifies competitors within the same industry in that town.\\\",\\n\\\"function_name\\\": \\\"get_demographics_and_competitors\\\",\\n\\\"input_args\\\": {\\n    \\\"town\\\": \\\"name of the town where the new branch is planned\\\",\\n    \\\"industry\\\": \\\"type of industry the retail brand belongs to\\\"\\n},\\n\\\"return\\\": {\\n    \\\"town_demographics\\\": \\\"demographic information about the town\\\",\\n    \\\"competitors\\\": \\\"list of competitors within the same industry in the town\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"python_libraries\\\": [\\\"requests\\\", \\\"pandas\\\"],\\n    \\\"web_APIs\\\": [\\\"US Census Bureau API\\\", \\\"Yelp API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "a competitive sailor who has participated in H-boat championships", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wind Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenWeather API to get current wind speed and direction based on the provided location. It is useful for sailors to plan their sailing strategy.\\\",\\n\\\"function_name\\\": \\\"get_wind_forecast\\\",\\n\\\"input_args\\\": \\\"location - a string representing the location\\\",\\n\\\"return\\\": \\\"A dictionary with 'speed' and 'direction' as keys representing the wind speed and direction respectively.\\\",\\n\\\"depend\\\": \\\"requests library, OpenWeather API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An enthusiastic supporter of Beto O'Rourke", "synthesized text": "\"{\\n\\\"name\\\": \\\"Donation Tracker Interface\\\",\\n\\\"description\\\": \\\"This interface uses OpenSecrets.org API to track the total amount of donations a politician has received. Users only need to input the politician's name.\\\",\\n\\\"function_name\\\": \\\"get_total_donations\\\",\\n\\\"input_args\\\": {\\n  \\\"politician_name\\\": \\\"The name of the politician\\\"\\n  },\\n\\\"return\\\": \\\"The total amount of donations the politician has received.\\\",\\n\\\"depend\\\": \\\"requests library, OpenSecrets.org API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A parent whose kid goes to Zingisa Intermediate School.", "synthesized text": "\"{\\n\\\"name\\\": \\\"School Closure Alert Interface\\\",\\n\\\"description\\\": \\\"This interface checks if a school is closed by scraping updates from the school's website.\\\",\\n\\\"function_name\\\": \\\"check_school_closure\\\",\\n\\\"input_args\\\": \\\"school_url - The URL of the school's website.\\\",\\n\\\"return\\\": \\\"A string stating whether the school is closed or open.\\\",\\n\\\"depend\\\": \\\"Python's requests and BeautifulSoup libraries are used.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A highway construction contractor experienced in implementing innovative road design solutions", "synthesized text": "\"{\\n\\\"name\\\": \\\"Traffic Flow Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface predicts the traffic flow based on historical traffic data and other features such as time of day, day of the week, and weather conditions.\\\",\\n\\\"function_name\\\": \\\"predict_traffic_flow\\\",\\n\\\"input_args\\\": [\\\"time_of_day\\\", \\\"day_of_week\\\", \\\"weather_condition\\\"],\\n\\\"return\\\": \\\"Predicted traffic flow as a number.\\\",\\n\\\"depend\\\": \\\"scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A skilled audio technician who assists the music producer in creating the perfect mix for country tracks", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Audio Enhancement Interface\\\",\\n  \\\"description\\\": \\\"This interface enhances audio files by applying noise reduction and normalizing the volume. The user provides the path to an audio file, and the interface returns the path to the enhanced audio file.\\\",\\n  \\\"function_name\\\": \\\"enhance_audio\\\",\\n  \\\"input_args\\\": [\\\"path_to_audio\\\"],\\n  \\\"return\\\": \\\"Path to the enhanced audio file\\\",\\n  \\\"depend\\\": [\\\"librosa library\\\", \\\"noisereduce library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A Certified Engineering Technologist (C.E.T) from Alberta who is very protective of personal information.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Data Encryption Interface\\\",\\n  \\\"description\\\": \\\"This interface encrypts the input data using a password provided by the user. The encrypted data is returned as a dictionary containing the cipher text, salt, nonce, and tag.\\\",\\n  \\\"function_name\\\": \\\"encrypt_data\\\",\\n  \\\"input_args\\\": [\\\"plain_text\\\", \\\"password\\\"],\\n  \\\"return\\\": \\\"A dictionary containing the cipher text, salt, nonce, and tag, all encoded in base64 and decoded to utf-8 string.\\\",\\n  \\\"depend\\\": \\\"PyCryptodome python library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young cousin with a natural talent for logical reasoning and a love for brain-teasing games", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sudoku Solver Interface\\\",\\n\\\"description\\\": \\\"This interface takes a 2D list representing a Sudoku puzzle and returns the solved puzzle. It uses logical reasoning and backtracking to find the solution.\\\",\\n\\\"function_name\\\": \\\"solve_sudoku\\\",\\n\\\"input_args\\\": [\\\"puzzle\\\"],\\n\\\"return\\\": \\\"A 2D list representing the solved Sudoku puzzle\\\",\\n\\\"depend\\\": \\\"numpy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "As an elderly woman who prefers peace and seclusion over a bustling cityscape.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Noise Level Mapping Interface\\\",\\n\\\"description\\\": \\\"This interface provides a noise level map for the specified area by contacting the local environment agency's API.\\\",\\n\\\"function_name\\\": \\\"get_noise_level_map\\\",\\n\\\"input_args\\\": [\\\"area - The area for which the user wants to get the noise level map.\\\"],\\n\\\"return\\\": \\\"A noise level map for the specified area.\\\",\\n\\\"depend\\\": \\\"requests library, Local Environment Agency's API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student who frequently rents e-scooters for their daily commute", "synthesized text": "\"{\\n\\\"name\\\": \\\"E-Scooter Availability Interface\\\",\\n\\\"description\\\": \\\"This interface returns the available e-scooters in the nearby area of the provided location.\\\",\\n\\\"function_name\\\": \\\"get_available_escooters\\\",\\n\\\"input_args\\\": [\\\"longitude\\\", \\\"latitude\\\"],\\n\\\"return\\\": \\\"A list of available e-scooters, each represented by a dictionary with 'id', 'latitude', and 'longitude' keys.\\\",\\n\\\"depend\\\": \\\"Lime API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A project manager in charge of overseeing the construction and implementation of wind farms", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Wind Turbine Efficiency Interface\\\",\\n  \\\"description\\\": \\\"An interface for predicting the power output of a wind turbine based on wind speed data.\\\",\\n  \\\"function_name\\\": [\\\"train_model\\\", \\\"predict_power_output\\\"],\\n  \\\"input_args\\\": [\\n    {\\\"train_model\\\": [\\\"wind_speed_data\\\", \\\"power_output_data\\\"]},\\n    {\\\"predict_power_output\\\": [\\\"wind_speed_data\\\"]}\\n  ],\\n  \\\"return\\\": [\\n    {\\\"train_model\\\": \\\"None, trains the model in-place\\\"},\\n    {\\\"predict_power_output\\\": \\\"Predicted power output of a wind turbine\\\"}\\n  ],\\n  \\\"depend\\\": [\\\"sklearn.linear_model.LinearRegression\\\", \\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A young apprentice learning about the history and restoration of windmills", "synthesized text": "\"{\\n\\\"name\\\": \\\"Windmill Restoration Progress Tracker Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a machine learning model to analyze the restoration progress of windmills by comparing the current image of the windmill to a standard restored windmill image.\\\",\\n\\\"function_name\\\": \\\"get_image_similarity\\\",\\n\\\"input_args\\\": [\\\"restored_windmill_path\\\", \\\"current_windmill_path\\\"],\\n\\\"return\\\": \\\"A percentage indicating the degree of completion of the restoration process.\\\",\\n\\\"depend\\\": \\\"Python libraries: tensorflow, numpy; Machine Learning Model: VGG16\\\"\\n}\"", "description": "tool development"}
{"input persona": "a streaming service sales representative", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface recommends movies based on the user's viewing history. It uses a pre-trained BERT model for next item recommendation.\\\",\\n\\\"function_name\\\": \\\"recommend_movies\\\",\\n\\\"input_args\\\": \\\"viewing_history - a list of movie titles that the user has watched\\\",\\n\\\"return\\\": \\\"A list of recommended movie titles\\\",\\n\\\"depend\\\": \\\"Hugging Face's BERT model\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced electrician who is willing to teach the homeowner basic electrical skills", "synthesized text": "\"{\\n\\\"name\\\": \\\"Electrical Circuit Simulator Interface\\\",\\n\\\"description\\\": \\\"This interface uses the PySpice library to simulate electrical circuits. The user inputs the components and their connections, and the interface simulates the circuit and returns the output voltages.\\\",\\n\\\"function_name\\\": \\\"simulate_circuit\\\",\\n\\\"input_args\\\": {\\\"components\\\": \\\"A list of dictionaries where each dictionary represents a component in the circuit. Each dictionary has the keys: 'type', 'name', 'node1', 'node2', and 'value'.\\\"},\\n\\\"return\\\": \\\"A dictionary where the keys are the nodes in the circuit and the values are the voltages at those nodes.\\\",\\n\\\"depend\\\": \\\"PySpice\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Central African Republic citizen who is an economics professor", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Indicator Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves economic indicator data for a specific country using the World Bank API. The data is returned as a pandas DataFrame.\\\",\\n\\\"function_name\\\": \\\"retrieve_economic_indicator\\\",\\n\\\"input_args\\\": {\\n    \\\"country_id\\\": \\\"A 3-letter code representing the country\\\",\\n    \\\"indicator_id\\\": \\\"A unique identifier for the economic indicator\\\"\\n},\\n\\\"return\\\": \\\"A pandas DataFrame with two columns: 'date' and 'value', or a string message if no data is available.\\\",\\n\\\"depend\\\": \\\"requests, pandas, World Bank API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a middle-aged Swedish woman named Inga who is a language enthusiast and proud of her name.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Name Pronunciation Interface\\\",\\n  \\\"description\\\": \\\"This interface provides an audio pronunciation of a given text, defaulting to English pronunciation. It uses the Google Text-to-Speech API to generate the pronunciation.\\\",\\n  \\\"function_name\\\": \\\"get_pronunciation\\\",\\n  \\\"input_args\\\": {\\n    \\\"text\\\": \\\"The text you want to generate a pronunciation for\\\",\\n    \\\"language\\\": \\\"The language for the pronunciation (optional, defaults to 'en')\\\"\\n  },\\n  \\\"return\\\": \\\"The filename of an audio file containing the pronunciation of the provided text\\\",\\n  \\\"depend\\\": [\\\"gTTS library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A psychology major who emphasizes the importance of qualitative research in understanding consumer behavior", "synthesized text": "\"{\\n\\\"name\\\": \\\"Interview Transcription Interface\\\",\\n\\\"description\\\": \\\"This interface uses Google's Speech-to-Text API to transcribe audio files from interviews.\\\",\\n\\\"function_name\\\": \\\"transcribe_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio\\\",\\n\\\"return\\\": \\\"A list of transcriptions from the audio file\\\",\\n\\\"depend\\\": \\\"Google's Speech-to-Text API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A manufacturer of specialized cameras and audio recording devices that supports the explorer's film shoots", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sound Removal Interface\\\",\\n\\\"description\\\": \\\"An interface that uses a pre-trained model from Hugging Face to remove noise from audio files.\\\",\\n\\\"function_name\\\": \\\"remove_noise\\\",\\n\\\"input_args\\\": [\\\"path_to_audio\\\"],\\n\\\"return\\\": \\\"A string of cleaned audio.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"torch\\\", \\\"transformers\\\"], \\\"machine learning models\\\": [\\\"facebook/wav2vec2-base-960h\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An English literature major who appreciates the creativity in using basketball analogies to explain abstract concepts", "synthesized text": "\"{\\n\\\"name\\\": \\\"Basketball Analogy Interface\\\",\\n\\\"description\\\": \\\"This interface takes an abstract concept as input and generates a basketball analogy to explain it using the GPT-3 model from OpenAI's huggingface.\\\",\\n\\\"function_name\\\": \\\"generate_basketball_analogy\\\",\\n\\\"input_args\\\": \\\"abstract_concept - A string that represents an abstract concept\\\",\\n\\\"return\\\": \\\"A string that represents a basketball analogy of the input abstract concept\\\",\\n\\\"depend\\\": \\\"huggingface's transformers library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A local government official responsible for implementing erosion control measures and seeking data for decision-making", "synthesized text": "\"{\\n\\\"name\\\": \\\"Erosion Prediction Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Revised Universal Soil Loss Equation (RUSLE) to predict the long-term average annual rate of erosion. It provides government officials with data that can be used in decision-making for implementing erosion control measures.\\\",\\n\\\"function_name\\\": \\\"predict_soil_loss\\\",\\n\\\"input_args\\\": {\\n    \\\"R\\\": \\\"rainfall erosivity index of the site\\\",\\n    \\\"K\\\": \\\"soil erodibility factor\\\",\\n    \\\"LS\\\": \\\"slope length-steepness factor\\\",\\n    \\\"C\\\": \\\"cover-management factor\\\",\\n    \\\"P\\\": \\\"support practice factor\\\"\\n},\\n\\\"return\\\": \\\"Predicted average soil loss per unit area per year\\\",\\n\\\"depend\\\": \\\"None\\\"\\n}\"", "description": "tool development"}
{"input persona": "An Azure Solutions Architect responsible for overseeing the implementation of Azure services", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Virtual Machine Creation Interface\\\",\\n    \\\"description\\\": \\\"An interface to create a Virtual Machine in Azure. It simplifies the process of creating a VM by abstracting the complex operations and providing a simple interface where the user only needs to input the VM name, resource group, location, admin username, and password.\\\",\\n    \\\"function_name\\\": \\\"create_virtual_machine\\\",\\n    \\\"input_args\\\": [\\\"vm_name\\\", \\\"resource_group_name\\\", \\\"location\\\", \\\"admin_username\\\", \\\"admin_password\\\"],\\n    \\\"return\\\": \\\"A string message indicating the successful creation of the VM.\\\",\\n    \\\"depend\\\": [\\\"azure.identity.DefaultAzureCredential\\\", \\\"azure.mgmt.resource.ResourceManagementClient\\\", \\\"azure.mgmt.network.NetworkManagementClient\\\", \\\"azure.mgmt.compute.ComputeManagementClient\\\", \\\"azure.mgmt.compute.models.DiskCreateOption\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A horror movie director seeking insight into how to more effectively elicit fear and suspense in viewers", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Audience Reaction Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predicts the audience's emotional reactions at each moment of a given video scene. This can be used to identify when viewers are likely to experience fear and suspense.\\\",\\n  \\\"function_name\\\": \\\"predict_audience_reaction\\\",\\n  \\\"input_args\\\": {\\\"video_path\\\": \\\"The path to the video file to be analyzed.\\\"},\\n  \\\"return\\\": \\\"A dictionary, where the keys are timestamps in the video, and the values are the predicted audience reactions at those moments. The reactions are represented as a dictionary of emotion probabilities.\\\",\\n  \\\"depend\\\": {\\\"API\\\": \\\"Affectiva API\\\", \\\"python libraries\\\": [\\\"requests\\\", \\\"base64\\\", \\\"json\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A film enthusiast focused on anime features with a specific interest in the influence of culture and period elements in modern storytelling.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Anime Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in a user's favorite anime and returns a list of recommended anime series that the user might like.\\\",\\n\\\"function_name\\\": \\\"recommendation_system\\\",\\n\\\"input_args\\\": \\\"favorite_anime\\\",\\n\\\"return\\\": \\\"List of recommended anime series\\\",\\n\\\"depend\\\": \\\"Python's surprise library, pandas library, and Anime Recommendations Database from Kaggle\\\"\\n}\"", "description": "tool development"}
{"input persona": "A recruiting manager who specializes in the Elevator & Escalator industry", "synthesized text": "\"{\\n\\\"name\\\": \\\"Resume Filtering Interface\\\",\\n\\\"description\\\": \\\"An interface that scores a resume based on its relevance to the Elevator & Escalator industry.\\\",\\n\\\"function_name\\\": \\\"score_resume\\\",\\n\\\"input_args\\\": [\\\"file_path\\\"],\\n\\\"return\\\": \\\"A score between 0 to 1 indicating the relevance of the resume to the Elevator & Escalator industry.\\\",\\n\\\"depend\\\": \\\"Python's built-in 're' library and Hugging Face's 'transformers' library.\\\"\\n}\"", "description": "tool development"}
{"input persona": "A cancer survivor in need of a meal plan to rebuild strength and support immune function", "synthesized text": "\"{\\n  \\\"name\\\" : \\\"Meal Plan Generator Interface\\\",\\n  \\\"description\\\" : \\\"An interface for generating a meal plan based on user's dietary requirements and analyzing the nutritional values of the meals. It uses the Spoonacular API for generating the meal plan and the Edamam Nutrition Analysis API for checking the nutritional values.\\\",\\n  \\\"function_name\\\" : \\\"get_meal_plan\\\",\\n  \\\"input_args\\\" : {\\n    \\\"diet_type\\\" : \\\"The user's diet type (e.g., 'vegetarian', 'vegan', 'paleo', etc.)\\\",\\n    \\\"target_calories\\\" : \\\"The target amount of calories per day\\\",\\n    \\\"exclude_ingredients\\\" : \\\"A list of ingredients to be excluded from the meal plan\\\"\\n  },\\n  \\\"return\\\" : \\\"A meal plan with the meal titles, ingredients, and their nutritional values.\\\",\\n  \\\"depend\\\" : \\\"Python requests library, Spoonacular API, Edamam Nutrition Analysis API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curatorial expertise with strong connections to Oscar-winning filmmakers", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface takes in the name of an Oscar-winning filmmaker and returns a list of movies by the filmmaker, along with their ratings and a brief summary.\\\",\\n\\\"function_name\\\": \\\"get_movies_by_filmmaker\\\",\\n\\\"input_args\\\": {\\\"filmmaker\\\": \\\"string\\\"},\\n\\\"return\\\": [{\\\"title\\\": \\\"string\\\", \\\"overview\\\": \\\"string\\\", \\\"release_date\\\": \\\"string\\\", \\\"rating\\\": \\\"float\\\"}],\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"requests\\\"], \\\"Web APIs\\\": [\\\"The Movie Database (TMDB) API\\\"], \\\"machine learning models\\\": []}\\n}\"", "description": "tool development"}
{"input persona": "a female fan of women's football in Italy", "synthesized text": "\"{\\n\\\"name\\\": \\\"Women's Football Match Schedule Interface\\\",\\n\\\"description\\\": \\\"An interface that uses football-data.org's API to return the upcoming matches for a specified women's football league. This example is focused on the Italian women's football league, Serie A Femminile.\\\",\\n\\\"function_name\\\": \\\"get_upcoming_matches\\\",\\n\\\"input_args\\\": \\\"league_id - The ID of the football league to get matches for, as a string or integer. For Serie A Femminile, the ID is 1751.\\\",\\n\\\"return\\\": \\\"A list of dictionaries. Each dictionary contains the 'homeTeam', 'awayTeam', and 'date' for an upcoming match.\\\",\\n\\\"depend\\\": \\\"Python library: requests; Web API: football-data.org\\\"\\n}\"", "description": "tool development"}
{"input persona": "An open-minded and welcoming American family with a passion for cultural exchange", "synthesized text": "\"{\\n\\\"name\\\": \\\"Language Translation Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to input text in their native language and receive a translation in English. It is particularly useful for a family that hosts international visitors frequently and wants to communicate seamlessly.\\\",\\n\\\"function_name\\\": \\\"translate_text_to_english\\\",\\n\\\"input_args\\\": {\\\"input_text\\\": \\\"Text in any language that needs to be translated to English\\\"},\\n\\\"return\\\": \\\"Translated text in English\\\",\\n\\\"depend\\\": \\\"Python library: google.cloud, Web API: Google's Translation API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A corporate representative who provides financial support and expects results in return", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Investment Performance Analysis Interface\\\",\\n  \\\"description\\\": \\\"This interface uses the Yahoo Finance API to calculate the return on investment for a specific stock over a specific period.\\\",\\n  \\\"function_name\\\": \\\"calculate_investment_return\\\",\\n  \\\"input_args\\\": {\\n    \\\"symbol\\\": \\\"The ticker symbol of the stock. (e.g., 'AAPL' for Apple Inc.)\\\",\\n    \\\"investment_date\\\": \\\"The date of the investment. (Format: 'YYYY-MM-DD')\\\",\\n    \\\"number_of_shares\\\": \\\"The number of shares purchased.\\\"\\n  },\\n  \\\"return\\\": {\\n    \\\"roi\\\": \\\"The return on investment as a percentage.\\\",\\n    \\\"current_value\\\": \\\"The current total value of the investment.\\\"\\n  },\\n  \\\"depend\\\": {\\n    \\\"Python libraries\\\": [\\\"requests\\\", \\\"pandas\\\", \\\"datetime\\\"],\\n    \\\"Web APIs\\\": [\\\"Yahoo Finance API\\\"]\\n  }\\n}\"", "description": "tool development"}
{"input persona": "A retired military officer who enjoys military dramas and has recently gotten into Korean series.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Korean Drama Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that provides recommendations for Korean dramas based on a preferred genre. It uses the TMDB (The Movie Database) API to fetch the recommendations.\\\",\\n\\\"function_name\\\": \\\"get_korean_drama_recommendations\\\",\\n\\\"input_args\\\": {\\\"genre\\\": \\\"genre ID used by TMDB\\\"},\\n\\\"return\\\": \\\"List of recommended Korean drama names\\\",\\n\\\"depend\\\": \\\"requests library, TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a member of a slum in Nairobi, Kenya", "synthesized text": "\"{\\n\\\"name\\\": \\\"Clean Water Supply Checker\\\",\\n\\\"description\\\": \\\"This interface uses the Aqueduct Water Risk Atlas API to return the water risk score for a given location, helping users understand the quality and availability of their water supply.\\\",\\n\\\"function_name\\\": \\\"get_water_risk_score\\\",\\n\\\"input_args\\\": [\\\"location\\\"],\\n\\\"return\\\": \\\"Water risk score\\\",\\n\\\"depend\\\": \\\"World Resources Institute's Aqueduct Water Risk Atlas API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A website owner who seeks fresh and engaging visual content for their tech news site", "synthesized text": "\"{\\n\\\"name\\\": \\\"Image Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface fetches images related to a specific keyword using the Unsplash API. The user inputs a keyword related to the topic they need images for, and the interface returns the URLs of the top 5 images.\\\",\\n\\\"function_name\\\": \\\"get_image_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"keyword\\\": \\\"A string representing the keyword or topic for which relevant images are needed.\\\",\\n    \\\"count\\\": \\\"An optional integer indicating the number of images to return. Default is 5.\\\"\\n},\\n\\\"return\\\": \\\"A list of URLs of the top 'count' images related to the keyword.\\\",\\n\\\"depend\\\": \\\"This function depends on the 'requests' Python library and the Unsplash API.\\\"\\n}\"", "description": "tool development"}
{"input persona": "I am an Omani historian with a deep interest in the traditions of my country, and find myself engaging in discussions about the evolution of our legal and cultural practices.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Legal Document Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses a named entity recognition model to identify and categorize entities in a given legal document.\\\",\\n\\\"function_name\\\": \\\"analyze_legal_document\\\",\\n\\\"input_args\\\": \\\"A path to a legal document text file\\\",\\n\\\"return\\\": \\\"A list of dictionaries, each containing an identified entity, its category, and the position in the input text where it was found.\\\",\\n\\\"depend\\\": \\\"Hugging Face's transformers library, specifically the 'dbmdz/bert-large-cased-finetuned-conll03-english' model and the 'bert-base-cased' tokenizer\\\"\\n}\"", "description": "tool development"}
{"input persona": "A zoologist who focuses on studying the mating habits of different wild cat species", "synthesized text": "\"{\\n\\\"name\\\": \\\"Wildlife Observation Data Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to analyze and visualize the mating habits of different wild cat species. The user inputs a CSV file path containing the observation data and specifies the species of interest. The interface then analyzes the data and generates visualizations to display the mating habits of the specified species.\\\",\\n\\\"function_name\\\": \\\"analyze_mating_habits\\\",\\n\\\"input_args\\\": {\\n    \\\"file_path\\\": \\\"The path to the CSV file containing the observation data.\\\",\\n    \\\"species\\\": \\\"The species of interest.\\\"\\n  },\\n\\\"return\\\": \\\"A bar chart showing the counts of different mating behaviors observed for the specified species, and a dictionary with mating behaviors as keys and their counts as values.\\\",\\n\\\"depend\\\": [\\\"pandas\\\", \\\"matplotlib\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a tax accountant from Ohio", "synthesized text": "\"{\\n\\\"name\\\": \\\"Tax Calculation Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the total federal and state tax owed for a given annual income, filing status, and number of dependents. The tax rates are fetched from taxee.io.\\\",\\n\\\"function_name\\\": \\\"calculate_tax_annually\\\",\\n\\\"input_args\\\": {\\n    \\\"annual_income\\\": \\\"The annual income of the user\\\",\\n    \\\"filing_status\\\": \\\"The filing status of the user (single, married, head_of_household)\\\",\\n    \\\"num_of_dependents\\\": \\\"The number of dependents the user has\\\"\\n},\\n\\\"return\\\": \\\"The total tax owed by the user for federal and state taxes\\\",\\n\\\"depend\\\": \\\"This function depends on the requests library and the taxee.io API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A small business owner who is seeking guidance on migrating their on-premises infrastructure to a hybrid cloud", "synthesized text": "\"{\\n  \\\"name\\\": \\\"AWS Cloud Migration Interface\\\",\\n  \\\"description\\\": \\\"An interface for uploading local files to an AWS S3 bucket, aiding in migrating on-premise infrastructure to a hybrid cloud.\\\",\\n  \\\"function_name\\\": \\\"upload_file_to_s3\\\",\\n  \\\"input_args\\\": {\\n    \\\"local_file_path\\\": \\\"The local path to the file that needs to be uploaded.\\\",\\n    \\\"bucket_name\\\": \\\"The name of the destination AWS S3 bucket.\\\"\\n  },\\n  \\\"return\\\": \\\"A message indicating that the file has been successfully uploaded to the AWS S3 bucket.\\\",\\n  \\\"depend\\\": [\\\"boto3\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A shy elementary school student struggling to pronounce certain sounds correctly", "synthesized text": "\"{\\n\\\"name\\\": \\\"Speech Pronunciation Correction Interface\\\",\\n\\\"description\\\": \\\"This interface transcribes an audio file and generates an audio file with the correct pronunciation.\\\",\\n\\\"function_name\\\": \\\"correct_pronunciation\\\",\\n\\\"input_args\\\": [\\\"path_to_audio\\\", \\\"output_path\\\"],\\n\\\"return\\\": \\\"A path to an audio file with the correct pronunciation.\\\",\\n\\\"depend\\\": {\\\"python libraries\\\": [\\\"tensorflow\\\", \\\"tensorflow_hub\\\", \\\"transformers\\\", \\\"gtts\\\"],\\n\\\"Web APIs\\\": null, \\n\\\"machine learning models\\\": [\\\"facebook/wav2vec2-base-960h\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "An ethics committee member responsible for evaluating the ethical implications of implementing emerging technologies", "synthesized text": "\"{\\n\\\"name\\\": \\\"AI Ethics Evaluation Interface\\\",\\n\\\"description\\\": \\\"This interface uses the Perspective API to evaluate the ethical implications of AI technologies based on a description or a use case.\\\",\\n\\\"function_name\\\": \\\"evaluate_ai_ethics\\\",\\n\\\"input_args\\\": \\\"input_description - A string that describes an AI technology or a use case.\\\",\\n\\\"return\\\": \\\"A dictionary with scores for each of the requested attributes: Toxicity, Insult, Threat, and Severe Toxicity. The higher the score, the more potential ethical implications the technology might have.\\\",\\n\\\"depend\\\": \\\"Perspective API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A front-end developer specializing in HTML, CSS, and JavaScript, needing collaboration to integrate the frontend with Django backend", "synthesized text": "\"{\\n\\\"name\\\": \\\"Django Template Render Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of integrating HTML templates with the Django backend. It takes the name of an HTML template and a dictionary with the context variables, and returns a string with the rendered HTML.\\\",\\n\\\"function_name\\\": \\\"render_html_template\\\",\\n\\\"input_args\\\": {\\n    \\\"template_name\\\": \\\"The name of the HTML template file you want to render (must be a string and include the .html extension).\\\",\\n    \\\"context\\\": \\\"A dictionary with the context variables to use when rendering the template.\\\"\\n},\\n\\\"return\\\": \\\"A string with the rendered HTML.\\\",\\n\\\"depend\\\": \\\"Django\\\"\\n}\"", "description": "tool development"}
{"input persona": "As a local resident living in a small town in the UK where filming occasionally happens, I've just heard the news.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Film Production Notification Interface\\\",\\n\\\"description\\\": \\\"Uses the TMDB API to provide a list of movies that are currently being filmed in the provided town.\\\",\\n\\\"function_name\\\": \\\"get_filming_in_town\\\",\\n\\\"input_args\\\": \\\"town_name\\\",\\n\\\"return\\\": \\\"List of movie titles\\\",\\n\\\"depend\\\": \\\"requests, TMDB API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A newlywed couple recently moved into a fixer-upper, excited about its potential, but overwhelmed by the amount of work", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Home Renovation Project Prioritizer Interface\\\",\\n    \\\"description\\\": \\\"This interface uses a machine learning model to prioritize home renovation projects based on factors such as cost, time, and difficulty.\\\",\\n    \\\"function_name\\\": \\\"prioritize_projects\\\",\\n    \\\"input_args\\\": [\\n        {\\\"name\\\": \\\"projects\\\", \\\"type\\\": \\\"list\\\", \\\"description\\\": \\\"A list of dictionaries, with each dictionary representing a project and containing the features as keys.\\\"}\\n    ],\\n    \\\"return\\\": {\\n        \\\"type\\\": \\\"list\\\",\\n        \\\"description\\\": \\\"A list of dictionaries, with each dictionary representing a project, sorted by priority.\\\"\\n    },\\n    \\\"depend\\\": [\\\"pandas\\\", \\\"sklearn\\\"]\\n}\"", "description": "tool development"}
{"input persona": "I am a community organizer in the Winnie Madikizela-Mandela Local Municipality, deeply invested in the political and social development of my community, and an advocate for informed voting.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Political Candidate Information Interface\\\",\\n\\\"description\\\": \\\"Provides detailed information about political candidates such as their current office, party affiliation, contact information, and recent voting history.\\\",\\n\\\"function_name\\\": \\\"get_candidate_info\\\",\\n\\\"input_args\\\": {\\n    \\\"candidate_name\\\": \\\"The name of the political candidate to retrieve information for.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"name\\\": \\\"The full name of the candidate.\\\",\\n    \\\"current_office\\\": \\\"The office currently held by the candidate.\\\",\\n    \\\"party\\\": \\\"The political party of the candidate.\\\",\\n    \\\"contact\\\": \\\"The contact form URL for the candidate.\\\",\\n    \\\"votes\\\": \\\"The recent voting history of the candidate.\\\"\\n},\\n\\\"depend\\\": \\\"ProPublica Congress API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A technical support specialist for HERE API", "synthesized text": "\"{\\n\\\"name\\\": \\\"Geocoding Interface\\\",\\n\\\"description\\\": \\\"This interface takes in an address as input and returns the geographic coordinates (latitude and longitude) of that address by leveraging the HERE Geocoding and Search API.\\\",\\n\\\"function_name\\\": \\\"get_geocode_from_address\\\",\\n\\\"input_args\\\": {\\n    \\\"app_id\\\": \\\"The APP ID provided by HERE API\\\",\\n    \\\"app_code\\\": \\\"The APP CODE provided by HERE API\\\",\\n    \\\"address\\\": \\\"The address the user wants to find the geographic coordinates for\\\"\\n},\\n\\\"return\\\": \\\"The latitude and longitude of the input address\\\",\\n\\\"depend\\\": \\\"Python's requests and json libraries, HERE Geocoding and Search API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An excited mother waiting for a present she ordered for her son's 10th birthday", "synthesized text": "\"{\\n\\\"name\\\": \\\"Package Tracking Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to track the status of their package by simply providing their package's tracking number. The interface leverages APIs from various courier services.\\\",\\n\\\"function_name\\\": \\\"track_package\\\",\\n\\\"input_args\\\": \\\"tracking_number\\\",\\n\\\"return\\\": \\\"Package status (e.g., 'In transit', 'Delivered', 'Out for delivery', etc.)\\\",\\n\\\"depend\\\": \\\"Web APIs from courier services\\\"\\n}\"", "description": "tool development"}
{"input persona": "A claims adjuster who investigates and processes insurance claims for commercial vehicle accidents", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Vehicle Damage Assessment Interface\\\",\\n  \\\"description\\\": \\\"This interface uses a pre-trained model from TensorFlow Hub to recognize and classify damages in vehicle images. It requires the path to an image file and returns a list of detected damages.\\\",\\n  \\\"function_name\\\": \\\"assess_vehicle_damage\\\",\\n  \\\"input_args\\\": [\\\"path_to_img\\\"],\\n  \\\"return\\\": \\\"Damage type as an integer index (the specific damage class depends on the training of the model)\\\",\\n  \\\"depend\\\": \\\"tensorflow, tensorflow_hub, a pre-trained model from TensorFlow Hub\\\"\\n}\"", "description": "tool development"}
{"input persona": "A traditional business owner who is skeptical of changing employment rules and believes in maintaining strict regulations", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Regulation Compliance Checker Interface\\\",\\n  \\\"description\\\": \\\"An interface that checks the compliance of a new proposed employment rule with existing regulations. It returns a compliance rating indicating how well the new rule aligns with the existing rules.\\\",\\n  \\\"function_name\\\": \\\"check_compliance\\\",\\n  \\\"input_args\\\": \\\"new_rule - The text of the new proposed employment rule\\\",\\n  \\\"return\\\": \\\"A string indicating the compliance rating ('High Compliance', 'Medium Compliance', 'Low Compliance')\\\",\\n  \\\"depend\\\": [\\\"spacy\\\", \\\"openai\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A memoirist seeking guidance on how to craft their personal story into a gripping book", "synthesized text": "\"{\\n\\\"name\\\": \\\"Book Structure Suggestion Interface\\\",\\n\\\"description\\\": \\\"This interface takes a user's personal story as input and provides a suggested structure for their book, dividing the text into chapters and providing a summary for each chapter.\\\",\\n\\\"function_name\\\": \\\"suggest_book_structure\\\",\\n\\\"input_args\\\": [\\\"story\\\"],\\n\\\"return\\\": \\\"A dictionary with chapter numbers as keys and chapter summaries as values.\\\",\\n\\\"depend\\\": [\\\"NLTK\\\", \\\"Gensim\\\"]\\n}\"", "description": "tool development"}
{"input persona": "Polish political science student with a special interest in fringe parties.", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Political Party Popularity Tracker Interface\\\",\\n  \\\"description\\\": \\\"Tracks the online popularity of a given political party on Twitter, by returning the number of tweets mentioning the party in the last week.\\\",\\n  \\\"function_name\\\": \\\"get_party_popularity\\\",\\n  \\\"input_args\\\": [\\\"party_name\\\"],\\n  \\\"return\\\": \\\"Number of tweets mentioning the party in the last week\\\",\\n  \\\"depend\\\": \\\"Twitter API, tweepy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A musician who has a home studio and broadcasts music performances online", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Enhancement Interface\\\",\\n\\\"description\\\": \\\"This interface enhances the quality of audio files using a pre-trained model from TensorFlow Hub. It can help in noise reduction and improving the overall audio quality, which is beneficial for musicians broadcasting their performances online.\\\",\\n\\\"function_name\\\": \\\"enhance_audio\\\",\\n\\\"input_args\\\": \\\"path_to_audio - the path to the audio file to be enhanced\\\",\\n\\\"return\\\": \\\"enhanced_audio - the enhanced audio array, sample_rate - the sample rate of the audio\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, NumPy, SciPy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A college student majoring in film studies who seeks advice on building their own home theatre system", "synthesized text": "\"{\\n\\\"name\\\": \\\"Home Theatre System Recommendations Interface\\\",\\n\\\"description\\\": \\\"This interface fetches data on different home theatre systems from the Best Buy API. The user provides their budget and the interface returns a list of recommended home theatre systems within that budget.\\\",\\n\\\"function_name\\\": \\\"get_home_theatre_systems\\\",\\n\\\"input_args\\\": \\\"budget\\\",\\n\\\"return\\\": \\\"A list of recommended home theatre system names.\\\",\\n\\\"depend\\\": \\\"Best Buy API\\\"\\n}\"", "description": "tool development"}
{"input persona": "An economist who believes that welfare programs create dependency and hinder economic growth", "synthesized text": "\"{\\n\\\"name\\\": \\\"Economic Impact Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface fetches economic data and analyzes the correlation between welfare spending and economic growth using World Bank API and sklearn.\\\",\\n\\\"function_name\\\": \\\"analyze_impact\\\",\\n\\\"input_args\\\": {\\n    \\\"country\\\": \\\"string - an ISO ALPHA-2 country code\\\",\\n    \\\"start_year\\\": \\\"integer - the starting year of the period\\\",\\n    \\\"end_year\\\": \\\"integer - the ending year of the period\\\"\\n},\\n\\\"return\\\": \\\"float - a correlation coefficient between welfare spending and economic growth.\\\",\\n\\\"depend\\\": \\\"World Bank API, requests library, sklearn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A music producer who collaborates with God Is an Astronaut on their latest albums and provides behind-the-scenes insights", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Feature Extraction Interface\\\",\\n\\\"description\\\": \\\"Extracts features from an audio file such as Chroma Frequencies, Spectral Contrast, Tonnetz\\\",\\n\\\"function_name\\\": \\\"extract_features\\\",\\n\\\"input_args\\\": \\\"file_path\\\",\\n\\\"return\\\": {\\\"chroma\\\": \\\"chroma frequencies\\\", \\\"contrast\\\": \\\"spectral contrast\\\", \\\"tonnetz\\\": \\\"tonnetz\\\"},\\n\\\"depend\\\": \\\"librosa, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young mother-to-be who's been researching the benefits of stem cells and debating whether to store her baby's cord blood.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Cord Blood Diseases Detection Interface\\\",\\n\\\"description\\\": \\\"An interface to predict the likelihood of future diseases that could be treated with stem cells from cord blood.\\\",\\n\\\"function_name\\\": \\\"predict_disease_risks\\\",\\n\\\"input_args\\\": [\\\"age\\\", \\\"weight\\\", \\\"height\\\", \\\"medical_history\\\"],\\n\\\"return\\\": \\\"Predicted disease risks\\\",\\n\\\"depend\\\": [\\\"huggingface\\\", \\\"pandas\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A fellow Bulgarian physicist currently working outside of Europe", "synthesized text": "\"{\\n\\\"name\\\": \\\"Quantum Computing Simulator Interface\\\",\\n\\\"description\\\": \\\"This interface takes a quantum circuit as an input in the form of a string and simulates the circuit to return the quantum state.\\\",\\n\\\"function_name\\\": \\\"simulate_quantum_circuit\\\",\\n\\\"input_args\\\": \\\"circuit_string - A string representation of a quantum circuit\\\",\\n\\\"return\\\": \\\"A list containing the quantum state after simulating the input circuit\\\",\\n\\\"depend\\\": \\\"This function leverages the Qiskit library from IBM to simulate quantum circuits\\\"\\n}\"", "description": "tool development"}
{"input persona": "A laid-back engineer who adds a bit of humor to dry technical analysis", "synthesized text": "\"{\\n\\\"name\\\": \\\"Joke Generating Interface\\\",\\n\\\"description\\\": \\\"Fetches a joke from a specific category using JokeAPI. The user inputs a joke category, and the interface returns a joke from that category.\\\",\\n\\\"function_name\\\": \\\"get_joke\\\",\\n\\\"input_args\\\": \\\"category\\\",\\n\\\"return\\\": \\\"joke\\\",\\n\\\"depend\\\": \\\"JokeAPI\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Detroit Tigers fan who cannot stand Ian Kinsler", "synthesized text": "\"{\\n\\\"name\\\": \\\"Baseball Player Stats Interface\\\",\\n\\\"description\\\": \\\"This interface provides detailed statistics about a specific baseball player.\\\",\\n\\\"function_name\\\": \\\"get_player_stats\\\",\\n\\\"input_args\\\": [\\\"player_name\\\"],\\n\\\"return\\\": \\\"A detailed list of the player's performance statistics.\\\",\\n\\\"depend\\\": \\\"SportsOpenData API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A Hungarian paleontologist and marine biologist", "synthesized text": "\"{\\n\\\"name\\\": \\\"Fossil Age Determination Interface\\\",\\n\\\"description\\\": \\\"This interface uses a web API from a geological data provider to estimate the age of a fossil based on its type.\\\",\\n\\\"function_name\\\": \\\"get_fossil_age\\\",\\n\\\"input_args\\\": [\\\"fossil_type\\\"],\\n\\\"return\\\": \\\"Estimated age of the fossil\\\",\\n\\\"depend\\\": \\\"requests library, Geology.com API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A satisfied client who experienced the improved website firsthand and become a loyal customer", "synthesized text": "\"{\\n\\\"name\\\": \\\"Website Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze the performance of a website using Google's PageSpeed Insights API. Returns a summary of the performance metrics including Performance, Accessibility, Best Practices, and SEO.\\\",\\n\\\"function_name\\\": \\\"analyze_website_performance\\\",\\n\\\"input_args\\\": {\\n    \\\"url\\\": \\\"The URL of the website to analyze.\\\"\\n},\\n\\\"return\\\": {\\n    \\\"Performance\\\": \\\"Performance score of the website (0-1).\\\",\\n    \\\"Accessibility\\\": \\\"Accessibility score of the website (0-1).\\\",\\n    \\\"Best Practices\\\": \\\"Best Practices score of the website (0-1).\\\",\\n    \\\"SEO\\\": \\\"SEO score of the website (0-1).\\\"\\n},\\n\\\"depend\\\": {\\n    \\\"Python Libraries\\\": [\\\"requests\\\"],\\n    \\\"Web APIs\\\": [\\\"Google PageSpeed Insights API\\\"]\\n}\\n}\"", "description": "tool development"}
{"input persona": "A dyslexic software engineer who has built a successful career in the tech industry and offers tips on leveraging strengths in coding", "synthesized text": "\"{\\n\\\"name\\\": \\\"Code Spell-Check Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the PySpellChecker library to find and correct spelling mistakes in the input code.\\\",\\n\\\"function_name\\\": \\\"correct_spelling_in_code\\\",\\n\\\"input_args\\\": {\\\"code\\\": \\\"string\\\"},\\n\\\"return\\\": \\\"string (corrected code)\\\",\\n\\\"depend\\\": \\\"PySpellChecker library\\\"\\n}\"", "description": "tool development"}
{"input persona": "a teaching assistant in a probability and statistic college class", "synthesized text": "\"{\\n\\\"name\\\": \\\"Probability and Statistics Calculator Interface\\\",\\n\\\"description\\\": \\\"This interface simplifies the process of performing complex probability and statistics calculations by abstracting away the underlying libraries and formulas.\\\",\\n\\\"function_name\\\": \\\"calculate_binomial_distribution\\\",\\n\\\"input_args\\\": {\\\"trials\\\": \\\"The number of trials to perform\\\", \\\"probability\\\": \\\"The probability of success on a single trial\\\", \\\"outcome\\\": \\\"The outcome for which to calculate the probability\\\"},\\n\\\"return\\\": \\\"The probability of the specified outcome\\\",\\n\\\"depend\\\": \\\"numpy and scipy libraries\\\"\\n}\"", "description": "tool development"}
{"input persona": "A track and field athlete training for the long jump event, eager to apply physics concepts to enhance their performance", "synthesized text": "\"{\\n\\\"name\\\": \\\"Physics-based Long Jump Performance Improvement Interface\\\",\\n\\\"description\\\": \\\"This interface calculates the optimal speed and angle for a long jump based on the athlete's personal best, body mass, and maximum power.\\\",\\n\\\"function_name\\\": \\\"calculate_optimal_jump_parameters\\\",\\n\\\"input_args\\\": {\\n\\\"personal_best\\\": \\\"The athlete's personal best distance in the long jump (in meters)\\\",\\n\\\"body_mass\\\": \\\"The athlete's body mass (in kg)\\\",\\n\\\"max_power\\\": \\\"The maximum power the athlete can produce (in Watts)\\\"\\n},\\n\\\"return\\\": \\\"The optimal initial speed (in m/s) and angle (in degrees) for the long jump, or a message indicating the athlete needs to increase their maximum power.\\\",\\n\\\"depend\\\": \\\"Python's built-in math library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A souvenir shop owner who prides herself on offering authentic, locally-made items to tourists", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Product Authenticity Verification Interface\\\",\\n  \\\"description\\\": \\\"An interface using Scikit-learn to predict if a souvenir product in the shop is authentic or not\\\",\\n  \\\"function_name\\\": \\\"predict_product_authenticity\\\",\\n  \\\"input_args\\\": {\\n    \\\"place_of_origin\\\": \\\"The place where the product is made\\\",\\n    \\\"price\\\": \\\"The price of the product\\\",\\n    \\\"material\\\": \\\"The material of the product\\\"\\n  },\\n  \\\"return\\\": \\\"A string indicating whether the product is predicted to be 'Authentic' or 'Not Authentic'\\\",\\n  \\\"depend\\\": \\\"Scikit-learn library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A student who often takes the same route and shares their study tips and recommendations for things to do in Brisbane", "synthesized text": "\"{\\n\\\"name\\\": \\\"Route Recommendation Interface\\\",\\n\\\"description\\\": \\\"An interface that recommends the best routes from a starting location to a destination, providing information on travel time, distance, and points of interest along the way.\\\",\\n\\\"function_name\\\": \\\"get_route_recommendations\\\",\\n\\\"input_args\\\": [\\\"start_location\\\", \\\"end_location\\\"],\\n\\\"return\\\": \\\"A list of dictionaries, each representing a recommended route with information on the route summary, duration, distance, and steps (turn-by-turn directions).\\\",\\n\\\"depend\\\": \\\"Google Maps Directions API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A software engineer experienced in audio technology, providing insights on the feasibility and potential challenges of modernizing cassette tapes", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Signal Analysis Interface\\\",\\n\\\"description\\\": \\\"This interface uses the librosa library to extract important features from an audio file, which can help in assessing the quality and characteristics of audio recorded on a cassette tape.\\\",\\n\\\"function_name\\\": \\\"analyze_audio_file\\\",\\n\\\"input_args\\\": \\\"file_path - The path to the audio file\\\",\\n\\\"return\\\": \\\"A dictionary with the calculated features: Spectral Centroid, Spectral Rolloff, Spectral Flux, Zero Crossing Rate\\\",\\n\\\"depend\\\": \\\"librosa, numpy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chiropractor who recommends Tempur-Pedic mattresses to their patients for optimal support", "synthesized text": "\"{\\n    \\\"name\\\": \\\"Mattress Recommendation Interface\\\",\\n    \\\"description\\\": \\\"Fetches Tempur-Pedic mattress details from an e-commerce API\\\",\\n    \\\"function_name\\\": \\\"get_mattress_details\\\",\\n    \\\"input_args\\\": \\\"mattress_type\\\",\\n    \\\"return\\\": \\\"A list of product details including price, dimensions, and reviews\\\",\\n    \\\"depend\\\": \\\"requests library, E-commerce API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A member of the organizing committee of the Copa LP Chile", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Match Schedule Generation Interface\\\",\\n  \\\"description\\\": \\\"Generates a round-robin match schedule for a tournament ensuring each team plays against every other team once.\\\",\\n  \\\"function_name\\\": \\\"generate_match_schedule\\\",\\n  \\\"input_args\\\": {\\n    \\\"teams_list\\\": \\\"A list of team names participating in the tournament.\\\"\\n  },\\n  \\\"return\\\": \\\"A list of match pairings. Each pairing is a tuple of two teams that will play against each other.\\\",\\n  \\\"depend\\\": \\\"Python's built-in itertools library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A chemist working on developing eco-friendly solvents for oil extraction", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solubility Prediction Interface\\\",\\n\\\"description\\\": \\\"An interface that enables users to predict the solubility of a chemical compound. It uses the RDKit library for prediction.\\\",\\n\\\"function_name\\\": \\\"predict_solubility\\\",\\n\\\"input_args\\\": \\\"A string representing a chemical compound in SMILES notation\\\",\\n\\\"return\\\": \\\"Predicted solubility (logP) of the compound\\\",\\n\\\"depend\\\": \\\"RDKit library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A curator of a popular art conservation blog who provides valuable resources and practical tips for aspiring art conservators", "synthesized text": "\"{\\n\\\"name\\\": \\\"Art Damage Detection Interface\\\",\\n\\\"description\\\": \\\"A high-level interface to detect damage or changes in artwork images using deep learning. The interface takes in the paths to two image files \\u2013 the original and potentially damaged artwork \\u2013 and returns a damage score indicating the extent of change or possible damage.\\\",\\n\\\"function_name\\\": \\\"detect_artwork_damage\\\",\\n\\\"input_args\\\": [\\\"original_artwork_path\\\", \\\"potentially_damaged_artwork_path\\\"],\\n\\\"return\\\": \\\"Damage score (float). The closer the score is to 0, the less likely the artwork is damaged. The closer the score is to 1, the more likely the artwork is damaged.\\\",\\n\\\"depend\\\": \\\"TensorFlow, TensorFlow Hub, Scipy\\\"\\n}\"", "description": "tool development"}
{"input persona": "A sound engineer who relies on the sales representative's recommendations for audio equipment", "synthesized text": "\"{\\n\\\"name\\\": \\\"Audio Equipment Recommendation Interface\\\",\\n\\\"description\\\": \\\"This interface uses a pre-trained recommendation system machine learning model to provide audio equipment recommendations. The user needs to input the type of equipment they are interested in, and the interface will return a list of recommended audio equipment based on sales data.\\\",\\n\\\"function_name\\\": \\\"get_recommendations\\\",\\n\\\"input_args\\\": {\\n    \\\"equipment_type\\\": \\\"Type of the equipment the user is interested in (string).\\\",\\n    \\\"num_recommendations\\\": \\\"Number of recommendations to return (integer, optional, default is 5).\\\"\\n},\\n\\\"return\\\": \\\"A list of recommended audio equipment (list of strings).\\\",\\n\\\"depend\\\": \\\"Pandas, Scikit-learn's TfidfVectorizer and linear_kernel\\\"\\n}\"", "description": "tool development"}
{"input persona": "A neighbor of Pengiran Puteh Alam who adores and highly respects him", "synthesized text": "\"{\\n\\\"name\\\": \\\"English to Malay Translation Interface\\\",\\n\\\"description\\\": \\\"Translates English text to Malay using a pre-trained model from Hugging Face's transformers library\\\",\\n\\\"function_name\\\": \\\"translate_english_to_malay\\\",\\n\\\"input_args\\\": {\\\"english_text\\\": \\\"text\\\"},\\n\\\"return\\\": \\\"Translated Malay text\\\",\\n\\\"depend\\\": [\\\"Hugging Face's transformers library\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A retired professional boxer who once competed in the same era as Miguel Montilla", "synthesized text": "\"{\\n\\\"name\\\": \\\"Boxing Statistics Interface\\\",\\n\\\"description\\\": \\\"This interface takes the name of a professional boxer as input and returns the boxer's statistics including total fights, wins, losses, draws, and knockouts.\\\",\\n\\\"function_name\\\": \\\"get_boxer_stats\\\",\\n\\\"input_args\\\": \\\"boxer_name\\\",\\n\\\"return\\\": \\\"A dictionary with keys 'total_fights', 'wins', 'losses', 'draws', 'knockouts' and their respective values.\\\",\\n\\\"depend\\\": \\\"BoxRec API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A popular vlogger known for crafting tutorials, especially those involving Cricut machines.", "synthesized text": "\"{\\n\\\"name\\\": \\\"SVG to Cricut Design Space Import Interface\\\",\\n\\\"description\\\": \\\"An interface that takes in the path of an SVG file and converts it to a PNG file compatible with Cricut Design Space.\\\",\\n\\\"function_name\\\": \\\"convert_svg_to_png\\\", \\n\\\"input_args\\\": {\\\"svg_path\\\": \\\"The path to the SVG file to be converted.\\\"},\\n\\\"return\\\": \\\"The path to the created PNG file.\\\",\\n\\\"depend\\\": {\\\"Python Libraries\\\": [\\\"PIL\\\", \\\"os\\\"]}\\n}\"", "description": "tool development"}
{"input persona": "A recent graduate interested in the tech industry, looking for advice on how to break into the mobile app sector", "synthesized text": "\"{\\n\\\"name\\\": \\\"App Store Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to analyze top trending apps, their categories, and user reviews from specified app store (Apple or Google). Provides insights into current market trends to help users make informed decisions about which type of app to develop.\\\",\\n\\\"function_name\\\": \\\"get_trending_apps\\\",\\n\\\"input_args\\\": \\\"store\\\",\\n\\\"return\\\": \\\"List of dictionaries, each containing the name, category, and user rating of a top trending app.\\\",\\n\\\"depend\\\": \\\"requests library, Apple App Store API or Google Play Store API\\\"\\n}\"", "description": "tool development"}
{"input persona": "A renewable energy company providing solar panel systems for the eco-friendly headquarters", "synthesized text": "\"{\\n\\\"name\\\": \\\"Solar Energy Potential Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface to get the yearly average solar irradiance of a location from the NASA POWER web service.\\\",\\n\\\"function_name\\\": \\\"get_solar_energy_potential\\\",\\n\\\"input_args\\\": {\\n    \\\"latitude\\\": \\\"Latitude of the location\\\",\\n    \\\"longitude\\\": \\\"Longitude of the location\\\"\\n},\\n\\\"return\\\": \\\"This function returns the yearly average solar irradiance of the location in kWh/m2/day.\\\",\\n\\\"depend\\\": \\\"This function depends on the NASA POWER web service.\\\"\\n}\"", "description": "tool development"}
{"input persona": "An experienced backend developer who has successfully implemented Quarkus in multiple projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Database Query Interface\\\",\\n\\\"description\\\": \\\"An interface that allows users to easily execute SQL queries on a database by providing the database URL and the query. The result of the query is returned as a list of tuples, where each tuple represents a row in the result set.\\\",\\n\\\"function_name\\\": \\\"execute_sql_query\\\",\\n\\\"input_args\\\": [\\n    {\\n        \\\"name\\\": \\\"database_url\\\",\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"description\\\": \\\"The URL of the database to connect to.\\\"\\n    },\\n    {\\n        \\\"name\\\": \\\"query\\\",\\n        \\\"type\\\": \\\"string\\\",\\n        \\\"description\\\": \\\"The SQL query to execute on the database.\\\"\\n    }\\n],\\n\\\"return\\\": {\\n    \\\"description\\\": \\\"The result of the SQL query as a list of tuples. Each tuple represents a row in the result set.\\\",\\n    \\\"type\\\": \\\"list of tuples\\\"\\n},\\n\\\"depend\\\": \\\"SQLAlchemy library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A startup founder who wants to incorporate blockchain technology into their company's operations", "synthesized text": "\"{\\n\\\"name\\\": \\\"Blockchain Transaction Interface\\\",\\n\\\"description\\\": \\\"This interface allows users to conduct transactions on the Ethereum blockchain. It requires users' private key, the recipient's address, and the amount of Ether to be sent. The interface returns the transaction hash.\\\",\\n\\\"function_name\\\": \\\"send_ethereum_transaction\\\",\\n\\\"input_args\\\": [\\\"private_key\\\", \\\"recipient_address\\\", \\\"amount\\\"],\\n\\\"return\\\": \\\"transaction_hash\\\",\\n\\\"depend\\\": \\\"web3.py library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A governing body representative responsible for overseeing and managing the operations of multiple universities' athletics", "synthesized text": "\"{\\n\\\"name\\\": \\\"Student Athlete Performance Analysis Interface\\\",\\n\\\"description\\\": \\\"An interface that predicts the future performance of student athletes based on their historical performance metrics.\\\",\\n\\\"function_name\\\": \\\"predict_athlete_performance\\\",\\n\\\"input_args\\\": \\\"csv_file - A CSV file containing the student athlete's performance metrics\\\",\\n\\\"return\\\": \\\"performance_prediction - A prediction of the student athlete's future performance\\\",\\n\\\"depend\\\": \\\"Pandas, TensorFlow, Scikit-learn\\\"\\n}\"", "description": "tool development"}
{"input persona": "a pupil who was taught by Dr. Frank Hampel", "synthesized text": "\"{\\n\\\"name\\\": \\\"Statistical Outlier Detection Interface\\\",\\n\\\"description\\\": \\\"A high-level function that uses Hampel Identifier to detect outliers in a given list of numbers.\\\",\\n\\\"function_name\\\": \\\"hampel_identifier\\\",\\n\\\"input_args\\\": [\\\"input_list\\\", \\\"window_size\\\", \\\"n_sigmas\\\"],\\n\\\"return\\\": \\\"A list of boolean values indicating whether each number in the input list is an outlier.\\\",\\n\\\"depend\\\": [\\\"numpy\\\"]\\n}\"", "description": "tool development"}
{"input persona": "a huge fan of \"The Fresh Prince of Bel-Air\" and a technology worker", "synthesized text": "\"{\\n\\\"name\\\": \\\"TV Show Episode Summary Interface\\\",\\n\\\"description\\\": \\\"This interface provides episode summaries of 'The Fresh Prince of Bel-Air' using the TVmaze API. Users input the season and episode number and the interface returns the summary of that specific episode.\\\",\\n\\\"function_name\\\": \\\"get_episode_summary\\\",\\n\\\"input_args\\\": [\\\"season\\\", \\\"episode\\\"],\\n\\\"return\\\": \\\"A string that is the summary of the input episode from 'The Fresh Prince of Bel-Air'.\\\",\\n\\\"depend\\\": \\\"TVmaze API\\\"\\n}\"", "description": "tool development"}
{"input persona": "一个对体育感兴趣却重点关注足球和篮球，对花样滑冰了解较少的体育节目评论员。", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sports Score Retrieval Interface\\\",\\n\\\"description\\\": \\\"This interface retrieves the latest scores for a specified sports match, such as football or basketball. The user simply needs to input the type of sport and the specific match they are interested in.\\\",\\n\\\"function_name\\\": \\\"get_sports_scores\\\",\\n\\\"input_args\\\": [\\\"sport_type\\\", \\\"match\\\"],\\n\\\"return\\\": \\\"The latest score of the specified match.\\\",\\n\\\"depend\\\": [\\\"requests library\\\", \\\"OpenLigaDB API or other sports score APIs\\\"]\\n}\"", "description": "tool development"}
{"input persona": "A carpenter who uses math every day to measure and calculate dimensions of various projects", "synthesized text": "\"{\\n\\\"name\\\": \\\"Carpentry Calculation Interface\\\",\\n\\\"description\\\": \\\"An interface that performs useful calculations for carpentry tasks, including calculating the area of a circle, the diagonal of a rectangle, and translating inches to centimeters.\\\",\\n\\\"function_name\\\": [\\\"calculate_circle_area\\\", \\\"calculate_rectangle_diagonal\\\", \\\"inches_to_centimeters\\\"],\\n\\\"input_args\\\": [\\\"diameter\\\", \\\"length, width\\\", \\\"inches\\\"],\\n\\\"return\\\": [\\\"Circle area\\\", \\\"Rectangle diagonal\\\", \\\"Centimeters\\\"],\\n\\\"depend\\\": \\\"Python's built-in math library\\\"\\n}\"", "description": "tool development"}
{"input persona": "A young entrepreneur with a lemonade stand who learns about business practices from the teacher's initiative", "synthesized text": "\"{\\n\\\"name\\\": \\\"Sales Forecast Interface\\\",\\n\\\"description\\\": \\\"This interface predicts future sales based on past sales data.\\\",\\n\\\"function_name\\\": \\\"get_sales_forecast\\\",\\n\\\"input_args\\\": \\\"csv_file\\\",\\n\\\"return\\\": \\\"forecast[0][0]\\\",\\n\\\"depend\\\": \\\"pandas, sklearn\\\"\\n}\"", "description": "tool development"}
{"input persona": "A philosopher who believes that reason alone cannot fully explain the complexities of the universe", "synthesized text": "\"{\\n  \\\"name\\\": \\\"Quantum State Prediction Interface\\\",\\n  \\\"description\\\": \\\"Predict the next state of a quantum system using a pre-trained quantum machine learning model from TensorFlow Quantum.\\\",\\n  \\\"function_name\\\": \\\"predict_quantum_state\\\",\\n  \\\"input_args\\\": \\\"current_state - The current state of the quantum system as a string.\\\",\\n  \\\"return\\\": \\\"A string representation of the predicted next state of the quantum system.\\\",\\n  \\\"depend\\\": \\\"TensorFlow Quantum (TFQ), TensorFlow, and Cirq\\\"\\n}\"", "description": "tool development"}
{"input persona": "An independent dentist running a small clinic", "synthesized text": "\"{\\n\\\"name\\\": \\\"Appointment Scheduler Interface\\\",\\n\\\"description\\\": \\\"This interface schedules appointments for a dentist using the Python schedule library. The user only needs to input the patient's name, date, and time for the appointment.\\\",\\n\\\"function_name\\\": \\\"schedule_appointment\\\",\\n\\\"input_args\\\": {\\n    \\\"patient_name\\\": \\\"String - Name of the patient\\\",\\n    \\\"date\\\": \\\"String - Date for the appointment in YYYY-MM-DD format\\\",\\n    \\\"time\\\": \\\"String - Time for the appointment in HH:MM format\\\"\\n},\\n\\\"return\\\": \\\"String - A confirmation message stating that the appointment has been scheduled.\\\",\\n\\\"depend\\\": \\\"Python Library - schedule\\\"\\n}\"", "description": "tool development"}
{"input persona": "A casual movie-goer who starts dozing off when the running time is longer than 90 minutes.", "synthesized text": "\"{\\n\\\"name\\\": \\\"Movie Runtime Filter Interface\\\",\\n\\\"description\\\": \\\"This interface filters movies from a specified genre that have a running time of less than 90 minutes.\\\",\\n\\\"function_name\\\": \\\"get_short_movies\\\",\\n\\\"input_args\\\": \\\"genre\\\",\\n\\\"return\\\": \\\"A list of movie titles\\\",\\n\\\"depend\\\": \\\"TMDB (The Movie Database) API\\\"\\n}\"", "description": "tool development"}
{"input persona": "a retired political science professor who has worked with Edward F. Reilly Jr. in the past", "synthesized text": "\"{\\n\\\"name\\\": \\\"Publications Search Interface\\\",\\n\\\"description\\\": \\\"An interface that uses the CrossRef REST API to find recent publications by a specified author.\\\",\\n\\\"function_name\\\": \\\"get_recent_publications\\\",\\n\\\"input_args\\\": \\\"researcher_name\\\",\\n\\\"return\\\": \\\"A list of titles of recent publications by the specified author.\\\",\\n\\\"depend\\\": \\\"CrossRef REST API\\\"\\n}\"", "description": "tool development"}
